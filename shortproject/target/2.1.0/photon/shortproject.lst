
/Users/talalagedeon/Desktop/particlePDP/shortproject/target/2.1.0/photon/shortproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002544  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2560  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a2564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004f8  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a25cc  080a25cc  000225cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a25f4  080a25f4  000225f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010962c  00000000  00000000  000225f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013458  00000000  00000000  0012bc24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016844  00000000  00000000  0013f07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d00  00000000  00000000  001558c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000049f0  00000000  00000000  001575c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002689c  00000000  00000000  0015bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a1c1  00000000  00000000  0018284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1cff  00000000  00000000  001aca0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004a08  00000000  00000000  0025e70c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f97f 	bl	80a2330 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f987 	bl	80a234c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2564 	.word	0x080a2564
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000560 	.word	0x20000560
 80a0058:	20000560 	.word	0x20000560

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f917 	bl	80a1290 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a253c 	.word	0x080a253c
 80a0080:	080a255c 	.word	0x080a255c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f827 	bl	80a00dc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 b8bf 	b.w	80a1214 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 bc17 	b.w	80a08c8 <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 bc1d 	b.w	80a08d8 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:

#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);

void setup() {
 80a00b0:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80a00b2:	f000 ffb3 	bl	80a101c <_Z16_fetch_usbserialv>
 80a00b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ba:	f000 ff95 	bl	80a0fe8 <_ZN9USBSerial5beginEl>
  Serial.println("DHT11 test");
 80a00be:	f000 ffad 	bl	80a101c <_Z16_fetch_usbserialv>
 80a00c2:	4904      	ldr	r1, [pc, #16]	; (80a00d4 <setup+0x24>)
 80a00c4:	f000 fd75 	bl	80a0bb2 <_ZN5Print7printlnEPKc>
  
  dht.begin();
}
 80a00c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dht.begin();
 80a00cc:	4802      	ldr	r0, [pc, #8]	; (80a00d8 <setup+0x28>)
 80a00ce:	f000 b85d 	b.w	80a018c <_ZN3DHT5beginEv>
 80a00d2:	bf00      	nop
 80a00d4:	080a23c8 	.word	0x080a23c8
 80a00d8:	2000006c 	.word	0x2000006c

080a00dc <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00dc:	b570      	push	{r4, r5, r6, lr}
  delay(2000);
 80a00de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a00e2:	f000 fc09 	bl	80a08f8 <delay>

  float h = dht.getHumidity();
 80a00e6:	481e      	ldr	r0, [pc, #120]	; (80a0160 <loop+0x84>)
 80a00e8:	f000 fa4e 	bl	80a0588 <_ZN3DHT11getHumidityEv>
 80a00ec:	4604      	mov	r4, r0
  float t = dht.getTempCelcius();
 80a00ee:	481c      	ldr	r0, [pc, #112]	; (80a0160 <loop+0x84>)
 80a00f0:	f000 fa0e 	bl	80a0510 <_ZN3DHT14getTempCelciusEv>
 80a00f4:	4606      	mov	r6, r0
  float f = dht.getTempFarenheit();
 80a00f6:	481a      	ldr	r0, [pc, #104]	; (80a0160 <loop+0x84>)
 80a00f8:	f000 fa0c 	bl	80a0514 <_ZN3DHT16getTempFarenheitEv>

  if (isnan(h) || isnan(t) || isnan(f)){
 80a00fc:	4621      	mov	r1, r4
  float f = dht.getTempFarenheit();
 80a00fe:	4605      	mov	r5, r0
  if (isnan(h) || isnan(t) || isnan(f)){
 80a0100:	4620      	mov	r0, r4
 80a0102:	f002 f8cb 	bl	80a229c <__aeabi_fcmpun>
 80a0106:	b948      	cbnz	r0, 80a011c <loop+0x40>
 80a0108:	4631      	mov	r1, r6
 80a010a:	4630      	mov	r0, r6
 80a010c:	f002 f8c6 	bl	80a229c <__aeabi_fcmpun>
 80a0110:	b920      	cbnz	r0, 80a011c <loop+0x40>
 80a0112:	4629      	mov	r1, r5
 80a0114:	4628      	mov	r0, r5
 80a0116:	f002 f8c1 	bl	80a229c <__aeabi_fcmpun>
 80a011a:	b130      	cbz	r0, 80a012a <loop+0x4e>
    Serial.println("Failed to read from DHT sensor");
 80a011c:	f000 ff7e 	bl	80a101c <_Z16_fetch_usbserialv>
  }

  Serial.print('Humid: ', h);
  Serial.print(h);

 80a0120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("Failed to read from DHT sensor");
 80a0124:	490f      	ldr	r1, [pc, #60]	; (80a0164 <loop+0x88>)
 80a0126:	f000 bd44 	b.w	80a0bb2 <_ZN5Print7printlnEPKc>
  Serial.print('Humid: ', h);
 80a012a:	f000 ff77 	bl	80a101c <_Z16_fetch_usbserialv>
 80a012e:	4605      	mov	r5, r0
 80a0130:	4620      	mov	r0, r4
 80a0132:	f002 f8c9 	bl	80a22c8 <__aeabi_f2iz>

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 80a0136:	b960      	cbnz	r0, 80a0152 <loop+0x76>
        return write(n);
 80a0138:	682b      	ldr	r3, [r5, #0]
 80a013a:	2120      	movs	r1, #32
 80a013c:	4628      	mov	r0, r5
 80a013e:	689b      	ldr	r3, [r3, #8]
 80a0140:	4798      	blx	r3
  Serial.print(h);
 80a0142:	f000 ff6b 	bl	80a101c <_Z16_fetch_usbserialv>
 80a0146:	4621      	mov	r1, r4
 80a0148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Serial.print(h);
 80a014c:	2202      	movs	r2, #2
 80a014e:	f000 be17 	b.w	80a0d80 <_ZN5Print5printEfi>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0152:	b2c2      	uxtb	r2, r0
 80a0154:	4904      	ldr	r1, [pc, #16]	; (80a0168 <loop+0x8c>)
 80a0156:	4628      	mov	r0, r5
 80a0158:	f000 fd35 	bl	80a0bc6 <_ZN5Print11printNumberEmh>
 80a015c:	e7f1      	b.n	80a0142 <loop+0x66>
 80a015e:	bf00      	nop
 80a0160:	2000006c 	.word	0x2000006c
 80a0164:	080a23d3 	.word	0x080a23d3
 80a0168:	69643a20 	.word	0x69643a20

080a016c <_GLOBAL__sub_I_dht>:
DHT dht(DHTPIN, DHTTYPE);
 80a016c:	2306      	movs	r3, #6
 80a016e:	220b      	movs	r2, #11
 80a0170:	210a      	movs	r1, #10
 80a0172:	4801      	ldr	r0, [pc, #4]	; (80a0178 <_GLOBAL__sub_I_dht+0xc>)
 80a0174:	f000 b802 	b.w	80a017c <_ZN3DHTC1Ehhh>
 80a0178:	2000006c 	.word	0x2000006c

080a017c <_ZN3DHTC1Ehhh>:
#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
	_type = type;
	_count = count;
 80a017c:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 80a017e:	2301      	movs	r3, #1
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 80a0180:	b510      	push	{r4, lr}
	_pin = pin;
 80a0182:	7181      	strb	r1, [r0, #6]
	_type = type;
 80a0184:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
 80a0186:	7403      	strb	r3, [r0, #16]
}
 80a0188:	bd10      	pop	{r4, pc}
	...

080a018c <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 80a018c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0190:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0192:	4c1a      	ldr	r4, [pc, #104]	; (80a01fc <_ZN3DHT5beginEv+0x70>)
// set up the pins!
	pinMode(_pin, INPUT);
 80a0194:	2100      	movs	r1, #0
 80a0196:	7980      	ldrb	r0, [r0, #6]
 80a0198:	f001 f8fa 	bl	80a1390 <pinMode>
	pinSetFast(_pin);
 80a019c:	79ae      	ldrb	r6, [r5, #6]
 80a019e:	7823      	ldrb	r3, [r4, #0]
 80a01a0:	4f17      	ldr	r7, [pc, #92]	; (80a0200 <_ZN3DHT5beginEv+0x74>)
 80a01a2:	f013 0f01 	tst.w	r3, #1
 80a01a6:	f3bf 8f5b 	dmb	ish
 80a01aa:	d109      	bne.n	80a01c0 <_ZN3DHT5beginEv+0x34>
 80a01ac:	4620      	mov	r0, r4
 80a01ae:	f7ff ff76 	bl	80a009e <__cxa_guard_acquire>
 80a01b2:	b128      	cbz	r0, 80a01c0 <_ZN3DHT5beginEv+0x34>
 80a01b4:	f000 fa12 	bl	80a05dc <HAL_Pin_Map>
 80a01b8:	6038      	str	r0, [r7, #0]
 80a01ba:	4620      	mov	r0, r4
 80a01bc:	f7ff ff74 	bl	80a00a8 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a01c0:	231c      	movs	r3, #28
 80a01c2:	435e      	muls	r6, r3
 80a01c4:	683b      	ldr	r3, [r7, #0]
 80a01c6:	eb03 0806 	add.w	r8, r3, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a01ca:	7823      	ldrb	r3, [r4, #0]
 80a01cc:	f3bf 8f5b 	dmb	ish
 80a01d0:	07db      	lsls	r3, r3, #31
 80a01d2:	d409      	bmi.n	80a01e8 <_ZN3DHT5beginEv+0x5c>
 80a01d4:	4809      	ldr	r0, [pc, #36]	; (80a01fc <_ZN3DHT5beginEv+0x70>)
 80a01d6:	f7ff ff62 	bl	80a009e <__cxa_guard_acquire>
 80a01da:	b128      	cbz	r0, 80a01e8 <_ZN3DHT5beginEv+0x5c>
 80a01dc:	f000 f9fe 	bl	80a05dc <HAL_Pin_Map>
 80a01e0:	6038      	str	r0, [r7, #0]
 80a01e2:	4806      	ldr	r0, [pc, #24]	; (80a01fc <_ZN3DHT5beginEv+0x70>)
 80a01e4:	f7ff ff60 	bl	80a00a8 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a01e8:	683b      	ldr	r3, [r7, #0]
 80a01ea:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a01ee:	599b      	ldr	r3, [r3, r6]
 80a01f0:	831a      	strh	r2, [r3, #24]
	_lastreadtime = 0;
 80a01f2:	2300      	movs	r3, #0
 80a01f4:	60eb      	str	r3, [r5, #12]
}
 80a01f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a01fa:	bf00      	nop
 80a01fc:	20000080 	.word	0x20000080
 80a0200:	20000084 	.word	0x20000084

080a0204 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
 80a0204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0208:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a020a:	f000 f9df 	bl	80a05cc <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 80a020e:	68e3      	ldr	r3, [r4, #12]
 80a0210:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 80a0212:	bf84      	itt	hi
 80a0214:	2300      	movhi	r3, #0
 80a0216:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a0218:	7c23      	ldrb	r3, [r4, #16]
 80a021a:	b92b      	cbnz	r3, 80a0228 <_ZN3DHT4readEv+0x24>
 80a021c:	68e3      	ldr	r3, [r4, #12]
 80a021e:	1ac0      	subs	r0, r0, r3
 80a0220:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80a0224:	f0c0 813e 	bcc.w	80a04a4 <_ZN3DHT4readEv+0x2a0>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 80a0228:	2500      	movs	r5, #0
 80a022a:	7425      	strb	r5, [r4, #16]
 80a022c:	f000 f9ce 	bl	80a05cc <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0230:	4e9e      	ldr	r6, [pc, #632]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a0232:	6025      	str	r5, [r4, #0]
 80a0234:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
 80a0236:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
 80a0238:	79a7      	ldrb	r7, [r4, #6]
 80a023a:	7833      	ldrb	r3, [r6, #0]
 80a023c:	4d9c      	ldr	r5, [pc, #624]	; (80a04b0 <_ZN3DHT4readEv+0x2ac>)
 80a023e:	f013 0f01 	tst.w	r3, #1
 80a0242:	f3bf 8f5b 	dmb	ish
 80a0246:	d109      	bne.n	80a025c <_ZN3DHT4readEv+0x58>
 80a0248:	4630      	mov	r0, r6
 80a024a:	f7ff ff28 	bl	80a009e <__cxa_guard_acquire>
 80a024e:	b128      	cbz	r0, 80a025c <_ZN3DHT4readEv+0x58>
 80a0250:	f000 f9c4 	bl	80a05dc <HAL_Pin_Map>
 80a0254:	6028      	str	r0, [r5, #0]
 80a0256:	4630      	mov	r0, r6
 80a0258:	f7ff ff26 	bl	80a00a8 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a025c:	231c      	movs	r3, #28
 80a025e:	435f      	muls	r7, r3
 80a0260:	682b      	ldr	r3, [r5, #0]
 80a0262:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0266:	7833      	ldrb	r3, [r6, #0]
 80a0268:	f3bf 8f5b 	dmb	ish
 80a026c:	07d9      	lsls	r1, r3, #31
 80a026e:	d409      	bmi.n	80a0284 <_ZN3DHT4readEv+0x80>
 80a0270:	488e      	ldr	r0, [pc, #568]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a0272:	f7ff ff14 	bl	80a009e <__cxa_guard_acquire>
 80a0276:	b128      	cbz	r0, 80a0284 <_ZN3DHT4readEv+0x80>
 80a0278:	f000 f9b0 	bl	80a05dc <HAL_Pin_Map>
 80a027c:	6028      	str	r0, [r5, #0]
 80a027e:	488b      	ldr	r0, [pc, #556]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a0280:	f7ff ff12 	bl	80a00a8 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0284:	682b      	ldr	r3, [r5, #0]
 80a0286:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a028a:	59db      	ldr	r3, [r3, r7]
	delay(250);
 80a028c:	20fa      	movs	r0, #250	; 0xfa
 80a028e:	831a      	strh	r2, [r3, #24]
 80a0290:	f000 fb32 	bl	80a08f8 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 80a0294:	2101      	movs	r1, #1
 80a0296:	79a0      	ldrb	r0, [r4, #6]
 80a0298:	f001 f87a 	bl	80a1390 <pinMode>
	pinResetFast(_pin);
 80a029c:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a029e:	7833      	ldrb	r3, [r6, #0]
 80a02a0:	f3bf 8f5b 	dmb	ish
 80a02a4:	07da      	lsls	r2, r3, #31
 80a02a6:	d409      	bmi.n	80a02bc <_ZN3DHT4readEv+0xb8>
 80a02a8:	4880      	ldr	r0, [pc, #512]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a02aa:	f7ff fef8 	bl	80a009e <__cxa_guard_acquire>
 80a02ae:	b128      	cbz	r0, 80a02bc <_ZN3DHT4readEv+0xb8>
 80a02b0:	f000 f994 	bl	80a05dc <HAL_Pin_Map>
 80a02b4:	6028      	str	r0, [r5, #0]
 80a02b6:	487d      	ldr	r0, [pc, #500]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a02b8:	f7ff fef6 	bl	80a00a8 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a02bc:	231c      	movs	r3, #28
 80a02be:	435f      	muls	r7, r3
 80a02c0:	682b      	ldr	r3, [r5, #0]
 80a02c2:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a02c6:	7833      	ldrb	r3, [r6, #0]
 80a02c8:	f3bf 8f5b 	dmb	ish
 80a02cc:	07db      	lsls	r3, r3, #31
 80a02ce:	d409      	bmi.n	80a02e4 <_ZN3DHT4readEv+0xe0>
 80a02d0:	4876      	ldr	r0, [pc, #472]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a02d2:	f7ff fee4 	bl	80a009e <__cxa_guard_acquire>
 80a02d6:	b128      	cbz	r0, 80a02e4 <_ZN3DHT4readEv+0xe0>
 80a02d8:	f000 f980 	bl	80a05dc <HAL_Pin_Map>
 80a02dc:	6028      	str	r0, [r5, #0]
 80a02de:	4873      	ldr	r0, [pc, #460]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a02e0:	f7ff fee2 	bl	80a00a8 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRH = fastPinGetPinmap()[_pin].gpio_pin;
 80a02e4:	682b      	ldr	r3, [r5, #0]
 80a02e6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a02ea:	59db      	ldr	r3, [r3, r7]
	delay(20);
 80a02ec:	2014      	movs	r0, #20
 80a02ee:	835a      	strh	r2, [r3, #26]
 80a02f0:	f000 fb02 	bl	80a08f8 <delay>
	noInterrupts();
 80a02f4:	f000 fb4a 	bl	80a098c <_Z12noInterruptsv>
	pinSetFast(_pin);
 80a02f8:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a02fa:	7833      	ldrb	r3, [r6, #0]
 80a02fc:	f3bf 8f5b 	dmb	ish
 80a0300:	07d8      	lsls	r0, r3, #31
 80a0302:	d409      	bmi.n	80a0318 <_ZN3DHT4readEv+0x114>
 80a0304:	4869      	ldr	r0, [pc, #420]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a0306:	f7ff feca 	bl	80a009e <__cxa_guard_acquire>
 80a030a:	b128      	cbz	r0, 80a0318 <_ZN3DHT4readEv+0x114>
 80a030c:	f000 f966 	bl	80a05dc <HAL_Pin_Map>
 80a0310:	6028      	str	r0, [r5, #0]
 80a0312:	4866      	ldr	r0, [pc, #408]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a0314:	f7ff fec8 	bl	80a00a8 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0318:	231c      	movs	r3, #28
 80a031a:	435f      	muls	r7, r3
 80a031c:	682b      	ldr	r3, [r5, #0]
 80a031e:	eb03 0807 	add.w	r8, r3, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0322:	7833      	ldrb	r3, [r6, #0]
 80a0324:	f3bf 8f5b 	dmb	ish
 80a0328:	07d9      	lsls	r1, r3, #31
 80a032a:	d409      	bmi.n	80a0340 <_ZN3DHT4readEv+0x13c>
 80a032c:	485f      	ldr	r0, [pc, #380]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a032e:	f7ff feb6 	bl	80a009e <__cxa_guard_acquire>
 80a0332:	b128      	cbz	r0, 80a0340 <_ZN3DHT4readEv+0x13c>
 80a0334:	f000 f952 	bl	80a05dc <HAL_Pin_Map>
 80a0338:	6028      	str	r0, [r5, #0]
 80a033a:	485c      	ldr	r0, [pc, #368]	; (80a04ac <_ZN3DHT4readEv+0x2a8>)
 80a033c:	f7ff feb4 	bl	80a00a8 <__cxa_guard_release>
    fastPinGetPinmap()[_pin].gpio_peripheral->BSRRL = fastPinGetPinmap()[_pin].gpio_pin;
 80a0340:	682b      	ldr	r3, [r5, #0]
 80a0342:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80a0346:	59db      	ldr	r3, [r3, r7]
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
 80a0348:	2700      	movs	r7, #0
 80a034a:	831a      	strh	r2, [r3, #24]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a034c:	2028      	movs	r0, #40	; 0x28
 80a034e:	f000 f935 	bl	80a05bc <HAL_Delay_Microseconds>
	pinMode(_pin, INPUT);
 80a0352:	2100      	movs	r1, #0
 80a0354:	79a0      	ldrb	r0, [r4, #6]
 80a0356:	f001 f81b 	bl	80a1390 <pinMode>
	uint8_t laststate = HIGH;
 80a035a:	2301      	movs	r3, #1
	uint8_t j = 0, i;
 80a035c:	46ba      	mov	sl, r7
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a035e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80a04ac <_ZN3DHT4readEv+0x2a8>
	uint8_t laststate = HIGH;
 80a0362:	9300      	str	r3, [sp, #0]
		counter = 0;
 80a0364:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
 80a0368:	f894 b006 	ldrb.w	fp, [r4, #6]
 80a036c:	7833      	ldrb	r3, [r6, #0]
 80a036e:	f3bf 8f5b 	dmb	ish
 80a0372:	07da      	lsls	r2, r3, #31
 80a0374:	d409      	bmi.n	80a038a <_ZN3DHT4readEv+0x186>
 80a0376:	4640      	mov	r0, r8
 80a0378:	f7ff fe91 	bl	80a009e <__cxa_guard_acquire>
 80a037c:	b128      	cbz	r0, 80a038a <_ZN3DHT4readEv+0x186>
 80a037e:	f000 f92d 	bl	80a05dc <HAL_Pin_Map>
 80a0382:	6028      	str	r0, [r5, #0]
 80a0384:	4640      	mov	r0, r8
 80a0386:	f7ff fe8f 	bl	80a00a8 <__cxa_guard_release>
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a038a:	231c      	movs	r3, #28
 80a038c:	fb03 fb0b 	mul.w	fp, r3, fp
 80a0390:	682b      	ldr	r3, [r5, #0]
 80a0392:	f853 300b 	ldr.w	r3, [r3, fp]
 80a0396:	691b      	ldr	r3, [r3, #16]
 80a0398:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a039a:	7833      	ldrb	r3, [r6, #0]
 80a039c:	f3bf 8f5b 	dmb	ish
 80a03a0:	07db      	lsls	r3, r3, #31
 80a03a2:	d409      	bmi.n	80a03b8 <_ZN3DHT4readEv+0x1b4>
 80a03a4:	4640      	mov	r0, r8
 80a03a6:	f7ff fe7a 	bl	80a009e <__cxa_guard_acquire>
 80a03aa:	b128      	cbz	r0, 80a03b8 <_ZN3DHT4readEv+0x1b4>
 80a03ac:	f000 f916 	bl	80a05dc <HAL_Pin_Map>
 80a03b0:	6028      	str	r0, [r5, #0]
 80a03b2:	4640      	mov	r0, r8
 80a03b4:	f7ff fe78 	bl	80a00a8 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a03b8:	682b      	ldr	r3, [r5, #0]
 80a03ba:	9a01      	ldr	r2, [sp, #4]
 80a03bc:	445b      	add	r3, fp
 80a03be:	889b      	ldrh	r3, [r3, #4]
 80a03c0:	4213      	tst	r3, r2
 80a03c2:	bf14      	ite	ne
 80a03c4:	2301      	movne	r3, #1
 80a03c6:	2300      	moveq	r3, #0
 80a03c8:	9a00      	ldr	r2, [sp, #0]
 80a03ca:	4293      	cmp	r3, r2
 80a03cc:	d109      	bne.n	80a03e2 <_ZN3DHT4readEv+0x1de>
			counter++;
 80a03ce:	f109 0901 	add.w	r9, r9, #1
 80a03d2:	2001      	movs	r0, #1
 80a03d4:	fa5f f989 	uxtb.w	r9, r9
 80a03d8:	f000 f8f0 	bl	80a05bc <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
 80a03dc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80a03e0:	d1c2      	bne.n	80a0368 <_ZN3DHT4readEv+0x164>
				break;
			}
		}
		laststate = pinReadFast(_pin);
 80a03e2:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a03e6:	7833      	ldrb	r3, [r6, #0]
 80a03e8:	f3bf 8f5b 	dmb	ish
 80a03ec:	07d8      	lsls	r0, r3, #31
 80a03ee:	d409      	bmi.n	80a0404 <_ZN3DHT4readEv+0x200>
 80a03f0:	4640      	mov	r0, r8
 80a03f2:	f7ff fe54 	bl	80a009e <__cxa_guard_acquire>
 80a03f6:	b128      	cbz	r0, 80a0404 <_ZN3DHT4readEv+0x200>
 80a03f8:	f000 f8f0 	bl	80a05dc <HAL_Pin_Map>
 80a03fc:	6028      	str	r0, [r5, #0]
 80a03fe:	4640      	mov	r0, r8
 80a0400:	f7ff fe52 	bl	80a00a8 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0404:	231c      	movs	r3, #28
 80a0406:	fb03 fb0b 	mul.w	fp, r3, fp
 80a040a:	682b      	ldr	r3, [r5, #0]
 80a040c:	f853 300b 	ldr.w	r3, [r3, fp]
 80a0410:	691b      	ldr	r3, [r3, #16]
 80a0412:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
 80a0414:	7833      	ldrb	r3, [r6, #0]
 80a0416:	f3bf 8f5b 	dmb	ish
 80a041a:	07d9      	lsls	r1, r3, #31
 80a041c:	d409      	bmi.n	80a0432 <_ZN3DHT4readEv+0x22e>
 80a041e:	4640      	mov	r0, r8
 80a0420:	f7ff fe3d 	bl	80a009e <__cxa_guard_acquire>
 80a0424:	b128      	cbz	r0, 80a0432 <_ZN3DHT4readEv+0x22e>
 80a0426:	f000 f8d9 	bl	80a05dc <HAL_Pin_Map>
 80a042a:	6028      	str	r0, [r5, #0]
 80a042c:	4640      	mov	r0, r8
 80a042e:	f7ff fe3b 	bl	80a00a8 <__cxa_guard_release>
	return ((fastPinGetPinmap()[_pin].gpio_peripheral->IDR & fastPinGetPinmap()[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0432:	682b      	ldr	r3, [r5, #0]
 80a0434:	9a00      	ldr	r2, [sp, #0]
 80a0436:	445b      	add	r3, fp
 80a0438:	889b      	ldrh	r3, [r3, #4]
 80a043a:	4213      	tst	r3, r2
 80a043c:	bf14      	ite	ne
 80a043e:	2301      	movne	r3, #1
 80a0440:	2300      	moveq	r3, #0

		if (counter == 255) break;
 80a0442:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
 80a0446:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
 80a0448:	d018      	beq.n	80a047c <_ZN3DHT4readEv+0x278>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 80a044a:	2f03      	cmp	r7, #3
 80a044c:	d911      	bls.n	80a0472 <_ZN3DHT4readEv+0x26e>
 80a044e:	07fa      	lsls	r2, r7, #31
 80a0450:	d40f      	bmi.n	80a0472 <_ZN3DHT4readEv+0x26e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a0452:	ea4f 02da 	mov.w	r2, sl, lsr #3
 80a0456:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 80a0458:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
 80a045c:	005b      	lsls	r3, r3, #1
 80a045e:	b2db      	uxtb	r3, r3
 80a0460:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 80a0462:	7a21      	ldrb	r1, [r4, #8]
			j++;
 80a0464:	fa5f fa8a 	uxtb.w	sl, sl
			if (counter > _count)
 80a0468:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 80a046a:	bf3c      	itt	cc
 80a046c:	f043 0301 	orrcc.w	r3, r3, #1
 80a0470:	54a3      	strbcc	r3, [r4, r2]
	for ( i=0; i< MAXTIMINGS; i++) {
 80a0472:	3701      	adds	r7, #1
 80a0474:	b2ff      	uxtb	r7, r7
 80a0476:	2f55      	cmp	r7, #85	; 0x55
 80a0478:	f47f af74 	bne.w	80a0364 <_ZN3DHT4readEv+0x160>
		}
	}

	interrupts();
 80a047c:	f000 fa88 	bl	80a0990 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 80a0480:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
 80a0484:	d910      	bls.n	80a04a8 <_ZN3DHT4readEv+0x2a4>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
 80a0486:	7863      	ldrb	r3, [r4, #1]
 80a0488:	7820      	ldrb	r0, [r4, #0]
 80a048a:	4418      	add	r0, r3
 80a048c:	78a3      	ldrb	r3, [r4, #2]
 80a048e:	4418      	add	r0, r3
 80a0490:	78e3      	ldrb	r3, [r4, #3]
 80a0492:	4418      	add	r0, r3
 80a0494:	7923      	ldrb	r3, [r4, #4]
 80a0496:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
 80a0498:	1ac3      	subs	r3, r0, r3
 80a049a:	4258      	negs	r0, r3
 80a049c:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
 80a049e:	b003      	add	sp, #12
 80a04a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
 80a04a4:	2001      	movs	r0, #1
 80a04a6:	e7fa      	b.n	80a049e <_ZN3DHT4readEv+0x29a>
	return false;
 80a04a8:	2000      	movs	r0, #0
 80a04aa:	e7f8      	b.n	80a049e <_ZN3DHT4readEv+0x29a>
 80a04ac:	20000080 	.word	0x20000080
 80a04b0:	20000084 	.word	0x20000084

080a04b4 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
 80a04b4:	b570      	push	{r4, r5, r6, lr}
 80a04b6:	4604      	mov	r4, r0
	if (read()) {
 80a04b8:	f7ff fea4 	bl	80a0204 <_ZN3DHT4readEv>
 80a04bc:	b308      	cbz	r0, 80a0502 <_ZN3DHT15readTemperatureEv+0x4e>
		switch (_type) {
 80a04be:	79e3      	ldrb	r3, [r4, #7]
 80a04c0:	2b0b      	cmp	r3, #11
 80a04c2:	d01a      	beq.n	80a04fa <_ZN3DHT15readTemperatureEv+0x46>
 80a04c4:	3b15      	subs	r3, #21
 80a04c6:	2b01      	cmp	r3, #1
 80a04c8:	d81b      	bhi.n	80a0502 <_ZN3DHT15readTemperatureEv+0x4e>
				f = data[2] & 0x7F;
 80a04ca:	78a6      	ldrb	r6, [r4, #2]
 80a04cc:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80a04d0:	f001 fd40 	bl	80a1f54 <__aeabi_i2f>
				f *= 256;
 80a04d4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a04d8:	f001 fd90 	bl	80a1ffc <__aeabi_fmul>
 80a04dc:	4605      	mov	r5, r0
				f += data[3];
 80a04de:	78e0      	ldrb	r0, [r4, #3]
 80a04e0:	f001 fd38 	bl	80a1f54 <__aeabi_i2f>
 80a04e4:	4629      	mov	r1, r5
 80a04e6:	f001 fc81 	bl	80a1dec <__addsf3>
				f /= 10;
 80a04ea:	4907      	ldr	r1, [pc, #28]	; (80a0508 <_ZN3DHT15readTemperatureEv+0x54>)
 80a04ec:	f001 fe3a 	bl	80a2164 <__aeabi_fdiv>
				if (data[2] & 0x80)
 80a04f0:	0633      	lsls	r3, r6, #24
 80a04f2:	d505      	bpl.n	80a0500 <_ZN3DHT15readTemperatureEv+0x4c>
					f *= -1;
 80a04f4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a04f8:	e002      	b.n	80a0500 <_ZN3DHT15readTemperatureEv+0x4c>
				f = data[2];
 80a04fa:	78a0      	ldrb	r0, [r4, #2]
 80a04fc:	f001 fd26 	bl	80a1f4c <__aeabi_ui2f>
}
 80a0500:	bd70      	pop	{r4, r5, r6, pc}
		switch (_type) {
 80a0502:	4802      	ldr	r0, [pc, #8]	; (80a050c <_ZN3DHT15readTemperatureEv+0x58>)
 80a0504:	e7fc      	b.n	80a0500 <_ZN3DHT15readTemperatureEv+0x4c>
 80a0506:	bf00      	nop
 80a0508:	41200000 	.word	0x41200000
 80a050c:	7fc00000 	.word	0x7fc00000

080a0510 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
 80a0510:	f7ff bfd0 	b.w	80a04b4 <_ZN3DHT15readTemperatureEv>

080a0514 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
 80a0514:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
 80a0516:	f7ff ffcd 	bl	80a04b4 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
 80a051a:	4905      	ldr	r1, [pc, #20]	; (80a0530 <_ZN3DHT16getTempFarenheitEv+0x1c>)
 80a051c:	f001 fd6e 	bl	80a1ffc <__aeabi_fmul>
 80a0520:	4904      	ldr	r1, [pc, #16]	; (80a0534 <_ZN3DHT16getTempFarenheitEv+0x20>)
 80a0522:	f001 fe1f 	bl	80a2164 <__aeabi_fdiv>
 80a0526:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80a052a:	f001 fc5f 	bl	80a1dec <__addsf3>
}
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	41100000 	.word	0x41100000
 80a0534:	40a00000 	.word	0x40a00000

080a0538 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
 80a0538:	b538      	push	{r3, r4, r5, lr}
 80a053a:	4604      	mov	r4, r0
	if (read()) {
 80a053c:	f7ff fe62 	bl	80a0204 <_ZN3DHT4readEv>
 80a0540:	b1d8      	cbz	r0, 80a057a <_ZN3DHT12readHumidityEv+0x42>
		switch (_type) {
 80a0542:	79e3      	ldrb	r3, [r4, #7]
 80a0544:	2b0b      	cmp	r3, #11
 80a0546:	d014      	beq.n	80a0572 <_ZN3DHT12readHumidityEv+0x3a>
 80a0548:	3b15      	subs	r3, #21
 80a054a:	2b01      	cmp	r3, #1
 80a054c:	d815      	bhi.n	80a057a <_ZN3DHT12readHumidityEv+0x42>
				f = data[0];
 80a054e:	7820      	ldrb	r0, [r4, #0]
 80a0550:	f001 fcfc 	bl	80a1f4c <__aeabi_ui2f>
				f *= 256;
 80a0554:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a0558:	f001 fd50 	bl	80a1ffc <__aeabi_fmul>
 80a055c:	4605      	mov	r5, r0
				f += data[1];
 80a055e:	7860      	ldrb	r0, [r4, #1]
 80a0560:	f001 fcf8 	bl	80a1f54 <__aeabi_i2f>
 80a0564:	4629      	mov	r1, r5
 80a0566:	f001 fc41 	bl	80a1dec <__addsf3>
				f /= 10;
 80a056a:	4905      	ldr	r1, [pc, #20]	; (80a0580 <_ZN3DHT12readHumidityEv+0x48>)
 80a056c:	f001 fdfa 	bl	80a2164 <__aeabi_fdiv>
}
 80a0570:	bd38      	pop	{r3, r4, r5, pc}
				f = data[0];
 80a0572:	7820      	ldrb	r0, [r4, #0]
 80a0574:	f001 fcea 	bl	80a1f4c <__aeabi_ui2f>
				return f;
 80a0578:	e7fa      	b.n	80a0570 <_ZN3DHT12readHumidityEv+0x38>
		switch (_type) {
 80a057a:	4802      	ldr	r0, [pc, #8]	; (80a0584 <_ZN3DHT12readHumidityEv+0x4c>)
 80a057c:	e7f8      	b.n	80a0570 <_ZN3DHT12readHumidityEv+0x38>
 80a057e:	bf00      	nop
 80a0580:	41200000 	.word	0x41200000
 80a0584:	7fc00000 	.word	0x7fc00000

080a0588 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
 80a0588:	f7ff bfd6 	b.w	80a0538 <_ZN3DHT12readHumidityEv>

080a058c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <os_mutex_recursive_create+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	080601d0 	.word	0x080601d0

080a059c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <os_mutex_recursive_destroy+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	080601d0 	.word	0x080601d0

080a05ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <HAL_RNG_GetRandomNumber+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	685b      	ldr	r3, [r3, #4]
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	0806019c 	.word	0x0806019c

080a05bc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <HAL_Delay_Microseconds+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	68db      	ldr	r3, [r3, #12]
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	0806019c 	.word	0x0806019c

080a05cc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	695b      	ldr	r3, [r3, #20]
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	0806019c 	.word	0x0806019c

080a05dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <HAL_Pin_Map+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	681b      	ldr	r3, [r3, #0]
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601b0 	.word	0x080601b0

080a05ec <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a05ec:	b508      	push	{r3, lr}
 80a05ee:	4b02      	ldr	r3, [pc, #8]	; (80a05f8 <HAL_Pin_Mode+0xc>)
 80a05f0:	681b      	ldr	r3, [r3, #0]
 80a05f2:	689b      	ldr	r3, [r3, #8]
 80a05f4:	9301      	str	r3, [sp, #4]
 80a05f6:	bd08      	pop	{r3, pc}
 80a05f8:	080601b0 	.word	0x080601b0

080a05fc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <HAL_Interrupts_Enable_All+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	6a1b      	ldr	r3, [r3, #32]
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	080601b0 	.word	0x080601b0

080a060c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <HAL_Interrupts_Disable_All+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601b0 	.word	0x080601b0

080a061c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <hal_i2c_write+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601ac 	.word	0x080601ac

080a062c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <hal_i2c_available+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	080601ac 	.word	0x080601ac

080a063c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a063c:	b508      	push	{r3, lr}
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <hal_i2c_read+0xc>)
 80a0640:	681b      	ldr	r3, [r3, #0]
 80a0642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0644:	9301      	str	r3, [sp, #4]
 80a0646:	bd08      	pop	{r3, pc}
 80a0648:	080601ac 	.word	0x080601ac

080a064c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <hal_i2c_peek+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601ac 	.word	0x080601ac

080a065c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <hal_i2c_flush+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	080601ac 	.word	0x080601ac

080a066c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <hal_i2c_is_enabled+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601ac 	.word	0x080601ac

080a067c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b03      	ldr	r3, [pc, #12]	; (80a068c <hal_i2c_init+0x10>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0686:	9301      	str	r3, [sp, #4]
 80a0688:	bd08      	pop	{r3, pc}
 80a068a:	0000      	.short	0x0000
 80a068c:	080601ac 	.word	0x080601ac

080a0690 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0690:	b508      	push	{r3, lr}
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <hal_spi_init+0xc>)
 80a0694:	681b      	ldr	r3, [r3, #0]
 80a0696:	69db      	ldr	r3, [r3, #28]
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	bd08      	pop	{r3, pc}
 80a069c:	080601b4 	.word	0x080601b4

080a06a0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <hal_spi_is_enabled+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	6a1b      	ldr	r3, [r3, #32]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	080601b4 	.word	0x080601b4

080a06b0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <hal_usart_init+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	699b      	ldr	r3, [r3, #24]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	080601c4 	.word	0x080601c4

080a06c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <hal_usart_write+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	080601c4 	.word	0x080601c4

080a06d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <hal_usart_available+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601c4 	.word	0x080601c4

080a06e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <hal_usart_read+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601c4 	.word	0x080601c4

080a06f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <hal_usart_peek+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601c4 	.word	0x080601c4

080a0700 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <hal_usart_flush+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601c4 	.word	0x080601c4

080a0710 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <hal_usart_is_enabled+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601c4 	.word	0x080601c4

080a0720 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <hal_usart_available_data_for_write+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601c4 	.word	0x080601c4

080a0730 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <HAL_USB_USART_Init+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	681b      	ldr	r3, [r3, #0]
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601d8 	.word	0x080601d8

080a0740 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <HAL_USB_USART_Begin+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	685b      	ldr	r3, [r3, #4]
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601d8 	.word	0x080601d8

080a0750 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <HAL_USB_USART_Available_Data+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	691b      	ldr	r3, [r3, #16]
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601d8 	.word	0x080601d8

080a0760 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	695b      	ldr	r3, [r3, #20]
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601d8 	.word	0x080601d8

080a0770 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <HAL_USB_USART_Receive_Data+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	699b      	ldr	r3, [r3, #24]
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601d8 	.word	0x080601d8

080a0780 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <HAL_USB_USART_Send_Data+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	69db      	ldr	r3, [r3, #28]
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601d8 	.word	0x080601d8

080a0790 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <HAL_USB_USART_Flush_Data+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	6a1b      	ldr	r3, [r3, #32]
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601d8 	.word	0x080601d8

080a07a0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <inet_gethostbyname+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601c0 	.word	0x080601c0

080a07b0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <set_system_mode+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	685b      	ldr	r3, [r3, #4]
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601a4 	.word	0x080601a4

080a07c0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <system_delay_ms+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	695b      	ldr	r3, [r3, #20]
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601a4 	.word	0x080601a4

080a07d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b03      	ldr	r3, [pc, #12]	; (80a07e0 <system_ctrl_set_app_request_handler+0x10>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a07da:	9301      	str	r3, [sp, #4]
 80a07dc:	bd08      	pop	{r3, pc}
 80a07de:	0000      	.short	0x0000
 80a07e0:	080601a4 	.word	0x080601a4

080a07e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a07e4:	b508      	push	{r3, lr}
 80a07e6:	4b03      	ldr	r3, [pc, #12]	; (80a07f4 <system_ctrl_set_result+0x10>)
 80a07e8:	681b      	ldr	r3, [r3, #0]
 80a07ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a07ee:	9301      	str	r3, [sp, #4]
 80a07f0:	bd08      	pop	{r3, pc}
 80a07f2:	0000      	.short	0x0000
 80a07f4:	080601a4 	.word	0x080601a4

080a07f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601cc 	.word	0x080601cc

080a0808 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <network_connect+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	685b      	ldr	r3, [r3, #4]
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601c8 	.word	0x080601c8

080a0818 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <network_connecting+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	689b      	ldr	r3, [r3, #8]
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601c8 	.word	0x080601c8

080a0828 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <network_disconnect+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	68db      	ldr	r3, [r3, #12]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601c8 	.word	0x080601c8

080a0838 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <network_ready+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	691b      	ldr	r3, [r3, #16]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601c8 	.word	0x080601c8

080a0848 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <network_on+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	695b      	ldr	r3, [r3, #20]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601c8 	.word	0x080601c8

080a0858 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <network_off+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	699b      	ldr	r3, [r3, #24]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601c8 	.word	0x080601c8

080a0868 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <network_listen+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	69db      	ldr	r3, [r3, #28]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601c8 	.word	0x080601c8

080a0878 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <network_listening+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	6a1b      	ldr	r3, [r3, #32]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601c8 	.word	0x080601c8

080a0888 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <network_set_listen_timeout+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601c8 	.word	0x080601c8

080a0898 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <network_get_listen_timeout+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601c8 	.word	0x080601c8

080a08a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <network_is_on+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601c8 	.word	0x080601c8

080a08b8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <network_is_off+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601c8 	.word	0x080601c8

080a08c8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <malloc+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	681b      	ldr	r3, [r3, #0]
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601a0 	.word	0x080601a0

080a08d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <free+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	685b      	ldr	r3, [r3, #4]
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601a0 	.word	0x080601a0

080a08e8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <newlib_impure_ptr_callback+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601a0 	.word	0x080601a0

080a08f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a08f8:	2100      	movs	r1, #0
 80a08fa:	f7ff bf61 	b.w	80a07c0 <system_delay_ms>

080a08fe <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a08fe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0900:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0902:	4604      	mov	r4, r0
      if (_M_manager)
 80a0904:	b113      	cbz	r3, 80a090c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0906:	2203      	movs	r2, #3
 80a0908:	4601      	mov	r1, r0
 80a090a:	4798      	blx	r3
    }
 80a090c:	4620      	mov	r0, r4
 80a090e:	bd10      	pop	{r4, pc}

080a0910 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0910:	4770      	bx	lr

080a0912 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0914:	4606      	mov	r6, r0
 80a0916:	4615      	mov	r5, r2
 80a0918:	460c      	mov	r4, r1
 80a091a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a091c:	42bc      	cmp	r4, r7
 80a091e:	d006      	beq.n	80a092e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0920:	6833      	ldr	r3, [r6, #0]
 80a0922:	4630      	mov	r0, r6
 80a0924:	689b      	ldr	r3, [r3, #8]
 80a0926:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a092a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a092c:	e7f6      	b.n	80a091c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a092e:	4628      	mov	r0, r5
 80a0930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0932 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0932:	2200      	movs	r2, #0
 80a0934:	7c00      	ldrb	r0, [r0, #16]
 80a0936:	f7ff be71 	b.w	80a061c <hal_i2c_write>

080a093a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a093a:	2100      	movs	r1, #0
 80a093c:	7c00      	ldrb	r0, [r0, #16]
 80a093e:	f7ff be75 	b.w	80a062c <hal_i2c_available>

080a0942 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0942:	2100      	movs	r1, #0
 80a0944:	7c00      	ldrb	r0, [r0, #16]
 80a0946:	f7ff be79 	b.w	80a063c <hal_i2c_read>

080a094a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a094a:	2100      	movs	r1, #0
 80a094c:	7c00      	ldrb	r0, [r0, #16]
 80a094e:	f7ff be7d 	b.w	80a064c <hal_i2c_peek>

080a0952 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0952:	2100      	movs	r1, #0
 80a0954:	7c00      	ldrb	r0, [r0, #16]
 80a0956:	f7ff be81 	b.w	80a065c <hal_i2c_flush>

080a095a <_ZN7TwoWireD0Ev>:
 80a095a:	b510      	push	{r4, lr}
 80a095c:	4604      	mov	r4, r0
 80a095e:	2114      	movs	r1, #20
 80a0960:	f000 fd85 	bl	80a146e <_ZdlPvj>
 80a0964:	4620      	mov	r0, r4
 80a0966:	bd10      	pop	{r4, pc}

080a0968 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0968:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a096e:	4604      	mov	r4, r0
 80a0970:	4608      	mov	r0, r1
 80a0972:	2100      	movs	r1, #0
 80a0974:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0978:	4b03      	ldr	r3, [pc, #12]	; (80a0988 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a097a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a097c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a097e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0980:	f7ff fe7c 	bl	80a067c <hal_i2c_init>
}
 80a0984:	4620      	mov	r0, r4
 80a0986:	bd10      	pop	{r4, pc}
 80a0988:	080a23fc 	.word	0x080a23fc

080a098c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a098c:	f7ff be3e 	b.w	80a060c <HAL_Interrupts_Disable_All>

080a0990 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a0990:	f7ff be34 	b.w	80a05fc <HAL_Interrupts_Enable_All>

080a0994 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0994:	4770      	bx	lr

080a0996 <_ZN9IPAddressD0Ev>:
 80a0996:	b510      	push	{r4, lr}
 80a0998:	4604      	mov	r4, r0
 80a099a:	2118      	movs	r1, #24
 80a099c:	f000 fd67 	bl	80a146e <_ZdlPvj>
 80a09a0:	4620      	mov	r0, r4
 80a09a2:	bd10      	pop	{r4, pc}

080a09a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a09a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09a6:	460e      	mov	r6, r1
 80a09a8:	2400      	movs	r4, #0
 80a09aa:	f100 0708 	add.w	r7, r0, #8
 80a09ae:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a09b0:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a09b4:	220a      	movs	r2, #10
 80a09b6:	4630      	mov	r0, r6
 80a09b8:	f000 f905 	bl	80a0bc6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a09bc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a09be:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a09c0:	d101      	bne.n	80a09c6 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a09c2:	4620      	mov	r0, r4
 80a09c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a09c6:	2c00      	cmp	r4, #0
 80a09c8:	d0f2      	beq.n	80a09b0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a09ca:	212e      	movs	r1, #46	; 0x2e
 80a09cc:	4630      	mov	r0, r6
 80a09ce:	f000 f8e1 	bl	80a0b94 <_ZN5Print5printEc>
 80a09d2:	4404      	add	r4, r0
 80a09d4:	e7ec      	b.n	80a09b0 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a09d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a09d8:	b510      	push	{r4, lr}
 80a09da:	4604      	mov	r4, r0
 80a09dc:	4b04      	ldr	r3, [pc, #16]	; (80a09f0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a09de:	2211      	movs	r2, #17
 80a09e0:	2100      	movs	r1, #0
 80a09e2:	f840 3b04 	str.w	r3, [r0], #4
 80a09e6:	f001 fcb1 	bl	80a234c <memset>
}
 80a09ea:	4620      	mov	r0, r4
 80a09ec:	bd10      	pop	{r4, pc}
 80a09ee:	bf00      	nop
 80a09f0:	080a2424 	.word	0x080a2424

080a09f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a09f4:	4603      	mov	r3, r0
 80a09f6:	4a07      	ldr	r2, [pc, #28]	; (80a0a14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a09f8:	b510      	push	{r4, lr}
 80a09fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a09fe:	f101 0210 	add.w	r2, r1, #16
 80a0a02:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0a06:	4291      	cmp	r1, r2
 80a0a08:	f843 4b04 	str.w	r4, [r3], #4
 80a0a0c:	d1f9      	bne.n	80a0a02 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0a0e:	780a      	ldrb	r2, [r1, #0]
 80a0a10:	701a      	strb	r2, [r3, #0]
}
 80a0a12:	bd10      	pop	{r4, pc}
 80a0a14:	080a2424 	.word	0x080a2424

080a0a18 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0a18:	4a02      	ldr	r2, [pc, #8]	; (80a0a24 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0a1a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0a1e:	2204      	movs	r2, #4
 80a0a20:	7502      	strb	r2, [r0, #20]
}
 80a0a22:	4770      	bx	lr
 80a0a24:	080a2424 	.word	0x080a2424

080a0a28 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0a28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0a2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0a2e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0a32:	2304      	movs	r3, #4
 80a0a34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0a38:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0a3c:	6044      	str	r4, [r0, #4]
 80a0a3e:	7503      	strb	r3, [r0, #20]
}
 80a0a40:	bd10      	pop	{r4, pc}
	...

080a0a44 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0a46:	4d04      	ldr	r5, [pc, #16]	; (80a0a58 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0a48:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0a4a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0a4e:	9500      	str	r5, [sp, #0]
 80a0a50:	f7ff ffea 	bl	80a0a28 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0a54:	b003      	add	sp, #12
 80a0a56:	bd30      	pop	{r4, r5, pc}
 80a0a58:	080a2424 	.word	0x080a2424

080a0a5c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0a5c:	4b01      	ldr	r3, [pc, #4]	; (80a0a64 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0a5e:	4a02      	ldr	r2, [pc, #8]	; (80a0a68 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0a60:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0a62:	4770      	bx	lr
 80a0a64:	20000088 	.word	0x20000088
 80a0a68:	080a2430 	.word	0x080a2430

080a0a6c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0a6c:	2300      	movs	r3, #0
 80a0a6e:	6840      	ldr	r0, [r0, #4]
 80a0a70:	461a      	mov	r2, r3
 80a0a72:	f7ff bec9 	b.w	80a0808 <network_connect>

080a0a76 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0a76:	2200      	movs	r2, #0
 80a0a78:	2102      	movs	r1, #2
 80a0a7a:	6840      	ldr	r0, [r0, #4]
 80a0a7c:	f7ff bed4 	b.w	80a0828 <network_disconnect>

080a0a80 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0a80:	2200      	movs	r2, #0
 80a0a82:	6840      	ldr	r0, [r0, #4]
 80a0a84:	4611      	mov	r1, r2
 80a0a86:	f7ff bec7 	b.w	80a0818 <network_connecting>

080a0a8a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0a8a:	2200      	movs	r2, #0
 80a0a8c:	6840      	ldr	r0, [r0, #4]
 80a0a8e:	4611      	mov	r1, r2
 80a0a90:	f7ff bed2 	b.w	80a0838 <network_ready>

080a0a94 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0a94:	2300      	movs	r3, #0
 80a0a96:	6840      	ldr	r0, [r0, #4]
 80a0a98:	461a      	mov	r2, r3
 80a0a9a:	4619      	mov	r1, r3
 80a0a9c:	f7ff bed4 	b.w	80a0848 <network_on>

080a0aa0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0aa0:	2300      	movs	r3, #0
 80a0aa2:	6840      	ldr	r0, [r0, #4]
 80a0aa4:	461a      	mov	r2, r3
 80a0aa6:	4619      	mov	r1, r3
 80a0aa8:	f7ff bed6 	b.w	80a0858 <network_off>

080a0aac <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0aac:	2100      	movs	r1, #0
 80a0aae:	6840      	ldr	r0, [r0, #4]
 80a0ab0:	f7ff befa 	b.w	80a08a8 <network_is_on>

080a0ab4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0ab4:	2100      	movs	r1, #0
 80a0ab6:	6840      	ldr	r0, [r0, #4]
 80a0ab8:	f7ff befe 	b.w	80a08b8 <network_is_off>

080a0abc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0abc:	2200      	movs	r2, #0
 80a0abe:	6840      	ldr	r0, [r0, #4]
 80a0ac0:	f081 0101 	eor.w	r1, r1, #1
 80a0ac4:	f7ff bed0 	b.w	80a0868 <network_listen>

080a0ac8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0ac8:	2200      	movs	r2, #0
 80a0aca:	6840      	ldr	r0, [r0, #4]
 80a0acc:	f7ff bedc 	b.w	80a0888 <network_set_listen_timeout>

080a0ad0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0ad0:	2200      	movs	r2, #0
 80a0ad2:	6840      	ldr	r0, [r0, #4]
 80a0ad4:	4611      	mov	r1, r2
 80a0ad6:	f7ff bedf 	b.w	80a0898 <network_get_listen_timeout>

080a0ada <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0ada:	2200      	movs	r2, #0
 80a0adc:	6840      	ldr	r0, [r0, #4]
 80a0ade:	4611      	mov	r1, r2
 80a0ae0:	f7ff beca 	b.w	80a0878 <network_listening>

080a0ae4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0ae4:	b570      	push	{r4, r5, r6, lr}
 80a0ae6:	4615      	mov	r5, r2
 80a0ae8:	b08e      	sub	sp, #56	; 0x38
 80a0aea:	4604      	mov	r4, r0
    IPAddress addr;
 80a0aec:	a808      	add	r0, sp, #32
 80a0aee:	f7ff ff73 	bl	80a09d8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0af2:	2211      	movs	r2, #17
 80a0af4:	2100      	movs	r1, #0
 80a0af6:	a803      	add	r0, sp, #12
 80a0af8:	f001 fc28 	bl	80a234c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0afc:	2600      	movs	r6, #0
 80a0afe:	4628      	mov	r0, r5
 80a0b00:	f001 fc50 	bl	80a23a4 <strlen>
 80a0b04:	4b0a      	ldr	r3, [pc, #40]	; (80a0b30 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0b06:	9600      	str	r6, [sp, #0]
 80a0b08:	b281      	uxth	r1, r0
 80a0b0a:	685b      	ldr	r3, [r3, #4]
 80a0b0c:	4628      	mov	r0, r5
 80a0b0e:	aa03      	add	r2, sp, #12
 80a0b10:	f7ff fe46 	bl	80a07a0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0b14:	b130      	cbz	r0, 80a0b24 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0b16:	4631      	mov	r1, r6
 80a0b18:	4620      	mov	r0, r4
 80a0b1a:	f7ff ff7d 	bl	80a0a18 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0b1e:	4620      	mov	r0, r4
 80a0b20:	b00e      	add	sp, #56	; 0x38
 80a0b22:	bd70      	pop	{r4, r5, r6, pc}
 80a0b24:	4620      	mov	r0, r4
 80a0b26:	a903      	add	r1, sp, #12
 80a0b28:	f7ff ff64 	bl	80a09f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0b2c:	e7f7      	b.n	80a0b1e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0b2e:	bf00      	nop
 80a0b30:	2000050c 	.word	0x2000050c

080a0b34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0b34:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0b36:	4a03      	ldr	r2, [pc, #12]	; (80a0b44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0b38:	601a      	str	r2, [r3, #0]
 80a0b3a:	2200      	movs	r2, #0
 80a0b3c:	605a      	str	r2, [r3, #4]

} // spark
 80a0b3e:	4770      	bx	lr
 80a0b40:	2000008c 	.word	0x2000008c
 80a0b44:	080a243c 	.word	0x080a243c

080a0b48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b4a:	4606      	mov	r6, r0
 80a0b4c:	460d      	mov	r5, r1
  size_t n = 0;
 80a0b4e:	2400      	movs	r4, #0
 80a0b50:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0b52:	42bd      	cmp	r5, r7
 80a0b54:	d00c      	beq.n	80a0b70 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0b56:	6833      	ldr	r3, [r6, #0]
 80a0b58:	4630      	mov	r0, r6
 80a0b5a:	689b      	ldr	r3, [r3, #8]
 80a0b5c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0b60:	4798      	blx	r3
     if (chunk>=0)
 80a0b62:	1e03      	subs	r3, r0, #0
 80a0b64:	db01      	blt.n	80a0b6a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0b66:	441c      	add	r4, r3
  while (size--) {
 80a0b68:	e7f3      	b.n	80a0b52 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0b6a:	2c00      	cmp	r4, #0
 80a0b6c:	bf08      	it	eq
 80a0b6e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0b70:	4620      	mov	r0, r4
 80a0b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b74 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a0b74:	b570      	push	{r4, r5, r6, lr}
 80a0b76:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0b78:	460c      	mov	r4, r1
    }
 80a0b7a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0b7c:	b149      	cbz	r1, 80a0b92 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0b7e:	f001 fc11 	bl	80a23a4 <strlen>
 80a0b82:	682b      	ldr	r3, [r5, #0]
 80a0b84:	4602      	mov	r2, r0
 80a0b86:	4621      	mov	r1, r4
 80a0b88:	4628      	mov	r0, r5
    }
 80a0b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0b8e:	68db      	ldr	r3, [r3, #12]
 80a0b90:	4718      	bx	r3
    }
 80a0b92:	bd70      	pop	{r4, r5, r6, pc}

080a0b94 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0b94:	6803      	ldr	r3, [r0, #0]
 80a0b96:	689b      	ldr	r3, [r3, #8]
 80a0b98:	4718      	bx	r3

080a0b9a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0b9a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0b9c:	210d      	movs	r1, #13
{
 80a0b9e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0ba0:	f7ff fff8 	bl	80a0b94 <_ZN5Print5printEc>
  n += print('\n');
 80a0ba4:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0ba6:	4604      	mov	r4, r0
  n += print('\n');
 80a0ba8:	4628      	mov	r0, r5
 80a0baa:	f7ff fff3 	bl	80a0b94 <_ZN5Print5printEc>
  return n;
}
 80a0bae:	4420      	add	r0, r4
 80a0bb0:	bd38      	pop	{r3, r4, r5, pc}

080a0bb2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0bb2:	b538      	push	{r3, r4, r5, lr}
 80a0bb4:	4605      	mov	r5, r0
  return write(str);
 80a0bb6:	f7ff ffdd 	bl	80a0b74 <_ZN5Print5writeEPKc>
 80a0bba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0bbc:	4628      	mov	r0, r5
 80a0bbe:	f7ff ffec 	bl	80a0b9a <_ZN5Print7printlnEv>
  return n;
}
 80a0bc2:	4420      	add	r0, r4
 80a0bc4:	bd38      	pop	{r3, r4, r5, pc}

080a0bc6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0bc6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0bc8:	2a01      	cmp	r2, #1
 80a0bca:	bf98      	it	ls
 80a0bcc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0bce:	b530      	push	{r4, r5, lr}
 80a0bd0:	b08b      	sub	sp, #44	; 0x2c
 80a0bd2:	460c      	mov	r4, r1
  *str = '\0';
 80a0bd4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0bd8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0bda:	4625      	mov	r5, r4
 80a0bdc:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0be0:	fb04 5312 	mls	r3, r4, r2, r5
 80a0be4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0be6:	2b09      	cmp	r3, #9
 80a0be8:	bf94      	ite	ls
 80a0bea:	3330      	addls	r3, #48	; 0x30
 80a0bec:	3337      	addhi	r3, #55	; 0x37
 80a0bee:	b2db      	uxtb	r3, r3
  } while(n);
 80a0bf0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0bf2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0bf6:	d9f0      	bls.n	80a0bda <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0bf8:	f7ff ffbc 	bl	80a0b74 <_ZN5Print5writeEPKc>
}
 80a0bfc:	b00b      	add	sp, #44	; 0x2c
 80a0bfe:	bd30      	pop	{r4, r5, pc}

080a0c00 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0c04:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0c06:	4619      	mov	r1, r3
 80a0c08:	4610      	mov	r0, r2
{
 80a0c0a:	4692      	mov	sl, r2
 80a0c0c:	461f      	mov	r7, r3
 80a0c0e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a0c12:	f001 f887 	bl	80a1d24 <__aeabi_dcmpun>
 80a0c16:	b140      	cbz	r0, 80a0c2a <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a0c18:	4950      	ldr	r1, [pc, #320]	; (80a0d5c <_ZN5Print10printFloatEdh+0x15c>)
 80a0c1a:	4628      	mov	r0, r5
 80a0c1c:	f7ff ffaa 	bl	80a0b74 <_ZN5Print5writeEPKc>
 80a0c20:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a0c22:	4620      	mov	r0, r4
 80a0c24:	b003      	add	sp, #12
 80a0c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a0c2a:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a0c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0c32:	4650      	mov	r0, sl
 80a0c34:	4621      	mov	r1, r4
 80a0c36:	4b4a      	ldr	r3, [pc, #296]	; (80a0d60 <_ZN5Print10printFloatEdh+0x160>)
 80a0c38:	f001 f874 	bl	80a1d24 <__aeabi_dcmpun>
 80a0c3c:	b948      	cbnz	r0, 80a0c52 <_ZN5Print10printFloatEdh+0x52>
 80a0c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a0c42:	4650      	mov	r0, sl
 80a0c44:	4621      	mov	r1, r4
 80a0c46:	4b46      	ldr	r3, [pc, #280]	; (80a0d60 <_ZN5Print10printFloatEdh+0x160>)
 80a0c48:	f001 f84e 	bl	80a1ce8 <__aeabi_dcmple>
 80a0c4c:	b908      	cbnz	r0, 80a0c52 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a0c4e:	4945      	ldr	r1, [pc, #276]	; (80a0d64 <_ZN5Print10printFloatEdh+0x164>)
 80a0c50:	e7e3      	b.n	80a0c1a <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0c52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0c56:	4650      	mov	r0, sl
 80a0c58:	4639      	mov	r1, r7
 80a0c5a:	4b43      	ldr	r3, [pc, #268]	; (80a0d68 <_ZN5Print10printFloatEdh+0x168>)
 80a0c5c:	f001 f858 	bl	80a1d10 <__aeabi_dcmpgt>
 80a0c60:	b108      	cbz	r0, 80a0c66 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a0c62:	4942      	ldr	r1, [pc, #264]	; (80a0d6c <_ZN5Print10printFloatEdh+0x16c>)
 80a0c64:	e7d9      	b.n	80a0c1a <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0c66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0c6a:	4650      	mov	r0, sl
 80a0c6c:	4639      	mov	r1, r7
 80a0c6e:	4b40      	ldr	r3, [pc, #256]	; (80a0d70 <_ZN5Print10printFloatEdh+0x170>)
 80a0c70:	f001 f830 	bl	80a1cd4 <__aeabi_dcmplt>
 80a0c74:	2800      	cmp	r0, #0
 80a0c76:	d1f4      	bne.n	80a0c62 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a0c78:	2200      	movs	r2, #0
 80a0c7a:	2300      	movs	r3, #0
 80a0c7c:	4650      	mov	r0, sl
 80a0c7e:	4639      	mov	r1, r7
 80a0c80:	f001 f828 	bl	80a1cd4 <__aeabi_dcmplt>
 80a0c84:	4604      	mov	r4, r0
 80a0c86:	b130      	cbz	r0, 80a0c96 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a0c88:	212d      	movs	r1, #45	; 0x2d
 80a0c8a:	4628      	mov	r0, r5
 80a0c8c:	f7ff ff82 	bl	80a0b94 <_ZN5Print5printEc>
 80a0c90:	4604      	mov	r4, r0
     number = -number;
 80a0c92:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a0c96:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a0c9a:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a0c9c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a0ca0:	4934      	ldr	r1, [pc, #208]	; (80a0d74 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a0ca2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a0d7c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a0ca6:	fa5f f38b 	uxtb.w	r3, fp
 80a0caa:	429e      	cmp	r6, r3
 80a0cac:	d906      	bls.n	80a0cbc <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a0cae:	4642      	mov	r2, r8
 80a0cb0:	464b      	mov	r3, r9
 80a0cb2:	f000 fec7 	bl	80a1a44 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a0cb6:	f10b 0b01 	add.w	fp, fp, #1
 80a0cba:	e7f4      	b.n	80a0ca6 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a0cbc:	463b      	mov	r3, r7
 80a0cbe:	4652      	mov	r2, sl
 80a0cc0:	f000 fbe0 	bl	80a1484 <__adddf3>
 80a0cc4:	4689      	mov	r9, r1
 80a0cc6:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a0cc8:	f001 f86a 	bl	80a1da0 <__aeabi_d2uiz>
 80a0ccc:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a0cce:	f000 fd15 	bl	80a16fc <__aeabi_ui2d>
 80a0cd2:	4602      	mov	r2, r0
 80a0cd4:	460b      	mov	r3, r1
 80a0cd6:	4640      	mov	r0, r8
 80a0cd8:	4649      	mov	r1, r9
 80a0cda:	f000 fbd1 	bl	80a1480 <__aeabi_dsub>
        return printNumber(val, base) + t;
 80a0cde:	220a      	movs	r2, #10
 80a0ce0:	4680      	mov	r8, r0
 80a0ce2:	4689      	mov	r9, r1
 80a0ce4:	4628      	mov	r0, r5
 80a0ce6:	4639      	mov	r1, r7
 80a0ce8:	f7ff ff6d 	bl	80a0bc6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a0cec:	4404      	add	r4, r0
  if (digits > 0) {
 80a0cee:	b126      	cbz	r6, 80a0cfa <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a0cf0:	4628      	mov	r0, r5
 80a0cf2:	4921      	ldr	r1, [pc, #132]	; (80a0d78 <_ZN5Print10printFloatEdh+0x178>)
 80a0cf4:	f7ff ff3e 	bl	80a0b74 <_ZN5Print5writeEPKc>
    n += print(".");
 80a0cf8:	4404      	add	r4, r0
    remainder *= 10.0;
 80a0cfa:	f04f 0a00 	mov.w	sl, #0
 80a0cfe:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a0d7c <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a0d02:	3e01      	subs	r6, #1
 80a0d04:	b2f6      	uxtb	r6, r6
 80a0d06:	2eff      	cmp	r6, #255	; 0xff
 80a0d08:	d08b      	beq.n	80a0c22 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a0d0a:	4652      	mov	r2, sl
 80a0d0c:	465b      	mov	r3, fp
 80a0d0e:	4640      	mov	r0, r8
 80a0d10:	4649      	mov	r1, r9
 80a0d12:	f000 fd6d 	bl	80a17f0 <__aeabi_dmul>
 80a0d16:	4680      	mov	r8, r0
 80a0d18:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a0d1a:	f001 f819 	bl	80a1d50 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a0d1e:	1e07      	subs	r7, r0, #0
 80a0d20:	da19      	bge.n	80a0d56 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a0d22:	212d      	movs	r1, #45	; 0x2d
 80a0d24:	4628      	mov	r0, r5
 80a0d26:	f7ff ff35 	bl	80a0b94 <_ZN5Print5printEc>
 80a0d2a:	4603      	mov	r3, r0
            val = -n;
 80a0d2c:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a0d2e:	220a      	movs	r2, #10
 80a0d30:	4628      	mov	r0, r5
 80a0d32:	9301      	str	r3, [sp, #4]
 80a0d34:	f7ff ff47 	bl	80a0bc6 <_ZN5Print11printNumberEmh>
 80a0d38:	9b01      	ldr	r3, [sp, #4]
 80a0d3a:	4403      	add	r3, r0
    remainder -= toPrint;
 80a0d3c:	4638      	mov	r0, r7
    n += print(toPrint);
 80a0d3e:	441c      	add	r4, r3
    remainder -= toPrint;
 80a0d40:	f000 fcec 	bl	80a171c <__aeabi_i2d>
 80a0d44:	4602      	mov	r2, r0
 80a0d46:	460b      	mov	r3, r1
 80a0d48:	4640      	mov	r0, r8
 80a0d4a:	4649      	mov	r1, r9
 80a0d4c:	f000 fb98 	bl	80a1480 <__aeabi_dsub>
 80a0d50:	4680      	mov	r8, r0
 80a0d52:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a0d54:	e7d5      	b.n	80a0d02 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a0d56:	4639      	mov	r1, r7
        size_t t = 0;
 80a0d58:	2300      	movs	r3, #0
 80a0d5a:	e7e8      	b.n	80a0d2e <_ZN5Print10printFloatEdh+0x12e>
 80a0d5c:	080a2470 	.word	0x080a2470
 80a0d60:	7fefffff 	.word	0x7fefffff
 80a0d64:	080a2474 	.word	0x080a2474
 80a0d68:	41efffff 	.word	0x41efffff
 80a0d6c:	080a2478 	.word	0x080a2478
 80a0d70:	c1efffff 	.word	0xc1efffff
 80a0d74:	3fe00000 	.word	0x3fe00000
 80a0d78:	080a247c 	.word	0x080a247c
 80a0d7c:	40240000 	.word	0x40240000

080a0d80 <_ZN5Print5printEfi>:
{
 80a0d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0d82:	4605      	mov	r5, r0
 80a0d84:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a0d86:	4608      	mov	r0, r1
 80a0d88:	f000 fcda 	bl	80a1740 <__aeabi_f2d>
 80a0d8c:	b2e4      	uxtb	r4, r4
 80a0d8e:	4602      	mov	r2, r0
 80a0d90:	460b      	mov	r3, r1
 80a0d92:	4628      	mov	r0, r5
 80a0d94:	9400      	str	r4, [sp, #0]
 80a0d96:	f7ff ff33 	bl	80a0c00 <_ZN5Print10printFloatEdh>
}
 80a0d9a:	b003      	add	sp, #12
 80a0d9c:	bd30      	pop	{r4, r5, pc}

080a0d9e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0d9e:	b510      	push	{r4, lr}
 80a0da0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0da2:	f7ff fdac 	bl	80a08fe <_ZNSt14_Function_baseD1Ev>
 80a0da6:	4620      	mov	r0, r4
 80a0da8:	bd10      	pop	{r4, pc}
	...

080a0dac <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0dac:	2300      	movs	r3, #0
 80a0dae:	4803      	ldr	r0, [pc, #12]	; (80a0dbc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0db0:	4a03      	ldr	r2, [pc, #12]	; (80a0dc0 <_GLOBAL__sub_I_RGB+0x14>)
 80a0db2:	4904      	ldr	r1, [pc, #16]	; (80a0dc4 <_GLOBAL__sub_I_RGB+0x18>)
 80a0db4:	6083      	str	r3, [r0, #8]
 80a0db6:	f000 bb55 	b.w	80a1464 <__aeabi_atexit>
 80a0dba:	bf00      	nop
 80a0dbc:	20000094 	.word	0x20000094
 80a0dc0:	20000068 	.word	0x20000068
 80a0dc4:	080a0d9f 	.word	0x080a0d9f

080a0dc8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0dc8:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0dca:	2600      	movs	r6, #0
 80a0dcc:	4604      	mov	r4, r0
 80a0dce:	460d      	mov	r5, r1
 80a0dd0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0dd4:	f7ff fbda 	bl	80a058c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0dd8:	4628      	mov	r0, r5
    _spi = spi;
 80a0dda:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0ddc:	f7ff fc58 	bl	80a0690 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0de0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0de2:	6066      	str	r6, [r4, #4]
}
 80a0de4:	bd70      	pop	{r4, r5, r6, pc}

080a0de6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0de6:	b510      	push	{r4, lr}
 80a0de8:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0dea:	6800      	ldr	r0, [r0, #0]
 80a0dec:	b118      	cbz	r0, 80a0df6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a0dee:	f7ff fd73 	bl	80a08d8 <free>
            wakeupSource_ = nullptr;
 80a0df2:	2300      	movs	r3, #0
 80a0df4:	6023      	str	r3, [r4, #0]
        }
    }
 80a0df6:	bd10      	pop	{r4, pc}

080a0df8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0df8:	b510      	push	{r4, lr}
 80a0dfa:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a0dfc:	f7ff fff3 	bl	80a0de6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0e00:	4620      	mov	r0, r4
 80a0e02:	bd10      	pop	{r4, pc}

080a0e04 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0e04:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0e06:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0e08:	b510      	push	{r4, lr}
 80a0e0a:	4b08      	ldr	r3, [pc, #32]	; (80a0e2c <_GLOBAL__sub_I_System+0x28>)
 80a0e0c:	4c08      	ldr	r4, [pc, #32]	; (80a0e30 <_GLOBAL__sub_I_System+0x2c>)
 80a0e0e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0e10:	4b08      	ldr	r3, [pc, #32]	; (80a0e34 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0e12:	6020      	str	r0, [r4, #0]
 80a0e14:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a0e16:	71a0      	strb	r0, [r4, #6]
 80a0e18:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0e1a:	f7ff fcc9 	bl	80a07b0 <set_system_mode>
SystemClass System;
 80a0e1e:	4620      	mov	r0, r4
 80a0e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0e24:	4a04      	ldr	r2, [pc, #16]	; (80a0e38 <_GLOBAL__sub_I_System+0x34>)
 80a0e26:	4905      	ldr	r1, [pc, #20]	; (80a0e3c <_GLOBAL__sub_I_System+0x38>)
 80a0e28:	f000 bb1c 	b.w	80a1464 <__aeabi_atexit>
 80a0e2c:	200000b0 	.word	0x200000b0
 80a0e30:	200000a4 	.word	0x200000a4
 80a0e34:	ffff0000 	.word	0xffff0000
 80a0e38:	20000068 	.word	0x20000068
 80a0e3c:	080a0df9 	.word	0x080a0df9

080a0e40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0e40:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0e42:	681a      	ldr	r2, [r3, #0]
 80a0e44:	4b02      	ldr	r3, [pc, #8]	; (80a0e50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0e46:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0e48:	4770      	bx	lr
 80a0e4a:	bf00      	nop
 80a0e4c:	20000000 	.word	0x20000000
 80a0e50:	200000b4 	.word	0x200000b4

080a0e54 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a0e54:	4770      	bx	lr

080a0e56 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0e56:	7441      	strb	r1, [r0, #17]
}
 80a0e58:	4770      	bx	lr

080a0e5a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a0e5a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0e5c:	7c00      	ldrb	r0, [r0, #16]
 80a0e5e:	f7ff fc5f 	bl	80a0720 <hal_usart_available_data_for_write>
}
 80a0e62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e66:	bd08      	pop	{r3, pc}

080a0e68 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0e68:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0e6a:	7c00      	ldrb	r0, [r0, #16]
 80a0e6c:	f7ff fc30 	bl	80a06d0 <hal_usart_available>
}
 80a0e70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e74:	bd08      	pop	{r3, pc}

080a0e76 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0e76:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0e78:	7c00      	ldrb	r0, [r0, #16]
 80a0e7a:	f7ff fc39 	bl	80a06f0 <hal_usart_peek>
}
 80a0e7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0e82:	bd08      	pop	{r3, pc}

080a0e84 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0e84:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0e86:	7c00      	ldrb	r0, [r0, #16]
 80a0e88:	f7ff fc2a 	bl	80a06e0 <hal_usart_read>
}
 80a0e8c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0e90:	bd08      	pop	{r3, pc}

080a0e92 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a0e92:	7c00      	ldrb	r0, [r0, #16]
 80a0e94:	f7ff bc34 	b.w	80a0700 <hal_usart_flush>

080a0e98 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0e98:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0e9a:	7c46      	ldrb	r6, [r0, #17]
{
 80a0e9c:	4604      	mov	r4, r0
 80a0e9e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0ea0:	b12e      	cbz	r6, 80a0eae <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a0ea2:	4629      	mov	r1, r5
 80a0ea4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0eaa:	f7ff bc09 	b.w	80a06c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0eae:	7c00      	ldrb	r0, [r0, #16]
 80a0eb0:	f7ff fc36 	bl	80a0720 <hal_usart_available_data_for_write>
 80a0eb4:	2800      	cmp	r0, #0
 80a0eb6:	dcf4      	bgt.n	80a0ea2 <_ZN11USARTSerial5writeEh+0xa>
}
 80a0eb8:	4630      	mov	r0, r6
 80a0eba:	bd70      	pop	{r4, r5, r6, pc}

080a0ebc <_ZN11USARTSerialD0Ev>:
 80a0ebc:	b510      	push	{r4, lr}
 80a0ebe:	4604      	mov	r4, r0
 80a0ec0:	2114      	movs	r1, #20
 80a0ec2:	f000 fad4 	bl	80a146e <_ZdlPvj>
 80a0ec6:	4620      	mov	r0, r4
 80a0ec8:	bd10      	pop	{r4, pc}
	...

080a0ecc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a0ecc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0ed0:	b510      	push	{r4, lr}
 80a0ed2:	4604      	mov	r4, r0
 80a0ed4:	4608      	mov	r0, r1
 80a0ed6:	4611      	mov	r1, r2
 80a0ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0edc:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a0ee0:	4a04      	ldr	r2, [pc, #16]	; (80a0ef4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a0ee2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0ee4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a0ee6:	2201      	movs	r2, #1
 80a0ee8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a0eea:	461a      	mov	r2, r3
 80a0eec:	f7ff fbe0 	bl	80a06b0 <hal_usart_init>
}
 80a0ef0:	4620      	mov	r0, r4
 80a0ef2:	bd10      	pop	{r4, pc}
 80a0ef4:	080a24a4 	.word	0x080a24a4

080a0ef8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0ef8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0efa:	4d0d      	ldr	r5, [pc, #52]	; (80a0f30 <_Z22__fetch_global_Serial1v+0x38>)
 80a0efc:	7829      	ldrb	r1, [r5, #0]
 80a0efe:	f3bf 8f5b 	dmb	ish
 80a0f02:	f011 0401 	ands.w	r4, r1, #1
 80a0f06:	d111      	bne.n	80a0f2c <_Z22__fetch_global_Serial1v+0x34>
 80a0f08:	4628      	mov	r0, r5
 80a0f0a:	f7ff f8c8 	bl	80a009e <__cxa_guard_acquire>
 80a0f0e:	b168      	cbz	r0, 80a0f2c <_Z22__fetch_global_Serial1v+0x34>
 80a0f10:	4621      	mov	r1, r4
 80a0f12:	4a08      	ldr	r2, [pc, #32]	; (80a0f34 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0f14:	4b08      	ldr	r3, [pc, #32]	; (80a0f38 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f16:	4809      	ldr	r0, [pc, #36]	; (80a0f3c <_Z22__fetch_global_Serial1v+0x44>)
 80a0f18:	f7ff ffd8 	bl	80a0ecc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a0f1c:	4628      	mov	r0, r5
 80a0f1e:	f7ff f8c3 	bl	80a00a8 <__cxa_guard_release>
 80a0f22:	4a07      	ldr	r2, [pc, #28]	; (80a0f40 <_Z22__fetch_global_Serial1v+0x48>)
 80a0f24:	4907      	ldr	r1, [pc, #28]	; (80a0f44 <_Z22__fetch_global_Serial1v+0x4c>)
 80a0f26:	4805      	ldr	r0, [pc, #20]	; (80a0f3c <_Z22__fetch_global_Serial1v+0x44>)
 80a0f28:	f000 fa9c 	bl	80a1464 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0f2c:	4803      	ldr	r0, [pc, #12]	; (80a0f3c <_Z22__fetch_global_Serial1v+0x44>)
 80a0f2e:	bd38      	pop	{r3, r4, r5, pc}
 80a0f30:	200000b8 	.word	0x200000b8
 80a0f34:	200000bc 	.word	0x200000bc
 80a0f38:	20000140 	.word	0x20000140
 80a0f3c:	200001c4 	.word	0x200001c4
 80a0f40:	20000068 	.word	0x20000068
 80a0f44:	080a0e55 	.word	0x080a0e55

080a0f48 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0f48:	7441      	strb	r1, [r0, #17]
}
 80a0f4a:	4770      	bx	lr

080a0f4c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0f4c:	4770      	bx	lr

080a0f4e <_ZN9USBSerial4readEv>:
{
 80a0f4e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0f50:	2100      	movs	r1, #0
 80a0f52:	7c00      	ldrb	r0, [r0, #16]
 80a0f54:	f7ff fc0c 	bl	80a0770 <HAL_USB_USART_Receive_Data>
}
 80a0f58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f5c:	bd08      	pop	{r3, pc}

080a0f5e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a0f5e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0f60:	2101      	movs	r1, #1
 80a0f62:	7c00      	ldrb	r0, [r0, #16]
 80a0f64:	f7ff fc04 	bl	80a0770 <HAL_USB_USART_Receive_Data>
}
 80a0f68:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f6c:	bd08      	pop	{r3, pc}

080a0f6e <_ZN9USBSerial17availableForWriteEv>:
{
 80a0f6e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0f70:	7c00      	ldrb	r0, [r0, #16]
 80a0f72:	f7ff fbf5 	bl	80a0760 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0f76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f7a:	bd08      	pop	{r3, pc}

080a0f7c <_ZN9USBSerial9availableEv>:
{
 80a0f7c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0f7e:	7c00      	ldrb	r0, [r0, #16]
 80a0f80:	f7ff fbe6 	bl	80a0750 <HAL_USB_USART_Available_Data>
}
 80a0f84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f88:	bd08      	pop	{r3, pc}

080a0f8a <_ZN9USBSerial5writeEh>:
{
 80a0f8a:	b538      	push	{r3, r4, r5, lr}
 80a0f8c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f8e:	7c00      	ldrb	r0, [r0, #16]
{
 80a0f90:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f92:	f7ff fbe5 	bl	80a0760 <HAL_USB_USART_Available_Data_For_Write>
 80a0f96:	2800      	cmp	r0, #0
 80a0f98:	dc01      	bgt.n	80a0f9e <_ZN9USBSerial5writeEh+0x14>
 80a0f9a:	7c60      	ldrb	r0, [r4, #17]
 80a0f9c:	b128      	cbz	r0, 80a0faa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0f9e:	4629      	mov	r1, r5
 80a0fa0:	7c20      	ldrb	r0, [r4, #16]
 80a0fa2:	f7ff fbed 	bl	80a0780 <HAL_USB_USART_Send_Data>
 80a0fa6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0faa:	bd38      	pop	{r3, r4, r5, pc}

080a0fac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0fac:	7c00      	ldrb	r0, [r0, #16]
 80a0fae:	f7ff bbef 	b.w	80a0790 <HAL_USB_USART_Flush_Data>

080a0fb2 <_ZN9USBSerialD0Ev>:
 80a0fb2:	b510      	push	{r4, lr}
 80a0fb4:	4604      	mov	r4, r0
 80a0fb6:	2114      	movs	r1, #20
 80a0fb8:	f000 fa59 	bl	80a146e <_ZdlPvj>
 80a0fbc:	4620      	mov	r0, r4
 80a0fbe:	bd10      	pop	{r4, pc}

080a0fc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0fc0:	b510      	push	{r4, lr}
 80a0fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0fc6:	4604      	mov	r4, r0
 80a0fc8:	4608      	mov	r0, r1
 80a0fca:	2100      	movs	r1, #0
 80a0fcc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0fd0:	4b04      	ldr	r3, [pc, #16]	; (80a0fe4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0fd2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0fd4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0fd6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0fd8:	4611      	mov	r1, r2
  _blocking = true;
 80a0fda:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0fdc:	f7ff fba8 	bl	80a0730 <HAL_USB_USART_Init>
}
 80a0fe0:	4620      	mov	r0, r4
 80a0fe2:	bd10      	pop	{r4, pc}
 80a0fe4:	080a24d4 	.word	0x080a24d4

080a0fe8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0fe8:	2200      	movs	r2, #0
 80a0fea:	7c00      	ldrb	r0, [r0, #16]
 80a0fec:	f7ff bba8 	b.w	80a0740 <HAL_USB_USART_Begin>

080a0ff0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0ff0:	b510      	push	{r4, lr}
 80a0ff2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ff4:	2214      	movs	r2, #20
 80a0ff6:	2100      	movs	r1, #0
 80a0ff8:	f001 f9a8 	bl	80a234c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0ffc:	4b05      	ldr	r3, [pc, #20]	; (80a1014 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0ffe:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1000:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1002:	4b05      	ldr	r3, [pc, #20]	; (80a1018 <_Z19acquireSerialBufferv+0x28>)
 80a1004:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1006:	f240 1301 	movw	r3, #257	; 0x101
 80a100a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a100c:	2381      	movs	r3, #129	; 0x81
 80a100e:	8223      	strh	r3, [r4, #16]
}
 80a1010:	bd10      	pop	{r4, pc}
 80a1012:	bf00      	nop
 80a1014:	20000208 	.word	0x20000208
 80a1018:	20000309 	.word	0x20000309

080a101c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a101c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a101e:	4d0f      	ldr	r5, [pc, #60]	; (80a105c <_Z16_fetch_usbserialv+0x40>)
{
 80a1020:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1022:	a801      	add	r0, sp, #4
 80a1024:	f7ff ffe4 	bl	80a0ff0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1028:	7829      	ldrb	r1, [r5, #0]
 80a102a:	f3bf 8f5b 	dmb	ish
 80a102e:	f011 0401 	ands.w	r4, r1, #1
 80a1032:	d110      	bne.n	80a1056 <_Z16_fetch_usbserialv+0x3a>
 80a1034:	4628      	mov	r0, r5
 80a1036:	f7ff f832 	bl	80a009e <__cxa_guard_acquire>
 80a103a:	b160      	cbz	r0, 80a1056 <_Z16_fetch_usbserialv+0x3a>
 80a103c:	4621      	mov	r1, r4
 80a103e:	aa01      	add	r2, sp, #4
 80a1040:	4807      	ldr	r0, [pc, #28]	; (80a1060 <_Z16_fetch_usbserialv+0x44>)
 80a1042:	f7ff ffbd 	bl	80a0fc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1046:	4628      	mov	r0, r5
 80a1048:	f7ff f82e 	bl	80a00a8 <__cxa_guard_release>
 80a104c:	4a05      	ldr	r2, [pc, #20]	; (80a1064 <_Z16_fetch_usbserialv+0x48>)
 80a104e:	4906      	ldr	r1, [pc, #24]	; (80a1068 <_Z16_fetch_usbserialv+0x4c>)
 80a1050:	4803      	ldr	r0, [pc, #12]	; (80a1060 <_Z16_fetch_usbserialv+0x44>)
 80a1052:	f000 fa07 	bl	80a1464 <__aeabi_atexit>
	return _usbserial;
}
 80a1056:	4802      	ldr	r0, [pc, #8]	; (80a1060 <_Z16_fetch_usbserialv+0x44>)
 80a1058:	b007      	add	sp, #28
 80a105a:	bd30      	pop	{r4, r5, pc}
 80a105c:	200001d8 	.word	0x200001d8
 80a1060:	200001e0 	.word	0x200001e0
 80a1064:	20000068 	.word	0x20000068
 80a1068:	080a0f4d 	.word	0x080a0f4d

080a106c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a106c:	b510      	push	{r4, lr}
 80a106e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1070:	2214      	movs	r2, #20
 80a1072:	2100      	movs	r1, #0
 80a1074:	f001 f96a 	bl	80a234c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1078:	4b05      	ldr	r3, [pc, #20]	; (80a1090 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a107a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a107c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a107e:	4b05      	ldr	r3, [pc, #20]	; (80a1094 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1080:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1082:	f240 1301 	movw	r3, #257	; 0x101
 80a1086:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1088:	2381      	movs	r3, #129	; 0x81
 80a108a:	8223      	strh	r3, [r4, #16]
}
 80a108c:	bd10      	pop	{r4, pc}
 80a108e:	bf00      	nop
 80a1090:	2000038a 	.word	0x2000038a
 80a1094:	2000048b 	.word	0x2000048b

080a1098 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1098:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a109a:	4c0f      	ldr	r4, [pc, #60]	; (80a10d8 <_Z17_fetch_usbserial1v+0x40>)
{
 80a109c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a109e:	a801      	add	r0, sp, #4
 80a10a0:	f7ff ffe4 	bl	80a106c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a10a4:	7823      	ldrb	r3, [r4, #0]
 80a10a6:	f3bf 8f5b 	dmb	ish
 80a10aa:	07db      	lsls	r3, r3, #31
 80a10ac:	d410      	bmi.n	80a10d0 <_Z17_fetch_usbserial1v+0x38>
 80a10ae:	4620      	mov	r0, r4
 80a10b0:	f7fe fff5 	bl	80a009e <__cxa_guard_acquire>
 80a10b4:	b160      	cbz	r0, 80a10d0 <_Z17_fetch_usbserial1v+0x38>
 80a10b6:	2101      	movs	r1, #1
 80a10b8:	aa01      	add	r2, sp, #4
 80a10ba:	4808      	ldr	r0, [pc, #32]	; (80a10dc <_Z17_fetch_usbserial1v+0x44>)
 80a10bc:	f7ff ff80 	bl	80a0fc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a10c0:	4620      	mov	r0, r4
 80a10c2:	f7fe fff1 	bl	80a00a8 <__cxa_guard_release>
 80a10c6:	4a06      	ldr	r2, [pc, #24]	; (80a10e0 <_Z17_fetch_usbserial1v+0x48>)
 80a10c8:	4906      	ldr	r1, [pc, #24]	; (80a10e4 <_Z17_fetch_usbserial1v+0x4c>)
 80a10ca:	4804      	ldr	r0, [pc, #16]	; (80a10dc <_Z17_fetch_usbserial1v+0x44>)
 80a10cc:	f000 f9ca 	bl	80a1464 <__aeabi_atexit>
  return _usbserial1;
}
 80a10d0:	4802      	ldr	r0, [pc, #8]	; (80a10dc <_Z17_fetch_usbserial1v+0x44>)
 80a10d2:	b006      	add	sp, #24
 80a10d4:	bd10      	pop	{r4, pc}
 80a10d6:	bf00      	nop
 80a10d8:	200001dc 	.word	0x200001dc
 80a10dc:	200001f4 	.word	0x200001f4
 80a10e0:	20000068 	.word	0x20000068
 80a10e4:	080a0f4d 	.word	0x080a0f4d

080a10e8 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a10e8:	2200      	movs	r2, #0
 80a10ea:	6840      	ldr	r0, [r0, #4]
 80a10ec:	4611      	mov	r1, r2
 80a10ee:	f7ff bba3 	b.w	80a0838 <network_ready>

080a10f2 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a10f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a10f4:	4615      	mov	r5, r2
 80a10f6:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a10f8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a10fa:	460e      	mov	r6, r1
 80a10fc:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a10fe:	2100      	movs	r1, #0
 80a1100:	a803      	add	r0, sp, #12
 80a1102:	f001 f923 	bl	80a234c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1106:	4628      	mov	r0, r5
 80a1108:	f001 f94c 	bl	80a23a4 <strlen>
 80a110c:	2700      	movs	r7, #0
 80a110e:	b281      	uxth	r1, r0
 80a1110:	6873      	ldr	r3, [r6, #4]
 80a1112:	4628      	mov	r0, r5
 80a1114:	9700      	str	r7, [sp, #0]
 80a1116:	aa03      	add	r2, sp, #12
 80a1118:	f7ff fb42 	bl	80a07a0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a111c:	b130      	cbz	r0, 80a112c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a111e:	4639      	mov	r1, r7
 80a1120:	4620      	mov	r0, r4
 80a1122:	f7ff fc79 	bl	80a0a18 <_ZN9IPAddressC1Em>
    }
 80a1126:	4620      	mov	r0, r4
 80a1128:	b009      	add	sp, #36	; 0x24
 80a112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a112c:	4620      	mov	r0, r4
 80a112e:	a903      	add	r1, sp, #12
 80a1130:	f7ff fc60 	bl	80a09f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1134:	e7f7      	b.n	80a1126 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1136 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1136:	2200      	movs	r2, #0
 80a1138:	6840      	ldr	r0, [r0, #4]
 80a113a:	4611      	mov	r1, r2
 80a113c:	f7ff bb9c 	b.w	80a0878 <network_listening>

080a1140 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1140:	2200      	movs	r2, #0
 80a1142:	6840      	ldr	r0, [r0, #4]
 80a1144:	4611      	mov	r1, r2
 80a1146:	f7ff bba7 	b.w	80a0898 <network_get_listen_timeout>

080a114a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a114a:	2200      	movs	r2, #0
 80a114c:	6840      	ldr	r0, [r0, #4]
 80a114e:	f7ff bb9b 	b.w	80a0888 <network_set_listen_timeout>

080a1152 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1152:	2200      	movs	r2, #0
 80a1154:	6840      	ldr	r0, [r0, #4]
 80a1156:	f081 0101 	eor.w	r1, r1, #1
 80a115a:	f7ff bb85 	b.w	80a0868 <network_listen>

080a115e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a115e:	2300      	movs	r3, #0
 80a1160:	6840      	ldr	r0, [r0, #4]
 80a1162:	461a      	mov	r2, r3
 80a1164:	4619      	mov	r1, r3
 80a1166:	f7ff bb77 	b.w	80a0858 <network_off>

080a116a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a116a:	2300      	movs	r3, #0
 80a116c:	6840      	ldr	r0, [r0, #4]
 80a116e:	461a      	mov	r2, r3
 80a1170:	4619      	mov	r1, r3
 80a1172:	f7ff bb69 	b.w	80a0848 <network_on>

080a1176 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1176:	2200      	movs	r2, #0
 80a1178:	6840      	ldr	r0, [r0, #4]
 80a117a:	4611      	mov	r1, r2
 80a117c:	f7ff bb4c 	b.w	80a0818 <network_connecting>

080a1180 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1180:	2200      	movs	r2, #0
 80a1182:	2102      	movs	r1, #2
 80a1184:	6840      	ldr	r0, [r0, #4]
 80a1186:	f7ff bb4f 	b.w	80a0828 <network_disconnect>

080a118a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a118a:	2300      	movs	r3, #0
 80a118c:	6840      	ldr	r0, [r0, #4]
 80a118e:	461a      	mov	r2, r3
 80a1190:	f7ff bb3a 	b.w	80a0808 <network_connect>

080a1194 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1194:	2204      	movs	r2, #4
 80a1196:	4b02      	ldr	r3, [pc, #8]	; (80a11a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1198:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a119a:	4a02      	ldr	r2, [pc, #8]	; (80a11a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a119c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a119e:	4770      	bx	lr
 80a11a0:	2000050c 	.word	0x2000050c
 80a11a4:	080a2504 	.word	0x080a2504

080a11a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a11a8:	4b01      	ldr	r3, [pc, #4]	; (80a11b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a11aa:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a11ac:	4770      	bx	lr
 80a11ae:	bf00      	nop
 80a11b0:	20000004 	.word	0x20000004

080a11b4 <serialEventRun>:
{
 80a11b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a11b6:	4b13      	ldr	r3, [pc, #76]	; (80a1204 <serialEventRun+0x50>)
 80a11b8:	b143      	cbz	r3, 80a11cc <serialEventRun+0x18>
 80a11ba:	f7ff ff2f 	bl	80a101c <_Z16_fetch_usbserialv>
 80a11be:	6803      	ldr	r3, [r0, #0]
 80a11c0:	691b      	ldr	r3, [r3, #16]
 80a11c2:	4798      	blx	r3
 80a11c4:	2800      	cmp	r0, #0
 80a11c6:	dd01      	ble.n	80a11cc <serialEventRun+0x18>
        serialEvent();
 80a11c8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a11cc:	4b0e      	ldr	r3, [pc, #56]	; (80a1208 <serialEventRun+0x54>)
 80a11ce:	b143      	cbz	r3, 80a11e2 <serialEventRun+0x2e>
 80a11d0:	f7ff fe92 	bl	80a0ef8 <_Z22__fetch_global_Serial1v>
 80a11d4:	6803      	ldr	r3, [r0, #0]
 80a11d6:	691b      	ldr	r3, [r3, #16]
 80a11d8:	4798      	blx	r3
 80a11da:	2800      	cmp	r0, #0
 80a11dc:	dd01      	ble.n	80a11e2 <serialEventRun+0x2e>
        serialEvent1();
 80a11de:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a11e2:	4b0a      	ldr	r3, [pc, #40]	; (80a120c <serialEventRun+0x58>)
 80a11e4:	b10b      	cbz	r3, 80a11ea <serialEventRun+0x36>
 80a11e6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a11ea:	4b09      	ldr	r3, [pc, #36]	; (80a1210 <serialEventRun+0x5c>)
 80a11ec:	b143      	cbz	r3, 80a1200 <serialEventRun+0x4c>
 80a11ee:	f7ff ff53 	bl	80a1098 <_Z17_fetch_usbserial1v>
 80a11f2:	6803      	ldr	r3, [r0, #0]
 80a11f4:	691b      	ldr	r3, [r3, #16]
 80a11f6:	4798      	blx	r3
 80a11f8:	2800      	cmp	r0, #0
 80a11fa:	dd01      	ble.n	80a1200 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a11fc:	f3af 8000 	nop.w
}
 80a1200:	bd08      	pop	{r3, pc}
 80a1202:	bf00      	nop
	...

080a1214 <_post_loop>:
{
 80a1214:	b508      	push	{r3, lr}
	serialEventRun();
 80a1216:	f7ff ffcd 	bl	80a11b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a121a:	f7ff f9d7 	bl	80a05cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a121e:	4b01      	ldr	r3, [pc, #4]	; (80a1224 <_post_loop+0x10>)
 80a1220:	6018      	str	r0, [r3, #0]
}
 80a1222:	bd08      	pop	{r3, pc}
 80a1224:	2000052c 	.word	0x2000052c

080a1228 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1228:	4802      	ldr	r0, [pc, #8]	; (80a1234 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a122a:	4a03      	ldr	r2, [pc, #12]	; (80a1238 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a122c:	4903      	ldr	r1, [pc, #12]	; (80a123c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a122e:	1a12      	subs	r2, r2, r0
 80a1230:	f001 b87e 	b.w	80a2330 <memcpy>
 80a1234:	40024000 	.word	0x40024000
 80a1238:	40024004 	.word	0x40024004
 80a123c:	080a2560 	.word	0x080a2560

080a1240 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1240:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1242:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1244:	461a      	mov	r2, r3
 80a1246:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a124a:	9300      	str	r3, [sp, #0]
 80a124c:	f7ff faca 	bl	80a07e4 <system_ctrl_set_result>
}
 80a1250:	b003      	add	sp, #12
 80a1252:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1258 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1258:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a125a:	8843      	ldrh	r3, [r0, #2]
 80a125c:	2b0a      	cmp	r3, #10
 80a125e:	d008      	beq.n	80a1272 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1260:	2b50      	cmp	r3, #80	; 0x50
 80a1262:	d10b      	bne.n	80a127c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1264:	4b09      	ldr	r3, [pc, #36]	; (80a128c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1266:	681b      	ldr	r3, [r3, #0]
 80a1268:	b14b      	cbz	r3, 80a127e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a126a:	b003      	add	sp, #12
 80a126c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1270:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1272:	f7ff ffe5 	bl	80a1240 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1276:	b003      	add	sp, #12
 80a1278:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a127c:	2300      	movs	r3, #0
 80a127e:	461a      	mov	r2, r3
 80a1280:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1284:	9300      	str	r3, [sp, #0]
 80a1286:	f7ff faad 	bl	80a07e4 <system_ctrl_set_result>
}
 80a128a:	e7f4      	b.n	80a1276 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a128c:	20000518 	.word	0x20000518

080a1290 <module_user_init_hook>:
{
 80a1290:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1292:	4c12      	ldr	r4, [pc, #72]	; (80a12dc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1294:	2100      	movs	r1, #0
 80a1296:	4812      	ldr	r0, [pc, #72]	; (80a12e0 <module_user_init_hook+0x50>)
 80a1298:	f7ff fb26 	bl	80a08e8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a129c:	4d11      	ldr	r5, [pc, #68]	; (80a12e4 <module_user_init_hook+0x54>)
 80a129e:	6823      	ldr	r3, [r4, #0]
 80a12a0:	42ab      	cmp	r3, r5
 80a12a2:	bf0c      	ite	eq
 80a12a4:	2201      	moveq	r2, #1
 80a12a6:	2200      	movne	r2, #0
 80a12a8:	4b0f      	ldr	r3, [pc, #60]	; (80a12e8 <module_user_init_hook+0x58>)
 80a12aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a12ac:	d002      	beq.n	80a12b4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a12ae:	f7ff ffbb 	bl	80a1228 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a12b2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a12b4:	f7ff f97a 	bl	80a05ac <HAL_RNG_GetRandomNumber>
 80a12b8:	4604      	mov	r4, r0
    srand(seed);
 80a12ba:	f001 f84f 	bl	80a235c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a12be:	4b0b      	ldr	r3, [pc, #44]	; (80a12ec <module_user_init_hook+0x5c>)
 80a12c0:	b113      	cbz	r3, 80a12c8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a12c2:	4620      	mov	r0, r4
 80a12c4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a12c8:	2100      	movs	r1, #0
 80a12ca:	4808      	ldr	r0, [pc, #32]	; (80a12ec <module_user_init_hook+0x5c>)
 80a12cc:	f7ff fa94 	bl	80a07f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a12d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a12d4:	2100      	movs	r1, #0
 80a12d6:	4806      	ldr	r0, [pc, #24]	; (80a12f0 <module_user_init_hook+0x60>)
 80a12d8:	f7ff ba7a 	b.w	80a07d0 <system_ctrl_set_app_request_handler>
 80a12dc:	40024000 	.word	0x40024000
 80a12e0:	080a11a9 	.word	0x080a11a9
 80a12e4:	9a271c1e 	.word	0x9a271c1e
 80a12e8:	20000514 	.word	0x20000514
 80a12ec:	00000000 	.word	0x00000000
 80a12f0:	080a1259 	.word	0x080a1259

080a12f4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a12f4:	b510      	push	{r4, lr}
 80a12f6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a12f8:	6880      	ldr	r0, [r0, #8]
 80a12fa:	b108      	cbz	r0, 80a1300 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a12fc:	f7ff f94e 	bl	80a059c <os_mutex_recursive_destroy>
 80a1300:	4620      	mov	r0, r4
 80a1302:	bd10      	pop	{r4, pc}

080a1304 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1304:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1306:	b570      	push	{r4, r5, r6, lr}
 80a1308:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a130a:	d901      	bls.n	80a1310 <pinAvailable+0xc>
    return false;
 80a130c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a130e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1310:	f1a0 030d 	sub.w	r3, r0, #13
 80a1314:	2b02      	cmp	r3, #2
 80a1316:	d90b      	bls.n	80a1330 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1318:	2801      	cmp	r0, #1
 80a131a:	d826      	bhi.n	80a136a <pinAvailable+0x66>
 80a131c:	f000 f862 	bl	80a13e4 <_Z19__fetch_global_Wirev>
 80a1320:	2100      	movs	r1, #0
 80a1322:	7c00      	ldrb	r0, [r0, #16]
 80a1324:	f7ff f9a2 	bl	80a066c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1328:	f080 0001 	eor.w	r0, r0, #1
 80a132c:	b2c0      	uxtb	r0, r0
 80a132e:	e7ee      	b.n	80a130e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1330:	4e13      	ldr	r6, [pc, #76]	; (80a1380 <pinAvailable+0x7c>)
 80a1332:	7831      	ldrb	r1, [r6, #0]
 80a1334:	f3bf 8f5b 	dmb	ish
 80a1338:	f011 0501 	ands.w	r5, r1, #1
 80a133c:	d10f      	bne.n	80a135e <pinAvailable+0x5a>
 80a133e:	4630      	mov	r0, r6
 80a1340:	f7fe fead 	bl	80a009e <__cxa_guard_acquire>
 80a1344:	b158      	cbz	r0, 80a135e <pinAvailable+0x5a>
 80a1346:	4629      	mov	r1, r5
 80a1348:	480e      	ldr	r0, [pc, #56]	; (80a1384 <pinAvailable+0x80>)
 80a134a:	f7ff fd3d 	bl	80a0dc8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a134e:	4630      	mov	r0, r6
 80a1350:	f7fe feaa 	bl	80a00a8 <__cxa_guard_release>
 80a1354:	4a0c      	ldr	r2, [pc, #48]	; (80a1388 <pinAvailable+0x84>)
 80a1356:	490d      	ldr	r1, [pc, #52]	; (80a138c <pinAvailable+0x88>)
 80a1358:	480a      	ldr	r0, [pc, #40]	; (80a1384 <pinAvailable+0x80>)
 80a135a:	f000 f883 	bl	80a1464 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a135e:	4b09      	ldr	r3, [pc, #36]	; (80a1384 <pinAvailable+0x80>)
 80a1360:	7818      	ldrb	r0, [r3, #0]
 80a1362:	f7ff f99d 	bl	80a06a0 <hal_spi_is_enabled>
 80a1366:	2800      	cmp	r0, #0
 80a1368:	d1d0      	bne.n	80a130c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a136a:	3c12      	subs	r4, #18
 80a136c:	2c01      	cmp	r4, #1
 80a136e:	d805      	bhi.n	80a137c <pinAvailable+0x78>
 80a1370:	f7ff fdc2 	bl	80a0ef8 <_Z22__fetch_global_Serial1v>
 80a1374:	7c00      	ldrb	r0, [r0, #16]
 80a1376:	f7ff f9cb 	bl	80a0710 <hal_usart_is_enabled>
 80a137a:	e7d5      	b.n	80a1328 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a137c:	2001      	movs	r0, #1
 80a137e:	e7c6      	b.n	80a130e <pinAvailable+0xa>
 80a1380:	2000051c 	.word	0x2000051c
 80a1384:	20000520 	.word	0x20000520
 80a1388:	20000068 	.word	0x20000068
 80a138c:	080a12f5 	.word	0x080a12f5

080a1390 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1390:	2817      	cmp	r0, #23
{
 80a1392:	b538      	push	{r3, r4, r5, lr}
 80a1394:	4604      	mov	r4, r0
 80a1396:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1398:	d80a      	bhi.n	80a13b0 <pinMode+0x20>
 80a139a:	29ff      	cmp	r1, #255	; 0xff
 80a139c:	d008      	beq.n	80a13b0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a139e:	f7ff ffb1 	bl	80a1304 <pinAvailable>
 80a13a2:	b128      	cbz	r0, 80a13b0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a13a4:	4629      	mov	r1, r5
 80a13a6:	4620      	mov	r0, r4
}
 80a13a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a13ac:	f7ff b91e 	b.w	80a05ec <HAL_Pin_Mode>
}
 80a13b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a13b4 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a13b4:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a13b6:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a13b8:	2520      	movs	r5, #32
 80a13ba:	8043      	strh	r3, [r0, #2]
 80a13bc:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a13be:	4e08      	ldr	r6, [pc, #32]	; (80a13e0 <_Z17acquireWireBufferv+0x2c>)
{
 80a13c0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a13c2:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a13c4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a13c6:	6085      	str	r5, [r0, #8]
 80a13c8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a13ca:	4628      	mov	r0, r5
 80a13cc:	f000 f851 	bl	80a1472 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a13d0:	4631      	mov	r1, r6
	};
 80a13d2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a13d4:	4628      	mov	r0, r5
 80a13d6:	f000 f84c 	bl	80a1472 <_ZnajRKSt9nothrow_t>
	};
 80a13da:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a13dc:	4620      	mov	r0, r4
 80a13de:	bd70      	pop	{r4, r5, r6, pc}
 80a13e0:	080a2538 	.word	0x080a2538

080a13e4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a13e4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a13e6:	4d0f      	ldr	r5, [pc, #60]	; (80a1424 <_Z19__fetch_global_Wirev+0x40>)
{
 80a13e8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a13ea:	7829      	ldrb	r1, [r5, #0]
 80a13ec:	f3bf 8f5b 	dmb	ish
 80a13f0:	f011 0401 	ands.w	r4, r1, #1
 80a13f4:	d113      	bne.n	80a141e <_Z19__fetch_global_Wirev+0x3a>
 80a13f6:	4628      	mov	r0, r5
 80a13f8:	f7fe fe51 	bl	80a009e <__cxa_guard_acquire>
 80a13fc:	b178      	cbz	r0, 80a141e <_Z19__fetch_global_Wirev+0x3a>
 80a13fe:	a801      	add	r0, sp, #4
 80a1400:	f7ff ffd8 	bl	80a13b4 <_Z17acquireWireBufferv>
 80a1404:	4621      	mov	r1, r4
 80a1406:	aa01      	add	r2, sp, #4
 80a1408:	4807      	ldr	r0, [pc, #28]	; (80a1428 <_Z19__fetch_global_Wirev+0x44>)
 80a140a:	f7ff faad 	bl	80a0968 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a140e:	4628      	mov	r0, r5
 80a1410:	f7fe fe4a 	bl	80a00a8 <__cxa_guard_release>
 80a1414:	4a05      	ldr	r2, [pc, #20]	; (80a142c <_Z19__fetch_global_Wirev+0x48>)
 80a1416:	4906      	ldr	r1, [pc, #24]	; (80a1430 <_Z19__fetch_global_Wirev+0x4c>)
 80a1418:	4803      	ldr	r0, [pc, #12]	; (80a1428 <_Z19__fetch_global_Wirev+0x44>)
 80a141a:	f000 f823 	bl	80a1464 <__aeabi_atexit>
	return wire;
}
 80a141e:	4802      	ldr	r0, [pc, #8]	; (80a1428 <_Z19__fetch_global_Wirev+0x44>)
 80a1420:	b007      	add	sp, #28
 80a1422:	bd30      	pop	{r4, r5, pc}
 80a1424:	20000530 	.word	0x20000530
 80a1428:	20000534 	.word	0x20000534
 80a142c:	20000068 	.word	0x20000068
 80a1430:	080a0911 	.word	0x080a0911

080a1434 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1434:	2300      	movs	r3, #0
 80a1436:	b513      	push	{r0, r1, r4, lr}
 80a1438:	4c07      	ldr	r4, [pc, #28]	; (80a1458 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a143a:	461a      	mov	r2, r3
 80a143c:	4619      	mov	r1, r3
 80a143e:	4620      	mov	r0, r4
 80a1440:	9300      	str	r3, [sp, #0]
 80a1442:	f7ff faff 	bl	80a0a44 <_ZN9IPAddressC1Ehhhh>
 80a1446:	4620      	mov	r0, r4
 80a1448:	4a04      	ldr	r2, [pc, #16]	; (80a145c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a144a:	4905      	ldr	r1, [pc, #20]	; (80a1460 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a144c:	b002      	add	sp, #8
 80a144e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1452:	f000 b807 	b.w	80a1464 <__aeabi_atexit>
 80a1456:	bf00      	nop
 80a1458:	20000548 	.word	0x20000548
 80a145c:	20000068 	.word	0x20000068
 80a1460:	080a0995 	.word	0x080a0995

080a1464 <__aeabi_atexit>:
 80a1464:	460b      	mov	r3, r1
 80a1466:	4601      	mov	r1, r0
 80a1468:	4618      	mov	r0, r3
 80a146a:	f000 bf53 	b.w	80a2314 <__cxa_atexit>

080a146e <_ZdlPvj>:
 80a146e:	f7fe be14 	b.w	80a009a <_ZdlPv>

080a1472 <_ZnajRKSt9nothrow_t>:
 80a1472:	f7fe be10 	b.w	80a0096 <_Znaj>
	...

080a1478 <__aeabi_drsub>:
 80a1478:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a147c:	e002      	b.n	80a1484 <__adddf3>
 80a147e:	bf00      	nop

080a1480 <__aeabi_dsub>:
 80a1480:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1484 <__adddf3>:
 80a1484:	b530      	push	{r4, r5, lr}
 80a1486:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a148a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a148e:	ea94 0f05 	teq	r4, r5
 80a1492:	bf08      	it	eq
 80a1494:	ea90 0f02 	teqeq	r0, r2
 80a1498:	bf1f      	itttt	ne
 80a149a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a149e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a14a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a14a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a14aa:	f000 80e2 	beq.w	80a1672 <__adddf3+0x1ee>
 80a14ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a14b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a14b6:	bfb8      	it	lt
 80a14b8:	426d      	neglt	r5, r5
 80a14ba:	dd0c      	ble.n	80a14d6 <__adddf3+0x52>
 80a14bc:	442c      	add	r4, r5
 80a14be:	ea80 0202 	eor.w	r2, r0, r2
 80a14c2:	ea81 0303 	eor.w	r3, r1, r3
 80a14c6:	ea82 0000 	eor.w	r0, r2, r0
 80a14ca:	ea83 0101 	eor.w	r1, r3, r1
 80a14ce:	ea80 0202 	eor.w	r2, r0, r2
 80a14d2:	ea81 0303 	eor.w	r3, r1, r3
 80a14d6:	2d36      	cmp	r5, #54	; 0x36
 80a14d8:	bf88      	it	hi
 80a14da:	bd30      	pophi	{r4, r5, pc}
 80a14dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a14e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a14e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a14e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a14ec:	d002      	beq.n	80a14f4 <__adddf3+0x70>
 80a14ee:	4240      	negs	r0, r0
 80a14f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a14f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a14f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a14fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1500:	d002      	beq.n	80a1508 <__adddf3+0x84>
 80a1502:	4252      	negs	r2, r2
 80a1504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1508:	ea94 0f05 	teq	r4, r5
 80a150c:	f000 80a7 	beq.w	80a165e <__adddf3+0x1da>
 80a1510:	f1a4 0401 	sub.w	r4, r4, #1
 80a1514:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1518:	db0d      	blt.n	80a1536 <__adddf3+0xb2>
 80a151a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a151e:	fa22 f205 	lsr.w	r2, r2, r5
 80a1522:	1880      	adds	r0, r0, r2
 80a1524:	f141 0100 	adc.w	r1, r1, #0
 80a1528:	fa03 f20e 	lsl.w	r2, r3, lr
 80a152c:	1880      	adds	r0, r0, r2
 80a152e:	fa43 f305 	asr.w	r3, r3, r5
 80a1532:	4159      	adcs	r1, r3
 80a1534:	e00e      	b.n	80a1554 <__adddf3+0xd0>
 80a1536:	f1a5 0520 	sub.w	r5, r5, #32
 80a153a:	f10e 0e20 	add.w	lr, lr, #32
 80a153e:	2a01      	cmp	r2, #1
 80a1540:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1544:	bf28      	it	cs
 80a1546:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a154a:	fa43 f305 	asr.w	r3, r3, r5
 80a154e:	18c0      	adds	r0, r0, r3
 80a1550:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1558:	d507      	bpl.n	80a156a <__adddf3+0xe6>
 80a155a:	f04f 0e00 	mov.w	lr, #0
 80a155e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1562:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1566:	eb6e 0101 	sbc.w	r1, lr, r1
 80a156a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a156e:	d31b      	bcc.n	80a15a8 <__adddf3+0x124>
 80a1570:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1574:	d30c      	bcc.n	80a1590 <__adddf3+0x10c>
 80a1576:	0849      	lsrs	r1, r1, #1
 80a1578:	ea5f 0030 	movs.w	r0, r0, rrx
 80a157c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1580:	f104 0401 	add.w	r4, r4, #1
 80a1584:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1588:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a158c:	f080 809a 	bcs.w	80a16c4 <__adddf3+0x240>
 80a1590:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1594:	bf08      	it	eq
 80a1596:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a159a:	f150 0000 	adcs.w	r0, r0, #0
 80a159e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a15a2:	ea41 0105 	orr.w	r1, r1, r5
 80a15a6:	bd30      	pop	{r4, r5, pc}
 80a15a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a15ac:	4140      	adcs	r0, r0
 80a15ae:	eb41 0101 	adc.w	r1, r1, r1
 80a15b2:	3c01      	subs	r4, #1
 80a15b4:	bf28      	it	cs
 80a15b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a15ba:	d2e9      	bcs.n	80a1590 <__adddf3+0x10c>
 80a15bc:	f091 0f00 	teq	r1, #0
 80a15c0:	bf04      	itt	eq
 80a15c2:	4601      	moveq	r1, r0
 80a15c4:	2000      	moveq	r0, #0
 80a15c6:	fab1 f381 	clz	r3, r1
 80a15ca:	bf08      	it	eq
 80a15cc:	3320      	addeq	r3, #32
 80a15ce:	f1a3 030b 	sub.w	r3, r3, #11
 80a15d2:	f1b3 0220 	subs.w	r2, r3, #32
 80a15d6:	da0c      	bge.n	80a15f2 <__adddf3+0x16e>
 80a15d8:	320c      	adds	r2, #12
 80a15da:	dd08      	ble.n	80a15ee <__adddf3+0x16a>
 80a15dc:	f102 0c14 	add.w	ip, r2, #20
 80a15e0:	f1c2 020c 	rsb	r2, r2, #12
 80a15e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80a15e8:	fa21 f102 	lsr.w	r1, r1, r2
 80a15ec:	e00c      	b.n	80a1608 <__adddf3+0x184>
 80a15ee:	f102 0214 	add.w	r2, r2, #20
 80a15f2:	bfd8      	it	le
 80a15f4:	f1c2 0c20 	rsble	ip, r2, #32
 80a15f8:	fa01 f102 	lsl.w	r1, r1, r2
 80a15fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1600:	bfdc      	itt	le
 80a1602:	ea41 010c 	orrle.w	r1, r1, ip
 80a1606:	4090      	lslle	r0, r2
 80a1608:	1ae4      	subs	r4, r4, r3
 80a160a:	bfa2      	ittt	ge
 80a160c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1610:	4329      	orrge	r1, r5
 80a1612:	bd30      	popge	{r4, r5, pc}
 80a1614:	ea6f 0404 	mvn.w	r4, r4
 80a1618:	3c1f      	subs	r4, #31
 80a161a:	da1c      	bge.n	80a1656 <__adddf3+0x1d2>
 80a161c:	340c      	adds	r4, #12
 80a161e:	dc0e      	bgt.n	80a163e <__adddf3+0x1ba>
 80a1620:	f104 0414 	add.w	r4, r4, #20
 80a1624:	f1c4 0220 	rsb	r2, r4, #32
 80a1628:	fa20 f004 	lsr.w	r0, r0, r4
 80a162c:	fa01 f302 	lsl.w	r3, r1, r2
 80a1630:	ea40 0003 	orr.w	r0, r0, r3
 80a1634:	fa21 f304 	lsr.w	r3, r1, r4
 80a1638:	ea45 0103 	orr.w	r1, r5, r3
 80a163c:	bd30      	pop	{r4, r5, pc}
 80a163e:	f1c4 040c 	rsb	r4, r4, #12
 80a1642:	f1c4 0220 	rsb	r2, r4, #32
 80a1646:	fa20 f002 	lsr.w	r0, r0, r2
 80a164a:	fa01 f304 	lsl.w	r3, r1, r4
 80a164e:	ea40 0003 	orr.w	r0, r0, r3
 80a1652:	4629      	mov	r1, r5
 80a1654:	bd30      	pop	{r4, r5, pc}
 80a1656:	fa21 f004 	lsr.w	r0, r1, r4
 80a165a:	4629      	mov	r1, r5
 80a165c:	bd30      	pop	{r4, r5, pc}
 80a165e:	f094 0f00 	teq	r4, #0
 80a1662:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1666:	bf06      	itte	eq
 80a1668:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a166c:	3401      	addeq	r4, #1
 80a166e:	3d01      	subne	r5, #1
 80a1670:	e74e      	b.n	80a1510 <__adddf3+0x8c>
 80a1672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1676:	bf18      	it	ne
 80a1678:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a167c:	d029      	beq.n	80a16d2 <__adddf3+0x24e>
 80a167e:	ea94 0f05 	teq	r4, r5
 80a1682:	bf08      	it	eq
 80a1684:	ea90 0f02 	teqeq	r0, r2
 80a1688:	d005      	beq.n	80a1696 <__adddf3+0x212>
 80a168a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a168e:	bf04      	itt	eq
 80a1690:	4619      	moveq	r1, r3
 80a1692:	4610      	moveq	r0, r2
 80a1694:	bd30      	pop	{r4, r5, pc}
 80a1696:	ea91 0f03 	teq	r1, r3
 80a169a:	bf1e      	ittt	ne
 80a169c:	2100      	movne	r1, #0
 80a169e:	2000      	movne	r0, #0
 80a16a0:	bd30      	popne	{r4, r5, pc}
 80a16a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a16a6:	d105      	bne.n	80a16b4 <__adddf3+0x230>
 80a16a8:	0040      	lsls	r0, r0, #1
 80a16aa:	4149      	adcs	r1, r1
 80a16ac:	bf28      	it	cs
 80a16ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a16b2:	bd30      	pop	{r4, r5, pc}
 80a16b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a16b8:	bf3c      	itt	cc
 80a16ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a16be:	bd30      	popcc	{r4, r5, pc}
 80a16c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a16c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a16c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a16cc:	f04f 0000 	mov.w	r0, #0
 80a16d0:	bd30      	pop	{r4, r5, pc}
 80a16d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a16d6:	bf1a      	itte	ne
 80a16d8:	4619      	movne	r1, r3
 80a16da:	4610      	movne	r0, r2
 80a16dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a16e0:	bf1c      	itt	ne
 80a16e2:	460b      	movne	r3, r1
 80a16e4:	4602      	movne	r2, r0
 80a16e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a16ea:	bf06      	itte	eq
 80a16ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a16f0:	ea91 0f03 	teqeq	r1, r3
 80a16f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a16f8:	bd30      	pop	{r4, r5, pc}
 80a16fa:	bf00      	nop

080a16fc <__aeabi_ui2d>:
 80a16fc:	f090 0f00 	teq	r0, #0
 80a1700:	bf04      	itt	eq
 80a1702:	2100      	moveq	r1, #0
 80a1704:	4770      	bxeq	lr
 80a1706:	b530      	push	{r4, r5, lr}
 80a1708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a170c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1710:	f04f 0500 	mov.w	r5, #0
 80a1714:	f04f 0100 	mov.w	r1, #0
 80a1718:	e750      	b.n	80a15bc <__adddf3+0x138>
 80a171a:	bf00      	nop

080a171c <__aeabi_i2d>:
 80a171c:	f090 0f00 	teq	r0, #0
 80a1720:	bf04      	itt	eq
 80a1722:	2100      	moveq	r1, #0
 80a1724:	4770      	bxeq	lr
 80a1726:	b530      	push	{r4, r5, lr}
 80a1728:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a172c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1730:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1734:	bf48      	it	mi
 80a1736:	4240      	negmi	r0, r0
 80a1738:	f04f 0100 	mov.w	r1, #0
 80a173c:	e73e      	b.n	80a15bc <__adddf3+0x138>
 80a173e:	bf00      	nop

080a1740 <__aeabi_f2d>:
 80a1740:	0042      	lsls	r2, r0, #1
 80a1742:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1746:	ea4f 0131 	mov.w	r1, r1, rrx
 80a174a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a174e:	bf1f      	itttt	ne
 80a1750:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1754:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1758:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a175c:	4770      	bxne	lr
 80a175e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a1762:	bf08      	it	eq
 80a1764:	4770      	bxeq	lr
 80a1766:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a176a:	bf04      	itt	eq
 80a176c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1770:	4770      	bxeq	lr
 80a1772:	b530      	push	{r4, r5, lr}
 80a1774:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a177c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1780:	e71c      	b.n	80a15bc <__adddf3+0x138>
 80a1782:	bf00      	nop

080a1784 <__aeabi_ul2d>:
 80a1784:	ea50 0201 	orrs.w	r2, r0, r1
 80a1788:	bf08      	it	eq
 80a178a:	4770      	bxeq	lr
 80a178c:	b530      	push	{r4, r5, lr}
 80a178e:	f04f 0500 	mov.w	r5, #0
 80a1792:	e00a      	b.n	80a17aa <__aeabi_l2d+0x16>

080a1794 <__aeabi_l2d>:
 80a1794:	ea50 0201 	orrs.w	r2, r0, r1
 80a1798:	bf08      	it	eq
 80a179a:	4770      	bxeq	lr
 80a179c:	b530      	push	{r4, r5, lr}
 80a179e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a17a2:	d502      	bpl.n	80a17aa <__aeabi_l2d+0x16>
 80a17a4:	4240      	negs	r0, r0
 80a17a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a17aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a17ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a17b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a17b6:	f43f aed8 	beq.w	80a156a <__adddf3+0xe6>
 80a17ba:	f04f 0203 	mov.w	r2, #3
 80a17be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a17c2:	bf18      	it	ne
 80a17c4:	3203      	addne	r2, #3
 80a17c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a17ca:	bf18      	it	ne
 80a17cc:	3203      	addne	r2, #3
 80a17ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a17d2:	f1c2 0320 	rsb	r3, r2, #32
 80a17d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a17da:	fa20 f002 	lsr.w	r0, r0, r2
 80a17de:	fa01 fe03 	lsl.w	lr, r1, r3
 80a17e2:	ea40 000e 	orr.w	r0, r0, lr
 80a17e6:	fa21 f102 	lsr.w	r1, r1, r2
 80a17ea:	4414      	add	r4, r2
 80a17ec:	e6bd      	b.n	80a156a <__adddf3+0xe6>
 80a17ee:	bf00      	nop

080a17f0 <__aeabi_dmul>:
 80a17f0:	b570      	push	{r4, r5, r6, lr}
 80a17f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a17f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a17fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a17fe:	bf1d      	ittte	ne
 80a1800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1804:	ea94 0f0c 	teqne	r4, ip
 80a1808:	ea95 0f0c 	teqne	r5, ip
 80a180c:	f000 f8de 	bleq	80a19cc <__aeabi_dmul+0x1dc>
 80a1810:	442c      	add	r4, r5
 80a1812:	ea81 0603 	eor.w	r6, r1, r3
 80a1816:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a181a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a181e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1822:	bf18      	it	ne
 80a1824:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a182c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1830:	d038      	beq.n	80a18a4 <__aeabi_dmul+0xb4>
 80a1832:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1836:	f04f 0500 	mov.w	r5, #0
 80a183a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a183e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1842:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1846:	f04f 0600 	mov.w	r6, #0
 80a184a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a184e:	f09c 0f00 	teq	ip, #0
 80a1852:	bf18      	it	ne
 80a1854:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1858:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a185c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1860:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1864:	d204      	bcs.n	80a1870 <__aeabi_dmul+0x80>
 80a1866:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a186a:	416d      	adcs	r5, r5
 80a186c:	eb46 0606 	adc.w	r6, r6, r6
 80a1870:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1874:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1878:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a187c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1880:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1884:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1888:	bf88      	it	hi
 80a188a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a188e:	d81e      	bhi.n	80a18ce <__aeabi_dmul+0xde>
 80a1890:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1894:	bf08      	it	eq
 80a1896:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a189a:	f150 0000 	adcs.w	r0, r0, #0
 80a189e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a18a2:	bd70      	pop	{r4, r5, r6, pc}
 80a18a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a18a8:	ea46 0101 	orr.w	r1, r6, r1
 80a18ac:	ea40 0002 	orr.w	r0, r0, r2
 80a18b0:	ea81 0103 	eor.w	r1, r1, r3
 80a18b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a18b8:	bfc2      	ittt	gt
 80a18ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a18be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a18c2:	bd70      	popgt	{r4, r5, r6, pc}
 80a18c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a18c8:	f04f 0e00 	mov.w	lr, #0
 80a18cc:	3c01      	subs	r4, #1
 80a18ce:	f300 80ab 	bgt.w	80a1a28 <__aeabi_dmul+0x238>
 80a18d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a18d6:	bfde      	ittt	le
 80a18d8:	2000      	movle	r0, #0
 80a18da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a18de:	bd70      	pople	{r4, r5, r6, pc}
 80a18e0:	f1c4 0400 	rsb	r4, r4, #0
 80a18e4:	3c20      	subs	r4, #32
 80a18e6:	da35      	bge.n	80a1954 <__aeabi_dmul+0x164>
 80a18e8:	340c      	adds	r4, #12
 80a18ea:	dc1b      	bgt.n	80a1924 <__aeabi_dmul+0x134>
 80a18ec:	f104 0414 	add.w	r4, r4, #20
 80a18f0:	f1c4 0520 	rsb	r5, r4, #32
 80a18f4:	fa00 f305 	lsl.w	r3, r0, r5
 80a18f8:	fa20 f004 	lsr.w	r0, r0, r4
 80a18fc:	fa01 f205 	lsl.w	r2, r1, r5
 80a1900:	ea40 0002 	orr.w	r0, r0, r2
 80a1904:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1908:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a190c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1910:	fa21 f604 	lsr.w	r6, r1, r4
 80a1914:	eb42 0106 	adc.w	r1, r2, r6
 80a1918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a191c:	bf08      	it	eq
 80a191e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1922:	bd70      	pop	{r4, r5, r6, pc}
 80a1924:	f1c4 040c 	rsb	r4, r4, #12
 80a1928:	f1c4 0520 	rsb	r5, r4, #32
 80a192c:	fa00 f304 	lsl.w	r3, r0, r4
 80a1930:	fa20 f005 	lsr.w	r0, r0, r5
 80a1934:	fa01 f204 	lsl.w	r2, r1, r4
 80a1938:	ea40 0002 	orr.w	r0, r0, r2
 80a193c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1940:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1944:	f141 0100 	adc.w	r1, r1, #0
 80a1948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a194c:	bf08      	it	eq
 80a194e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1952:	bd70      	pop	{r4, r5, r6, pc}
 80a1954:	f1c4 0520 	rsb	r5, r4, #32
 80a1958:	fa00 f205 	lsl.w	r2, r0, r5
 80a195c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1960:	fa20 f304 	lsr.w	r3, r0, r4
 80a1964:	fa01 f205 	lsl.w	r2, r1, r5
 80a1968:	ea43 0302 	orr.w	r3, r3, r2
 80a196c:	fa21 f004 	lsr.w	r0, r1, r4
 80a1970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1974:	fa21 f204 	lsr.w	r2, r1, r4
 80a1978:	ea20 0002 	bic.w	r0, r0, r2
 80a197c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1984:	bf08      	it	eq
 80a1986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a198a:	bd70      	pop	{r4, r5, r6, pc}
 80a198c:	f094 0f00 	teq	r4, #0
 80a1990:	d10f      	bne.n	80a19b2 <__aeabi_dmul+0x1c2>
 80a1992:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1996:	0040      	lsls	r0, r0, #1
 80a1998:	eb41 0101 	adc.w	r1, r1, r1
 80a199c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a19a0:	bf08      	it	eq
 80a19a2:	3c01      	subeq	r4, #1
 80a19a4:	d0f7      	beq.n	80a1996 <__aeabi_dmul+0x1a6>
 80a19a6:	ea41 0106 	orr.w	r1, r1, r6
 80a19aa:	f095 0f00 	teq	r5, #0
 80a19ae:	bf18      	it	ne
 80a19b0:	4770      	bxne	lr
 80a19b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a19b6:	0052      	lsls	r2, r2, #1
 80a19b8:	eb43 0303 	adc.w	r3, r3, r3
 80a19bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a19c0:	bf08      	it	eq
 80a19c2:	3d01      	subeq	r5, #1
 80a19c4:	d0f7      	beq.n	80a19b6 <__aeabi_dmul+0x1c6>
 80a19c6:	ea43 0306 	orr.w	r3, r3, r6
 80a19ca:	4770      	bx	lr
 80a19cc:	ea94 0f0c 	teq	r4, ip
 80a19d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a19d4:	bf18      	it	ne
 80a19d6:	ea95 0f0c 	teqne	r5, ip
 80a19da:	d00c      	beq.n	80a19f6 <__aeabi_dmul+0x206>
 80a19dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a19e0:	bf18      	it	ne
 80a19e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a19e6:	d1d1      	bne.n	80a198c <__aeabi_dmul+0x19c>
 80a19e8:	ea81 0103 	eor.w	r1, r1, r3
 80a19ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a19f0:	f04f 0000 	mov.w	r0, #0
 80a19f4:	bd70      	pop	{r4, r5, r6, pc}
 80a19f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a19fa:	bf06      	itte	eq
 80a19fc:	4610      	moveq	r0, r2
 80a19fe:	4619      	moveq	r1, r3
 80a1a00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1a04:	d019      	beq.n	80a1a3a <__aeabi_dmul+0x24a>
 80a1a06:	ea94 0f0c 	teq	r4, ip
 80a1a0a:	d102      	bne.n	80a1a12 <__aeabi_dmul+0x222>
 80a1a0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1a10:	d113      	bne.n	80a1a3a <__aeabi_dmul+0x24a>
 80a1a12:	ea95 0f0c 	teq	r5, ip
 80a1a16:	d105      	bne.n	80a1a24 <__aeabi_dmul+0x234>
 80a1a18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1a1c:	bf1c      	itt	ne
 80a1a1e:	4610      	movne	r0, r2
 80a1a20:	4619      	movne	r1, r3
 80a1a22:	d10a      	bne.n	80a1a3a <__aeabi_dmul+0x24a>
 80a1a24:	ea81 0103 	eor.w	r1, r1, r3
 80a1a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1a2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1a30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1a34:	f04f 0000 	mov.w	r0, #0
 80a1a38:	bd70      	pop	{r4, r5, r6, pc}
 80a1a3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1a3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1a42:	bd70      	pop	{r4, r5, r6, pc}

080a1a44 <__aeabi_ddiv>:
 80a1a44:	b570      	push	{r4, r5, r6, lr}
 80a1a46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1a4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1a4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1a52:	bf1d      	ittte	ne
 80a1a54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1a58:	ea94 0f0c 	teqne	r4, ip
 80a1a5c:	ea95 0f0c 	teqne	r5, ip
 80a1a60:	f000 f8a7 	bleq	80a1bb2 <__aeabi_ddiv+0x16e>
 80a1a64:	eba4 0405 	sub.w	r4, r4, r5
 80a1a68:	ea81 0e03 	eor.w	lr, r1, r3
 80a1a6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1a70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1a74:	f000 8088 	beq.w	80a1b88 <__aeabi_ddiv+0x144>
 80a1a78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1a7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1a80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1a84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1a88:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1a8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1a90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1a94:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1a98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1a9c:	429d      	cmp	r5, r3
 80a1a9e:	bf08      	it	eq
 80a1aa0:	4296      	cmpeq	r6, r2
 80a1aa2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1aa6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1aaa:	d202      	bcs.n	80a1ab2 <__aeabi_ddiv+0x6e>
 80a1aac:	085b      	lsrs	r3, r3, #1
 80a1aae:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1ab2:	1ab6      	subs	r6, r6, r2
 80a1ab4:	eb65 0503 	sbc.w	r5, r5, r3
 80a1ab8:	085b      	lsrs	r3, r3, #1
 80a1aba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1abe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a1ac2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a1ac6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1aca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1ace:	bf22      	ittt	cs
 80a1ad0:	1ab6      	subcs	r6, r6, r2
 80a1ad2:	4675      	movcs	r5, lr
 80a1ad4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1ad8:	085b      	lsrs	r3, r3, #1
 80a1ada:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1ade:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1ae2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1ae6:	bf22      	ittt	cs
 80a1ae8:	1ab6      	subcs	r6, r6, r2
 80a1aea:	4675      	movcs	r5, lr
 80a1aec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1af0:	085b      	lsrs	r3, r3, #1
 80a1af2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1af6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1afa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1afe:	bf22      	ittt	cs
 80a1b00:	1ab6      	subcs	r6, r6, r2
 80a1b02:	4675      	movcs	r5, lr
 80a1b04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1b08:	085b      	lsrs	r3, r3, #1
 80a1b0a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1b0e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1b12:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1b16:	bf22      	ittt	cs
 80a1b18:	1ab6      	subcs	r6, r6, r2
 80a1b1a:	4675      	movcs	r5, lr
 80a1b1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1b20:	ea55 0e06 	orrs.w	lr, r5, r6
 80a1b24:	d018      	beq.n	80a1b58 <__aeabi_ddiv+0x114>
 80a1b26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a1b2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a1b2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a1b32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a1b36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a1b3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a1b3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a1b42:	d1c0      	bne.n	80a1ac6 <__aeabi_ddiv+0x82>
 80a1b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1b48:	d10b      	bne.n	80a1b62 <__aeabi_ddiv+0x11e>
 80a1b4a:	ea41 0100 	orr.w	r1, r1, r0
 80a1b4e:	f04f 0000 	mov.w	r0, #0
 80a1b52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a1b56:	e7b6      	b.n	80a1ac6 <__aeabi_ddiv+0x82>
 80a1b58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1b5c:	bf04      	itt	eq
 80a1b5e:	4301      	orreq	r1, r0
 80a1b60:	2000      	moveq	r0, #0
 80a1b62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1b66:	bf88      	it	hi
 80a1b68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1b6c:	f63f aeaf 	bhi.w	80a18ce <__aeabi_dmul+0xde>
 80a1b70:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1b74:	bf04      	itt	eq
 80a1b76:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1b7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1b7e:	f150 0000 	adcs.w	r0, r0, #0
 80a1b82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1b86:	bd70      	pop	{r4, r5, r6, pc}
 80a1b88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1b8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1b90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1b94:	bfc2      	ittt	gt
 80a1b96:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1b9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1b9e:	bd70      	popgt	{r4, r5, r6, pc}
 80a1ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1ba4:	f04f 0e00 	mov.w	lr, #0
 80a1ba8:	3c01      	subs	r4, #1
 80a1baa:	e690      	b.n	80a18ce <__aeabi_dmul+0xde>
 80a1bac:	ea45 0e06 	orr.w	lr, r5, r6
 80a1bb0:	e68d      	b.n	80a18ce <__aeabi_dmul+0xde>
 80a1bb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1bb6:	ea94 0f0c 	teq	r4, ip
 80a1bba:	bf08      	it	eq
 80a1bbc:	ea95 0f0c 	teqeq	r5, ip
 80a1bc0:	f43f af3b 	beq.w	80a1a3a <__aeabi_dmul+0x24a>
 80a1bc4:	ea94 0f0c 	teq	r4, ip
 80a1bc8:	d10a      	bne.n	80a1be0 <__aeabi_ddiv+0x19c>
 80a1bca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1bce:	f47f af34 	bne.w	80a1a3a <__aeabi_dmul+0x24a>
 80a1bd2:	ea95 0f0c 	teq	r5, ip
 80a1bd6:	f47f af25 	bne.w	80a1a24 <__aeabi_dmul+0x234>
 80a1bda:	4610      	mov	r0, r2
 80a1bdc:	4619      	mov	r1, r3
 80a1bde:	e72c      	b.n	80a1a3a <__aeabi_dmul+0x24a>
 80a1be0:	ea95 0f0c 	teq	r5, ip
 80a1be4:	d106      	bne.n	80a1bf4 <__aeabi_ddiv+0x1b0>
 80a1be6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1bea:	f43f aefd 	beq.w	80a19e8 <__aeabi_dmul+0x1f8>
 80a1bee:	4610      	mov	r0, r2
 80a1bf0:	4619      	mov	r1, r3
 80a1bf2:	e722      	b.n	80a1a3a <__aeabi_dmul+0x24a>
 80a1bf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1bf8:	bf18      	it	ne
 80a1bfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1bfe:	f47f aec5 	bne.w	80a198c <__aeabi_dmul+0x19c>
 80a1c02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a1c06:	f47f af0d 	bne.w	80a1a24 <__aeabi_dmul+0x234>
 80a1c0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a1c0e:	f47f aeeb 	bne.w	80a19e8 <__aeabi_dmul+0x1f8>
 80a1c12:	e712      	b.n	80a1a3a <__aeabi_dmul+0x24a>

080a1c14 <__gedf2>:
 80a1c14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a1c18:	e006      	b.n	80a1c28 <__cmpdf2+0x4>
 80a1c1a:	bf00      	nop

080a1c1c <__ledf2>:
 80a1c1c:	f04f 0c01 	mov.w	ip, #1
 80a1c20:	e002      	b.n	80a1c28 <__cmpdf2+0x4>
 80a1c22:	bf00      	nop

080a1c24 <__cmpdf2>:
 80a1c24:	f04f 0c01 	mov.w	ip, #1
 80a1c28:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a1c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1c34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1c38:	bf18      	it	ne
 80a1c3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a1c3e:	d01b      	beq.n	80a1c78 <__cmpdf2+0x54>
 80a1c40:	b001      	add	sp, #4
 80a1c42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a1c46:	bf0c      	ite	eq
 80a1c48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a1c4c:	ea91 0f03 	teqne	r1, r3
 80a1c50:	bf02      	ittt	eq
 80a1c52:	ea90 0f02 	teqeq	r0, r2
 80a1c56:	2000      	moveq	r0, #0
 80a1c58:	4770      	bxeq	lr
 80a1c5a:	f110 0f00 	cmn.w	r0, #0
 80a1c5e:	ea91 0f03 	teq	r1, r3
 80a1c62:	bf58      	it	pl
 80a1c64:	4299      	cmppl	r1, r3
 80a1c66:	bf08      	it	eq
 80a1c68:	4290      	cmpeq	r0, r2
 80a1c6a:	bf2c      	ite	cs
 80a1c6c:	17d8      	asrcs	r0, r3, #31
 80a1c6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a1c72:	f040 0001 	orr.w	r0, r0, #1
 80a1c76:	4770      	bx	lr
 80a1c78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1c80:	d102      	bne.n	80a1c88 <__cmpdf2+0x64>
 80a1c82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1c86:	d107      	bne.n	80a1c98 <__cmpdf2+0x74>
 80a1c88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1c8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1c90:	d1d6      	bne.n	80a1c40 <__cmpdf2+0x1c>
 80a1c92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1c96:	d0d3      	beq.n	80a1c40 <__cmpdf2+0x1c>
 80a1c98:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a1c9c:	4770      	bx	lr
 80a1c9e:	bf00      	nop

080a1ca0 <__aeabi_cdrcmple>:
 80a1ca0:	4684      	mov	ip, r0
 80a1ca2:	4610      	mov	r0, r2
 80a1ca4:	4662      	mov	r2, ip
 80a1ca6:	468c      	mov	ip, r1
 80a1ca8:	4619      	mov	r1, r3
 80a1caa:	4663      	mov	r3, ip
 80a1cac:	e000      	b.n	80a1cb0 <__aeabi_cdcmpeq>
 80a1cae:	bf00      	nop

080a1cb0 <__aeabi_cdcmpeq>:
 80a1cb0:	b501      	push	{r0, lr}
 80a1cb2:	f7ff ffb7 	bl	80a1c24 <__cmpdf2>
 80a1cb6:	2800      	cmp	r0, #0
 80a1cb8:	bf48      	it	mi
 80a1cba:	f110 0f00 	cmnmi.w	r0, #0
 80a1cbe:	bd01      	pop	{r0, pc}

080a1cc0 <__aeabi_dcmpeq>:
 80a1cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1cc4:	f7ff fff4 	bl	80a1cb0 <__aeabi_cdcmpeq>
 80a1cc8:	bf0c      	ite	eq
 80a1cca:	2001      	moveq	r0, #1
 80a1ccc:	2000      	movne	r0, #0
 80a1cce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1cd2:	bf00      	nop

080a1cd4 <__aeabi_dcmplt>:
 80a1cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1cd8:	f7ff ffea 	bl	80a1cb0 <__aeabi_cdcmpeq>
 80a1cdc:	bf34      	ite	cc
 80a1cde:	2001      	movcc	r0, #1
 80a1ce0:	2000      	movcs	r0, #0
 80a1ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1ce6:	bf00      	nop

080a1ce8 <__aeabi_dcmple>:
 80a1ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1cec:	f7ff ffe0 	bl	80a1cb0 <__aeabi_cdcmpeq>
 80a1cf0:	bf94      	ite	ls
 80a1cf2:	2001      	movls	r0, #1
 80a1cf4:	2000      	movhi	r0, #0
 80a1cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1cfa:	bf00      	nop

080a1cfc <__aeabi_dcmpge>:
 80a1cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1d00:	f7ff ffce 	bl	80a1ca0 <__aeabi_cdrcmple>
 80a1d04:	bf94      	ite	ls
 80a1d06:	2001      	movls	r0, #1
 80a1d08:	2000      	movhi	r0, #0
 80a1d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1d0e:	bf00      	nop

080a1d10 <__aeabi_dcmpgt>:
 80a1d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1d14:	f7ff ffc4 	bl	80a1ca0 <__aeabi_cdrcmple>
 80a1d18:	bf34      	ite	cc
 80a1d1a:	2001      	movcc	r0, #1
 80a1d1c:	2000      	movcs	r0, #0
 80a1d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1d22:	bf00      	nop

080a1d24 <__aeabi_dcmpun>:
 80a1d24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1d28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1d2c:	d102      	bne.n	80a1d34 <__aeabi_dcmpun+0x10>
 80a1d2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1d32:	d10a      	bne.n	80a1d4a <__aeabi_dcmpun+0x26>
 80a1d34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1d38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1d3c:	d102      	bne.n	80a1d44 <__aeabi_dcmpun+0x20>
 80a1d3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1d42:	d102      	bne.n	80a1d4a <__aeabi_dcmpun+0x26>
 80a1d44:	f04f 0000 	mov.w	r0, #0
 80a1d48:	4770      	bx	lr
 80a1d4a:	f04f 0001 	mov.w	r0, #1
 80a1d4e:	4770      	bx	lr

080a1d50 <__aeabi_d2iz>:
 80a1d50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1d54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1d58:	d215      	bcs.n	80a1d86 <__aeabi_d2iz+0x36>
 80a1d5a:	d511      	bpl.n	80a1d80 <__aeabi_d2iz+0x30>
 80a1d5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1d60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1d64:	d912      	bls.n	80a1d8c <__aeabi_d2iz+0x3c>
 80a1d66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1d6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1d6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1d72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1d76:	fa23 f002 	lsr.w	r0, r3, r2
 80a1d7a:	bf18      	it	ne
 80a1d7c:	4240      	negne	r0, r0
 80a1d7e:	4770      	bx	lr
 80a1d80:	f04f 0000 	mov.w	r0, #0
 80a1d84:	4770      	bx	lr
 80a1d86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1d8a:	d105      	bne.n	80a1d98 <__aeabi_d2iz+0x48>
 80a1d8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1d90:	bf08      	it	eq
 80a1d92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1d96:	4770      	bx	lr
 80a1d98:	f04f 0000 	mov.w	r0, #0
 80a1d9c:	4770      	bx	lr
 80a1d9e:	bf00      	nop

080a1da0 <__aeabi_d2uiz>:
 80a1da0:	004a      	lsls	r2, r1, #1
 80a1da2:	d211      	bcs.n	80a1dc8 <__aeabi_d2uiz+0x28>
 80a1da4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1da8:	d211      	bcs.n	80a1dce <__aeabi_d2uiz+0x2e>
 80a1daa:	d50d      	bpl.n	80a1dc8 <__aeabi_d2uiz+0x28>
 80a1dac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1db0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1db4:	d40e      	bmi.n	80a1dd4 <__aeabi_d2uiz+0x34>
 80a1db6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1dbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1dc2:	fa23 f002 	lsr.w	r0, r3, r2
 80a1dc6:	4770      	bx	lr
 80a1dc8:	f04f 0000 	mov.w	r0, #0
 80a1dcc:	4770      	bx	lr
 80a1dce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1dd2:	d102      	bne.n	80a1dda <__aeabi_d2uiz+0x3a>
 80a1dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1dd8:	4770      	bx	lr
 80a1dda:	f04f 0000 	mov.w	r0, #0
 80a1dde:	4770      	bx	lr

080a1de0 <__aeabi_frsub>:
 80a1de0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a1de4:	e002      	b.n	80a1dec <__addsf3>
 80a1de6:	bf00      	nop

080a1de8 <__aeabi_fsub>:
 80a1de8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a1dec <__addsf3>:
 80a1dec:	0042      	lsls	r2, r0, #1
 80a1dee:	bf1f      	itttt	ne
 80a1df0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a1df4:	ea92 0f03 	teqne	r2, r3
 80a1df8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a1dfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1e00:	d06a      	beq.n	80a1ed8 <__addsf3+0xec>
 80a1e02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a1e06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a1e0a:	bfc1      	itttt	gt
 80a1e0c:	18d2      	addgt	r2, r2, r3
 80a1e0e:	4041      	eorgt	r1, r0
 80a1e10:	4048      	eorgt	r0, r1
 80a1e12:	4041      	eorgt	r1, r0
 80a1e14:	bfb8      	it	lt
 80a1e16:	425b      	neglt	r3, r3
 80a1e18:	2b19      	cmp	r3, #25
 80a1e1a:	bf88      	it	hi
 80a1e1c:	4770      	bxhi	lr
 80a1e1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a1e22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1e26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a1e2a:	bf18      	it	ne
 80a1e2c:	4240      	negne	r0, r0
 80a1e2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1e32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a1e36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a1e3a:	bf18      	it	ne
 80a1e3c:	4249      	negne	r1, r1
 80a1e3e:	ea92 0f03 	teq	r2, r3
 80a1e42:	d03f      	beq.n	80a1ec4 <__addsf3+0xd8>
 80a1e44:	f1a2 0201 	sub.w	r2, r2, #1
 80a1e48:	fa41 fc03 	asr.w	ip, r1, r3
 80a1e4c:	eb10 000c 	adds.w	r0, r0, ip
 80a1e50:	f1c3 0320 	rsb	r3, r3, #32
 80a1e54:	fa01 f103 	lsl.w	r1, r1, r3
 80a1e58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1e5c:	d502      	bpl.n	80a1e64 <__addsf3+0x78>
 80a1e5e:	4249      	negs	r1, r1
 80a1e60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a1e64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1e68:	d313      	bcc.n	80a1e92 <__addsf3+0xa6>
 80a1e6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a1e6e:	d306      	bcc.n	80a1e7e <__addsf3+0x92>
 80a1e70:	0840      	lsrs	r0, r0, #1
 80a1e72:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1e76:	f102 0201 	add.w	r2, r2, #1
 80a1e7a:	2afe      	cmp	r2, #254	; 0xfe
 80a1e7c:	d251      	bcs.n	80a1f22 <__addsf3+0x136>
 80a1e7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a1e82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1e86:	bf08      	it	eq
 80a1e88:	f020 0001 	biceq.w	r0, r0, #1
 80a1e8c:	ea40 0003 	orr.w	r0, r0, r3
 80a1e90:	4770      	bx	lr
 80a1e92:	0049      	lsls	r1, r1, #1
 80a1e94:	eb40 0000 	adc.w	r0, r0, r0
 80a1e98:	3a01      	subs	r2, #1
 80a1e9a:	bf28      	it	cs
 80a1e9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a1ea0:	d2ed      	bcs.n	80a1e7e <__addsf3+0x92>
 80a1ea2:	fab0 fc80 	clz	ip, r0
 80a1ea6:	f1ac 0c08 	sub.w	ip, ip, #8
 80a1eaa:	ebb2 020c 	subs.w	r2, r2, ip
 80a1eae:	fa00 f00c 	lsl.w	r0, r0, ip
 80a1eb2:	bfaa      	itet	ge
 80a1eb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1eb8:	4252      	neglt	r2, r2
 80a1eba:	4318      	orrge	r0, r3
 80a1ebc:	bfbc      	itt	lt
 80a1ebe:	40d0      	lsrlt	r0, r2
 80a1ec0:	4318      	orrlt	r0, r3
 80a1ec2:	4770      	bx	lr
 80a1ec4:	f092 0f00 	teq	r2, #0
 80a1ec8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a1ecc:	bf06      	itte	eq
 80a1ece:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a1ed2:	3201      	addeq	r2, #1
 80a1ed4:	3b01      	subne	r3, #1
 80a1ed6:	e7b5      	b.n	80a1e44 <__addsf3+0x58>
 80a1ed8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a1edc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a1ee0:	bf18      	it	ne
 80a1ee2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1ee6:	d021      	beq.n	80a1f2c <__addsf3+0x140>
 80a1ee8:	ea92 0f03 	teq	r2, r3
 80a1eec:	d004      	beq.n	80a1ef8 <__addsf3+0x10c>
 80a1eee:	f092 0f00 	teq	r2, #0
 80a1ef2:	bf08      	it	eq
 80a1ef4:	4608      	moveq	r0, r1
 80a1ef6:	4770      	bx	lr
 80a1ef8:	ea90 0f01 	teq	r0, r1
 80a1efc:	bf1c      	itt	ne
 80a1efe:	2000      	movne	r0, #0
 80a1f00:	4770      	bxne	lr
 80a1f02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a1f06:	d104      	bne.n	80a1f12 <__addsf3+0x126>
 80a1f08:	0040      	lsls	r0, r0, #1
 80a1f0a:	bf28      	it	cs
 80a1f0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a1f10:	4770      	bx	lr
 80a1f12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a1f16:	bf3c      	itt	cc
 80a1f18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a1f1c:	4770      	bxcc	lr
 80a1f1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1f22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a1f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1f2a:	4770      	bx	lr
 80a1f2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a1f30:	bf16      	itet	ne
 80a1f32:	4608      	movne	r0, r1
 80a1f34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a1f38:	4601      	movne	r1, r0
 80a1f3a:	0242      	lsls	r2, r0, #9
 80a1f3c:	bf06      	itte	eq
 80a1f3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a1f42:	ea90 0f01 	teqeq	r0, r1
 80a1f46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a1f4a:	4770      	bx	lr

080a1f4c <__aeabi_ui2f>:
 80a1f4c:	f04f 0300 	mov.w	r3, #0
 80a1f50:	e004      	b.n	80a1f5c <__aeabi_i2f+0x8>
 80a1f52:	bf00      	nop

080a1f54 <__aeabi_i2f>:
 80a1f54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a1f58:	bf48      	it	mi
 80a1f5a:	4240      	negmi	r0, r0
 80a1f5c:	ea5f 0c00 	movs.w	ip, r0
 80a1f60:	bf08      	it	eq
 80a1f62:	4770      	bxeq	lr
 80a1f64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a1f68:	4601      	mov	r1, r0
 80a1f6a:	f04f 0000 	mov.w	r0, #0
 80a1f6e:	e01c      	b.n	80a1faa <__aeabi_l2f+0x2a>

080a1f70 <__aeabi_ul2f>:
 80a1f70:	ea50 0201 	orrs.w	r2, r0, r1
 80a1f74:	bf08      	it	eq
 80a1f76:	4770      	bxeq	lr
 80a1f78:	f04f 0300 	mov.w	r3, #0
 80a1f7c:	e00a      	b.n	80a1f94 <__aeabi_l2f+0x14>
 80a1f7e:	bf00      	nop

080a1f80 <__aeabi_l2f>:
 80a1f80:	ea50 0201 	orrs.w	r2, r0, r1
 80a1f84:	bf08      	it	eq
 80a1f86:	4770      	bxeq	lr
 80a1f88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a1f8c:	d502      	bpl.n	80a1f94 <__aeabi_l2f+0x14>
 80a1f8e:	4240      	negs	r0, r0
 80a1f90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1f94:	ea5f 0c01 	movs.w	ip, r1
 80a1f98:	bf02      	ittt	eq
 80a1f9a:	4684      	moveq	ip, r0
 80a1f9c:	4601      	moveq	r1, r0
 80a1f9e:	2000      	moveq	r0, #0
 80a1fa0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a1fa4:	bf08      	it	eq
 80a1fa6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a1faa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a1fae:	fabc f28c 	clz	r2, ip
 80a1fb2:	3a08      	subs	r2, #8
 80a1fb4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a1fb8:	db10      	blt.n	80a1fdc <__aeabi_l2f+0x5c>
 80a1fba:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1fbe:	4463      	add	r3, ip
 80a1fc0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1fc4:	f1c2 0220 	rsb	r2, r2, #32
 80a1fc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1fcc:	fa20 f202 	lsr.w	r2, r0, r2
 80a1fd0:	eb43 0002 	adc.w	r0, r3, r2
 80a1fd4:	bf08      	it	eq
 80a1fd6:	f020 0001 	biceq.w	r0, r0, #1
 80a1fda:	4770      	bx	lr
 80a1fdc:	f102 0220 	add.w	r2, r2, #32
 80a1fe0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1fe4:	f1c2 0220 	rsb	r2, r2, #32
 80a1fe8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a1fec:	fa21 f202 	lsr.w	r2, r1, r2
 80a1ff0:	eb43 0002 	adc.w	r0, r3, r2
 80a1ff4:	bf08      	it	eq
 80a1ff6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1ffa:	4770      	bx	lr

080a1ffc <__aeabi_fmul>:
 80a1ffc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2000:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2004:	bf1e      	ittt	ne
 80a2006:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a200a:	ea92 0f0c 	teqne	r2, ip
 80a200e:	ea93 0f0c 	teqne	r3, ip
 80a2012:	d06f      	beq.n	80a20f4 <__aeabi_fmul+0xf8>
 80a2014:	441a      	add	r2, r3
 80a2016:	ea80 0c01 	eor.w	ip, r0, r1
 80a201a:	0240      	lsls	r0, r0, #9
 80a201c:	bf18      	it	ne
 80a201e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2022:	d01e      	beq.n	80a2062 <__aeabi_fmul+0x66>
 80a2024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2028:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a202c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2030:	fba0 3101 	umull	r3, r1, r0, r1
 80a2034:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2038:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a203c:	bf3e      	ittt	cc
 80a203e:	0049      	lslcc	r1, r1, #1
 80a2040:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2044:	005b      	lslcc	r3, r3, #1
 80a2046:	ea40 0001 	orr.w	r0, r0, r1
 80a204a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a204e:	2afd      	cmp	r2, #253	; 0xfd
 80a2050:	d81d      	bhi.n	80a208e <__aeabi_fmul+0x92>
 80a2052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2056:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a205a:	bf08      	it	eq
 80a205c:	f020 0001 	biceq.w	r0, r0, #1
 80a2060:	4770      	bx	lr
 80a2062:	f090 0f00 	teq	r0, #0
 80a2066:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a206a:	bf08      	it	eq
 80a206c:	0249      	lsleq	r1, r1, #9
 80a206e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2072:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2076:	3a7f      	subs	r2, #127	; 0x7f
 80a2078:	bfc2      	ittt	gt
 80a207a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a207e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2082:	4770      	bxgt	lr
 80a2084:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2088:	f04f 0300 	mov.w	r3, #0
 80a208c:	3a01      	subs	r2, #1
 80a208e:	dc5d      	bgt.n	80a214c <__aeabi_fmul+0x150>
 80a2090:	f112 0f19 	cmn.w	r2, #25
 80a2094:	bfdc      	itt	le
 80a2096:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a209a:	4770      	bxle	lr
 80a209c:	f1c2 0200 	rsb	r2, r2, #0
 80a20a0:	0041      	lsls	r1, r0, #1
 80a20a2:	fa21 f102 	lsr.w	r1, r1, r2
 80a20a6:	f1c2 0220 	rsb	r2, r2, #32
 80a20aa:	fa00 fc02 	lsl.w	ip, r0, r2
 80a20ae:	ea5f 0031 	movs.w	r0, r1, rrx
 80a20b2:	f140 0000 	adc.w	r0, r0, #0
 80a20b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a20ba:	bf08      	it	eq
 80a20bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a20c0:	4770      	bx	lr
 80a20c2:	f092 0f00 	teq	r2, #0
 80a20c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a20ca:	bf02      	ittt	eq
 80a20cc:	0040      	lsleq	r0, r0, #1
 80a20ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a20d2:	3a01      	subeq	r2, #1
 80a20d4:	d0f9      	beq.n	80a20ca <__aeabi_fmul+0xce>
 80a20d6:	ea40 000c 	orr.w	r0, r0, ip
 80a20da:	f093 0f00 	teq	r3, #0
 80a20de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a20e2:	bf02      	ittt	eq
 80a20e4:	0049      	lsleq	r1, r1, #1
 80a20e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a20ea:	3b01      	subeq	r3, #1
 80a20ec:	d0f9      	beq.n	80a20e2 <__aeabi_fmul+0xe6>
 80a20ee:	ea41 010c 	orr.w	r1, r1, ip
 80a20f2:	e78f      	b.n	80a2014 <__aeabi_fmul+0x18>
 80a20f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a20f8:	ea92 0f0c 	teq	r2, ip
 80a20fc:	bf18      	it	ne
 80a20fe:	ea93 0f0c 	teqne	r3, ip
 80a2102:	d00a      	beq.n	80a211a <__aeabi_fmul+0x11e>
 80a2104:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2108:	bf18      	it	ne
 80a210a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a210e:	d1d8      	bne.n	80a20c2 <__aeabi_fmul+0xc6>
 80a2110:	ea80 0001 	eor.w	r0, r0, r1
 80a2114:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2118:	4770      	bx	lr
 80a211a:	f090 0f00 	teq	r0, #0
 80a211e:	bf17      	itett	ne
 80a2120:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2124:	4608      	moveq	r0, r1
 80a2126:	f091 0f00 	teqne	r1, #0
 80a212a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a212e:	d014      	beq.n	80a215a <__aeabi_fmul+0x15e>
 80a2130:	ea92 0f0c 	teq	r2, ip
 80a2134:	d101      	bne.n	80a213a <__aeabi_fmul+0x13e>
 80a2136:	0242      	lsls	r2, r0, #9
 80a2138:	d10f      	bne.n	80a215a <__aeabi_fmul+0x15e>
 80a213a:	ea93 0f0c 	teq	r3, ip
 80a213e:	d103      	bne.n	80a2148 <__aeabi_fmul+0x14c>
 80a2140:	024b      	lsls	r3, r1, #9
 80a2142:	bf18      	it	ne
 80a2144:	4608      	movne	r0, r1
 80a2146:	d108      	bne.n	80a215a <__aeabi_fmul+0x15e>
 80a2148:	ea80 0001 	eor.w	r0, r0, r1
 80a214c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2150:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2154:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2158:	4770      	bx	lr
 80a215a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a215e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2162:	4770      	bx	lr

080a2164 <__aeabi_fdiv>:
 80a2164:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2168:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a216c:	bf1e      	ittt	ne
 80a216e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2172:	ea92 0f0c 	teqne	r2, ip
 80a2176:	ea93 0f0c 	teqne	r3, ip
 80a217a:	d069      	beq.n	80a2250 <__aeabi_fdiv+0xec>
 80a217c:	eba2 0203 	sub.w	r2, r2, r3
 80a2180:	ea80 0c01 	eor.w	ip, r0, r1
 80a2184:	0249      	lsls	r1, r1, #9
 80a2186:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a218a:	d037      	beq.n	80a21fc <__aeabi_fdiv+0x98>
 80a218c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2190:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2194:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a219c:	428b      	cmp	r3, r1
 80a219e:	bf38      	it	cc
 80a21a0:	005b      	lslcc	r3, r3, #1
 80a21a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a21a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a21aa:	428b      	cmp	r3, r1
 80a21ac:	bf24      	itt	cs
 80a21ae:	1a5b      	subcs	r3, r3, r1
 80a21b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a21b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a21b8:	bf24      	itt	cs
 80a21ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a21be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a21c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a21c6:	bf24      	itt	cs
 80a21c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a21cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a21d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a21d4:	bf24      	itt	cs
 80a21d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a21da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a21de:	011b      	lsls	r3, r3, #4
 80a21e0:	bf18      	it	ne
 80a21e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a21e6:	d1e0      	bne.n	80a21aa <__aeabi_fdiv+0x46>
 80a21e8:	2afd      	cmp	r2, #253	; 0xfd
 80a21ea:	f63f af50 	bhi.w	80a208e <__aeabi_fmul+0x92>
 80a21ee:	428b      	cmp	r3, r1
 80a21f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a21f4:	bf08      	it	eq
 80a21f6:	f020 0001 	biceq.w	r0, r0, #1
 80a21fa:	4770      	bx	lr
 80a21fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2200:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2204:	327f      	adds	r2, #127	; 0x7f
 80a2206:	bfc2      	ittt	gt
 80a2208:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a220c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2210:	4770      	bxgt	lr
 80a2212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2216:	f04f 0300 	mov.w	r3, #0
 80a221a:	3a01      	subs	r2, #1
 80a221c:	e737      	b.n	80a208e <__aeabi_fmul+0x92>
 80a221e:	f092 0f00 	teq	r2, #0
 80a2222:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2226:	bf02      	ittt	eq
 80a2228:	0040      	lsleq	r0, r0, #1
 80a222a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a222e:	3a01      	subeq	r2, #1
 80a2230:	d0f9      	beq.n	80a2226 <__aeabi_fdiv+0xc2>
 80a2232:	ea40 000c 	orr.w	r0, r0, ip
 80a2236:	f093 0f00 	teq	r3, #0
 80a223a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a223e:	bf02      	ittt	eq
 80a2240:	0049      	lsleq	r1, r1, #1
 80a2242:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2246:	3b01      	subeq	r3, #1
 80a2248:	d0f9      	beq.n	80a223e <__aeabi_fdiv+0xda>
 80a224a:	ea41 010c 	orr.w	r1, r1, ip
 80a224e:	e795      	b.n	80a217c <__aeabi_fdiv+0x18>
 80a2250:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2254:	ea92 0f0c 	teq	r2, ip
 80a2258:	d108      	bne.n	80a226c <__aeabi_fdiv+0x108>
 80a225a:	0242      	lsls	r2, r0, #9
 80a225c:	f47f af7d 	bne.w	80a215a <__aeabi_fmul+0x15e>
 80a2260:	ea93 0f0c 	teq	r3, ip
 80a2264:	f47f af70 	bne.w	80a2148 <__aeabi_fmul+0x14c>
 80a2268:	4608      	mov	r0, r1
 80a226a:	e776      	b.n	80a215a <__aeabi_fmul+0x15e>
 80a226c:	ea93 0f0c 	teq	r3, ip
 80a2270:	d104      	bne.n	80a227c <__aeabi_fdiv+0x118>
 80a2272:	024b      	lsls	r3, r1, #9
 80a2274:	f43f af4c 	beq.w	80a2110 <__aeabi_fmul+0x114>
 80a2278:	4608      	mov	r0, r1
 80a227a:	e76e      	b.n	80a215a <__aeabi_fmul+0x15e>
 80a227c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2280:	bf18      	it	ne
 80a2282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2286:	d1ca      	bne.n	80a221e <__aeabi_fdiv+0xba>
 80a2288:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a228c:	f47f af5c 	bne.w	80a2148 <__aeabi_fmul+0x14c>
 80a2290:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2294:	f47f af3c 	bne.w	80a2110 <__aeabi_fmul+0x114>
 80a2298:	e75f      	b.n	80a215a <__aeabi_fmul+0x15e>
 80a229a:	bf00      	nop

080a229c <__aeabi_fcmpun>:
 80a229c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a22a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a22a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a22a8:	d102      	bne.n	80a22b0 <__aeabi_fcmpun+0x14>
 80a22aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a22ae:	d108      	bne.n	80a22c2 <__aeabi_fcmpun+0x26>
 80a22b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a22b4:	d102      	bne.n	80a22bc <__aeabi_fcmpun+0x20>
 80a22b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a22ba:	d102      	bne.n	80a22c2 <__aeabi_fcmpun+0x26>
 80a22bc:	f04f 0000 	mov.w	r0, #0
 80a22c0:	4770      	bx	lr
 80a22c2:	f04f 0001 	mov.w	r0, #1
 80a22c6:	4770      	bx	lr

080a22c8 <__aeabi_f2iz>:
 80a22c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a22cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a22d0:	d30f      	bcc.n	80a22f2 <__aeabi_f2iz+0x2a>
 80a22d2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a22d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a22da:	d90d      	bls.n	80a22f8 <__aeabi_f2iz+0x30>
 80a22dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a22e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a22e4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a22e8:	fa23 f002 	lsr.w	r0, r3, r2
 80a22ec:	bf18      	it	ne
 80a22ee:	4240      	negne	r0, r0
 80a22f0:	4770      	bx	lr
 80a22f2:	f04f 0000 	mov.w	r0, #0
 80a22f6:	4770      	bx	lr
 80a22f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a22fc:	d101      	bne.n	80a2302 <__aeabi_f2iz+0x3a>
 80a22fe:	0242      	lsls	r2, r0, #9
 80a2300:	d105      	bne.n	80a230e <__aeabi_f2iz+0x46>
 80a2302:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a2306:	bf08      	it	eq
 80a2308:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a230c:	4770      	bx	lr
 80a230e:	f04f 0000 	mov.w	r0, #0
 80a2312:	4770      	bx	lr

080a2314 <__cxa_atexit>:
 80a2314:	b510      	push	{r4, lr}
 80a2316:	4604      	mov	r4, r0
 80a2318:	4804      	ldr	r0, [pc, #16]	; (80a232c <__cxa_atexit+0x18>)
 80a231a:	4613      	mov	r3, r2
 80a231c:	b120      	cbz	r0, 80a2328 <__cxa_atexit+0x14>
 80a231e:	460a      	mov	r2, r1
 80a2320:	2002      	movs	r0, #2
 80a2322:	4621      	mov	r1, r4
 80a2324:	f3af 8000 	nop.w
 80a2328:	bd10      	pop	{r4, pc}
 80a232a:	bf00      	nop
 80a232c:	00000000 	.word	0x00000000

080a2330 <memcpy>:
 80a2330:	440a      	add	r2, r1
 80a2332:	4291      	cmp	r1, r2
 80a2334:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a2338:	d100      	bne.n	80a233c <memcpy+0xc>
 80a233a:	4770      	bx	lr
 80a233c:	b510      	push	{r4, lr}
 80a233e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2342:	4291      	cmp	r1, r2
 80a2344:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2348:	d1f9      	bne.n	80a233e <memcpy+0xe>
 80a234a:	bd10      	pop	{r4, pc}

080a234c <memset>:
 80a234c:	4603      	mov	r3, r0
 80a234e:	4402      	add	r2, r0
 80a2350:	4293      	cmp	r3, r2
 80a2352:	d100      	bne.n	80a2356 <memset+0xa>
 80a2354:	4770      	bx	lr
 80a2356:	f803 1b01 	strb.w	r1, [r3], #1
 80a235a:	e7f9      	b.n	80a2350 <memset+0x4>

080a235c <srand>:
 80a235c:	b538      	push	{r3, r4, r5, lr}
 80a235e:	4b0d      	ldr	r3, [pc, #52]	; (80a2394 <srand+0x38>)
 80a2360:	4604      	mov	r4, r0
 80a2362:	681d      	ldr	r5, [r3, #0]
 80a2364:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2366:	b97b      	cbnz	r3, 80a2388 <srand+0x2c>
 80a2368:	2018      	movs	r0, #24
 80a236a:	f7fe faad 	bl	80a08c8 <malloc>
 80a236e:	4a0a      	ldr	r2, [pc, #40]	; (80a2398 <srand+0x3c>)
 80a2370:	4b0a      	ldr	r3, [pc, #40]	; (80a239c <srand+0x40>)
 80a2372:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2374:	e9c0 2300 	strd	r2, r3, [r0]
 80a2378:	4b09      	ldr	r3, [pc, #36]	; (80a23a0 <srand+0x44>)
 80a237a:	2201      	movs	r2, #1
 80a237c:	6083      	str	r3, [r0, #8]
 80a237e:	230b      	movs	r3, #11
 80a2380:	8183      	strh	r3, [r0, #12]
 80a2382:	2300      	movs	r3, #0
 80a2384:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2388:	2200      	movs	r2, #0
 80a238a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a238c:	611c      	str	r4, [r3, #16]
 80a238e:	615a      	str	r2, [r3, #20]
 80a2390:	bd38      	pop	{r3, r4, r5, pc}
 80a2392:	bf00      	nop
 80a2394:	20000004 	.word	0x20000004
 80a2398:	abcd330e 	.word	0xabcd330e
 80a239c:	e66d1234 	.word	0xe66d1234
 80a23a0:	0005deec 	.word	0x0005deec

080a23a4 <strlen>:
 80a23a4:	4603      	mov	r3, r0
 80a23a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a23aa:	2a00      	cmp	r2, #0
 80a23ac:	d1fb      	bne.n	80a23a6 <strlen+0x2>
 80a23ae:	1a18      	subs	r0, r3, r0
 80a23b0:	3801      	subs	r0, #1
 80a23b2:	4770      	bx	lr

080a23b4 <dynalib_user>:
 80a23b4:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a23c4:	0000 0000 4844 3154 2031 6574 7473 4600     ....DHT11 test.F
 80a23d4:	6961 656c 2064 6f74 7220 6165 2064 7266     ailed to read fr
 80a23e4:	6d6f 4420 5448 7320 6e65 6f73 0072 0000     om DHT sensor...

080a23f4 <_ZTV7TwoWire>:
	...
 80a23fc:	0911 080a 095b 080a 0933 080a 0913 080a     ....[...3.......
 80a240c:	093b 080a 0943 080a 094b 080a 0953 080a     ;...C...K...S...

080a241c <_ZTV9IPAddress>:
	...
 80a2424:	09a5 080a 0995 080a 0997 080a 7061 0070     ............app.

080a2434 <_ZTVN5spark12NetworkClassE>:
	...
 80a243c:	0a6d 080a 0a77 080a 0a81 080a 0a8b 080a     m...w...........
 80a244c:	0a95 080a 0aa1 080a 0aad 080a 0ab5 080a     ................
 80a245c:	0abd 080a 0ac9 080a 0ad1 080a 0adb 080a     ................
 80a246c:	0ae5 080a 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.
 80a247c:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
 80a248c:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

080a249c <_ZTV11USARTSerial>:
	...
 80a24a4:	0e55 080a 0ebd 080a 0e99 080a 0b49 080a     U...........I...
 80a24b4:	0e69 080a 0e85 080a 0e77 080a 0e93 080a     i.......w.......
 80a24c4:	0e57 080a 0e5b 080a                         W...[...

080a24cc <_ZTV9USBSerial>:
	...
 80a24d4:	0f4d 080a 0fb3 080a 0f8b 080a 0b49 080a     M...........I...
 80a24e4:	0f7d 080a 0f4f 080a 0f5f 080a 0fad 080a     }...O..._.......
 80a24f4:	0f6f 080a 0f49 080a                         o...I...

080a24fc <_ZTVN5spark9WiFiClassE>:
	...
 80a2504:	118b 080a 1181 080a 1177 080a 10e9 080a     ........w.......
 80a2514:	116b 080a 115f 080a 0aad 080a 0ab5 080a     k..._...........
 80a2524:	1153 080a 114b 080a 1141 080a 1137 080a     S...K...A...7...
 80a2534:	10f3 080a                                   ....

080a2538 <_ZSt7nothrow>:
	...

080a2539 <link_const_variable_data_end>:
 80a2539:	00          	.byte	0x00
	...

080a253c <link_constructors_location>:
 80a253c:	080a016d 	.word	0x080a016d
 80a2540:	080a0a5d 	.word	0x080a0a5d
 80a2544:	080a0b35 	.word	0x080a0b35
 80a2548:	080a0dad 	.word	0x080a0dad
 80a254c:	080a0e05 	.word	0x080a0e05
 80a2550:	080a0e41 	.word	0x080a0e41
 80a2554:	080a1195 	.word	0x080a1195
 80a2558:	080a1435 	.word	0x080a1435

080a255c <link_constructors_end>:
 80a255c:	00000000 	.word	0x00000000
