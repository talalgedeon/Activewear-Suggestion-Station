
/Users/talalagedeon/Desktop/particlePDP/shortproject/target/3.0.0/boron/shortproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000021a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d61c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e594  000d61c4  0001e594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f4  2003e5fc  2003e5fc  0002e5fc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d622c  000d622c  0002622c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6254  000d6254  00026254  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014e9de  00000000  00000000  00026258  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013ef1  00000000  00000000  00174c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002dc09  00000000  00000000  00188b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002708  00000000  00000000  001b6730  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008390  00000000  00000000  001b8e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003597c  00000000  00000000  001c11c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00035291  00000000  00000000  001f6b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012272d  00000000  00000000  0022bdd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006b94  00000000  00000000  0034e504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 ff8d 	bl	d5f4c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 ff95 	bl	d5f68 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e594 	.word	0x2003e594
   d4048:	000d61c4 	.word	0x000d61c4
   d404c:	2003e5fc 	.word	0x2003e5fc
   d4050:	2003e5fc 	.word	0x2003e5fc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f9e7 	bl	d5430 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6194 	.word	0x000d6194
   d407c:	000d61b8 	.word	0x000d61b8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b814 	b.w	d40ac <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f827 	bl	d40d8 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b991 	b.w	d53b4 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 bc99 	b.w	d49c8 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bc9f 	b.w	d49d8 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr
	...

000d40ac <setup>:

#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);

void setup() {
   d40ac:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40ae:	f001 f935 	bl	d531c <_Z16_fetch_usbserialv>
   d40b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40b6:	f001 f925 	bl	d5304 <_ZN9USBSerial5beginEl>
  Serial.println("DHT11 test");
   d40ba:	f001 f92f 	bl	d531c <_Z16_fetch_usbserialv>
   d40be:	4904      	ldr	r1, [pc, #16]	; (d40d0 <setup+0x24>)
   d40c0:	f000 fef9 	bl	d4eb6 <_ZN5Print7printlnEPKc>
  
  dht.begin();
}
   d40c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  dht.begin();
   d40c8:	4802      	ldr	r0, [pc, #8]	; (d40d4 <setup+0x28>)
   d40ca:	f000 b895 	b.w	d41f8 <_ZN3DHT5beginEv>
   d40ce:	bf00      	nop
   d40d0:	000d5fe4 	.word	0x000d5fe4
   d40d4:	2003e600 	.word	0x2003e600

000d40d8 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d40d8:	b508      	push	{r3, lr}
  delay(2000);
   d40da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
void loop() {
   d40de:	ed2d 8b02 	vpush	{d8}
  delay(2000);
   d40e2:	f000 fc89 	bl	d49f8 <delay>

  float h = dht.getHumidity();
   d40e6:	4820      	ldr	r0, [pc, #128]	; (d4168 <loop+0x90>)
   d40e8:	f000 fab8 	bl	d465c <_ZN3DHT11getHumidityEv>
  float t = dht.getTempCelcius();
   d40ec:	481e      	ldr	r0, [pc, #120]	; (d4168 <loop+0x90>)
  float h = dht.getHumidity();
   d40ee:	eeb0 8a40 	vmov.f32	s16, s0
  float t = dht.getTempCelcius();
   d40f2:	f000 fa73 	bl	d45dc <_ZN3DHT14getTempCelciusEv>
  float f = dht.getTempFarenheit();
   d40f6:	481c      	ldr	r0, [pc, #112]	; (d4168 <loop+0x90>)
  float t = dht.getTempCelcius();
   d40f8:	eef0 8a40 	vmov.f32	s17, s0
  float f = dht.getTempFarenheit();
   d40fc:	f000 fa70 	bl	d45e0 <_ZN3DHT16getTempFarenheitEv>

  if (isnan(h) || isnan(t) || isnan(f)){
   d4100:	eeb4 8a48 	vcmp.f32	s16, s16
   d4104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4108:	d609      	bvs.n	d411e <loop+0x46>
   d410a:	eef4 8a68 	vcmp.f32	s17, s17
   d410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4112:	d604      	bvs.n	d411e <loop+0x46>
   d4114:	eeb4 0a40 	vcmp.f32	s0, s0
   d4118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d411c:	d708      	bvc.n	d4130 <loop+0x58>
    Serial.println("Failed to read from DHT sensor");
   d411e:	f001 f8fd 	bl	d531c <_Z16_fetch_usbserialv>
  }

  Serial.print('Humid: ', h);
  Serial.print(h);

   d4122:	ecbd 8b02 	vpop	{d8}
    Serial.println("Failed to read from DHT sensor");
   d4126:	4911      	ldr	r1, [pc, #68]	; (d416c <loop+0x94>)
   d4128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Failed to read from DHT sensor");
   d412c:	f000 bec3 	b.w	d4eb6 <_ZN5Print7printlnEPKc>
  Serial.print('Humid: ', h);
   d4130:	f001 f8f4 	bl	d531c <_Z16_fetch_usbserialv>
   d4134:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d4138:	ee17 2a90 	vmov	r2, s15

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d413c:	b972      	cbnz	r2, d415c <loop+0x84>
        return write(n);
   d413e:	6803      	ldr	r3, [r0, #0]
   d4140:	2120      	movs	r1, #32
   d4142:	689b      	ldr	r3, [r3, #8]
   d4144:	4798      	blx	r3
  Serial.print(h);
   d4146:	f001 f8e9 	bl	d531c <_Z16_fetch_usbserialv>
   d414a:	eeb0 0a48 	vmov.f32	s0, s16
   d414e:	ecbd 8b02 	vpop	{d8}
  Serial.print(h);
   d4152:	2102      	movs	r1, #2
   d4154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.print(h);
   d4158:	f000 bf9e 	b.w	d5098 <_ZN5Print5printEfi>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d415c:	4904      	ldr	r1, [pc, #16]	; (d4170 <loop+0x98>)
   d415e:	b2d2      	uxtb	r2, r2
   d4160:	f000 feb3 	bl	d4eca <_ZN5Print11printNumberEmh>
   d4164:	e7ef      	b.n	d4146 <loop+0x6e>
   d4166:	bf00      	nop
   d4168:	2003e600 	.word	0x2003e600
   d416c:	000d5fef 	.word	0x000d5fef
   d4170:	69643a20 	.word	0x69643a20

000d4174 <_GLOBAL__sub_I_dht>:
DHT dht(DHTPIN, DHTTYPE);
   d4174:	4802      	ldr	r0, [pc, #8]	; (d4180 <_GLOBAL__sub_I_dht+0xc>)
   d4176:	2306      	movs	r3, #6
   d4178:	220b      	movs	r2, #11
   d417a:	2113      	movs	r1, #19
   d417c:	f000 b835 	b.w	d41ea <_ZN3DHTC1Ehhh>
   d4180:	2003e600 	.word	0x2003e600

000d4184 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4184:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4186:	6803      	ldr	r3, [r0, #0]
   d4188:	2b2f      	cmp	r3, #47	; 0x2f
{
   d418a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d418c:	d904      	bls.n	d4198 <nrf_gpio_pin_port_decode+0x14>
   d418e:	4a07      	ldr	r2, [pc, #28]	; (d41ac <nrf_gpio_pin_port_decode+0x28>)
   d4190:	2100      	movs	r1, #0
   d4192:	200a      	movs	r0, #10
   d4194:	f000 fb84 	bl	d48a0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4198:	6823      	ldr	r3, [r4, #0]
   d419a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d419c:	bf83      	ittte	hi
   d419e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d41a2:	4803      	ldrhi	r0, [pc, #12]	; (d41b0 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d41a4:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d41a6:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d41aa:	bd10      	pop	{r4, pc}
   d41ac:	000d4691 	.word	0x000d4691
   d41b0:	50000300 	.word	0x50000300

000d41b4 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d41b4:	b507      	push	{r0, r1, r2, lr}
   d41b6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41b8:	a801      	add	r0, sp, #4
   d41ba:	f7ff ffe3 	bl	d4184 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d41be:	9a01      	ldr	r2, [sp, #4]
   d41c0:	2301      	movs	r3, #1
   d41c2:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d41c4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d41c8:	b003      	add	sp, #12
   d41ca:	f85d fb04 	ldr.w	pc, [sp], #4

000d41ce <nrf_gpio_pin_read>:
{
   d41ce:	b507      	push	{r0, r1, r2, lr}
   d41d0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41d2:	a801      	add	r0, sp, #4
   d41d4:	f7ff ffd6 	bl	d4184 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d41d8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d41da:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d41de:	40d8      	lsrs	r0, r3
}
   d41e0:	f000 0001 	and.w	r0, r0, #1
   d41e4:	b003      	add	sp, #12
   d41e6:	f85d fb04 	ldr.w	pc, [sp], #4

000d41ea <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d41ea:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d41ec:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d41ee:	2301      	movs	r3, #1
	_pin = pin;
   d41f0:	7181      	strb	r1, [r0, #6]
	_type = type;
   d41f2:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d41f4:	7403      	strb	r3, [r0, #16]
}
   d41f6:	bd10      	pop	{r4, pc}

000d41f8 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d41f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d41fc:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d41fe:	4c1e      	ldr	r4, [pc, #120]	; (d4278 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4200:	7980      	ldrb	r0, [r0, #6]
   d4202:	f8df 8078 	ldr.w	r8, [pc, #120]	; d427c <_ZN3DHT5beginEv+0x84>
   d4206:	2100      	movs	r1, #0
   d4208:	f001 f982 	bl	d5510 <pinMode>
	pinSetFast(_pin);
   d420c:	79ae      	ldrb	r6, [r5, #6]
   d420e:	7823      	ldrb	r3, [r4, #0]
   d4210:	f3bf 8f5b 	dmb	ish
   d4214:	f013 0f01 	tst.w	r3, #1
   d4218:	d10a      	bne.n	d4230 <_ZN3DHT5beginEv+0x38>
   d421a:	4620      	mov	r0, r4
   d421c:	f7ff ff3d 	bl	d409a <__cxa_guard_acquire>
   d4220:	b130      	cbz	r0, d4230 <_ZN3DHT5beginEv+0x38>
   d4222:	f000 fa45 	bl	d46b0 <HAL_Pin_Map>
   d4226:	f8c8 0000 	str.w	r0, [r8]
   d422a:	4620      	mov	r0, r4
   d422c:	f7ff ff3a 	bl	d40a4 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4230:	f8d8 3000 	ldr.w	r3, [r8]
   d4234:	0136      	lsls	r6, r6, #4
   d4236:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4238:	7823      	ldrb	r3, [r4, #0]
   d423a:	f3bf 8f5b 	dmb	ish
   d423e:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4240:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4244:	d40a      	bmi.n	d425c <_ZN3DHT5beginEv+0x64>
   d4246:	480c      	ldr	r0, [pc, #48]	; (d4278 <_ZN3DHT5beginEv+0x80>)
   d4248:	f7ff ff27 	bl	d409a <__cxa_guard_acquire>
   d424c:	b130      	cbz	r0, d425c <_ZN3DHT5beginEv+0x64>
   d424e:	f000 fa2f 	bl	d46b0 <HAL_Pin_Map>
   d4252:	f8c8 0000 	str.w	r0, [r8]
   d4256:	4808      	ldr	r0, [pc, #32]	; (d4278 <_ZN3DHT5beginEv+0x80>)
   d4258:	f7ff ff24 	bl	d40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d425c:	f8d8 3000 	ldr.w	r3, [r8]
   d4260:	4433      	add	r3, r6
   d4262:	785b      	ldrb	r3, [r3, #1]
   d4264:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4268:	ea43 0007 	orr.w	r0, r3, r7
   d426c:	f7ff ffa2 	bl	d41b4 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d4270:	2300      	movs	r3, #0
   d4272:	60eb      	str	r3, [r5, #12]
}
   d4274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4278:	2003e614 	.word	0x2003e614
   d427c:	2003e618 	.word	0x2003e618

000d4280 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d4280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4284:	4604      	mov	r4, r0
   d4286:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4288:	f000 fa0a 	bl	d46a0 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d428c:	68e3      	ldr	r3, [r4, #12]
   d428e:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4290:	bf84      	itt	hi
   d4292:	2300      	movhi	r3, #0
   d4294:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4296:	7c23      	ldrb	r3, [r4, #16]
   d4298:	b92b      	cbnz	r3, d42a6 <_ZN3DHT4readEv+0x26>
   d429a:	68e3      	ldr	r3, [r4, #12]
   d429c:	1ac0      	subs	r0, r0, r3
   d429e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d42a2:	f0c0 8160 	bcc.w	d4566 <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d42a6:	2500      	movs	r5, #0
   d42a8:	7425      	strb	r5, [r4, #16]
   d42aa:	f000 f9f9 	bl	d46a0 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42ae:	4eb0      	ldr	r6, [pc, #704]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d42b0:	6025      	str	r5, [r4, #0]
   d42b2:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d42b4:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d42b6:	79a7      	ldrb	r7, [r4, #6]
   d42b8:	7833      	ldrb	r3, [r6, #0]
   d42ba:	4dae      	ldr	r5, [pc, #696]	; (d4574 <_ZN3DHT4readEv+0x2f4>)
   d42bc:	f3bf 8f5b 	dmb	ish
   d42c0:	f013 0f01 	tst.w	r3, #1
   d42c4:	d109      	bne.n	d42da <_ZN3DHT4readEv+0x5a>
   d42c6:	4630      	mov	r0, r6
   d42c8:	f7ff fee7 	bl	d409a <__cxa_guard_acquire>
   d42cc:	b128      	cbz	r0, d42da <_ZN3DHT4readEv+0x5a>
   d42ce:	f000 f9ef 	bl	d46b0 <HAL_Pin_Map>
   d42d2:	6028      	str	r0, [r5, #0]
   d42d4:	4630      	mov	r0, r6
   d42d6:	f7ff fee5 	bl	d40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42da:	682b      	ldr	r3, [r5, #0]
   d42dc:	013f      	lsls	r7, r7, #4
   d42de:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42e2:	7833      	ldrb	r3, [r6, #0]
   d42e4:	f3bf 8f5b 	dmb	ish
   d42e8:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42ea:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42ee:	d409      	bmi.n	d4304 <_ZN3DHT4readEv+0x84>
   d42f0:	489f      	ldr	r0, [pc, #636]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d42f2:	f7ff fed2 	bl	d409a <__cxa_guard_acquire>
   d42f6:	b128      	cbz	r0, d4304 <_ZN3DHT4readEv+0x84>
   d42f8:	f000 f9da 	bl	d46b0 <HAL_Pin_Map>
   d42fc:	6028      	str	r0, [r5, #0]
   d42fe:	489c      	ldr	r0, [pc, #624]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d4300:	f7ff fed0 	bl	d40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4304:	682b      	ldr	r3, [r5, #0]
   d4306:	441f      	add	r7, r3
   d4308:	7878      	ldrb	r0, [r7, #1]
   d430a:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d430e:	ea40 0008 	orr.w	r0, r0, r8
   d4312:	f7ff ff4f 	bl	d41b4 <nrf_gpio_pin_set>
	delay(250);
   d4316:	20fa      	movs	r0, #250	; 0xfa
   d4318:	f000 fb6e 	bl	d49f8 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d431c:	79a0      	ldrb	r0, [r4, #6]
   d431e:	2101      	movs	r1, #1
   d4320:	f001 f8f6 	bl	d5510 <pinMode>
	pinResetFast(_pin);
   d4324:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4326:	7833      	ldrb	r3, [r6, #0]
   d4328:	f3bf 8f5b 	dmb	ish
   d432c:	07da      	lsls	r2, r3, #31
   d432e:	d409      	bmi.n	d4344 <_ZN3DHT4readEv+0xc4>
   d4330:	488f      	ldr	r0, [pc, #572]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d4332:	f7ff feb2 	bl	d409a <__cxa_guard_acquire>
   d4336:	b128      	cbz	r0, d4344 <_ZN3DHT4readEv+0xc4>
   d4338:	f000 f9ba 	bl	d46b0 <HAL_Pin_Map>
   d433c:	6028      	str	r0, [r5, #0]
   d433e:	488c      	ldr	r0, [pc, #560]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d4340:	f7ff feb0 	bl	d40a4 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4344:	682b      	ldr	r3, [r5, #0]
   d4346:	013f      	lsls	r7, r7, #4
   d4348:	5ddb      	ldrb	r3, [r3, r7]
   d434a:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d434e:	7833      	ldrb	r3, [r6, #0]
   d4350:	f3bf 8f5b 	dmb	ish
   d4354:	07db      	lsls	r3, r3, #31
   d4356:	d409      	bmi.n	d436c <_ZN3DHT4readEv+0xec>
   d4358:	4885      	ldr	r0, [pc, #532]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d435a:	f7ff fe9e 	bl	d409a <__cxa_guard_acquire>
   d435e:	b128      	cbz	r0, d436c <_ZN3DHT4readEv+0xec>
   d4360:	f000 f9a6 	bl	d46b0 <HAL_Pin_Map>
   d4364:	6028      	str	r0, [r5, #0]
   d4366:	4882      	ldr	r0, [pc, #520]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d4368:	f7ff fe9c 	bl	d40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d436c:	682b      	ldr	r3, [r5, #0]
   d436e:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4370:	a803      	add	r0, sp, #12
   d4372:	787b      	ldrb	r3, [r7, #1]
   d4374:	f003 031f 	and.w	r3, r3, #31
   d4378:	ea43 0308 	orr.w	r3, r3, r8
   d437c:	9303      	str	r3, [sp, #12]
   d437e:	f7ff ff01 	bl	d4184 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4382:	9a03      	ldr	r2, [sp, #12]
   d4384:	2301      	movs	r3, #1
   d4386:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4388:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d438c:	2014      	movs	r0, #20
   d438e:	f000 fb33 	bl	d49f8 <delay>
	noInterrupts();
   d4392:	f000 fc21 	bl	d4bd8 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4396:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4398:	7833      	ldrb	r3, [r6, #0]
   d439a:	f3bf 8f5b 	dmb	ish
   d439e:	07d8      	lsls	r0, r3, #31
   d43a0:	d409      	bmi.n	d43b6 <_ZN3DHT4readEv+0x136>
   d43a2:	4873      	ldr	r0, [pc, #460]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d43a4:	f7ff fe79 	bl	d409a <__cxa_guard_acquire>
   d43a8:	b128      	cbz	r0, d43b6 <_ZN3DHT4readEv+0x136>
   d43aa:	f000 f981 	bl	d46b0 <HAL_Pin_Map>
   d43ae:	6028      	str	r0, [r5, #0]
   d43b0:	486f      	ldr	r0, [pc, #444]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d43b2:	f7ff fe77 	bl	d40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43b6:	682b      	ldr	r3, [r5, #0]
   d43b8:	013f      	lsls	r7, r7, #4
   d43ba:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43be:	7833      	ldrb	r3, [r6, #0]
   d43c0:	f3bf 8f5b 	dmb	ish
   d43c4:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43c6:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43ca:	d409      	bmi.n	d43e0 <_ZN3DHT4readEv+0x160>
   d43cc:	4868      	ldr	r0, [pc, #416]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d43ce:	f7ff fe64 	bl	d409a <__cxa_guard_acquire>
   d43d2:	b128      	cbz	r0, d43e0 <_ZN3DHT4readEv+0x160>
   d43d4:	f000 f96c 	bl	d46b0 <HAL_Pin_Map>
   d43d8:	6028      	str	r0, [r5, #0]
   d43da:	4865      	ldr	r0, [pc, #404]	; (d4570 <_ZN3DHT4readEv+0x2f0>)
   d43dc:	f7ff fe62 	bl	d40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43e0:	682b      	ldr	r3, [r5, #0]
   d43e2:	441f      	add	r7, r3
   d43e4:	7878      	ldrb	r0, [r7, #1]
   d43e6:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d43ea:	ea40 0008 	orr.w	r0, r0, r8
   d43ee:	f7ff fee1 	bl	d41b4 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d43f2:	2028      	movs	r0, #40	; 0x28
   d43f4:	f000 f94c 	bl	d4690 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d43f8:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43fa:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4570 <_ZN3DHT4readEv+0x2f0>
   d43fe:	2100      	movs	r1, #0
   d4400:	f001 f886 	bl	d5510 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d4404:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d4406:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4408:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d440a:	9300      	str	r3, [sp, #0]
		counter = 0;
   d440c:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4410:	f894 b006 	ldrb.w	fp, [r4, #6]
   d4414:	7833      	ldrb	r3, [r6, #0]
   d4416:	f3bf 8f5b 	dmb	ish
   d441a:	07da      	lsls	r2, r3, #31
   d441c:	d409      	bmi.n	d4432 <_ZN3DHT4readEv+0x1b2>
   d441e:	4640      	mov	r0, r8
   d4420:	f7ff fe3b 	bl	d409a <__cxa_guard_acquire>
   d4424:	b128      	cbz	r0, d4432 <_ZN3DHT4readEv+0x1b2>
   d4426:	f000 f943 	bl	d46b0 <HAL_Pin_Map>
   d442a:	6028      	str	r0, [r5, #0]
   d442c:	4640      	mov	r0, r8
   d442e:	f7ff fe39 	bl	d40a4 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4432:	682b      	ldr	r3, [r5, #0]
   d4434:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4438:	f813 300b 	ldrb.w	r3, [r3, fp]
   d443c:	015b      	lsls	r3, r3, #5
   d443e:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4440:	7833      	ldrb	r3, [r6, #0]
   d4442:	f3bf 8f5b 	dmb	ish
   d4446:	07db      	lsls	r3, r3, #31
   d4448:	d409      	bmi.n	d445e <_ZN3DHT4readEv+0x1de>
   d444a:	4640      	mov	r0, r8
   d444c:	f7ff fe25 	bl	d409a <__cxa_guard_acquire>
   d4450:	b128      	cbz	r0, d445e <_ZN3DHT4readEv+0x1de>
   d4452:	f000 f92d 	bl	d46b0 <HAL_Pin_Map>
   d4456:	6028      	str	r0, [r5, #0]
   d4458:	4640      	mov	r0, r8
   d445a:	f7ff fe23 	bl	d40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d445e:	682b      	ldr	r3, [r5, #0]
   d4460:	445b      	add	r3, fp
   d4462:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4466:	9b01      	ldr	r3, [sp, #4]
   d4468:	f00b 0b1f 	and.w	fp, fp, #31
   d446c:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4470:	4658      	mov	r0, fp
   d4472:	f7ff feac 	bl	d41ce <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4476:	4658      	mov	r0, fp
   d4478:	f7ff fea9 	bl	d41ce <nrf_gpio_pin_read>
   d447c:	9b00      	ldr	r3, [sp, #0]
   d447e:	4283      	cmp	r3, r0
   d4480:	d109      	bne.n	d4496 <_ZN3DHT4readEv+0x216>
			counter++;
   d4482:	f109 0901 	add.w	r9, r9, #1
   d4486:	fa5f f989 	uxtb.w	r9, r9
   d448a:	2001      	movs	r0, #1
   d448c:	f000 f900 	bl	d4690 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4490:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4494:	d1bc      	bne.n	d4410 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4496:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d449a:	7833      	ldrb	r3, [r6, #0]
   d449c:	f3bf 8f5b 	dmb	ish
   d44a0:	07d8      	lsls	r0, r3, #31
   d44a2:	d409      	bmi.n	d44b8 <_ZN3DHT4readEv+0x238>
   d44a4:	4640      	mov	r0, r8
   d44a6:	f7ff fdf8 	bl	d409a <__cxa_guard_acquire>
   d44aa:	b128      	cbz	r0, d44b8 <_ZN3DHT4readEv+0x238>
   d44ac:	f000 f900 	bl	d46b0 <HAL_Pin_Map>
   d44b0:	6028      	str	r0, [r5, #0]
   d44b2:	4640      	mov	r0, r8
   d44b4:	f7ff fdf6 	bl	d40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44b8:	682b      	ldr	r3, [r5, #0]
   d44ba:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d44be:	f813 300b 	ldrb.w	r3, [r3, fp]
   d44c2:	015b      	lsls	r3, r3, #5
   d44c4:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44c6:	7833      	ldrb	r3, [r6, #0]
   d44c8:	f3bf 8f5b 	dmb	ish
   d44cc:	07d9      	lsls	r1, r3, #31
   d44ce:	d409      	bmi.n	d44e4 <_ZN3DHT4readEv+0x264>
   d44d0:	4640      	mov	r0, r8
   d44d2:	f7ff fde2 	bl	d409a <__cxa_guard_acquire>
   d44d6:	b128      	cbz	r0, d44e4 <_ZN3DHT4readEv+0x264>
   d44d8:	f000 f8ea 	bl	d46b0 <HAL_Pin_Map>
   d44dc:	6028      	str	r0, [r5, #0]
   d44de:	4640      	mov	r0, r8
   d44e0:	f7ff fde0 	bl	d40a4 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44e4:	682b      	ldr	r3, [r5, #0]
   d44e6:	445b      	add	r3, fp
   d44e8:	f893 b001 	ldrb.w	fp, [r3, #1]
   d44ec:	9b00      	ldr	r3, [sp, #0]
   d44ee:	f00b 0b1f 	and.w	fp, fp, #31
   d44f2:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d44f6:	4658      	mov	r0, fp
   d44f8:	f7ff fe69 	bl	d41ce <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d44fc:	4658      	mov	r0, fp
   d44fe:	f7ff fe66 	bl	d41ce <nrf_gpio_pin_read>

		if (counter == 255) break;
   d4502:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d4506:	b2c3      	uxtb	r3, r0
   d4508:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d450a:	d018      	beq.n	d453e <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d450c:	2f03      	cmp	r7, #3
   d450e:	d911      	bls.n	d4534 <_ZN3DHT4readEv+0x2b4>
   d4510:	07fa      	lsls	r2, r7, #31
   d4512:	d40f      	bmi.n	d4534 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4514:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4518:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d451c:	5ca3      	ldrb	r3, [r4, r2]
   d451e:	005b      	lsls	r3, r3, #1
   d4520:	b2db      	uxtb	r3, r3
   d4522:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4524:	7a21      	ldrb	r1, [r4, #8]
   d4526:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4528:	bf3c      	itt	cc
   d452a:	f043 0301 	orrcc.w	r3, r3, #1
   d452e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4530:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4534:	3701      	adds	r7, #1
   d4536:	b2ff      	uxtb	r7, r7
   d4538:	2f55      	cmp	r7, #85	; 0x55
   d453a:	f47f af67 	bne.w	d440c <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d453e:	f000 fb4d 	bl	d4bdc <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d4542:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4546:	d910      	bls.n	d456a <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4548:	7863      	ldrb	r3, [r4, #1]
   d454a:	7820      	ldrb	r0, [r4, #0]
   d454c:	4418      	add	r0, r3
   d454e:	78a3      	ldrb	r3, [r4, #2]
   d4550:	4418      	add	r0, r3
   d4552:	78e3      	ldrb	r3, [r4, #3]
   d4554:	4418      	add	r0, r3
   d4556:	7923      	ldrb	r3, [r4, #4]
   d4558:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d455a:	1ac3      	subs	r3, r0, r3
   d455c:	4258      	negs	r0, r3
   d455e:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d4560:	b005      	add	sp, #20
   d4562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4566:	2001      	movs	r0, #1
   d4568:	e7fa      	b.n	d4560 <_ZN3DHT4readEv+0x2e0>
	return false;
   d456a:	2000      	movs	r0, #0
   d456c:	e7f8      	b.n	d4560 <_ZN3DHT4readEv+0x2e0>
   d456e:	bf00      	nop
   d4570:	2003e614 	.word	0x2003e614
   d4574:	2003e618 	.word	0x2003e618

000d4578 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4578:	b510      	push	{r4, lr}
   d457a:	4604      	mov	r4, r0
	if (read()) {
   d457c:	f7ff fe80 	bl	d4280 <_ZN3DHT4readEv>
   d4580:	b320      	cbz	r0, d45cc <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d4582:	79e3      	ldrb	r3, [r4, #7]
   d4584:	2b0b      	cmp	r3, #11
   d4586:	d01b      	beq.n	d45c0 <_ZN3DHT15readTemperatureEv+0x48>
   d4588:	3b15      	subs	r3, #21
   d458a:	2b01      	cmp	r3, #1
   d458c:	d81e      	bhi.n	d45cc <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d458e:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d4590:	eddf 6a10 	vldr	s13, [pc, #64]	; d45d4 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4598:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d459c:	78e2      	ldrb	r2, [r4, #3]
   d459e:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d45a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d45a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d45aa:	061b      	lsls	r3, r3, #24
				f += data[3];
   d45ac:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d45b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d45b4:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d45b8:	d507      	bpl.n	d45ca <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d45ba:	eeb1 0a40 	vneg.f32	s0, s0
   d45be:	e004      	b.n	d45ca <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d45c0:	78a3      	ldrb	r3, [r4, #2]
   d45c2:	ee00 3a10 	vmov	s0, r3
   d45c6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d45ca:	bd10      	pop	{r4, pc}
		switch (_type) {
   d45cc:	ed9f 0a02 	vldr	s0, [pc, #8]	; d45d8 <_ZN3DHT15readTemperatureEv+0x60>
   d45d0:	e7fb      	b.n	d45ca <_ZN3DHT15readTemperatureEv+0x52>
   d45d2:	bf00      	nop
   d45d4:	43800000 	.word	0x43800000
   d45d8:	7fc00000 	.word	0x7fc00000

000d45dc <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d45dc:	f7ff bfcc 	b.w	d4578 <_ZN3DHT15readTemperatureEv>

000d45e0 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d45e0:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d45e2:	f7ff ffc9 	bl	d4578 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d45e6:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d45ea:	ee20 0a27 	vmul.f32	s0, s0, s15
   d45ee:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d45f2:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d45f6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4600 <_ZN3DHT16getTempFarenheitEv+0x20>
   d45fa:	ee37 0a00 	vadd.f32	s0, s14, s0
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	42000000 	.word	0x42000000

000d4604 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4604:	b510      	push	{r4, lr}
   d4606:	4604      	mov	r4, r0
	if (read()) {
   d4608:	f7ff fe3a 	bl	d4280 <_ZN3DHT4readEv>
   d460c:	b1f0      	cbz	r0, d464c <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d460e:	79e3      	ldrb	r3, [r4, #7]
   d4610:	2b0b      	cmp	r3, #11
   d4612:	d015      	beq.n	d4640 <_ZN3DHT12readHumidityEv+0x3c>
   d4614:	3b15      	subs	r3, #21
   d4616:	2b01      	cmp	r3, #1
   d4618:	d818      	bhi.n	d464c <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d461a:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d461c:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4654 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4620:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4624:	7863      	ldrb	r3, [r4, #1]
   d4626:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d462a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d462e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4632:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4636:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d463a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d463e:	bd10      	pop	{r4, pc}
				f = data[0];
   d4640:	7823      	ldrb	r3, [r4, #0]
   d4642:	ee00 3a10 	vmov	s0, r3
   d4646:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d464a:	e7f8      	b.n	d463e <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d464c:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4658 <_ZN3DHT12readHumidityEv+0x54>
   d4650:	e7f5      	b.n	d463e <_ZN3DHT12readHumidityEv+0x3a>
   d4652:	bf00      	nop
   d4654:	43800000 	.word	0x43800000
   d4658:	7fc00000 	.word	0x7fc00000

000d465c <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d465c:	f7ff bfd2 	b.w	d4604 <_ZN3DHT12readHumidityEv>

000d4660 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <os_mutex_recursive_create+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030248 	.word	0x00030248

000d4670 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <os_mutex_recursive_destroy+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030248 	.word	0x00030248

000d4680 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <HAL_RNG_GetRandomNumber+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	685b      	ldr	r3, [r3, #4]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030218 	.word	0x00030218

000d4690 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <HAL_Delay_Microseconds+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	68db      	ldr	r3, [r3, #12]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030218 	.word	0x00030218

000d46a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	695b      	ldr	r3, [r3, #20]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030218 	.word	0x00030218

000d46b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_Pin_Map+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	681b      	ldr	r3, [r3, #0]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003022c 	.word	0x0003022c

000d46c0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_Pin_Mode+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	689b      	ldr	r3, [r3, #8]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003022c 	.word	0x0003022c

000d46d0 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_Interrupts_Enable_All+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	6a1b      	ldr	r3, [r3, #32]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003022c 	.word	0x0003022c

000d46e0 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_Interrupts_Disable_All+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003022c 	.word	0x0003022c

000d46f0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <hal_i2c_write+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	6a1b      	ldr	r3, [r3, #32]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030228 	.word	0x00030228

000d4700 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <hal_i2c_available+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030228 	.word	0x00030228

000d4710 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <hal_i2c_read+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030228 	.word	0x00030228

000d4720 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <hal_i2c_peek+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030228 	.word	0x00030228

000d4730 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <hal_i2c_flush+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030228 	.word	0x00030228

000d4740 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <hal_i2c_is_enabled+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030228 	.word	0x00030228

000d4750 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <hal_i2c_init+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030228 	.word	0x00030228

000d4760 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <inet_inet_ntop+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	695b      	ldr	r3, [r3, #20]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030264 	.word	0x00030264

000d4770 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <netdb_freeaddrinfo+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	689b      	ldr	r3, [r3, #8]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030268 	.word	0x00030268

000d4780 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <netdb_getaddrinfo+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	68db      	ldr	r3, [r3, #12]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030268 	.word	0x00030268

000d4790 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <hal_spi_init+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	69db      	ldr	r3, [r3, #28]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030230 	.word	0x00030230

000d47a0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <hal_spi_is_enabled+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	6a1b      	ldr	r3, [r3, #32]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030230 	.word	0x00030230

000d47b0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <hal_usart_init+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	681b      	ldr	r3, [r3, #0]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	0003023c 	.word	0x0003023c

000d47c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <hal_usart_write+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	68db      	ldr	r3, [r3, #12]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003023c 	.word	0x0003023c

000d47d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <hal_usart_available+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	691b      	ldr	r3, [r3, #16]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	0003023c 	.word	0x0003023c

000d47e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <hal_usart_read+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	695b      	ldr	r3, [r3, #20]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003023c 	.word	0x0003023c

000d47f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <hal_usart_peek+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	699b      	ldr	r3, [r3, #24]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003023c 	.word	0x0003023c

000d4800 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <hal_usart_flush+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	69db      	ldr	r3, [r3, #28]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003023c 	.word	0x0003023c

000d4810 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <hal_usart_is_enabled+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6a1b      	ldr	r3, [r3, #32]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003023c 	.word	0x0003023c

000d4820 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <hal_usart_available_data_for_write+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003023c 	.word	0x0003023c

000d4830 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <HAL_USB_USART_Init+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	681b      	ldr	r3, [r3, #0]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003024c 	.word	0x0003024c

000d4840 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_USB_USART_Begin+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	685b      	ldr	r3, [r3, #4]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003024c 	.word	0x0003024c

000d4850 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_USB_USART_Available_Data+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	691b      	ldr	r3, [r3, #16]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003024c 	.word	0x0003024c

000d4860 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	695b      	ldr	r3, [r3, #20]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003024c 	.word	0x0003024c

000d4870 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <HAL_USB_USART_Receive_Data+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	699b      	ldr	r3, [r3, #24]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003024c 	.word	0x0003024c

000d4880 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_USB_USART_Send_Data+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	69db      	ldr	r3, [r3, #28]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003024c 	.word	0x0003024c

000d4890 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_USB_USART_Flush_Data+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6a1b      	ldr	r3, [r3, #32]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003024c 	.word	0x0003024c

000d48a0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <panic_+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030260 	.word	0x00030260

000d48b0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <set_system_mode+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	685b      	ldr	r3, [r3, #4]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030220 	.word	0x00030220

000d48c0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <system_delay_ms+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	695b      	ldr	r3, [r3, #20]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030220 	.word	0x00030220

000d48d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b03      	ldr	r3, [pc, #12]	; (d48e0 <system_ctrl_set_app_request_handler+0x10>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48da:	9301      	str	r3, [sp, #4]
   d48dc:	bd08      	pop	{r3, pc}
   d48de:	0000      	.short	0x0000
   d48e0:	00030220 	.word	0x00030220

000d48e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b03      	ldr	r3, [pc, #12]	; (d48f4 <system_ctrl_set_result+0x10>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d48ee:	9301      	str	r3, [sp, #4]
   d48f0:	bd08      	pop	{r3, pc}
   d48f2:	0000      	.short	0x0000
   d48f4:	00030220 	.word	0x00030220

000d48f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <spark_set_random_seed_from_cloud_handler+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030244 	.word	0x00030244

000d4908 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <network_connect+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	685b      	ldr	r3, [r3, #4]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030240 	.word	0x00030240

000d4918 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <network_connecting+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	689b      	ldr	r3, [r3, #8]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030240 	.word	0x00030240

000d4928 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <network_disconnect+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	68db      	ldr	r3, [r3, #12]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030240 	.word	0x00030240

000d4938 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <network_ready+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	691b      	ldr	r3, [r3, #16]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030240 	.word	0x00030240

000d4948 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <network_on+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	695b      	ldr	r3, [r3, #20]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030240 	.word	0x00030240

000d4958 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <network_off+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	699b      	ldr	r3, [r3, #24]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030240 	.word	0x00030240

000d4968 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <network_listen+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	69db      	ldr	r3, [r3, #28]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030240 	.word	0x00030240

000d4978 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <network_listening+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	6a1b      	ldr	r3, [r3, #32]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030240 	.word	0x00030240

000d4988 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <network_set_listen_timeout+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030240 	.word	0x00030240

000d4998 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <network_get_listen_timeout+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030240 	.word	0x00030240

000d49a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <network_is_on+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030240 	.word	0x00030240

000d49b8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <network_is_off+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030240 	.word	0x00030240

000d49c8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <malloc+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	681b      	ldr	r3, [r3, #0]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003021c 	.word	0x0003021c

000d49d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <free+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	685b      	ldr	r3, [r3, #4]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003021c 	.word	0x0003021c

000d49e8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <newlib_impure_ptr_callback+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003021c 	.word	0x0003021c

000d49f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d49f8:	2100      	movs	r1, #0
   d49fa:	f7ff bf61 	b.w	d48c0 <system_delay_ms>

000d49fe <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d49fe:	b510      	push	{r4, lr}
   d4a00:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4a02:	6800      	ldr	r0, [r0, #0]
   d4a04:	b108      	cbz	r0, d4a0a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4a06:	f7ff fe33 	bl	d4670 <os_mutex_recursive_destroy>
    }
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	bd10      	pop	{r4, pc}

000d4a0e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a0e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4a10:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4a12:	4604      	mov	r4, r0
      if (_M_manager)
   d4a14:	b113      	cbz	r3, d4a1c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a16:	2203      	movs	r2, #3
   d4a18:	4601      	mov	r1, r0
   d4a1a:	4798      	blx	r3
    }
   d4a1c:	4620      	mov	r0, r4
   d4a1e:	bd10      	pop	{r4, pc}

000d4a20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4a20:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4a22:	4c06      	ldr	r4, [pc, #24]	; (d4a3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4a24:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4a26:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4a28:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4a2a:	f7ff fe19 	bl	d4660 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4a2e:	4620      	mov	r0, r4
   d4a30:	4a03      	ldr	r2, [pc, #12]	; (d4a40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4a32:	4904      	ldr	r1, [pc, #16]	; (d4a44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4a38:	f000 bdbc 	b.w	d55b4 <__aeabi_atexit>
   d4a3c:	2003e61c 	.word	0x2003e61c
   d4a40:	2003e5fc 	.word	0x2003e5fc
   d4a44:	000d49ff 	.word	0x000d49ff

000d4a48 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4a48:	2200      	movs	r2, #0
   d4a4a:	6840      	ldr	r0, [r0, #4]
   d4a4c:	4611      	mov	r1, r2
   d4a4e:	f7ff bf73 	b.w	d4938 <network_ready>

000d4a52 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4a52:	2200      	movs	r2, #0
   d4a54:	6840      	ldr	r0, [r0, #4]
   d4a56:	4611      	mov	r1, r2
   d4a58:	f7ff bf8e 	b.w	d4978 <network_listening>

000d4a5c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4a5c:	2200      	movs	r2, #0
   d4a5e:	6840      	ldr	r0, [r0, #4]
   d4a60:	4611      	mov	r1, r2
   d4a62:	f7ff bf99 	b.w	d4998 <network_get_listen_timeout>

000d4a66 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4a66:	6840      	ldr	r0, [r0, #4]
   d4a68:	2200      	movs	r2, #0
   d4a6a:	f7ff bf8d 	b.w	d4988 <network_set_listen_timeout>

000d4a6e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a6e:	6840      	ldr	r0, [r0, #4]
   d4a70:	2200      	movs	r2, #0
   d4a72:	f081 0101 	eor.w	r1, r1, #1
   d4a76:	f7ff bf77 	b.w	d4968 <network_listen>

000d4a7a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4a7a:	2300      	movs	r3, #0
   d4a7c:	6840      	ldr	r0, [r0, #4]
   d4a7e:	461a      	mov	r2, r3
   d4a80:	4619      	mov	r1, r3
   d4a82:	f7ff bf69 	b.w	d4958 <network_off>

000d4a86 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4a86:	2300      	movs	r3, #0
   d4a88:	6840      	ldr	r0, [r0, #4]
   d4a8a:	461a      	mov	r2, r3
   d4a8c:	4619      	mov	r1, r3
   d4a8e:	f7ff bf5b 	b.w	d4948 <network_on>

000d4a92 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4a92:	2200      	movs	r2, #0
   d4a94:	6840      	ldr	r0, [r0, #4]
   d4a96:	4611      	mov	r1, r2
   d4a98:	f7ff bf3e 	b.w	d4918 <network_connecting>

000d4a9c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a9c:	6840      	ldr	r0, [r0, #4]
   d4a9e:	2200      	movs	r2, #0
   d4aa0:	2102      	movs	r1, #2
   d4aa2:	f7ff bf41 	b.w	d4928 <network_disconnect>

000d4aa6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4aa6:	2300      	movs	r3, #0
   d4aa8:	6840      	ldr	r0, [r0, #4]
   d4aaa:	461a      	mov	r2, r3
   d4aac:	f7ff bf2c 	b.w	d4908 <network_connect>

000d4ab0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4ab0:	4b08      	ldr	r3, [pc, #32]	; (d4ad4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4ab2:	b510      	push	{r4, lr}
   d4ab4:	2428      	movs	r4, #40	; 0x28
   d4ab6:	4622      	mov	r2, r4
   d4ab8:	4618      	mov	r0, r3
   d4aba:	2100      	movs	r1, #0
   d4abc:	f001 fa54 	bl	d5f68 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ac0:	4b05      	ldr	r3, [pc, #20]	; (d4ad8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d4ac2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4ac8:	6042      	str	r2, [r0, #4]
   d4aca:	2204      	movs	r2, #4
   d4acc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4ace:	4a03      	ldr	r2, [pc, #12]	; (d4adc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4ad0:	601a      	str	r2, [r3, #0]
   d4ad2:	bd10      	pop	{r4, pc}
   d4ad4:	2003e628 	.word	0x2003e628
   d4ad8:	2003e620 	.word	0x2003e620
   d4adc:	000d6018 	.word	0x000d6018

000d4ae0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ae0:	2200      	movs	r2, #0
   d4ae2:	6840      	ldr	r0, [r0, #4]
   d4ae4:	4611      	mov	r1, r2
   d4ae6:	f7ff bf47 	b.w	d4978 <network_listening>

000d4aea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4aea:	2200      	movs	r2, #0
   d4aec:	6840      	ldr	r0, [r0, #4]
   d4aee:	4611      	mov	r1, r2
   d4af0:	f7ff bf52 	b.w	d4998 <network_get_listen_timeout>

000d4af4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4af4:	6840      	ldr	r0, [r0, #4]
   d4af6:	2200      	movs	r2, #0
   d4af8:	f7ff bf46 	b.w	d4988 <network_set_listen_timeout>

000d4afc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4afc:	6840      	ldr	r0, [r0, #4]
   d4afe:	2200      	movs	r2, #0
   d4b00:	f081 0101 	eor.w	r1, r1, #1
   d4b04:	f7ff bf30 	b.w	d4968 <network_listen>

000d4b08 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4b08:	2300      	movs	r3, #0
   d4b0a:	6840      	ldr	r0, [r0, #4]
   d4b0c:	461a      	mov	r2, r3
   d4b0e:	4619      	mov	r1, r3
   d4b10:	f7ff bf22 	b.w	d4958 <network_off>

000d4b14 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b14:	2300      	movs	r3, #0
   d4b16:	6840      	ldr	r0, [r0, #4]
   d4b18:	461a      	mov	r2, r3
   d4b1a:	4619      	mov	r1, r3
   d4b1c:	f7ff bf14 	b.w	d4948 <network_on>

000d4b20 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b20:	2200      	movs	r2, #0
   d4b22:	6840      	ldr	r0, [r0, #4]
   d4b24:	4611      	mov	r1, r2
   d4b26:	f7ff bf07 	b.w	d4938 <network_ready>

000d4b2a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b2a:	2200      	movs	r2, #0
   d4b2c:	6840      	ldr	r0, [r0, #4]
   d4b2e:	4611      	mov	r1, r2
   d4b30:	f7ff bef2 	b.w	d4918 <network_connecting>

000d4b34 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b34:	6840      	ldr	r0, [r0, #4]
   d4b36:	2200      	movs	r2, #0
   d4b38:	2102      	movs	r1, #2
   d4b3a:	f7ff bef5 	b.w	d4928 <network_disconnect>

000d4b3e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4b3e:	2300      	movs	r3, #0
   d4b40:	6840      	ldr	r0, [r0, #4]
   d4b42:	461a      	mov	r2, r3
   d4b44:	f7ff bee0 	b.w	d4908 <network_connect>

000d4b48 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4b48:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b4a:	2203      	movs	r2, #3
   d4b4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b4e:	4a02      	ldr	r2, [pc, #8]	; (d4b58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b50:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4b52:	4770      	bx	lr
   d4b54:	2003e650 	.word	0x2003e650
   d4b58:	000d6054 	.word	0x000d6054

000d4b5c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4b5c:	4770      	bx	lr

000d4b5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b60:	4606      	mov	r6, r0
   d4b62:	4615      	mov	r5, r2
   d4b64:	460c      	mov	r4, r1
   d4b66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4b68:	42bc      	cmp	r4, r7
   d4b6a:	d006      	beq.n	d4b7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4b6c:	6833      	ldr	r3, [r6, #0]
   d4b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4b72:	689b      	ldr	r3, [r3, #8]
   d4b74:	4630      	mov	r0, r6
   d4b76:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4b78:	e7f6      	b.n	d4b68 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b7e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4b7e:	7c00      	ldrb	r0, [r0, #16]
   d4b80:	2200      	movs	r2, #0
   d4b82:	f7ff bdb5 	b.w	d46f0 <hal_i2c_write>

000d4b86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4b86:	7c00      	ldrb	r0, [r0, #16]
   d4b88:	2100      	movs	r1, #0
   d4b8a:	f7ff bdb9 	b.w	d4700 <hal_i2c_available>

000d4b8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4b8e:	7c00      	ldrb	r0, [r0, #16]
   d4b90:	2100      	movs	r1, #0
   d4b92:	f7ff bdbd 	b.w	d4710 <hal_i2c_read>

000d4b96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4b96:	7c00      	ldrb	r0, [r0, #16]
   d4b98:	2100      	movs	r1, #0
   d4b9a:	f7ff bdc1 	b.w	d4720 <hal_i2c_peek>

000d4b9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4b9e:	7c00      	ldrb	r0, [r0, #16]
   d4ba0:	2100      	movs	r1, #0
   d4ba2:	f7ff bdc5 	b.w	d4730 <hal_i2c_flush>

000d4ba6 <_ZN7TwoWireD0Ev>:
   d4ba6:	b510      	push	{r4, lr}
   d4ba8:	2114      	movs	r1, #20
   d4baa:	4604      	mov	r4, r0
   d4bac:	f000 fd07 	bl	d55be <_ZdlPvj>
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	bd10      	pop	{r4, pc}

000d4bb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4bb4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bba:	4604      	mov	r4, r0
   d4bbc:	4608      	mov	r0, r1
   d4bbe:	2100      	movs	r1, #0
   d4bc0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4bc4:	4b03      	ldr	r3, [pc, #12]	; (d4bd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4bc6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4bc8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4bca:	4611      	mov	r1, r2
   d4bcc:	f7ff fdc0 	bl	d4750 <hal_i2c_init>
}
   d4bd0:	4620      	mov	r0, r4
   d4bd2:	bd10      	pop	{r4, pc}
   d4bd4:	000d6090 	.word	0x000d6090

000d4bd8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d4bd8:	f7ff bd82 	b.w	d46e0 <HAL_Interrupts_Disable_All>

000d4bdc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d4bdc:	f7ff bd78 	b.w	d46d0 <HAL_Interrupts_Enable_All>

000d4be0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4be0:	4770      	bx	lr

000d4be2 <_ZN9IPAddressD0Ev>:
   d4be2:	b510      	push	{r4, lr}
   d4be4:	2118      	movs	r1, #24
   d4be6:	4604      	mov	r4, r0
   d4be8:	f000 fce9 	bl	d55be <_ZdlPvj>
   d4bec:	4620      	mov	r0, r4
   d4bee:	bd10      	pop	{r4, pc}

000d4bf0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4bf2:	7d03      	ldrb	r3, [r0, #20]
   d4bf4:	2b06      	cmp	r3, #6
{
   d4bf6:	b08d      	sub	sp, #52	; 0x34
   d4bf8:	460e      	mov	r6, r1
   d4bfa:	f100 0704 	add.w	r7, r0, #4
   d4bfe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4c02:	d012      	beq.n	d4c2a <_ZNK9IPAddress7printToER5Print+0x3a>
   d4c04:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4c08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c0c:	220a      	movs	r2, #10
   d4c0e:	4630      	mov	r0, r6
   d4c10:	f000 f95b 	bl	d4eca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c14:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c16:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4c18:	d019      	beq.n	d4c4e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4c1a:	2c00      	cmp	r4, #0
   d4c1c:	d0f4      	beq.n	d4c08 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4c1e:	212e      	movs	r1, #46	; 0x2e
   d4c20:	4630      	mov	r0, r6
   d4c22:	f000 f939 	bl	d4e98 <_ZN5Print5printEc>
   d4c26:	4404      	add	r4, r0
   d4c28:	e7ee      	b.n	d4c08 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c2a:	232f      	movs	r3, #47	; 0x2f
   d4c2c:	466a      	mov	r2, sp
   d4c2e:	4639      	mov	r1, r7
   d4c30:	200a      	movs	r0, #10
		buf[0] = 0;
   d4c32:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c36:	f7ff fd93 	bl	d4760 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4c3a:	4668      	mov	r0, sp
   d4c3c:	f001 f9c0 	bl	d5fc0 <strlen>
   d4c40:	6833      	ldr	r3, [r6, #0]
   d4c42:	4602      	mov	r2, r0
   d4c44:	68db      	ldr	r3, [r3, #12]
   d4c46:	4669      	mov	r1, sp
   d4c48:	4630      	mov	r0, r6
   d4c4a:	4798      	blx	r3
   d4c4c:	4604      	mov	r4, r0
    }
    return n;
}
   d4c4e:	4620      	mov	r0, r4
   d4c50:	b00d      	add	sp, #52	; 0x34
   d4c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4c54:	b510      	push	{r4, lr}
   d4c56:	4b05      	ldr	r3, [pc, #20]	; (d4c6c <_ZN9IPAddressC1Ev+0x18>)
   d4c58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4c5a:	2211      	movs	r2, #17
   d4c5c:	f840 3b04 	str.w	r3, [r0], #4
   d4c60:	2100      	movs	r1, #0
   d4c62:	f001 f981 	bl	d5f68 <memset>
}
   d4c66:	4620      	mov	r0, r4
   d4c68:	bd10      	pop	{r4, pc}
   d4c6a:	bf00      	nop
   d4c6c:	000d60b8 	.word	0x000d60b8

000d4c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4c70:	4603      	mov	r3, r0
   d4c72:	4a07      	ldr	r2, [pc, #28]	; (d4c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4c74:	b510      	push	{r4, lr}
   d4c76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4c7a:	f101 0210 	add.w	r2, r1, #16
   d4c7e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4c82:	f843 4b04 	str.w	r4, [r3], #4
   d4c86:	4291      	cmp	r1, r2
   d4c88:	d1f9      	bne.n	d4c7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4c8a:	780a      	ldrb	r2, [r1, #0]
   d4c8c:	701a      	strb	r2, [r3, #0]
}
   d4c8e:	bd10      	pop	{r4, pc}
   d4c90:	000d60b8 	.word	0x000d60b8

000d4c94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4c94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4c96:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4c9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4c9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ca2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4ca6:	2304      	movs	r3, #4
   d4ca8:	6041      	str	r1, [r0, #4]
   d4caa:	7503      	strb	r3, [r0, #20]
}
   d4cac:	bd10      	pop	{r4, pc}
	...

000d4cb0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d4cb0:	b513      	push	{r0, r1, r4, lr}
   d4cb2:	4b05      	ldr	r3, [pc, #20]	; (d4cc8 <_ZN9IPAddressC1EPKh+0x18>)
   d4cb4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d4cb6:	78cb      	ldrb	r3, [r1, #3]
   d4cb8:	9300      	str	r3, [sp, #0]
   d4cba:	788b      	ldrb	r3, [r1, #2]
   d4cbc:	784a      	ldrb	r2, [r1, #1]
   d4cbe:	7809      	ldrb	r1, [r1, #0]
   d4cc0:	f7ff ffe8 	bl	d4c94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4cc4:	b002      	add	sp, #8
   d4cc6:	bd10      	pop	{r4, pc}
   d4cc8:	000d60b8 	.word	0x000d60b8

000d4ccc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4ccc:	4b01      	ldr	r3, [pc, #4]	; (d4cd4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4cce:	4a02      	ldr	r2, [pc, #8]	; (d4cd8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4cd0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4cd2:	4770      	bx	lr
   d4cd4:	2003e658 	.word	0x2003e658
   d4cd8:	000d60c4 	.word	0x000d60c4

000d4cdc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4cdc:	2300      	movs	r3, #0
   d4cde:	6840      	ldr	r0, [r0, #4]
   d4ce0:	461a      	mov	r2, r3
   d4ce2:	f7ff be11 	b.w	d4908 <network_connect>

000d4ce6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4ce6:	6840      	ldr	r0, [r0, #4]
   d4ce8:	2200      	movs	r2, #0
   d4cea:	2102      	movs	r1, #2
   d4cec:	f7ff be1c 	b.w	d4928 <network_disconnect>

000d4cf0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4cf0:	2200      	movs	r2, #0
   d4cf2:	6840      	ldr	r0, [r0, #4]
   d4cf4:	4611      	mov	r1, r2
   d4cf6:	f7ff be0f 	b.w	d4918 <network_connecting>

000d4cfa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4cfa:	2200      	movs	r2, #0
   d4cfc:	6840      	ldr	r0, [r0, #4]
   d4cfe:	4611      	mov	r1, r2
   d4d00:	f7ff be1a 	b.w	d4938 <network_ready>

000d4d04 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4d04:	2300      	movs	r3, #0
   d4d06:	6840      	ldr	r0, [r0, #4]
   d4d08:	461a      	mov	r2, r3
   d4d0a:	4619      	mov	r1, r3
   d4d0c:	f7ff be1c 	b.w	d4948 <network_on>

000d4d10 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4d10:	2300      	movs	r3, #0
   d4d12:	6840      	ldr	r0, [r0, #4]
   d4d14:	461a      	mov	r2, r3
   d4d16:	4619      	mov	r1, r3
   d4d18:	f7ff be1e 	b.w	d4958 <network_off>

000d4d1c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4d1c:	6840      	ldr	r0, [r0, #4]
   d4d1e:	2100      	movs	r1, #0
   d4d20:	f7ff be42 	b.w	d49a8 <network_is_on>

000d4d24 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4d24:	6840      	ldr	r0, [r0, #4]
   d4d26:	2100      	movs	r1, #0
   d4d28:	f7ff be46 	b.w	d49b8 <network_is_off>

000d4d2c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4d2c:	6840      	ldr	r0, [r0, #4]
   d4d2e:	2200      	movs	r2, #0
   d4d30:	f081 0101 	eor.w	r1, r1, #1
   d4d34:	f7ff be18 	b.w	d4968 <network_listen>

000d4d38 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4d38:	6840      	ldr	r0, [r0, #4]
   d4d3a:	2200      	movs	r2, #0
   d4d3c:	f7ff be24 	b.w	d4988 <network_set_listen_timeout>

000d4d40 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4d40:	2200      	movs	r2, #0
   d4d42:	6840      	ldr	r0, [r0, #4]
   d4d44:	4611      	mov	r1, r2
   d4d46:	f7ff be27 	b.w	d4998 <network_get_listen_timeout>

000d4d4a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4d4a:	2200      	movs	r2, #0
   d4d4c:	6840      	ldr	r0, [r0, #4]
   d4d4e:	4611      	mov	r1, r2
   d4d50:	f7ff be12 	b.w	d4978 <network_listening>

000d4d54 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d58:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4d5a:	b095      	sub	sp, #84	; 0x54
   d4d5c:	4616      	mov	r6, r2
   d4d5e:	460d      	mov	r5, r1
   d4d60:	4607      	mov	r7, r0
    IPAddress addr;
   d4d62:	f7ff ff77 	bl	d4c54 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4d66:	4621      	mov	r1, r4
   d4d68:	2218      	movs	r2, #24
   d4d6a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4d6c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4d6e:	f001 f8fb 	bl	d5f68 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4d72:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4d74:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4d78:	4621      	mov	r1, r4
   d4d7a:	466b      	mov	r3, sp
   d4d7c:	aa0c      	add	r2, sp, #48	; 0x30
   d4d7e:	4630      	mov	r0, r6
   d4d80:	f7ff fcfe 	bl	d4780 <netdb_getaddrinfo>
    if (!r) {
   d4d84:	4604      	mov	r4, r0
   d4d86:	2800      	cmp	r0, #0
   d4d88:	d14c      	bne.n	d4e24 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d8a:	4602      	mov	r2, r0
   d4d8c:	2101      	movs	r1, #1
   d4d8e:	6868      	ldr	r0, [r5, #4]
   d4d90:	f7ff fdd2 	bl	d4938 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d94:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d96:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d98:	4622      	mov	r2, r4
   d4d9a:	6868      	ldr	r0, [r5, #4]
   d4d9c:	f7ff fdcc 	bl	d4938 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4da0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4da2:	4681      	mov	r9, r0
        bool ok = false;
   d4da4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4da6:	2e00      	cmp	r6, #0
   d4da8:	d03c      	beq.n	d4e24 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d4daa:	2900      	cmp	r1, #0
   d4dac:	d13a      	bne.n	d4e24 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4dae:	6873      	ldr	r3, [r6, #4]
   d4db0:	2b02      	cmp	r3, #2
   d4db2:	d003      	beq.n	d4dbc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4db4:	2b0a      	cmp	r3, #10
   d4db6:	d011      	beq.n	d4ddc <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4db8:	69f6      	ldr	r6, [r6, #28]
   d4dba:	e7f4      	b.n	d4da6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4dbc:	f1b8 0f00 	cmp.w	r8, #0
   d4dc0:	d00a      	beq.n	d4dd8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4dc2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d4dc4:	a806      	add	r0, sp, #24
   d4dc6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d4dc8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d4dca:	f7ff ff71 	bl	d4cb0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d4dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4dd0:	1d3c      	adds	r4, r7, #4
   d4dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4dd4:	682b      	ldr	r3, [r5, #0]
   d4dd6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d4dd8:	4641      	mov	r1, r8
   d4dda:	e7ed      	b.n	d4db8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4ddc:	f1b9 0f00 	cmp.w	r9, #0
   d4de0:	d101      	bne.n	d4de6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4de2:	4649      	mov	r1, r9
   d4de4:	e7e8      	b.n	d4db8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4de6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4de8:	2210      	movs	r2, #16
   d4dea:	a801      	add	r0, sp, #4
   d4dec:	f001 f8bc 	bl	d5f68 <memset>
                    a.v = 6;
   d4df0:	2306      	movs	r3, #6
   d4df2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4df6:	ad01      	add	r5, sp, #4
   d4df8:	f104 0308 	add.w	r3, r4, #8
   d4dfc:	3418      	adds	r4, #24
   d4dfe:	6818      	ldr	r0, [r3, #0]
   d4e00:	6859      	ldr	r1, [r3, #4]
   d4e02:	462a      	mov	r2, r5
   d4e04:	c203      	stmia	r2!, {r0, r1}
   d4e06:	3308      	adds	r3, #8
   d4e08:	42a3      	cmp	r3, r4
   d4e0a:	4615      	mov	r5, r2
   d4e0c:	d1f7      	bne.n	d4dfe <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d4e0e:	a901      	add	r1, sp, #4
   d4e10:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4e12:	ad07      	add	r5, sp, #28
   d4e14:	f7ff ff2c 	bl	d4c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e1a:	1d3c      	adds	r4, r7, #4
   d4e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e1e:	682b      	ldr	r3, [r5, #0]
   d4e20:	7023      	strb	r3, [r4, #0]
   d4e22:	e7de      	b.n	d4de2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4e24:	9800      	ldr	r0, [sp, #0]
   d4e26:	f7ff fca3 	bl	d4770 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4e2a:	4638      	mov	r0, r7
   d4e2c:	b015      	add	sp, #84	; 0x54
   d4e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4e34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4e34:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4e36:	4a03      	ldr	r2, [pc, #12]	; (d4e44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4e38:	601a      	str	r2, [r3, #0]
   d4e3a:	2200      	movs	r2, #0
   d4e3c:	605a      	str	r2, [r3, #4]

} // spark
   d4e3e:	4770      	bx	lr
   d4e40:	2003e65c 	.word	0x2003e65c
   d4e44:	000d60d0 	.word	0x000d60d0

000d4e48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e4a:	4606      	mov	r6, r0
   d4e4c:	460d      	mov	r5, r1
  size_t n = 0;
   d4e4e:	188f      	adds	r7, r1, r2
   d4e50:	2400      	movs	r4, #0
  while (size--) {
   d4e52:	42bd      	cmp	r5, r7
   d4e54:	d00c      	beq.n	d4e70 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e56:	6833      	ldr	r3, [r6, #0]
   d4e58:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e5c:	689b      	ldr	r3, [r3, #8]
   d4e5e:	4630      	mov	r0, r6
   d4e60:	4798      	blx	r3
     if (chunk>=0)
   d4e62:	1e03      	subs	r3, r0, #0
   d4e64:	db01      	blt.n	d4e6a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4e66:	441c      	add	r4, r3
  while (size--) {
   d4e68:	e7f3      	b.n	d4e52 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4e6a:	2c00      	cmp	r4, #0
   d4e6c:	bf08      	it	eq
   d4e6e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4e70:	4620      	mov	r0, r4
   d4e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e74 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d4e74:	b513      	push	{r0, r1, r4, lr}
   d4e76:	4604      	mov	r4, r0
    }
   d4e78:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4e7a:	b159      	cbz	r1, d4e94 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4e7c:	9101      	str	r1, [sp, #4]
   d4e7e:	f001 f89f 	bl	d5fc0 <strlen>
   d4e82:	6823      	ldr	r3, [r4, #0]
   d4e84:	9901      	ldr	r1, [sp, #4]
   d4e86:	68db      	ldr	r3, [r3, #12]
   d4e88:	4602      	mov	r2, r0
   d4e8a:	4620      	mov	r0, r4
    }
   d4e8c:	b002      	add	sp, #8
   d4e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4e92:	4718      	bx	r3
    }
   d4e94:	b002      	add	sp, #8
   d4e96:	bd10      	pop	{r4, pc}

000d4e98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4e98:	6803      	ldr	r3, [r0, #0]
   d4e9a:	689b      	ldr	r3, [r3, #8]
   d4e9c:	4718      	bx	r3

000d4e9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4e9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ea0:	210d      	movs	r1, #13
{
   d4ea2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4ea4:	f7ff fff8 	bl	d4e98 <_ZN5Print5printEc>
  n += print('\n');
   d4ea8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4eaa:	4604      	mov	r4, r0
  n += print('\n');
   d4eac:	4628      	mov	r0, r5
   d4eae:	f7ff fff3 	bl	d4e98 <_ZN5Print5printEc>
  return n;
}
   d4eb2:	4420      	add	r0, r4
   d4eb4:	bd38      	pop	{r3, r4, r5, pc}

000d4eb6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4eb6:	b538      	push	{r3, r4, r5, lr}
   d4eb8:	4605      	mov	r5, r0
  return write(str);
   d4eba:	f7ff ffdb 	bl	d4e74 <_ZN5Print5writeEPKc>
   d4ebe:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4ec0:	4628      	mov	r0, r5
   d4ec2:	f7ff ffec 	bl	d4e9e <_ZN5Print7printlnEv>
  return n;
}
   d4ec6:	4420      	add	r0, r4
   d4ec8:	bd38      	pop	{r3, r4, r5, pc}

000d4eca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4eca:	b530      	push	{r4, r5, lr}
   d4ecc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ece:	2300      	movs	r3, #0
   d4ed0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4ed4:	2a01      	cmp	r2, #1
   d4ed6:	bf98      	it	ls
   d4ed8:	220a      	movls	r2, #10
   d4eda:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4edc:	460d      	mov	r5, r1
   d4ede:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4ee2:	fb01 5312 	mls	r3, r1, r2, r5
   d4ee6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4eea:	2b09      	cmp	r3, #9
   d4eec:	bf94      	ite	ls
   d4eee:	3330      	addls	r3, #48	; 0x30
   d4ef0:	3337      	addhi	r3, #55	; 0x37
   d4ef2:	b2db      	uxtb	r3, r3
  } while(n);
   d4ef4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4ef6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4efa:	d9ef      	bls.n	d4edc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4efc:	4621      	mov	r1, r4
   d4efe:	f7ff ffb9 	bl	d4e74 <_ZN5Print5writeEPKc>
}
   d4f02:	b00b      	add	sp, #44	; 0x2c
   d4f04:	bd30      	pop	{r4, r5, pc}
	...

000d4f08 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f0c:	ec55 4b10 	vmov	r4, r5, d0
   d4f10:	4606      	mov	r6, r0
   d4f12:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4f14:	ee10 2a10 	vmov	r2, s0
   d4f18:	ee10 0a10 	vmov	r0, s0
   d4f1c:	462b      	mov	r3, r5
   d4f1e:	4629      	mov	r1, r5
   d4f20:	f000 ffa8 	bl	d5e74 <__aeabi_dcmpun>
   d4f24:	b140      	cbz	r0, d4f38 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d4f26:	4953      	ldr	r1, [pc, #332]	; (d5074 <_ZN5Print10printFloatEdh+0x16c>)
   d4f28:	4630      	mov	r0, r6
   d4f2a:	f7ff ffa3 	bl	d4e74 <_ZN5Print5writeEPKc>
   d4f2e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d4f30:	4650      	mov	r0, sl
   d4f32:	b003      	add	sp, #12
   d4f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d4f38:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d4f3c:	4b4e      	ldr	r3, [pc, #312]	; (d5078 <_ZN5Print10printFloatEdh+0x170>)
   d4f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4f42:	4620      	mov	r0, r4
   d4f44:	4649      	mov	r1, r9
   d4f46:	f000 ff95 	bl	d5e74 <__aeabi_dcmpun>
   d4f4a:	b948      	cbnz	r0, d4f60 <_ZN5Print10printFloatEdh+0x58>
   d4f4c:	4b4a      	ldr	r3, [pc, #296]	; (d5078 <_ZN5Print10printFloatEdh+0x170>)
   d4f4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4f52:	4620      	mov	r0, r4
   d4f54:	4649      	mov	r1, r9
   d4f56:	f000 ff6f 	bl	d5e38 <__aeabi_dcmple>
   d4f5a:	b908      	cbnz	r0, d4f60 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d4f5c:	4947      	ldr	r1, [pc, #284]	; (d507c <_ZN5Print10printFloatEdh+0x174>)
   d4f5e:	e7e3      	b.n	d4f28 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4f60:	4b47      	ldr	r3, [pc, #284]	; (d5080 <_ZN5Print10printFloatEdh+0x178>)
   d4f62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4f66:	4620      	mov	r0, r4
   d4f68:	4629      	mov	r1, r5
   d4f6a:	f000 ff79 	bl	d5e60 <__aeabi_dcmpgt>
   d4f6e:	b108      	cbz	r0, d4f74 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d4f70:	4944      	ldr	r1, [pc, #272]	; (d5084 <_ZN5Print10printFloatEdh+0x17c>)
   d4f72:	e7d9      	b.n	d4f28 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4f74:	4b44      	ldr	r3, [pc, #272]	; (d5088 <_ZN5Print10printFloatEdh+0x180>)
   d4f76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	4629      	mov	r1, r5
   d4f7e:	f000 ff51 	bl	d5e24 <__aeabi_dcmplt>
   d4f82:	2800      	cmp	r0, #0
   d4f84:	d1f4      	bne.n	d4f70 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d4f86:	2200      	movs	r2, #0
   d4f88:	2300      	movs	r3, #0
   d4f8a:	4620      	mov	r0, r4
   d4f8c:	4629      	mov	r1, r5
   d4f8e:	f000 ff49 	bl	d5e24 <__aeabi_dcmplt>
   d4f92:	b1d0      	cbz	r0, d4fca <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d4f94:	212d      	movs	r1, #45	; 0x2d
   d4f96:	4630      	mov	r0, r6
   d4f98:	f7ff ff7e 	bl	d4e98 <_ZN5Print5printEc>
     number = -number;
   d4f9c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d4fa0:	4682      	mov	sl, r0
     number = -number;
   d4fa2:	461d      	mov	r5, r3
  double rounding = 0.5;
   d4fa4:	4939      	ldr	r1, [pc, #228]	; (d508c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d4fa6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5094 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d4faa:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d4fae:	2000      	movs	r0, #0
    rounding /= 10.0;
   d4fb0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d4fb4:	fa5f f38b 	uxtb.w	r3, fp
   d4fb8:	429f      	cmp	r7, r3
   d4fba:	d908      	bls.n	d4fce <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d4fbc:	4642      	mov	r2, r8
   d4fbe:	464b      	mov	r3, r9
   d4fc0:	f000 fde8 	bl	d5b94 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d4fc4:	f10b 0b01 	add.w	fp, fp, #1
   d4fc8:	e7f4      	b.n	d4fb4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d4fca:	4682      	mov	sl, r0
   d4fcc:	e7ea      	b.n	d4fa4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d4fce:	4622      	mov	r2, r4
   d4fd0:	462b      	mov	r3, r5
   d4fd2:	f000 faff 	bl	d55d4 <__adddf3>
   d4fd6:	460d      	mov	r5, r1
   d4fd8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d4fda:	f000 ff89 	bl	d5ef0 <__aeabi_d2uiz>
   d4fde:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d4fe0:	f000 fc34 	bl	d584c <__aeabi_ui2d>
   d4fe4:	4602      	mov	r2, r0
   d4fe6:	460b      	mov	r3, r1
   d4fe8:	4620      	mov	r0, r4
   d4fea:	4629      	mov	r1, r5
   d4fec:	f000 faf0 	bl	d55d0 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d4ff0:	220a      	movs	r2, #10
   d4ff2:	4604      	mov	r4, r0
   d4ff4:	460d      	mov	r5, r1
   d4ff6:	4630      	mov	r0, r6
   d4ff8:	4641      	mov	r1, r8
   d4ffa:	f7ff ff66 	bl	d4eca <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d4ffe:	4482      	add	sl, r0
  if (digits > 0) {
   d5000:	b127      	cbz	r7, d500c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5002:	4923      	ldr	r1, [pc, #140]	; (d5090 <_ZN5Print10printFloatEdh+0x188>)
   d5004:	4630      	mov	r0, r6
   d5006:	f7ff ff35 	bl	d4e74 <_ZN5Print5writeEPKc>
    n += print(".");
   d500a:	4482      	add	sl, r0
    remainder *= 10.0;
   d500c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5094 <_ZN5Print10printFloatEdh+0x18c>
   d5010:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5014:	3f01      	subs	r7, #1
   d5016:	b2ff      	uxtb	r7, r7
   d5018:	2fff      	cmp	r7, #255	; 0xff
   d501a:	d089      	beq.n	d4f30 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d501c:	4642      	mov	r2, r8
   d501e:	464b      	mov	r3, r9
   d5020:	4620      	mov	r0, r4
   d5022:	4629      	mov	r1, r5
   d5024:	f000 fc8c 	bl	d5940 <__aeabi_dmul>
   d5028:	4604      	mov	r4, r0
   d502a:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d502c:	f000 ff38 	bl	d5ea0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5030:	f1b0 0b00 	subs.w	fp, r0, #0
   d5034:	da1a      	bge.n	d506c <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5036:	212d      	movs	r1, #45	; 0x2d
   d5038:	4630      	mov	r0, r6
   d503a:	f7ff ff2d 	bl	d4e98 <_ZN5Print5printEc>
            val = -n;
   d503e:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5042:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5044:	220a      	movs	r2, #10
   d5046:	4630      	mov	r0, r6
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	f7ff ff3e 	bl	d4eca <_ZN5Print11printNumberEmh>
   d504e:	9b01      	ldr	r3, [sp, #4]
   d5050:	4418      	add	r0, r3
    n += print(toPrint);
   d5052:	4482      	add	sl, r0
    remainder -= toPrint;
   d5054:	4658      	mov	r0, fp
   d5056:	f000 fc09 	bl	d586c <__aeabi_i2d>
   d505a:	4602      	mov	r2, r0
   d505c:	460b      	mov	r3, r1
   d505e:	4620      	mov	r0, r4
   d5060:	4629      	mov	r1, r5
   d5062:	f000 fab5 	bl	d55d0 <__aeabi_dsub>
   d5066:	4604      	mov	r4, r0
   d5068:	460d      	mov	r5, r1
  while (digits-- > 0)
   d506a:	e7d3      	b.n	d5014 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d506c:	4659      	mov	r1, fp
        size_t t = 0;
   d506e:	2300      	movs	r3, #0
   d5070:	e7e8      	b.n	d5044 <_ZN5Print10printFloatEdh+0x13c>
   d5072:	bf00      	nop
   d5074:	000d6104 	.word	0x000d6104
   d5078:	7fefffff 	.word	0x7fefffff
   d507c:	000d6108 	.word	0x000d6108
   d5080:	41efffff 	.word	0x41efffff
   d5084:	000d610c 	.word	0x000d610c
   d5088:	c1efffff 	.word	0xc1efffff
   d508c:	3fe00000 	.word	0x3fe00000
   d5090:	000d6110 	.word	0x000d6110
   d5094:	40240000 	.word	0x40240000

000d5098 <_ZN5Print5printEfi>:
{
   d5098:	b538      	push	{r3, r4, r5, lr}
   d509a:	4604      	mov	r4, r0
   d509c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d50a0:	b2cd      	uxtb	r5, r1
   d50a2:	f000 fbf5 	bl	d5890 <__aeabi_f2d>
   d50a6:	ec41 0b10 	vmov	d0, r0, r1
   d50aa:	4629      	mov	r1, r5
   d50ac:	4620      	mov	r0, r4
}
   d50ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d50b2:	f7ff bf29 	b.w	d4f08 <_ZN5Print10printFloatEdh>

000d50b6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d50b6:	b510      	push	{r4, lr}
   d50b8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50ba:	f7ff fca8 	bl	d4a0e <_ZNSt14_Function_baseD1Ev>
   d50be:	4620      	mov	r0, r4
   d50c0:	bd10      	pop	{r4, pc}
	...

000d50c4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d50c4:	4803      	ldr	r0, [pc, #12]	; (d50d4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d50c6:	4a04      	ldr	r2, [pc, #16]	; (d50d8 <_GLOBAL__sub_I_RGB+0x14>)
   d50c8:	4904      	ldr	r1, [pc, #16]	; (d50dc <_GLOBAL__sub_I_RGB+0x18>)
   d50ca:	2300      	movs	r3, #0
   d50cc:	6083      	str	r3, [r0, #8]
   d50ce:	f000 ba71 	b.w	d55b4 <__aeabi_atexit>
   d50d2:	bf00      	nop
   d50d4:	2003e664 	.word	0x2003e664
   d50d8:	2003e5fc 	.word	0x2003e5fc
   d50dc:	000d50b7 	.word	0x000d50b7

000d50e0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d50e0:	b510      	push	{r4, lr}
   d50e2:	4604      	mov	r4, r0
   d50e4:	4608      	mov	r0, r1
{
    _spi = spi;
   d50e6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d50e8:	f7ff fb52 	bl	d4790 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d50ec:	2300      	movs	r3, #0
   d50ee:	6063      	str	r3, [r4, #4]
}
   d50f0:	4620      	mov	r0, r4
   d50f2:	bd10      	pop	{r4, pc}

000d50f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d50f4:	b510      	push	{r4, lr}
   d50f6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d50f8:	6800      	ldr	r0, [r0, #0]
   d50fa:	b118      	cbz	r0, d5104 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d50fc:	f7ff fc6c 	bl	d49d8 <free>
            wakeupSource_ = nullptr;
   d5100:	2300      	movs	r3, #0
   d5102:	6023      	str	r3, [r4, #0]
        }
    }
   d5104:	bd10      	pop	{r4, pc}

000d5106 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5106:	b510      	push	{r4, lr}
   d5108:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d510a:	f7ff fff3 	bl	d50f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d510e:	4620      	mov	r0, r4
   d5110:	bd10      	pop	{r4, pc}
	...

000d5114 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5114:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5116:	4b09      	ldr	r3, [pc, #36]	; (d513c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5118:	4c09      	ldr	r4, [pc, #36]	; (d5140 <_GLOBAL__sub_I_System+0x2c>)
   d511a:	2202      	movs	r2, #2
   d511c:	2000      	movs	r0, #0
   d511e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5120:	4b08      	ldr	r3, [pc, #32]	; (d5144 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5122:	6020      	str	r0, [r4, #0]
   d5124:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5126:	71a0      	strb	r0, [r4, #6]
   d5128:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d512a:	f7ff fbc1 	bl	d48b0 <set_system_mode>
SystemClass System;
   d512e:	4620      	mov	r0, r4
   d5130:	4a05      	ldr	r2, [pc, #20]	; (d5148 <_GLOBAL__sub_I_System+0x34>)
   d5132:	4906      	ldr	r1, [pc, #24]	; (d514c <_GLOBAL__sub_I_System+0x38>)
   d5134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5138:	f000 ba3c 	b.w	d55b4 <__aeabi_atexit>
   d513c:	2003e680 	.word	0x2003e680
   d5140:	2003e674 	.word	0x2003e674
   d5144:	ffff0000 	.word	0xffff0000
   d5148:	2003e5fc 	.word	0x2003e5fc
   d514c:	000d5107 	.word	0x000d5107

000d5150 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5150:	4b02      	ldr	r3, [pc, #8]	; (d515c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5152:	681a      	ldr	r2, [r3, #0]
   d5154:	4b02      	ldr	r3, [pc, #8]	; (d5160 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5156:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5158:	4770      	bx	lr
   d515a:	bf00      	nop
   d515c:	2003e594 	.word	0x2003e594
   d5160:	2003e684 	.word	0x2003e684

000d5164 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5164:	4770      	bx	lr

000d5166 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5166:	7441      	strb	r1, [r0, #17]
}
   d5168:	4770      	bx	lr

000d516a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d516a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d516c:	7c00      	ldrb	r0, [r0, #16]
   d516e:	f7ff fb57 	bl	d4820 <hal_usart_available_data_for_write>
}
   d5172:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5176:	bd08      	pop	{r3, pc}

000d5178 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5178:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d517a:	7c00      	ldrb	r0, [r0, #16]
   d517c:	f7ff fb28 	bl	d47d0 <hal_usart_available>
}
   d5180:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5184:	bd08      	pop	{r3, pc}

000d5186 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5186:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5188:	7c00      	ldrb	r0, [r0, #16]
   d518a:	f7ff fb31 	bl	d47f0 <hal_usart_peek>
}
   d518e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5192:	bd08      	pop	{r3, pc}

000d5194 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5194:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5196:	7c00      	ldrb	r0, [r0, #16]
   d5198:	f7ff fb22 	bl	d47e0 <hal_usart_read>
}
   d519c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d51a0:	bd08      	pop	{r3, pc}

000d51a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d51a2:	7c00      	ldrb	r0, [r0, #16]
   d51a4:	f7ff bb2c 	b.w	d4800 <hal_usart_flush>

000d51a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d51a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d51aa:	7c45      	ldrb	r5, [r0, #17]
{
   d51ac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d51ae:	b12d      	cbz	r5, d51bc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d51b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d51b2:	b003      	add	sp, #12
   d51b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d51b8:	f7ff bb02 	b.w	d47c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d51bc:	7c00      	ldrb	r0, [r0, #16]
   d51be:	9101      	str	r1, [sp, #4]
   d51c0:	f7ff fb2e 	bl	d4820 <hal_usart_available_data_for_write>
   d51c4:	2800      	cmp	r0, #0
   d51c6:	9901      	ldr	r1, [sp, #4]
   d51c8:	dcf2      	bgt.n	d51b0 <_ZN11USARTSerial5writeEh+0x8>
}
   d51ca:	4628      	mov	r0, r5
   d51cc:	b003      	add	sp, #12
   d51ce:	bd30      	pop	{r4, r5, pc}

000d51d0 <_ZN11USARTSerialD0Ev>:
   d51d0:	b510      	push	{r4, lr}
   d51d2:	2114      	movs	r1, #20
   d51d4:	4604      	mov	r4, r0
   d51d6:	f000 f9f2 	bl	d55be <_ZdlPvj>
   d51da:	4620      	mov	r0, r4
   d51dc:	bd10      	pop	{r4, pc}
	...

000d51e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d51e0:	b510      	push	{r4, lr}
   d51e2:	f04f 0c00 	mov.w	ip, #0
   d51e6:	4604      	mov	r4, r0
   d51e8:	4608      	mov	r0, r1
   d51ea:	4611      	mov	r1, r2
   d51ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d51f0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d51f4:	4a04      	ldr	r2, [pc, #16]	; (d5208 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d51f6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d51f8:	2201      	movs	r2, #1
  _serial = serial;
   d51fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d51fc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d51fe:	461a      	mov	r2, r3
   d5200:	f7ff fad6 	bl	d47b0 <hal_usart_init>
}
   d5204:	4620      	mov	r0, r4
   d5206:	bd10      	pop	{r4, pc}
   d5208:	000d6138 	.word	0x000d6138

000d520c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d520c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d520e:	4c0e      	ldr	r4, [pc, #56]	; (d5248 <_Z22__fetch_global_Serial1v+0x3c>)
   d5210:	7821      	ldrb	r1, [r4, #0]
   d5212:	f3bf 8f5b 	dmb	ish
   d5216:	f011 0101 	ands.w	r1, r1, #1
   d521a:	d112      	bne.n	d5242 <_Z22__fetch_global_Serial1v+0x36>
   d521c:	4620      	mov	r0, r4
   d521e:	9101      	str	r1, [sp, #4]
   d5220:	f7fe ff3b 	bl	d409a <__cxa_guard_acquire>
   d5224:	9901      	ldr	r1, [sp, #4]
   d5226:	b160      	cbz	r0, d5242 <_Z22__fetch_global_Serial1v+0x36>
   d5228:	4a08      	ldr	r2, [pc, #32]	; (d524c <_Z22__fetch_global_Serial1v+0x40>)
   d522a:	4b09      	ldr	r3, [pc, #36]	; (d5250 <_Z22__fetch_global_Serial1v+0x44>)
   d522c:	4809      	ldr	r0, [pc, #36]	; (d5254 <_Z22__fetch_global_Serial1v+0x48>)
   d522e:	f7ff ffd7 	bl	d51e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5232:	4620      	mov	r0, r4
   d5234:	f7fe ff36 	bl	d40a4 <__cxa_guard_release>
   d5238:	4a07      	ldr	r2, [pc, #28]	; (d5258 <_Z22__fetch_global_Serial1v+0x4c>)
   d523a:	4908      	ldr	r1, [pc, #32]	; (d525c <_Z22__fetch_global_Serial1v+0x50>)
   d523c:	4805      	ldr	r0, [pc, #20]	; (d5254 <_Z22__fetch_global_Serial1v+0x48>)
   d523e:	f000 f9b9 	bl	d55b4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5242:	4804      	ldr	r0, [pc, #16]	; (d5254 <_Z22__fetch_global_Serial1v+0x48>)
   d5244:	b002      	add	sp, #8
   d5246:	bd10      	pop	{r4, pc}
   d5248:	2003e688 	.word	0x2003e688
   d524c:	2003e68c 	.word	0x2003e68c
   d5250:	2003e710 	.word	0x2003e710
   d5254:	2003e794 	.word	0x2003e794
   d5258:	2003e5fc 	.word	0x2003e5fc
   d525c:	000d5165 	.word	0x000d5165

000d5260 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5260:	7441      	strb	r1, [r0, #17]
}
   d5262:	4770      	bx	lr

000d5264 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5264:	4770      	bx	lr

000d5266 <_ZN9USBSerial4readEv>:
{
   d5266:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5268:	2100      	movs	r1, #0
   d526a:	7c00      	ldrb	r0, [r0, #16]
   d526c:	f7ff fb00 	bl	d4870 <HAL_USB_USART_Receive_Data>
}
   d5270:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5274:	bd08      	pop	{r3, pc}

000d5276 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5276:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5278:	2101      	movs	r1, #1
   d527a:	7c00      	ldrb	r0, [r0, #16]
   d527c:	f7ff faf8 	bl	d4870 <HAL_USB_USART_Receive_Data>
}
   d5280:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5284:	bd08      	pop	{r3, pc}

000d5286 <_ZN9USBSerial17availableForWriteEv>:
{
   d5286:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5288:	7c00      	ldrb	r0, [r0, #16]
   d528a:	f7ff fae9 	bl	d4860 <HAL_USB_USART_Available_Data_For_Write>
}
   d528e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5292:	bd08      	pop	{r3, pc}

000d5294 <_ZN9USBSerial9availableEv>:
{
   d5294:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5296:	7c00      	ldrb	r0, [r0, #16]
   d5298:	f7ff fada 	bl	d4850 <HAL_USB_USART_Available_Data>
}
   d529c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52a0:	bd08      	pop	{r3, pc}

000d52a2 <_ZN9USBSerial5writeEh>:
{
   d52a2:	b513      	push	{r0, r1, r4, lr}
   d52a4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d52a6:	7c00      	ldrb	r0, [r0, #16]
{
   d52a8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d52aa:	f7ff fad9 	bl	d4860 <HAL_USB_USART_Available_Data_For_Write>
   d52ae:	2800      	cmp	r0, #0
   d52b0:	9901      	ldr	r1, [sp, #4]
   d52b2:	dc01      	bgt.n	d52b8 <_ZN9USBSerial5writeEh+0x16>
   d52b4:	7c60      	ldrb	r0, [r4, #17]
   d52b6:	b120      	cbz	r0, d52c2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d52b8:	7c20      	ldrb	r0, [r4, #16]
   d52ba:	f7ff fae1 	bl	d4880 <HAL_USB_USART_Send_Data>
   d52be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d52c2:	b002      	add	sp, #8
   d52c4:	bd10      	pop	{r4, pc}

000d52c6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d52c6:	7c00      	ldrb	r0, [r0, #16]
   d52c8:	f7ff bae2 	b.w	d4890 <HAL_USB_USART_Flush_Data>

000d52cc <_ZN9USBSerialD0Ev>:
   d52cc:	b510      	push	{r4, lr}
   d52ce:	2114      	movs	r1, #20
   d52d0:	4604      	mov	r4, r0
   d52d2:	f000 f974 	bl	d55be <_ZdlPvj>
   d52d6:	4620      	mov	r0, r4
   d52d8:	bd10      	pop	{r4, pc}
	...

000d52dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d52dc:	b510      	push	{r4, lr}
   d52de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d52e2:	4604      	mov	r4, r0
   d52e4:	4608      	mov	r0, r1
   d52e6:	2100      	movs	r1, #0
   d52e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d52ec:	4b04      	ldr	r3, [pc, #16]	; (d5300 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d52ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d52f0:	2301      	movs	r3, #1
  _serial = serial;
   d52f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d52f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d52f6:	4611      	mov	r1, r2
   d52f8:	f7ff fa9a 	bl	d4830 <HAL_USB_USART_Init>
}
   d52fc:	4620      	mov	r0, r4
   d52fe:	bd10      	pop	{r4, pc}
   d5300:	000d6168 	.word	0x000d6168

000d5304 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5304:	7c00      	ldrb	r0, [r0, #16]
   d5306:	2200      	movs	r2, #0
   d5308:	f7ff ba9a 	b.w	d4840 <HAL_USB_USART_Begin>

000d530c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d530c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d530e:	2214      	movs	r2, #20
{
   d5310:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5312:	2100      	movs	r1, #0
   d5314:	f000 fe28 	bl	d5f68 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5318:	4620      	mov	r0, r4
   d531a:	bd10      	pop	{r4, pc}

000d531c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d531c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d531e:	4c10      	ldr	r4, [pc, #64]	; (d5360 <_Z16_fetch_usbserialv+0x44>)
{
   d5320:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5322:	a803      	add	r0, sp, #12
   d5324:	f7ff fff2 	bl	d530c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5328:	7821      	ldrb	r1, [r4, #0]
   d532a:	f3bf 8f5b 	dmb	ish
   d532e:	f011 0101 	ands.w	r1, r1, #1
   d5332:	d111      	bne.n	d5358 <_Z16_fetch_usbserialv+0x3c>
   d5334:	4620      	mov	r0, r4
   d5336:	9101      	str	r1, [sp, #4]
   d5338:	f7fe feaf 	bl	d409a <__cxa_guard_acquire>
   d533c:	9901      	ldr	r1, [sp, #4]
   d533e:	b158      	cbz	r0, d5358 <_Z16_fetch_usbserialv+0x3c>
   d5340:	aa03      	add	r2, sp, #12
   d5342:	4808      	ldr	r0, [pc, #32]	; (d5364 <_Z16_fetch_usbserialv+0x48>)
   d5344:	f7ff ffca 	bl	d52dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5348:	4620      	mov	r0, r4
   d534a:	f7fe feab 	bl	d40a4 <__cxa_guard_release>
   d534e:	4a06      	ldr	r2, [pc, #24]	; (d5368 <_Z16_fetch_usbserialv+0x4c>)
   d5350:	4906      	ldr	r1, [pc, #24]	; (d536c <_Z16_fetch_usbserialv+0x50>)
   d5352:	4804      	ldr	r0, [pc, #16]	; (d5364 <_Z16_fetch_usbserialv+0x48>)
   d5354:	f000 f92e 	bl	d55b4 <__aeabi_atexit>
	return _usbserial;
}
   d5358:	4802      	ldr	r0, [pc, #8]	; (d5364 <_Z16_fetch_usbserialv+0x48>)
   d535a:	b008      	add	sp, #32
   d535c:	bd10      	pop	{r4, pc}
   d535e:	bf00      	nop
   d5360:	2003e7a8 	.word	0x2003e7a8
   d5364:	2003e7ac 	.word	0x2003e7ac
   d5368:	2003e5fc 	.word	0x2003e5fc
   d536c:	000d5265 	.word	0x000d5265

000d5370 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5370:	4b01      	ldr	r3, [pc, #4]	; (d5378 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5372:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5374:	4770      	bx	lr
   d5376:	bf00      	nop
   d5378:	2003e598 	.word	0x2003e598

000d537c <serialEventRun>:
{
   d537c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d537e:	4b0b      	ldr	r3, [pc, #44]	; (d53ac <serialEventRun+0x30>)
   d5380:	b143      	cbz	r3, d5394 <serialEventRun+0x18>
   d5382:	f7ff ffcb 	bl	d531c <_Z16_fetch_usbserialv>
   d5386:	6803      	ldr	r3, [r0, #0]
   d5388:	691b      	ldr	r3, [r3, #16]
   d538a:	4798      	blx	r3
   d538c:	2800      	cmp	r0, #0
   d538e:	dd01      	ble.n	d5394 <serialEventRun+0x18>
        serialEvent();
   d5390:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5394:	4b06      	ldr	r3, [pc, #24]	; (d53b0 <serialEventRun+0x34>)
   d5396:	b143      	cbz	r3, d53aa <serialEventRun+0x2e>
   d5398:	f7ff ff38 	bl	d520c <_Z22__fetch_global_Serial1v>
   d539c:	6803      	ldr	r3, [r0, #0]
   d539e:	691b      	ldr	r3, [r3, #16]
   d53a0:	4798      	blx	r3
   d53a2:	2800      	cmp	r0, #0
   d53a4:	dd01      	ble.n	d53aa <serialEventRun+0x2e>
        serialEvent1();
   d53a6:	f3af 8000 	nop.w
}
   d53aa:	bd08      	pop	{r3, pc}
	...

000d53b4 <_post_loop>:
{
   d53b4:	b508      	push	{r3, lr}
	serialEventRun();
   d53b6:	f7ff ffe1 	bl	d537c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d53ba:	f7ff f971 	bl	d46a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d53be:	4b01      	ldr	r3, [pc, #4]	; (d53c4 <_post_loop+0x10>)
   d53c0:	6018      	str	r0, [r3, #0]
}
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	2003e7d4 	.word	0x2003e7d4

000d53c8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d53c8:	4802      	ldr	r0, [pc, #8]	; (d53d4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d53ca:	4a03      	ldr	r2, [pc, #12]	; (d53d8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d53cc:	4903      	ldr	r1, [pc, #12]	; (d53dc <_Z33system_initialize_user_backup_ramv+0x14>)
   d53ce:	1a12      	subs	r2, r2, r0
   d53d0:	f000 bdbc 	b.w	d5f4c <memcpy>
   d53d4:	2003f400 	.word	0x2003f400
   d53d8:	2003f404 	.word	0x2003f404
   d53dc:	000d61c0 	.word	0x000d61c0

000d53e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d53e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d53e2:	2300      	movs	r3, #0
   d53e4:	9300      	str	r3, [sp, #0]
   d53e6:	461a      	mov	r2, r3
   d53e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d53ec:	f7ff fa7a 	bl	d48e4 <system_ctrl_set_result>
}
   d53f0:	b003      	add	sp, #12
   d53f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d53f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d53f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d53fa:	8843      	ldrh	r3, [r0, #2]
   d53fc:	2b0a      	cmp	r3, #10
   d53fe:	d008      	beq.n	d5412 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5400:	2b50      	cmp	r3, #80	; 0x50
   d5402:	d10b      	bne.n	d541c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5404:	4b09      	ldr	r3, [pc, #36]	; (d542c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5406:	681b      	ldr	r3, [r3, #0]
   d5408:	b14b      	cbz	r3, d541e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d540a:	b003      	add	sp, #12
   d540c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5410:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5412:	f7ff ffe5 	bl	d53e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5416:	b003      	add	sp, #12
   d5418:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d541c:	2300      	movs	r3, #0
   d541e:	9300      	str	r3, [sp, #0]
   d5420:	461a      	mov	r2, r3
   d5422:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5426:	f7ff fa5d 	bl	d48e4 <system_ctrl_set_result>
}
   d542a:	e7f4      	b.n	d5416 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d542c:	2003e7c4 	.word	0x2003e7c4

000d5430 <module_user_init_hook>:
{
   d5430:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5432:	4c12      	ldr	r4, [pc, #72]	; (d547c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5434:	4812      	ldr	r0, [pc, #72]	; (d5480 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5436:	4d13      	ldr	r5, [pc, #76]	; (d5484 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5438:	2100      	movs	r1, #0
   d543a:	f7ff fad5 	bl	d49e8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d543e:	6823      	ldr	r3, [r4, #0]
   d5440:	42ab      	cmp	r3, r5
   d5442:	4b11      	ldr	r3, [pc, #68]	; (d5488 <module_user_init_hook+0x58>)
   d5444:	bf0c      	ite	eq
   d5446:	2201      	moveq	r2, #1
   d5448:	2200      	movne	r2, #0
   d544a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d544c:	d002      	beq.n	d5454 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d544e:	f7ff ffbb 	bl	d53c8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5452:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5454:	f7ff f914 	bl	d4680 <HAL_RNG_GetRandomNumber>
   d5458:	4604      	mov	r4, r0
    srand(seed);
   d545a:	f000 fd8d 	bl	d5f78 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d545e:	4b0b      	ldr	r3, [pc, #44]	; (d548c <module_user_init_hook+0x5c>)
   d5460:	b113      	cbz	r3, d5468 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5462:	4620      	mov	r0, r4
   d5464:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5468:	2100      	movs	r1, #0
   d546a:	4808      	ldr	r0, [pc, #32]	; (d548c <module_user_init_hook+0x5c>)
   d546c:	f7ff fa44 	bl	d48f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5474:	4806      	ldr	r0, [pc, #24]	; (d5490 <module_user_init_hook+0x60>)
   d5476:	2100      	movs	r1, #0
   d5478:	f7ff ba2a 	b.w	d48d0 <system_ctrl_set_app_request_handler>
   d547c:	2003f400 	.word	0x2003f400
   d5480:	000d5371 	.word	0x000d5371
   d5484:	9a271c1e 	.word	0x9a271c1e
   d5488:	2003e7c0 	.word	0x2003e7c0
   d548c:	00000000 	.word	0x00000000
   d5490:	000d53f9 	.word	0x000d53f9

000d5494 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5494:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5496:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5498:	d902      	bls.n	d54a0 <pinAvailable+0xc>
    return false;
   d549a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d549c:	b002      	add	sp, #8
   d549e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d54a0:	f1a0 030b 	sub.w	r3, r0, #11
   d54a4:	2b02      	cmp	r3, #2
   d54a6:	d81a      	bhi.n	d54de <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d54a8:	4c17      	ldr	r4, [pc, #92]	; (d5508 <pinAvailable+0x74>)
   d54aa:	7821      	ldrb	r1, [r4, #0]
   d54ac:	f3bf 8f5b 	dmb	ish
   d54b0:	f011 0101 	ands.w	r1, r1, #1
   d54b4:	d10b      	bne.n	d54ce <pinAvailable+0x3a>
   d54b6:	4620      	mov	r0, r4
   d54b8:	9101      	str	r1, [sp, #4]
   d54ba:	f7fe fdee 	bl	d409a <__cxa_guard_acquire>
   d54be:	9901      	ldr	r1, [sp, #4]
   d54c0:	b128      	cbz	r0, d54ce <pinAvailable+0x3a>
   d54c2:	4812      	ldr	r0, [pc, #72]	; (d550c <pinAvailable+0x78>)
   d54c4:	f7ff fe0c 	bl	d50e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d54c8:	4620      	mov	r0, r4
   d54ca:	f7fe fdeb 	bl	d40a4 <__cxa_guard_release>
   d54ce:	4b0f      	ldr	r3, [pc, #60]	; (d550c <pinAvailable+0x78>)
   d54d0:	7818      	ldrb	r0, [r3, #0]
   d54d2:	f7ff f965 	bl	d47a0 <hal_spi_is_enabled>
   d54d6:	2800      	cmp	r0, #0
   d54d8:	d1df      	bne.n	d549a <pinAvailable+0x6>
  return true; // 'pin' is available
   d54da:	2001      	movs	r0, #1
   d54dc:	e7de      	b.n	d549c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d54de:	2801      	cmp	r0, #1
   d54e0:	d809      	bhi.n	d54f6 <pinAvailable+0x62>
   d54e2:	f000 f83f 	bl	d5564 <_Z19__fetch_global_Wirev>
   d54e6:	2100      	movs	r1, #0
   d54e8:	7c00      	ldrb	r0, [r0, #16]
   d54ea:	f7ff f929 	bl	d4740 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d54ee:	f080 0001 	eor.w	r0, r0, #1
   d54f2:	b2c0      	uxtb	r0, r0
   d54f4:	e7d2      	b.n	d549c <pinAvailable+0x8>
   d54f6:	3809      	subs	r0, #9
   d54f8:	2801      	cmp	r0, #1
   d54fa:	d8ee      	bhi.n	d54da <pinAvailable+0x46>
   d54fc:	f7ff fe86 	bl	d520c <_Z22__fetch_global_Serial1v>
   d5500:	7c00      	ldrb	r0, [r0, #16]
   d5502:	f7ff f985 	bl	d4810 <hal_usart_is_enabled>
   d5506:	e7f2      	b.n	d54ee <pinAvailable+0x5a>
   d5508:	2003e7c8 	.word	0x2003e7c8
   d550c:	2003e7cc 	.word	0x2003e7cc

000d5510 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5510:	2823      	cmp	r0, #35	; 0x23
{
   d5512:	b538      	push	{r3, r4, r5, lr}
   d5514:	4604      	mov	r4, r0
   d5516:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5518:	d80a      	bhi.n	d5530 <pinMode+0x20>
   d551a:	29ff      	cmp	r1, #255	; 0xff
   d551c:	d008      	beq.n	d5530 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d551e:	f7ff ffb9 	bl	d5494 <pinAvailable>
   d5522:	b128      	cbz	r0, d5530 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5524:	4629      	mov	r1, r5
   d5526:	4620      	mov	r0, r4
}
   d5528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d552c:	f7ff b8c8 	b.w	d46c0 <HAL_Pin_Mode>
}
   d5530:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5534 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5534:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5536:	2300      	movs	r3, #0
   d5538:	2520      	movs	r5, #32
   d553a:	8043      	strh	r3, [r0, #2]
   d553c:	2314      	movs	r3, #20
{
   d553e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5540:	8003      	strh	r3, [r0, #0]
   d5542:	6085      	str	r5, [r0, #8]
   d5544:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5546:	4906      	ldr	r1, [pc, #24]	; (d5560 <_Z17acquireWireBufferv+0x2c>)
   d5548:	4628      	mov	r0, r5
   d554a:	f000 f83a 	bl	d55c2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d554e:	4904      	ldr	r1, [pc, #16]	; (d5560 <_Z17acquireWireBufferv+0x2c>)
	};
   d5550:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5552:	4628      	mov	r0, r5
   d5554:	f000 f835 	bl	d55c2 <_ZnajRKSt9nothrow_t>
	};
   d5558:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d555a:	4620      	mov	r0, r4
   d555c:	bd38      	pop	{r3, r4, r5, pc}
   d555e:	bf00      	nop
   d5560:	000d6190 	.word	0x000d6190

000d5564 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5564:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5566:	4d0f      	ldr	r5, [pc, #60]	; (d55a4 <_Z19__fetch_global_Wirev+0x40>)
   d5568:	7829      	ldrb	r1, [r5, #0]
   d556a:	f3bf 8f5b 	dmb	ish
   d556e:	f011 0401 	ands.w	r4, r1, #1
{
   d5572:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5574:	d113      	bne.n	d559e <_Z19__fetch_global_Wirev+0x3a>
   d5576:	4628      	mov	r0, r5
   d5578:	f7fe fd8f 	bl	d409a <__cxa_guard_acquire>
   d557c:	b178      	cbz	r0, d559e <_Z19__fetch_global_Wirev+0x3a>
   d557e:	a801      	add	r0, sp, #4
   d5580:	f7ff ffd8 	bl	d5534 <_Z17acquireWireBufferv>
   d5584:	aa01      	add	r2, sp, #4
   d5586:	4621      	mov	r1, r4
   d5588:	4807      	ldr	r0, [pc, #28]	; (d55a8 <_Z19__fetch_global_Wirev+0x44>)
   d558a:	f7ff fb13 	bl	d4bb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d558e:	4628      	mov	r0, r5
   d5590:	f7fe fd88 	bl	d40a4 <__cxa_guard_release>
   d5594:	4a05      	ldr	r2, [pc, #20]	; (d55ac <_Z19__fetch_global_Wirev+0x48>)
   d5596:	4906      	ldr	r1, [pc, #24]	; (d55b0 <_Z19__fetch_global_Wirev+0x4c>)
   d5598:	4803      	ldr	r0, [pc, #12]	; (d55a8 <_Z19__fetch_global_Wirev+0x44>)
   d559a:	f000 f80b 	bl	d55b4 <__aeabi_atexit>
	return wire;
}
   d559e:	4802      	ldr	r0, [pc, #8]	; (d55a8 <_Z19__fetch_global_Wirev+0x44>)
   d55a0:	b007      	add	sp, #28
   d55a2:	bd30      	pop	{r4, r5, pc}
   d55a4:	2003e7d8 	.word	0x2003e7d8
   d55a8:	2003e7dc 	.word	0x2003e7dc
   d55ac:	2003e5fc 	.word	0x2003e5fc
   d55b0:	000d4b5d 	.word	0x000d4b5d

000d55b4 <__aeabi_atexit>:
   d55b4:	460b      	mov	r3, r1
   d55b6:	4601      	mov	r1, r0
   d55b8:	4618      	mov	r0, r3
   d55ba:	f000 bcb9 	b.w	d5f30 <__cxa_atexit>

000d55be <_ZdlPvj>:
   d55be:	f7fe bd6a 	b.w	d4096 <_ZdlPv>

000d55c2 <_ZnajRKSt9nothrow_t>:
   d55c2:	f7fe bd66 	b.w	d4092 <_Znaj>
	...

000d55c8 <__aeabi_drsub>:
   d55c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d55cc:	e002      	b.n	d55d4 <__adddf3>
   d55ce:	bf00      	nop

000d55d0 <__aeabi_dsub>:
   d55d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d55d4 <__adddf3>:
   d55d4:	b530      	push	{r4, r5, lr}
   d55d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d55da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d55de:	ea94 0f05 	teq	r4, r5
   d55e2:	bf08      	it	eq
   d55e4:	ea90 0f02 	teqeq	r0, r2
   d55e8:	bf1f      	itttt	ne
   d55ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   d55ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   d55f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d55f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d55fa:	f000 80e2 	beq.w	d57c2 <__adddf3+0x1ee>
   d55fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5602:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5606:	bfb8      	it	lt
   d5608:	426d      	neglt	r5, r5
   d560a:	dd0c      	ble.n	d5626 <__adddf3+0x52>
   d560c:	442c      	add	r4, r5
   d560e:	ea80 0202 	eor.w	r2, r0, r2
   d5612:	ea81 0303 	eor.w	r3, r1, r3
   d5616:	ea82 0000 	eor.w	r0, r2, r0
   d561a:	ea83 0101 	eor.w	r1, r3, r1
   d561e:	ea80 0202 	eor.w	r2, r0, r2
   d5622:	ea81 0303 	eor.w	r3, r1, r3
   d5626:	2d36      	cmp	r5, #54	; 0x36
   d5628:	bf88      	it	hi
   d562a:	bd30      	pophi	{r4, r5, pc}
   d562c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5630:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5634:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5638:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d563c:	d002      	beq.n	d5644 <__adddf3+0x70>
   d563e:	4240      	negs	r0, r0
   d5640:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5644:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5648:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d564c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5650:	d002      	beq.n	d5658 <__adddf3+0x84>
   d5652:	4252      	negs	r2, r2
   d5654:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5658:	ea94 0f05 	teq	r4, r5
   d565c:	f000 80a7 	beq.w	d57ae <__adddf3+0x1da>
   d5660:	f1a4 0401 	sub.w	r4, r4, #1
   d5664:	f1d5 0e20 	rsbs	lr, r5, #32
   d5668:	db0d      	blt.n	d5686 <__adddf3+0xb2>
   d566a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d566e:	fa22 f205 	lsr.w	r2, r2, r5
   d5672:	1880      	adds	r0, r0, r2
   d5674:	f141 0100 	adc.w	r1, r1, #0
   d5678:	fa03 f20e 	lsl.w	r2, r3, lr
   d567c:	1880      	adds	r0, r0, r2
   d567e:	fa43 f305 	asr.w	r3, r3, r5
   d5682:	4159      	adcs	r1, r3
   d5684:	e00e      	b.n	d56a4 <__adddf3+0xd0>
   d5686:	f1a5 0520 	sub.w	r5, r5, #32
   d568a:	f10e 0e20 	add.w	lr, lr, #32
   d568e:	2a01      	cmp	r2, #1
   d5690:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5694:	bf28      	it	cs
   d5696:	f04c 0c02 	orrcs.w	ip, ip, #2
   d569a:	fa43 f305 	asr.w	r3, r3, r5
   d569e:	18c0      	adds	r0, r0, r3
   d56a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d56a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d56a8:	d507      	bpl.n	d56ba <__adddf3+0xe6>
   d56aa:	f04f 0e00 	mov.w	lr, #0
   d56ae:	f1dc 0c00 	rsbs	ip, ip, #0
   d56b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d56b6:	eb6e 0101 	sbc.w	r1, lr, r1
   d56ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d56be:	d31b      	bcc.n	d56f8 <__adddf3+0x124>
   d56c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d56c4:	d30c      	bcc.n	d56e0 <__adddf3+0x10c>
   d56c6:	0849      	lsrs	r1, r1, #1
   d56c8:	ea5f 0030 	movs.w	r0, r0, rrx
   d56cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d56d0:	f104 0401 	add.w	r4, r4, #1
   d56d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d56d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d56dc:	f080 809a 	bcs.w	d5814 <__adddf3+0x240>
   d56e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d56e4:	bf08      	it	eq
   d56e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d56ea:	f150 0000 	adcs.w	r0, r0, #0
   d56ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d56f2:	ea41 0105 	orr.w	r1, r1, r5
   d56f6:	bd30      	pop	{r4, r5, pc}
   d56f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d56fc:	4140      	adcs	r0, r0
   d56fe:	eb41 0101 	adc.w	r1, r1, r1
   d5702:	3c01      	subs	r4, #1
   d5704:	bf28      	it	cs
   d5706:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d570a:	d2e9      	bcs.n	d56e0 <__adddf3+0x10c>
   d570c:	f091 0f00 	teq	r1, #0
   d5710:	bf04      	itt	eq
   d5712:	4601      	moveq	r1, r0
   d5714:	2000      	moveq	r0, #0
   d5716:	fab1 f381 	clz	r3, r1
   d571a:	bf08      	it	eq
   d571c:	3320      	addeq	r3, #32
   d571e:	f1a3 030b 	sub.w	r3, r3, #11
   d5722:	f1b3 0220 	subs.w	r2, r3, #32
   d5726:	da0c      	bge.n	d5742 <__adddf3+0x16e>
   d5728:	320c      	adds	r2, #12
   d572a:	dd08      	ble.n	d573e <__adddf3+0x16a>
   d572c:	f102 0c14 	add.w	ip, r2, #20
   d5730:	f1c2 020c 	rsb	r2, r2, #12
   d5734:	fa01 f00c 	lsl.w	r0, r1, ip
   d5738:	fa21 f102 	lsr.w	r1, r1, r2
   d573c:	e00c      	b.n	d5758 <__adddf3+0x184>
   d573e:	f102 0214 	add.w	r2, r2, #20
   d5742:	bfd8      	it	le
   d5744:	f1c2 0c20 	rsble	ip, r2, #32
   d5748:	fa01 f102 	lsl.w	r1, r1, r2
   d574c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5750:	bfdc      	itt	le
   d5752:	ea41 010c 	orrle.w	r1, r1, ip
   d5756:	4090      	lslle	r0, r2
   d5758:	1ae4      	subs	r4, r4, r3
   d575a:	bfa2      	ittt	ge
   d575c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5760:	4329      	orrge	r1, r5
   d5762:	bd30      	popge	{r4, r5, pc}
   d5764:	ea6f 0404 	mvn.w	r4, r4
   d5768:	3c1f      	subs	r4, #31
   d576a:	da1c      	bge.n	d57a6 <__adddf3+0x1d2>
   d576c:	340c      	adds	r4, #12
   d576e:	dc0e      	bgt.n	d578e <__adddf3+0x1ba>
   d5770:	f104 0414 	add.w	r4, r4, #20
   d5774:	f1c4 0220 	rsb	r2, r4, #32
   d5778:	fa20 f004 	lsr.w	r0, r0, r4
   d577c:	fa01 f302 	lsl.w	r3, r1, r2
   d5780:	ea40 0003 	orr.w	r0, r0, r3
   d5784:	fa21 f304 	lsr.w	r3, r1, r4
   d5788:	ea45 0103 	orr.w	r1, r5, r3
   d578c:	bd30      	pop	{r4, r5, pc}
   d578e:	f1c4 040c 	rsb	r4, r4, #12
   d5792:	f1c4 0220 	rsb	r2, r4, #32
   d5796:	fa20 f002 	lsr.w	r0, r0, r2
   d579a:	fa01 f304 	lsl.w	r3, r1, r4
   d579e:	ea40 0003 	orr.w	r0, r0, r3
   d57a2:	4629      	mov	r1, r5
   d57a4:	bd30      	pop	{r4, r5, pc}
   d57a6:	fa21 f004 	lsr.w	r0, r1, r4
   d57aa:	4629      	mov	r1, r5
   d57ac:	bd30      	pop	{r4, r5, pc}
   d57ae:	f094 0f00 	teq	r4, #0
   d57b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d57b6:	bf06      	itte	eq
   d57b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d57bc:	3401      	addeq	r4, #1
   d57be:	3d01      	subne	r5, #1
   d57c0:	e74e      	b.n	d5660 <__adddf3+0x8c>
   d57c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d57c6:	bf18      	it	ne
   d57c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d57cc:	d029      	beq.n	d5822 <__adddf3+0x24e>
   d57ce:	ea94 0f05 	teq	r4, r5
   d57d2:	bf08      	it	eq
   d57d4:	ea90 0f02 	teqeq	r0, r2
   d57d8:	d005      	beq.n	d57e6 <__adddf3+0x212>
   d57da:	ea54 0c00 	orrs.w	ip, r4, r0
   d57de:	bf04      	itt	eq
   d57e0:	4619      	moveq	r1, r3
   d57e2:	4610      	moveq	r0, r2
   d57e4:	bd30      	pop	{r4, r5, pc}
   d57e6:	ea91 0f03 	teq	r1, r3
   d57ea:	bf1e      	ittt	ne
   d57ec:	2100      	movne	r1, #0
   d57ee:	2000      	movne	r0, #0
   d57f0:	bd30      	popne	{r4, r5, pc}
   d57f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d57f6:	d105      	bne.n	d5804 <__adddf3+0x230>
   d57f8:	0040      	lsls	r0, r0, #1
   d57fa:	4149      	adcs	r1, r1
   d57fc:	bf28      	it	cs
   d57fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5802:	bd30      	pop	{r4, r5, pc}
   d5804:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5808:	bf3c      	itt	cc
   d580a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d580e:	bd30      	popcc	{r4, r5, pc}
   d5810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5814:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d581c:	f04f 0000 	mov.w	r0, #0
   d5820:	bd30      	pop	{r4, r5, pc}
   d5822:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5826:	bf1a      	itte	ne
   d5828:	4619      	movne	r1, r3
   d582a:	4610      	movne	r0, r2
   d582c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5830:	bf1c      	itt	ne
   d5832:	460b      	movne	r3, r1
   d5834:	4602      	movne	r2, r0
   d5836:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d583a:	bf06      	itte	eq
   d583c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5840:	ea91 0f03 	teqeq	r1, r3
   d5844:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5848:	bd30      	pop	{r4, r5, pc}
   d584a:	bf00      	nop

000d584c <__aeabi_ui2d>:
   d584c:	f090 0f00 	teq	r0, #0
   d5850:	bf04      	itt	eq
   d5852:	2100      	moveq	r1, #0
   d5854:	4770      	bxeq	lr
   d5856:	b530      	push	{r4, r5, lr}
   d5858:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d585c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5860:	f04f 0500 	mov.w	r5, #0
   d5864:	f04f 0100 	mov.w	r1, #0
   d5868:	e750      	b.n	d570c <__adddf3+0x138>
   d586a:	bf00      	nop

000d586c <__aeabi_i2d>:
   d586c:	f090 0f00 	teq	r0, #0
   d5870:	bf04      	itt	eq
   d5872:	2100      	moveq	r1, #0
   d5874:	4770      	bxeq	lr
   d5876:	b530      	push	{r4, r5, lr}
   d5878:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d587c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5880:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5884:	bf48      	it	mi
   d5886:	4240      	negmi	r0, r0
   d5888:	f04f 0100 	mov.w	r1, #0
   d588c:	e73e      	b.n	d570c <__adddf3+0x138>
   d588e:	bf00      	nop

000d5890 <__aeabi_f2d>:
   d5890:	0042      	lsls	r2, r0, #1
   d5892:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5896:	ea4f 0131 	mov.w	r1, r1, rrx
   d589a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d589e:	bf1f      	itttt	ne
   d58a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d58a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d58a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d58ac:	4770      	bxne	lr
   d58ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d58b2:	bf08      	it	eq
   d58b4:	4770      	bxeq	lr
   d58b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d58ba:	bf04      	itt	eq
   d58bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d58c0:	4770      	bxeq	lr
   d58c2:	b530      	push	{r4, r5, lr}
   d58c4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d58c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d58cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d58d0:	e71c      	b.n	d570c <__adddf3+0x138>
   d58d2:	bf00      	nop

000d58d4 <__aeabi_ul2d>:
   d58d4:	ea50 0201 	orrs.w	r2, r0, r1
   d58d8:	bf08      	it	eq
   d58da:	4770      	bxeq	lr
   d58dc:	b530      	push	{r4, r5, lr}
   d58de:	f04f 0500 	mov.w	r5, #0
   d58e2:	e00a      	b.n	d58fa <__aeabi_l2d+0x16>

000d58e4 <__aeabi_l2d>:
   d58e4:	ea50 0201 	orrs.w	r2, r0, r1
   d58e8:	bf08      	it	eq
   d58ea:	4770      	bxeq	lr
   d58ec:	b530      	push	{r4, r5, lr}
   d58ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d58f2:	d502      	bpl.n	d58fa <__aeabi_l2d+0x16>
   d58f4:	4240      	negs	r0, r0
   d58f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d58fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d58fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5902:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5906:	f43f aed8 	beq.w	d56ba <__adddf3+0xe6>
   d590a:	f04f 0203 	mov.w	r2, #3
   d590e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5912:	bf18      	it	ne
   d5914:	3203      	addne	r2, #3
   d5916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d591a:	bf18      	it	ne
   d591c:	3203      	addne	r2, #3
   d591e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5922:	f1c2 0320 	rsb	r3, r2, #32
   d5926:	fa00 fc03 	lsl.w	ip, r0, r3
   d592a:	fa20 f002 	lsr.w	r0, r0, r2
   d592e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5932:	ea40 000e 	orr.w	r0, r0, lr
   d5936:	fa21 f102 	lsr.w	r1, r1, r2
   d593a:	4414      	add	r4, r2
   d593c:	e6bd      	b.n	d56ba <__adddf3+0xe6>
   d593e:	bf00      	nop

000d5940 <__aeabi_dmul>:
   d5940:	b570      	push	{r4, r5, r6, lr}
   d5942:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5946:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d594a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d594e:	bf1d      	ittte	ne
   d5950:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5954:	ea94 0f0c 	teqne	r4, ip
   d5958:	ea95 0f0c 	teqne	r5, ip
   d595c:	f000 f8de 	bleq	d5b1c <__aeabi_dmul+0x1dc>
   d5960:	442c      	add	r4, r5
   d5962:	ea81 0603 	eor.w	r6, r1, r3
   d5966:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d596a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d596e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5972:	bf18      	it	ne
   d5974:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d597c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5980:	d038      	beq.n	d59f4 <__aeabi_dmul+0xb4>
   d5982:	fba0 ce02 	umull	ip, lr, r0, r2
   d5986:	f04f 0500 	mov.w	r5, #0
   d598a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d598e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5992:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5996:	f04f 0600 	mov.w	r6, #0
   d599a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d599e:	f09c 0f00 	teq	ip, #0
   d59a2:	bf18      	it	ne
   d59a4:	f04e 0e01 	orrne.w	lr, lr, #1
   d59a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d59ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d59b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d59b4:	d204      	bcs.n	d59c0 <__aeabi_dmul+0x80>
   d59b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d59ba:	416d      	adcs	r5, r5
   d59bc:	eb46 0606 	adc.w	r6, r6, r6
   d59c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d59c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d59c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d59cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d59d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d59d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d59d8:	bf88      	it	hi
   d59da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d59de:	d81e      	bhi.n	d5a1e <__aeabi_dmul+0xde>
   d59e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d59e4:	bf08      	it	eq
   d59e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d59ea:	f150 0000 	adcs.w	r0, r0, #0
   d59ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d59f2:	bd70      	pop	{r4, r5, r6, pc}
   d59f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d59f8:	ea46 0101 	orr.w	r1, r6, r1
   d59fc:	ea40 0002 	orr.w	r0, r0, r2
   d5a00:	ea81 0103 	eor.w	r1, r1, r3
   d5a04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5a08:	bfc2      	ittt	gt
   d5a0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5a0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5a12:	bd70      	popgt	{r4, r5, r6, pc}
   d5a14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5a18:	f04f 0e00 	mov.w	lr, #0
   d5a1c:	3c01      	subs	r4, #1
   d5a1e:	f300 80ab 	bgt.w	d5b78 <__aeabi_dmul+0x238>
   d5a22:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5a26:	bfde      	ittt	le
   d5a28:	2000      	movle	r0, #0
   d5a2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5a2e:	bd70      	pople	{r4, r5, r6, pc}
   d5a30:	f1c4 0400 	rsb	r4, r4, #0
   d5a34:	3c20      	subs	r4, #32
   d5a36:	da35      	bge.n	d5aa4 <__aeabi_dmul+0x164>
   d5a38:	340c      	adds	r4, #12
   d5a3a:	dc1b      	bgt.n	d5a74 <__aeabi_dmul+0x134>
   d5a3c:	f104 0414 	add.w	r4, r4, #20
   d5a40:	f1c4 0520 	rsb	r5, r4, #32
   d5a44:	fa00 f305 	lsl.w	r3, r0, r5
   d5a48:	fa20 f004 	lsr.w	r0, r0, r4
   d5a4c:	fa01 f205 	lsl.w	r2, r1, r5
   d5a50:	ea40 0002 	orr.w	r0, r0, r2
   d5a54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5a58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5a5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5a60:	fa21 f604 	lsr.w	r6, r1, r4
   d5a64:	eb42 0106 	adc.w	r1, r2, r6
   d5a68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5a6c:	bf08      	it	eq
   d5a6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5a72:	bd70      	pop	{r4, r5, r6, pc}
   d5a74:	f1c4 040c 	rsb	r4, r4, #12
   d5a78:	f1c4 0520 	rsb	r5, r4, #32
   d5a7c:	fa00 f304 	lsl.w	r3, r0, r4
   d5a80:	fa20 f005 	lsr.w	r0, r0, r5
   d5a84:	fa01 f204 	lsl.w	r2, r1, r4
   d5a88:	ea40 0002 	orr.w	r0, r0, r2
   d5a8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5a90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5a94:	f141 0100 	adc.w	r1, r1, #0
   d5a98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5a9c:	bf08      	it	eq
   d5a9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5aa2:	bd70      	pop	{r4, r5, r6, pc}
   d5aa4:	f1c4 0520 	rsb	r5, r4, #32
   d5aa8:	fa00 f205 	lsl.w	r2, r0, r5
   d5aac:	ea4e 0e02 	orr.w	lr, lr, r2
   d5ab0:	fa20 f304 	lsr.w	r3, r0, r4
   d5ab4:	fa01 f205 	lsl.w	r2, r1, r5
   d5ab8:	ea43 0302 	orr.w	r3, r3, r2
   d5abc:	fa21 f004 	lsr.w	r0, r1, r4
   d5ac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ac4:	fa21 f204 	lsr.w	r2, r1, r4
   d5ac8:	ea20 0002 	bic.w	r0, r0, r2
   d5acc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5ad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ad4:	bf08      	it	eq
   d5ad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5ada:	bd70      	pop	{r4, r5, r6, pc}
   d5adc:	f094 0f00 	teq	r4, #0
   d5ae0:	d10f      	bne.n	d5b02 <__aeabi_dmul+0x1c2>
   d5ae2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5ae6:	0040      	lsls	r0, r0, #1
   d5ae8:	eb41 0101 	adc.w	r1, r1, r1
   d5aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5af0:	bf08      	it	eq
   d5af2:	3c01      	subeq	r4, #1
   d5af4:	d0f7      	beq.n	d5ae6 <__aeabi_dmul+0x1a6>
   d5af6:	ea41 0106 	orr.w	r1, r1, r6
   d5afa:	f095 0f00 	teq	r5, #0
   d5afe:	bf18      	it	ne
   d5b00:	4770      	bxne	lr
   d5b02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5b06:	0052      	lsls	r2, r2, #1
   d5b08:	eb43 0303 	adc.w	r3, r3, r3
   d5b0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5b10:	bf08      	it	eq
   d5b12:	3d01      	subeq	r5, #1
   d5b14:	d0f7      	beq.n	d5b06 <__aeabi_dmul+0x1c6>
   d5b16:	ea43 0306 	orr.w	r3, r3, r6
   d5b1a:	4770      	bx	lr
   d5b1c:	ea94 0f0c 	teq	r4, ip
   d5b20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5b24:	bf18      	it	ne
   d5b26:	ea95 0f0c 	teqne	r5, ip
   d5b2a:	d00c      	beq.n	d5b46 <__aeabi_dmul+0x206>
   d5b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5b30:	bf18      	it	ne
   d5b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5b36:	d1d1      	bne.n	d5adc <__aeabi_dmul+0x19c>
   d5b38:	ea81 0103 	eor.w	r1, r1, r3
   d5b3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5b40:	f04f 0000 	mov.w	r0, #0
   d5b44:	bd70      	pop	{r4, r5, r6, pc}
   d5b46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5b4a:	bf06      	itte	eq
   d5b4c:	4610      	moveq	r0, r2
   d5b4e:	4619      	moveq	r1, r3
   d5b50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5b54:	d019      	beq.n	d5b8a <__aeabi_dmul+0x24a>
   d5b56:	ea94 0f0c 	teq	r4, ip
   d5b5a:	d102      	bne.n	d5b62 <__aeabi_dmul+0x222>
   d5b5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5b60:	d113      	bne.n	d5b8a <__aeabi_dmul+0x24a>
   d5b62:	ea95 0f0c 	teq	r5, ip
   d5b66:	d105      	bne.n	d5b74 <__aeabi_dmul+0x234>
   d5b68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5b6c:	bf1c      	itt	ne
   d5b6e:	4610      	movne	r0, r2
   d5b70:	4619      	movne	r1, r3
   d5b72:	d10a      	bne.n	d5b8a <__aeabi_dmul+0x24a>
   d5b74:	ea81 0103 	eor.w	r1, r1, r3
   d5b78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5b7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5b80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5b84:	f04f 0000 	mov.w	r0, #0
   d5b88:	bd70      	pop	{r4, r5, r6, pc}
   d5b8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5b8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5b92:	bd70      	pop	{r4, r5, r6, pc}

000d5b94 <__aeabi_ddiv>:
   d5b94:	b570      	push	{r4, r5, r6, lr}
   d5b96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5b9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5b9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5ba2:	bf1d      	ittte	ne
   d5ba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5ba8:	ea94 0f0c 	teqne	r4, ip
   d5bac:	ea95 0f0c 	teqne	r5, ip
   d5bb0:	f000 f8a7 	bleq	d5d02 <__aeabi_ddiv+0x16e>
   d5bb4:	eba4 0405 	sub.w	r4, r4, r5
   d5bb8:	ea81 0e03 	eor.w	lr, r1, r3
   d5bbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5bc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5bc4:	f000 8088 	beq.w	d5cd8 <__aeabi_ddiv+0x144>
   d5bc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5bcc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5bd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5bd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5bd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5bdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5be0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5be4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5be8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5bec:	429d      	cmp	r5, r3
   d5bee:	bf08      	it	eq
   d5bf0:	4296      	cmpeq	r6, r2
   d5bf2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5bf6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5bfa:	d202      	bcs.n	d5c02 <__aeabi_ddiv+0x6e>
   d5bfc:	085b      	lsrs	r3, r3, #1
   d5bfe:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c02:	1ab6      	subs	r6, r6, r2
   d5c04:	eb65 0503 	sbc.w	r5, r5, r3
   d5c08:	085b      	lsrs	r3, r3, #1
   d5c0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5c12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5c16:	ebb6 0e02 	subs.w	lr, r6, r2
   d5c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5c1e:	bf22      	ittt	cs
   d5c20:	1ab6      	subcs	r6, r6, r2
   d5c22:	4675      	movcs	r5, lr
   d5c24:	ea40 000c 	orrcs.w	r0, r0, ip
   d5c28:	085b      	lsrs	r3, r3, #1
   d5c2a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c2e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5c32:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5c36:	bf22      	ittt	cs
   d5c38:	1ab6      	subcs	r6, r6, r2
   d5c3a:	4675      	movcs	r5, lr
   d5c3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5c40:	085b      	lsrs	r3, r3, #1
   d5c42:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c46:	ebb6 0e02 	subs.w	lr, r6, r2
   d5c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5c4e:	bf22      	ittt	cs
   d5c50:	1ab6      	subcs	r6, r6, r2
   d5c52:	4675      	movcs	r5, lr
   d5c54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5c58:	085b      	lsrs	r3, r3, #1
   d5c5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5c62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5c66:	bf22      	ittt	cs
   d5c68:	1ab6      	subcs	r6, r6, r2
   d5c6a:	4675      	movcs	r5, lr
   d5c6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5c70:	ea55 0e06 	orrs.w	lr, r5, r6
   d5c74:	d018      	beq.n	d5ca8 <__aeabi_ddiv+0x114>
   d5c76:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5c7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5c7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5c82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5c86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5c8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5c8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5c92:	d1c0      	bne.n	d5c16 <__aeabi_ddiv+0x82>
   d5c94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5c98:	d10b      	bne.n	d5cb2 <__aeabi_ddiv+0x11e>
   d5c9a:	ea41 0100 	orr.w	r1, r1, r0
   d5c9e:	f04f 0000 	mov.w	r0, #0
   d5ca2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5ca6:	e7b6      	b.n	d5c16 <__aeabi_ddiv+0x82>
   d5ca8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5cac:	bf04      	itt	eq
   d5cae:	4301      	orreq	r1, r0
   d5cb0:	2000      	moveq	r0, #0
   d5cb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5cb6:	bf88      	it	hi
   d5cb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5cbc:	f63f aeaf 	bhi.w	d5a1e <__aeabi_dmul+0xde>
   d5cc0:	ebb5 0c03 	subs.w	ip, r5, r3
   d5cc4:	bf04      	itt	eq
   d5cc6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5cca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5cce:	f150 0000 	adcs.w	r0, r0, #0
   d5cd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5cd6:	bd70      	pop	{r4, r5, r6, pc}
   d5cd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5cdc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5ce0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5ce4:	bfc2      	ittt	gt
   d5ce6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5cea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5cee:	bd70      	popgt	{r4, r5, r6, pc}
   d5cf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5cf4:	f04f 0e00 	mov.w	lr, #0
   d5cf8:	3c01      	subs	r4, #1
   d5cfa:	e690      	b.n	d5a1e <__aeabi_dmul+0xde>
   d5cfc:	ea45 0e06 	orr.w	lr, r5, r6
   d5d00:	e68d      	b.n	d5a1e <__aeabi_dmul+0xde>
   d5d02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d06:	ea94 0f0c 	teq	r4, ip
   d5d0a:	bf08      	it	eq
   d5d0c:	ea95 0f0c 	teqeq	r5, ip
   d5d10:	f43f af3b 	beq.w	d5b8a <__aeabi_dmul+0x24a>
   d5d14:	ea94 0f0c 	teq	r4, ip
   d5d18:	d10a      	bne.n	d5d30 <__aeabi_ddiv+0x19c>
   d5d1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5d1e:	f47f af34 	bne.w	d5b8a <__aeabi_dmul+0x24a>
   d5d22:	ea95 0f0c 	teq	r5, ip
   d5d26:	f47f af25 	bne.w	d5b74 <__aeabi_dmul+0x234>
   d5d2a:	4610      	mov	r0, r2
   d5d2c:	4619      	mov	r1, r3
   d5d2e:	e72c      	b.n	d5b8a <__aeabi_dmul+0x24a>
   d5d30:	ea95 0f0c 	teq	r5, ip
   d5d34:	d106      	bne.n	d5d44 <__aeabi_ddiv+0x1b0>
   d5d36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5d3a:	f43f aefd 	beq.w	d5b38 <__aeabi_dmul+0x1f8>
   d5d3e:	4610      	mov	r0, r2
   d5d40:	4619      	mov	r1, r3
   d5d42:	e722      	b.n	d5b8a <__aeabi_dmul+0x24a>
   d5d44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d48:	bf18      	it	ne
   d5d4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d4e:	f47f aec5 	bne.w	d5adc <__aeabi_dmul+0x19c>
   d5d52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5d56:	f47f af0d 	bne.w	d5b74 <__aeabi_dmul+0x234>
   d5d5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5d5e:	f47f aeeb 	bne.w	d5b38 <__aeabi_dmul+0x1f8>
   d5d62:	e712      	b.n	d5b8a <__aeabi_dmul+0x24a>

000d5d64 <__gedf2>:
   d5d64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d5d68:	e006      	b.n	d5d78 <__cmpdf2+0x4>
   d5d6a:	bf00      	nop

000d5d6c <__ledf2>:
   d5d6c:	f04f 0c01 	mov.w	ip, #1
   d5d70:	e002      	b.n	d5d78 <__cmpdf2+0x4>
   d5d72:	bf00      	nop

000d5d74 <__cmpdf2>:
   d5d74:	f04f 0c01 	mov.w	ip, #1
   d5d78:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5d7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5d80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5d84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5d88:	bf18      	it	ne
   d5d8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5d8e:	d01b      	beq.n	d5dc8 <__cmpdf2+0x54>
   d5d90:	b001      	add	sp, #4
   d5d92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5d96:	bf0c      	ite	eq
   d5d98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5d9c:	ea91 0f03 	teqne	r1, r3
   d5da0:	bf02      	ittt	eq
   d5da2:	ea90 0f02 	teqeq	r0, r2
   d5da6:	2000      	moveq	r0, #0
   d5da8:	4770      	bxeq	lr
   d5daa:	f110 0f00 	cmn.w	r0, #0
   d5dae:	ea91 0f03 	teq	r1, r3
   d5db2:	bf58      	it	pl
   d5db4:	4299      	cmppl	r1, r3
   d5db6:	bf08      	it	eq
   d5db8:	4290      	cmpeq	r0, r2
   d5dba:	bf2c      	ite	cs
   d5dbc:	17d8      	asrcs	r0, r3, #31
   d5dbe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5dc2:	f040 0001 	orr.w	r0, r0, #1
   d5dc6:	4770      	bx	lr
   d5dc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5dcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5dd0:	d102      	bne.n	d5dd8 <__cmpdf2+0x64>
   d5dd2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5dd6:	d107      	bne.n	d5de8 <__cmpdf2+0x74>
   d5dd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5ddc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5de0:	d1d6      	bne.n	d5d90 <__cmpdf2+0x1c>
   d5de2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5de6:	d0d3      	beq.n	d5d90 <__cmpdf2+0x1c>
   d5de8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5dec:	4770      	bx	lr
   d5dee:	bf00      	nop

000d5df0 <__aeabi_cdrcmple>:
   d5df0:	4684      	mov	ip, r0
   d5df2:	4610      	mov	r0, r2
   d5df4:	4662      	mov	r2, ip
   d5df6:	468c      	mov	ip, r1
   d5df8:	4619      	mov	r1, r3
   d5dfa:	4663      	mov	r3, ip
   d5dfc:	e000      	b.n	d5e00 <__aeabi_cdcmpeq>
   d5dfe:	bf00      	nop

000d5e00 <__aeabi_cdcmpeq>:
   d5e00:	b501      	push	{r0, lr}
   d5e02:	f7ff ffb7 	bl	d5d74 <__cmpdf2>
   d5e06:	2800      	cmp	r0, #0
   d5e08:	bf48      	it	mi
   d5e0a:	f110 0f00 	cmnmi.w	r0, #0
   d5e0e:	bd01      	pop	{r0, pc}

000d5e10 <__aeabi_dcmpeq>:
   d5e10:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e14:	f7ff fff4 	bl	d5e00 <__aeabi_cdcmpeq>
   d5e18:	bf0c      	ite	eq
   d5e1a:	2001      	moveq	r0, #1
   d5e1c:	2000      	movne	r0, #0
   d5e1e:	f85d fb08 	ldr.w	pc, [sp], #8
   d5e22:	bf00      	nop

000d5e24 <__aeabi_dcmplt>:
   d5e24:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e28:	f7ff ffea 	bl	d5e00 <__aeabi_cdcmpeq>
   d5e2c:	bf34      	ite	cc
   d5e2e:	2001      	movcc	r0, #1
   d5e30:	2000      	movcs	r0, #0
   d5e32:	f85d fb08 	ldr.w	pc, [sp], #8
   d5e36:	bf00      	nop

000d5e38 <__aeabi_dcmple>:
   d5e38:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e3c:	f7ff ffe0 	bl	d5e00 <__aeabi_cdcmpeq>
   d5e40:	bf94      	ite	ls
   d5e42:	2001      	movls	r0, #1
   d5e44:	2000      	movhi	r0, #0
   d5e46:	f85d fb08 	ldr.w	pc, [sp], #8
   d5e4a:	bf00      	nop

000d5e4c <__aeabi_dcmpge>:
   d5e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e50:	f7ff ffce 	bl	d5df0 <__aeabi_cdrcmple>
   d5e54:	bf94      	ite	ls
   d5e56:	2001      	movls	r0, #1
   d5e58:	2000      	movhi	r0, #0
   d5e5a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5e5e:	bf00      	nop

000d5e60 <__aeabi_dcmpgt>:
   d5e60:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e64:	f7ff ffc4 	bl	d5df0 <__aeabi_cdrcmple>
   d5e68:	bf34      	ite	cc
   d5e6a:	2001      	movcc	r0, #1
   d5e6c:	2000      	movcs	r0, #0
   d5e6e:	f85d fb08 	ldr.w	pc, [sp], #8
   d5e72:	bf00      	nop

000d5e74 <__aeabi_dcmpun>:
   d5e74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5e78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e7c:	d102      	bne.n	d5e84 <__aeabi_dcmpun+0x10>
   d5e7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5e82:	d10a      	bne.n	d5e9a <__aeabi_dcmpun+0x26>
   d5e84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e8c:	d102      	bne.n	d5e94 <__aeabi_dcmpun+0x20>
   d5e8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5e92:	d102      	bne.n	d5e9a <__aeabi_dcmpun+0x26>
   d5e94:	f04f 0000 	mov.w	r0, #0
   d5e98:	4770      	bx	lr
   d5e9a:	f04f 0001 	mov.w	r0, #1
   d5e9e:	4770      	bx	lr

000d5ea0 <__aeabi_d2iz>:
   d5ea0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5ea4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5ea8:	d215      	bcs.n	d5ed6 <__aeabi_d2iz+0x36>
   d5eaa:	d511      	bpl.n	d5ed0 <__aeabi_d2iz+0x30>
   d5eac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5eb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5eb4:	d912      	bls.n	d5edc <__aeabi_d2iz+0x3c>
   d5eb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5ebe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5ec2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5ec6:	fa23 f002 	lsr.w	r0, r3, r2
   d5eca:	bf18      	it	ne
   d5ecc:	4240      	negne	r0, r0
   d5ece:	4770      	bx	lr
   d5ed0:	f04f 0000 	mov.w	r0, #0
   d5ed4:	4770      	bx	lr
   d5ed6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5eda:	d105      	bne.n	d5ee8 <__aeabi_d2iz+0x48>
   d5edc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5ee0:	bf08      	it	eq
   d5ee2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5ee6:	4770      	bx	lr
   d5ee8:	f04f 0000 	mov.w	r0, #0
   d5eec:	4770      	bx	lr
   d5eee:	bf00      	nop

000d5ef0 <__aeabi_d2uiz>:
   d5ef0:	004a      	lsls	r2, r1, #1
   d5ef2:	d211      	bcs.n	d5f18 <__aeabi_d2uiz+0x28>
   d5ef4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5ef8:	d211      	bcs.n	d5f1e <__aeabi_d2uiz+0x2e>
   d5efa:	d50d      	bpl.n	d5f18 <__aeabi_d2uiz+0x28>
   d5efc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f04:	d40e      	bmi.n	d5f24 <__aeabi_d2uiz+0x34>
   d5f06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5f12:	fa23 f002 	lsr.w	r0, r3, r2
   d5f16:	4770      	bx	lr
   d5f18:	f04f 0000 	mov.w	r0, #0
   d5f1c:	4770      	bx	lr
   d5f1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5f22:	d102      	bne.n	d5f2a <__aeabi_d2uiz+0x3a>
   d5f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5f28:	4770      	bx	lr
   d5f2a:	f04f 0000 	mov.w	r0, #0
   d5f2e:	4770      	bx	lr

000d5f30 <__cxa_atexit>:
   d5f30:	b510      	push	{r4, lr}
   d5f32:	4c05      	ldr	r4, [pc, #20]	; (d5f48 <__cxa_atexit+0x18>)
   d5f34:	4613      	mov	r3, r2
   d5f36:	b12c      	cbz	r4, d5f44 <__cxa_atexit+0x14>
   d5f38:	460a      	mov	r2, r1
   d5f3a:	4601      	mov	r1, r0
   d5f3c:	2002      	movs	r0, #2
   d5f3e:	f3af 8000 	nop.w
   d5f42:	bd10      	pop	{r4, pc}
   d5f44:	4620      	mov	r0, r4
   d5f46:	e7fc      	b.n	d5f42 <__cxa_atexit+0x12>
   d5f48:	00000000 	.word	0x00000000

000d5f4c <memcpy>:
   d5f4c:	440a      	add	r2, r1
   d5f4e:	4291      	cmp	r1, r2
   d5f50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d5f54:	d100      	bne.n	d5f58 <memcpy+0xc>
   d5f56:	4770      	bx	lr
   d5f58:	b510      	push	{r4, lr}
   d5f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5f62:	4291      	cmp	r1, r2
   d5f64:	d1f9      	bne.n	d5f5a <memcpy+0xe>
   d5f66:	bd10      	pop	{r4, pc}

000d5f68 <memset>:
   d5f68:	4402      	add	r2, r0
   d5f6a:	4603      	mov	r3, r0
   d5f6c:	4293      	cmp	r3, r2
   d5f6e:	d100      	bne.n	d5f72 <memset+0xa>
   d5f70:	4770      	bx	lr
   d5f72:	f803 1b01 	strb.w	r1, [r3], #1
   d5f76:	e7f9      	b.n	d5f6c <memset+0x4>

000d5f78 <srand>:
   d5f78:	b538      	push	{r3, r4, r5, lr}
   d5f7a:	4b0d      	ldr	r3, [pc, #52]	; (d5fb0 <srand+0x38>)
   d5f7c:	681d      	ldr	r5, [r3, #0]
   d5f7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5f80:	4604      	mov	r4, r0
   d5f82:	b97b      	cbnz	r3, d5fa4 <srand+0x2c>
   d5f84:	2018      	movs	r0, #24
   d5f86:	f7fe fd1f 	bl	d49c8 <malloc>
   d5f8a:	4a0a      	ldr	r2, [pc, #40]	; (d5fb4 <srand+0x3c>)
   d5f8c:	4b0a      	ldr	r3, [pc, #40]	; (d5fb8 <srand+0x40>)
   d5f8e:	63a8      	str	r0, [r5, #56]	; 0x38
   d5f90:	e9c0 2300 	strd	r2, r3, [r0]
   d5f94:	4b09      	ldr	r3, [pc, #36]	; (d5fbc <srand+0x44>)
   d5f96:	6083      	str	r3, [r0, #8]
   d5f98:	230b      	movs	r3, #11
   d5f9a:	8183      	strh	r3, [r0, #12]
   d5f9c:	2201      	movs	r2, #1
   d5f9e:	2300      	movs	r3, #0
   d5fa0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5fa4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5fa6:	2200      	movs	r2, #0
   d5fa8:	611c      	str	r4, [r3, #16]
   d5faa:	615a      	str	r2, [r3, #20]
   d5fac:	bd38      	pop	{r3, r4, r5, pc}
   d5fae:	bf00      	nop
   d5fb0:	2003e598 	.word	0x2003e598
   d5fb4:	abcd330e 	.word	0xabcd330e
   d5fb8:	e66d1234 	.word	0xe66d1234
   d5fbc:	0005deec 	.word	0x0005deec

000d5fc0 <strlen>:
   d5fc0:	4603      	mov	r3, r0
   d5fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5fc6:	2a00      	cmp	r2, #0
   d5fc8:	d1fb      	bne.n	d5fc2 <strlen+0x2>
   d5fca:	1a18      	subs	r0, r3, r0
   d5fcc:	3801      	subs	r0, #1
   d5fce:	4770      	bx	lr

000d5fd0 <dynalib_user>:
   d5fd0:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5fe0:	0000 0000 4844 3154 2031 6574 7473 4600     ....DHT11 test.F
   d5ff0:	6961 656c 2064 6f74 7220 6165 2064 7266     ailed to read fr
   d6000:	6d6f 4420 5448 7320 6e65 6f73 0072 0000     om DHT sensor...

000d6010 <_ZTVN5spark13CellularClassE>:
	...
   d6018:	4aa7 000d 4a9d 000d 4a93 000d 4a49 000d     .J...J...J..IJ..
   d6028:	4a87 000d 4a7b 000d 4d1d 000d 4d25 000d     .J..{J...M..%M..
   d6038:	4a6f 000d 4a67 000d 4a5d 000d 4a53 000d     oJ..gJ..]J..SJ..
   d6048:	4d55 000d                                   UM..

000d604c <_ZTVN5spark13EthernetClassE>:
	...
   d6054:	4b3f 000d 4b35 000d 4b2b 000d 4b21 000d     ?K..5K..+K..!K..
   d6064:	4b15 000d 4b09 000d 4d1d 000d 4d25 000d     .K...K...M..%M..
   d6074:	4afd 000d 4af5 000d 4aeb 000d 4ae1 000d     .J...J...J...J..
   d6084:	4d55 000d                                   UM..

000d6088 <_ZTV7TwoWire>:
	...
   d6090:	4b5d 000d 4ba7 000d 4b7f 000d 4b5f 000d     ]K...K...K.._K..
   d60a0:	4b87 000d 4b8f 000d 4b97 000d 4b9f 000d     .K...K...K...K..

000d60b0 <_ZTV9IPAddress>:
	...
   d60b8:	4bf1 000d 4be1 000d 4be3 000d 7061 0070     .K...K...K..app.

000d60c8 <_ZTVN5spark12NetworkClassE>:
	...
   d60d0:	4cdd 000d 4ce7 000d 4cf1 000d 4cfb 000d     .L...L...L...L..
   d60e0:	4d05 000d 4d11 000d 4d1d 000d 4d25 000d     .M...M...M..%M..
   d60f0:	4d2d 000d 4d39 000d 4d41 000d 4d4b 000d     -M..9M..AM..KM..
   d6100:	4d55 000d 616e 006e 6e69 0066 766f 0066     UM..nan.inf.ovf.
   d6110:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   d6120:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d6130 <_ZTV11USARTSerial>:
	...
   d6138:	5165 000d 51d1 000d 51a9 000d 4e49 000d     eQ...Q...Q..IN..
   d6148:	5179 000d 5195 000d 5187 000d 51a3 000d     yQ...Q...Q...Q..
   d6158:	5167 000d 516b 000d                         gQ..kQ..

000d6160 <_ZTV9USBSerial>:
	...
   d6168:	5265 000d 52cd 000d 52a3 000d 4e49 000d     eR...R...R..IN..
   d6178:	5295 000d 5267 000d 5277 000d 52c7 000d     .R..gR..wR...R..
   d6188:	5287 000d 5261 000d                         .R..aR..

000d6190 <_ZSt7nothrow>:
	...

000d6191 <link_const_variable_data_end>:
   d6191:	00          	.byte	0x00
	...

000d6194 <link_constructors_location>:
   d6194:	000d4175 	.word	0x000d4175
   d6198:	000d4a21 	.word	0x000d4a21
   d619c:	000d4ab1 	.word	0x000d4ab1
   d61a0:	000d4b49 	.word	0x000d4b49
   d61a4:	000d4ccd 	.word	0x000d4ccd
   d61a8:	000d4e35 	.word	0x000d4e35
   d61ac:	000d50c5 	.word	0x000d50c5
   d61b0:	000d5115 	.word	0x000d5115
   d61b4:	000d5151 	.word	0x000d5151

000d61b8 <link_constructors_end>:
	...
