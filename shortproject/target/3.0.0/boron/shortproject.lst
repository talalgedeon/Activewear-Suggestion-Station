
/Users/talalagedeon/Desktop/particlePDP/shortproject/target/3.0.0/boron/shortproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009140  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dd160  000dd160  0000d160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dd168  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  2003e240  000dd16c  0001e240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003c8  2003e428  2003e428  0002e428  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000dd354  000dd354  0002d354  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dd37c  000dd37c  0002d37c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0028341e  00000000  00000000  0002d380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00024c61  00000000  00000000  002b079e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00046ff4  00000000  00000000  002d53ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003670  00000000  00000000  0031c3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000b970  00000000  00000000  0031fa63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000467e5  00000000  00000000  0032b3d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005d187  00000000  00000000  00371bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00142dcf  00000000  00000000  003ced3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000a6c0  00000000  00000000  00511b10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 f9c3 	bl	da3bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 f9e5 	bl	da40c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e240 	.word	0x2003e240
   d404c:	000dd16c 	.word	0x000dd16c
   d4050:	2003e428 	.word	0x2003e428
   d4054:	2003e428 	.word	0x2003e428
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 f855 	bl	d9110 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dd11c 	.word	0x000dd11c
   d4080:	000dd154 	.word	0x000dd154

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82e 	b.w	d40e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9cf 	bl	d442c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bfff 	b.w	d9094 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bf83 	b.w	d6fa0 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bf81 	b.w	d6fa0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bf87 	b.w	d6fb0 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f002 bf85 	b.w	d6fb0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40b6:	b40e      	push	{r1, r2, r3}
   d40b8:	b510      	push	{r4, lr}
   d40ba:	b08d      	sub	sp, #52	; 0x34
   d40bc:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d40be:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d40c0:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d40c4:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40c6:	2300      	movs	r3, #0
   d40c8:	2020      	movs	r0, #32
   d40ca:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40ce:	e9cd 4200 	strd	r4, r2, [sp]
   d40d2:	201e      	movs	r0, #30
   d40d4:	aa04      	add	r2, sp, #16
   d40d6:	f002 fe97 	bl	d6e08 <log_message_v>
}
   d40da:	b00d      	add	sp, #52	; 0x34
   d40dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40e0:	b003      	add	sp, #12
   d40e2:	4770      	bx	lr

000d40e4 <setup>:

double outHeatIndex = outdoorHeatIndex (tempOutdoor, humidityOutdoor);



void setup() {
   d40e4:	b510      	push	{r4, lr}
   d40e6:	b08a      	sub	sp, #40	; 0x28
  Serial.begin(9600);
   d40e8:	f004 ff4c 	bl	d8f84 <_Z16_fetch_usbserialv>
   d40ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40f0:	f004 ff3c 	bl	d8f6c <_ZN9USBSerial5beginEl>
  Serial.println("Active Wear Station"); 
   d40f4:	f004 ff46 	bl	d8f84 <_Z16_fetch_usbserialv>
   d40f8:	492c      	ldr	r1, [pc, #176]	; (d41ac <setup+0xc8>)
  leds.init();

  Wire.begin();

  // initialize display library
  SeeedOled.init(); 
   d40fa:	4c2d      	ldr	r4, [pc, #180]	; (d41b0 <setup+0xcc>)
  Serial.println("Active Wear Station"); 
   d40fc:	f003 ff3f 	bl	d7f7e <_ZN5Print7printlnEPKc>
  dht.begin();
   d4100:	482c      	ldr	r0, [pc, #176]	; (d41b4 <setup+0xd0>)
   d4102:	f000 fbf3 	bl	d48ec <_ZN3DHT5beginEv>
  leds.init();
   d4106:	482c      	ldr	r0, [pc, #176]	; (d41b8 <setup+0xd4>)
   d4108:	f000 fed4 	bl	d4eb4 <_ZN12ChainableLED4initEv>
  Wire.begin();
   d410c:	f005 f8b2 	bl	d9274 <_Z19__fetch_global_Wirev>
   d4110:	f003 fb30 	bl	d7774 <_ZN7TwoWire5beginEv>
  SeeedOled.init(); 
   d4114:	4620      	mov	r0, r4
   d4116:	f000 ff03 	bl	d4f20 <_ZN9SeeedOLED4initEv>

// Clearing display
  SeeedOled.clearDisplay();
   d411a:	4620      	mov	r0, r4
   d411c:	f000 ff62 	bl	d4fe4 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d4120:	4620      	mov	r0, r4
   d4122:	f000 ffc4 	bl	d50ae <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d4126:	4620      	mov	r0, r4
   d4128:	f000 ff0c 	bl	d4f44 <_ZN9SeeedOLED11setPageModeEv>

// Adding Active Wear Station at setup
  SeeedOled.setTextXY(2, 0);
   d412c:	2200      	movs	r2, #0
   d412e:	4620      	mov	r0, r4
   d4130:	2102      	movs	r1, #2
   d4132:	f000 ff12 	bl	d4f5a <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Active");
   d4136:	4620      	mov	r0, r4
   d4138:	4920      	ldr	r1, [pc, #128]	; (d41bc <setup+0xd8>)
   d413a:	f000 ff74 	bl	d5026 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d413e:	2200      	movs	r2, #0
   d4140:	4620      	mov	r0, r4
   d4142:	2103      	movs	r1, #3
   d4144:	f000 ff09 	bl	d4f5a <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Wear");
   d4148:	4620      	mov	r0, r4
   d414a:	491d      	ldr	r1, [pc, #116]	; (d41c0 <setup+0xdc>)
   d414c:	f000 ff6b 	bl	d5026 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4150:	2200      	movs	r2, #0
   d4152:	4620      	mov	r0, r4
   d4154:	2104      	movs	r1, #4
   d4156:	f000 ff00 	bl	d4f5a <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Suggestion");
   d415a:	4620      	mov	r0, r4
   d415c:	4919      	ldr	r1, [pc, #100]	; (d41c4 <setup+0xe0>)
   d415e:	f000 ff62 	bl	d5026 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4162:	2200      	movs	r2, #0
   d4164:	4620      	mov	r0, r4
   d4166:	2104      	movs	r1, #4
   d4168:	f000 fef7 	bl	d4f5a <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Station");
   d416c:	4916      	ldr	r1, [pc, #88]	; (d41c8 <setup+0xe4>)
   d416e:	4620      	mov	r0, r4
   d4170:	f000 ff59 	bl	d5026 <_ZN9SeeedOLED9putStringEPKc>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4174:	a802      	add	r0, sp, #8
   d4176:	f002 fe93 	bl	d6ea0 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d417a:	a902      	add	r1, sp, #8
   d417c:	a806      	add	r0, sp, #24
   d417e:	f003 fffd 	bl	d817c <_ZN6StringC1ERKS_>

// Subscribing to GetWeatherForecast webhook
  Particle.subscribe(System.deviceID() + "/GetWeatherForecast/", setCurrentWeather, MY_DEVICES);
   d4182:	4912      	ldr	r1, [pc, #72]	; (d41cc <setup+0xe8>)
   d4184:	a806      	add	r0, sp, #24
   d4186:	f004 f841 	bl	d820c <_ZplRK15StringSumHelperPKc>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d418a:	2300      	movs	r3, #0
   d418c:	e9cd 3300 	strd	r3, r3, [sp]
   d4190:	490f      	ldr	r1, [pc, #60]	; (d41d0 <setup+0xec>)
   d4192:	6800      	ldr	r0, [r0, #0]
   d4194:	461a      	mov	r2, r3
   d4196:	f002 fe93 	bl	d6ec0 <spark_subscribe>
class StringSumHelper : public String
   d419a:	a806      	add	r0, sp, #24
   d419c:	f003 ff94 	bl	d80c8 <_ZN6StringD1Ev>
   d41a0:	a802      	add	r0, sp, #8
   d41a2:	f003 ff91 	bl	d80c8 <_ZN6StringD1Ev>
}
   d41a6:	b00a      	add	sp, #40	; 0x28
   d41a8:	bd10      	pop	{r4, pc}
   d41aa:	bf00      	nop
   d41ac:	000dc24c 	.word	0x000dc24c
   d41b0:	2003e480 	.word	0x2003e480
   d41b4:	2003e430 	.word	0x2003e430
   d41b8:	2003e454 	.word	0x2003e454
   d41bc:	000dc260 	.word	0x000dc260
   d41c0:	000dc267 	.word	0x000dc267
   d41c4:	000dc26c 	.word	0x000dc26c
   d41c8:	000dc258 	.word	0x000dc258
   d41cc:	000dc277 	.word	0x000dc277
   d41d0:	000d466d 	.word	0x000d466d

000d41d4 <_Z13updateDisplayiidd>:
        }
    }}

// Updating OLED Display
void updateDisplay (int temp, int humidity, double indoorHeatIndex , double outdoorHeatIndex)
{
   d41d4:	b538      	push	{r3, r4, r5, lr}

// Clearing Display before updating
  SeeedOled.clearDisplay(), 
   d41d6:	4c19      	ldr	r4, [pc, #100]	; (d423c <_Z13updateDisplayiidd+0x68>)
  // SeeedOled.putString("%");

  SeeedOled.setTextXY(1, 0);
  SeeedOled.putString("In Index:");
  SeeedOled.putNumber(heatIndex);
  SeeedOled.putString("F");
   d41d8:	4d19      	ldr	r5, [pc, #100]	; (d4240 <_Z13updateDisplayiidd+0x6c>)
  SeeedOled.clearDisplay(), 
   d41da:	4620      	mov	r0, r4
   d41dc:	f000 ff02 	bl	d4fe4 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setTextXY(1, 0);
   d41e0:	2200      	movs	r2, #0
   d41e2:	4620      	mov	r0, r4
   d41e4:	2101      	movs	r1, #1
   d41e6:	f000 feb8 	bl	d4f5a <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("In Index:");
   d41ea:	4620      	mov	r0, r4
   d41ec:	4915      	ldr	r1, [pc, #84]	; (d4244 <_Z13updateDisplayiidd+0x70>)
   d41ee:	f000 ff1a 	bl	d5026 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(heatIndex);
   d41f2:	4b15      	ldr	r3, [pc, #84]	; (d4248 <_Z13updateDisplayiidd+0x74>)
   d41f4:	e9d3 0100 	ldrd	r0, r1, [r3]
   d41f8:	f005 fe94 	bl	d9f24 <__aeabi_d2iz>
   d41fc:	4601      	mov	r1, r0
   d41fe:	4620      	mov	r0, r4
   d4200:	f000 ff1e 	bl	d5040 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("F");
   d4204:	4629      	mov	r1, r5
   d4206:	4620      	mov	r0, r4
   d4208:	f000 ff0d 	bl	d5026 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(2, 0);
   d420c:	2200      	movs	r2, #0
   d420e:	4620      	mov	r0, r4
   d4210:	2102      	movs	r1, #2
   d4212:	f000 fea2 	bl	d4f5a <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Out Index:");
   d4216:	4620      	mov	r0, r4
   d4218:	490c      	ldr	r1, [pc, #48]	; (d424c <_Z13updateDisplayiidd+0x78>)
   d421a:	f000 ff04 	bl	d5026 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(outHeatIndex);
   d421e:	4b0c      	ldr	r3, [pc, #48]	; (d4250 <_Z13updateDisplayiidd+0x7c>)
   d4220:	e9d3 0100 	ldrd	r0, r1, [r3]
   d4224:	f005 fe7e 	bl	d9f24 <__aeabi_d2iz>
   d4228:	4601      	mov	r1, r0
   d422a:	4620      	mov	r0, r4
   d422c:	f000 ff08 	bl	d5040 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("F");
   d4230:	4629      	mov	r1, r5
   d4232:	4620      	mov	r0, r4
  // SeeedOled.putString("No");




}
   d4234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SeeedOled.putString("F");
   d4238:	f000 bef5 	b.w	d5026 <_ZN9SeeedOLED9putStringEPKc>
   d423c:	2003e480 	.word	0x2003e480
   d4240:	000dc296 	.word	0x000dc296
   d4244:	000dc28c 	.word	0x000dc28c
   d4248:	2003e448 	.word	0x2003e448
   d424c:	000dc298 	.word	0x000dc298
   d4250:	2003e460 	.word	0x2003e460
   d4254:	00000000 	.word	0x00000000

000d4258 <_Z16outdoorHeatIndexff>:

  return heatIndex;
}   

// Outdoor heat index equation
double outdoorHeatIndex (float tempOutdoor, float humidityOutdoor) {
   d4258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const double c6 = -0.05481717;
    const double c7 = 0.00122874;
    const double c8 = 0.00085282;
    const double c9 = -0.00000199;

    double outHeatIndex = c1 + (c2 * tempOutdoor) +
   d425c:	ee10 0a10 	vmov	r0, s0
double outdoorHeatIndex (float tempOutdoor, float humidityOutdoor) {
   d4260:	ed2d 8b02 	vpush	{d8}
   d4264:	eeb0 8a60 	vmov.f32	s16, s1
   d4268:	eef0 8a40 	vmov.f32	s17, s0
    double outHeatIndex = c1 + (c2 * tempOutdoor) +
   d426c:	f005 fb68 	bl	d9940 <__aeabi_f2d>
   d4270:	4606      	mov	r6, r0
                           (c3 * humidityOutdoor) +
   d4272:	ee18 0a10 	vmov	r0, s16
    double outHeatIndex = c1 + (c2 * tempOutdoor) +
   d4276:	460f      	mov	r7, r1
                           (c3 * humidityOutdoor) +
   d4278:	f005 fb62 	bl	d9940 <__aeabi_f2d>
                           (c4 * tempOutdoor*humidityOutdoor) + 
                           (c5 * (tempOutdoor*tempOutdoor)) +
   d427c:	ee68 7aa8 	vmul.f32	s15, s17, s17
                           (c3 * humidityOutdoor) +
   d4280:	4682      	mov	sl, r0
                           (c5 * (tempOutdoor*tempOutdoor)) +
   d4282:	ee17 0a90 	vmov	r0, s15
                           (c3 * humidityOutdoor) +
   d4286:	468b      	mov	fp, r1
                           (c5 * (tempOutdoor*tempOutdoor)) +
   d4288:	f005 fb5a 	bl	d9940 <__aeabi_f2d>
                           (c6 * (humidityOutdoor * humidityOutdoor)) +
   d428c:	ee68 7a08 	vmul.f32	s15, s16, s16
                           (c5 * (tempOutdoor*tempOutdoor)) +
   d4290:	4604      	mov	r4, r0
                           (c6 * (humidityOutdoor * humidityOutdoor)) +
   d4292:	ee17 0a90 	vmov	r0, s15
                           (c5 * (tempOutdoor*tempOutdoor)) +
   d4296:	460d      	mov	r5, r1
                           (c6 * (humidityOutdoor * humidityOutdoor)) +
   d4298:	f005 fb52 	bl	d9940 <__aeabi_f2d>
    double outHeatIndex = c1 + (c2 * tempOutdoor) +
   d429c:	a346      	add	r3, pc, #280	; (adr r3, d43b8 <_Z16outdoorHeatIndexff+0x160>)
   d429e:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c6 * (humidityOutdoor * humidityOutdoor)) +
   d42a2:	ec41 0b18 	vmov	d8, r0, r1
    double outHeatIndex = c1 + (c2 * tempOutdoor) +
   d42a6:	4630      	mov	r0, r6
   d42a8:	4639      	mov	r1, r7
   d42aa:	f005 fba1 	bl	d99f0 <__aeabi_dmul>
   d42ae:	a344      	add	r3, pc, #272	; (adr r3, d43c0 <_Z16outdoorHeatIndexff+0x168>)
   d42b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42b4:	f005 f9e4 	bl	d9680 <__aeabi_dsub>
                           (c3 * humidityOutdoor) +
   d42b8:	a343      	add	r3, pc, #268	; (adr r3, d43c8 <_Z16outdoorHeatIndexff+0x170>)
   d42ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    double outHeatIndex = c1 + (c2 * tempOutdoor) +
   d42be:	4680      	mov	r8, r0
   d42c0:	4689      	mov	r9, r1
                           (c3 * humidityOutdoor) +
   d42c2:	4650      	mov	r0, sl
   d42c4:	4659      	mov	r1, fp
   d42c6:	f005 fb93 	bl	d99f0 <__aeabi_dmul>
   d42ca:	4602      	mov	r2, r0
   d42cc:	460b      	mov	r3, r1
    double outHeatIndex = c1 + (c2 * tempOutdoor) +
   d42ce:	4640      	mov	r0, r8
   d42d0:	4649      	mov	r1, r9
   d42d2:	f005 f9d7 	bl	d9684 <__adddf3>
                           (c4 * tempOutdoor*humidityOutdoor) + 
   d42d6:	a33e      	add	r3, pc, #248	; (adr r3, d43d0 <_Z16outdoorHeatIndexff+0x178>)
   d42d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    double outHeatIndex = c1 + (c2 * tempOutdoor) +
   d42dc:	4680      	mov	r8, r0
   d42de:	4689      	mov	r9, r1
                           (c4 * tempOutdoor*humidityOutdoor) + 
   d42e0:	4630      	mov	r0, r6
   d42e2:	4639      	mov	r1, r7
   d42e4:	f005 fb84 	bl	d99f0 <__aeabi_dmul>
   d42e8:	4652      	mov	r2, sl
   d42ea:	465b      	mov	r3, fp
   d42ec:	f005 fb80 	bl	d99f0 <__aeabi_dmul>
   d42f0:	4602      	mov	r2, r0
   d42f2:	460b      	mov	r3, r1
                           (c3 * humidityOutdoor) +
   d42f4:	4640      	mov	r0, r8
   d42f6:	4649      	mov	r1, r9
   d42f8:	f005 f9c4 	bl	d9684 <__adddf3>
                           (c5 * (tempOutdoor*tempOutdoor)) +
   d42fc:	a336      	add	r3, pc, #216	; (adr r3, d43d8 <_Z16outdoorHeatIndexff+0x180>)
   d42fe:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c3 * humidityOutdoor) +
   d4302:	4680      	mov	r8, r0
   d4304:	4689      	mov	r9, r1
                           (c5 * (tempOutdoor*tempOutdoor)) +
   d4306:	4620      	mov	r0, r4
   d4308:	4629      	mov	r1, r5
   d430a:	f005 fb71 	bl	d99f0 <__aeabi_dmul>
   d430e:	4602      	mov	r2, r0
   d4310:	460b      	mov	r3, r1
                           (c4 * tempOutdoor*humidityOutdoor) + 
   d4312:	4640      	mov	r0, r8
   d4314:	4649      	mov	r1, r9
   d4316:	f005 f9b5 	bl	d9684 <__adddf3>
                           (c6 * (humidityOutdoor * humidityOutdoor)) +
   d431a:	a331      	add	r3, pc, #196	; (adr r3, d43e0 <_Z16outdoorHeatIndexff+0x188>)
   d431c:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c4 * tempOutdoor*humidityOutdoor) + 
   d4320:	4680      	mov	r8, r0
   d4322:	4689      	mov	r9, r1
                           (c6 * (humidityOutdoor * humidityOutdoor)) +
   d4324:	ec51 0b18 	vmov	r0, r1, d8
   d4328:	f005 fb62 	bl	d99f0 <__aeabi_dmul>
   d432c:	4602      	mov	r2, r0
   d432e:	460b      	mov	r3, r1
                           (c5 * (tempOutdoor*tempOutdoor)) +
   d4330:	4640      	mov	r0, r8
   d4332:	4649      	mov	r1, r9
   d4334:	f005 f9a6 	bl	d9684 <__adddf3>
                           (c7 * (tempOutdoor * tempOutdoor) * humidityOutdoor) + 
   d4338:	a32b      	add	r3, pc, #172	; (adr r3, d43e8 <_Z16outdoorHeatIndexff+0x190>)
   d433a:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c5 * (tempOutdoor*tempOutdoor)) +
   d433e:	4680      	mov	r8, r0
   d4340:	4689      	mov	r9, r1
                           (c7 * (tempOutdoor * tempOutdoor) * humidityOutdoor) + 
   d4342:	4620      	mov	r0, r4
   d4344:	4629      	mov	r1, r5
   d4346:	f005 fb53 	bl	d99f0 <__aeabi_dmul>
   d434a:	4652      	mov	r2, sl
   d434c:	465b      	mov	r3, fp
   d434e:	f005 fb4f 	bl	d99f0 <__aeabi_dmul>
   d4352:	4602      	mov	r2, r0
   d4354:	460b      	mov	r3, r1
                           (c6 * (humidityOutdoor * humidityOutdoor)) +
   d4356:	4640      	mov	r0, r8
   d4358:	4649      	mov	r1, r9
   d435a:	f005 f993 	bl	d9684 <__adddf3>
                           (c8 * tempOutdoor * (humidityOutdoor * humidityOutdoor)) +
   d435e:	a324      	add	r3, pc, #144	; (adr r3, d43f0 <_Z16outdoorHeatIndexff+0x198>)
   d4360:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c6 * (humidityOutdoor * humidityOutdoor)) +
   d4364:	4680      	mov	r8, r0
   d4366:	4689      	mov	r9, r1
                           (c8 * tempOutdoor * (humidityOutdoor * humidityOutdoor)) +
   d4368:	4630      	mov	r0, r6
   d436a:	4639      	mov	r1, r7
   d436c:	f005 fb40 	bl	d99f0 <__aeabi_dmul>
   d4370:	ec53 2b18 	vmov	r2, r3, d8
   d4374:	f005 fb3c 	bl	d99f0 <__aeabi_dmul>
   d4378:	4602      	mov	r2, r0
   d437a:	460b      	mov	r3, r1
                           (c7 * (tempOutdoor * tempOutdoor) * humidityOutdoor) + 
   d437c:	4640      	mov	r0, r8
   d437e:	4649      	mov	r1, r9
   d4380:	f005 f980 	bl	d9684 <__adddf3>
                           (c9 * (tempOutdoor * tempOutdoor) * (humidityOutdoor * humidityOutdoor));
   d4384:	a31c      	add	r3, pc, #112	; (adr r3, d43f8 <_Z16outdoorHeatIndexff+0x1a0>)
   d4386:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c7 * (tempOutdoor * tempOutdoor) * humidityOutdoor) + 
   d438a:	4606      	mov	r6, r0
   d438c:	460f      	mov	r7, r1
                           (c9 * (tempOutdoor * tempOutdoor) * (humidityOutdoor * humidityOutdoor));
   d438e:	4620      	mov	r0, r4
   d4390:	4629      	mov	r1, r5
   d4392:	f005 fb2d 	bl	d99f0 <__aeabi_dmul>
   d4396:	ec53 2b18 	vmov	r2, r3, d8
   d439a:	f005 fb29 	bl	d99f0 <__aeabi_dmul>
   d439e:	4602      	mov	r2, r0
   d43a0:	460b      	mov	r3, r1
    double outHeatIndex = c1 + (c2 * tempOutdoor) +
   d43a2:	4630      	mov	r0, r6
   d43a4:	4639      	mov	r1, r7
   d43a6:	f005 f96d 	bl	d9684 <__adddf3>

  return outHeatIndex;
   d43aa:	ecbd 8b02 	vpop	{d8}
   d43ae:	ec41 0b10 	vmov	d0, r0, r1
   d43b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d43b6:	bf00      	nop
   d43b8:	18ced8ec 	.word	0x18ced8ec
   d43bc:	40006462 	.word	0x40006462
   d43c0:	126e978d 	.word	0x126e978d
   d43c4:	40453083 	.word	0x40453083
   d43c8:	b75a49cd 	.word	0xb75a49cd
   d43cc:	40244962 	.word	0x40244962
   d43d0:	07c647f8 	.word	0x07c647f8
   d43d4:	bfccc4c9 	.word	0xbfccc4c9
   d43d8:	039c16cc 	.word	0x039c16cc
   d43dc:	bf7c01fc 	.word	0xbf7c01fc
   d43e0:	00d18c24 	.word	0x00d18c24
   d43e4:	bfac10ff 	.word	0xbfac10ff
   d43e8:	8760dce5 	.word	0x8760dce5
   d43ec:	3f5421b5 	.word	0x3f5421b5
   d43f0:	013330da 	.word	0x013330da
   d43f4:	3f4bf1f9 	.word	0x3f4bf1f9
   d43f8:	11d3bd01 	.word	0x11d3bd01
   d43fc:	bec0b17e 	.word	0xbec0b17e

000d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4400:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4402:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4404:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4406:	b17c      	cbz	r4, d4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4408:	6863      	ldr	r3, [r4, #4]
   d440a:	3b01      	subs	r3, #1
   d440c:	6063      	str	r3, [r4, #4]
   d440e:	b95b      	cbnz	r3, d4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4410:	6823      	ldr	r3, [r4, #0]
   d4412:	4620      	mov	r0, r4
   d4414:	689b      	ldr	r3, [r3, #8]
   d4416:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4418:	68a3      	ldr	r3, [r4, #8]
   d441a:	3b01      	subs	r3, #1
   d441c:	60a3      	str	r3, [r4, #8]
   d441e:	b91b      	cbnz	r3, d4428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4420:	6823      	ldr	r3, [r4, #0]
   d4422:	4620      	mov	r0, r4
   d4424:	68db      	ldr	r3, [r3, #12]
   d4426:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4428:	4628      	mov	r0, r5
   d442a:	bd38      	pop	{r3, r4, r5, pc}

000d442c <loop>:
void loop() {
   d442c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4430:	ed2d 8b02 	vpush	{d8}
  if (isnan(humidity) || isnan(temp)){
   d4434:	4d74      	ldr	r5, [pc, #464]	; (d4608 <loop+0x1dc>)
void loop() {
   d4436:	b088      	sub	sp, #32
  delay(50000);
   d4438:	f24c 3050 	movw	r0, #50000	; 0xc350
   d443c:	f002 fdf0 	bl	d7020 <delay>
  if (isnan(humidity) || isnan(temp)){
   d4440:	edd5 7a00 	vldr	s15, [r5]
   d4444:	eef4 7a67 	vcmp.f32	s15, s15
   d4448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d444c:	d607      	bvs.n	d445e <loop+0x32>
   d444e:	4c6f      	ldr	r4, [pc, #444]	; (d460c <loop+0x1e0>)
   d4450:	edd4 7a00 	vldr	s15, [r4]
   d4454:	eef4 7a67 	vcmp.f32	s15, s15
   d4458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d445c:	d709      	bvc.n	d4472 <loop+0x46>
    Serial.println("Failed to read from DHT sensor");
   d445e:	f004 fd91 	bl	d8f84 <_Z16_fetch_usbserialv>
   d4462:	496b      	ldr	r1, [pc, #428]	; (d4610 <loop+0x1e4>)
   d4464:	f003 fd8b 	bl	d7f7e <_ZN5Print7printlnEPKc>
}
   d4468:	b008      	add	sp, #32
   d446a:	ecbd 8b02 	vpop	{d8}
   d446e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (millis() - lastPublish >= publishPeriod) {
   d4472:	4e68      	ldr	r6, [pc, #416]	; (d4614 <loop+0x1e8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4474:	f002 fb18 	bl	d6aa8 <HAL_Timer_Get_Milli_Seconds>
   d4478:	6833      	ldr	r3, [r6, #0]
   d447a:	1ac0      	subs	r0, r0, r3
   d447c:	4b66      	ldr	r3, [pc, #408]	; (d4618 <loop+0x1ec>)
   d447e:	4298      	cmp	r0, r3
   d4480:	d90f      	bls.n	d44a2 <loop+0x76>
   d4482:	f002 fb11 	bl	d6aa8 <HAL_Timer_Get_Milli_Seconds>
   d4486:	4b65      	ldr	r3, [pc, #404]	; (d461c <loop+0x1f0>)
    lastPublish = millis();
   d4488:	6030      	str	r0, [r6, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d448a:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d448c:	f88d 3000 	strb.w	r3, [sp]
   d4490:	a804      	add	r0, sp, #16
   d4492:	4963      	ldr	r1, [pc, #396]	; (d4620 <loop+0x1f4>)
   d4494:	233c      	movs	r3, #60	; 0x3c
   d4496:	2200      	movs	r2, #0
   d4498:	f002 ff7a 	bl	d7390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d449c:	a805      	add	r0, sp, #20
   d449e:	f7ff ffaf 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (heatIndex > outHeatIndex){
   d44a2:	4e60      	ldr	r6, [pc, #384]	; (d4624 <loop+0x1f8>)
   d44a4:	4f60      	ldr	r7, [pc, #384]	; (d4628 <loop+0x1fc>)
   d44a6:	e9d6 0100 	ldrd	r0, r1, [r6]
   d44aa:	e9d7 2300 	ldrd	r2, r3, [r7]
   d44ae:	f005 fd2f 	bl	d9f10 <__aeabi_dcmpgt>
   d44b2:	b130      	cbz	r0, d44c2 <loop+0x96>
  leds.setColorRGB(0,255,0,0);
   d44b4:	2300      	movs	r3, #0
   d44b6:	485d      	ldr	r0, [pc, #372]	; (d462c <loop+0x200>)
   d44b8:	9300      	str	r3, [sp, #0]
   d44ba:	22ff      	movs	r2, #255	; 0xff
   d44bc:	4619      	mov	r1, r3
   d44be:	f000 fcb1 	bl	d4e24 <_ZN12ChainableLED11setColorRGBEhhhh>
  if (heatIndex < outHeatIndex){
   d44c2:	e9d7 2300 	ldrd	r2, r3, [r7]
   d44c6:	e9d6 0100 	ldrd	r0, r1, [r6]
   d44ca:	f005 fd03 	bl	d9ed4 <__aeabi_dcmplt>
   d44ce:	b138      	cbz	r0, d44e0 <loop+0xb4>
    leds.setColorRGB(0,0,0,255);
   d44d0:	23ff      	movs	r3, #255	; 0xff
   d44d2:	9300      	str	r3, [sp, #0]
   d44d4:	2300      	movs	r3, #0
   d44d6:	4855      	ldr	r0, [pc, #340]	; (d462c <loop+0x200>)
   d44d8:	461a      	mov	r2, r3
   d44da:	4619      	mov	r1, r3
   d44dc:	f000 fca2 	bl	d4e24 <_ZN12ChainableLED11setColorRGBEhhhh>
  updateDisplay(temp, humidity, tempOutdoor, humidityOutdoor);
   d44e0:	4f53      	ldr	r7, [pc, #332]	; (d4630 <loop+0x204>)
   d44e2:	4e54      	ldr	r6, [pc, #336]	; (d4634 <loop+0x208>)
   d44e4:	6838      	ldr	r0, [r7, #0]
   d44e6:	f8df 8170 	ldr.w	r8, [pc, #368]	; d4658 <loop+0x22c>
   d44ea:	f005 fa29 	bl	d9940 <__aeabi_f2d>
   d44ee:	ec41 0b18 	vmov	d8, r0, r1
   d44f2:	6830      	ldr	r0, [r6, #0]
   d44f4:	f005 fa24 	bl	d9940 <__aeabi_f2d>
   d44f8:	eeb0 1a48 	vmov.f32	s2, s16
   d44fc:	eef0 1a68 	vmov.f32	s3, s17
   d4500:	ed95 7a00 	vldr	s14, [r5]
   d4504:	edd4 7a00 	vldr	s15, [r4]
   d4508:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   d450c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4510:	ec41 0b10 	vmov	d0, r0, r1
   d4514:	ee17 1a10 	vmov	r1, s14
   d4518:	ee17 0a90 	vmov	r0, s15
   d451c:	f7ff fe5a 	bl	d41d4 <_Z13updateDisplayiidd>
  ubidots.add("Indoor Temp", temp);
   d4520:	ed94 0a00 	vldr	s0, [r4]
   d4524:	4944      	ldr	r1, [pc, #272]	; (d4638 <loop+0x20c>)
   d4526:	4845      	ldr	r0, [pc, #276]	; (d463c <loop+0x210>)
   d4528:	f002 fa91 	bl	d6a4e <_ZN7Ubidots3addEPcf>
  ubidots.add("Indoor Humidity", humidity);
   d452c:	ed95 0a00 	vldr	s0, [r5]
   d4530:	4943      	ldr	r1, [pc, #268]	; (d4640 <loop+0x214>)
   d4532:	4842      	ldr	r0, [pc, #264]	; (d463c <loop+0x210>)
   d4534:	f002 fa8b 	bl	d6a4e <_ZN7Ubidots3addEPcf>
  ubidots.add("Outdoor Temp", tempOutdoor);
   d4538:	ed96 0a00 	vldr	s0, [r6]
   d453c:	4941      	ldr	r1, [pc, #260]	; (d4644 <loop+0x218>)
   d453e:	483f      	ldr	r0, [pc, #252]	; (d463c <loop+0x210>)
   d4540:	f002 fa85 	bl	d6a4e <_ZN7Ubidots3addEPcf>
  ubidots.add("Outdoor Humidity", humidityOutdoor);
   d4544:	ed97 0a00 	vldr	s0, [r7]
   d4548:	493f      	ldr	r1, [pc, #252]	; (d4648 <loop+0x21c>)
   d454a:	483c      	ldr	r0, [pc, #240]	; (d463c <loop+0x210>)
   d454c:	f002 fa7f 	bl	d6a4e <_ZN7Ubidots3addEPcf>
  ubidots.add("Indoor Heat Index",indoorHeatIndex(temp, humidity));
   d4550:	edd5 0a00 	vldr	s1, [r5]
   d4554:	ed94 0a00 	vldr	s0, [r4]
   d4558:	f7ff fe7e 	bl	d4258 <_Z16outdoorHeatIndexff>
   d455c:	ec51 0b10 	vmov	r0, r1, d0
   d4560:	f005 fd28 	bl	d9fb4 <__aeabi_d2f>
   d4564:	4939      	ldr	r1, [pc, #228]	; (d464c <loop+0x220>)
   d4566:	ee00 0a10 	vmov	s0, r0
   d456a:	4834      	ldr	r0, [pc, #208]	; (d463c <loop+0x210>)
   d456c:	f002 fa6f 	bl	d6a4e <_ZN7Ubidots3addEPcf>
  ubidots.add("Outdoor Heat Index", outdoorHeatIndex(tempOutdoor, humidityOutdoor));
   d4570:	edd7 0a00 	vldr	s1, [r7]
   d4574:	ed96 0a00 	vldr	s0, [r6]
   d4578:	f7ff fe6e 	bl	d4258 <_Z16outdoorHeatIndexff>
   d457c:	ec51 0b10 	vmov	r0, r1, d0
   d4580:	f005 fd18 	bl	d9fb4 <__aeabi_d2f>
   d4584:	4932      	ldr	r1, [pc, #200]	; (d4650 <loop+0x224>)
   d4586:	ee00 0a10 	vmov	s0, r0
   d458a:	482c      	ldr	r0, [pc, #176]	; (d463c <loop+0x210>)
   d458c:	f002 fa5f 	bl	d6a4e <_ZN7Ubidots3addEPcf>
  bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC); 
   d4590:	4b30      	ldr	r3, [pc, #192]	; (d4654 <loop+0x228>)
   d4592:	f898 2000 	ldrb.w	r2, [r8]
   d4596:	6819      	ldr	r1, [r3, #0]
   d4598:	4828      	ldr	r0, [pc, #160]	; (d463c <loop+0x210>)
   d459a:	f002 fa61 	bl	d6a60 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
  Particle.publish("Indoor Heat Index",String(indoorHeatIndex(temp, humidity)));
   d459e:	edd5 0a00 	vldr	s1, [r5]
   d45a2:	ed94 0a00 	vldr	s0, [r4]
   d45a6:	f7ff fe57 	bl	d4258 <_Z16outdoorHeatIndexff>
   d45aa:	2106      	movs	r1, #6
   d45ac:	a804      	add	r0, sp, #16
   d45ae:	f003 fe02 	bl	d81b6 <_ZN6StringC1Edi>
   d45b2:	f898 3000 	ldrb.w	r3, [r8]
   d45b6:	9a04      	ldr	r2, [sp, #16]
   d45b8:	4924      	ldr	r1, [pc, #144]	; (d464c <loop+0x220>)
   d45ba:	f88d 3000 	strb.w	r3, [sp]
   d45be:	a802      	add	r0, sp, #8
   d45c0:	233c      	movs	r3, #60	; 0x3c
   d45c2:	f002 fee5 	bl	d7390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d45c6:	a803      	add	r0, sp, #12
   d45c8:	f7ff ff1a 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45cc:	a804      	add	r0, sp, #16
   d45ce:	f003 fd7b 	bl	d80c8 <_ZN6StringD1Ev>
  Particle.publish("Outdoor Heat Index",String(outdoorHeatIndex(tempOutdoor, humidityOutdoor)));
   d45d2:	edd7 0a00 	vldr	s1, [r7]
   d45d6:	ed96 0a00 	vldr	s0, [r6]
   d45da:	f7ff fe3d 	bl	d4258 <_Z16outdoorHeatIndexff>
   d45de:	2106      	movs	r1, #6
   d45e0:	a804      	add	r0, sp, #16
   d45e2:	f003 fde8 	bl	d81b6 <_ZN6StringC1Edi>
   d45e6:	f898 3000 	ldrb.w	r3, [r8]
   d45ea:	9a04      	ldr	r2, [sp, #16]
   d45ec:	4918      	ldr	r1, [pc, #96]	; (d4650 <loop+0x224>)
   d45ee:	f88d 3000 	strb.w	r3, [sp]
   d45f2:	a802      	add	r0, sp, #8
   d45f4:	233c      	movs	r3, #60	; 0x3c
   d45f6:	f002 fecb 	bl	d7390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d45fa:	a803      	add	r0, sp, #12
   d45fc:	f7ff ff00 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4600:	a804      	add	r0, sp, #16
   d4602:	f003 fd61 	bl	d80c8 <_ZN6StringD1Ev>
   d4606:	e72f      	b.n	d4468 <loop+0x3c>
   d4608:	2003e450 	.word	0x2003e450
   d460c:	2003e468 	.word	0x2003e468
   d4610:	000dc2a3 	.word	0x000dc2a3
   d4614:	2003e244 	.word	0x2003e244
   d4618:	000dbb9f 	.word	0x000dbb9f
   d461c:	2003e42d 	.word	0x2003e42d
   d4620:	000dc2c2 	.word	0x000dc2c2
   d4624:	2003e448 	.word	0x2003e448
   d4628:	2003e460 	.word	0x2003e460
   d462c:	2003e454 	.word	0x2003e454
   d4630:	2003e248 	.word	0x2003e248
   d4634:	2003e24c 	.word	0x2003e24c
   d4638:	000dc2d5 	.word	0x000dc2d5
   d463c:	2003e46c 	.word	0x2003e46c
   d4640:	000dc2e1 	.word	0x000dc2e1
   d4644:	000dc2f1 	.word	0x000dc2f1
   d4648:	000dc2fe 	.word	0x000dc2fe
   d464c:	000dc30f 	.word	0x000dc30f
   d4650:	000dc321 	.word	0x000dc321
   d4654:	2003e240 	.word	0x2003e240
   d4658:	2003e42c 	.word	0x2003e42c

000d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d465c:	680b      	ldr	r3, [r1, #0]
   d465e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4660:	b113      	cbz	r3, d4668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4662:	685a      	ldr	r2, [r3, #4]
   d4664:	3201      	adds	r2, #1
   d4666:	605a      	str	r2, [r3, #4]
      }
   d4668:	4770      	bx	lr
	...

000d466c <_Z17setCurrentWeatherPKcS0_>:
void setCurrentWeather(const char *event, const char *data) {
   d466c:	b5f0      	push	{r4, r5, r6, r7, lr}
    Log.info("subscriptionHandler %s", data);
   d466e:	460a      	mov	r2, r1
void setCurrentWeather(const char *event, const char *data) {
   d4670:	b091      	sub	sp, #68	; 0x44
   d4672:	460c      	mov	r4, r1
    Log.info("subscriptionHandler %s", data);
   d4674:	4848      	ldr	r0, [pc, #288]	; (d4798 <_Z17setCurrentWeatherPKcS0_+0x12c>)
   d4676:	4949      	ldr	r1, [pc, #292]	; (d479c <_Z17setCurrentWeatherPKcS0_+0x130>)
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
   d4678:	4d49      	ldr	r5, [pc, #292]	; (d47a0 <_Z17setCurrentWeatherPKcS0_+0x134>)
            tempOutdoor = iter.value().toDouble();
   d467a:	4e4a      	ldr	r6, [pc, #296]	; (d47a4 <_Z17setCurrentWeatherPKcS0_+0x138>)
    Log.info("subscriptionHandler %s", data);
   d467c:	f7ff fd1b 	bl	d40b6 <_ZNK5spark6Logger4infoEPKcz>
    return parseCopy(json, strlen(json));
   d4680:	4620      	mov	r0, r4
   d4682:	f005 ff3c 	bl	da4fe <strlen>
   d4686:	4621      	mov	r1, r4
   d4688:	4602      	mov	r2, r0
   d468a:	a803      	add	r0, sp, #12
   d468c:	f003 fb28 	bl	d7ce0 <_ZN5spark9JSONValue9parseCopyEPKcj>
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
   d4690:	9c05      	ldr	r4, [sp, #20]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4692:	9b03      	ldr	r3, [sp, #12]
   d4694:	9306      	str	r3, [sp, #24]
   d4696:	a904      	add	r1, sp, #16
   d4698:	a807      	add	r0, sp, #28
   d469a:	f7ff ffdf 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d469e:	aa06      	add	r2, sp, #24
   d46a0:	4621      	mov	r1, r4
   d46a2:	a80a      	add	r0, sp, #40	; 0x28
   d46a4:	f003 fadc 	bl	d7c60 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d46a8:	a807      	add	r0, sp, #28
   d46aa:	f7ff fea9 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d46ae:	4f3e      	ldr	r7, [pc, #248]	; (d47a8 <_Z17setCurrentWeatherPKcS0_+0x13c>)
    while (iter.next()) {
   d46b0:	a80a      	add	r0, sp, #40	; 0x28
   d46b2:	f003 faed 	bl	d7c90 <_ZN5spark18JSONObjectIterator4nextEv>
   d46b6:	2800      	cmp	r0, #0
   d46b8:	d066      	beq.n	d4788 <_Z17setCurrentWeatherPKcS0_+0x11c>
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
   d46ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d46bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d46be:	9301      	str	r3, [sp, #4]
   d46c0:	a90b      	add	r1, sp, #44	; 0x2c
   d46c2:	a802      	add	r0, sp, #8
   d46c4:	f7ff ffca 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d46c8:	4621      	mov	r1, r4
   d46ca:	aa01      	add	r2, sp, #4
   d46cc:	a806      	add	r0, sp, #24
   d46ce:	f003 faa3 	bl	d7c18 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d46d2:	a802      	add	r0, sp, #8
   d46d4:	f7ff fe94 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d46d8:	9808      	ldr	r0, [sp, #32]
   d46da:	4629      	mov	r1, r5
   d46dc:	f005 fedf 	bl	da49e <strcmp>
   d46e0:	4604      	mov	r4, r0
   d46e2:	a807      	add	r0, sp, #28
   d46e4:	f7ff fe8c 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "temp") {
   d46e8:	b9cc      	cbnz	r4, d471e <_Z17setCurrentWeatherPKcS0_+0xb2>
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   d46ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d46ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d46ee:	9301      	str	r3, [sp, #4]
   d46f0:	a90b      	add	r1, sp, #44	; 0x2c
   d46f2:	a802      	add	r0, sp, #8
   d46f4:	f7ff ffb2 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d46f8:	aa01      	add	r2, sp, #4
   d46fa:	4621      	mov	r1, r4
   d46fc:	a806      	add	r0, sp, #24
   d46fe:	f003 f949 	bl	d7994 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4702:	a802      	add	r0, sp, #8
   d4704:	f7ff fe7c 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            tempOutdoor = iter.value().toDouble();
   d4708:	a806      	add	r0, sp, #24
   d470a:	f003 f979 	bl	d7a00 <_ZNK5spark9JSONValue8toDoubleEv>
   d470e:	ec51 0b10 	vmov	r0, r1, d0
   d4712:	f005 fc4f 	bl	d9fb4 <__aeabi_d2f>
   d4716:	6030      	str	r0, [r6, #0]
   d4718:	a807      	add	r0, sp, #28
   d471a:	f7ff fe71 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(k_, d_);
   d471e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4722:	9301      	str	r3, [sp, #4]
   d4724:	a90b      	add	r1, sp, #44	; 0x2c
   d4726:	a802      	add	r0, sp, #8
   d4728:	f7ff ff98 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d472c:	4621      	mov	r1, r4
   d472e:	aa01      	add	r2, sp, #4
   d4730:	a806      	add	r0, sp, #24
   d4732:	f003 fa71 	bl	d7c18 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4736:	a802      	add	r0, sp, #8
   d4738:	f7ff fe62 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d473c:	9808      	ldr	r0, [sp, #32]
   d473e:	4639      	mov	r1, r7
   d4740:	f005 fead 	bl	da49e <strcmp>
   d4744:	4604      	mov	r4, r0
   d4746:	a807      	add	r0, sp, #28
   d4748:	f7ff fe5a 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "hum") {
   d474c:	2c00      	cmp	r4, #0
   d474e:	d1af      	bne.n	d46b0 <_Z17setCurrentWeatherPKcS0_+0x44>
    return JSONValue(v_, d_);
   d4750:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	a90b      	add	r1, sp, #44	; 0x2c
   d4758:	a802      	add	r0, sp, #8
   d475a:	f7ff ff7f 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d475e:	aa01      	add	r2, sp, #4
   d4760:	4621      	mov	r1, r4
   d4762:	a806      	add	r0, sp, #24
   d4764:	f003 f916 	bl	d7994 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4768:	a802      	add	r0, sp, #8
   d476a:	f7ff fe49 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            humidityOutdoor = iter.value().toDouble();
   d476e:	a806      	add	r0, sp, #24
   d4770:	f003 f946 	bl	d7a00 <_ZNK5spark9JSONValue8toDoubleEv>
   d4774:	ec51 0b10 	vmov	r0, r1, d0
   d4778:	f005 fc1c 	bl	d9fb4 <__aeabi_d2f>
   d477c:	4b0b      	ldr	r3, [pc, #44]	; (d47ac <_Z17setCurrentWeatherPKcS0_+0x140>)
   d477e:	6018      	str	r0, [r3, #0]
   d4780:	a807      	add	r0, sp, #28
   d4782:	f7ff fe3d 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4786:	e792      	b.n	d46ae <_Z17setCurrentWeatherPKcS0_+0x42>
   d4788:	a80b      	add	r0, sp, #44	; 0x2c
   d478a:	f7ff fe39 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d478e:	a804      	add	r0, sp, #16
   d4790:	f7ff fe36 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }}
   d4794:	b011      	add	sp, #68	; 0x44
   d4796:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4798:	2003e658 	.word	0x2003e658
   d479c:	000dc334 	.word	0x000dc334
   d47a0:	000dc34b 	.word	0x000dc34b
   d47a4:	2003e24c 	.word	0x2003e24c
   d47a8:	000dc350 	.word	0x000dc350
   d47ac:	2003e248 	.word	0x2003e248

000d47b0 <_GLOBAL__sub_I_WEBHOOK_NAME>:
   d47b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d47b2:	4b22      	ldr	r3, [pc, #136]	; (d483c <_GLOBAL__sub_I_WEBHOOK_NAME+0x8c>)
Ubidots ubidots("webhook", UBI_PARTICLE); 
   d47b4:	4c22      	ldr	r4, [pc, #136]	; (d4840 <_GLOBAL__sub_I_WEBHOOK_NAME+0x90>)
   d47b6:	4923      	ldr	r1, [pc, #140]	; (d4844 <_GLOBAL__sub_I_WEBHOOK_NAME+0x94>)
   d47b8:	4e23      	ldr	r6, [pc, #140]	; (d4848 <_GLOBAL__sub_I_WEBHOOK_NAME+0x98>)
ChainableLED leds (RX, TX, 1); 
   d47ba:	4d24      	ldr	r5, [pc, #144]	; (d484c <_GLOBAL__sub_I_WEBHOOK_NAME+0x9c>)
   d47bc:	2200      	movs	r2, #0
   d47be:	701a      	strb	r2, [r3, #0]
   d47c0:	4b23      	ldr	r3, [pc, #140]	; (d4850 <_GLOBAL__sub_I_WEBHOOK_NAME+0xa0>)
   d47c2:	2701      	movs	r7, #1
   d47c4:	701f      	strb	r7, [r3, #0]
Ubidots ubidots("webhook", UBI_PARTICLE); 
   d47c6:	2203      	movs	r2, #3
   d47c8:	4620      	mov	r0, r4
   d47ca:	f002 f91f 	bl	d6a0c <_ZN7UbidotsC1EPc11IotProtocol>
   d47ce:	4620      	mov	r0, r4
DHT dht(DHTPIN, DHTTYPE); 
   d47d0:	4c20      	ldr	r4, [pc, #128]	; (d4854 <_GLOBAL__sub_I_WEBHOOK_NAME+0xa4>)
Ubidots ubidots("webhook", UBI_PARTICLE); 
   d47d2:	4921      	ldr	r1, [pc, #132]	; (d4858 <_GLOBAL__sub_I_WEBHOOK_NAME+0xa8>)
   d47d4:	4632      	mov	r2, r6
   d47d6:	f004 fd75 	bl	d92c4 <__aeabi_atexit>
DHT dht(DHTPIN, DHTTYPE); 
   d47da:	2306      	movs	r3, #6
   d47dc:	220b      	movs	r2, #11
   d47de:	2113      	movs	r1, #19
   d47e0:	4620      	mov	r0, r4
   d47e2:	f000 f87c 	bl	d48de <_ZN3DHTC1Ehhh>
ChainableLED leds (RX, TX, 1); 
   d47e6:	463b      	mov	r3, r7
   d47e8:	2209      	movs	r2, #9
   d47ea:	210a      	movs	r1, #10
   d47ec:	4628      	mov	r0, r5
   d47ee:	f000 faaf 	bl	d4d50 <_ZN12ChainableLEDC1Ehhh>
   d47f2:	491a      	ldr	r1, [pc, #104]	; (d485c <_GLOBAL__sub_I_WEBHOOK_NAME+0xac>)
   d47f4:	4632      	mov	r2, r6
   d47f6:	4628      	mov	r0, r5
   d47f8:	f004 fd64 	bl	d92c4 <__aeabi_atexit>
float humidity = dht.getHumidity();
   d47fc:	4620      	mov	r0, r4
   d47fe:	f000 faa5 	bl	d4d4c <_ZN3DHT11getHumidityEv>
   d4802:	4d17      	ldr	r5, [pc, #92]	; (d4860 <_GLOBAL__sub_I_WEBHOOK_NAME+0xb0>)
float temp = dht.getTempFarenheit();
   d4804:	4620      	mov	r0, r4
float humidity = dht.getHumidity();
   d4806:	ed85 0a00 	vstr	s0, [r5]
float temp = dht.getTempFarenheit();
   d480a:	f000 fa61 	bl	d4cd0 <_ZN3DHT16getTempFarenheitEv>
   d480e:	4b15      	ldr	r3, [pc, #84]	; (d4864 <_GLOBAL__sub_I_WEBHOOK_NAME+0xb4>)
double heatIndex = indoorHeatIndex(temp, humidity);
   d4810:	edd5 0a00 	vldr	s1, [r5]
float temp = dht.getTempFarenheit();
   d4814:	ed83 0a00 	vstr	s0, [r3]
double heatIndex = indoorHeatIndex(temp, humidity);
   d4818:	f7ff fd1e 	bl	d4258 <_Z16outdoorHeatIndexff>
   d481c:	4b12      	ldr	r3, [pc, #72]	; (d4868 <_GLOBAL__sub_I_WEBHOOK_NAME+0xb8>)
   d481e:	ed83 0b00 	vstr	d0, [r3]
double outHeatIndex = outdoorHeatIndex (tempOutdoor, humidityOutdoor);
   d4822:	4b12      	ldr	r3, [pc, #72]	; (d486c <_GLOBAL__sub_I_WEBHOOK_NAME+0xbc>)
   d4824:	edd3 0a00 	vldr	s1, [r3]
   d4828:	4b11      	ldr	r3, [pc, #68]	; (d4870 <_GLOBAL__sub_I_WEBHOOK_NAME+0xc0>)
   d482a:	ed93 0a00 	vldr	s0, [r3]
   d482e:	f7ff fd13 	bl	d4258 <_Z16outdoorHeatIndexff>
   d4832:	4b10      	ldr	r3, [pc, #64]	; (d4874 <_GLOBAL__sub_I_WEBHOOK_NAME+0xc4>)
   d4834:	ed83 0b00 	vstr	d0, [r3]
   d4838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d483a:	bf00      	nop
   d483c:	2003e42c 	.word	0x2003e42c
   d4840:	2003e46c 	.word	0x2003e46c
   d4844:	000dc354 	.word	0x000dc354
   d4848:	2003e428 	.word	0x2003e428
   d484c:	2003e454 	.word	0x2003e454
   d4850:	2003e42d 	.word	0x2003e42d
   d4854:	2003e430 	.word	0x2003e430
   d4858:	000d6a29 	.word	0x000d6a29
   d485c:	000d4d6b 	.word	0x000d4d6b
   d4860:	2003e450 	.word	0x2003e450
   d4864:	2003e468 	.word	0x2003e468
   d4868:	2003e448 	.word	0x2003e448
   d486c:	2003e248 	.word	0x2003e248
   d4870:	2003e24c 	.word	0x2003e24c
   d4874:	2003e460 	.word	0x2003e460

000d4878 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4878:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d487a:	6803      	ldr	r3, [r0, #0]
   d487c:	2b2f      	cmp	r3, #47	; 0x2f
{
   d487e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4880:	d904      	bls.n	d488c <nrf_gpio_pin_port_decode+0x14>
   d4882:	4a07      	ldr	r2, [pc, #28]	; (d48a0 <nrf_gpio_pin_port_decode+0x28>)
   d4884:	2100      	movs	r1, #0
   d4886:	200a      	movs	r0, #10
   d4888:	f002 fa9e 	bl	d6dc8 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d488c:	6823      	ldr	r3, [r4, #0]
   d488e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4890:	bf83      	ittte	hi
   d4892:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4896:	4803      	ldrhi	r0, [pc, #12]	; (d48a4 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4898:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d489a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d489e:	bd10      	pop	{r4, pc}
   d48a0:	000d6a99 	.word	0x000d6a99
   d48a4:	50000300 	.word	0x50000300

000d48a8 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d48a8:	b507      	push	{r0, r1, r2, lr}
   d48aa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d48ac:	a801      	add	r0, sp, #4
   d48ae:	f7ff ffe3 	bl	d4878 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d48b2:	9a01      	ldr	r2, [sp, #4]
   d48b4:	2301      	movs	r3, #1
   d48b6:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d48b8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d48bc:	b003      	add	sp, #12
   d48be:	f85d fb04 	ldr.w	pc, [sp], #4

000d48c2 <nrf_gpio_pin_read>:
{
   d48c2:	b507      	push	{r0, r1, r2, lr}
   d48c4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d48c6:	a801      	add	r0, sp, #4
   d48c8:	f7ff ffd6 	bl	d4878 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d48cc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d48ce:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d48d2:	40d8      	lsrs	r0, r3
}
   d48d4:	f000 0001 	and.w	r0, r0, #1
   d48d8:	b003      	add	sp, #12
   d48da:	f85d fb04 	ldr.w	pc, [sp], #4

000d48de <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d48de:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d48e0:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d48e2:	2301      	movs	r3, #1
	_pin = pin;
   d48e4:	7181      	strb	r1, [r0, #6]
	_type = type;
   d48e6:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d48e8:	7403      	strb	r3, [r0, #16]
}
   d48ea:	bd10      	pop	{r4, pc}

000d48ec <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d48ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d48f0:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d48f2:	4c1e      	ldr	r4, [pc, #120]	; (d496c <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d48f4:	7980      	ldrb	r0, [r0, #6]
   d48f6:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4970 <_ZN3DHT5beginEv+0x84>
   d48fa:	2100      	movs	r1, #0
   d48fc:	f004 fc78 	bl	d91f0 <pinMode>
	pinSetFast(_pin);
   d4900:	79ae      	ldrb	r6, [r5, #6]
   d4902:	7823      	ldrb	r3, [r4, #0]
   d4904:	f3bf 8f5b 	dmb	ish
   d4908:	f013 0f01 	tst.w	r3, #1
   d490c:	d10a      	bne.n	d4924 <_ZN3DHT5beginEv+0x38>
   d490e:	4620      	mov	r0, r4
   d4910:	f7ff fbc9 	bl	d40a6 <__cxa_guard_acquire>
   d4914:	b130      	cbz	r0, d4924 <_ZN3DHT5beginEv+0x38>
   d4916:	f002 f8cf 	bl	d6ab8 <HAL_Pin_Map>
   d491a:	f8c8 0000 	str.w	r0, [r8]
   d491e:	4620      	mov	r0, r4
   d4920:	f7ff fbc6 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4924:	f8d8 3000 	ldr.w	r3, [r8]
   d4928:	0136      	lsls	r6, r6, #4
   d492a:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d492c:	7823      	ldrb	r3, [r4, #0]
   d492e:	f3bf 8f5b 	dmb	ish
   d4932:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4934:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4938:	d40a      	bmi.n	d4950 <_ZN3DHT5beginEv+0x64>
   d493a:	480c      	ldr	r0, [pc, #48]	; (d496c <_ZN3DHT5beginEv+0x80>)
   d493c:	f7ff fbb3 	bl	d40a6 <__cxa_guard_acquire>
   d4940:	b130      	cbz	r0, d4950 <_ZN3DHT5beginEv+0x64>
   d4942:	f002 f8b9 	bl	d6ab8 <HAL_Pin_Map>
   d4946:	f8c8 0000 	str.w	r0, [r8]
   d494a:	4808      	ldr	r0, [pc, #32]	; (d496c <_ZN3DHT5beginEv+0x80>)
   d494c:	f7ff fbb0 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4950:	f8d8 3000 	ldr.w	r3, [r8]
   d4954:	4433      	add	r3, r6
   d4956:	785b      	ldrb	r3, [r3, #1]
   d4958:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d495c:	ea43 0007 	orr.w	r0, r3, r7
   d4960:	f7ff ffa2 	bl	d48a8 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d4964:	2300      	movs	r3, #0
   d4966:	60eb      	str	r3, [r5, #12]
}
   d4968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d496c:	2003e478 	.word	0x2003e478
   d4970:	2003e47c 	.word	0x2003e47c

000d4974 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d4974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4978:	4604      	mov	r4, r0
   d497a:	b085      	sub	sp, #20
   d497c:	f002 f894 	bl	d6aa8 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4980:	68e3      	ldr	r3, [r4, #12]
   d4982:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4984:	bf84      	itt	hi
   d4986:	2300      	movhi	r3, #0
   d4988:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d498a:	7c23      	ldrb	r3, [r4, #16]
   d498c:	b92b      	cbnz	r3, d499a <_ZN3DHT4readEv+0x26>
   d498e:	68e3      	ldr	r3, [r4, #12]
   d4990:	1ac0      	subs	r0, r0, r3
   d4992:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4996:	f0c0 8160 	bcc.w	d4c5a <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d499a:	2500      	movs	r5, #0
   d499c:	7425      	strb	r5, [r4, #16]
   d499e:	f002 f883 	bl	d6aa8 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d49a2:	4eb0      	ldr	r6, [pc, #704]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d49a4:	6025      	str	r5, [r4, #0]
   d49a6:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d49a8:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d49aa:	79a7      	ldrb	r7, [r4, #6]
   d49ac:	7833      	ldrb	r3, [r6, #0]
   d49ae:	4dae      	ldr	r5, [pc, #696]	; (d4c68 <_ZN3DHT4readEv+0x2f4>)
   d49b0:	f3bf 8f5b 	dmb	ish
   d49b4:	f013 0f01 	tst.w	r3, #1
   d49b8:	d109      	bne.n	d49ce <_ZN3DHT4readEv+0x5a>
   d49ba:	4630      	mov	r0, r6
   d49bc:	f7ff fb73 	bl	d40a6 <__cxa_guard_acquire>
   d49c0:	b128      	cbz	r0, d49ce <_ZN3DHT4readEv+0x5a>
   d49c2:	f002 f879 	bl	d6ab8 <HAL_Pin_Map>
   d49c6:	6028      	str	r0, [r5, #0]
   d49c8:	4630      	mov	r0, r6
   d49ca:	f7ff fb71 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d49ce:	682b      	ldr	r3, [r5, #0]
   d49d0:	013f      	lsls	r7, r7, #4
   d49d2:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d49d6:	7833      	ldrb	r3, [r6, #0]
   d49d8:	f3bf 8f5b 	dmb	ish
   d49dc:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d49de:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d49e2:	d409      	bmi.n	d49f8 <_ZN3DHT4readEv+0x84>
   d49e4:	489f      	ldr	r0, [pc, #636]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d49e6:	f7ff fb5e 	bl	d40a6 <__cxa_guard_acquire>
   d49ea:	b128      	cbz	r0, d49f8 <_ZN3DHT4readEv+0x84>
   d49ec:	f002 f864 	bl	d6ab8 <HAL_Pin_Map>
   d49f0:	6028      	str	r0, [r5, #0]
   d49f2:	489c      	ldr	r0, [pc, #624]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d49f4:	f7ff fb5c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d49f8:	682b      	ldr	r3, [r5, #0]
   d49fa:	441f      	add	r7, r3
   d49fc:	7878      	ldrb	r0, [r7, #1]
   d49fe:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4a02:	ea40 0008 	orr.w	r0, r0, r8
   d4a06:	f7ff ff4f 	bl	d48a8 <nrf_gpio_pin_set>
	delay(250);
   d4a0a:	20fa      	movs	r0, #250	; 0xfa
   d4a0c:	f002 fb08 	bl	d7020 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4a10:	79a0      	ldrb	r0, [r4, #6]
   d4a12:	2101      	movs	r1, #1
   d4a14:	f004 fbec 	bl	d91f0 <pinMode>
	pinResetFast(_pin);
   d4a18:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a1a:	7833      	ldrb	r3, [r6, #0]
   d4a1c:	f3bf 8f5b 	dmb	ish
   d4a20:	07da      	lsls	r2, r3, #31
   d4a22:	d409      	bmi.n	d4a38 <_ZN3DHT4readEv+0xc4>
   d4a24:	488f      	ldr	r0, [pc, #572]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d4a26:	f7ff fb3e 	bl	d40a6 <__cxa_guard_acquire>
   d4a2a:	b128      	cbz	r0, d4a38 <_ZN3DHT4readEv+0xc4>
   d4a2c:	f002 f844 	bl	d6ab8 <HAL_Pin_Map>
   d4a30:	6028      	str	r0, [r5, #0]
   d4a32:	488c      	ldr	r0, [pc, #560]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d4a34:	f7ff fb3c 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a38:	682b      	ldr	r3, [r5, #0]
   d4a3a:	013f      	lsls	r7, r7, #4
   d4a3c:	5ddb      	ldrb	r3, [r3, r7]
   d4a3e:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a42:	7833      	ldrb	r3, [r6, #0]
   d4a44:	f3bf 8f5b 	dmb	ish
   d4a48:	07db      	lsls	r3, r3, #31
   d4a4a:	d409      	bmi.n	d4a60 <_ZN3DHT4readEv+0xec>
   d4a4c:	4885      	ldr	r0, [pc, #532]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d4a4e:	f7ff fb2a 	bl	d40a6 <__cxa_guard_acquire>
   d4a52:	b128      	cbz	r0, d4a60 <_ZN3DHT4readEv+0xec>
   d4a54:	f002 f830 	bl	d6ab8 <HAL_Pin_Map>
   d4a58:	6028      	str	r0, [r5, #0]
   d4a5a:	4882      	ldr	r0, [pc, #520]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d4a5c:	f7ff fb28 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4a60:	682b      	ldr	r3, [r5, #0]
   d4a62:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4a64:	a803      	add	r0, sp, #12
   d4a66:	787b      	ldrb	r3, [r7, #1]
   d4a68:	f003 031f 	and.w	r3, r3, #31
   d4a6c:	ea43 0308 	orr.w	r3, r3, r8
   d4a70:	9303      	str	r3, [sp, #12]
   d4a72:	f7ff ff01 	bl	d4878 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4a76:	9a03      	ldr	r2, [sp, #12]
   d4a78:	2301      	movs	r3, #1
   d4a7a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4a7c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4a80:	2014      	movs	r0, #20
   d4a82:	f002 facd 	bl	d7020 <delay>
	noInterrupts();
   d4a86:	f002 fe89 	bl	d779c <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4a8a:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a8c:	7833      	ldrb	r3, [r6, #0]
   d4a8e:	f3bf 8f5b 	dmb	ish
   d4a92:	07d8      	lsls	r0, r3, #31
   d4a94:	d409      	bmi.n	d4aaa <_ZN3DHT4readEv+0x136>
   d4a96:	4873      	ldr	r0, [pc, #460]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d4a98:	f7ff fb05 	bl	d40a6 <__cxa_guard_acquire>
   d4a9c:	b128      	cbz	r0, d4aaa <_ZN3DHT4readEv+0x136>
   d4a9e:	f002 f80b 	bl	d6ab8 <HAL_Pin_Map>
   d4aa2:	6028      	str	r0, [r5, #0]
   d4aa4:	486f      	ldr	r0, [pc, #444]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d4aa6:	f7ff fb03 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4aaa:	682b      	ldr	r3, [r5, #0]
   d4aac:	013f      	lsls	r7, r7, #4
   d4aae:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ab2:	7833      	ldrb	r3, [r6, #0]
   d4ab4:	f3bf 8f5b 	dmb	ish
   d4ab8:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4aba:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4abe:	d409      	bmi.n	d4ad4 <_ZN3DHT4readEv+0x160>
   d4ac0:	4868      	ldr	r0, [pc, #416]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d4ac2:	f7ff faf0 	bl	d40a6 <__cxa_guard_acquire>
   d4ac6:	b128      	cbz	r0, d4ad4 <_ZN3DHT4readEv+0x160>
   d4ac8:	f001 fff6 	bl	d6ab8 <HAL_Pin_Map>
   d4acc:	6028      	str	r0, [r5, #0]
   d4ace:	4865      	ldr	r0, [pc, #404]	; (d4c64 <_ZN3DHT4readEv+0x2f0>)
   d4ad0:	f7ff faee 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ad4:	682b      	ldr	r3, [r5, #0]
   d4ad6:	441f      	add	r7, r3
   d4ad8:	7878      	ldrb	r0, [r7, #1]
   d4ada:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4ade:	ea40 0008 	orr.w	r0, r0, r8
   d4ae2:	f7ff fee1 	bl	d48a8 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4ae6:	2028      	movs	r0, #40	; 0x28
   d4ae8:	f001 ffd6 	bl	d6a98 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4aec:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4aee:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4c64 <_ZN3DHT4readEv+0x2f0>
   d4af2:	2100      	movs	r1, #0
   d4af4:	f004 fb7c 	bl	d91f0 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d4af8:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d4afa:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4afc:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4afe:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4b00:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4b04:	f894 b006 	ldrb.w	fp, [r4, #6]
   d4b08:	7833      	ldrb	r3, [r6, #0]
   d4b0a:	f3bf 8f5b 	dmb	ish
   d4b0e:	07da      	lsls	r2, r3, #31
   d4b10:	d409      	bmi.n	d4b26 <_ZN3DHT4readEv+0x1b2>
   d4b12:	4640      	mov	r0, r8
   d4b14:	f7ff fac7 	bl	d40a6 <__cxa_guard_acquire>
   d4b18:	b128      	cbz	r0, d4b26 <_ZN3DHT4readEv+0x1b2>
   d4b1a:	f001 ffcd 	bl	d6ab8 <HAL_Pin_Map>
   d4b1e:	6028      	str	r0, [r5, #0]
   d4b20:	4640      	mov	r0, r8
   d4b22:	f7ff fac5 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b26:	682b      	ldr	r3, [r5, #0]
   d4b28:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4b2c:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4b30:	015b      	lsls	r3, r3, #5
   d4b32:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b34:	7833      	ldrb	r3, [r6, #0]
   d4b36:	f3bf 8f5b 	dmb	ish
   d4b3a:	07db      	lsls	r3, r3, #31
   d4b3c:	d409      	bmi.n	d4b52 <_ZN3DHT4readEv+0x1de>
   d4b3e:	4640      	mov	r0, r8
   d4b40:	f7ff fab1 	bl	d40a6 <__cxa_guard_acquire>
   d4b44:	b128      	cbz	r0, d4b52 <_ZN3DHT4readEv+0x1de>
   d4b46:	f001 ffb7 	bl	d6ab8 <HAL_Pin_Map>
   d4b4a:	6028      	str	r0, [r5, #0]
   d4b4c:	4640      	mov	r0, r8
   d4b4e:	f7ff faaf 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b52:	682b      	ldr	r3, [r5, #0]
   d4b54:	445b      	add	r3, fp
   d4b56:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4b5a:	9b01      	ldr	r3, [sp, #4]
   d4b5c:	f00b 0b1f 	and.w	fp, fp, #31
   d4b60:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4b64:	4658      	mov	r0, fp
   d4b66:	f7ff feac 	bl	d48c2 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4b6a:	4658      	mov	r0, fp
   d4b6c:	f7ff fea9 	bl	d48c2 <nrf_gpio_pin_read>
   d4b70:	9b00      	ldr	r3, [sp, #0]
   d4b72:	4283      	cmp	r3, r0
   d4b74:	d109      	bne.n	d4b8a <_ZN3DHT4readEv+0x216>
			counter++;
   d4b76:	f109 0901 	add.w	r9, r9, #1
   d4b7a:	fa5f f989 	uxtb.w	r9, r9
   d4b7e:	2001      	movs	r0, #1
   d4b80:	f001 ff8a 	bl	d6a98 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4b84:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4b88:	d1bc      	bne.n	d4b04 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4b8a:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b8e:	7833      	ldrb	r3, [r6, #0]
   d4b90:	f3bf 8f5b 	dmb	ish
   d4b94:	07d8      	lsls	r0, r3, #31
   d4b96:	d409      	bmi.n	d4bac <_ZN3DHT4readEv+0x238>
   d4b98:	4640      	mov	r0, r8
   d4b9a:	f7ff fa84 	bl	d40a6 <__cxa_guard_acquire>
   d4b9e:	b128      	cbz	r0, d4bac <_ZN3DHT4readEv+0x238>
   d4ba0:	f001 ff8a 	bl	d6ab8 <HAL_Pin_Map>
   d4ba4:	6028      	str	r0, [r5, #0]
   d4ba6:	4640      	mov	r0, r8
   d4ba8:	f7ff fa82 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4bac:	682b      	ldr	r3, [r5, #0]
   d4bae:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4bb2:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4bb6:	015b      	lsls	r3, r3, #5
   d4bb8:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4bba:	7833      	ldrb	r3, [r6, #0]
   d4bbc:	f3bf 8f5b 	dmb	ish
   d4bc0:	07d9      	lsls	r1, r3, #31
   d4bc2:	d409      	bmi.n	d4bd8 <_ZN3DHT4readEv+0x264>
   d4bc4:	4640      	mov	r0, r8
   d4bc6:	f7ff fa6e 	bl	d40a6 <__cxa_guard_acquire>
   d4bca:	b128      	cbz	r0, d4bd8 <_ZN3DHT4readEv+0x264>
   d4bcc:	f001 ff74 	bl	d6ab8 <HAL_Pin_Map>
   d4bd0:	6028      	str	r0, [r5, #0]
   d4bd2:	4640      	mov	r0, r8
   d4bd4:	f7ff fa6c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4bd8:	682b      	ldr	r3, [r5, #0]
   d4bda:	445b      	add	r3, fp
   d4bdc:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4be0:	9b00      	ldr	r3, [sp, #0]
   d4be2:	f00b 0b1f 	and.w	fp, fp, #31
   d4be6:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d4bea:	4658      	mov	r0, fp
   d4bec:	f7ff fe69 	bl	d48c2 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4bf0:	4658      	mov	r0, fp
   d4bf2:	f7ff fe66 	bl	d48c2 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d4bf6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d4bfa:	b2c3      	uxtb	r3, r0
   d4bfc:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4bfe:	d018      	beq.n	d4c32 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4c00:	2f03      	cmp	r7, #3
   d4c02:	d911      	bls.n	d4c28 <_ZN3DHT4readEv+0x2b4>
   d4c04:	07fa      	lsls	r2, r7, #31
   d4c06:	d40f      	bmi.n	d4c28 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4c08:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4c0c:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d4c10:	5ca3      	ldrb	r3, [r4, r2]
   d4c12:	005b      	lsls	r3, r3, #1
   d4c14:	b2db      	uxtb	r3, r3
   d4c16:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4c18:	7a21      	ldrb	r1, [r4, #8]
   d4c1a:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4c1c:	bf3c      	itt	cc
   d4c1e:	f043 0301 	orrcc.w	r3, r3, #1
   d4c22:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4c24:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4c28:	3701      	adds	r7, #1
   d4c2a:	b2ff      	uxtb	r7, r7
   d4c2c:	2f55      	cmp	r7, #85	; 0x55
   d4c2e:	f47f af67 	bne.w	d4b00 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d4c32:	f002 fdb5 	bl	d77a0 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d4c36:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4c3a:	d910      	bls.n	d4c5e <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4c3c:	7863      	ldrb	r3, [r4, #1]
   d4c3e:	7820      	ldrb	r0, [r4, #0]
   d4c40:	4418      	add	r0, r3
   d4c42:	78a3      	ldrb	r3, [r4, #2]
   d4c44:	4418      	add	r0, r3
   d4c46:	78e3      	ldrb	r3, [r4, #3]
   d4c48:	4418      	add	r0, r3
   d4c4a:	7923      	ldrb	r3, [r4, #4]
   d4c4c:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d4c4e:	1ac3      	subs	r3, r0, r3
   d4c50:	4258      	negs	r0, r3
   d4c52:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d4c54:	b005      	add	sp, #20
   d4c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4c5a:	2001      	movs	r0, #1
   d4c5c:	e7fa      	b.n	d4c54 <_ZN3DHT4readEv+0x2e0>
	return false;
   d4c5e:	2000      	movs	r0, #0
   d4c60:	e7f8      	b.n	d4c54 <_ZN3DHT4readEv+0x2e0>
   d4c62:	bf00      	nop
   d4c64:	2003e478 	.word	0x2003e478
   d4c68:	2003e47c 	.word	0x2003e47c

000d4c6c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4c6c:	b510      	push	{r4, lr}
   d4c6e:	4604      	mov	r4, r0
	if (read()) {
   d4c70:	f7ff fe80 	bl	d4974 <_ZN3DHT4readEv>
   d4c74:	b320      	cbz	r0, d4cc0 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d4c76:	79e3      	ldrb	r3, [r4, #7]
   d4c78:	2b0b      	cmp	r3, #11
   d4c7a:	d01b      	beq.n	d4cb4 <_ZN3DHT15readTemperatureEv+0x48>
   d4c7c:	3b15      	subs	r3, #21
   d4c7e:	2b01      	cmp	r3, #1
   d4c80:	d81e      	bhi.n	d4cc0 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d4c82:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d4c84:	eddf 6a10 	vldr	s13, [pc, #64]	; d4cc8 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4c88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4c8c:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d4c90:	78e2      	ldrb	r2, [r4, #3]
   d4c92:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d4c96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d4c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d4c9e:	061b      	lsls	r3, r3, #24
				f += data[3];
   d4ca0:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4ca4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4ca8:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4cac:	d507      	bpl.n	d4cbe <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d4cae:	eeb1 0a40 	vneg.f32	s0, s0
   d4cb2:	e004      	b.n	d4cbe <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d4cb4:	78a3      	ldrb	r3, [r4, #2]
   d4cb6:	ee00 3a10 	vmov	s0, r3
   d4cba:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4cbe:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4cc0:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4ccc <_ZN3DHT15readTemperatureEv+0x60>
   d4cc4:	e7fb      	b.n	d4cbe <_ZN3DHT15readTemperatureEv+0x52>
   d4cc6:	bf00      	nop
   d4cc8:	43800000 	.word	0x43800000
   d4ccc:	7fc00000 	.word	0x7fc00000

000d4cd0 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d4cd0:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4cd2:	f7ff ffcb 	bl	d4c6c <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d4cd6:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4cda:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4cde:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4ce2:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d4ce6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4cf0 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4cea:	ee37 0a00 	vadd.f32	s0, s14, s0
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	42000000 	.word	0x42000000

000d4cf4 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4cf4:	b510      	push	{r4, lr}
   d4cf6:	4604      	mov	r4, r0
	if (read()) {
   d4cf8:	f7ff fe3c 	bl	d4974 <_ZN3DHT4readEv>
   d4cfc:	b1f0      	cbz	r0, d4d3c <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d4cfe:	79e3      	ldrb	r3, [r4, #7]
   d4d00:	2b0b      	cmp	r3, #11
   d4d02:	d015      	beq.n	d4d30 <_ZN3DHT12readHumidityEv+0x3c>
   d4d04:	3b15      	subs	r3, #21
   d4d06:	2b01      	cmp	r3, #1
   d4d08:	d818      	bhi.n	d4d3c <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4d0a:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4d0c:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4d44 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4d10:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4d14:	7863      	ldrb	r3, [r4, #1]
   d4d16:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4d1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d4d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4d22:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4d26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4d2a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4d2e:	bd10      	pop	{r4, pc}
				f = data[0];
   d4d30:	7823      	ldrb	r3, [r4, #0]
   d4d32:	ee00 3a10 	vmov	s0, r3
   d4d36:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4d3a:	e7f8      	b.n	d4d2e <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4d3c:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4d48 <_ZN3DHT12readHumidityEv+0x54>
   d4d40:	e7f5      	b.n	d4d2e <_ZN3DHT12readHumidityEv+0x3a>
   d4d42:	bf00      	nop
   d4d44:	43800000 	.word	0x43800000
   d4d48:	7fc00000 	.word	0x7fc00000

000d4d4c <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4d4c:	f7ff bfd2 	b.w	d4cf4 <_ZN3DHT12readHumidityEv>

000d4d50 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d4d50:	b510      	push	{r4, lr}
   d4d52:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d4d54:	7001      	strb	r1, [r0, #0]
   d4d56:	7042      	strb	r2, [r0, #1]
   d4d58:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d4d5a:	2101      	movs	r1, #1
   d4d5c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d4d60:	f005 fb16 	bl	da390 <calloc>
   d4d64:	6060      	str	r0, [r4, #4]
}
   d4d66:	4620      	mov	r0, r4
   d4d68:	bd10      	pop	{r4, pc}

000d4d6a <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d4d6a:	b510      	push	{r4, lr}
   d4d6c:	4604      	mov	r4, r0
{
    free(_led_state);
   d4d6e:	6840      	ldr	r0, [r0, #4]
   d4d70:	f002 f91e 	bl	d6fb0 <free>
}
   d4d74:	4620      	mov	r0, r4
   d4d76:	bd10      	pop	{r4, pc}

000d4d78 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4d78:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d4d7a:	2100      	movs	r1, #0
{
   d4d7c:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d4d7e:	7800      	ldrb	r0, [r0, #0]
   d4d80:	f004 fa47 	bl	d9212 <digitalWrite>
   d4d84:	2014      	movs	r0, #20
   d4d86:	f001 fe87 	bl	d6a98 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d4d8a:	7820      	ldrb	r0, [r4, #0]
   d4d8c:	2101      	movs	r1, #1
   d4d8e:	f004 fa40 	bl	d9212 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d4d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d96:	2014      	movs	r0, #20
   d4d98:	f001 be7e 	b.w	d6a98 <HAL_Delay_Microseconds>

000d4d9c <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d4d9c:	b570      	push	{r4, r5, r6, lr}
   d4d9e:	4606      	mov	r6, r0
   d4da0:	460c      	mov	r4, r1
   d4da2:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d4da4:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   d4da6:	bf4c      	ite	mi
   d4da8:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d4daa:	2100      	movpl	r1, #0
   d4dac:	7870      	ldrb	r0, [r6, #1]
   d4dae:	f004 fa30 	bl	d9212 <digitalWrite>
        clk();
   d4db2:	3d01      	subs	r5, #1
   d4db4:	4630      	mov	r0, r6
   d4db6:	f7ff ffdf 	bl	d4d78 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d4dba:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   d4dbc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   d4dc0:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   d4dc2:	d1ef      	bne.n	d4da4 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   d4dc4:	bd70      	pop	{r4, r5, r6, pc}

000d4dc6 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4dc8:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   d4dcc:	461e      	mov	r6, r3
   d4dce:	460c      	mov	r4, r1
   d4dd0:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4dd2:	bf14      	ite	ne
   d4dd4:	21c0      	movne	r1, #192	; 0xc0
   d4dd6:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4dd8:	0673      	lsls	r3, r6, #25
   d4dda:	bf58      	it	pl
   d4ddc:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4de0:	062a      	lsls	r2, r5, #24
   d4de2:	bf58      	it	pl
   d4de4:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d4de8:	066b      	lsls	r3, r5, #25
   d4dea:	bf58      	it	pl
   d4dec:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4df0:	0622      	lsls	r2, r4, #24
   d4df2:	bf58      	it	pl
   d4df4:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d4df8:	0663      	lsls	r3, r4, #25
   d4dfa:	bf58      	it	pl
   d4dfc:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d4e00:	9001      	str	r0, [sp, #4]
   d4e02:	f7ff ffcb 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d4e06:	9801      	ldr	r0, [sp, #4]
   d4e08:	4631      	mov	r1, r6
   d4e0a:	f7ff ffc7 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d4e0e:	9801      	ldr	r0, [sp, #4]
   d4e10:	4629      	mov	r1, r5
   d4e12:	f7ff ffc3 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d4e16:	9801      	ldr	r0, [sp, #4]
   d4e18:	4621      	mov	r1, r4
}
   d4e1a:	b002      	add	sp, #8
   d4e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   d4e20:	f7ff bfbc 	b.w	d4d9c <_ZN12ChainableLED8sendByteEh>

000d4e24 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d4e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4e28:	4604      	mov	r4, r0
   d4e2a:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d4e2c:	2100      	movs	r1, #0
{
   d4e2e:	4690      	mov	r8, r2
   d4e30:	4699      	mov	r9, r3
   d4e32:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   d4e36:	f7ff ffb1 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4e3a:	2100      	movs	r1, #0
   d4e3c:	4620      	mov	r0, r4
   d4e3e:	f7ff ffad 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4e42:	2100      	movs	r1, #0
   d4e44:	4620      	mov	r0, r4
   d4e46:	f7ff ffa9 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4e4a:	2100      	movs	r1, #0
   d4e4c:	4620      	mov	r0, r4
   d4e4e:	f7ff ffa5 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>
   d4e52:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4e54:	78a3      	ldrb	r3, [r4, #2]
   d4e56:	b2f5      	uxtb	r5, r6
   d4e58:	42ab      	cmp	r3, r5
   d4e5a:	d919      	bls.n	d4e90 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
   d4e5c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   d4e60:	42af      	cmp	r7, r5
   d4e62:	f100 0201 	add.w	r2, r0, #1
   d4e66:	f100 0302 	add.w	r3, r0, #2
   d4e6a:	d108      	bne.n	d4e7e <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
        {
            _led_state[i*3 + _CL_RED] = red;
   d4e6c:	6861      	ldr	r1, [r4, #4]
   d4e6e:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   d4e72:	6861      	ldr	r1, [r4, #4]
   d4e74:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   d4e78:	6861      	ldr	r1, [r4, #4]
   d4e7a:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d4e7e:	6861      	ldr	r1, [r4, #4]
   d4e80:	5ccb      	ldrb	r3, [r1, r3]
   d4e82:	5c8a      	ldrb	r2, [r1, r2]
   d4e84:	5c09      	ldrb	r1, [r1, r0]
   d4e86:	4620      	mov	r0, r4
   d4e88:	f7ff ff9d 	bl	d4dc6 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   d4e8c:	3601      	adds	r6, #1
   d4e8e:	e7e1      	b.n	d4e54 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d4e90:	4620      	mov	r0, r4
   d4e92:	2100      	movs	r1, #0
   d4e94:	f7ff ff82 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4e98:	4620      	mov	r0, r4
   d4e9a:	2100      	movs	r1, #0
   d4e9c:	f7ff ff7e 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4ea0:	4620      	mov	r0, r4
   d4ea2:	2100      	movs	r1, #0
   d4ea4:	f7ff ff7a 	bl	d4d9c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	2100      	movs	r1, #0
}
   d4eac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   d4eb0:	f7ff bf74 	b.w	d4d9c <_ZN12ChainableLED8sendByteEh>

000d4eb4 <_ZN12ChainableLED4initEv>:
{
   d4eb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4eb6:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d4eb8:	2101      	movs	r1, #1
   d4eba:	7800      	ldrb	r0, [r0, #0]
   d4ebc:	f004 f998 	bl	d91f0 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d4ec0:	7860      	ldrb	r0, [r4, #1]
   d4ec2:	2101      	movs	r1, #1
   d4ec4:	f004 f994 	bl	d91f0 <pinMode>
   d4ec8:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   d4eca:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   d4ecc:	78a3      	ldrb	r3, [r4, #2]
   d4ece:	b2e9      	uxtb	r1, r5
   d4ed0:	428b      	cmp	r3, r1
   d4ed2:	d907      	bls.n	d4ee4 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   d4ed4:	2300      	movs	r3, #0
   d4ed6:	9600      	str	r6, [sp, #0]
   d4ed8:	461a      	mov	r2, r3
   d4eda:	4620      	mov	r0, r4
   d4edc:	f7ff ffa2 	bl	d4e24 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   d4ee0:	3501      	adds	r5, #1
   d4ee2:	e7f3      	b.n	d4ecc <_ZN12ChainableLED4initEv+0x18>
}
   d4ee4:	b002      	add	sp, #8
   d4ee6:	bd70      	pop	{r4, r5, r6, pc}

000d4ee8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4ee8:	6803      	ldr	r3, [r0, #0]
   d4eea:	b2c9      	uxtb	r1, r1
   d4eec:	689b      	ldr	r3, [r3, #8]
   d4eee:	4718      	bx	r3

000d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
    delay(5);
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   d4ef0:	b510      	push	{r4, lr}
   d4ef2:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4ef4:	f004 f9be 	bl	d9274 <_Z19__fetch_global_Wirev>
   d4ef8:	213c      	movs	r1, #60	; 0x3c
   d4efa:	f002 fc45 	bl	d7788 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
  Wire.write(SeeedOLED_Command_Mode);	     // Set OLED Command mode
   d4efe:	f004 f9b9 	bl	d9274 <_Z19__fetch_global_Wirev>
   d4f02:	2180      	movs	r1, #128	; 0x80
   d4f04:	f7ff fff0 	bl	d4ee8 <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d4f08:	f004 f9b4 	bl	d9274 <_Z19__fetch_global_Wirev>
   d4f0c:	6803      	ldr	r3, [r0, #0]
   d4f0e:	4621      	mov	r1, r4
   d4f10:	689b      	ldr	r3, [r3, #8]
   d4f12:	4798      	blx	r3
#else
  Wire.send(SeeedOLED_Command_Mode);	     // Set OLED Command mode
  Wire.send(command);
#endif
  Wire.endTransmission();    		     // End I2C communication
   d4f14:	f004 f9ae 	bl	d9274 <_Z19__fetch_global_Wirev>
}
   d4f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission();    		     // End I2C communication
   d4f1c:	f002 bc3b 	b.w	d7796 <_ZN7TwoWire15endTransmissionEv>

000d4f20 <_ZN9SeeedOLED4initEv>:
{
   d4f20:	b508      	push	{r3, lr}
    sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d4f22:	20ae      	movs	r0, #174	; 0xae
   d4f24:	f7ff ffe4 	bl	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d4f28:	2005      	movs	r0, #5
   d4f2a:	f002 f879 	bl	d7020 <delay>
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d4f2e:	20af      	movs	r0, #175	; 0xaf
   d4f30:	f7ff ffde 	bl	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d4f34:	2005      	movs	r0, #5
   d4f36:	f002 f873 	bl	d7020 <delay>
}
   d4f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
   d4f3e:	20a6      	movs	r0, #166	; 0xa6
   d4f40:	f7ff bfd6 	b.w	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4f44 <_ZN9SeeedOLED11setPageModeEv>:
    sendCommand(0x20); 			//set addressing mode
    sendCommand(0x00); 			//set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d4f44:	b508      	push	{r3, lr}
    addressingMode = PAGE_MODE;
   d4f46:	2301      	movs	r3, #1
   d4f48:	7003      	strb	r3, [r0, #0]
    sendCommand(0x20); 			//set addressing mode
   d4f4a:	2020      	movs	r0, #32
   d4f4c:	f7ff ffd0 	bl	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x02); 			//set page addressing mode
}
   d4f50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(0x02); 			//set page addressing mode
   d4f54:	2002      	movs	r0, #2
   d4f56:	f7ff bfcb 	b.w	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4f5a <_ZN9SeeedOLED9setTextXYEhh>:


void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4f5a:	b510      	push	{r4, lr}
    sendCommand(0xB0 + Row); 			//set page address
   d4f5c:	3950      	subs	r1, #80	; 0x50
{
   d4f5e:	4614      	mov	r4, r2
    sendCommand(0xB0 + Row); 			//set page address
   d4f60:	b2c8      	uxtb	r0, r1
   d4f62:	f7ff ffc5 	bl	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x00 + (8*Column & 0x0F)); 	//set column lower address
   d4f66:	00e0      	lsls	r0, r4, #3
   d4f68:	f000 0008 	and.w	r0, r0, #8
   d4f6c:	f7ff ffc0 	bl	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4f70:	f3c4 0043 	ubfx	r0, r4, #1, #4
   d4f74:	3010      	adds	r0, #16
}
   d4f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4f7a:	f7ff bfb9 	b.w	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4f7e <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
  setTextXY(0,0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d4f7e:	b510      	push	{r4, lr}
   d4f80:	460c      	mov	r4, r1
     Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d4f82:	f004 f977 	bl	d9274 <_Z19__fetch_global_Wirev>
   d4f86:	213c      	movs	r1, #60	; 0x3c
   d4f88:	f002 fbfe 	bl	d7788 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
     Wire.write(SeeedOLED_Data_Mode);            // data mode
   d4f8c:	f004 f972 	bl	d9274 <_Z19__fetch_global_Wirev>
   d4f90:	2140      	movs	r1, #64	; 0x40
   d4f92:	f7ff ffa9 	bl	d4ee8 <_ZN7TwoWire5writeEi>
     Wire.write(Data);
   d4f96:	f004 f96d 	bl	d9274 <_Z19__fetch_global_Wirev>
   d4f9a:	6803      	ldr	r3, [r0, #0]
   d4f9c:	4621      	mov	r1, r4
   d4f9e:	689b      	ldr	r3, [r3, #8]
   d4fa0:	4798      	blx	r3
#else
     Wire.send(SeeedOLED_Data_Mode);            // data mode
     Wire.send(Data);
#endif
     Wire.endTransmission();                    // stop I2C transmission
   d4fa2:	f004 f967 	bl	d9274 <_Z19__fetch_global_Wirev>
}
   d4fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     Wire.endTransmission();                    // stop I2C transmission
   d4faa:	f002 bbf4 	b.w	d7796 <_ZN7TwoWire15endTransmissionEv>
	...

000d4fb0 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
    if(C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d4fb0:	f1a1 0320 	sub.w	r3, r1, #32
    {
    C=' '; //Space
   d4fb4:	2b5f      	cmp	r3, #95	; 0x5f
   d4fb6:	bf88      	it	hi
   d4fb8:	2120      	movhi	r1, #32
{
   d4fba:	b570      	push	{r4, r5, r6, lr}
   d4fbc:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   d4fc0:	4d07      	ldr	r5, [pc, #28]	; (d4fe0 <_ZN9SeeedOLED7putCharEh+0x30>)
   d4fc2:	3920      	subs	r1, #32
   d4fc4:	4606      	mov	r6, r0
    }
    unsigned char i=0;
    for(i=0;i<8;i++)
   d4fc6:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C=' '; //Space
   d4fca:	2408      	movs	r4, #8
    {
       //read bytes from code memory
       sendData(pgm_read_byte(&BasicFont[C-32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d4fcc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4fd0:	4630      	mov	r0, r6
   d4fd2:	3c01      	subs	r4, #1
   d4fd4:	f7ff ffd3 	bl	d4f7e <_ZN9SeeedOLED8sendDataEh>
    for(i=0;i<8;i++)
   d4fd8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4fdc:	d1f6      	bne.n	d4fcc <_ZN9SeeedOLED7putCharEh+0x1c>
    }
}
   d4fde:	bd70      	pop	{r4, r5, r6, pc}
   d4fe0:	000dc364 	.word	0x000dc364

000d4fe4 <_ZN9SeeedOLED12clearDisplayEv>:
{
   d4fe4:	b570      	push	{r4, r5, r6, lr}
   d4fe6:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d4fe8:	20ae      	movs	r0, #174	; 0xae
   d4fea:	f7ff ff81 	bl	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   d4fee:	2600      	movs	r6, #0
    setTextXY(j,0);
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	b2f1      	uxtb	r1, r6
   d4ff4:	4628      	mov	r0, r5
   d4ff6:	f7ff ffb0 	bl	d4f5a <_ZN9SeeedOLED9setTextXYEhh>
   d4ffa:	2410      	movs	r4, #16
        putChar(' ');
   d4ffc:	2120      	movs	r1, #32
   d4ffe:	4628      	mov	r0, r5
   d5000:	3c01      	subs	r4, #1
   d5002:	f7ff ffd5 	bl	d4fb0 <_ZN9SeeedOLED7putCharEh>
      for(i=0;i<16;i++)  //clear all columns
   d5006:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d500a:	d1f7      	bne.n	d4ffc <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for(j=0;j<8;j++)
   d500c:	3601      	adds	r6, #1
   d500e:	2e08      	cmp	r6, #8
   d5010:	d1ee      	bne.n	d4ff0 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d5012:	20af      	movs	r0, #175	; 0xaf
   d5014:	f7ff ff6c 	bl	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0,0);
   d5018:	4622      	mov	r2, r4
   d501a:	4621      	mov	r1, r4
   d501c:	4628      	mov	r0, r5
}
   d501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0,0);
   d5022:	f7ff bf9a 	b.w	d4f5a <_ZN9SeeedOLED9setTextXYEhh>

000d5026 <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   d5026:	b570      	push	{r4, r5, r6, lr}
   d5028:	4606      	mov	r6, r0
   d502a:	460d      	mov	r5, r1
   d502c:	2400      	movs	r4, #0
    unsigned char i=0;
    while(String[i])
   d502e:	b2e3      	uxtb	r3, r4
   d5030:	3401      	adds	r4, #1
   d5032:	5ce9      	ldrb	r1, [r5, r3]
   d5034:	b119      	cbz	r1, d503e <_ZN9SeeedOLED9putStringEPKc+0x18>
    {
        putChar(String[i]);
   d5036:	4630      	mov	r0, r6
   d5038:	f7ff ffba 	bl	d4fb0 <_ZN9SeeedOLED7putCharEh>
    while(String[i])
   d503c:	e7f7      	b.n	d502e <_ZN9SeeedOLED9putStringEPKc+0x8>
        i++;
    }
}
   d503e:	bd70      	pop	{r4, r5, r6, pc}

000d5040 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   d5040:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5042:	b085      	sub	sp, #20
  unsigned char char_buffer[10]="";
   d5044:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d5046:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10]="";
   d5048:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   d504c:	4606      	mov	r6, r0
  unsigned char char_buffer[10]="";
   d504e:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   d5052:	da24      	bge.n	d509e <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f=1;
    putChar('-');
   d5054:	212d      	movs	r1, #45	; 0x2d
   d5056:	f7ff ffab 	bl	d4fb0 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d505a:	4264      	negs	r4, r4
    f=1;
   d505c:	2301      	movs	r3, #1
  unsigned char f = 0;
   d505e:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d5060:	200a      	movs	r0, #10
   d5062:	462a      	mov	r2, r5
   d5064:	a904      	add	r1, sp, #16
   d5066:	440a      	add	r2, r1
   d5068:	3501      	adds	r5, #1
   d506a:	fbb4 f1f0 	udiv	r1, r4, r0
   d506e:	fb00 4411 	mls	r4, r0, r1, r4
   d5072:	f802 4c0c 	strb.w	r4, [r2, #-12]
   d5076:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   d5078:	460c      	mov	r4, r1
   d507a:	2900      	cmp	r1, #0
   d507c:	d1f1      	bne.n	d5062 <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f=f+i;
   d507e:	442b      	add	r3, r5
   d5080:	b2dc      	uxtb	r4, r3
   d5082:	ab04      	add	r3, sp, #16
   d5084:	195f      	adds	r7, r3, r5
   d5086:	3f0d      	subs	r7, #13
  for(; i > 0; i--)
   d5088:	b175      	cbz	r5, d50a8 <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0'+ char_buffer[i - 1]);
   d508a:	f817 1901 	ldrb.w	r1, [r7], #-1
   d508e:	3130      	adds	r1, #48	; 0x30
   d5090:	b2c9      	uxtb	r1, r1
   d5092:	4630      	mov	r0, r6
  for(; i > 0; i--)
   d5094:	3d01      	subs	r5, #1
    putChar('0'+ char_buffer[i - 1]);
   d5096:	f7ff ff8b 	bl	d4fb0 <_ZN9SeeedOLED7putCharEh>
  for(; i > 0; i--)
   d509a:	b2ed      	uxtb	r5, r5
   d509c:	e7f4      	b.n	d5088 <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   d509e:	d1de      	bne.n	d505e <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   d50a0:	2130      	movs	r1, #48	; 0x30
   d50a2:	f7ff ff85 	bl	d4fb0 <_ZN9SeeedOLED7putCharEh>
    return f;
   d50a6:	2401      	movs	r4, #1
  }
  return f;

}
   d50a8:	4620      	mov	r0, r4
   d50aa:	b005      	add	sp, #20
   d50ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50ae <_ZN9SeeedOLED16setNormalDisplayEv>:
    sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
    sendCommand(SeeedOLED_Normal_Display_Cmd);
   d50ae:	20a6      	movs	r0, #166	; 0xa6
   d50b0:	f7ff bf1e 	b.w	d4ef0 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d50b4 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
   d50b4:	6803      	ldr	r3, [r0, #0]
   d50b6:	4718      	bx	r3

000d50b8 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d50b8:	2a01      	cmp	r2, #1
   d50ba:	d003      	beq.n	d50c4 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d50bc:	2a02      	cmp	r2, #2
   d50be:	d003      	beq.n	d50c8 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d50c0:	2000      	movs	r0, #0
   d50c2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50c4:	6001      	str	r1, [r0, #0]
	      break;
   d50c6:	e7fb      	b.n	d50c0 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d50c8:	680b      	ldr	r3, [r1, #0]
   d50ca:	6003      	str	r3, [r0, #0]
	}
   d50cc:	e7f8      	b.n	d50c0 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d50d0 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d50d0:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d50d2:	201c      	movs	r0, #28
   d50d4:	f7fe ffdf 	bl	d4096 <_Znwj>
   d50d8:	4604      	mov	r4, r0
   d50da:	b148      	cbz	r0, d50f0 <_Z10builderTcpv+0x20>
   d50dc:	4b06      	ldr	r3, [pc, #24]	; (d50f8 <_Z10builderTcpv+0x28>)
   d50de:	4907      	ldr	r1, [pc, #28]	; (d50fc <_Z10builderTcpv+0x2c>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	9300      	str	r3, [sp, #0]
   d50e4:	6809      	ldr	r1, [r1, #0]
   d50e6:	4b06      	ldr	r3, [pc, #24]	; (d5100 <_Z10builderTcpv+0x30>)
   d50e8:	f242 3234 	movw	r2, #9012	; 0x2334
   d50ec:	f001 f878 	bl	d61e0 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d50f0:	4620      	mov	r0, r4
   d50f2:	b002      	add	sp, #8
   d50f4:	bd10      	pop	{r4, pc}
   d50f6:	bf00      	nop
   d50f8:	2003e50c 	.word	0x2003e50c
   d50fc:	2003e508 	.word	0x2003e508
   d5100:	000dc664 	.word	0x000dc664

000d5104 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d5104:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d5106:	2020      	movs	r0, #32
   d5108:	f7fe ffc5 	bl	d4096 <_Znwj>
   d510c:	4604      	mov	r4, r0
   d510e:	b140      	cbz	r0, d5122 <_Z11builderHttpv+0x1e>
   d5110:	4b05      	ldr	r3, [pc, #20]	; (d5128 <_Z11builderHttpv+0x24>)
   d5112:	4906      	ldr	r1, [pc, #24]	; (d512c <_Z11builderHttpv+0x28>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	9300      	str	r3, [sp, #0]
   d5118:	6809      	ldr	r1, [r1, #0]
   d511a:	4b05      	ldr	r3, [pc, #20]	; (d5130 <_Z11builderHttpv+0x2c>)
   d511c:	2250      	movs	r2, #80	; 0x50
   d511e:	f000 fa5f 	bl	d55e0 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d5122:	4620      	mov	r0, r4
   d5124:	b002      	add	sp, #8
   d5126:	bd10      	pop	{r4, pc}
   d5128:	2003e50c 	.word	0x2003e50c
   d512c:	2003e508 	.word	0x2003e508
   d5130:	000dc664 	.word	0x000dc664

000d5134 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d5134:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5136:	201c      	movs	r0, #28
   d5138:	f7fe ffad 	bl	d4096 <_Znwj>
   d513c:	4604      	mov	r4, r0
   d513e:	b148      	cbz	r0, d5154 <_Z10builderUdpv+0x20>
   d5140:	4b06      	ldr	r3, [pc, #24]	; (d515c <_Z10builderUdpv+0x28>)
   d5142:	4907      	ldr	r1, [pc, #28]	; (d5160 <_Z10builderUdpv+0x2c>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	9300      	str	r3, [sp, #0]
   d5148:	6809      	ldr	r1, [r1, #0]
   d514a:	4b06      	ldr	r3, [pc, #24]	; (d5164 <_Z10builderUdpv+0x30>)
   d514c:	f242 3234 	movw	r2, #9012	; 0x2334
   d5150:	f001 fbb0 	bl	d68b4 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d5154:	4620      	mov	r0, r4
   d5156:	b002      	add	sp, #8
   d5158:	bd10      	pop	{r4, pc}
   d515a:	bf00      	nop
   d515c:	2003e50c 	.word	0x2003e50c
   d5160:	2003e508 	.word	0x2003e508
   d5164:	000dc664 	.word	0x000dc664

000d5168 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d5168:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d516a:	2014      	movs	r0, #20
   d516c:	f7fe ff93 	bl	d4096 <_Znwj>
   d5170:	4604      	mov	r4, r0
   d5172:	b140      	cbz	r0, d5186 <_Z15builderParticlev+0x1e>
   d5174:	4b05      	ldr	r3, [pc, #20]	; (d518c <_Z15builderParticlev+0x24>)
   d5176:	4906      	ldr	r1, [pc, #24]	; (d5190 <_Z15builderParticlev+0x28>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	9300      	str	r3, [sp, #0]
   d517c:	2300      	movs	r3, #0
   d517e:	6809      	ldr	r1, [r1, #0]
   d5180:	461a      	mov	r2, r3
   d5182:	f000 fd59 	bl	d5c38 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   d5186:	4620      	mov	r0, r4
   d5188:	b002      	add	sp, #8
   d518a:	bd10      	pop	{r4, pc}
   d518c:	2003e50c 	.word	0x2003e50c
   d5190:	2003e508 	.word	0x2003e508

000d5194 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5194:	b510      	push	{r4, lr}
   d5196:	4b06      	ldr	r3, [pc, #24]	; (d51b0 <_ZN3UDPD1Ev+0x1c>)
   d5198:	6003      	str	r3, [r0, #0]
   d519a:	3364      	adds	r3, #100	; 0x64
   d519c:	4604      	mov	r4, r0
   d519e:	6103      	str	r3, [r0, #16]
   d51a0:	f003 fbe8 	bl	d8974 <_ZN3UDP4stopEv>
   d51a4:	4620      	mov	r0, r4
   d51a6:	f003 fcdf 	bl	d8b68 <_ZN3UDP13releaseBufferEv>
   d51aa:	4620      	mov	r0, r4
   d51ac:	bd10      	pop	{r4, pc}
   d51ae:	bf00      	nop
   d51b0:	000dcce8 	.word	0x000dcce8

000d51b4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d51b4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d51b6:	6984      	ldr	r4, [r0, #24]
   d51b8:	4b0a      	ldr	r3, [pc, #40]	; (d51e4 <_ZN9TCPClientD1Ev+0x30>)
   d51ba:	6003      	str	r3, [r0, #0]
   d51bc:	4605      	mov	r5, r0
   d51be:	b17c      	cbz	r4, d51e0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d51c0:	6863      	ldr	r3, [r4, #4]
   d51c2:	3b01      	subs	r3, #1
   d51c4:	6063      	str	r3, [r4, #4]
   d51c6:	b95b      	cbnz	r3, d51e0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d51c8:	6823      	ldr	r3, [r4, #0]
   d51ca:	4620      	mov	r0, r4
   d51cc:	689b      	ldr	r3, [r3, #8]
   d51ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d51d0:	68a3      	ldr	r3, [r4, #8]
   d51d2:	3b01      	subs	r3, #1
   d51d4:	60a3      	str	r3, [r4, #8]
   d51d6:	b91b      	cbnz	r3, d51e0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d51d8:	6823      	ldr	r3, [r4, #0]
   d51da:	4620      	mov	r0, r4
   d51dc:	68db      	ldr	r3, [r3, #12]
   d51de:	4798      	blx	r3
   d51e0:	4628      	mov	r0, r5
   d51e2:	bd38      	pop	{r3, r4, r5, pc}
   d51e4:	000dcc80 	.word	0x000dcc80

000d51e8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d51e8:	b510      	push	{r4, lr}
      if (_M_manager)
   d51ea:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d51ec:	4604      	mov	r4, r0
      if (_M_manager)
   d51ee:	b113      	cbz	r3, d51f6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51f0:	2203      	movs	r2, #3
   d51f2:	4601      	mov	r1, r0
   d51f4:	4798      	blx	r3
    }
   d51f6:	4620      	mov	r0, r4
   d51f8:	bd10      	pop	{r4, pc}
	...

000d51fc <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d51fc:	b510      	push	{r4, lr}
   d51fe:	b086      	sub	sp, #24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5200:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5202:	9102      	str	r1, [sp, #8]
	operator=(_Functor&& __f)
   d5204:	4604      	mov	r4, r0
   d5206:	e893 0003 	ldmia.w	r3, {r0, r1}
   d520a:	466a      	mov	r2, sp
   d520c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5210:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5214:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5218:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d521c:	68a2      	ldr	r2, [r4, #8]
   d521e:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5220:	4a06      	ldr	r2, [pc, #24]	; (d523c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
   d5222:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5224:	68e2      	ldr	r2, [r4, #12]
   d5226:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5228:	4a05      	ldr	r2, [pc, #20]	; (d5240 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
   d522a:	60e2      	str	r2, [r4, #12]
   d522c:	e884 0003 	stmia.w	r4, {r0, r1}
    class function<_Res(_ArgTypes...)>
   d5230:	4618      	mov	r0, r3
   d5232:	f7ff ffd9 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d5236:	4620      	mov	r0, r4
   d5238:	b006      	add	sp, #24
   d523a:	bd10      	pop	{r4, pc}
   d523c:	000d50b9 	.word	0x000d50b9
   d5240:	000d50b5 	.word	0x000d50b5

000d5244 <_ZN9TCPClientD0Ev>:
   d5244:	b510      	push	{r4, lr}
   d5246:	4604      	mov	r4, r0
   d5248:	f7ff ffb4 	bl	d51b4 <_ZN9TCPClientD1Ev>
   d524c:	4620      	mov	r0, r4
   d524e:	211c      	movs	r1, #28
   d5250:	f004 f83d 	bl	d92ce <_ZdlPvj>
   d5254:	4620      	mov	r0, r4
   d5256:	bd10      	pop	{r4, pc}

000d5258 <_ZN3UDPD0Ev>:
   d5258:	b510      	push	{r4, lr}
   d525a:	4604      	mov	r4, r0
   d525c:	f7ff ff9a 	bl	d5194 <_ZN3UDPD1Ev>
   d5260:	4620      	mov	r0, r4
   d5262:	214c      	movs	r1, #76	; 0x4c
   d5264:	f004 f833 	bl	d92ce <_ZdlPvj>
   d5268:	4620      	mov	r0, r4
   d526a:	bd10      	pop	{r4, pc}

000d526c <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   d526c:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   d526e:	f100 0108 	add.w	r1, r0, #8
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
   d5272:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   d5274:	460b      	mov	r3, r1
      while (__x != 0)
   d5276:	b13a      	cbz	r2, d5288 <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5278:	7c15      	ldrb	r5, [r2, #16]
   d527a:	7804      	ldrb	r4, [r0, #0]
   d527c:	42a5      	cmp	r5, r4
   d527e:	bf2a      	itet	cs
   d5280:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
   d5282:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
   d5284:	6892      	ldrcs	r2, [r2, #8]
   d5286:	e7f6      	b.n	d5276 <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d5288:	4299      	cmp	r1, r3
   d528a:	d004      	beq.n	d5296 <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
   d528c:	7800      	ldrb	r0, [r0, #0]
   d528e:	7c1a      	ldrb	r2, [r3, #16]
   d5290:	4290      	cmp	r0, r2
   d5292:	bf38      	it	cc
   d5294:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5296:	69da      	ldr	r2, [r3, #28]
   d5298:	b90a      	cbnz	r2, d529e <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
   d529a:	f004 f8d0 	bl	d943e <_ZSt25__throw_bad_function_callv>
}
   d529e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52a2:	6a1a      	ldr	r2, [r3, #32]
   d52a4:	f103 0014 	add.w	r0, r3, #20
   d52a8:	4710      	bx	r2

000d52aa <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
      _Link_type __x = _M_begin();
   d52aa:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d52ac:	b570      	push	{r4, r5, r6, lr}
   d52ae:	4616      	mov	r6, r2
   d52b0:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   d52b2:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   d52b4:	2201      	movs	r2, #1
      while (__x != 0)
   d52b6:	b15b      	cbz	r3, d52d0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d52b8:	7830      	ldrb	r0, [r6, #0]
   d52ba:	7c1a      	ldrb	r2, [r3, #16]
   d52bc:	4290      	cmp	r0, r2
   d52be:	bf34      	ite	cc
   d52c0:	6898      	ldrcc	r0, [r3, #8]
   d52c2:	68d8      	ldrcs	r0, [r3, #12]
   d52c4:	461d      	mov	r5, r3
   d52c6:	bf34      	ite	cc
   d52c8:	2201      	movcc	r2, #1
   d52ca:	2200      	movcs	r2, #0
   d52cc:	4603      	mov	r3, r0
   d52ce:	e7f2      	b.n	d52b6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   d52d0:	b192      	cbz	r2, d52f8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>
	  if (__j == begin())
   d52d2:	68ca      	ldr	r2, [r1, #12]
   d52d4:	42aa      	cmp	r2, r5
   d52d6:	d103      	bne.n	d52e0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d52d8:	e9c4 3500 	strd	r3, r5, [r4]
    }
   d52dc:	4620      	mov	r0, r4
   d52de:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   d52e0:	4628      	mov	r0, r5
   d52e2:	f004 f84e 	bl	d9382 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d52e6:	7833      	ldrb	r3, [r6, #0]
   d52e8:	7c02      	ldrb	r2, [r0, #16]
   d52ea:	429a      	cmp	r2, r3
   d52ec:	f04f 0300 	mov.w	r3, #0
   d52f0:	d3f2      	bcc.n	d52d8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d52f2:	e9c4 0300 	strd	r0, r3, [r4]
   d52f6:	e7f1      	b.n	d52dc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x32>
   d52f8:	4628      	mov	r0, r5
   d52fa:	e7f4      	b.n	d52e6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3c>

000d52fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d52fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return &this->_M_impl._M_header; }
   d5300:	f100 0804 	add.w	r8, r0, #4
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   d5304:	6885      	ldr	r5, [r0, #8]
   d5306:	b085      	sub	sp, #20
   d5308:	4606      	mov	r6, r0
   d530a:	4689      	mov	r9, r1
      { return &this->_M_impl._M_header; }
   d530c:	4644      	mov	r4, r8
      while (__x != 0)
   d530e:	b155      	cbz	r5, d5326 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5310:	f899 3000 	ldrb.w	r3, [r9]
   d5314:	7c2a      	ldrb	r2, [r5, #16]
   d5316:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
   d5318:	bf36      	itet	cc
   d531a:	68eb      	ldrcc	r3, [r5, #12]
	  __y = __x, __x = _S_left(__x);
   d531c:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
   d531e:	4625      	movcc	r5, r4
   d5320:	462c      	mov	r4, r5
   d5322:	461d      	mov	r5, r3
   d5324:	e7f3      	b.n	d530e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x12>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d5326:	45a0      	cmp	r8, r4
   d5328:	d004      	beq.n	d5334 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x38>
   d532a:	f899 2000 	ldrb.w	r2, [r9]
   d532e:	7c23      	ldrb	r3, [r4, #16]
   d5330:	429a      	cmp	r2, r3
   d5332:	d22e      	bcs.n	d5392 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x96>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5334:	2024      	movs	r0, #36	; 0x24
   d5336:	f7fe feae 	bl	d4096 <_Znwj>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d533a:	f899 9000 	ldrb.w	r9, [r9]
   d533e:	f880 9010 	strb.w	r9, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   d5342:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   d5344:	45a0      	cmp	r8, r4
   d5346:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   d5348:	f100 0210 	add.w	r2, r0, #16
   d534c:	61c3      	str	r3, [r0, #28]
   d534e:	d125      	bne.n	d539c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa0>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d5350:	6973      	ldr	r3, [r6, #20]
   d5352:	b11b      	cbz	r3, d535c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x60>
   d5354:	6931      	ldr	r1, [r6, #16]
   d5356:	7c0b      	ldrb	r3, [r1, #16]
   d5358:	454b      	cmp	r3, r9
   d535a:	d309      	bcc.n	d5370 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
   d535c:	4631      	mov	r1, r6
   d535e:	a802      	add	r0, sp, #8
   d5360:	f7ff ffa3 	bl	d52aa <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5364:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
	    if (__res.second)
   d5368:	2900      	cmp	r1, #0
   d536a:	d051      	beq.n	d5410 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
			    || _M_impl._M_key_compare(_S_key(__z),
   d536c:	2c00      	cmp	r4, #0
   d536e:	d14d      	bne.n	d540c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d5370:	4588      	cmp	r8, r1
   d5372:	d04b      	beq.n	d540c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5374:	7c38      	ldrb	r0, [r7, #16]
   d5376:	7c0b      	ldrb	r3, [r1, #16]
   d5378:	4298      	cmp	r0, r3
   d537a:	bf2c      	ite	cs
   d537c:	2000      	movcs	r0, #0
   d537e:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d5380:	4643      	mov	r3, r8
   d5382:	460a      	mov	r2, r1
   d5384:	4639      	mov	r1, r7
   d5386:	f003 fffe 	bl	d9386 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d538a:	6973      	ldr	r3, [r6, #20]
   d538c:	3301      	adds	r3, #1
   d538e:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d5390:	463c      	mov	r4, r7
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   d5392:	f104 0014 	add.w	r0, r4, #20
   d5396:	b005      	add	sp, #20
   d5398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d539c:	7c23      	ldrb	r3, [r4, #16]
   d539e:	9201      	str	r2, [sp, #4]
   d53a0:	454b      	cmp	r3, r9
   d53a2:	d918      	bls.n	d53d6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xda>
	  if (__pos._M_node == _M_leftmost()) // begin()
   d53a4:	68f3      	ldr	r3, [r6, #12]
   d53a6:	429c      	cmp	r4, r3
   d53a8:	d009      	beq.n	d53be <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	_M_node = _Rb_tree_decrement(_M_node);
   d53aa:	4620      	mov	r0, r4
   d53ac:	f003 ffe9 	bl	d9382 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d53b0:	7c03      	ldrb	r3, [r0, #16]
   d53b2:	9a01      	ldr	r2, [sp, #4]
   d53b4:	454b      	cmp	r3, r9
   d53b6:	d205      	bcs.n	d53c4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc8>
	      if (_S_right(__before._M_node) == 0)
   d53b8:	68c3      	ldr	r3, [r0, #12]
   d53ba:	b953      	cbnz	r3, d53d2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
   d53bc:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   d53be:	4621      	mov	r1, r4
   d53c0:	461c      	mov	r4, r3
   d53c2:	e7d1      	b.n	d5368 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d53c4:	4631      	mov	r1, r6
   d53c6:	a802      	add	r0, sp, #8
   d53c8:	f7ff ff6f 	bl	d52aa <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d53cc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   d53d0:	e7f5      	b.n	d53be <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
   d53d2:	4623      	mov	r3, r4
   d53d4:	e7f3      	b.n	d53be <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d53d6:	d21b      	bcs.n	d5410 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
	  if (__pos._M_node == _M_rightmost())
   d53d8:	6931      	ldr	r1, [r6, #16]
   d53da:	428c      	cmp	r4, r1
   d53dc:	d00b      	beq.n	d53f6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
	_M_node = _Rb_tree_increment(_M_node);
   d53de:	4620      	mov	r0, r4
   d53e0:	f003 ffbc 	bl	d935c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d53e4:	7c03      	ldrb	r3, [r0, #16]
   d53e6:	9a01      	ldr	r2, [sp, #4]
   d53e8:	454b      	cmp	r3, r9
	_M_node = _Rb_tree_increment(_M_node);
   d53ea:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d53ec:	d905      	bls.n	d53fa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfe>
	      if (_S_right(__pos._M_node) == 0)
   d53ee:	68e3      	ldr	r3, [r4, #12]
   d53f0:	b953      	cbnz	r3, d5408 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
   d53f2:	4621      	mov	r1, r4
   d53f4:	461d      	mov	r5, r3
   d53f6:	462c      	mov	r4, r5
   d53f8:	e7b6      	b.n	d5368 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d53fa:	4631      	mov	r1, r6
   d53fc:	a802      	add	r0, sp, #8
   d53fe:	f7ff ff54 	bl	d52aa <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5402:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
   d5406:	e7f6      	b.n	d53f6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
   d5408:	4601      	mov	r1, r0
   d540a:	e7f4      	b.n	d53f6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
			    || _M_impl._M_key_compare(_S_key(__z),
   d540c:	2001      	movs	r0, #1
   d540e:	e7b7      	b.n	d5380 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
   d5410:	f107 0014 	add.w	r0, r7, #20
   d5414:	f7ff fee8 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5418:	4638      	mov	r0, r7
   d541a:	f7fe fe40 	bl	d409e <_ZdlPv>
   d541e:	4627      	mov	r7, r4
   d5420:	e7b6      	b.n	d5390 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	...

000d5424 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   d5424:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5428:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   d542a:	2600      	movs	r6, #0
   d542c:	4617      	mov	r7, r2
	  : _Node_allocator()
   d542e:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   d5432:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   d5436:	e9c0 2605 	strd	r2, r6, [r0, #20]
   d543a:	4604      	mov	r4, r0
   d543c:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   d543e:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   d5440:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   d5442:	f10d 0107 	add.w	r1, sp, #7
   d5446:	2301      	movs	r3, #1
   d5448:	4628      	mov	r0, r5
   d544a:	f88d 3007 	strb.w	r3, [sp, #7]
   d544e:	f7ff ff55 	bl	d52fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5452:	4916      	ldr	r1, [pc, #88]	; (d54ac <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   d5454:	f7ff fed2 	bl	d51fc <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   d5458:	f10d 0107 	add.w	r1, sp, #7
   d545c:	4628      	mov	r0, r5
   d545e:	f88d 6007 	strb.w	r6, [sp, #7]
   d5462:	f7ff ff4b 	bl	d52fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5466:	4912      	ldr	r1, [pc, #72]	; (d54b0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d5468:	f7ff fec8 	bl	d51fc <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   d546c:	2302      	movs	r3, #2
   d546e:	f10d 0107 	add.w	r1, sp, #7
   d5472:	4628      	mov	r0, r5
   d5474:	f88d 3007 	strb.w	r3, [sp, #7]
   d5478:	f7ff ff40 	bl	d52fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d547c:	490d      	ldr	r1, [pc, #52]	; (d54b4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d547e:	f7ff febd 	bl	d51fc <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   d5482:	2303      	movs	r3, #3
   d5484:	f10d 0107 	add.w	r1, sp, #7
   d5488:	4628      	mov	r0, r5
   d548a:	f88d 3007 	strb.w	r3, [sp, #7]
   d548e:	f7ff ff35 	bl	d52fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5492:	4909      	ldr	r1, [pc, #36]	; (d54b8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d5494:	f7ff feb2 	bl	d51fc <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   d5498:	4b08      	ldr	r3, [pc, #32]	; (d54bc <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d549a:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   d549e:	4b08      	ldr	r3, [pc, #32]	; (d54c0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   d54a0:	4620      	mov	r0, r4
  _token = token;
   d54a2:	601f      	str	r7, [r3, #0]
}
   d54a4:	b002      	add	sp, #8
   d54a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d54aa:	bf00      	nop
   d54ac:	000d50d1 	.word	0x000d50d1
   d54b0:	000d5105 	.word	0x000d5105
   d54b4:	000d5135 	.word	0x000d5135
   d54b8:	000d5169 	.word	0x000d5169
   d54bc:	2003e508 	.word	0x2003e508
   d54c0:	2003e50c 	.word	0x2003e50c

000d54c4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   d54c4:	b510      	push	{r4, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d54c6:	4c0e      	ldr	r4, [pc, #56]	; (d5500 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x3c>)
   d54c8:	4620      	mov	r0, r4
   d54ca:	f003 f911 	bl	d86f0 <_ZN9TCPClientC1Ev>
   d54ce:	4620      	mov	r0, r4
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d54d0:	4c0c      	ldr	r4, [pc, #48]	; (d5504 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x40>)
   d54d2:	4a0d      	ldr	r2, [pc, #52]	; (d5508 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d54d4:	490d      	ldr	r1, [pc, #52]	; (d550c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d54d6:	f003 fef5 	bl	d92c4 <__aeabi_atexit>
   d54da:	4620      	mov	r0, r4
   d54dc:	f003 f908 	bl	d86f0 <_ZN9TCPClientC1Ev>
   d54e0:	4620      	mov	r0, r4
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d54e2:	4c0b      	ldr	r4, [pc, #44]	; (d5510 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d54e4:	4a08      	ldr	r2, [pc, #32]	; (d5508 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d54e6:	4909      	ldr	r1, [pc, #36]	; (d550c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d54e8:	f003 feec 	bl	d92c4 <__aeabi_atexit>
   d54ec:	4620      	mov	r0, r4
   d54ee:	f003 fb1b 	bl	d8b28 <_ZN3UDPC1Ev>
   d54f2:	4620      	mov	r0, r4
   d54f4:	4a04      	ldr	r2, [pc, #16]	; (d5508 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d54f6:	4907      	ldr	r1, [pc, #28]	; (d5514 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d54f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d54fc:	f003 bee2 	b.w	d92c4 <__aeabi_atexit>
   d5500:	2003e4ec 	.word	0x2003e4ec
   d5504:	2003e484 	.word	0x2003e484
   d5508:	2003e428 	.word	0x2003e428
   d550c:	000d51b5 	.word	0x000d51b5
   d5510:	2003e4a0 	.word	0x2003e4a0
   d5514:	000d5195 	.word	0x000d5195

000d5518 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d5518:	7501      	strb	r1, [r0, #20]
   d551a:	4770      	bx	lr

000d551c <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   d551c:	2200      	movs	r2, #0
	  : _Node_allocator()
   d551e:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d5520:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d5524:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d5528:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d552a:	4770      	bx	lr

000d552c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d552c:	b570      	push	{r4, r5, r6, lr}
   d552e:	4606      	mov	r6, r0
   d5530:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d5534:	2014      	movs	r0, #20
   d5536:	f001 fd33 	bl	d6fa0 <malloc>
   d553a:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d553c:	2014      	movs	r0, #20
   d553e:	f001 fd2f 	bl	d6fa0 <malloc>
   d5542:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d5544:	4630      	mov	r0, r6
   d5546:	f004 ffda 	bl	da4fe <strlen>
    for (int i = 0; i < len - 2; i++) {
   d554a:	4632      	mov	r2, r6
   d554c:	2300      	movs	r3, #0
   d554e:	3802      	subs	r0, #2
   d5550:	4298      	cmp	r0, r3
   d5552:	dd14      	ble.n	d557e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   d5554:	f812 1b01 	ldrb.w	r1, [r2], #1
   d5558:	290d      	cmp	r1, #13
   d555a:	d13a      	bne.n	d55d2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d555c:	7811      	ldrb	r1, [r2, #0]
   d555e:	290a      	cmp	r1, #10
   d5560:	d137      	bne.n	d55d2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5562:	7851      	ldrb	r1, [r2, #1]
   d5564:	290d      	cmp	r1, #13
   d5566:	d134      	bne.n	d55d2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5568:	7891      	ldrb	r1, [r2, #2]
   d556a:	290a      	cmp	r1, #10
   d556c:	d131      	bne.n	d55d2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d556e:	3304      	adds	r3, #4
   d5570:	18f1      	adds	r1, r6, r3
   d5572:	2214      	movs	r2, #20
   d5574:	4628      	mov	r0, r5
   d5576:	f004 ffdc 	bl	da532 <strncpy>
        parsed[20] = '\0';
   d557a:	2300      	movs	r3, #0
   d557c:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   d557e:	210a      	movs	r1, #10
   d5580:	4628      	mov	r0, r5
   d5582:	f004 ff7f 	bl	da484 <strchr>
    if (pch == NULL) {
   d5586:	4606      	mov	r6, r0
   d5588:	b328      	cbz	r0, d55d6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   d558a:	210a      	movs	r1, #10
   d558c:	3001      	adds	r0, #1
   d558e:	f004 ff79 	bl	da484 <strchr>
    if (pch2 == NULL) {
   d5592:	b300      	cbz	r0, d55d6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   d5594:	4631      	mov	r1, r6
   d5596:	4620      	mov	r0, r4
   d5598:	f004 ff8b 	bl	da4b2 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d559c:	4620      	mov	r0, r4
   d559e:	f004 ffae 	bl	da4fe <strlen>
   d55a2:	4420      	add	r0, r4
   d55a4:	2300      	movs	r3, #0
   d55a6:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   d55aa:	4620      	mov	r0, r4
   d55ac:	f004 feec 	bl	da388 <atof>
   d55b0:	ec51 0b10 	vmov	r0, r1, d0
   d55b4:	f004 fcfe 	bl	d9fb4 <__aeabi_d2f>
   d55b8:	ee08 0a10 	vmov	s16, r0
    free(dst);
   d55bc:	4620      	mov	r0, r4
   d55be:	f001 fcf7 	bl	d6fb0 <free>
    free(parsed);
   d55c2:	4628      	mov	r0, r5
   d55c4:	f001 fcf4 	bl	d6fb0 <free>
}
   d55c8:	eeb0 0a48 	vmov.f32	s0, s16
   d55cc:	ecbd 8b02 	vpop	{d8}
   d55d0:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   d55d2:	3301      	adds	r3, #1
   d55d4:	e7bc      	b.n	d5550 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   d55d6:	ed9f 8a01 	vldr	s16, [pc, #4]	; d55dc <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   d55da:	e7f5      	b.n	d55c8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   d55dc:	cda2425f 	.word	0xcda2425f

000d55e0 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d55e0:	b530      	push	{r4, r5, lr}
   d55e2:	4d07      	ldr	r5, [pc, #28]	; (d5600 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d55e4:	6005      	str	r5, [r0, #0]
   d55e6:	2500      	movs	r5, #0
  _user_agent = user_agent;
   d55e8:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d55ec:	7505      	strb	r5, [r0, #20]
  _token = token;
   d55ee:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d55f0:	f241 3588 	movw	r5, #5000	; 0x1388
   d55f4:	6185      	str	r5, [r0, #24]
   d55f6:	2505      	movs	r5, #5
  _port = port;
   d55f8:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d55fc:	7705      	strb	r5, [r0, #28]
}
   d55fe:	bd30      	pop	{r4, r5, pc}
   d5600:	000dc880 	.word	0x000dc880

000d5604 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   d5604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5608:	f8df 808c 	ldr.w	r8, [pc, #140]	; d5698 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   d560c:	f8df a08c 	ldr.w	sl, [pc, #140]	; d569c <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   d5610:	f8df b08c 	ldr.w	fp, [pc, #140]	; d56a0 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   d5614:	4604      	mov	r4, r0
   d5616:	460d      	mov	r5, r1
   d5618:	4617      	mov	r7, r2
   d561a:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d561c:	4640      	mov	r0, r8
   d561e:	fa5f f986 	uxtb.w	r9, r6
   d5622:	f002 fe58 	bl	d82d6 <_ZN9TCPClient9connectedEv>
   d5626:	bb88      	cbnz	r0, d568c <_ZN7UbiHTTP9reconnectEPKci+0x88>
   d5628:	7f23      	ldrb	r3, [r4, #28]
   d562a:	454b      	cmp	r3, r9
   d562c:	d92e      	bls.n	d568c <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   d562e:	7d23      	ldrb	r3, [r4, #20]
   d5630:	b1cb      	cbz	r3, d5666 <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   d5632:	f003 fca7 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5636:	4651      	mov	r1, sl
   d5638:	f002 fc8e 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(host);
   d563c:	f003 fca2 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5640:	4629      	mov	r1, r5
   d5642:	f002 fc89 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d5646:	f003 fc9d 	bl	d8f84 <_Z16_fetch_usbserialv>
   d564a:	4659      	mov	r1, fp
   d564c:	f002 fc84 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d5650:	f003 fc98 	bl	d8f84 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5654:	220a      	movs	r2, #10
   d5656:	4649      	mov	r1, r9
   d5658:	9001      	str	r0, [sp, #4]
   d565a:	f002 fc9a 	bl	d7f92 <_ZN5Print11printNumberEmh>
        n += println();
   d565e:	9b01      	ldr	r3, [sp, #4]
   d5660:	4618      	mov	r0, r3
   d5662:	f002 fc80 	bl	d7f66 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   d5666:	2300      	movs	r3, #0
   d5668:	b2ba      	uxth	r2, r7
   d566a:	4629      	mov	r1, r5
   d566c:	4640      	mov	r0, r8
   d566e:	f003 f863 	bl	d8738 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d5672:	7d23      	ldrb	r3, [r4, #20]
   d5674:	b123      	cbz	r3, d5680 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   d5676:	f003 fc85 	bl	d8f84 <_Z16_fetch_usbserialv>
   d567a:	4906      	ldr	r1, [pc, #24]	; (d5694 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d567c:	f002 fc7f 	bl	d7f7e <_ZN5Print7printlnEPKc>
    delay(1000);
   d5680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5684:	f001 fccc 	bl	d7020 <delay>
   d5688:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d568a:	e7c7      	b.n	d561c <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   d568c:	b003      	add	sp, #12
   d568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5692:	bf00      	nop
   d5694:	000dc6a2 	.word	0x000dc6a2
   d5698:	2003e510 	.word	0x2003e510
   d569c:	000dc678 	.word	0x000dc678
   d56a0:	000dc68e 	.word	0x000dc68e

000d56a4 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   d56a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d56a8:	1e4b      	subs	r3, r1, #1
   d56aa:	460c      	mov	r4, r1
   d56ac:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d56b0:	4605      	mov	r5, r0
    response[i] = '\0';
   d56b2:	2100      	movs	r1, #0
   d56b4:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d56b8:	4293      	cmp	r3, r2
   d56ba:	d1fb      	bne.n	d56b4 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
   d56bc:	7d2b      	ldrb	r3, [r5, #20]
   d56be:	b14b      	cbz	r3, d56d4 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d56c0:	f003 fc60 	bl	d8f84 <_Z16_fetch_usbserialv>
   d56c4:	4914      	ldr	r1, [pc, #80]	; (d5718 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d56c6:	f002 fc5a 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d56ca:	f003 fc5b 	bl	d8f84 <_Z16_fetch_usbserialv>
   d56ce:	4913      	ldr	r1, [pc, #76]	; (d571c <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d56d0:	f002 fc55 	bl	d7f7e <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   d56d4:	4f12      	ldr	r7, [pc, #72]	; (d5720 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
void UbiHTTP::readServerAnswer(char* response) {
   d56d6:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d56d8:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
   d56dc:	4638      	mov	r0, r7
   d56de:	f002 ff5d 	bl	d859c <_ZN9TCPClient9availableEv>
   d56e2:	b170      	cbz	r0, d5702 <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
   d56e4:	4638      	mov	r0, r7
   d56e6:	f002 fe92 	bl	d840e <_ZN9TCPClient4readEv>
   d56ea:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
   d56ec:	7d2b      	ldrb	r3, [r5, #20]
   d56ee:	b12b      	cbz	r3, d56fc <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
   d56f0:	f003 fc48 	bl	d8f84 <_Z16_fetch_usbserialv>
   d56f4:	6803      	ldr	r3, [r0, #0]
   d56f6:	5da1      	ldrb	r1, [r4, r6]
   d56f8:	689b      	ldr	r3, [r3, #8]
   d56fa:	4798      	blx	r3
    j++;
   d56fc:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d56fe:	4546      	cmp	r6, r8
   d5700:	d1ec      	bne.n	d56dc <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
   d5702:	7d2b      	ldrb	r3, [r5, #20]
   d5704:	b133      	cbz	r3, d5714 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
   d5706:	f003 fc3d 	bl	d8f84 <_Z16_fetch_usbserialv>
}
   d570a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
   d570e:	4905      	ldr	r1, [pc, #20]	; (d5724 <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
   d5710:	f002 bc35 	b.w	d7f7e <_ZN5Print7printlnEPKc>
}
   d5714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5718:	000dc6c7 	.word	0x000dc6c7
   d571c:	000dc6b3 	.word	0x000dc6b3
   d5720:	2003e510 	.word	0x2003e510
   d5724:	000dc6c6 	.word	0x000dc6c6

000d5728 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   d5728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d572a:	4f0e      	ldr	r7, [pc, #56]	; (d5764 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   d572c:	4604      	mov	r4, r0
  int timeout = 0;
   d572e:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d5730:	4638      	mov	r0, r7
   d5732:	f002 ff33 	bl	d859c <_ZN9TCPClient9availableEv>
   d5736:	4605      	mov	r5, r0
   d5738:	b990      	cbnz	r0, d5760 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   d573a:	69a3      	ldr	r3, [r4, #24]
   d573c:	42b3      	cmp	r3, r6
   d573e:	dd0f      	ble.n	d5760 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   d5740:	2001      	movs	r0, #1
   d5742:	f001 fc6d 	bl	d7020 <delay>
    if (timeout > _timeout - 1) {
   d5746:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d5748:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d574a:	42b3      	cmp	r3, r6
   d574c:	dcf0      	bgt.n	d5730 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
   d574e:	7d20      	ldrb	r0, [r4, #20]
   d5750:	b128      	cbz	r0, d575e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d5752:	f003 fc17 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5756:	4904      	ldr	r1, [pc, #16]	; (d5768 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d5758:	f002 fc11 	bl	d7f7e <_ZN5Print7printlnEPKc>
   d575c:	4628      	mov	r0, r5
}
   d575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d5760:	2001      	movs	r0, #1
   d5762:	e7fc      	b.n	d575e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   d5764:	2003e510 	.word	0x2003e510
   d5768:	000dc6d2 	.word	0x000dc6d2

000d576c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d576e:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d5770:	6902      	ldr	r2, [r0, #16]
   d5772:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5774:	4604      	mov	r4, r0
   d5776:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d5778:	f7ff ff44 	bl	d5604 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   d577c:	4878      	ldr	r0, [pc, #480]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d577e:	f002 fdaa 	bl	d82d6 <_ZN9TCPClient9connectedEv>
   d5782:	4606      	mov	r6, r0
   d5784:	2800      	cmp	r0, #0
   d5786:	f000 80e1 	beq.w	d594c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d578a:	4976      	ldr	r1, [pc, #472]	; (d5964 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d578c:	4874      	ldr	r0, [pc, #464]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d578e:	f002 fbe3 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5792:	4639      	mov	r1, r7
   d5794:	4872      	ldr	r0, [pc, #456]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5796:	f002 fbdf 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d579a:	4973      	ldr	r1, [pc, #460]	; (d5968 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d579c:	4870      	ldr	r0, [pc, #448]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d579e:	f002 fbdb 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d57a2:	4972      	ldr	r1, [pc, #456]	; (d596c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d57a4:	486e      	ldr	r0, [pc, #440]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57a6:	f002 fbd7 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d57aa:	6861      	ldr	r1, [r4, #4]
   d57ac:	486c      	ldr	r0, [pc, #432]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57ae:	f002 fbd3 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d57b2:	496f      	ldr	r1, [pc, #444]	; (d5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d57b4:	486a      	ldr	r0, [pc, #424]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57b6:	f002 fbcf 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d57ba:	496e      	ldr	r1, [pc, #440]	; (d5974 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d57bc:	4868      	ldr	r0, [pc, #416]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57be:	f002 fbcb 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d57c2:	68a1      	ldr	r1, [r4, #8]
   d57c4:	4866      	ldr	r0, [pc, #408]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57c6:	f002 fbc7 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d57ca:	4969      	ldr	r1, [pc, #420]	; (d5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d57cc:	4864      	ldr	r0, [pc, #400]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57ce:	f002 fbc3 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d57d2:	4969      	ldr	r1, [pc, #420]	; (d5978 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d57d4:	4862      	ldr	r0, [pc, #392]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57d6:	f002 fbbf 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d57da:	68e1      	ldr	r1, [r4, #12]
   d57dc:	4860      	ldr	r0, [pc, #384]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57de:	f002 fbbb 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d57e2:	4963      	ldr	r1, [pc, #396]	; (d5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d57e4:	485e      	ldr	r0, [pc, #376]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57e6:	f002 fbb7 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d57ea:	4964      	ldr	r1, [pc, #400]	; (d597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d57ec:	485c      	ldr	r0, [pc, #368]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57ee:	f002 fbb3 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d57f2:	4963      	ldr	r1, [pc, #396]	; (d5980 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d57f4:	485a      	ldr	r0, [pc, #360]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d57f6:	f002 fbaf 	bl	d7f58 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d57fa:	4628      	mov	r0, r5
   d57fc:	f004 fe7f 	bl	da4fe <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d5800:	4960      	ldr	r1, [pc, #384]	; (d5984 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   d5802:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d5804:	4856      	ldr	r0, [pc, #344]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5806:	f002 fba7 	bl	d7f58 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d580a:	220a      	movs	r2, #10
   d580c:	4631      	mov	r1, r6
   d580e:	4854      	ldr	r0, [pc, #336]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5810:	f002 fbbf 	bl	d7f92 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   d5814:	495c      	ldr	r1, [pc, #368]	; (d5988 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d5816:	4852      	ldr	r0, [pc, #328]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5818:	f002 fb9e 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d581c:	4629      	mov	r1, r5
   d581e:	4850      	ldr	r0, [pc, #320]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5820:	f002 fb9a 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d5824:	4952      	ldr	r1, [pc, #328]	; (d5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5826:	484e      	ldr	r0, [pc, #312]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5828:	f002 fb96 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d582c:	484c      	ldr	r0, [pc, #304]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d582e:	f002 fd51 	bl	d82d4 <_ZN9TCPClient5flushEv>
    if (_debug) {
   d5832:	7d23      	ldrb	r3, [r4, #20]
   d5834:	2b00      	cmp	r3, #0
   d5836:	d069      	beq.n	d590c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d5838:	f003 fba4 	bl	d8f84 <_Z16_fetch_usbserialv>
   d583c:	4953      	ldr	r1, [pc, #332]	; (d598c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d583e:	f002 fb9e 	bl	d7f7e <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d5842:	f003 fb9f 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5846:	4947      	ldr	r1, [pc, #284]	; (d5964 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d5848:	f002 fb86 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d584c:	f003 fb9a 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5850:	4639      	mov	r1, r7
   d5852:	f002 fb81 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d5856:	f003 fb95 	bl	d8f84 <_Z16_fetch_usbserialv>
   d585a:	4943      	ldr	r1, [pc, #268]	; (d5968 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d585c:	f002 fb7c 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d5860:	f003 fb90 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5864:	4941      	ldr	r1, [pc, #260]	; (d596c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d5866:	f002 fb77 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d586a:	f003 fb8b 	bl	d8f84 <_Z16_fetch_usbserialv>
   d586e:	6861      	ldr	r1, [r4, #4]
   d5870:	f002 fb72 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5874:	f003 fb86 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5878:	493d      	ldr	r1, [pc, #244]	; (d5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d587a:	f002 fb6d 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d587e:	f003 fb81 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5882:	493c      	ldr	r1, [pc, #240]	; (d5974 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d5884:	f002 fb68 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5888:	f003 fb7c 	bl	d8f84 <_Z16_fetch_usbserialv>
   d588c:	68a1      	ldr	r1, [r4, #8]
   d588e:	f002 fb63 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5892:	f003 fb77 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5896:	4936      	ldr	r1, [pc, #216]	; (d5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5898:	f002 fb5e 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d589c:	f003 fb72 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58a0:	4935      	ldr	r1, [pc, #212]	; (d5978 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d58a2:	f002 fb59 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d58a6:	f003 fb6d 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58aa:	68e1      	ldr	r1, [r4, #12]
   d58ac:	f002 fb54 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d58b0:	f003 fb68 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58b4:	492e      	ldr	r1, [pc, #184]	; (d5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d58b6:	f002 fb4f 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d58ba:	f003 fb63 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58be:	492f      	ldr	r1, [pc, #188]	; (d597c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d58c0:	f002 fb4a 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d58c4:	f003 fb5e 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58c8:	492d      	ldr	r1, [pc, #180]	; (d5980 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d58ca:	f002 fb45 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d58ce:	f003 fb59 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58d2:	492c      	ldr	r1, [pc, #176]	; (d5984 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d58d4:	f002 fb40 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d58d8:	f003 fb54 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58dc:	220a      	movs	r2, #10
   d58de:	4631      	mov	r1, r6
   d58e0:	f002 fb57 	bl	d7f92 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d58e4:	f003 fb4e 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58e8:	4927      	ldr	r1, [pc, #156]	; (d5988 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d58ea:	f002 fb35 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d58ee:	f003 fb49 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58f2:	4629      	mov	r1, r5
   d58f4:	f002 fb30 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d58f8:	f003 fb44 	bl	d8f84 <_Z16_fetch_usbserialv>
   d58fc:	491c      	ldr	r1, [pc, #112]	; (d5970 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d58fe:	f002 fb2b 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   d5902:	f003 fb3f 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5906:	4922      	ldr	r1, [pc, #136]	; (d5990 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d5908:	f002 fb39 	bl	d7f7e <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   d590c:	4620      	mov	r0, r4
   d590e:	f7ff ff0b 	bl	d5728 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   d5912:	7d23      	ldrb	r3, [r4, #20]
   d5914:	b92b      	cbnz	r3, d5922 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   d5916:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   d5918:	4811      	ldr	r0, [pc, #68]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d591a:	f002 fe99 	bl	d8650 <_ZN9TCPClient4stopEv>
}
   d591e:	4620      	mov	r0, r4
   d5920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   d5922:	f003 fb2f 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5926:	491b      	ldr	r1, [pc, #108]	; (d5994 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   d5928:	4d0d      	ldr	r5, [pc, #52]	; (d5960 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   d592a:	f002 fb28 	bl	d7f7e <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d592e:	4628      	mov	r0, r5
   d5930:	f002 fe34 	bl	d859c <_ZN9TCPClient9availableEv>
   d5934:	2800      	cmp	r0, #0
   d5936:	d0ee      	beq.n	d5916 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d5938:	4628      	mov	r0, r5
   d593a:	f002 fd68 	bl	d840e <_ZN9TCPClient4readEv>
   d593e:	4604      	mov	r4, r0
        Serial.print(c);
   d5940:	f003 fb20 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5944:	b2e1      	uxtb	r1, r4
   d5946:	f002 fb0b 	bl	d7f60 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   d594a:	e7f0      	b.n	d592e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   d594c:	7d24      	ldrb	r4, [r4, #20]
   d594e:	2c00      	cmp	r4, #0
   d5950:	d0e2      	beq.n	d5918 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   d5952:	f003 fb17 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5956:	4910      	ldr	r1, [pc, #64]	; (d5998 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d5958:	f002 fb11 	bl	d7f7e <_ZN5Print7printlnEPKc>
  bool result = false;
   d595c:	4634      	mov	r4, r6
   d595e:	e7db      	b.n	d5918 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   d5960:	2003e510 	.word	0x2003e510
   d5964:	000dc705 	.word	0x000dc705
   d5968:	000dc71d 	.word	0x000dc71d
   d596c:	000dc729 	.word	0x000dc729
   d5970:	000dc84d 	.word	0x000dc84d
   d5974:	000dc730 	.word	0x000dc730
   d5978:	000dc73d 	.word	0x000dc73d
   d597c:	000dc74c 	.word	0x000dc74c
   d5980:	000dc760 	.word	0x000dc760
   d5984:	000dc781 	.word	0x000dc781
   d5988:	000dc84b 	.word	0x000dc84b
   d598c:	000dc792 	.word	0x000dc792
   d5990:	000dc7ae 	.word	0x000dc7ae
   d5994:	000dc7cc 	.word	0x000dc7cc
   d5998:	000dc7e8 	.word	0x000dc7e8

000d599c <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d599c:	b570      	push	{r4, r5, r6, lr}
   d599e:	ed2d 8b02 	vpush	{d8}
   d59a2:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d59a4:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d59a6:	460e      	mov	r6, r1
   d59a8:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d59aa:	6841      	ldr	r1, [r0, #4]
   d59ac:	4866      	ldr	r0, [pc, #408]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d59ae:	2250      	movs	r2, #80	; 0x50
   d59b0:	f002 fec2 	bl	d8738 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d59b4:	4620      	mov	r0, r4
   d59b6:	6861      	ldr	r1, [r4, #4]
   d59b8:	2250      	movs	r2, #80	; 0x50
   d59ba:	f7ff fe23 	bl	d5604 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d59be:	4862      	ldr	r0, [pc, #392]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d59c0:	f002 fc89 	bl	d82d6 <_ZN9TCPClient9connectedEv>
   d59c4:	2800      	cmp	r0, #0
   d59c6:	f000 80b6 	beq.w	d5b36 <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d59ca:	4960      	ldr	r1, [pc, #384]	; (d5b4c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d59cc:	485e      	ldr	r0, [pc, #376]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d59ce:	f002 fac3 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d59d2:	4631      	mov	r1, r6
   d59d4:	485c      	ldr	r0, [pc, #368]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d59d6:	f002 fabf 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d59da:	495d      	ldr	r1, [pc, #372]	; (d5b50 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d59dc:	485a      	ldr	r0, [pc, #360]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d59de:	f002 fabb 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d59e2:	4629      	mov	r1, r5
   d59e4:	4858      	ldr	r0, [pc, #352]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d59e6:	f002 fab7 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d59ea:	495a      	ldr	r1, [pc, #360]	; (d5b54 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d59ec:	4856      	ldr	r0, [pc, #344]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d59ee:	f002 fab3 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d59f2:	4959      	ldr	r1, [pc, #356]	; (d5b58 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d59f4:	4854      	ldr	r0, [pc, #336]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d59f6:	f002 faaf 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d59fa:	4958      	ldr	r1, [pc, #352]	; (d5b5c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d59fc:	4852      	ldr	r0, [pc, #328]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d59fe:	f002 faab 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d5a02:	6861      	ldr	r1, [r4, #4]
   d5a04:	4850      	ldr	r0, [pc, #320]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5a06:	f002 faa7 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5a0a:	4955      	ldr	r1, [pc, #340]	; (d5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5a0c:	484e      	ldr	r0, [pc, #312]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5a0e:	f002 faa3 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d5a12:	4954      	ldr	r1, [pc, #336]	; (d5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5a14:	484c      	ldr	r0, [pc, #304]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5a16:	f002 fa9f 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d5a1a:	68a1      	ldr	r1, [r4, #8]
   d5a1c:	484a      	ldr	r0, [pc, #296]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5a1e:	f002 fa9b 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5a22:	494f      	ldr	r1, [pc, #316]	; (d5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5a24:	4848      	ldr	r0, [pc, #288]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5a26:	f002 fa97 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d5a2a:	494f      	ldr	r1, [pc, #316]	; (d5b68 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5a2c:	4846      	ldr	r0, [pc, #280]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5a2e:	f002 fa93 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d5a32:	68e1      	ldr	r1, [r4, #12]
   d5a34:	4844      	ldr	r0, [pc, #272]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5a36:	f002 fa8f 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5a3a:	4949      	ldr	r1, [pc, #292]	; (d5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5a3c:	4842      	ldr	r0, [pc, #264]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5a3e:	f002 fa8b 	bl	d7f58 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d5a42:	494a      	ldr	r1, [pc, #296]	; (d5b6c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5a44:	4840      	ldr	r0, [pc, #256]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5a46:	f002 fa87 	bl	d7f58 <_ZN5Print5printEPKc>
    if (_debug) {
   d5a4a:	7d23      	ldrb	r3, [r4, #20]
   d5a4c:	2b00      	cmp	r3, #0
   d5a4e:	d04f      	beq.n	d5af0 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   d5a50:	f003 fa98 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5a54:	493d      	ldr	r1, [pc, #244]	; (d5b4c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d5a56:	f002 fa7f 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d5a5a:	f003 fa93 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5a5e:	4631      	mov	r1, r6
   d5a60:	f002 fa7a 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("/");
   d5a64:	f003 fa8e 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5a68:	4939      	ldr	r1, [pc, #228]	; (d5b50 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5a6a:	f002 fa75 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d5a6e:	f003 fa89 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5a72:	4629      	mov	r1, r5
   d5a74:	f002 fa70 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d5a78:	f003 fa84 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5a7c:	4935      	ldr	r1, [pc, #212]	; (d5b54 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d5a7e:	f002 fa6b 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d5a82:	f003 fa7f 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5a86:	4934      	ldr	r1, [pc, #208]	; (d5b58 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d5a88:	f002 fa66 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d5a8c:	f003 fa7a 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5a90:	4932      	ldr	r1, [pc, #200]	; (d5b5c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d5a92:	f002 fa61 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d5a96:	f003 fa75 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5a9a:	6861      	ldr	r1, [r4, #4]
   d5a9c:	f002 fa5c 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5aa0:	f003 fa70 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5aa4:	492e      	ldr	r1, [pc, #184]	; (d5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5aa6:	f002 fa57 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d5aaa:	f003 fa6b 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5aae:	492d      	ldr	r1, [pc, #180]	; (d5b64 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5ab0:	f002 fa52 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5ab4:	f003 fa66 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5ab8:	68a1      	ldr	r1, [r4, #8]
   d5aba:	f002 fa4d 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5abe:	f003 fa61 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5ac2:	4927      	ldr	r1, [pc, #156]	; (d5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5ac4:	f002 fa48 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d5ac8:	f003 fa5c 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5acc:	4926      	ldr	r1, [pc, #152]	; (d5b68 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5ace:	f002 fa43 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5ad2:	f003 fa57 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5ad6:	68e1      	ldr	r1, [r4, #12]
   d5ad8:	f002 fa3e 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5adc:	f003 fa52 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5ae0:	491f      	ldr	r1, [pc, #124]	; (d5b60 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5ae2:	f002 fa39 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d5ae6:	f003 fa4d 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5aea:	4920      	ldr	r1, [pc, #128]	; (d5b6c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5aec:	f002 fa34 	bl	d7f58 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   d5af0:	4620      	mov	r0, r4
   d5af2:	f7ff fe19 	bl	d5728 <_ZN7UbiHTTP16waitServerAnswerEv>
   d5af6:	b948      	cbnz	r0, d5b0c <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   d5af8:	4813      	ldr	r0, [pc, #76]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   d5afa:	ed9f 8a1d 	vldr	s16, [pc, #116]	; d5b70 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   d5afe:	f002 fda7 	bl	d8650 <_ZN9TCPClient4stopEv>
}
   d5b02:	eeb0 0a48 	vmov.f32	s0, s16
   d5b06:	ecbd 8b02 	vpop	{d8}
   d5b0a:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5b0c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d5b10:	f001 fa46 	bl	d6fa0 <malloc>
    readServerAnswer(response);
   d5b14:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5b16:	4605      	mov	r5, r0
    readServerAnswer(response);
   d5b18:	4620      	mov	r0, r4
   d5b1a:	f7ff fdc3 	bl	d56a4 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   d5b1e:	4628      	mov	r0, r5
   d5b20:	f7ff fd04 	bl	d552c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   d5b24:	4808      	ldr	r0, [pc, #32]	; (d5b48 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b26:	eeb0 8a40 	vmov.f32	s16, s0
   d5b2a:	f002 fd91 	bl	d8650 <_ZN9TCPClient4stopEv>
    free(response);
   d5b2e:	4628      	mov	r0, r5
   d5b30:	f001 fa3e 	bl	d6fb0 <free>
    return value;
   d5b34:	e7e5      	b.n	d5b02 <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   d5b36:	7d23      	ldrb	r3, [r4, #20]
   d5b38:	2b00      	cmp	r3, #0
   d5b3a:	d0dd      	beq.n	d5af8 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   d5b3c:	f003 fa22 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5b40:	490c      	ldr	r1, [pc, #48]	; (d5b74 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d5b42:	f002 fa1c 	bl	d7f7e <_ZN5Print7printlnEPKc>
   d5b46:	e7d7      	b.n	d5af8 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   d5b48:	2003e510 	.word	0x2003e510
   d5b4c:	000dc812 	.word	0x000dc812
   d5b50:	000dc827 	.word	0x000dc827
   d5b54:	000dc829 	.word	0x000dc829
   d5b58:	000dc71d 	.word	0x000dc71d
   d5b5c:	000dc729 	.word	0x000dc729
   d5b60:	000dc84d 	.word	0x000dc84d
   d5b64:	000dc730 	.word	0x000dc730
   d5b68:	000dc73d 	.word	0x000dc73d
   d5b6c:	000dc82d 	.word	0x000dc82d
   d5b70:	cda2425f 	.word	0xcda2425f
   d5b74:	000dc850 	.word	0x000dc850

000d5b78 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
}
   d5b78:	b510      	push	{r4, lr}
   d5b7a:	4c05      	ldr	r4, [pc, #20]	; (d5b90 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x18>)
   d5b7c:	4620      	mov	r0, r4
   d5b7e:	f002 fdb7 	bl	d86f0 <_ZN9TCPClientC1Ev>
   d5b82:	4620      	mov	r0, r4
   d5b84:	4a03      	ldr	r2, [pc, #12]	; (d5b94 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d5b86:	4904      	ldr	r1, [pc, #16]	; (d5b98 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d5b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5b8c:	f003 bb9a 	b.w	d92c4 <__aeabi_atexit>
   d5b90:	2003e510 	.word	0x2003e510
   d5b94:	2003e428 	.word	0x2003e428
   d5b98:	000d51b5 	.word	0x000d51b5

000d5b9c <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d5b9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5ba4 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d5ba0:	4770      	bx	lr
   d5ba2:	bf00      	nop
   d5ba4:	cda2425f 	.word	0xcda2425f

000d5ba8 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d5ba8:	7401      	strb	r1, [r0, #16]
   d5baa:	4770      	bx	lr

000d5bac <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   d5bac:	2200      	movs	r2, #0
	  : _Node_allocator()
   d5bae:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d5bb0:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d5bb4:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d5bb8:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d5bba:	4770      	bx	lr

000d5bbc <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5bbc:	b530      	push	{r4, r5, lr}
   d5bbe:	b085      	sub	sp, #20
   d5bc0:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5bc2:	9b08      	ldr	r3, [sp, #32]
   d5bc4:	781b      	ldrb	r3, [r3, #0]
   d5bc6:	f88d 3000 	strb.w	r3, [sp]
   d5bca:	a802      	add	r0, sp, #8
   d5bcc:	233c      	movs	r3, #60	; 0x3c
   d5bce:	f001 fbdf 	bl	d7390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5bd2:	2000      	movs	r0, #0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5bd4:	9c02      	ldr	r4, [sp, #8]
   d5bd6:	f001 f92f 	bl	d6e38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5bda:	b120      	cbz	r0, d5be6 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d5bdc:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5bde:	b913      	cbnz	r3, d5be6 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   d5be0:	f001 f94e 	bl	d6e80 <spark_process>
    }
   d5be4:	e7fa      	b.n	d5bdc <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   d5be6:	7863      	ldrb	r3, [r4, #1]
   d5be8:	f3bf 8f5b 	dmb	ish
   d5bec:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d5bee:	b9ab      	cbnz	r3, d5c1c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   d5bf0:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   d5bf2:	9c03      	ldr	r4, [sp, #12]
   d5bf4:	b17c      	cbz	r4, d5c16 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   d5bf6:	6863      	ldr	r3, [r4, #4]
   d5bf8:	3b01      	subs	r3, #1
   d5bfa:	6063      	str	r3, [r4, #4]
   d5bfc:	b95b      	cbnz	r3, d5c16 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   d5bfe:	6823      	ldr	r3, [r4, #0]
   d5c00:	4620      	mov	r0, r4
   d5c02:	689b      	ldr	r3, [r3, #8]
   d5c04:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5c06:	68a3      	ldr	r3, [r4, #8]
   d5c08:	3b01      	subs	r3, #1
   d5c0a:	60a3      	str	r3, [r4, #8]
   d5c0c:	b91b      	cbnz	r3, d5c16 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   d5c0e:	6823      	ldr	r3, [r4, #0]
   d5c10:	4620      	mov	r0, r4
   d5c12:	68db      	ldr	r3, [r3, #12]
   d5c14:	4798      	blx	r3
}
   d5c16:	4628      	mov	r0, r5
   d5c18:	b005      	add	sp, #20
   d5c1a:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d5c1c:	2000      	movs	r0, #0
   d5c1e:	f001 f90b 	bl	d6e38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5c22:	b120      	cbz	r0, d5c2e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   d5c24:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5c26:	b913      	cbnz	r3, d5c2e <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   d5c28:	f001 f92a 	bl	d6e80 <spark_process>
    }
   d5c2c:	e7fa      	b.n	d5c24 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5c2e:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d5c30:	2b01      	cmp	r3, #1
   d5c32:	d1dd      	bne.n	d5bf0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   d5c34:	7b25      	ldrb	r5, [r4, #12]
   d5c36:	e7dc      	b.n	d5bf2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000d5c38 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d5c38:	b510      	push	{r4, lr}
   d5c3a:	4c04      	ldr	r4, [pc, #16]	; (d5c4c <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d5c3c:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   d5c3e:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d5c42:	2400      	movs	r4, #0
  _token = token;
   d5c44:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d5c46:	7404      	strb	r4, [r0, #16]
  _token = token;
   d5c48:	60c3      	str	r3, [r0, #12]
}
   d5c4a:	bd10      	pop	{r4, pc}
   d5c4c:	000dc898 	.word	0x000dc898

000d5c50 <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
   d5c50:	b510      	push	{r4, lr}
   d5c52:	4604      	mov	r4, r0
  delete[] _default_device_label;
   d5c54:	6800      	ldr	r0, [r0, #0]
   d5c56:	b108      	cbz	r0, d5c5c <_ZN18UbiProtocolHandlerD1Ev+0xc>
   d5c58:	f7fe fa23 	bl	d40a2 <_ZdaPv>

  free(_dots);
   d5c5c:	68e0      	ldr	r0, [r4, #12]
   d5c5e:	f001 f9a7 	bl	d6fb0 <free>
  delete _ubiProtocol;
   d5c62:	6860      	ldr	r0, [r4, #4]
   d5c64:	b110      	cbz	r0, d5c6c <_ZN18UbiProtocolHandlerD1Ev+0x1c>
   d5c66:	2104      	movs	r1, #4
   d5c68:	f003 fb31 	bl	d92ce <_ZdlPvj>
}
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	bd10      	pop	{r4, pc}

000d5c70 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d5c70:	b538      	push	{r3, r4, r5, lr}
   d5c72:	4604      	mov	r4, r0
  _dirty = true;
   d5c74:	2001      	movs	r0, #1
   d5c76:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d5c78:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5c7c:	68e5      	ldr	r5, [r4, #12]
   d5c7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5c82:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d5c86:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d5c8a:	68e0      	ldr	r0, [r4, #12]
   d5c8c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d5c90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d5c94:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d5c98:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d5c9c:	68e0      	ldr	r0, [r4, #12]
   d5c9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d5ca2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d5ca6:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d5ca8:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d5cac:	68e1      	ldr	r1, [r4, #12]
   d5cae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d5cb2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d5cb6:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d5cb8:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5cbc:	68e2      	ldr	r2, [r4, #12]
   d5cbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5cc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d5cc6:	9a04      	ldr	r2, [sp, #16]
   d5cc8:	611a      	str	r2, [r3, #16]
  _current_value++;
   d5cca:	7c23      	ldrb	r3, [r4, #16]
   d5ccc:	3301      	adds	r3, #1
   d5cce:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d5cd0:	2b0a      	cmp	r3, #10
  _current_value++;
   d5cd2:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d5cd4:	dd08      	ble.n	d5ce8 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d5cd6:	7ca3      	ldrb	r3, [r4, #18]
   d5cd8:	b123      	cbz	r3, d5ce4 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   d5cda:	f003 f953 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5cde:	4903      	ldr	r1, [pc, #12]	; (d5cec <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d5ce0:	f002 f94d 	bl	d7f7e <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d5ce4:	230a      	movs	r3, #10
   d5ce6:	7423      	strb	r3, [r4, #16]
  }
}
   d5ce8:	bd38      	pop	{r3, r4, r5, pc}
   d5cea:	bf00      	nop
   d5cec:	000dc8a8 	.word	0x000dc8a8

000d5cf0 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d5cf0:	b510      	push	{r4, lr}
   d5cf2:	ee10 0a10 	vmov	r0, s0
   d5cf6:	b086      	sub	sp, #24
   d5cf8:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d5cfa:	f003 fe21 	bl	d9940 <__aeabi_f2d>
   d5cfe:	4602      	mov	r2, r0
   d5d00:	460b      	mov	r3, r1
   d5d02:	a801      	add	r0, sp, #4
   d5d04:	490a      	ldr	r1, [pc, #40]	; (d5d30 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   d5d06:	f001 f963 	bl	d6fd0 <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d5d0a:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   d5d0c:	2214      	movs	r2, #20
  uint8_t k = 0;
   d5d0e:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   d5d10:	f810 1b01 	ldrb.w	r1, [r0], #1
   d5d14:	2920      	cmp	r1, #32
   d5d16:	d006      	beq.n	d5d26 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d5d18:	54e1      	strb	r1, [r4, r3]
      k++;
   d5d1a:	3301      	adds	r3, #1
   d5d1c:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d5d1e:	b911      	cbnz	r1, d5d26 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d5d20:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   d5d22:	b006      	add	sp, #24
   d5d24:	bd10      	pop	{r4, pc}
  while (j < 20) {
   d5d26:	3a01      	subs	r2, #1
   d5d28:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d5d2c:	d1f0      	bne.n	d5d10 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   d5d2e:	e7f8      	b.n	d5d22 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   d5d30:	000dc8e7 	.word	0x000dc8e7

000d5d34 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d5d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d38:	460c      	mov	r4, r1
   d5d3a:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   d5d3c:	494c      	ldr	r1, [pc, #304]	; (d5e70 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d5d3e:	f8df 8154 	ldr.w	r8, [pc, #340]	; d5e94 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d5d42:	f8df 9154 	ldr.w	r9, [pc, #340]	; d5e98 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
        sprintf(payload, "%s000", payload);
   d5d46:	f8df a154 	ldr.w	sl, [pc, #340]	; d5e9c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d5d4a:	4605      	mov	r5, r0
  sprintf(payload, "{");
   d5d4c:	4620      	mov	r0, r4
   d5d4e:	f004 fbb0 	bl	da4b2 <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   d5d52:	2600      	movs	r6, #0
   d5d54:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d5d58:	429e      	cmp	r6, r3
   d5d5a:	da6a      	bge.n	d5e32 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfe>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5d5c:	68eb      	ldr	r3, [r5, #12]
   d5d5e:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d5d62:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d5d66:	ed93 0a02 	vldr	s0, [r3, #8]
   d5d6a:	a903      	add	r1, sp, #12
   d5d6c:	4628      	mov	r0, r5
   d5d6e:	f7ff ffbf 	bl	d5cf0 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d5d72:	68eb      	ldr	r3, [r5, #12]
   d5d74:	a903      	add	r1, sp, #12
   d5d76:	9100      	str	r1, [sp, #0]
   d5d78:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d5d7c:	4622      	mov	r2, r4
   d5d7e:	4641      	mov	r1, r8
   d5d80:	4620      	mov	r0, r4
   d5d82:	f001 f925 	bl	d6fd0 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5d86:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5d88:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5d8c:	443b      	add	r3, r7
   d5d8e:	68db      	ldr	r3, [r3, #12]
   d5d90:	b343      	cbz	r3, d5de4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d5d92:	4622      	mov	r2, r4
   d5d94:	4649      	mov	r1, r9
   d5d96:	4620      	mov	r0, r4
   d5d98:	f001 f91a 	bl	d6fd0 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d5d9c:	68eb      	ldr	r3, [r5, #12]
   d5d9e:	443b      	add	r3, r7
   d5da0:	691b      	ldr	r3, [r3, #16]
   d5da2:	2b00      	cmp	r3, #0
   d5da4:	d038      	beq.n	d5e18 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d5da6:	200a      	movs	r0, #10
   d5da8:	fb93 f1f0 	sdiv	r1, r3, r0
   d5dac:	fb91 fcf0 	sdiv	ip, r1, r0
   d5db0:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d5db4:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5db8:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d5dba:	2264      	movs	r2, #100	; 0x64
   d5dbc:	fb93 f2f2 	sdiv	r2, r3, r2
   d5dc0:	fb92 fef0 	sdiv	lr, r2, r0
   d5dc4:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5dc8:	9100      	str	r1, [sp, #0]
   d5dca:	fa5f f38c 	uxtb.w	r3, ip
   d5dce:	4929      	ldr	r1, [pc, #164]	; (d5e74 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d5dd0:	b2d2      	uxtb	r2, r2
   d5dd2:	a802      	add	r0, sp, #8
   d5dd4:	f001 f8fc 	bl	d6fd0 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d5dd8:	4927      	ldr	r1, [pc, #156]	; (d5e78 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d5dda:	ab02      	add	r3, sp, #8
   d5ddc:	4622      	mov	r2, r4
   d5dde:	4620      	mov	r0, r4
   d5de0:	f001 f8f6 	bl	d6fd0 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d5de4:	68eb      	ldr	r3, [r5, #12]
   d5de6:	441f      	add	r7, r3
   d5de8:	687b      	ldr	r3, [r7, #4]
   d5dea:	b123      	cbz	r3, d5df6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   d5dec:	4923      	ldr	r1, [pc, #140]	; (d5e7c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d5dee:	4622      	mov	r2, r4
   d5df0:	4620      	mov	r0, r4
   d5df2:	f001 f8ed 	bl	d6fd0 <sprintf>
    sprintf(payload, "%s}", payload);
   d5df6:	4622      	mov	r2, r4
   d5df8:	4921      	ldr	r1, [pc, #132]	; (d5e80 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	f001 f8e8 	bl	d6fd0 <sprintf>
    i++;
   d5e00:	3601      	adds	r6, #1
    if (i < _current_value) {
   d5e02:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d5e06:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d5e08:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d5e0a:	4622      	mov	r2, r4
    if (i < _current_value) {
   d5e0c:	da0a      	bge.n	d5e24 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf0>
      sprintf(payload, "%s,", payload);
   d5e0e:	491d      	ldr	r1, [pc, #116]	; (d5e84 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d5e10:	4620      	mov	r0, r4
   d5e12:	f001 f8dd 	bl	d6fd0 <sprintf>
   d5e16:	e79d      	b.n	d5d54 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   d5e18:	4622      	mov	r2, r4
   d5e1a:	4651      	mov	r1, sl
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	f001 f8d7 	bl	d6fd0 <sprintf>
   d5e22:	e7df      	b.n	d5de4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s}", payload);
   d5e24:	4916      	ldr	r1, [pc, #88]	; (d5e80 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d5e26:	4620      	mov	r0, r4
   d5e28:	f001 f8d2 	bl	d6fd0 <sprintf>
      _current_value = 0;
   d5e2c:	2300      	movs	r3, #0
   d5e2e:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d5e30:	e790      	b.n	d5d54 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   d5e32:	7cab      	ldrb	r3, [r5, #18]
   d5e34:	b1c3      	cbz	r3, d5e68 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>
    Serial.println("----------");
   d5e36:	f003 f8a5 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5e3a:	4913      	ldr	r1, [pc, #76]	; (d5e88 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d5e3c:	f002 f89f 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d5e40:	f003 f8a0 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5e44:	4911      	ldr	r1, [pc, #68]	; (d5e8c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d5e46:	f002 f89a 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d5e4a:	f003 f89b 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5e4e:	4621      	mov	r1, r4
   d5e50:	f002 f895 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d5e54:	f003 f896 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5e58:	490b      	ldr	r1, [pc, #44]	; (d5e88 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d5e5a:	f002 f890 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d5e5e:	f003 f891 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5e62:	490b      	ldr	r1, [pc, #44]	; (d5e90 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d5e64:	f002 f88b 	bl	d7f7e <_ZN5Print7printlnEPKc>
}
   d5e68:	b009      	add	sp, #36	; 0x24
   d5e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5e6e:	bf00      	nop
   d5e70:	000dc8ec 	.word	0x000dc8ec
   d5e74:	000dc914 	.word	0x000dc914
   d5e78:	000dc91b 	.word	0x000dc91b
   d5e7c:	000dc926 	.word	0x000dc926
   d5e80:	000dc935 	.word	0x000dc935
   d5e84:	000dc939 	.word	0x000dc939
   d5e88:	000dc6c7 	.word	0x000dc6c7
   d5e8c:	000dc93d 	.word	0x000dc93d
   d5e90:	000dc84f 	.word	0x000dc84f
   d5e94:	000dc8ee 	.word	0x000dc8ee
   d5e98:	000dc901 	.word	0x000dc901
   d5e9c:	000dc920 	.word	0x000dc920

000d5ea0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d5ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ea4:	460c      	mov	r4, r1
   d5ea6:	4605      	mov	r5, r0
   d5ea8:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d5eaa:	4952      	ldr	r1, [pc, #328]	; (d5ff4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d5eac:	f8df 8174 	ldr.w	r8, [pc, #372]	; d6024 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d5eb0:	f8df 9174 	ldr.w	r9, [pc, #372]	; d6028 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  sprintf(payload, "");
   d5eb4:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d5eb6:	4616      	mov	r6, r2
   d5eb8:	461f      	mov	r7, r3
  sprintf(payload, "");
   d5eba:	f004 fafa 	bl	da4b2 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d5ebe:	68ab      	ldr	r3, [r5, #8]
   d5ec0:	4a4d      	ldr	r2, [pc, #308]	; (d5ff8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d5ec2:	494e      	ldr	r1, [pc, #312]	; (d5ffc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d5ec4:	4620      	mov	r0, r4
   d5ec6:	f001 f883 	bl	d6fd0 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d5eca:	4633      	mov	r3, r6
   d5ecc:	494c      	ldr	r1, [pc, #304]	; (d6000 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d5ece:	9700      	str	r7, [sp, #0]
   d5ed0:	4622      	mov	r2, r4
   d5ed2:	4620      	mov	r0, r4
   d5ed4:	f001 f87c 	bl	d6fd0 <sprintf>
  sprintf(payload, "%s=>", payload);
   d5ed8:	494a      	ldr	r1, [pc, #296]	; (d6004 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d5eda:	4f49      	ldr	r7, [pc, #292]	; (d6000 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
  sprintf(payload, "%s=>", payload);
   d5edc:	4622      	mov	r2, r4
   d5ede:	4620      	mov	r0, r4
   d5ee0:	f001 f876 	bl	d6fd0 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d5ee4:	2600      	movs	r6, #0
   d5ee6:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d5eea:	429e      	cmp	r6, r3
   d5eec:	da64      	bge.n	d5fb8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5eee:	68eb      	ldr	r3, [r5, #12]
   d5ef0:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d5ef4:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d5ef8:	ed93 0a02 	vldr	s0, [r3, #8]
   d5efc:	a903      	add	r1, sp, #12
   d5efe:	4628      	mov	r0, r5
   d5f00:	f7ff fef6 	bl	d5cf0 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d5f04:	68eb      	ldr	r3, [r5, #12]
   d5f06:	a903      	add	r1, sp, #12
   d5f08:	9100      	str	r1, [sp, #0]
   d5f0a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d5f0e:	4622      	mov	r2, r4
   d5f10:	4639      	mov	r1, r7
   d5f12:	4620      	mov	r0, r4
   d5f14:	f001 f85c 	bl	d6fd0 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d5f18:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5f1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   d5f1e:	4453      	add	r3, sl
   d5f20:	685b      	ldr	r3, [r3, #4]
   d5f22:	b123      	cbz	r3, d5f2e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d5f24:	4622      	mov	r2, r4
   d5f26:	4641      	mov	r1, r8
   d5f28:	4620      	mov	r0, r4
   d5f2a:	f001 f851 	bl	d6fd0 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5f2e:	68eb      	ldr	r3, [r5, #12]
   d5f30:	4453      	add	r3, sl
   d5f32:	68db      	ldr	r3, [r3, #12]
   d5f34:	b33b      	cbz	r3, d5f86 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d5f36:	4622      	mov	r2, r4
   d5f38:	4649      	mov	r1, r9
   d5f3a:	4620      	mov	r0, r4
   d5f3c:	f001 f848 	bl	d6fd0 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d5f40:	68eb      	ldr	r3, [r5, #12]
   d5f42:	4453      	add	r3, sl
   d5f44:	691b      	ldr	r3, [r3, #16]
   d5f46:	b353      	cbz	r3, d5f9e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d5f48:	200a      	movs	r0, #10
   d5f4a:	fb93 f1f0 	sdiv	r1, r3, r0
   d5f4e:	fb91 fcf0 	sdiv	ip, r1, r0
   d5f52:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d5f56:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5f5a:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d5f5c:	2264      	movs	r2, #100	; 0x64
   d5f5e:	fb93 f2f2 	sdiv	r2, r3, r2
   d5f62:	fb92 fef0 	sdiv	lr, r2, r0
   d5f66:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5f6a:	9100      	str	r1, [sp, #0]
   d5f6c:	fa5f f38c 	uxtb.w	r3, ip
   d5f70:	4925      	ldr	r1, [pc, #148]	; (d6008 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d5f72:	b2d2      	uxtb	r2, r2
   d5f74:	a802      	add	r0, sp, #8
   d5f76:	f001 f82b 	bl	d6fd0 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d5f7a:	4924      	ldr	r1, [pc, #144]	; (d600c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d5f7c:	ab02      	add	r3, sp, #8
   d5f7e:	4622      	mov	r2, r4
   d5f80:	4620      	mov	r0, r4
   d5f82:	f001 f825 	bl	d6fd0 <sprintf>
    if (i < _current_value) {
   d5f86:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d5f8a:	3601      	adds	r6, #1
   d5f8c:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d5f8e:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d5f90:	4622      	mov	r2, r4
    if (i < _current_value) {
   d5f92:	da0a      	bge.n	d5faa <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
   d5f94:	491e      	ldr	r1, [pc, #120]	; (d6010 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d5f96:	4620      	mov	r0, r4
   d5f98:	f001 f81a 	bl	d6fd0 <sprintf>
   d5f9c:	e7a3      	b.n	d5ee6 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   d5f9e:	491d      	ldr	r1, [pc, #116]	; (d6014 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d5fa0:	4622      	mov	r2, r4
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f001 f814 	bl	d6fd0 <sprintf>
   d5fa8:	e7ed      	b.n	d5f86 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
   d5faa:	491b      	ldr	r1, [pc, #108]	; (d6018 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d5fac:	4620      	mov	r0, r4
   d5fae:	f001 f80f 	bl	d6fd0 <sprintf>
      _current_value = 0;
   d5fb2:	2300      	movs	r3, #0
   d5fb4:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d5fb6:	e796      	b.n	d5ee6 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   d5fb8:	7cab      	ldrb	r3, [r5, #18]
   d5fba:	b1c3      	cbz	r3, d5fee <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
   d5fbc:	f002 ffe2 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5fc0:	4916      	ldr	r1, [pc, #88]	; (d601c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d5fc2:	f001 ffdc 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d5fc6:	f002 ffdd 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5fca:	4915      	ldr	r1, [pc, #84]	; (d6020 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d5fcc:	f001 ffd7 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d5fd0:	f002 ffd8 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5fd4:	4621      	mov	r1, r4
   d5fd6:	f001 ffd2 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d5fda:	f002 ffd3 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5fde:	490f      	ldr	r1, [pc, #60]	; (d601c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d5fe0:	f001 ffcd 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("");
   d5fe4:	f002 ffce 	bl	d8f84 <_Z16_fetch_usbserialv>
   d5fe8:	4902      	ldr	r1, [pc, #8]	; (d5ff4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d5fea:	f001 ffc8 	bl	d7f7e <_ZN5Print7printlnEPKc>
}
   d5fee:	b009      	add	sp, #36	; 0x24
   d5ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ff4:	000dc84f 	.word	0x000dc84f
   d5ff8:	000dc664 	.word	0x000dc664
   d5ffc:	000dc946 	.word	0x000dc946
   d6000:	000dc952 	.word	0x000dc952
   d6004:	000dc95a 	.word	0x000dc95a
   d6008:	000dc914 	.word	0x000dc914
   d600c:	000dc91b 	.word	0x000dc91b
   d6010:	000dc939 	.word	0x000dc939
   d6014:	000dc920 	.word	0x000dc920
   d6018:	000dc96c 	.word	0x000dc96c
   d601c:	000dc6c7 	.word	0x000dc6c7
   d6020:	000dc93d 	.word	0x000dc93d
   d6024:	000dc95f 	.word	0x000dc95f
   d6028:	000dc965 	.word	0x000dc965

000d602c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d602c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6030:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6032:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d6036:	461e      	mov	r6, r3
   d6038:	460f      	mov	r7, r1
   d603a:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d603c:	f000 ffb0 	bl	d6fa0 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6040:	7ce3      	ldrb	r3, [r4, #19]
   d6042:	3b01      	subs	r3, #1
   d6044:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6046:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6048:	d826      	bhi.n	d6098 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   d604a:	4601      	mov	r1, r0
   d604c:	4643      	mov	r3, r8
   d604e:	463a      	mov	r2, r7
   d6050:	4620      	mov	r0, r4
   d6052:	f7ff ff25 	bl	d5ea0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   d6056:	7ca3      	ldrb	r3, [r4, #18]
   d6058:	b123      	cbz	r3, d6064 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   d605a:	f002 ff93 	bl	d8f84 <_Z16_fetch_usbserialv>
   d605e:	4911      	ldr	r1, [pc, #68]	; (d60a4 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   d6060:	f001 ff8d 	bl	d7f7e <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d6064:	6860      	ldr	r0, [r4, #4]
   d6066:	6803      	ldr	r3, [r0, #0]
   d6068:	9600      	str	r6, [sp, #0]
   d606a:	f8d3 9000 	ldr.w	r9, [r3]
   d606e:	4639      	mov	r1, r7
   d6070:	462b      	mov	r3, r5
   d6072:	4642      	mov	r2, r8
   d6074:	47c8      	blx	r9
   d6076:	4607      	mov	r7, r0
  free(payload);
   d6078:	4628      	mov	r0, r5
   d607a:	f000 ff99 	bl	d6fb0 <free>
  delete flags;
   d607e:	b11e      	cbz	r6, d6088 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   d6080:	2101      	movs	r1, #1
   d6082:	4630      	mov	r0, r6
   d6084:	f003 f923 	bl	d92ce <_ZdlPvj>
  if (result) {
   d6088:	2300      	movs	r3, #0
   d608a:	b107      	cbz	r7, d608e <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   d608c:	7463      	strb	r3, [r4, #17]
}
   d608e:	4638      	mov	r0, r7
  _current_value = 0;
   d6090:	7423      	strb	r3, [r4, #16]
}
   d6092:	b003      	add	sp, #12
   d6094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   d6098:	4601      	mov	r1, r0
   d609a:	4620      	mov	r0, r4
   d609c:	f7ff fe4a 	bl	d5d34 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   d60a0:	e7d9      	b.n	d6056 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   d60a2:	bf00      	nop
   d60a4:	000dc973 	.word	0x000dc973

000d60a8 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d60a8:	b570      	push	{r4, r5, r6, lr}
   d60aa:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d60ac:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d60ae:	460d      	mov	r5, r1
   d60b0:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d60b2:	f7fd fff0 	bl	d4096 <_Znwj>
  flags->particle_flag = flag;
   d60b6:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   d60b8:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   d60ba:	462a      	mov	r2, r5
   d60bc:	4629      	mov	r1, r5
   d60be:	4620      	mov	r0, r4
}
   d60c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   d60c4:	f7ff bfb2 	b.w	d602c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d60c8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d60c8:	b570      	push	{r4, r5, r6, lr}
   d60ca:	4605      	mov	r5, r0
   d60cc:	460c      	mov	r4, r1
      while (__x != 0)
   d60ce:	b184      	cbz	r4, d60f2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	  _M_erase(_S_right(__x));
   d60d0:	68e1      	ldr	r1, [r4, #12]
   d60d2:	4628      	mov	r0, r5
   d60d4:	f7ff fff8 	bl	d60c8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      if (_M_manager)
   d60d8:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
   d60da:	68a6      	ldr	r6, [r4, #8]
   d60dc:	b123      	cbz	r3, d60e8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
    class function<_Res(_ArgTypes...)>
   d60de:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d60e2:	2203      	movs	r2, #3
   d60e4:	4608      	mov	r0, r1
   d60e6:	4798      	blx	r3
   d60e8:	4620      	mov	r0, r4
   d60ea:	f7fd ffd8 	bl	d409e <_ZdlPv>
	  __x = __y;
   d60ee:	4634      	mov	r4, r6
      }
   d60f0:	e7ed      	b.n	d60ce <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
    }
   d60f2:	bd70      	pop	{r4, r5, r6, pc}

000d60f4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   d60f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d60f6:	b08d      	sub	sp, #52	; 0x34
   d60f8:	4604      	mov	r4, r0
   d60fa:	a801      	add	r0, sp, #4
   d60fc:	460d      	mov	r5, r1
   d60fe:	4617      	mov	r7, r2
   d6100:	461e      	mov	r6, r3
   d6102:	f000 fecd 	bl	d6ea0 <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
   d6106:	9803      	ldr	r0, [sp, #12]
   d6108:	3001      	adds	r0, #1
   d610a:	f7fd ffc6 	bl	d409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d610e:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   d6110:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d6112:	f004 f9ce 	bl	da4b2 <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
   d6116:	462a      	mov	r2, r5
   d6118:	4633      	mov	r3, r6
   d611a:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
   d611c:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d611e:	a805      	add	r0, sp, #20
   d6120:	f7ff f980 	bl	d5424 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d6124:	20c8      	movs	r0, #200	; 0xc8
   d6126:	f000 ff3b 	bl	d6fa0 <malloc>
   d612a:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d612c:	a805      	add	r0, sp, #20
   d612e:	f7ff f89d 	bl	d526c <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
   d6132:	2300      	movs	r3, #0
  _token = token;
   d6134:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
   d6138:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
   d613a:	7423      	strb	r3, [r4, #16]
   d613c:	a806      	add	r0, sp, #24
   d613e:	f7ff ffc3 	bl	d60c8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
   d6142:	a801      	add	r0, sp, #4
   d6144:	f001 ffc0 	bl	d80c8 <_ZN6StringD1Ev>
}
   d6148:	b00d      	add	sp, #52	; 0x34
   d614a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d614c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   d614c:	b538      	push	{r3, r4, r5, lr}
   d614e:	2500      	movs	r5, #0
   d6150:	4604      	mov	r4, r0
   d6152:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   d6154:	f7ff ffce 	bl	d60f4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d6158:	4620      	mov	r0, r4
   d615a:	bd38      	pop	{r3, r4, r5, pc}

000d615c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d615c:	b570      	push	{r4, r5, r6, lr}
   d615e:	4605      	mov	r5, r0
   d6160:	460c      	mov	r4, r1
      while (__x != 0)
   d6162:	b14c      	cbz	r4, d6178 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x1c>
	  _M_erase(_S_right(__x));
   d6164:	68e1      	ldr	r1, [r4, #12]
   d6166:	4628      	mov	r0, r5
   d6168:	f7ff fff8 	bl	d615c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
   d616c:	68a6      	ldr	r6, [r4, #8]
   d616e:	4620      	mov	r0, r4
   d6170:	f7fd ff95 	bl	d409e <_ZdlPv>
	  __x = __y;
   d6174:	4634      	mov	r4, r6
      while (__x != 0)
   d6176:	e7f4      	b.n	d6162 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x6>
    }
   d6178:	bd70      	pop	{r4, r5, r6, pc}
	...

000d617c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   d617c:	b510      	push	{r4, lr}
        val_(val) {
   d617e:	4b10      	ldr	r3, [pc, #64]	; (d61c0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x44>)
   d6180:	4c10      	ldr	r4, [pc, #64]	; (d61c4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x48>)
   d6182:	2200      	movs	r2, #0
   d6184:	701a      	strb	r2, [r3, #0]
   d6186:	4620      	mov	r0, r4
   d6188:	f002 fab2 	bl	d86f0 <_ZN9TCPClientC1Ev>
   d618c:	4620      	mov	r0, r4
   d618e:	4c0e      	ldr	r4, [pc, #56]	; (d61c8 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x4c>)
   d6190:	4a0e      	ldr	r2, [pc, #56]	; (d61cc <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6192:	490f      	ldr	r1, [pc, #60]	; (d61d0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d6194:	f003 f896 	bl	d92c4 <__aeabi_atexit>
   d6198:	4620      	mov	r0, r4
   d619a:	f002 faa9 	bl	d86f0 <_ZN9TCPClientC1Ev>
   d619e:	4620      	mov	r0, r4
   d61a0:	4c0c      	ldr	r4, [pc, #48]	; (d61d4 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x58>)
   d61a2:	4a0a      	ldr	r2, [pc, #40]	; (d61cc <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d61a4:	490a      	ldr	r1, [pc, #40]	; (d61d0 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d61a6:	f003 f88d 	bl	d92c4 <__aeabi_atexit>
   d61aa:	4620      	mov	r0, r4
   d61ac:	f002 fcbc 	bl	d8b28 <_ZN3UDPC1Ev>
   d61b0:	4620      	mov	r0, r4
   d61b2:	4a06      	ldr	r2, [pc, #24]	; (d61cc <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d61b4:	4908      	ldr	r1, [pc, #32]	; (d61d8 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x5c>)
   d61b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d61ba:	f003 b883 	b.w	d92c4 <__aeabi_atexit>
   d61be:	bf00      	nop
   d61c0:	2003e5b0 	.word	0x2003e5b0
   d61c4:	2003e594 	.word	0x2003e594
   d61c8:	2003e52c 	.word	0x2003e52c
   d61cc:	2003e428 	.word	0x2003e428
   d61d0:	000d51b5 	.word	0x000d51b5
   d61d4:	2003e548 	.word	0x2003e548
   d61d8:	000d5195 	.word	0x000d5195

000d61dc <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d61dc:	7501      	strb	r1, [r0, #20]
   d61de:	4770      	bx	lr

000d61e0 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d61e0:	b530      	push	{r4, r5, lr}
   d61e2:	4d06      	ldr	r5, [pc, #24]	; (d61fc <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d61e4:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d61e6:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d61ea:	2500      	movs	r5, #0
  _token = token;
   d61ec:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d61ee:	7505      	strb	r5, [r0, #20]
   d61f0:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d61f4:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d61f8:	6185      	str	r5, [r0, #24]
}
   d61fa:	bd30      	pop	{r4, r5, pc}
   d61fc:	000dca20 	.word	0x000dca20

000d6200 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   d6200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6204:	460d      	mov	r5, r1
   d6206:	4617      	mov	r7, r2
   d6208:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   d620a:	f002 febb 	bl	d8f84 <_Z16_fetch_usbserialv>
   d620e:	491e      	ldr	r1, [pc, #120]	; (d6288 <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6210:	4e1e      	ldr	r6, [pc, #120]	; (d628c <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   d6212:	f8df a07c 	ldr.w	sl, [pc, #124]	; d6290 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   d6216:	f8df b07c 	ldr.w	fp, [pc, #124]	; d6294 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   d621a:	f001 feb0 	bl	d7f7e <_ZN5Print7printlnEPKc>
   d621e:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6220:	4630      	mov	r0, r6
   d6222:	f002 fa2c 	bl	d867e <_ZN9TCPClient6statusEv>
   d6226:	bb60      	cbnz	r0, d6282 <_ZN6UbiTCP9reconnectEPKci+0x82>
   d6228:	2c05      	cmp	r4, #5
   d622a:	d02a      	beq.n	d6282 <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   d622c:	f898 3014 	ldrb.w	r3, [r8, #20]
   d6230:	b1c3      	cbz	r3, d6264 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   d6232:	f002 fea7 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6236:	4651      	mov	r1, sl
   d6238:	f001 fe8e 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(host);
   d623c:	f002 fea2 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6240:	4629      	mov	r1, r5
   d6242:	f001 fe89 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d6246:	f002 fe9d 	bl	d8f84 <_Z16_fetch_usbserialv>
   d624a:	4659      	mov	r1, fp
   d624c:	f001 fe84 	bl	d7f58 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d6250:	f002 fe98 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6254:	220a      	movs	r2, #10
   d6256:	4681      	mov	r9, r0
   d6258:	4621      	mov	r1, r4
   d625a:	f001 fe9a 	bl	d7f92 <_ZN5Print11printNumberEmh>
        n += println();
   d625e:	4648      	mov	r0, r9
   d6260:	f001 fe81 	bl	d7f66 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   d6264:	4630      	mov	r0, r6
   d6266:	f002 f9f3 	bl	d8650 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d626a:	2300      	movs	r3, #0
   d626c:	b2ba      	uxth	r2, r7
   d626e:	4629      	mov	r1, r5
   d6270:	4630      	mov	r0, r6
   d6272:	f002 fa61 	bl	d8738 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   d6276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d627a:	f000 fed1 	bl	d7020 <delay>
   d627e:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6280:	e7ce      	b.n	d6220 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   d6282:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6286:	bf00      	nop
   d6288:	000dc983 	.word	0x000dc983
   d628c:	2003e5b4 	.word	0x2003e5b4
   d6290:	000dc678 	.word	0x000dc678
   d6294:	000dc68e 	.word	0x000dc68e

000d6298 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d6298:	b570      	push	{r4, r5, r6, lr}
   d629a:	4604      	mov	r4, r0
   d629c:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   d629e:	6881      	ldr	r1, [r0, #8]
   d62a0:	482e      	ldr	r0, [pc, #184]	; (d635c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d62a2:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   d62a4:	f001 fe58 	bl	d7f58 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   d62a8:	492d      	ldr	r1, [pc, #180]	; (d6360 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d62aa:	482c      	ldr	r0, [pc, #176]	; (d635c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d62ac:	f001 fe54 	bl	d7f58 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   d62b0:	68e1      	ldr	r1, [r4, #12]
   d62b2:	482a      	ldr	r0, [pc, #168]	; (d635c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d62b4:	f001 fe50 	bl	d7f58 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   d62b8:	492a      	ldr	r1, [pc, #168]	; (d6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d62ba:	4828      	ldr	r0, [pc, #160]	; (d635c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d62bc:	f001 fe4c 	bl	d7f58 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   d62c0:	4631      	mov	r1, r6
   d62c2:	4826      	ldr	r0, [pc, #152]	; (d635c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d62c4:	f001 fe48 	bl	d7f58 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   d62c8:	4927      	ldr	r1, [pc, #156]	; (d6368 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d62ca:	4824      	ldr	r0, [pc, #144]	; (d635c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d62cc:	f001 fe44 	bl	d7f58 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   d62d0:	4629      	mov	r1, r5
   d62d2:	4822      	ldr	r0, [pc, #136]	; (d635c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d62d4:	f001 fe40 	bl	d7f58 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   d62d8:	4924      	ldr	r1, [pc, #144]	; (d636c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d62da:	4820      	ldr	r0, [pc, #128]	; (d635c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d62dc:	f001 fe3c 	bl	d7f58 <_ZN5Print5printEPKc>
  if (_debug) {
   d62e0:	7d23      	ldrb	r3, [r4, #20]
   d62e2:	2b00      	cmp	r3, #0
   d62e4:	d038      	beq.n	d6358 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   d62e6:	f002 fe4d 	bl	d8f84 <_Z16_fetch_usbserialv>
   d62ea:	4921      	ldr	r1, [pc, #132]	; (d6370 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   d62ec:	f001 fe47 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   d62f0:	f002 fe48 	bl	d8f84 <_Z16_fetch_usbserialv>
   d62f4:	491f      	ldr	r1, [pc, #124]	; (d6374 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   d62f6:	f001 fe42 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   d62fa:	f002 fe43 	bl	d8f84 <_Z16_fetch_usbserialv>
   d62fe:	68a1      	ldr	r1, [r4, #8]
   d6300:	f001 fe2a 	bl	d7f58 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   d6304:	f002 fe3e 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6308:	4915      	ldr	r1, [pc, #84]	; (d6360 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d630a:	f001 fe25 	bl	d7f58 <_ZN5Print5printEPKc>
    Serial.print(_token);
   d630e:	f002 fe39 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6312:	68e1      	ldr	r1, [r4, #12]
   d6314:	f001 fe20 	bl	d7f58 <_ZN5Print5printEPKc>
    Serial.print("|");
   d6318:	f002 fe34 	bl	d8f84 <_Z16_fetch_usbserialv>
   d631c:	4911      	ldr	r1, [pc, #68]	; (d6364 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d631e:	f001 fe1b 	bl	d7f58 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   d6322:	f002 fe2f 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6326:	4631      	mov	r1, r6
   d6328:	f001 fe16 	bl	d7f58 <_ZN5Print5printEPKc>
    Serial.print(":");
   d632c:	f002 fe2a 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6330:	490d      	ldr	r1, [pc, #52]	; (d6368 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d6332:	f001 fe11 	bl	d7f58 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   d6336:	f002 fe25 	bl	d8f84 <_Z16_fetch_usbserialv>
   d633a:	4629      	mov	r1, r5
   d633c:	f001 fe0c 	bl	d7f58 <_ZN5Print5printEPKc>
    Serial.print("|end");
   d6340:	f002 fe20 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6344:	4909      	ldr	r1, [pc, #36]	; (d636c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d6346:	f001 fe07 	bl	d7f58 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   d634a:	f002 fe1b 	bl	d8f84 <_Z16_fetch_usbserialv>
}
   d634e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   d6352:	4909      	ldr	r1, [pc, #36]	; (d6378 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   d6354:	f001 be13 	b.w	d7f7e <_ZN5Print7printlnEPKc>
}
   d6358:	bd70      	pop	{r4, r5, r6, pc}
   d635a:	bf00      	nop
   d635c:	2003e5b4 	.word	0x2003e5b4
   d6360:	000dc99b 	.word	0x000dc99b
   d6364:	000dc99e 	.word	0x000dc99e
   d6368:	000dc944 	.word	0x000dc944
   d636c:	000dc96e 	.word	0x000dc96e
   d6370:	000dc9b6 	.word	0x000dc9b6
   d6374:	000dc9a0 	.word	0x000dc9a0
   d6378:	000dc9b5 	.word	0x000dc9b5

000d637c <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   d637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d637e:	4f0e      	ldr	r7, [pc, #56]	; (d63b8 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   d6380:	4604      	mov	r4, r0
  int timeout = 0;
   d6382:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6384:	4638      	mov	r0, r7
   d6386:	f002 f909 	bl	d859c <_ZN9TCPClient9availableEv>
   d638a:	4605      	mov	r5, r0
   d638c:	b990      	cbnz	r0, d63b4 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   d638e:	69a3      	ldr	r3, [r4, #24]
   d6390:	42b3      	cmp	r3, r6
   d6392:	dd0f      	ble.n	d63b4 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   d6394:	2001      	movs	r0, #1
   d6396:	f000 fe43 	bl	d7020 <delay>
    if (timeout > _timeout - 1) {
   d639a:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d639c:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d639e:	42b3      	cmp	r3, r6
   d63a0:	dcf0      	bgt.n	d6384 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
   d63a2:	7d20      	ldrb	r0, [r4, #20]
   d63a4:	b128      	cbz	r0, d63b2 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d63a6:	f002 fded 	bl	d8f84 <_Z16_fetch_usbserialv>
   d63aa:	4904      	ldr	r1, [pc, #16]	; (d63bc <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d63ac:	f001 fde7 	bl	d7f7e <_ZN5Print7printlnEPKc>
   d63b0:	4628      	mov	r0, r5
}
   d63b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d63b4:	2001      	movs	r0, #1
   d63b6:	e7fc      	b.n	d63b2 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   d63b8:	2003e5b4 	.word	0x2003e5b4
   d63bc:	000dc6d2 	.word	0x000dc6d2

000d63c0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d63c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   d63c4:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d63c6:	4606      	mov	r6, r0
   d63c8:	4688      	mov	r8, r1
   d63ca:	4614      	mov	r4, r2
  if (_debug) {
   d63cc:	b14b      	cbz	r3, d63e2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d63ce:	f002 fdd9 	bl	d8f84 <_Z16_fetch_usbserialv>
   d63d2:	4927      	ldr	r1, [pc, #156]	; (d6470 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d63d4:	f001 fdd3 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d63d8:	f002 fdd4 	bl	d8f84 <_Z16_fetch_usbserialv>
   d63dc:	4925      	ldr	r1, [pc, #148]	; (d6474 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d63de:	f001 fdce 	bl	d7f7e <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d63e2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d6488 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d63e6:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d63e8:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d63ec:	4648      	mov	r0, r9
   d63ee:	f002 f8d5 	bl	d859c <_ZN9TCPClient9availableEv>
   d63f2:	b178      	cbz	r0, d6414 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   d63f4:	4648      	mov	r0, r9
   d63f6:	f002 f80a 	bl	d840e <_ZN9TCPClient4readEv>
    if (_debug) {
   d63fa:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   d63fc:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d63fe:	b12b      	cbz	r3, d640c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   d6400:	f002 fdc0 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6404:	6803      	ldr	r3, [r0, #0]
   d6406:	4639      	mov	r1, r7
   d6408:	689b      	ldr	r3, [r3, #8]
   d640a:	4798      	blx	r3
    response[j] = c;
   d640c:	5567      	strb	r7, [r4, r5]
    j++;
   d640e:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6410:	4555      	cmp	r5, sl
   d6412:	d1eb      	bne.n	d63ec <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   d6414:	7d33      	ldrb	r3, [r6, #20]
   d6416:	b123      	cbz	r3, d6422 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   d6418:	f002 fdb4 	bl	d8f84 <_Z16_fetch_usbserialv>
   d641c:	4916      	ldr	r1, [pc, #88]	; (d6478 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d641e:	f001 fdae 	bl	d7f7e <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d6422:	2300      	movs	r3, #0
   d6424:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   d6426:	4915      	ldr	r1, [pc, #84]	; (d647c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d6428:	4640      	mov	r0, r8
   d642a:	f004 f838 	bl	da49e <strcmp>
   d642e:	b968      	cbnz	r0, d644c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   d6430:	4913      	ldr	r1, [pc, #76]	; (d6480 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d6432:	4620      	mov	r0, r4
   d6434:	f004 f890 	bl	da558 <strstr>
      result = 1;
   d6438:	ed9f 0a12 	vldr	s0, [pc, #72]	; d6484 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d643c:	2800      	cmp	r0, #0
   d643e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d6442:	bf18      	it	ne
   d6444:	eeb0 0a67 	vmovne.f32	s0, s15
}
   d6448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   d644c:	217c      	movs	r1, #124	; 0x7c
   d644e:	4620      	mov	r0, r4
   d6450:	f004 f818 	bl	da484 <strchr>
  if (pch != NULL) {
   d6454:	b148      	cbz	r0, d646a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   d6456:	3001      	adds	r0, #1
   d6458:	f003 ff96 	bl	da388 <atof>
   d645c:	ec51 0b10 	vmov	r0, r1, d0
   d6460:	f003 fda8 	bl	d9fb4 <__aeabi_d2f>
   d6464:	ee00 0a10 	vmov	s0, r0
   d6468:	e7ee      	b.n	d6448 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   d646a:	ed9f 0a06 	vldr	s0, [pc, #24]	; d6484 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d646e:	e7eb      	b.n	d6448 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   d6470:	000dc6c7 	.word	0x000dc6c7
   d6474:	000dc6b3 	.word	0x000dc6b3
   d6478:	000dc6c6 	.word	0x000dc6c6
   d647c:	000dc9bb 	.word	0x000dc9bb
   d6480:	000dc9c0 	.word	0x000dc9c0
   d6484:	cda2425f 	.word	0xcda2425f
   d6488:	2003e5b4 	.word	0x2003e5b4

000d648c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d648c:	b570      	push	{r4, r5, r6, lr}
   d648e:	ed2d 8b02 	vpush	{d8}
   d6492:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6494:	6841      	ldr	r1, [r0, #4]
   d6496:	4822      	ldr	r0, [pc, #136]	; (d6520 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6498:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d649c:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d649e:	2300      	movs	r3, #0
   d64a0:	f002 f94a 	bl	d8738 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d64a4:	4620      	mov	r0, r4
   d64a6:	6861      	ldr	r1, [r4, #4]
   d64a8:	f242 3234 	movw	r2, #9012	; 0x2334
   d64ac:	f7ff fea8 	bl	d6200 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d64b0:	481b      	ldr	r0, [pc, #108]	; (d6520 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d64b2:	f001 ff10 	bl	d82d6 <_ZN9TCPClient9connectedEv>
   d64b6:	b348      	cbz	r0, d650c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    _client_tcp_ubi.print(payload);
   d64b8:	4629      	mov	r1, r5
   d64ba:	4819      	ldr	r0, [pc, #100]	; (d6520 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d64bc:	f001 fd4c 	bl	d7f58 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   d64c0:	4620      	mov	r0, r4
   d64c2:	f7ff ff5b 	bl	d637c <_ZN6UbiTCP16waitServerAnswerEv>
   d64c6:	4605      	mov	r5, r0
   d64c8:	b938      	cbnz	r0, d64da <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.stop();
   d64ca:	4815      	ldr	r0, [pc, #84]	; (d6520 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d64cc:	f002 f8c0 	bl	d8650 <_ZN9TCPClient4stopEv>
    return false;
   d64d0:	2500      	movs	r5, #0
}
   d64d2:	ecbd 8b02 	vpop	{d8}
   d64d6:	4628      	mov	r0, r5
   d64d8:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
   d64da:	2064      	movs	r0, #100	; 0x64
   d64dc:	f000 fd60 	bl	d6fa0 <malloc>
  float value = parseTCPAnswer("POST", response);
   d64e0:	4910      	ldr	r1, [pc, #64]	; (d6524 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d64e2:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   d64e4:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   d64e6:	4620      	mov	r0, r4
   d64e8:	f7ff ff6a 	bl	d63c0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d64ec:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   d64ee:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d64f2:	f000 fd5d 	bl	d6fb0 <free>
  if (value != ERROR_VALUE) {
   d64f6:	eddf 7a0c 	vldr	s15, [pc, #48]	; d6528 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d64fa:	eeb4 8a67 	vcmp.f32	s16, s15
   d64fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6502:	d0e2      	beq.n	d64ca <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d6504:	4806      	ldr	r0, [pc, #24]	; (d6520 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6506:	f002 f8a3 	bl	d8650 <_ZN9TCPClient4stopEv>
    return true;
   d650a:	e7e2      	b.n	d64d2 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    if (_debug) {
   d650c:	7d23      	ldrb	r3, [r4, #20]
   d650e:	2b00      	cmp	r3, #0
   d6510:	d0db      	beq.n	d64ca <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d6512:	f002 fd37 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6516:	4905      	ldr	r1, [pc, #20]	; (d652c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d6518:	f001 fd31 	bl	d7f7e <_ZN5Print7printlnEPKc>
   d651c:	e7d5      	b.n	d64ca <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
   d651e:	bf00      	nop
   d6520:	2003e5b4 	.word	0x2003e5b4
   d6524:	000dc9bb 	.word	0x000dc9bb
   d6528:	cda2425f 	.word	0xcda2425f
   d652c:	000dc9c3 	.word	0x000dc9c3

000d6530 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d6530:	b570      	push	{r4, r5, r6, lr}
   d6532:	ed2d 8b02 	vpush	{d8}
   d6536:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6538:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d653a:	460d      	mov	r5, r1
   d653c:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d653e:	6841      	ldr	r1, [r0, #4]
   d6540:	481e      	ldr	r0, [pc, #120]	; (d65bc <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d6542:	f242 3234 	movw	r2, #9012	; 0x2334
   d6546:	f002 f8f7 	bl	d8738 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d654a:	4620      	mov	r0, r4
   d654c:	6861      	ldr	r1, [r4, #4]
   d654e:	f242 3234 	movw	r2, #9012	; 0x2334
   d6552:	f7ff fe55 	bl	d6200 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6556:	4819      	ldr	r0, [pc, #100]	; (d65bc <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d6558:	f001 febd 	bl	d82d6 <_ZN9TCPClient9connectedEv>
   d655c:	b328      	cbz	r0, d65aa <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   d655e:	4620      	mov	r0, r4
   d6560:	4632      	mov	r2, r6
   d6562:	4629      	mov	r1, r5
   d6564:	f7ff fe98 	bl	d6298 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d6568:	4620      	mov	r0, r4
   d656a:	f7ff ff07 	bl	d637c <_ZN6UbiTCP16waitServerAnswerEv>
   d656e:	b948      	cbnz	r0, d6584 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   d6570:	4812      	ldr	r0, [pc, #72]	; (d65bc <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   d6572:	ed9f 8a13 	vldr	s16, [pc, #76]	; d65c0 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   d6576:	f002 f86b 	bl	d8650 <_ZN9TCPClient4stopEv>
}
   d657a:	eeb0 0a48 	vmov.f32	s0, s16
   d657e:	ecbd 8b02 	vpop	{d8}
   d6582:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6584:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d6588:	f000 fd0a 	bl	d6fa0 <malloc>
    float value = parseTCPAnswer("LV", response);
   d658c:	490d      	ldr	r1, [pc, #52]	; (d65c4 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   d658e:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6590:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d6592:	4620      	mov	r0, r4
   d6594:	f7ff ff14 	bl	d63c0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d6598:	4808      	ldr	r0, [pc, #32]	; (d65bc <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   d659a:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d659e:	f002 f857 	bl	d8650 <_ZN9TCPClient4stopEv>
    free(response);
   d65a2:	4628      	mov	r0, r5
   d65a4:	f000 fd04 	bl	d6fb0 <free>
    return value;
   d65a8:	e7e7      	b.n	d657a <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   d65aa:	7d23      	ldrb	r3, [r4, #20]
   d65ac:	2b00      	cmp	r3, #0
   d65ae:	d0df      	beq.n	d6570 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   d65b0:	f002 fce8 	bl	d8f84 <_Z16_fetch_usbserialv>
   d65b4:	4904      	ldr	r1, [pc, #16]	; (d65c8 <_ZN6UbiTCP3getEPKcS1_+0x98>)
   d65b6:	f001 fce2 	bl	d7f7e <_ZN5Print7printlnEPKc>
   d65ba:	e7d9      	b.n	d6570 <_ZN6UbiTCP3getEPKcS1_+0x40>
   d65bc:	2003e5b4 	.word	0x2003e5b4
   d65c0:	cda2425f 	.word	0xcda2425f
   d65c4:	000dc9e1 	.word	0x000dc9e1
   d65c8:	000dc9e4 	.word	0x000dc9e4

000d65cc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d65cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d65d0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d65d2:	2018      	movs	r0, #24
   d65d4:	4615      	mov	r5, r2
   d65d6:	460f      	mov	r7, r1
   d65d8:	f7fd fd5d 	bl	d4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   d65dc:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   d65e0:	686b      	ldr	r3, [r5, #4]
   d65e2:	f8d5 9000 	ldr.w	r9, [r5]
      _Link_type __x = _M_begin();
   d65e6:	68ba      	ldr	r2, [r7, #8]
   d65e8:	6143      	str	r3, [r0, #20]
   d65ea:	4606      	mov	r6, r0
   d65ec:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   d65f0:	4655      	mov	r5, sl
      bool __comp = true;
   d65f2:	2301      	movs	r3, #1
      while (__x != 0)
   d65f4:	b152      	cbz	r2, d660c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d65f6:	6913      	ldr	r3, [r2, #16]
   d65f8:	454b      	cmp	r3, r9
   d65fa:	bfcc      	ite	gt
   d65fc:	6891      	ldrgt	r1, [r2, #8]
   d65fe:	68d1      	ldrle	r1, [r2, #12]
   d6600:	4615      	mov	r5, r2
   d6602:	bfcc      	ite	gt
   d6604:	2301      	movgt	r3, #1
   d6606:	2300      	movle	r3, #0
   d6608:	460a      	mov	r2, r1
   d660a:	e7f3      	b.n	d65f4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   d660c:	b1a3      	cbz	r3, d6638 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6c>
	  if (__j == begin())
   d660e:	68fb      	ldr	r3, [r7, #12]
   d6610:	42ab      	cmp	r3, r5
   d6612:	d023      	beq.n	d665c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	_M_node = _Rb_tree_decrement(_M_node);
   d6614:	4628      	mov	r0, r5
   d6616:	f002 feb4 	bl	d9382 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d661a:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d661c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   d6620:	454b      	cmp	r3, r9
   d6622:	db1b      	blt.n	d665c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	::operator delete(__p);
   d6624:	4630      	mov	r0, r6
   d6626:	f7fd fd3a 	bl	d409e <_ZdlPv>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d662a:	f8c4 8000 	str.w	r8, [r4]
   d662e:	2300      	movs	r3, #0
   d6630:	7123      	strb	r3, [r4, #4]
      }
   d6632:	4620      	mov	r0, r4
   d6634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6638:	46a8      	mov	r8, r5
   d663a:	e7ef      	b.n	d661c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   d663c:	6928      	ldr	r0, [r5, #16]
   d663e:	4581      	cmp	r9, r0
   d6640:	bfac      	ite	ge
   d6642:	2000      	movge	r0, #0
   d6644:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d6646:	4653      	mov	r3, sl
   d6648:	462a      	mov	r2, r5
   d664a:	4631      	mov	r1, r6
   d664c:	f002 fe9b 	bl	d9386 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d6650:	697b      	ldr	r3, [r7, #20]
   d6652:	6026      	str	r6, [r4, #0]
   d6654:	3301      	adds	r3, #1
   d6656:	617b      	str	r3, [r7, #20]
   d6658:	2301      	movs	r3, #1
   d665a:	e7e9      	b.n	d6630 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x64>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d665c:	45aa      	cmp	sl, r5
   d665e:	d1ed      	bne.n	d663c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x70>
			    || _M_impl._M_key_compare(_S_key(__z),
   d6660:	2001      	movs	r0, #1
   d6662:	e7f0      	b.n	d6646 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7a>

000d6664 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   d6664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d6668:	460d      	mov	r5, r1
   d666a:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d666c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d6670:	f000 fc96 	bl	d6fa0 <malloc>
  if (_debug) {
   d6674:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6676:	4607      	mov	r7, r0
  if (_debug) {
   d6678:	b14b      	cbz	r3, d668e <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   d667a:	f002 fc83 	bl	d8f84 <_Z16_fetch_usbserialv>
   d667e:	493a      	ldr	r1, [pc, #232]	; (d6768 <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   d6680:	f001 fc7d 	bl	d7f7e <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6684:	f002 fc7e 	bl	d8f84 <_Z16_fetch_usbserialv>
   d6688:	4938      	ldr	r1, [pc, #224]	; (d676c <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   d668a:	f001 fc78 	bl	d7f7e <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d668e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d6780 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   d6692:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6694:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d6698:	4648      	mov	r0, r9
   d669a:	f001 ff7f 	bl	d859c <_ZN9TCPClient9availableEv>
   d669e:	b188      	cbz	r0, d66c4 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   d66a0:	4648      	mov	r0, r9
   d66a2:	f001 feb4 	bl	d840e <_ZN9TCPClient4readEv>
    if (_debug) {
   d66a6:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   d66a8:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   d66ac:	b12b      	cbz	r3, d66ba <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   d66ae:	f002 fc69 	bl	d8f84 <_Z16_fetch_usbserialv>
   d66b2:	6803      	ldr	r3, [r0, #0]
   d66b4:	4641      	mov	r1, r8
   d66b6:	689b      	ldr	r3, [r3, #8]
   d66b8:	4798      	blx	r3
    response[j] = c;
   d66ba:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   d66be:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d66c0:	4556      	cmp	r6, sl
   d66c2:	d1e9      	bne.n	d6698 <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   d66c4:	7d2b      	ldrb	r3, [r5, #20]
   d66c6:	b123      	cbz	r3, d66d2 <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   d66c8:	f002 fc5c 	bl	d8f84 <_Z16_fetch_usbserialv>
   d66cc:	4928      	ldr	r1, [pc, #160]	; (d6770 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   d66ce:	f001 fc56 	bl	d7f7e <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d66d2:	2500      	movs	r5, #0
	  : _Node_allocator()
   d66d4:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   d66d6:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   d66da:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   d66de:	4925      	ldr	r1, [pc, #148]	; (d6774 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   d66e0:	7125      	strb	r5, [r4, #4]
   d66e2:	4638      	mov	r0, r7
  response[j] = '\0';
   d66e4:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   d66e6:	f004 fd81 	bl	db1ec <strtok>
    if (strcmp(token, "OK") == 0) {
   d66ea:	f8df 9098 	ldr.w	r9, [pc, #152]	; d6784 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   d66ee:	f8df a098 	ldr.w	sl, [pc, #152]	; d6788 <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   d66f2:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6774 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   d66f6:	4606      	mov	r6, r0
  while (token != NULL) {
   d66f8:	b37e      	cbz	r6, d675a <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   d66fa:	4649      	mov	r1, r9
   d66fc:	4630      	mov	r0, r6
   d66fe:	f003 fece 	bl	da49e <strcmp>
   d6702:	bb00      	cbnz	r0, d6746 <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   d6704:	4641      	mov	r1, r8
   d6706:	f004 fd71 	bl	db1ec <strtok>
      if (strcmp(token, "null") == 0) {
   d670a:	491b      	ldr	r1, [pc, #108]	; (d6778 <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   d670c:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   d670e:	f003 fec6 	bl	da49e <strcmp>
   d6712:	b918      	cbnz	r0, d671c <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d6714:	4b19      	ldr	r3, [pc, #100]	; (d677c <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   d6716:	9500      	str	r5, [sp, #0]
   d6718:	9301      	str	r3, [sp, #4]
   d671a:	e008      	b.n	d672e <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   d671c:	4630      	mov	r0, r6
   d671e:	f003 fe33 	bl	da388 <atof>
   d6722:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d6726:	9500      	str	r5, [sp, #0]
   d6728:	f003 fc44 	bl	d9fb4 <__aeabi_d2f>
   d672c:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   d672e:	466a      	mov	r2, sp
   d6730:	4621      	mov	r1, r4
   d6732:	a802      	add	r0, sp, #8
   d6734:	f7ff ff4a 	bl	d65cc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   d6738:	4641      	mov	r1, r8
   d673a:	2000      	movs	r0, #0
   d673c:	f004 fd56 	bl	db1ec <strtok>
    mapKey++;
   d6740:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   d6742:	4606      	mov	r6, r0
  while (token != NULL) {
   d6744:	e7d8      	b.n	d66f8 <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   d6746:	4651      	mov	r1, sl
   d6748:	4630      	mov	r0, r6
   d674a:	f003 fea8 	bl	da49e <strcmp>
   d674e:	2800      	cmp	r0, #0
   d6750:	d1f2      	bne.n	d6738 <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   d6752:	4641      	mov	r1, r8
   d6754:	f004 fd4a 	bl	db1ec <strtok>
   d6758:	e7dc      	b.n	d6714 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   d675a:	4638      	mov	r0, r7
   d675c:	f000 fc28 	bl	d6fb0 <free>
}
   d6760:	4620      	mov	r0, r4
   d6762:	b004      	add	sp, #16
   d6764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6768:	000dc6c7 	.word	0x000dc6c7
   d676c:	000dc6b3 	.word	0x000dc6b3
   d6770:	000dc6c6 	.word	0x000dc6c6
   d6774:	000dc99e 	.word	0x000dc99e
   d6778:	000dca0a 	.word	0x000dca0a
   d677c:	cda2425f 	.word	0xcda2425f
   d6780:	2003e5b4 	.word	0x2003e5b4
   d6784:	000dc9c0 	.word	0x000dc9c0
   d6788:	000dca0f 	.word	0x000dca0f

000d678c <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   d6790:	1d07      	adds	r7, r0, #4
   d6792:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   d6794:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d6796:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   d679a:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   d679e:	7103      	strb	r3, [r0, #4]
   d67a0:	460d      	mov	r5, r1
   d67a2:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d67a4:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d67a6:	4604      	mov	r4, r0
   d67a8:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d67aa:	482e      	ldr	r0, [pc, #184]	; (d6864 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d67ac:	f242 3234 	movw	r2, #9012	; 0x2334
   d67b0:	f001 ffc2 	bl	d8738 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d67b4:	4628      	mov	r0, r5
   d67b6:	6869      	ldr	r1, [r5, #4]
   d67b8:	f242 3234 	movw	r2, #9012	; 0x2334
   d67bc:	f7ff fd20 	bl	d6200 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d67c0:	4828      	ldr	r0, [pc, #160]	; (d6864 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d67c2:	f001 fd88 	bl	d82d6 <_ZN9TCPClient9connectedEv>
   d67c6:	b310      	cbz	r0, d680e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   d67c8:	4631      	mov	r1, r6
   d67ca:	4642      	mov	r2, r8
   d67cc:	4628      	mov	r0, r5
   d67ce:	f7ff fd63 	bl	d6298 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d67d2:	4628      	mov	r0, r5
   d67d4:	f7ff fdd2 	bl	d637c <_ZN6UbiTCP16waitServerAnswerEv>
   d67d8:	4606      	mov	r6, r0
   d67da:	b9c0      	cbnz	r0, d680e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   d67dc:	4821      	ldr	r0, [pc, #132]	; (d6864 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   d67de:	4f22      	ldr	r7, [pc, #136]	; (d6868 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   d67e0:	f001 ff36 	bl	d8650 <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   d67e4:	4921      	ldr	r1, [pc, #132]	; (d686c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
   d67e6:	4640      	mov	r0, r8
   d67e8:	f004 fd00 	bl	db1ec <strtok>
      int mapKey = 0;
   d67ec:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   d67ee:	4e1f      	ldr	r6, [pc, #124]	; (d686c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
      while (token != NULL) {
   d67f0:	2800      	cmp	r0, #0
   d67f2:	d032      	beq.n	d685a <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xce>
   d67f4:	4621      	mov	r1, r4
   d67f6:	a802      	add	r0, sp, #8
   d67f8:	466a      	mov	r2, sp
   d67fa:	9500      	str	r5, [sp, #0]
   d67fc:	9701      	str	r7, [sp, #4]
   d67fe:	f7ff fee5 	bl	d65cc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   d6802:	4631      	mov	r1, r6
   d6804:	2000      	movs	r0, #0
        mapKey++;
   d6806:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   d6808:	f004 fcf0 	bl	db1ec <strtok>
      while (token != NULL) {
   d680c:	e7f0      	b.n	d67f0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   d680e:	4629      	mov	r1, r5
   d6810:	a802      	add	r0, sp, #8
   d6812:	f7ff ff27 	bl	d6664 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   d6816:	68a1      	ldr	r1, [r4, #8]
   d6818:	4620      	mov	r0, r4
   d681a:	f7ff fc9f 	bl	d615c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
      if (__x._M_root() != nullptr)
   d681e:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   d6820:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d6822:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   d6826:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   d682a:	b17a      	cbz	r2, d684c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xc0>
      _M_header._M_color = __from._M_header._M_color;
   d682c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d6830:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   d6832:	9905      	ldr	r1, [sp, #20]
   d6834:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   d6836:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   d6838:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   d683a:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   d683c:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   d683e:	9a07      	ldr	r2, [sp, #28]
   d6840:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   d6842:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   d6844:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   d6848:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   d684a:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   d684c:	a802      	add	r0, sp, #8
   d684e:	9904      	ldr	r1, [sp, #16]
   d6850:	f7ff fc84 	bl	d615c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
  _client_tcp_ubi.stop();
   d6854:	4803      	ldr	r0, [pc, #12]	; (d6864 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d6856:	f001 fefb 	bl	d8650 <_ZN9TCPClient4stopEv>
}
   d685a:	4620      	mov	r0, r4
   d685c:	b008      	add	sp, #32
   d685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6862:	bf00      	nop
   d6864:	2003e5b4 	.word	0x2003e5b4
   d6868:	cda2425f 	.word	0xcda2425f
   d686c:	000dc93b 	.word	0x000dc93b

000d6870 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d6870:	b510      	push	{r4, lr}
   d6872:	4c05      	ldr	r4, [pc, #20]	; (d6888 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x18>)
   d6874:	4620      	mov	r0, r4
   d6876:	f001 ff3b 	bl	d86f0 <_ZN9TCPClientC1Ev>
   d687a:	4620      	mov	r0, r4
   d687c:	4a03      	ldr	r2, [pc, #12]	; (d688c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d687e:	4904      	ldr	r1, [pc, #16]	; (d6890 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d6880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6884:	f002 bd1e 	b.w	d92c4 <__aeabi_atexit>
   d6888:	2003e5b4 	.word	0x2003e5b4
   d688c:	2003e428 	.word	0x2003e428
   d6890:	000d51b5 	.word	0x000d51b5

000d6894 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   d6894:	ed9f 0a01 	vldr	s0, [pc, #4]	; d689c <_ZN6UbiUDP3getEPKcS1_+0x8>
   d6898:	4770      	bx	lr
   d689a:	bf00      	nop
   d689c:	cda2425f 	.word	0xcda2425f

000d68a0 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d68a0:	7501      	strb	r1, [r0, #20]
   d68a2:	4770      	bx	lr

000d68a4 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   d68a4:	2200      	movs	r2, #0
	  : _Node_allocator()
   d68a6:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d68a8:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d68ac:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d68b0:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   d68b2:	4770      	bx	lr

000d68b4 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d68b4:	b530      	push	{r4, r5, lr}
   d68b6:	4d06      	ldr	r5, [pc, #24]	; (d68d0 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d68b8:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d68ba:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d68be:	2500      	movs	r5, #0
  _token = token;
   d68c0:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d68c2:	7505      	strb	r5, [r0, #20]
   d68c4:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d68c8:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d68cc:	6185      	str	r5, [r0, #24]
}
   d68ce:	bd30      	pop	{r4, r5, pc}
   d68d0:	000dcae4 	.word	0x000dcae4

000d68d4 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
}
   d68d4:	b510      	push	{r4, lr}
   d68d6:	4c05      	ldr	r4, [pc, #20]	; (d68ec <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x18>)
   d68d8:	4620      	mov	r0, r4
   d68da:	f002 f925 	bl	d8b28 <_ZN3UDPC1Ev>
   d68de:	4620      	mov	r0, r4
   d68e0:	4a03      	ldr	r2, [pc, #12]	; (d68f0 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d68e2:	4904      	ldr	r1, [pc, #16]	; (d68f4 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d68e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d68e8:	f002 bcec 	b.w	d92c4 <__aeabi_atexit>
   d68ec:	2003e5d0 	.word	0x2003e5d0
   d68f0:	2003e428 	.word	0x2003e428
   d68f4:	000d5195 	.word	0x000d5195

000d68f8 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   d68f8:	b510      	push	{r4, lr}
   d68fa:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   d68fc:	684a      	ldr	r2, [r1, #4]
   d68fe:	4902      	ldr	r1, [pc, #8]	; (d6908 <_ZN6UbiUDP11getServerIpEv+0x10>)
   d6900:	f001 fa88 	bl	d7e14 <_ZN5spark12NetworkClass7resolveEPKc>
}
   d6904:	4620      	mov	r0, r4
   d6906:	bd10      	pop	{r4, pc}
   d6908:	2003e620 	.word	0x2003e620

000d690c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d690c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d690e:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   d6910:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6912:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   d6914:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6916:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   d6918:	f7ff ffee 	bl	d68f8 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d691c:	a802      	add	r0, sp, #8
   d691e:	f000 ff9b 	bl	d7858 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   d6922:	b9a0      	cbnz	r0, d694e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d6924:	7d33      	ldrb	r3, [r6, #20]
   d6926:	b123      	cbz	r3, d6932 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d6928:	f002 fb2c 	bl	d8f84 <_Z16_fetch_usbserialv>
   d692c:	4927      	ldr	r1, [pc, #156]	; (d69cc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d692e:	f001 fb26 	bl	d7f7e <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   d6932:	23f3      	movs	r3, #243	; 0xf3
   d6934:	9300      	str	r3, [sp, #0]
   d6936:	2237      	movs	r2, #55	; 0x37
   d6938:	233d      	movs	r3, #61	; 0x3d
   d693a:	21a9      	movs	r1, #169	; 0xa9
   d693c:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   d693e:	ad09      	add	r5, sp, #36	; 0x24
   d6940:	f000 ffae 	bl	d78a0 <_ZN9IPAddressC1Ehhhh>
   d6944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6946:	ac03      	add	r4, sp, #12
   d6948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d694a:	682b      	ldr	r3, [r5, #0]
   d694c:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d694e:	2200      	movs	r2, #0
   d6950:	f240 21bd 	movw	r1, #701	; 0x2bd
   d6954:	481e      	ldr	r0, [pc, #120]	; (d69d0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6956:	f002 f919 	bl	d8b8c <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d695a:	2200      	movs	r2, #0
   d695c:	f242 3134 	movw	r1, #9012	; 0x2334
   d6960:	481b      	ldr	r0, [pc, #108]	; (d69d0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6962:	f001 ffbb 	bl	d88dc <_ZN3UDP5beginEtm>
   d6966:	ad03      	add	r5, sp, #12
   d6968:	4b1a      	ldr	r3, [pc, #104]	; (d69d4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   d696a:	9308      	str	r3, [sp, #32]
   d696c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d696e:	ac09      	add	r4, sp, #36	; 0x24
   d6970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6972:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d6974:	4816      	ldr	r0, [pc, #88]	; (d69d0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6976:	7023      	strb	r3, [r4, #0]
   d6978:	f242 3234 	movw	r2, #9012	; 0x2334
   d697c:	a908      	add	r1, sp, #32
   d697e:	f002 f921 	bl	d8bc4 <_ZN3UDP11beginPacketE9IPAddresst>
   d6982:	b958      	cbnz	r0, d699c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   d6984:	7d33      	ldrb	r3, [r6, #20]
   d6986:	b123      	cbz	r3, d6992 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   d6988:	f002 fafc 	bl	d8f84 <_Z16_fetch_usbserialv>
   d698c:	4912      	ldr	r1, [pc, #72]	; (d69d8 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   d698e:	f001 faf6 	bl	d7f7e <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   d6992:	480f      	ldr	r0, [pc, #60]	; (d69d0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6994:	f001 ffee 	bl	d8974 <_ZN3UDP4stopEv>
    return false;
   d6998:	2000      	movs	r0, #0
   d699a:	e014      	b.n	d69c6 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   d699c:	2f00      	cmp	r7, #0
   d699e:	d0f1      	beq.n	d6984 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   d69a0:	4638      	mov	r0, r7
   d69a2:	f003 fdac 	bl	da4fe <strlen>
   d69a6:	4639      	mov	r1, r7
   d69a8:	4602      	mov	r2, r0
   d69aa:	4809      	ldr	r0, [pc, #36]	; (d69d0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d69ac:	f001 fff0 	bl	d8990 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d69b0:	2800      	cmp	r0, #0
   d69b2:	d0e7      	beq.n	d6984 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   d69b4:	4806      	ldr	r0, [pc, #24]	; (d69d0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d69b6:	f002 f84b 	bl	d8a50 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d69ba:	2800      	cmp	r0, #0
   d69bc:	d0e2      	beq.n	d6984 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   d69be:	4804      	ldr	r0, [pc, #16]	; (d69d0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d69c0:	f001 ffd8 	bl	d8974 <_ZN3UDP4stopEv>
  return true;
   d69c4:	2001      	movs	r0, #1
}
   d69c6:	b00f      	add	sp, #60	; 0x3c
   d69c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d69ca:	bf00      	nop
   d69cc:	000dca30 	.word	0x000dca30
   d69d0:	2003e5d0 	.word	0x2003e5d0
   d69d4:	000dcbdc 	.word	0x000dcbdc
   d69d8:	000dcabc 	.word	0x000dcabc

000d69dc <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d69dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d69de:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d69e0:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d69e2:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d69e4:	e9cd 2100 	strd	r2, r1, [sp]
   d69e8:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d69ea:	f000 fad9 	bl	d6fa0 <malloc>
   d69ee:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d69f0:	2014      	movs	r0, #20
   d69f2:	f7fd fb50 	bl	d4096 <_Znwj>
   d69f6:	4605      	mov	r5, r0
   d69f8:	b120      	cbz	r0, d6a04 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d69fa:	e9dd 2100 	ldrd	r2, r1, [sp]
   d69fe:	4633      	mov	r3, r6
   d6a00:	f7ff fba4 	bl	d614c <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d6a04:	6025      	str	r5, [r4, #0]
}
   d6a06:	b002      	add	sp, #8
   d6a08:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6a0c <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   d6a0c:	b538      	push	{r3, r4, r5, lr}
   d6a0e:	2500      	movs	r5, #0
   d6a10:	4604      	mov	r4, r0
   d6a12:	4613      	mov	r3, r2
   d6a14:	7245      	strb	r5, [r0, #9]
   d6a16:	7285      	strb	r5, [r0, #10]
   d6a18:	4a02      	ldr	r2, [pc, #8]	; (d6a24 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d6a1a:	f7ff ffdf 	bl	d69dc <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   d6a1e:	4620      	mov	r0, r4
   d6a20:	bd38      	pop	{r3, r4, r5, pc}
   d6a22:	bf00      	nop
   d6a24:	000dcaf4 	.word	0x000dcaf4

000d6a28 <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d6a28:	b538      	push	{r3, r4, r5, lr}
   d6a2a:	4604      	mov	r4, r0
  free(_context);
   d6a2c:	6840      	ldr	r0, [r0, #4]
   d6a2e:	f000 fabf 	bl	d6fb0 <free>
  delete _cloudProtocol;
   d6a32:	6825      	ldr	r5, [r4, #0]
   d6a34:	b135      	cbz	r5, d6a44 <_ZN7UbidotsD1Ev+0x1c>
   d6a36:	4628      	mov	r0, r5
   d6a38:	f7ff f90a 	bl	d5c50 <_ZN18UbiProtocolHandlerD1Ev>
   d6a3c:	2114      	movs	r1, #20
   d6a3e:	4628      	mov	r0, r5
   d6a40:	f002 fc45 	bl	d92ce <_ZdlPvj>
}
   d6a44:	4620      	mov	r0, r4
   d6a46:	bd38      	pop	{r3, r4, r5, pc}

000d6a48 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   d6a48:	6800      	ldr	r0, [r0, #0]
   d6a4a:	f7ff b911 	b.w	d5c70 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d6a4e <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   d6a4e:	b507      	push	{r0, r1, r2, lr}
   d6a50:	2300      	movs	r3, #0
   d6a52:	9300      	str	r3, [sp, #0]
   d6a54:	461a      	mov	r2, r3
   d6a56:	f7ff fff7 	bl	d6a48 <_ZN7Ubidots3addEPcfS0_mj>
   d6a5a:	b003      	add	sp, #12
   d6a5c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a60 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   d6a60:	6800      	ldr	r0, [r0, #0]
   d6a62:	f7ff bb21 	b.w	d60a8 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
	...

000d6a68 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6a68:	b508      	push	{r3, lr}
   d6a6a:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <os_mutex_recursive_create+0xc>)
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a70:	9301      	str	r3, [sp, #4]
   d6a72:	bd08      	pop	{r3, pc}
   d6a74:	00030248 	.word	0x00030248

000d6a78 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6a78:	b508      	push	{r3, lr}
   d6a7a:	4b02      	ldr	r3, [pc, #8]	; (d6a84 <os_mutex_recursive_destroy+0xc>)
   d6a7c:	681b      	ldr	r3, [r3, #0]
   d6a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6a80:	9301      	str	r3, [sp, #4]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	00030248 	.word	0x00030248

000d6a88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <HAL_RNG_GetRandomNumber+0xc>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	685b      	ldr	r3, [r3, #4]
   d6a90:	9301      	str	r3, [sp, #4]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	00030218 	.word	0x00030218

000d6a98 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6a98:	b508      	push	{r3, lr}
   d6a9a:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <HAL_Delay_Microseconds+0xc>)
   d6a9c:	681b      	ldr	r3, [r3, #0]
   d6a9e:	68db      	ldr	r3, [r3, #12]
   d6aa0:	9301      	str	r3, [sp, #4]
   d6aa2:	bd08      	pop	{r3, pc}
   d6aa4:	00030218 	.word	0x00030218

000d6aa8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	695b      	ldr	r3, [r3, #20]
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	00030218 	.word	0x00030218

000d6ab8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <HAL_Pin_Map+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	681b      	ldr	r3, [r3, #0]
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	0003022c 	.word	0x0003022c

000d6ac8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <HAL_Pin_Mode+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	689b      	ldr	r3, [r3, #8]
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	0003022c 	.word	0x0003022c

000d6ad8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <HAL_Get_Pin_Mode+0xc>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	68db      	ldr	r3, [r3, #12]
   d6ae0:	9301      	str	r3, [sp, #4]
   d6ae2:	bd08      	pop	{r3, pc}
   d6ae4:	0003022c 	.word	0x0003022c

000d6ae8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6ae8:	b508      	push	{r3, lr}
   d6aea:	4b02      	ldr	r3, [pc, #8]	; (d6af4 <HAL_GPIO_Write+0xc>)
   d6aec:	681b      	ldr	r3, [r3, #0]
   d6aee:	691b      	ldr	r3, [r3, #16]
   d6af0:	9301      	str	r3, [sp, #4]
   d6af2:	bd08      	pop	{r3, pc}
   d6af4:	0003022c 	.word	0x0003022c

000d6af8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <HAL_Interrupts_Enable_All+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	6a1b      	ldr	r3, [r3, #32]
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	0003022c 	.word	0x0003022c

000d6b08 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <HAL_Interrupts_Disable_All+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	0003022c 	.word	0x0003022c

000d6b18 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <hal_i2c_begin+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	68db      	ldr	r3, [r3, #12]
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	00030228 	.word	0x00030228

000d6b28 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6b28:	b508      	push	{r3, lr}
   d6b2a:	4b02      	ldr	r3, [pc, #8]	; (d6b34 <hal_i2c_begin_transmission+0xc>)
   d6b2c:	681b      	ldr	r3, [r3, #0]
   d6b2e:	699b      	ldr	r3, [r3, #24]
   d6b30:	9301      	str	r3, [sp, #4]
   d6b32:	bd08      	pop	{r3, pc}
   d6b34:	00030228 	.word	0x00030228

000d6b38 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6b38:	b508      	push	{r3, lr}
   d6b3a:	4b02      	ldr	r3, [pc, #8]	; (d6b44 <hal_i2c_end_transmission+0xc>)
   d6b3c:	681b      	ldr	r3, [r3, #0]
   d6b3e:	69db      	ldr	r3, [r3, #28]
   d6b40:	9301      	str	r3, [sp, #4]
   d6b42:	bd08      	pop	{r3, pc}
   d6b44:	00030228 	.word	0x00030228

000d6b48 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6b48:	b508      	push	{r3, lr}
   d6b4a:	4b02      	ldr	r3, [pc, #8]	; (d6b54 <hal_i2c_write+0xc>)
   d6b4c:	681b      	ldr	r3, [r3, #0]
   d6b4e:	6a1b      	ldr	r3, [r3, #32]
   d6b50:	9301      	str	r3, [sp, #4]
   d6b52:	bd08      	pop	{r3, pc}
   d6b54:	00030228 	.word	0x00030228

000d6b58 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6b58:	b508      	push	{r3, lr}
   d6b5a:	4b02      	ldr	r3, [pc, #8]	; (d6b64 <hal_i2c_available+0xc>)
   d6b5c:	681b      	ldr	r3, [r3, #0]
   d6b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b60:	9301      	str	r3, [sp, #4]
   d6b62:	bd08      	pop	{r3, pc}
   d6b64:	00030228 	.word	0x00030228

000d6b68 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6b68:	b508      	push	{r3, lr}
   d6b6a:	4b02      	ldr	r3, [pc, #8]	; (d6b74 <hal_i2c_read+0xc>)
   d6b6c:	681b      	ldr	r3, [r3, #0]
   d6b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b70:	9301      	str	r3, [sp, #4]
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	00030228 	.word	0x00030228

000d6b78 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6b78:	b508      	push	{r3, lr}
   d6b7a:	4b02      	ldr	r3, [pc, #8]	; (d6b84 <hal_i2c_peek+0xc>)
   d6b7c:	681b      	ldr	r3, [r3, #0]
   d6b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b80:	9301      	str	r3, [sp, #4]
   d6b82:	bd08      	pop	{r3, pc}
   d6b84:	00030228 	.word	0x00030228

000d6b88 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6b88:	b508      	push	{r3, lr}
   d6b8a:	4b02      	ldr	r3, [pc, #8]	; (d6b94 <hal_i2c_flush+0xc>)
   d6b8c:	681b      	ldr	r3, [r3, #0]
   d6b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b90:	9301      	str	r3, [sp, #4]
   d6b92:	bd08      	pop	{r3, pc}
   d6b94:	00030228 	.word	0x00030228

000d6b98 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6b98:	b508      	push	{r3, lr}
   d6b9a:	4b02      	ldr	r3, [pc, #8]	; (d6ba4 <hal_i2c_is_enabled+0xc>)
   d6b9c:	681b      	ldr	r3, [r3, #0]
   d6b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6ba0:	9301      	str	r3, [sp, #4]
   d6ba2:	bd08      	pop	{r3, pc}
   d6ba4:	00030228 	.word	0x00030228

000d6ba8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6ba8:	b508      	push	{r3, lr}
   d6baa:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <hal_i2c_init+0xc>)
   d6bac:	681b      	ldr	r3, [r3, #0]
   d6bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6bb0:	9301      	str	r3, [sp, #4]
   d6bb2:	bd08      	pop	{r3, pc}
   d6bb4:	00030228 	.word	0x00030228

000d6bb8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6bb8:	b508      	push	{r3, lr}
   d6bba:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <if_index_to_name+0xc>)
   d6bbc:	681b      	ldr	r3, [r3, #0]
   d6bbe:	695b      	ldr	r3, [r3, #20]
   d6bc0:	9301      	str	r3, [sp, #4]
   d6bc2:	bd08      	pop	{r3, pc}
   d6bc4:	0003026c 	.word	0x0003026c

000d6bc8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6bc8:	b508      	push	{r3, lr}
   d6bca:	4b02      	ldr	r3, [pc, #8]	; (d6bd4 <inet_inet_ntop+0xc>)
   d6bcc:	681b      	ldr	r3, [r3, #0]
   d6bce:	695b      	ldr	r3, [r3, #20]
   d6bd0:	9301      	str	r3, [sp, #4]
   d6bd2:	bd08      	pop	{r3, pc}
   d6bd4:	00030264 	.word	0x00030264

000d6bd8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6bd8:	b508      	push	{r3, lr}
   d6bda:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <inet_htonl+0xc>)
   d6bdc:	681b      	ldr	r3, [r3, #0]
   d6bde:	6a1b      	ldr	r3, [r3, #32]
   d6be0:	9301      	str	r3, [sp, #4]
   d6be2:	bd08      	pop	{r3, pc}
   d6be4:	00030264 	.word	0x00030264

000d6be8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d6be8:	b508      	push	{r3, lr}
   d6bea:	4b02      	ldr	r3, [pc, #8]	; (d6bf4 <inet_ntohs+0xc>)
   d6bec:	681b      	ldr	r3, [r3, #0]
   d6bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6bf0:	9301      	str	r3, [sp, #4]
   d6bf2:	bd08      	pop	{r3, pc}
   d6bf4:	00030264 	.word	0x00030264

000d6bf8 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6bf8:	b508      	push	{r3, lr}
   d6bfa:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <inet_htons+0xc>)
   d6bfc:	681b      	ldr	r3, [r3, #0]
   d6bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c00:	9301      	str	r3, [sp, #4]
   d6c02:	bd08      	pop	{r3, pc}
   d6c04:	00030264 	.word	0x00030264

000d6c08 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6c08:	b508      	push	{r3, lr}
   d6c0a:	4b02      	ldr	r3, [pc, #8]	; (d6c14 <netdb_freeaddrinfo+0xc>)
   d6c0c:	681b      	ldr	r3, [r3, #0]
   d6c0e:	689b      	ldr	r3, [r3, #8]
   d6c10:	9301      	str	r3, [sp, #4]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	00030268 	.word	0x00030268

000d6c18 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6c18:	b508      	push	{r3, lr}
   d6c1a:	4b02      	ldr	r3, [pc, #8]	; (d6c24 <netdb_getaddrinfo+0xc>)
   d6c1c:	681b      	ldr	r3, [r3, #0]
   d6c1e:	68db      	ldr	r3, [r3, #12]
   d6c20:	9301      	str	r3, [sp, #4]
   d6c22:	bd08      	pop	{r3, pc}
   d6c24:	00030268 	.word	0x00030268

000d6c28 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d6c28:	b508      	push	{r3, lr}
   d6c2a:	4b02      	ldr	r3, [pc, #8]	; (d6c34 <sock_bind+0xc>)
   d6c2c:	681b      	ldr	r3, [r3, #0]
   d6c2e:	685b      	ldr	r3, [r3, #4]
   d6c30:	9301      	str	r3, [sp, #4]
   d6c32:	bd08      	pop	{r3, pc}
   d6c34:	00030238 	.word	0x00030238

000d6c38 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6c38:	b508      	push	{r3, lr}
   d6c3a:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <sock_setsockopt+0xc>)
   d6c3c:	681b      	ldr	r3, [r3, #0]
   d6c3e:	699b      	ldr	r3, [r3, #24]
   d6c40:	9301      	str	r3, [sp, #4]
   d6c42:	bd08      	pop	{r3, pc}
   d6c44:	00030238 	.word	0x00030238

000d6c48 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6c48:	b508      	push	{r3, lr}
   d6c4a:	4b02      	ldr	r3, [pc, #8]	; (d6c54 <sock_close+0xc>)
   d6c4c:	681b      	ldr	r3, [r3, #0]
   d6c4e:	69db      	ldr	r3, [r3, #28]
   d6c50:	9301      	str	r3, [sp, #4]
   d6c52:	bd08      	pop	{r3, pc}
   d6c54:	00030238 	.word	0x00030238

000d6c58 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6c58:	b508      	push	{r3, lr}
   d6c5a:	4b02      	ldr	r3, [pc, #8]	; (d6c64 <sock_connect+0xc>)
   d6c5c:	681b      	ldr	r3, [r3, #0]
   d6c5e:	6a1b      	ldr	r3, [r3, #32]
   d6c60:	9301      	str	r3, [sp, #4]
   d6c62:	bd08      	pop	{r3, pc}
   d6c64:	00030238 	.word	0x00030238

000d6c68 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6c68:	b508      	push	{r3, lr}
   d6c6a:	4b02      	ldr	r3, [pc, #8]	; (d6c74 <sock_recv+0xc>)
   d6c6c:	681b      	ldr	r3, [r3, #0]
   d6c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c70:	9301      	str	r3, [sp, #4]
   d6c72:	bd08      	pop	{r3, pc}
   d6c74:	00030238 	.word	0x00030238

000d6c78 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d6c78:	b508      	push	{r3, lr}
   d6c7a:	4b02      	ldr	r3, [pc, #8]	; (d6c84 <sock_recvfrom+0xc>)
   d6c7c:	681b      	ldr	r3, [r3, #0]
   d6c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c80:	9301      	str	r3, [sp, #4]
   d6c82:	bd08      	pop	{r3, pc}
   d6c84:	00030238 	.word	0x00030238

000d6c88 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6c88:	b508      	push	{r3, lr}
   d6c8a:	4b02      	ldr	r3, [pc, #8]	; (d6c94 <sock_send+0xc>)
   d6c8c:	681b      	ldr	r3, [r3, #0]
   d6c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c90:	9301      	str	r3, [sp, #4]
   d6c92:	bd08      	pop	{r3, pc}
   d6c94:	00030238 	.word	0x00030238

000d6c98 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b02      	ldr	r3, [pc, #8]	; (d6ca4 <sock_sendto+0xc>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6ca0:	9301      	str	r3, [sp, #4]
   d6ca2:	bd08      	pop	{r3, pc}
   d6ca4:	00030238 	.word	0x00030238

000d6ca8 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6ca8:	b508      	push	{r3, lr}
   d6caa:	4b02      	ldr	r3, [pc, #8]	; (d6cb4 <sock_socket+0xc>)
   d6cac:	681b      	ldr	r3, [r3, #0]
   d6cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6cb0:	9301      	str	r3, [sp, #4]
   d6cb2:	bd08      	pop	{r3, pc}
   d6cb4:	00030238 	.word	0x00030238

000d6cb8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <hal_spi_init+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	69db      	ldr	r3, [r3, #28]
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	00030230 	.word	0x00030230

000d6cc8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <hal_spi_is_enabled+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	6a1b      	ldr	r3, [r3, #32]
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	00030230 	.word	0x00030230

000d6cd8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <hal_usart_init+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	681b      	ldr	r3, [r3, #0]
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	0003023c 	.word	0x0003023c

000d6ce8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <hal_usart_write+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	68db      	ldr	r3, [r3, #12]
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	0003023c 	.word	0x0003023c

000d6cf8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <hal_usart_available+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	691b      	ldr	r3, [r3, #16]
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	0003023c 	.word	0x0003023c

000d6d08 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <hal_usart_read+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	695b      	ldr	r3, [r3, #20]
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	0003023c 	.word	0x0003023c

000d6d18 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <hal_usart_peek+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	699b      	ldr	r3, [r3, #24]
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	0003023c 	.word	0x0003023c

000d6d28 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <hal_usart_flush+0xc>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	69db      	ldr	r3, [r3, #28]
   d6d30:	9301      	str	r3, [sp, #4]
   d6d32:	bd08      	pop	{r3, pc}
   d6d34:	0003023c 	.word	0x0003023c

000d6d38 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6d38:	b508      	push	{r3, lr}
   d6d3a:	4b02      	ldr	r3, [pc, #8]	; (d6d44 <hal_usart_is_enabled+0xc>)
   d6d3c:	681b      	ldr	r3, [r3, #0]
   d6d3e:	6a1b      	ldr	r3, [r3, #32]
   d6d40:	9301      	str	r3, [sp, #4]
   d6d42:	bd08      	pop	{r3, pc}
   d6d44:	0003023c 	.word	0x0003023c

000d6d48 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <hal_usart_available_data_for_write+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	0003023c 	.word	0x0003023c

000d6d58 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <HAL_USB_USART_Init+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	681b      	ldr	r3, [r3, #0]
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	0003024c 	.word	0x0003024c

000d6d68 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <HAL_USB_USART_Begin+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	685b      	ldr	r3, [r3, #4]
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	0003024c 	.word	0x0003024c

000d6d78 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <HAL_USB_USART_Available_Data+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	691b      	ldr	r3, [r3, #16]
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	0003024c 	.word	0x0003024c

000d6d88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	695b      	ldr	r3, [r3, #20]
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	0003024c 	.word	0x0003024c

000d6d98 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <HAL_USB_USART_Receive_Data+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	699b      	ldr	r3, [r3, #24]
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	0003024c 	.word	0x0003024c

000d6da8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <HAL_USB_USART_Send_Data+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	69db      	ldr	r3, [r3, #28]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	0003024c 	.word	0x0003024c

000d6db8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <HAL_USB_USART_Flush_Data+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	6a1b      	ldr	r3, [r3, #32]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	0003024c 	.word	0x0003024c

000d6dc8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <panic_+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030260 	.word	0x00030260

000d6dd8 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <jsmn_init+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030260 	.word	0x00030260

000d6de8 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <jsmn_parse+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030260 	.word	0x00030260

000d6df8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <log_message+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030260 	.word	0x00030260

000d6e08 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <log_message_v+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030260 	.word	0x00030260

000d6e18 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <set_system_mode+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	685b      	ldr	r3, [r3, #4]
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030220 	.word	0x00030220

000d6e28 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <system_delay_ms+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	695b      	ldr	r3, [r3, #20]
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030220 	.word	0x00030220

000d6e38 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <application_thread_current+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	00030220 	.word	0x00030220

000d6e48 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <application_thread_invoke+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030220 	.word	0x00030220

000d6e58 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b03      	ldr	r3, [pc, #12]	; (d6e68 <system_ctrl_set_app_request_handler+0x10>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6e62:	9301      	str	r3, [sp, #4]
   d6e64:	bd08      	pop	{r3, pc}
   d6e66:	0000      	.short	0x0000
   d6e68:	00030220 	.word	0x00030220

000d6e6c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	4b03      	ldr	r3, [pc, #12]	; (d6e7c <system_ctrl_set_result+0x10>)
   d6e70:	681b      	ldr	r3, [r3, #0]
   d6e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6e76:	9301      	str	r3, [sp, #4]
   d6e78:	bd08      	pop	{r3, pc}
   d6e7a:	0000      	.short	0x0000
   d6e7c:	00030220 	.word	0x00030220

000d6e80 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6e80:	b508      	push	{r3, lr}
   d6e82:	4b02      	ldr	r3, [pc, #8]	; (d6e8c <spark_process+0xc>)
   d6e84:	681b      	ldr	r3, [r3, #0]
   d6e86:	689b      	ldr	r3, [r3, #8]
   d6e88:	9301      	str	r3, [sp, #4]
   d6e8a:	bd08      	pop	{r3, pc}
   d6e8c:	00030244 	.word	0x00030244

000d6e90 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b02      	ldr	r3, [pc, #8]	; (d6e9c <spark_cloud_flag_connected+0xc>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	695b      	ldr	r3, [r3, #20]
   d6e98:	9301      	str	r3, [sp, #4]
   d6e9a:	bd08      	pop	{r3, pc}
   d6e9c:	00030244 	.word	0x00030244

000d6ea0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6ea0:	b508      	push	{r3, lr}
   d6ea2:	4b02      	ldr	r3, [pc, #8]	; (d6eac <spark_deviceID+0xc>)
   d6ea4:	681b      	ldr	r3, [r3, #0]
   d6ea6:	69db      	ldr	r3, [r3, #28]
   d6ea8:	9301      	str	r3, [sp, #4]
   d6eaa:	bd08      	pop	{r3, pc}
   d6eac:	00030244 	.word	0x00030244

000d6eb0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6eb0:	b508      	push	{r3, lr}
   d6eb2:	4b02      	ldr	r3, [pc, #8]	; (d6ebc <spark_send_event+0xc>)
   d6eb4:	681b      	ldr	r3, [r3, #0]
   d6eb6:	6a1b      	ldr	r3, [r3, #32]
   d6eb8:	9301      	str	r3, [sp, #4]
   d6eba:	bd08      	pop	{r3, pc}
   d6ebc:	00030244 	.word	0x00030244

000d6ec0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6ec0:	b508      	push	{r3, lr}
   d6ec2:	4b02      	ldr	r3, [pc, #8]	; (d6ecc <spark_subscribe+0xc>)
   d6ec4:	681b      	ldr	r3, [r3, #0]
   d6ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ec8:	9301      	str	r3, [sp, #4]
   d6eca:	bd08      	pop	{r3, pc}
   d6ecc:	00030244 	.word	0x00030244

000d6ed0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6ed0:	b508      	push	{r3, lr}
   d6ed2:	4b02      	ldr	r3, [pc, #8]	; (d6edc <spark_set_random_seed_from_cloud_handler+0xc>)
   d6ed4:	681b      	ldr	r3, [r3, #0]
   d6ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6ed8:	9301      	str	r3, [sp, #4]
   d6eda:	bd08      	pop	{r3, pc}
   d6edc:	00030244 	.word	0x00030244

000d6ee0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6ee0:	b508      	push	{r3, lr}
   d6ee2:	4b02      	ldr	r3, [pc, #8]	; (d6eec <network_connect+0xc>)
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	685b      	ldr	r3, [r3, #4]
   d6ee8:	9301      	str	r3, [sp, #4]
   d6eea:	bd08      	pop	{r3, pc}
   d6eec:	00030240 	.word	0x00030240

000d6ef0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6ef0:	b508      	push	{r3, lr}
   d6ef2:	4b02      	ldr	r3, [pc, #8]	; (d6efc <network_connecting+0xc>)
   d6ef4:	681b      	ldr	r3, [r3, #0]
   d6ef6:	689b      	ldr	r3, [r3, #8]
   d6ef8:	9301      	str	r3, [sp, #4]
   d6efa:	bd08      	pop	{r3, pc}
   d6efc:	00030240 	.word	0x00030240

000d6f00 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6f00:	b508      	push	{r3, lr}
   d6f02:	4b02      	ldr	r3, [pc, #8]	; (d6f0c <network_disconnect+0xc>)
   d6f04:	681b      	ldr	r3, [r3, #0]
   d6f06:	68db      	ldr	r3, [r3, #12]
   d6f08:	9301      	str	r3, [sp, #4]
   d6f0a:	bd08      	pop	{r3, pc}
   d6f0c:	00030240 	.word	0x00030240

000d6f10 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6f10:	b508      	push	{r3, lr}
   d6f12:	4b02      	ldr	r3, [pc, #8]	; (d6f1c <network_ready+0xc>)
   d6f14:	681b      	ldr	r3, [r3, #0]
   d6f16:	691b      	ldr	r3, [r3, #16]
   d6f18:	9301      	str	r3, [sp, #4]
   d6f1a:	bd08      	pop	{r3, pc}
   d6f1c:	00030240 	.word	0x00030240

000d6f20 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f20:	b508      	push	{r3, lr}
   d6f22:	4b02      	ldr	r3, [pc, #8]	; (d6f2c <network_on+0xc>)
   d6f24:	681b      	ldr	r3, [r3, #0]
   d6f26:	695b      	ldr	r3, [r3, #20]
   d6f28:	9301      	str	r3, [sp, #4]
   d6f2a:	bd08      	pop	{r3, pc}
   d6f2c:	00030240 	.word	0x00030240

000d6f30 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f30:	b508      	push	{r3, lr}
   d6f32:	4b02      	ldr	r3, [pc, #8]	; (d6f3c <network_off+0xc>)
   d6f34:	681b      	ldr	r3, [r3, #0]
   d6f36:	699b      	ldr	r3, [r3, #24]
   d6f38:	9301      	str	r3, [sp, #4]
   d6f3a:	bd08      	pop	{r3, pc}
   d6f3c:	00030240 	.word	0x00030240

000d6f40 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6f40:	b508      	push	{r3, lr}
   d6f42:	4b02      	ldr	r3, [pc, #8]	; (d6f4c <network_listen+0xc>)
   d6f44:	681b      	ldr	r3, [r3, #0]
   d6f46:	69db      	ldr	r3, [r3, #28]
   d6f48:	9301      	str	r3, [sp, #4]
   d6f4a:	bd08      	pop	{r3, pc}
   d6f4c:	00030240 	.word	0x00030240

000d6f50 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6f50:	b508      	push	{r3, lr}
   d6f52:	4b02      	ldr	r3, [pc, #8]	; (d6f5c <network_listening+0xc>)
   d6f54:	681b      	ldr	r3, [r3, #0]
   d6f56:	6a1b      	ldr	r3, [r3, #32]
   d6f58:	9301      	str	r3, [sp, #4]
   d6f5a:	bd08      	pop	{r3, pc}
   d6f5c:	00030240 	.word	0x00030240

000d6f60 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6f60:	b508      	push	{r3, lr}
   d6f62:	4b02      	ldr	r3, [pc, #8]	; (d6f6c <network_set_listen_timeout+0xc>)
   d6f64:	681b      	ldr	r3, [r3, #0]
   d6f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f68:	9301      	str	r3, [sp, #4]
   d6f6a:	bd08      	pop	{r3, pc}
   d6f6c:	00030240 	.word	0x00030240

000d6f70 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6f70:	b508      	push	{r3, lr}
   d6f72:	4b02      	ldr	r3, [pc, #8]	; (d6f7c <network_get_listen_timeout+0xc>)
   d6f74:	681b      	ldr	r3, [r3, #0]
   d6f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f78:	9301      	str	r3, [sp, #4]
   d6f7a:	bd08      	pop	{r3, pc}
   d6f7c:	00030240 	.word	0x00030240

000d6f80 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6f80:	b508      	push	{r3, lr}
   d6f82:	4b02      	ldr	r3, [pc, #8]	; (d6f8c <network_is_on+0xc>)
   d6f84:	681b      	ldr	r3, [r3, #0]
   d6f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6f88:	9301      	str	r3, [sp, #4]
   d6f8a:	bd08      	pop	{r3, pc}
   d6f8c:	00030240 	.word	0x00030240

000d6f90 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6f90:	b508      	push	{r3, lr}
   d6f92:	4b02      	ldr	r3, [pc, #8]	; (d6f9c <network_is_off+0xc>)
   d6f94:	681b      	ldr	r3, [r3, #0]
   d6f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6f98:	9301      	str	r3, [sp, #4]
   d6f9a:	bd08      	pop	{r3, pc}
   d6f9c:	00030240 	.word	0x00030240

000d6fa0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6fa0:	b508      	push	{r3, lr}
   d6fa2:	4b02      	ldr	r3, [pc, #8]	; (d6fac <malloc+0xc>)
   d6fa4:	681b      	ldr	r3, [r3, #0]
   d6fa6:	681b      	ldr	r3, [r3, #0]
   d6fa8:	9301      	str	r3, [sp, #4]
   d6faa:	bd08      	pop	{r3, pc}
   d6fac:	0003021c 	.word	0x0003021c

000d6fb0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6fb0:	b508      	push	{r3, lr}
   d6fb2:	4b02      	ldr	r3, [pc, #8]	; (d6fbc <free+0xc>)
   d6fb4:	681b      	ldr	r3, [r3, #0]
   d6fb6:	685b      	ldr	r3, [r3, #4]
   d6fb8:	9301      	str	r3, [sp, #4]
   d6fba:	bd08      	pop	{r3, pc}
   d6fbc:	0003021c 	.word	0x0003021c

000d6fc0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6fc0:	b508      	push	{r3, lr}
   d6fc2:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <realloc+0xc>)
   d6fc4:	681b      	ldr	r3, [r3, #0]
   d6fc6:	689b      	ldr	r3, [r3, #8]
   d6fc8:	9301      	str	r3, [sp, #4]
   d6fca:	bd08      	pop	{r3, pc}
   d6fcc:	0003021c 	.word	0x0003021c

000d6fd0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6fd0:	b508      	push	{r3, lr}
   d6fd2:	4b02      	ldr	r3, [pc, #8]	; (d6fdc <sprintf+0xc>)
   d6fd4:	681b      	ldr	r3, [r3, #0]
   d6fd6:	68db      	ldr	r3, [r3, #12]
   d6fd8:	9301      	str	r3, [sp, #4]
   d6fda:	bd08      	pop	{r3, pc}
   d6fdc:	0003021c 	.word	0x0003021c

000d6fe0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6fe0:	b508      	push	{r3, lr}
   d6fe2:	4b02      	ldr	r3, [pc, #8]	; (d6fec <abort+0xc>)
   d6fe4:	681b      	ldr	r3, [r3, #0]
   d6fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6fe8:	9301      	str	r3, [sp, #4]
   d6fea:	bd08      	pop	{r3, pc}
   d6fec:	0003021c 	.word	0x0003021c

000d6ff0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6ff0:	b508      	push	{r3, lr}
   d6ff2:	4b02      	ldr	r3, [pc, #8]	; (d6ffc <_malloc_r+0xc>)
   d6ff4:	681b      	ldr	r3, [r3, #0]
   d6ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ff8:	9301      	str	r3, [sp, #4]
   d6ffa:	bd08      	pop	{r3, pc}
   d6ffc:	0003021c 	.word	0x0003021c

000d7000 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7000:	b508      	push	{r3, lr}
   d7002:	4b02      	ldr	r3, [pc, #8]	; (d700c <__errno+0xc>)
   d7004:	681b      	ldr	r3, [r3, #0]
   d7006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7008:	9301      	str	r3, [sp, #4]
   d700a:	bd08      	pop	{r3, pc}
   d700c:	0003021c 	.word	0x0003021c

000d7010 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7010:	b508      	push	{r3, lr}
   d7012:	4b02      	ldr	r3, [pc, #8]	; (d701c <newlib_impure_ptr_callback+0xc>)
   d7014:	681b      	ldr	r3, [r3, #0]
   d7016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7018:	9301      	str	r3, [sp, #4]
   d701a:	bd08      	pop	{r3, pc}
   d701c:	0003021c 	.word	0x0003021c

000d7020 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7020:	2100      	movs	r1, #0
   d7022:	f7ff bf01 	b.w	d6e28 <system_delay_ms>

000d7026 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7026:	b510      	push	{r4, lr}
      if (_M_empty())
   d7028:	6883      	ldr	r3, [r0, #8]
   d702a:	4604      	mov	r4, r0
   d702c:	b90b      	cbnz	r3, d7032 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d702e:	f002 fa06 	bl	d943e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7032:	68c3      	ldr	r3, [r0, #12]
   d7034:	4798      	blx	r3
      if (_M_manager)
   d7036:	68a3      	ldr	r3, [r4, #8]
   d7038:	b11b      	cbz	r3, d7042 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d703a:	2203      	movs	r2, #3
   d703c:	4621      	mov	r1, r4
   d703e:	4620      	mov	r0, r4
   d7040:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7042:	4620      	mov	r0, r4
   d7044:	2110      	movs	r1, #16
}
   d7046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d704a:	f002 b940 	b.w	d92ce <_ZdlPvj>

000d704e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d704e:	b510      	push	{r4, lr}
   d7050:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7052:	6800      	ldr	r0, [r0, #0]
   d7054:	b108      	cbz	r0, d705a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7056:	f7ff fd0f 	bl	d6a78 <os_mutex_recursive_destroy>
    }
   d705a:	4620      	mov	r0, r4
   d705c:	bd10      	pop	{r4, pc}

000d705e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d705e:	b513      	push	{r0, r1, r4, lr}
   d7060:	460b      	mov	r3, r1
   d7062:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7064:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7068:	466c      	mov	r4, sp
   d706a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d706e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7072:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7076:	e894 0003 	ldmia.w	r4, {r0, r1}
   d707a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d707e:	b002      	add	sp, #8
   d7080:	bd10      	pop	{r4, pc}
	...

000d7084 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7084:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7086:	4c06      	ldr	r4, [pc, #24]	; (d70a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7088:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d708a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d708c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d708e:	f7ff fceb 	bl	d6a68 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7092:	4620      	mov	r0, r4
   d7094:	4a03      	ldr	r2, [pc, #12]	; (d70a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7096:	4904      	ldr	r1, [pc, #16]	; (d70a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d709c:	f002 b912 	b.w	d92c4 <__aeabi_atexit>
   d70a0:	2003e61c 	.word	0x2003e61c
   d70a4:	2003e428 	.word	0x2003e428
   d70a8:	000d704f 	.word	0x000d704f

000d70ac <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d70ac:	2200      	movs	r2, #0
   d70ae:	6840      	ldr	r0, [r0, #4]
   d70b0:	4611      	mov	r1, r2
   d70b2:	f7ff bf2d 	b.w	d6f10 <network_ready>

000d70b6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d70b6:	2200      	movs	r2, #0
   d70b8:	6840      	ldr	r0, [r0, #4]
   d70ba:	4611      	mov	r1, r2
   d70bc:	f7ff bf48 	b.w	d6f50 <network_listening>

000d70c0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d70c0:	2200      	movs	r2, #0
   d70c2:	6840      	ldr	r0, [r0, #4]
   d70c4:	4611      	mov	r1, r2
   d70c6:	f7ff bf53 	b.w	d6f70 <network_get_listen_timeout>

000d70ca <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d70ca:	6840      	ldr	r0, [r0, #4]
   d70cc:	2200      	movs	r2, #0
   d70ce:	f7ff bf47 	b.w	d6f60 <network_set_listen_timeout>

000d70d2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d70d2:	6840      	ldr	r0, [r0, #4]
   d70d4:	2200      	movs	r2, #0
   d70d6:	f081 0101 	eor.w	r1, r1, #1
   d70da:	f7ff bf31 	b.w	d6f40 <network_listen>

000d70de <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d70de:	2300      	movs	r3, #0
   d70e0:	6840      	ldr	r0, [r0, #4]
   d70e2:	461a      	mov	r2, r3
   d70e4:	4619      	mov	r1, r3
   d70e6:	f7ff bf23 	b.w	d6f30 <network_off>

000d70ea <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d70ea:	2300      	movs	r3, #0
   d70ec:	6840      	ldr	r0, [r0, #4]
   d70ee:	461a      	mov	r2, r3
   d70f0:	4619      	mov	r1, r3
   d70f2:	f7ff bf15 	b.w	d6f20 <network_on>

000d70f6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d70f6:	2200      	movs	r2, #0
   d70f8:	6840      	ldr	r0, [r0, #4]
   d70fa:	4611      	mov	r1, r2
   d70fc:	f7ff bef8 	b.w	d6ef0 <network_connecting>

000d7100 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7100:	6840      	ldr	r0, [r0, #4]
   d7102:	2200      	movs	r2, #0
   d7104:	2102      	movs	r1, #2
   d7106:	f7ff befb 	b.w	d6f00 <network_disconnect>

000d710a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d710a:	2300      	movs	r3, #0
   d710c:	6840      	ldr	r0, [r0, #4]
   d710e:	461a      	mov	r2, r3
   d7110:	f7ff bee6 	b.w	d6ee0 <network_connect>

000d7114 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7114:	4b08      	ldr	r3, [pc, #32]	; (d7138 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7116:	b510      	push	{r4, lr}
   d7118:	2428      	movs	r4, #40	; 0x28
   d711a:	4622      	mov	r2, r4
   d711c:	4618      	mov	r0, r3
   d711e:	2100      	movs	r1, #0
   d7120:	f003 f974 	bl	da40c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7124:	4b05      	ldr	r3, [pc, #20]	; (d713c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7126:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d712c:	6042      	str	r2, [r0, #4]
   d712e:	2204      	movs	r2, #4
   d7130:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7132:	4a03      	ldr	r2, [pc, #12]	; (d7140 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7134:	601a      	str	r2, [r3, #0]
   d7136:	bd10      	pop	{r4, pc}
   d7138:	2003e628 	.word	0x2003e628
   d713c:	2003e620 	.word	0x2003e620
   d7140:	000dcb20 	.word	0x000dcb20

000d7144 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7144:	4770      	bx	lr

000d7146 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7146:	2000      	movs	r0, #0
   d7148:	4770      	bx	lr

000d714a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d714a:	b510      	push	{r4, lr}
   d714c:	2110      	movs	r1, #16
   d714e:	4604      	mov	r4, r0
   d7150:	f002 f8bd 	bl	d92ce <_ZdlPvj>
   d7154:	4620      	mov	r0, r4
   d7156:	bd10      	pop	{r4, pc}

000d7158 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7158:	b508      	push	{r3, lr}
      { delete this; }
   d715a:	f7ff fff6 	bl	d714a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d715e:	bd08      	pop	{r3, pc}

000d7160 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7160:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7162:	2200      	movs	r2, #0
   d7164:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7168:	6002      	str	r2, [r0, #0]
   d716a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d716c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d716e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7170:	680c      	ldr	r4, [r1, #0]
   d7172:	8085      	strh	r5, [r0, #4]
   d7174:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7176:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7178:	bd30      	pop	{r4, r5, pc}

000d717a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d717a:	b510      	push	{r4, lr}
   d717c:	4604      	mov	r4, r0
    free((void*)msg_);
   d717e:	6800      	ldr	r0, [r0, #0]
   d7180:	f7ff ff16 	bl	d6fb0 <free>
}
   d7184:	4620      	mov	r0, r4
   d7186:	bd10      	pop	{r4, pc}

000d7188 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7188:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d718a:	68c4      	ldr	r4, [r0, #12]
   d718c:	b1f4      	cbz	r4, d71cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d718e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7190:	2b02      	cmp	r3, #2
   d7192:	d103      	bne.n	d719c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7194:	f104 000c 	add.w	r0, r4, #12
   d7198:	f7ff ffef 	bl	d717a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d719c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d719e:	b135      	cbz	r5, d71ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d71a0:	4628      	mov	r0, r5
   d71a2:	f7fe f821 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
   d71a6:	2110      	movs	r1, #16
   d71a8:	4628      	mov	r0, r5
   d71aa:	f002 f890 	bl	d92ce <_ZdlPvj>
   d71ae:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d71b0:	b135      	cbz	r5, d71c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d71b2:	4628      	mov	r0, r5
   d71b4:	f7fe f818 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
   d71b8:	2110      	movs	r1, #16
   d71ba:	4628      	mov	r0, r5
   d71bc:	f002 f887 	bl	d92ce <_ZdlPvj>
   d71c0:	4620      	mov	r0, r4
   d71c2:	2114      	movs	r1, #20
   d71c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d71c8:	f002 b881 	b.w	d92ce <_ZdlPvj>
   d71cc:	bd38      	pop	{r3, r4, r5, pc}

000d71ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d71ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d71d0:	460e      	mov	r6, r1
   d71d2:	4604      	mov	r4, r0
   d71d4:	f856 3b04 	ldr.w	r3, [r6], #4
   d71d8:	9300      	str	r3, [sp, #0]
   d71da:	460d      	mov	r5, r1
   d71dc:	a801      	add	r0, sp, #4
   d71de:	4631      	mov	r1, r6
   d71e0:	f7fd fa3c 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d71e4:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d71e6:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d71e8:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d71ea:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d71ec:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d71ee:	2300      	movs	r3, #0
   d71f0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d71f2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d71f4:	f7fd f904 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71f8:	4630      	mov	r0, r6
   d71fa:	f7fd f901 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d71fe:	4628      	mov	r0, r5
   d7200:	2108      	movs	r1, #8
   d7202:	f002 f864 	bl	d92ce <_ZdlPvj>
        return p;
    }
   d7206:	4620      	mov	r0, r4
   d7208:	b002      	add	sp, #8
   d720a:	bd70      	pop	{r4, r5, r6, pc}

000d720c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d720c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d720e:	b510      	push	{r4, lr}
      if (_M_empty())
   d7210:	b90a      	cbnz	r2, d7216 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7212:	f002 f914 	bl	d943e <_ZSt25__throw_bad_function_callv>
    }
   d7216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d721a:	68c3      	ldr	r3, [r0, #12]
   d721c:	4718      	bx	r3

000d721e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d721e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7220:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7222:	f100 0110 	add.w	r1, r0, #16
   d7226:	f7ff fff1 	bl	d720c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d722a:	bd08      	pop	{r3, pc}

000d722c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d722c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d722e:	b510      	push	{r4, lr}
      if (_M_empty())
   d7230:	b90a      	cbnz	r2, d7236 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7232:	f002 f904 	bl	d943e <_ZSt25__throw_bad_function_callv>
    }
   d7236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d723a:	68c3      	ldr	r3, [r0, #12]
   d723c:	4718      	bx	r3

000d723e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d723e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7240:	6800      	ldr	r0, [r0, #0]
   d7242:	f100 0110 	add.w	r1, r0, #16
   d7246:	f7ff fff1 	bl	d722c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d724a:	bd08      	pop	{r3, pc}

000d724c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d724c:	b538      	push	{r3, r4, r5, lr}
   d724e:	2300      	movs	r3, #0
   d7250:	4604      	mov	r4, r0
   d7252:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7254:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7256:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7258:	f7fc ff1d 	bl	d4096 <_Znwj>
   d725c:	b128      	cbz	r0, d726a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d725e:	2301      	movs	r3, #1
   d7260:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7264:	4b02      	ldr	r3, [pc, #8]	; (d7270 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7266:	6003      	str	r3, [r0, #0]
   d7268:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d726a:	6020      	str	r0, [r4, #0]
	}
   d726c:	4620      	mov	r0, r4
   d726e:	bd38      	pop	{r3, r4, r5, pc}
   d7270:	000dcb5c 	.word	0x000dcb5c

000d7274 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7274:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7276:	2300      	movs	r3, #0
   d7278:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d727a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d727c:	4604      	mov	r4, r0
   d727e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7280:	b12b      	cbz	r3, d728e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7282:	2202      	movs	r2, #2
   d7284:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7286:	68eb      	ldr	r3, [r5, #12]
   d7288:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d728a:	68ab      	ldr	r3, [r5, #8]
   d728c:	60a3      	str	r3, [r4, #8]
    }
   d728e:	4620      	mov	r0, r4
   d7290:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7294:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7296:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7298:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d729a:	4668      	mov	r0, sp
   d729c:	f7ff ff60 	bl	d7160 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d72a0:	f04f 0302 	mov.w	r3, #2
   d72a4:	e8d4 2f4f 	ldrexb	r2, [r4]
   d72a8:	2a00      	cmp	r2, #0
   d72aa:	d103      	bne.n	d72b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d72ac:	e8c4 3f41 	strexb	r1, r3, [r4]
   d72b0:	2900      	cmp	r1, #0
   d72b2:	d1f7      	bne.n	d72a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d72b4:	d125      	bne.n	d7302 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d72b6:	f104 050c 	add.w	r5, r4, #12
   d72ba:	4669      	mov	r1, sp
   d72bc:	4628      	mov	r0, r5
   d72be:	f7ff ff4f 	bl	d7160 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d72c2:	f3bf 8f5b 	dmb	ish
   d72c6:	2301      	movs	r3, #1
   d72c8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d72ca:	2000      	movs	r0, #0
   d72cc:	f104 0308 	add.w	r3, r4, #8
   d72d0:	f3bf 8f5b 	dmb	ish
   d72d4:	e853 6f00 	ldrex	r6, [r3]
   d72d8:	e843 0200 	strex	r2, r0, [r3]
   d72dc:	2a00      	cmp	r2, #0
   d72de:	d1f9      	bne.n	d72d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d72e0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d72e4:	b16e      	cbz	r6, d7302 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d72e6:	f7ff fda7 	bl	d6e38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d72ea:	b178      	cbz	r0, d730c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d72ec:	4629      	mov	r1, r5
   d72ee:	4630      	mov	r0, r6
   d72f0:	f7ff ff8c 	bl	d720c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d72f4:	4630      	mov	r0, r6
   d72f6:	f7fd ff77 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d72fa:	2110      	movs	r1, #16
   d72fc:	4630      	mov	r0, r6
   d72fe:	f001 ffe6 	bl	d92ce <_ZdlPvj>
        p_->setError(std::move(error));
   d7302:	4668      	mov	r0, sp
   d7304:	f7ff ff39 	bl	d717a <_ZN8particle5ErrorD1Ev>
    }
   d7308:	b009      	add	sp, #36	; 0x24
   d730a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d730c:	4631      	mov	r1, r6
   d730e:	a802      	add	r0, sp, #8
   d7310:	f7ff ffb0 	bl	d7274 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7314:	68e0      	ldr	r0, [r4, #12]
   d7316:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d731a:	b108      	cbz	r0, d7320 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d731c:	f003 f8d2 	bl	da4c4 <strdup>
        type_(type) {
   d7320:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7322:	2010      	movs	r0, #16
   d7324:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7328:	f7fc feb5 	bl	d4096 <_Znwj>
   d732c:	4605      	mov	r5, r0
   d732e:	b1e8      	cbz	r0, d736c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7330:	2700      	movs	r7, #0
   d7332:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7334:	2018      	movs	r0, #24
   d7336:	f7fc feae 	bl	d4096 <_Znwj>
   d733a:	4604      	mov	r4, r0
   d733c:	b188      	cbz	r0, d7362 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d733e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7340:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7342:	a802      	add	r0, sp, #8
   d7344:	f7ff fe8b 	bl	d705e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7348:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d734a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d734c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d734e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7350:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7352:	a906      	add	r1, sp, #24
   d7354:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7356:	60e3      	str	r3, [r4, #12]
   d7358:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d735c:	9205      	str	r2, [sp, #20]
   d735e:	f7ff feff 	bl	d7160 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7362:	4b08      	ldr	r3, [pc, #32]	; (d7384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7364:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7366:	4b08      	ldr	r3, [pc, #32]	; (d7388 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7368:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d736a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d736c:	a806      	add	r0, sp, #24
   d736e:	f7ff ff04 	bl	d717a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7372:	a802      	add	r0, sp, #8
   d7374:	f7fd ff38 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7378:	2200      	movs	r2, #0
   d737a:	4629      	mov	r1, r5
   d737c:	4803      	ldr	r0, [pc, #12]	; (d738c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d737e:	f7ff fd63 	bl	d6e48 <application_thread_invoke>
   d7382:	e7b7      	b.n	d72f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7384:	000d721f 	.word	0x000d721f
   d7388:	000d74b5 	.word	0x000d74b5
   d738c:	000d7027 	.word	0x000d7027

000d7390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7394:	b08a      	sub	sp, #40	; 0x28
   d7396:	4605      	mov	r5, r0
   d7398:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d739c:	460c      	mov	r4, r1
   d739e:	4617      	mov	r7, r2
   d73a0:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d73a2:	f7ff fd75 	bl	d6e90 <spark_cloud_flag_connected>
   d73a6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d73a8:	4682      	mov	sl, r0
   d73aa:	bb38      	cbnz	r0, d73fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d73ac:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d73b0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d73b2:	a905      	add	r1, sp, #20
   d73b4:	4630      	mov	r0, r6
   d73b6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d73ba:	f7ff fed1 	bl	d7160 <_ZN8particle5ErrorC1EOS0_>
   d73be:	2014      	movs	r0, #20
   d73c0:	f7fc fe69 	bl	d4096 <_Znwj>
   d73c4:	4604      	mov	r4, r0
   d73c6:	b148      	cbz	r0, d73dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d73c8:	2302      	movs	r3, #2
   d73ca:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d73cc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d73ce:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d73d2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d73d4:	4631      	mov	r1, r6
   d73d6:	300c      	adds	r0, #12
   d73d8:	f7ff fec2 	bl	d7160 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d73dc:	4628      	mov	r0, r5
	: __shared_count(__p)
   d73de:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d73e0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d73e4:	f7ff ff32 	bl	d724c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d73e8:	4630      	mov	r0, r6
   d73ea:	f7ff fec6 	bl	d717a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d73ee:	a805      	add	r0, sp, #20
   d73f0:	f7ff fec3 	bl	d717a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d73f4:	4628      	mov	r0, r5
   d73f6:	b00a      	add	sp, #40	; 0x28
   d73f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d73fc:	230c      	movs	r3, #12
   d73fe:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7402:	2014      	movs	r0, #20
   d7404:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7408:	9307      	str	r3, [sp, #28]
   d740a:	f7fc fe44 	bl	d4096 <_Znwj>
   d740e:	4601      	mov	r1, r0
   d7410:	b128      	cbz	r0, d741e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7412:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d7416:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d741a:	f880 a001 	strb.w	sl, [r0, #1]
   d741e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7420:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d7422:	f7ff ff13 	bl	d724c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d7426:	4b22      	ldr	r3, [pc, #136]	; (d74b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7428:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d742a:	2008      	movs	r0, #8
   d742c:	f7fc fe33 	bl	d4096 <_Znwj>
   d7430:	4682      	mov	sl, r0
   d7432:	b128      	cbz	r0, d7440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7434:	9b03      	ldr	r3, [sp, #12]
   d7436:	f840 3b04 	str.w	r3, [r0], #4
   d743a:	a904      	add	r1, sp, #16
   d743c:	f7fd f90e 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7440:	9600      	str	r6, [sp, #0]
   d7442:	fa5f f389 	uxtb.w	r3, r9
   d7446:	4642      	mov	r2, r8
   d7448:	4639      	mov	r1, r7
   d744a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d744c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7450:	f7ff fd2e 	bl	d6eb0 <spark_send_event>
   d7454:	b9b8      	cbnz	r0, d7486 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d7456:	9b03      	ldr	r3, [sp, #12]
   d7458:	785b      	ldrb	r3, [r3, #1]
   d745a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d745e:	b993      	cbnz	r3, d7486 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7460:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d7464:	a905      	add	r1, sp, #20
   d7466:	a803      	add	r0, sp, #12
   d7468:	9205      	str	r2, [sp, #20]
   d746a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d746e:	f7ff ff11 	bl	d7294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7472:	a805      	add	r0, sp, #20
   d7474:	f7ff fe81 	bl	d717a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7478:	a805      	add	r0, sp, #20
   d747a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d747c:	f7ff fea7 	bl	d71ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7480:	a806      	add	r0, sp, #24
   d7482:	f7fc ffbd 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7486:	9b03      	ldr	r3, [sp, #12]
   d7488:	9305      	str	r3, [sp, #20]
   d748a:	a904      	add	r1, sp, #16
   d748c:	a806      	add	r0, sp, #24
   d748e:	f7fd f8e5 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7492:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7494:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7496:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d7498:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d749a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d749c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d749e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d74a0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d74a2:	f7fc ffad 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74a6:	a804      	add	r0, sp, #16
   d74a8:	f7fc ffaa 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d74ac:	e7a2      	b.n	d73f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d74ae:	bf00      	nop
   d74b0:	000d7579 	.word	0x000d7579

000d74b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d74b4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d74b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d74b8:	4605      	mov	r5, r0
	  switch (__op)
   d74ba:	d007      	beq.n	d74cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d74bc:	2a03      	cmp	r2, #3
   d74be:	d018      	beq.n	d74f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d74c0:	2a01      	cmp	r2, #1
   d74c2:	d101      	bne.n	d74c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d74c4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d74c6:	6003      	str	r3, [r0, #0]
	}
   d74c8:	2000      	movs	r0, #0
   d74ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d74cc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d74ce:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d74d0:	f7fc fde1 	bl	d4096 <_Znwj>
   d74d4:	4604      	mov	r4, r0
   d74d6:	b150      	cbz	r0, d74ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d74d8:	4631      	mov	r1, r6
   d74da:	f7ff fecb 	bl	d7274 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d74de:	6930      	ldr	r0, [r6, #16]
   d74e0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d74e4:	b108      	cbz	r0, d74ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d74e6:	f002 ffed 	bl	da4c4 <strdup>
        type_(type) {
   d74ea:	6120      	str	r0, [r4, #16]
   d74ec:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d74ee:	602c      	str	r4, [r5, #0]
	}
   d74f0:	e7ea      	b.n	d74c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d74f2:	6804      	ldr	r4, [r0, #0]
   d74f4:	2c00      	cmp	r4, #0
   d74f6:	d0e7      	beq.n	d74c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d74f8:	f104 0010 	add.w	r0, r4, #16
   d74fc:	f7ff fe3d 	bl	d717a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7500:	4620      	mov	r0, r4
   d7502:	f7fd fe71 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7506:	2118      	movs	r1, #24
   d7508:	4620      	mov	r0, r4
   d750a:	f001 fee0 	bl	d92ce <_ZdlPvj>
   d750e:	e7db      	b.n	d74c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7510 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7510:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7512:	2300      	movs	r3, #0
   d7514:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7516:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7518:	4604      	mov	r4, r0
   d751a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d751c:	b12b      	cbz	r3, d752a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d751e:	2202      	movs	r2, #2
   d7520:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7522:	68eb      	ldr	r3, [r5, #12]
   d7524:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7526:	68ab      	ldr	r3, [r5, #8]
   d7528:	60a3      	str	r3, [r4, #8]
    }
   d752a:	4620      	mov	r0, r4
   d752c:	bd38      	pop	{r3, r4, r5, pc}

000d752e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d752e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7530:	b570      	push	{r4, r5, r6, lr}
   d7532:	4604      	mov	r4, r0
	  switch (__op)
   d7534:	d007      	beq.n	d7546 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d7536:	2a03      	cmp	r2, #3
   d7538:	d012      	beq.n	d7560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d753a:	2a01      	cmp	r2, #1
   d753c:	d101      	bne.n	d7542 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d753e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7540:	6003      	str	r3, [r0, #0]
	}
   d7542:	2000      	movs	r0, #0
   d7544:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7546:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7548:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d754a:	f7fc fda4 	bl	d4096 <_Znwj>
   d754e:	4605      	mov	r5, r0
   d7550:	b120      	cbz	r0, d755c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7552:	4631      	mov	r1, r6
   d7554:	f7ff ffdc 	bl	d7510 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7558:	7c33      	ldrb	r3, [r6, #16]
   d755a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d755c:	6025      	str	r5, [r4, #0]
	}
   d755e:	e7f0      	b.n	d7542 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7560:	6804      	ldr	r4, [r0, #0]
   d7562:	2c00      	cmp	r4, #0
   d7564:	d0ed      	beq.n	d7542 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d7566:	4620      	mov	r0, r4
   d7568:	f7fd fe3e 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d756c:	2114      	movs	r1, #20
   d756e:	4620      	mov	r0, r4
   d7570:	f001 fead 	bl	d92ce <_ZdlPvj>
   d7574:	e7e5      	b.n	d7542 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7578 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7578:	b5f0      	push	{r4, r5, r6, r7, lr}
   d757a:	b089      	sub	sp, #36	; 0x24
   d757c:	4604      	mov	r4, r0
   d757e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7580:	a801      	add	r0, sp, #4
   d7582:	4611      	mov	r1, r2
   d7584:	f7ff fe23 	bl	d71ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7588:	b1a4      	cbz	r4, d75b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d758a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d758c:	b11d      	cbz	r5, d7596 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d758e:	4628      	mov	r0, r5
   d7590:	f002 ff98 	bl	da4c4 <strdup>
   d7594:	4605      	mov	r5, r0
   d7596:	a801      	add	r0, sp, #4
   d7598:	a903      	add	r1, sp, #12
        type_(type) {
   d759a:	9503      	str	r5, [sp, #12]
   d759c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d75a0:	f7ff fe78 	bl	d7294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d75a4:	a803      	add	r0, sp, #12
   d75a6:	f7ff fde8 	bl	d717a <_ZN8particle5ErrorD1Ev>
   d75aa:	a802      	add	r0, sp, #8
   d75ac:	f7fc ff28 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d75b0:	b009      	add	sp, #36	; 0x24
   d75b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d75b4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d75b6:	2301      	movs	r3, #1
   d75b8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d75bc:	2a00      	cmp	r2, #0
   d75be:	d103      	bne.n	d75c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d75c0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d75c4:	2900      	cmp	r1, #0
   d75c6:	d1f7      	bne.n	d75b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d75c8:	d1ef      	bne.n	d75aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d75ca:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d75cc:	f3bf 8f5b 	dmb	ish
   d75d0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d75d2:	1d2b      	adds	r3, r5, #4
   d75d4:	f3bf 8f5b 	dmb	ish
   d75d8:	e853 6f00 	ldrex	r6, [r3]
   d75dc:	e843 4200 	strex	r2, r4, [r3]
   d75e0:	2a00      	cmp	r2, #0
   d75e2:	d1f9      	bne.n	d75d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d75e4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d75e8:	2e00      	cmp	r6, #0
   d75ea:	d0de      	beq.n	d75aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d75ec:	4620      	mov	r0, r4
   d75ee:	f7ff fc23 	bl	d6e38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d75f2:	4607      	mov	r7, r0
   d75f4:	b160      	cbz	r0, d7610 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d75f6:	f105 010c 	add.w	r1, r5, #12
   d75fa:	4630      	mov	r0, r6
   d75fc:	f7ff fe16 	bl	d722c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7600:	4630      	mov	r0, r6
   d7602:	f7fd fdf1 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7606:	2110      	movs	r1, #16
   d7608:	4630      	mov	r0, r6
   d760a:	f001 fe60 	bl	d92ce <_ZdlPvj>
   d760e:	e7cc      	b.n	d75aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7610:	4631      	mov	r1, r6
   d7612:	a803      	add	r0, sp, #12
   d7614:	f7ff ff7c 	bl	d7510 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7618:	7b2b      	ldrb	r3, [r5, #12]
   d761a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d761e:	2010      	movs	r0, #16
   d7620:	f7fc fd39 	bl	d4096 <_Znwj>
   d7624:	4605      	mov	r5, r0
   d7626:	b1d0      	cbz	r0, d765e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d7628:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d762a:	2014      	movs	r0, #20
   d762c:	f7fc fd33 	bl	d4096 <_Znwj>
   d7630:	4604      	mov	r4, r0
   d7632:	b178      	cbz	r0, d7654 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d7634:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7636:	4601      	mov	r1, r0
   d7638:	a803      	add	r0, sp, #12
   d763a:	f7ff fd10 	bl	d705e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d763e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7640:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7642:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7644:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d7646:	9205      	str	r2, [sp, #20]
   d7648:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d764a:	60e3      	str	r3, [r4, #12]
   d764c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7650:	9206      	str	r2, [sp, #24]
   d7652:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7654:	4b06      	ldr	r3, [pc, #24]	; (d7670 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d7656:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7658:	4b06      	ldr	r3, [pc, #24]	; (d7674 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d765a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d765c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d765e:	a803      	add	r0, sp, #12
   d7660:	f7fd fdc2 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7664:	2200      	movs	r2, #0
   d7666:	4629      	mov	r1, r5
   d7668:	4803      	ldr	r0, [pc, #12]	; (d7678 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d766a:	f7ff fbed 	bl	d6e48 <application_thread_invoke>
   d766e:	e7c7      	b.n	d7600 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7670:	000d723f 	.word	0x000d723f
   d7674:	000d752f 	.word	0x000d752f
   d7678:	000d7027 	.word	0x000d7027

000d767c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d767c:	2200      	movs	r2, #0
   d767e:	6840      	ldr	r0, [r0, #4]
   d7680:	4611      	mov	r1, r2
   d7682:	f7ff bc65 	b.w	d6f50 <network_listening>

000d7686 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7686:	2200      	movs	r2, #0
   d7688:	6840      	ldr	r0, [r0, #4]
   d768a:	4611      	mov	r1, r2
   d768c:	f7ff bc70 	b.w	d6f70 <network_get_listen_timeout>

000d7690 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7690:	6840      	ldr	r0, [r0, #4]
   d7692:	2200      	movs	r2, #0
   d7694:	f7ff bc64 	b.w	d6f60 <network_set_listen_timeout>

000d7698 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7698:	6840      	ldr	r0, [r0, #4]
   d769a:	2200      	movs	r2, #0
   d769c:	f081 0101 	eor.w	r1, r1, #1
   d76a0:	f7ff bc4e 	b.w	d6f40 <network_listen>

000d76a4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d76a4:	2300      	movs	r3, #0
   d76a6:	6840      	ldr	r0, [r0, #4]
   d76a8:	461a      	mov	r2, r3
   d76aa:	4619      	mov	r1, r3
   d76ac:	f7ff bc40 	b.w	d6f30 <network_off>

000d76b0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d76b0:	2300      	movs	r3, #0
   d76b2:	6840      	ldr	r0, [r0, #4]
   d76b4:	461a      	mov	r2, r3
   d76b6:	4619      	mov	r1, r3
   d76b8:	f7ff bc32 	b.w	d6f20 <network_on>

000d76bc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d76bc:	2200      	movs	r2, #0
   d76be:	6840      	ldr	r0, [r0, #4]
   d76c0:	4611      	mov	r1, r2
   d76c2:	f7ff bc25 	b.w	d6f10 <network_ready>

000d76c6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d76c6:	2200      	movs	r2, #0
   d76c8:	6840      	ldr	r0, [r0, #4]
   d76ca:	4611      	mov	r1, r2
   d76cc:	f7ff bc10 	b.w	d6ef0 <network_connecting>

000d76d0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d76d0:	6840      	ldr	r0, [r0, #4]
   d76d2:	2200      	movs	r2, #0
   d76d4:	2102      	movs	r1, #2
   d76d6:	f7ff bc13 	b.w	d6f00 <network_disconnect>

000d76da <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d76da:	2300      	movs	r3, #0
   d76dc:	6840      	ldr	r0, [r0, #4]
   d76de:	461a      	mov	r2, r3
   d76e0:	f7ff bbfe 	b.w	d6ee0 <network_connect>

000d76e4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d76e4:	4b02      	ldr	r3, [pc, #8]	; (d76f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d76e6:	2203      	movs	r2, #3
   d76e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d76ea:	4a02      	ldr	r2, [pc, #8]	; (d76f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d76ec:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d76ee:	4770      	bx	lr
   d76f0:	2003e650 	.word	0x2003e650
   d76f4:	000dcb78 	.word	0x000dcb78

000d76f8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d76f8:	4770      	bx	lr

000d76fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d76fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76fc:	4606      	mov	r6, r0
   d76fe:	4615      	mov	r5, r2
   d7700:	460c      	mov	r4, r1
   d7702:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7704:	42bc      	cmp	r4, r7
   d7706:	d006      	beq.n	d7716 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7708:	6833      	ldr	r3, [r6, #0]
   d770a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d770e:	689b      	ldr	r3, [r3, #8]
   d7710:	4630      	mov	r0, r6
   d7712:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7714:	e7f6      	b.n	d7704 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7716:	4628      	mov	r0, r5
   d7718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d771a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d771a:	7c00      	ldrb	r0, [r0, #16]
   d771c:	2200      	movs	r2, #0
   d771e:	f7ff ba13 	b.w	d6b48 <hal_i2c_write>

000d7722 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7722:	7c00      	ldrb	r0, [r0, #16]
   d7724:	2100      	movs	r1, #0
   d7726:	f7ff ba17 	b.w	d6b58 <hal_i2c_available>

000d772a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d772a:	7c00      	ldrb	r0, [r0, #16]
   d772c:	2100      	movs	r1, #0
   d772e:	f7ff ba1b 	b.w	d6b68 <hal_i2c_read>

000d7732 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7732:	7c00      	ldrb	r0, [r0, #16]
   d7734:	2100      	movs	r1, #0
   d7736:	f7ff ba1f 	b.w	d6b78 <hal_i2c_peek>

000d773a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d773a:	7c00      	ldrb	r0, [r0, #16]
   d773c:	2100      	movs	r1, #0
   d773e:	f7ff ba23 	b.w	d6b88 <hal_i2c_flush>

000d7742 <_ZN7TwoWireD0Ev>:
   d7742:	b510      	push	{r4, lr}
   d7744:	2114      	movs	r1, #20
   d7746:	4604      	mov	r4, r0
   d7748:	f001 fdc1 	bl	d92ce <_ZdlPvj>
   d774c:	4620      	mov	r0, r4
   d774e:	bd10      	pop	{r4, pc}

000d7750 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7750:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7756:	4604      	mov	r4, r0
   d7758:	4608      	mov	r0, r1
   d775a:	2100      	movs	r1, #0
   d775c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7760:	4b03      	ldr	r3, [pc, #12]	; (d7770 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7762:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7764:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7766:	4611      	mov	r1, r2
   d7768:	f7ff fa1e 	bl	d6ba8 <hal_i2c_init>
}
   d776c:	4620      	mov	r0, r4
   d776e:	bd10      	pop	{r4, pc}
   d7770:	000dcbb4 	.word	0x000dcbb4

000d7774 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7774:	2300      	movs	r3, #0
   d7776:	7c00      	ldrb	r0, [r0, #16]
   d7778:	461a      	mov	r2, r3
   d777a:	4619      	mov	r1, r3
   d777c:	f7ff b9cc 	b.w	d6b18 <hal_i2c_begin>

000d7780 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7780:	7c00      	ldrb	r0, [r0, #16]
   d7782:	2200      	movs	r2, #0
   d7784:	f7ff b9d0 	b.w	d6b28 <hal_i2c_begin_transmission>

000d7788 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7788:	b2c9      	uxtb	r1, r1
   d778a:	f7ff bff9 	b.w	d7780 <_ZN7TwoWire17beginTransmissionEh>

000d778e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d778e:	7c00      	ldrb	r0, [r0, #16]
   d7790:	2200      	movs	r2, #0
   d7792:	f7ff b9d1 	b.w	d6b38 <hal_i2c_end_transmission>

000d7796 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7796:	2101      	movs	r1, #1
   d7798:	f7ff bff9 	b.w	d778e <_ZN7TwoWire15endTransmissionEh>

000d779c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d779c:	f7ff b9b4 	b.w	d6b08 <HAL_Interrupts_Disable_All>

000d77a0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d77a0:	f7ff b9aa 	b.w	d6af8 <HAL_Interrupts_Enable_All>

000d77a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d77a4:	4770      	bx	lr

000d77a6 <_ZN9IPAddressD0Ev>:
   d77a6:	b510      	push	{r4, lr}
   d77a8:	2118      	movs	r1, #24
   d77aa:	4604      	mov	r4, r0
   d77ac:	f001 fd8f 	bl	d92ce <_ZdlPvj>
   d77b0:	4620      	mov	r0, r4
   d77b2:	bd10      	pop	{r4, pc}

000d77b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d77b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d77b6:	7d03      	ldrb	r3, [r0, #20]
   d77b8:	2b06      	cmp	r3, #6
{
   d77ba:	b08d      	sub	sp, #52	; 0x34
   d77bc:	460e      	mov	r6, r1
   d77be:	f100 0704 	add.w	r7, r0, #4
   d77c2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d77c6:	d012      	beq.n	d77ee <_ZNK9IPAddress7printToER5Print+0x3a>
   d77c8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d77cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d77d0:	220a      	movs	r2, #10
   d77d2:	4630      	mov	r0, r6
   d77d4:	f000 fbdd 	bl	d7f92 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d77d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d77da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d77dc:	d019      	beq.n	d7812 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d77de:	2c00      	cmp	r4, #0
   d77e0:	d0f4      	beq.n	d77cc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d77e2:	212e      	movs	r1, #46	; 0x2e
   d77e4:	4630      	mov	r0, r6
   d77e6:	f000 fbbb 	bl	d7f60 <_ZN5Print5printEc>
   d77ea:	4404      	add	r4, r0
   d77ec:	e7ee      	b.n	d77cc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d77ee:	232f      	movs	r3, #47	; 0x2f
   d77f0:	466a      	mov	r2, sp
   d77f2:	4639      	mov	r1, r7
   d77f4:	200a      	movs	r0, #10
		buf[0] = 0;
   d77f6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d77fa:	f7ff f9e5 	bl	d6bc8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d77fe:	4668      	mov	r0, sp
   d7800:	f002 fe7d 	bl	da4fe <strlen>
   d7804:	6833      	ldr	r3, [r6, #0]
   d7806:	4602      	mov	r2, r0
   d7808:	68db      	ldr	r3, [r3, #12]
   d780a:	4669      	mov	r1, sp
   d780c:	4630      	mov	r0, r6
   d780e:	4798      	blx	r3
   d7810:	4604      	mov	r4, r0
    }
    return n;
}
   d7812:	4620      	mov	r0, r4
   d7814:	b00d      	add	sp, #52	; 0x34
   d7816:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7818 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7818:	b510      	push	{r4, lr}
   d781a:	4b05      	ldr	r3, [pc, #20]	; (d7830 <_ZN9IPAddressC1Ev+0x18>)
   d781c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d781e:	2211      	movs	r2, #17
   d7820:	f840 3b04 	str.w	r3, [r0], #4
   d7824:	2100      	movs	r1, #0
   d7826:	f002 fdf1 	bl	da40c <memset>
}
   d782a:	4620      	mov	r0, r4
   d782c:	bd10      	pop	{r4, pc}
   d782e:	bf00      	nop
   d7830:	000dcbdc 	.word	0x000dcbdc

000d7834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7834:	4603      	mov	r3, r0
   d7836:	4a07      	ldr	r2, [pc, #28]	; (d7854 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7838:	b510      	push	{r4, lr}
   d783a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d783e:	f101 0210 	add.w	r2, r1, #16
   d7842:	f851 4b04 	ldr.w	r4, [r1], #4
   d7846:	f843 4b04 	str.w	r4, [r3], #4
   d784a:	4291      	cmp	r1, r2
   d784c:	d1f9      	bne.n	d7842 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d784e:	780a      	ldrb	r2, [r1, #0]
   d7850:	701a      	strb	r2, [r3, #0]
}
   d7852:	bd10      	pop	{r4, pc}
   d7854:	000dcbdc 	.word	0x000dcbdc

000d7858 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7858:	7d03      	ldrb	r3, [r0, #20]
   d785a:	2b04      	cmp	r3, #4
   d785c:	d104      	bne.n	d7868 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d785e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7860:	3800      	subs	r0, #0
   d7862:	bf18      	it	ne
   d7864:	2001      	movne	r0, #1
   d7866:	4770      	bx	lr
    } else if (version() == 6) {
   d7868:	2b06      	cmp	r3, #6
   d786a:	d107      	bne.n	d787c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d786c:	6843      	ldr	r3, [r0, #4]
   d786e:	b93b      	cbnz	r3, d7880 <_ZNK9IPAddresscvbEv+0x28>
   d7870:	6883      	ldr	r3, [r0, #8]
   d7872:	b92b      	cbnz	r3, d7880 <_ZNK9IPAddresscvbEv+0x28>
   d7874:	68c3      	ldr	r3, [r0, #12]
   d7876:	b91b      	cbnz	r3, d7880 <_ZNK9IPAddresscvbEv+0x28>
   d7878:	6900      	ldr	r0, [r0, #16]
   d787a:	e7f1      	b.n	d7860 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d787c:	2000      	movs	r0, #0
   d787e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7880:	2001      	movs	r0, #1
}
   d7882:	4770      	bx	lr

000d7884 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7884:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7886:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d788a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d788e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7892:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7896:	2304      	movs	r3, #4
   d7898:	6041      	str	r1, [r0, #4]
   d789a:	7503      	strb	r3, [r0, #20]
}
   d789c:	bd10      	pop	{r4, pc}
	...

000d78a0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d78a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d78a2:	4d04      	ldr	r5, [pc, #16]	; (d78b4 <_ZN9IPAddressC1Ehhhh+0x14>)
   d78a4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d78a6:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d78aa:	9500      	str	r5, [sp, #0]
   d78ac:	f7ff ffea 	bl	d7884 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d78b0:	b003      	add	sp, #12
   d78b2:	bd30      	pop	{r4, r5, pc}
   d78b4:	000dcbdc 	.word	0x000dcbdc

000d78b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d78b8:	b513      	push	{r0, r1, r4, lr}
   d78ba:	4b05      	ldr	r3, [pc, #20]	; (d78d0 <_ZN9IPAddressC1EPKh+0x18>)
   d78bc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d78be:	78cb      	ldrb	r3, [r1, #3]
   d78c0:	9300      	str	r3, [sp, #0]
   d78c2:	788b      	ldrb	r3, [r1, #2]
   d78c4:	784a      	ldrb	r2, [r1, #1]
   d78c6:	7809      	ldrb	r1, [r1, #0]
   d78c8:	f7ff ffdc 	bl	d7884 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d78cc:	b002      	add	sp, #8
   d78ce:	bd10      	pop	{r4, pc}
   d78d0:	000dcbdc 	.word	0x000dcbdc

000d78d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d78d4:	f100 0310 	add.w	r3, r0, #16
   d78d8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d78da:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d78de:	2901      	cmp	r1, #1
   d78e0:	4618      	mov	r0, r3
   d78e2:	d108      	bne.n	d78f6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d78e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d78e8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d78ec:	3a01      	subs	r2, #1
   d78ee:	f103 0310 	add.w	r3, r3, #16
   d78f2:	d1f2      	bne.n	d78da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d78f4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d78f6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d78f8:	bf04      	itt	eq
   d78fa:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d78fe:	1852      	addeq	r2, r2, r1
   d7900:	e7f4      	b.n	d78ec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d7902 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7902:	4770      	bx	lr

000d7904 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7904:	2000      	movs	r0, #0
   d7906:	4770      	bx	lr

000d7908 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7908:	b510      	push	{r4, lr}
   d790a:	2110      	movs	r1, #16
   d790c:	4604      	mov	r4, r0
   d790e:	f001 fcde 	bl	d92ce <_ZdlPvj>
   d7912:	4620      	mov	r0, r4
   d7914:	bd10      	pop	{r4, pc}

000d7916 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7916:	b508      	push	{r3, lr}
      { delete this; }
   d7918:	f7ff fff6 	bl	d7908 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d791c:	bd08      	pop	{r3, pc}

000d791e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d791e:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d7920:	68c4      	ldr	r4, [r0, #12]
   d7922:	b17c      	cbz	r4, d7944 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d7924:	6820      	ldr	r0, [r4, #0]
   d7926:	b108      	cbz	r0, d792c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d7928:	f7fc fbbb 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d792c:	7a23      	ldrb	r3, [r4, #8]
   d792e:	b11b      	cbz	r3, d7938 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d7930:	6860      	ldr	r0, [r4, #4]
   d7932:	b108      	cbz	r0, d7938 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d7934:	f7fc fbb5 	bl	d40a2 <_ZdaPv>
   d7938:	4620      	mov	r0, r4
   d793a:	210c      	movs	r1, #12
   d793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7940:	f001 bcc5 	b.w	d92ce <_ZdlPvj>
   d7944:	bd10      	pop	{r4, pc}

000d7946 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7946:	b510      	push	{r4, lr}
          _M_dispose();
   d7948:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d794a:	4604      	mov	r4, r0
          _M_dispose();
   d794c:	689b      	ldr	r3, [r3, #8]
   d794e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7950:	68a3      	ldr	r3, [r4, #8]
   d7952:	3b01      	subs	r3, #1
   d7954:	60a3      	str	r3, [r4, #8]
   d7956:	b92b      	cbnz	r3, d7964 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d7958:	6823      	ldr	r3, [r4, #0]
   d795a:	4620      	mov	r0, r4
   d795c:	68db      	ldr	r3, [r3, #12]
    }
   d795e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7962:	4718      	bx	r3
    }
   d7964:	bd10      	pop	{r4, pc}

000d7966 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d7966:	b538      	push	{r3, r4, r5, lr}
   d7968:	680b      	ldr	r3, [r1, #0]
   d796a:	6003      	str	r3, [r0, #0]
   d796c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d796e:	6843      	ldr	r3, [r0, #4]
   d7970:	429d      	cmp	r5, r3
    class __shared_ptr
   d7972:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d7974:	d00c      	beq.n	d7990 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d7976:	b115      	cbz	r5, d797e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d7978:	686b      	ldr	r3, [r5, #4]
   d797a:	3301      	adds	r3, #1
   d797c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d797e:	6860      	ldr	r0, [r4, #4]
   d7980:	b128      	cbz	r0, d798e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d7982:	6843      	ldr	r3, [r0, #4]
   d7984:	3b01      	subs	r3, #1
   d7986:	6043      	str	r3, [r0, #4]
   d7988:	b90b      	cbnz	r3, d798e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d798a:	f7ff ffdc 	bl	d7946 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d798e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d7990:	4620      	mov	r0, r4
   d7992:	bd38      	pop	{r3, r4, r5, pc}

000d7994 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7994:	460b      	mov	r3, r1
   d7996:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d7998:	2200      	movs	r2, #0
   d799a:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d799c:	e9c0 2200 	strd	r2, r2, [r0]
   d79a0:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d79a2:	6083      	str	r3, [r0, #8]
    if (t) {
   d79a4:	b90b      	cbnz	r3, d79aa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d79a6:	4620      	mov	r0, r4
   d79a8:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d79aa:	f7ff ffdc 	bl	d7966 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d79ae:	e7fa      	b.n	d79a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d79b0 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d79b0:	6883      	ldr	r3, [r0, #8]
   d79b2:	b1eb      	cbz	r3, d79f0 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d79b4:	781a      	ldrb	r2, [r3, #0]
   d79b6:	2a03      	cmp	r2, #3
   d79b8:	d81a      	bhi.n	d79f0 <_ZNK5spark9JSONValue4typeEv+0x40>
   d79ba:	e8df f002 	tbb	[pc, r2]
   d79be:	1704      	.short	0x1704
   d79c0:	1b02      	.short	0x1b02
   d79c2:	2005      	movs	r0, #5
   d79c4:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d79c6:	6802      	ldr	r2, [r0, #0]
   d79c8:	685b      	ldr	r3, [r3, #4]
   d79ca:	6852      	ldr	r2, [r2, #4]
   d79cc:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d79ce:	282d      	cmp	r0, #45	; 0x2d
   d79d0:	d012      	beq.n	d79f8 <_ZNK5spark9JSONValue4typeEv+0x48>
   d79d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d79d6:	2b09      	cmp	r3, #9
   d79d8:	d90e      	bls.n	d79f8 <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d79da:	2874      	cmp	r0, #116	; 0x74
   d79dc:	d00e      	beq.n	d79fc <_ZNK5spark9JSONValue4typeEv+0x4c>
   d79de:	2866      	cmp	r0, #102	; 0x66
   d79e0:	d00c      	beq.n	d79fc <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d79e2:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d79e6:	4258      	negs	r0, r3
   d79e8:	4158      	adcs	r0, r3
   d79ea:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d79ec:	2006      	movs	r0, #6
   d79ee:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d79f0:	2000      	movs	r0, #0
   d79f2:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d79f4:	2004      	movs	r0, #4
   d79f6:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d79f8:	2003      	movs	r0, #3
   d79fa:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d79fc:	2002      	movs	r0, #2
    }
}
   d79fe:	4770      	bx	lr

000d7a00 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   d7a00:	b510      	push	{r4, lr}
   d7a02:	4604      	mov	r4, r0
    switch (type()) {
   d7a04:	f7ff ffd4 	bl	d79b0 <_ZNK5spark9JSONValue4typeEv>
   d7a08:	2802      	cmp	r0, #2
   d7a0a:	d00d      	beq.n	d7a28 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   d7a0c:	1ec3      	subs	r3, r0, #3
   d7a0e:	b2db      	uxtb	r3, r3
   d7a10:	2b01      	cmp	r3, #1
   d7a12:	d810      	bhi.n	d7a36 <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   d7a14:	6822      	ldr	r2, [r4, #0]
   d7a16:	68a3      	ldr	r3, [r4, #8]
   d7a18:	6850      	ldr	r0, [r2, #4]
   d7a1a:	685b      	ldr	r3, [r3, #4]
}
   d7a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   d7a20:	2100      	movs	r1, #0
   d7a22:	4418      	add	r0, r3
   d7a24:	f003 bbd6 	b.w	db1d4 <strtod>
        const char* const s = d_->json + t_->start;
   d7a28:	6822      	ldr	r2, [r4, #0]
   d7a2a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d7a2c:	6852      	ldr	r2, [r2, #4]
   d7a2e:	685b      	ldr	r3, [r3, #4]
   d7a30:	5cd3      	ldrb	r3, [r2, r3]
   d7a32:	2b74      	cmp	r3, #116	; 0x74
   d7a34:	d002      	beq.n	d7a3c <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   d7a36:	ed9f 0b04 	vldr	d0, [pc, #16]	; d7a48 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   d7a3a:	bd10      	pop	{r4, pc}
        return *s == 't';
   d7a3c:	ed9f 0b04 	vldr	d0, [pc, #16]	; d7a50 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   d7a40:	e7fb      	b.n	d7a3a <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   d7a42:	bf00      	nop
   d7a44:	f3af 8000 	nop.w
	...
   d7a54:	3ff00000 	.word	0x3ff00000

000d7a58 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d7a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a5c:	b086      	sub	sp, #24
   d7a5e:	4607      	mov	r7, r0
   d7a60:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   d7a62:	a802      	add	r0, sp, #8
   d7a64:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d7a66:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d7a68:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d7a6a:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d7a6c:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d7a6e:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d7a70:	f7ff f9b2 	bl	d6dd8 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d7a74:	e9cd 4400 	strd	r4, r4, [sp]
   d7a78:	4623      	mov	r3, r4
   d7a7a:	4642      	mov	r2, r8
   d7a7c:	4639      	mov	r1, r7
   d7a7e:	a802      	add	r0, sp, #8
   d7a80:	f7ff f9b2 	bl	d6de8 <jsmn_parse>
    if (n <= 0) {
   d7a84:	1e06      	subs	r6, r0, #0
   d7a86:	dd1e      	ble.n	d7ac6 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d7a88:	4910      	ldr	r1, [pc, #64]	; (d7acc <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d7a8a:	0130      	lsls	r0, r6, #4
   d7a8c:	f001 fc23 	bl	d92d6 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d7a90:	4605      	mov	r5, r0
   d7a92:	b190      	cbz	r0, d7aba <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d7a94:	4621      	mov	r1, r4
   d7a96:	a802      	add	r0, sp, #8
   d7a98:	f7ff f99e 	bl	d6dd8 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d7a9c:	e9cd 6400 	strd	r6, r4, [sp]
   d7aa0:	462b      	mov	r3, r5
   d7aa2:	4642      	mov	r2, r8
   d7aa4:	4639      	mov	r1, r7
   d7aa6:	a802      	add	r0, sp, #8
   d7aa8:	f7ff f99e 	bl	d6de8 <jsmn_parse>
   d7aac:	42a0      	cmp	r0, r4
   d7aae:	dd07      	ble.n	d7ac0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   d7ab0:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   d7ab4:	2001      	movs	r0, #1
    *count = n;
   d7ab6:	f8c9 6000 	str.w	r6, [r9]
}
   d7aba:	b006      	add	sp, #24
   d7abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7ac0:	4628      	mov	r0, r5
   d7ac2:	f7fc faee 	bl	d40a2 <_ZdaPv>
      }
   d7ac6:	4620      	mov	r0, r4
   d7ac8:	e7f7      	b.n	d7aba <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d7aca:	bf00      	nop
   d7acc:	000dcdb0 	.word	0x000dcdb0

000d7ad0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d7ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d7ad4:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d7ad6:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d7ad8:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d7ada:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d7adc:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d7ade:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d7ae0:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d7ae2:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d7ae4:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d7ae8:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d7aec:	42b4      	cmp	r4, r6
   d7aee:	d063      	beq.n	d7bb8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d7af0:	4625      	mov	r5, r4
   d7af2:	f815 2b01 	ldrb.w	r2, [r5], #1
   d7af6:	2a5c      	cmp	r2, #92	; 0x5c
   d7af8:	d12b      	bne.n	d7b52 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d7afa:	42a1      	cmp	r1, r4
   d7afc:	d007      	beq.n	d7b0e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d7afe:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d7b02:	4618      	mov	r0, r3
   d7b04:	465a      	mov	r2, fp
   d7b06:	f002 fc67 	bl	da3d8 <memmove>
   d7b0a:	4603      	mov	r3, r0
                str += n;
   d7b0c:	445b      	add	r3, fp
            if (s == end) {
   d7b0e:	42b5      	cmp	r5, r6
   d7b10:	d039      	beq.n	d7b86 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d7b12:	7862      	ldrb	r2, [r4, #1]
   d7b14:	2a75      	cmp	r2, #117	; 0x75
   d7b16:	d12a      	bne.n	d7b6e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d7b18:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d7b1a:	1ab2      	subs	r2, r6, r2
   d7b1c:	2a03      	cmp	r2, #3
   d7b1e:	dd32      	ble.n	d7b86 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d7b20:	1da0      	adds	r0, r4, #6
   d7b22:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d7b26:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d7b2a:	45ae      	cmp	lr, r5
   d7b2c:	d053      	beq.n	d7bd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d7b2e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d7b32:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d7b36:	fa5f fb82 	uxtb.w	fp, r2
   d7b3a:	f1bb 0f09 	cmp.w	fp, #9
   d7b3e:	d905      	bls.n	d7b4c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d7b40:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d7b44:	2a05      	cmp	r2, #5
   d7b46:	d807      	bhi.n	d7b58 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d7b48:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d7b4c:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d7b50:	e7eb      	b.n	d7b2a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d7b52:	4628      	mov	r0, r5
   d7b54:	4604      	mov	r4, r0
   d7b56:	e7c9      	b.n	d7aec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d7b58:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d7b5c:	2a05      	cmp	r2, #5
   d7b5e:	d812      	bhi.n	d7b86 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d7b60:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d7b64:	e7f2      	b.n	d7b4c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d7b66:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d7b6a:	4601      	mov	r1, r0
   d7b6c:	e7f2      	b.n	d7b54 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d7b6e:	2a6e      	cmp	r2, #110	; 0x6e
   d7b70:	d01c      	beq.n	d7bac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d7b72:	d80e      	bhi.n	d7b92 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d7b74:	2a62      	cmp	r2, #98	; 0x62
   d7b76:	d013      	beq.n	d7ba0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d7b78:	d807      	bhi.n	d7b8a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d7b7a:	2a2f      	cmp	r2, #47	; 0x2f
   d7b7c:	d011      	beq.n	d7ba2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d7b7e:	2a5c      	cmp	r2, #92	; 0x5c
   d7b80:	d00f      	beq.n	d7ba2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d7b82:	2a22      	cmp	r2, #34	; 0x22
   d7b84:	d00d      	beq.n	d7ba2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d7b86:	2000      	movs	r0, #0
   d7b88:	e023      	b.n	d7bd2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d7b8a:	2a66      	cmp	r2, #102	; 0x66
   d7b8c:	d1fb      	bne.n	d7b86 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d7b8e:	220c      	movs	r2, #12
   d7b90:	e007      	b.n	d7ba2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d7b92:	2a72      	cmp	r2, #114	; 0x72
   d7b94:	d00d      	beq.n	d7bb2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d7b96:	2a74      	cmp	r2, #116	; 0x74
   d7b98:	d1f5      	bne.n	d7b86 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d7b9a:	f883 a000 	strb.w	sl, [r3]
                    break;
   d7b9e:	e001      	b.n	d7ba4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d7ba0:	2208      	movs	r2, #8
   d7ba2:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d7ba4:	1ca1      	adds	r1, r4, #2
                ++str;
   d7ba6:	3301      	adds	r3, #1
                ++s;
   d7ba8:	4608      	mov	r0, r1
   d7baa:	e7d3      	b.n	d7b54 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d7bac:	f04f 020a 	mov.w	r2, #10
   d7bb0:	e7f7      	b.n	d7ba2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d7bb2:	f883 9000 	strb.w	r9, [r3]
                    break;
   d7bb6:	e7f5      	b.n	d7ba4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d7bb8:	42a1      	cmp	r1, r4
   d7bba:	d006      	beq.n	d7bca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d7bbc:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d7bbe:	4618      	mov	r0, r3
   d7bc0:	4622      	mov	r2, r4
   d7bc2:	f002 fc09 	bl	da3d8 <memmove>
   d7bc6:	4603      	mov	r3, r0
        str += n;
   d7bc8:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d7bca:	eba3 0308 	sub.w	r3, r3, r8
   d7bce:	60bb      	str	r3, [r7, #8]
    return true;
   d7bd0:	2001      	movs	r0, #1
}
   d7bd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d7bd6:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d7bda:	d9c4      	bls.n	d7b66 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d7bdc:	4621      	mov	r1, r4
   d7bde:	e7b9      	b.n	d7b54 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d7be0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d7be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7be2:	4604      	mov	r4, r0
   d7be4:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d7be6:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d7bea:	2700      	movs	r7, #0
    while (t != end) {
   d7bec:	42b4      	cmp	r4, r6
   d7bee:	d010      	beq.n	d7c12 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d7bf0:	7823      	ldrb	r3, [r4, #0]
   d7bf2:	2b03      	cmp	r3, #3
   d7bf4:	d108      	bne.n	d7c08 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d7bf6:	4629      	mov	r1, r5
   d7bf8:	4620      	mov	r0, r4
   d7bfa:	f7ff ff69 	bl	d7ad0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d7bfe:	b148      	cbz	r0, d7c14 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d7c00:	68a3      	ldr	r3, [r4, #8]
   d7c02:	54ef      	strb	r7, [r5, r3]
        ++t;
   d7c04:	3410      	adds	r4, #16
    while (t != end) {
   d7c06:	e7f1      	b.n	d7bec <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d7c08:	2b00      	cmp	r3, #0
   d7c0a:	d1fb      	bne.n	d7c04 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d7c0c:	68a2      	ldr	r2, [r4, #8]
   d7c0e:	54ab      	strb	r3, [r5, r2]
   d7c10:	e7f8      	b.n	d7c04 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d7c12:	2001      	movs	r0, #1
}
   d7c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d7c18 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7c18:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7c1a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d7c1c:	e9c0 3300 	strd	r3, r3, [r0]
   d7c20:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d7c22:	480e      	ldr	r0, [pc, #56]	; (d7c5c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d7c24:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d7c28:	b1a9      	cbz	r1, d7c56 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d7c2a:	780b      	ldrb	r3, [r1, #0]
   d7c2c:	2b03      	cmp	r3, #3
   d7c2e:	d006      	beq.n	d7c3e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d7c30:	b98b      	cbnz	r3, d7c56 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d7c32:	6813      	ldr	r3, [r2, #0]
   d7c34:	6858      	ldr	r0, [r3, #4]
   d7c36:	684b      	ldr	r3, [r1, #4]
   d7c38:	5cc3      	ldrb	r3, [r0, r3]
   d7c3a:	2b6e      	cmp	r3, #110	; 0x6e
   d7c3c:	d007      	beq.n	d7c4e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d7c3e:	6813      	ldr	r3, [r2, #0]
   d7c40:	684d      	ldr	r5, [r1, #4]
   d7c42:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d7c44:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d7c46:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d7c48:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d7c4a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d7c4c:	60e3      	str	r3, [r4, #12]
   d7c4e:	4611      	mov	r1, r2
   d7c50:	4620      	mov	r0, r4
   d7c52:	f7ff fe88 	bl	d7966 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d7c56:	4620      	mov	r0, r4
   d7c58:	bd38      	pop	{r3, r4, r5, pc}
   d7c5a:	bf00      	nop
   d7c5c:	000dc84f 	.word	0x000dc84f

000d7c60 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7c60:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7c62:	2500      	movs	r5, #0
   d7c64:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d7c66:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d7c6a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7c6e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d7c72:	4604      	mov	r4, r0
   d7c74:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d7c76:	b14b      	cbz	r3, d7c8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d7c78:	781a      	ldrb	r2, [r3, #0]
   d7c7a:	2a01      	cmp	r2, #1
   d7c7c:	d106      	bne.n	d7c8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d7c7e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d7c82:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d7c84:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d7c86:	6143      	str	r3, [r0, #20]
   d7c88:	f7ff fe6d 	bl	d7966 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d7c8c:	4620      	mov	r0, r4
   d7c8e:	bd38      	pop	{r3, r4, r5, pc}

000d7c90 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d7c90:	b510      	push	{r4, lr}
    if (!n_) {
   d7c92:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d7c94:	4604      	mov	r4, r0
    if (!n_) {
   d7c96:	b163      	cbz	r3, d7cb2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d7c98:	6880      	ldr	r0, [r0, #8]
   d7c9a:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d7c9c:	3b01      	subs	r3, #1
    ++t_;
   d7c9e:	3010      	adds	r0, #16
   d7ca0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d7ca2:	6120      	str	r0, [r4, #16]
    --n_;
   d7ca4:	6163      	str	r3, [r4, #20]
    if (n_) {
   d7ca6:	b113      	cbz	r3, d7cae <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d7ca8:	f7ff fe14 	bl	d78d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d7cac:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d7cae:	2001      	movs	r0, #1
   d7cb0:	e000      	b.n	d7cb4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d7cb2:	4618      	mov	r0, r3
}
   d7cb4:	bd10      	pop	{r4, pc}
	...

000d7cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7cb8:	b538      	push	{r3, r4, r5, lr}
   d7cba:	2300      	movs	r3, #0
   d7cbc:	4604      	mov	r4, r0
   d7cbe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7cc0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7cc2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7cc4:	f7fc f9e7 	bl	d4096 <_Znwj>
   d7cc8:	b128      	cbz	r0, d7cd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7cca:	2301      	movs	r3, #1
   d7ccc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7cd0:	4b02      	ldr	r3, [pc, #8]	; (d7cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d7cd2:	6003      	str	r3, [r0, #0]
   d7cd4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7cd6:	6020      	str	r0, [r4, #0]
	}
   d7cd8:	4620      	mov	r0, r4
   d7cda:	bd38      	pop	{r3, r4, r5, pc}
   d7cdc:	000dcbf0 	.word	0x000dcbf0

000d7ce0 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d7ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7ce2:	4604      	mov	r4, r0
   d7ce4:	b087      	sub	sp, #28
   d7ce6:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d7ce8:	200c      	movs	r0, #12
   d7cea:	4927      	ldr	r1, [pc, #156]	; (d7d88 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d7cec:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d7cee:	f001 faf0 	bl	d92d2 <_ZnwjRKSt9nothrow_t>
   d7cf2:	4601      	mov	r1, r0
   d7cf4:	b118      	cbz	r0, d7cfe <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d7cf6:	2300      	movs	r3, #0
   d7cf8:	e9c0 3300 	strd	r3, r3, [r0]
   d7cfc:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d7cfe:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7d00:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d7d02:	f7ff ffd9 	bl	d7cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d7d06:	9a02      	ldr	r2, [sp, #8]
   d7d08:	b942      	cbnz	r2, d7d1c <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d7d0a:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d7d0e:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d7d10:	a803      	add	r0, sp, #12
   d7d12:	f7fc fb75 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7d16:	4620      	mov	r0, r4
   d7d18:	b007      	add	sp, #28
   d7d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d7d1c:	2300      	movs	r3, #0
   d7d1e:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d7d20:	4629      	mov	r1, r5
   d7d22:	ab01      	add	r3, sp, #4
   d7d24:	4630      	mov	r0, r6
   d7d26:	f7ff fe97 	bl	d7a58 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d7d2a:	b918      	cbnz	r0, d7d34 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d7d2c:	e9c4 0000 	strd	r0, r0, [r4]
   d7d30:	60a0      	str	r0, [r4, #8]
}
   d7d32:	e7ed      	b.n	d7d10 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d7d34:	4914      	ldr	r1, [pc, #80]	; (d7d88 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7d36:	9f02      	ldr	r7, [sp, #8]
   d7d38:	1c68      	adds	r0, r5, #1
   d7d3a:	f001 facc 	bl	d92d6 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d7d3e:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d7d40:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d7d42:	6858      	ldr	r0, [r3, #4]
   d7d44:	2800      	cmp	r0, #0
   d7d46:	d0f1      	beq.n	d7d2c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d7d48:	462a      	mov	r2, r5
   d7d4a:	4631      	mov	r1, r6
   d7d4c:	f002 fb36 	bl	da3bc <memcpy>
   d7d50:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d7d52:	9901      	ldr	r1, [sp, #4]
   d7d54:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d7d56:	2201      	movs	r2, #1
   d7d58:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d7d5a:	685a      	ldr	r2, [r3, #4]
   d7d5c:	f7ff ff40 	bl	d7be0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d7d60:	2800      	cmp	r0, #0
   d7d62:	d0e3      	beq.n	d7d2c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d7d64:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d7d66:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7d68:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d7d6a:	9b03      	ldr	r3, [sp, #12]
   d7d6c:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d7d6e:	b113      	cbz	r3, d7d76 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d7d70:	685a      	ldr	r2, [r3, #4]
   d7d72:	3201      	adds	r2, #1
   d7d74:	605a      	str	r2, [r3, #4]
   d7d76:	aa04      	add	r2, sp, #16
   d7d78:	4620      	mov	r0, r4
   d7d7a:	f7ff fe0b 	bl	d7994 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7d7e:	a805      	add	r0, sp, #20
   d7d80:	f7fc fb3e 	bl	d4400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7d84:	e7c4      	b.n	d7d10 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d7d86:	bf00      	nop
   d7d88:	000dcdb0 	.word	0x000dcdb0

000d7d8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7d8c:	4b01      	ldr	r3, [pc, #4]	; (d7d94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7d8e:	4a02      	ldr	r2, [pc, #8]	; (d7d98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7d90:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7d92:	4770      	bx	lr
   d7d94:	2003e658 	.word	0x2003e658
   d7d98:	000dcc04 	.word	0x000dcc04

000d7d9c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7d9c:	2300      	movs	r3, #0
   d7d9e:	6840      	ldr	r0, [r0, #4]
   d7da0:	461a      	mov	r2, r3
   d7da2:	f7ff b89d 	b.w	d6ee0 <network_connect>

000d7da6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7da6:	6840      	ldr	r0, [r0, #4]
   d7da8:	2200      	movs	r2, #0
   d7daa:	2102      	movs	r1, #2
   d7dac:	f7ff b8a8 	b.w	d6f00 <network_disconnect>

000d7db0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7db0:	2200      	movs	r2, #0
   d7db2:	6840      	ldr	r0, [r0, #4]
   d7db4:	4611      	mov	r1, r2
   d7db6:	f7ff b89b 	b.w	d6ef0 <network_connecting>

000d7dba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7dba:	2200      	movs	r2, #0
   d7dbc:	6840      	ldr	r0, [r0, #4]
   d7dbe:	4611      	mov	r1, r2
   d7dc0:	f7ff b8a6 	b.w	d6f10 <network_ready>

000d7dc4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7dc4:	2300      	movs	r3, #0
   d7dc6:	6840      	ldr	r0, [r0, #4]
   d7dc8:	461a      	mov	r2, r3
   d7dca:	4619      	mov	r1, r3
   d7dcc:	f7ff b8a8 	b.w	d6f20 <network_on>

000d7dd0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7dd0:	2300      	movs	r3, #0
   d7dd2:	6840      	ldr	r0, [r0, #4]
   d7dd4:	461a      	mov	r2, r3
   d7dd6:	4619      	mov	r1, r3
   d7dd8:	f7ff b8aa 	b.w	d6f30 <network_off>

000d7ddc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7ddc:	6840      	ldr	r0, [r0, #4]
   d7dde:	2100      	movs	r1, #0
   d7de0:	f7ff b8ce 	b.w	d6f80 <network_is_on>

000d7de4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7de4:	6840      	ldr	r0, [r0, #4]
   d7de6:	2100      	movs	r1, #0
   d7de8:	f7ff b8d2 	b.w	d6f90 <network_is_off>

000d7dec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7dec:	6840      	ldr	r0, [r0, #4]
   d7dee:	2200      	movs	r2, #0
   d7df0:	f081 0101 	eor.w	r1, r1, #1
   d7df4:	f7ff b8a4 	b.w	d6f40 <network_listen>

000d7df8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7df8:	6840      	ldr	r0, [r0, #4]
   d7dfa:	2200      	movs	r2, #0
   d7dfc:	f7ff b8b0 	b.w	d6f60 <network_set_listen_timeout>

000d7e00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7e00:	2200      	movs	r2, #0
   d7e02:	6840      	ldr	r0, [r0, #4]
   d7e04:	4611      	mov	r1, r2
   d7e06:	f7ff b8b3 	b.w	d6f70 <network_get_listen_timeout>

000d7e0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7e0a:	2200      	movs	r2, #0
   d7e0c:	6840      	ldr	r0, [r0, #4]
   d7e0e:	4611      	mov	r1, r2
   d7e10:	f7ff b89e 	b.w	d6f50 <network_listening>

000d7e14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7e18:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7e1a:	b095      	sub	sp, #84	; 0x54
   d7e1c:	4616      	mov	r6, r2
   d7e1e:	460d      	mov	r5, r1
   d7e20:	4607      	mov	r7, r0
    IPAddress addr;
   d7e22:	f7ff fcf9 	bl	d7818 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7e26:	4621      	mov	r1, r4
   d7e28:	2218      	movs	r2, #24
   d7e2a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7e2c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7e2e:	f002 faed 	bl	da40c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7e32:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7e34:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7e38:	4621      	mov	r1, r4
   d7e3a:	466b      	mov	r3, sp
   d7e3c:	aa0c      	add	r2, sp, #48	; 0x30
   d7e3e:	4630      	mov	r0, r6
   d7e40:	f7fe feea 	bl	d6c18 <netdb_getaddrinfo>
    if (!r) {
   d7e44:	4604      	mov	r4, r0
   d7e46:	2800      	cmp	r0, #0
   d7e48:	d14c      	bne.n	d7ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e4a:	4602      	mov	r2, r0
   d7e4c:	2101      	movs	r1, #1
   d7e4e:	6868      	ldr	r0, [r5, #4]
   d7e50:	f7ff f85e 	bl	d6f10 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e58:	4622      	mov	r2, r4
   d7e5a:	6868      	ldr	r0, [r5, #4]
   d7e5c:	f7ff f858 	bl	d6f10 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e60:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e62:	4681      	mov	r9, r0
        bool ok = false;
   d7e64:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e66:	2e00      	cmp	r6, #0
   d7e68:	d03c      	beq.n	d7ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7e6a:	2900      	cmp	r1, #0
   d7e6c:	d13a      	bne.n	d7ee4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7e6e:	6873      	ldr	r3, [r6, #4]
   d7e70:	2b02      	cmp	r3, #2
   d7e72:	d003      	beq.n	d7e7c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7e74:	2b0a      	cmp	r3, #10
   d7e76:	d011      	beq.n	d7e9c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e78:	69f6      	ldr	r6, [r6, #28]
   d7e7a:	e7f4      	b.n	d7e66 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7e7c:	f1b8 0f00 	cmp.w	r8, #0
   d7e80:	d00a      	beq.n	d7e98 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7e82:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7e84:	a806      	add	r0, sp, #24
   d7e86:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7e88:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7e8a:	f7ff fd15 	bl	d78b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e90:	1d3c      	adds	r4, r7, #4
   d7e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e94:	682b      	ldr	r3, [r5, #0]
   d7e96:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7e98:	4641      	mov	r1, r8
   d7e9a:	e7ed      	b.n	d7e78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7e9c:	f1b9 0f00 	cmp.w	r9, #0
   d7ea0:	d101      	bne.n	d7ea6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7ea2:	4649      	mov	r1, r9
   d7ea4:	e7e8      	b.n	d7e78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7ea6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7ea8:	2210      	movs	r2, #16
   d7eaa:	a801      	add	r0, sp, #4
   d7eac:	f002 faae 	bl	da40c <memset>
                    a.v = 6;
   d7eb0:	2306      	movs	r3, #6
   d7eb2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7eb6:	ad01      	add	r5, sp, #4
   d7eb8:	f104 0308 	add.w	r3, r4, #8
   d7ebc:	3418      	adds	r4, #24
   d7ebe:	6818      	ldr	r0, [r3, #0]
   d7ec0:	6859      	ldr	r1, [r3, #4]
   d7ec2:	462a      	mov	r2, r5
   d7ec4:	c203      	stmia	r2!, {r0, r1}
   d7ec6:	3308      	adds	r3, #8
   d7ec8:	42a3      	cmp	r3, r4
   d7eca:	4615      	mov	r5, r2
   d7ecc:	d1f7      	bne.n	d7ebe <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7ece:	a901      	add	r1, sp, #4
   d7ed0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7ed2:	ad07      	add	r5, sp, #28
   d7ed4:	f7ff fcae 	bl	d7834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7eda:	1d3c      	adds	r4, r7, #4
   d7edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ede:	682b      	ldr	r3, [r5, #0]
   d7ee0:	7023      	strb	r3, [r4, #0]
   d7ee2:	e7de      	b.n	d7ea2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7ee4:	9800      	ldr	r0, [sp, #0]
   d7ee6:	f7fe fe8f 	bl	d6c08 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7eea:	4638      	mov	r0, r7
   d7eec:	b015      	add	sp, #84	; 0x54
   d7eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7ef4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7ef4:	4b02      	ldr	r3, [pc, #8]	; (d7f00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7ef6:	4a03      	ldr	r2, [pc, #12]	; (d7f04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7ef8:	601a      	str	r2, [r3, #0]
   d7efa:	2200      	movs	r2, #0
   d7efc:	605a      	str	r2, [r3, #4]

} // spark
   d7efe:	4770      	bx	lr
   d7f00:	2003e65c 	.word	0x2003e65c
   d7f04:	000dcc10 	.word	0x000dcc10

000d7f08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f0a:	4606      	mov	r6, r0
   d7f0c:	460d      	mov	r5, r1
  size_t n = 0;
   d7f0e:	188f      	adds	r7, r1, r2
   d7f10:	2400      	movs	r4, #0
  while (size--) {
   d7f12:	42bd      	cmp	r5, r7
   d7f14:	d00c      	beq.n	d7f30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7f16:	6833      	ldr	r3, [r6, #0]
   d7f18:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7f1c:	689b      	ldr	r3, [r3, #8]
   d7f1e:	4630      	mov	r0, r6
   d7f20:	4798      	blx	r3
     if (chunk>=0)
   d7f22:	1e03      	subs	r3, r0, #0
   d7f24:	db01      	blt.n	d7f2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7f26:	441c      	add	r4, r3
  while (size--) {
   d7f28:	e7f3      	b.n	d7f12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7f2a:	2c00      	cmp	r4, #0
   d7f2c:	bf08      	it	eq
   d7f2e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7f30:	4620      	mov	r0, r4
   d7f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f34 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7f34:	b513      	push	{r0, r1, r4, lr}
   d7f36:	4604      	mov	r4, r0
    }
   d7f38:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7f3a:	b159      	cbz	r1, d7f54 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7f3c:	9101      	str	r1, [sp, #4]
   d7f3e:	f002 fade 	bl	da4fe <strlen>
   d7f42:	6823      	ldr	r3, [r4, #0]
   d7f44:	9901      	ldr	r1, [sp, #4]
   d7f46:	68db      	ldr	r3, [r3, #12]
   d7f48:	4602      	mov	r2, r0
   d7f4a:	4620      	mov	r0, r4
    }
   d7f4c:	b002      	add	sp, #8
   d7f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7f52:	4718      	bx	r3
    }
   d7f54:	b002      	add	sp, #8
   d7f56:	bd10      	pop	{r4, pc}

000d7f58 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7f58:	b508      	push	{r3, lr}
  return write(str);
   d7f5a:	f7ff ffeb 	bl	d7f34 <_ZN5Print5writeEPKc>
}
   d7f5e:	bd08      	pop	{r3, pc}

000d7f60 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7f60:	6803      	ldr	r3, [r0, #0]
   d7f62:	689b      	ldr	r3, [r3, #8]
   d7f64:	4718      	bx	r3

000d7f66 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7f66:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7f68:	210d      	movs	r1, #13
{
   d7f6a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7f6c:	f7ff fff8 	bl	d7f60 <_ZN5Print5printEc>
  n += print('\n');
   d7f70:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7f72:	4604      	mov	r4, r0
  n += print('\n');
   d7f74:	4628      	mov	r0, r5
   d7f76:	f7ff fff3 	bl	d7f60 <_ZN5Print5printEc>
  return n;
}
   d7f7a:	4420      	add	r0, r4
   d7f7c:	bd38      	pop	{r3, r4, r5, pc}

000d7f7e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7f7e:	b538      	push	{r3, r4, r5, lr}
   d7f80:	4605      	mov	r5, r0
  return write(str);
   d7f82:	f7ff ffd7 	bl	d7f34 <_ZN5Print5writeEPKc>
   d7f86:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7f88:	4628      	mov	r0, r5
   d7f8a:	f7ff ffec 	bl	d7f66 <_ZN5Print7printlnEv>
  return n;
}
   d7f8e:	4420      	add	r0, r4
   d7f90:	bd38      	pop	{r3, r4, r5, pc}

000d7f92 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7f92:	b530      	push	{r4, r5, lr}
   d7f94:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7f96:	2300      	movs	r3, #0
   d7f98:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7f9c:	2a01      	cmp	r2, #1
   d7f9e:	bf98      	it	ls
   d7fa0:	220a      	movls	r2, #10
   d7fa2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7fa4:	460d      	mov	r5, r1
   d7fa6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7faa:	fb01 5312 	mls	r3, r1, r2, r5
   d7fae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7fb2:	2b09      	cmp	r3, #9
   d7fb4:	bf94      	ite	ls
   d7fb6:	3330      	addls	r3, #48	; 0x30
   d7fb8:	3337      	addhi	r3, #55	; 0x37
   d7fba:	b2db      	uxtb	r3, r3
  } while(n);
   d7fbc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7fbe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7fc2:	d9ef      	bls.n	d7fa4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7fc4:	4621      	mov	r1, r4
   d7fc6:	f7ff ffb5 	bl	d7f34 <_ZN5Print5writeEPKc>
}
   d7fca:	b00b      	add	sp, #44	; 0x2c
   d7fcc:	bd30      	pop	{r4, r5, pc}

000d7fce <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7fce:	b510      	push	{r4, lr}
   d7fd0:	4604      	mov	r4, r0
   d7fd2:	f7fd f909 	bl	d51e8 <_ZNSt14_Function_baseD1Ev>
   d7fd6:	4620      	mov	r0, r4
   d7fd8:	bd10      	pop	{r4, pc}
	...

000d7fdc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7fdc:	4803      	ldr	r0, [pc, #12]	; (d7fec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7fde:	4a04      	ldr	r2, [pc, #16]	; (d7ff0 <_GLOBAL__sub_I_RGB+0x14>)
   d7fe0:	4904      	ldr	r1, [pc, #16]	; (d7ff4 <_GLOBAL__sub_I_RGB+0x18>)
   d7fe2:	2300      	movs	r3, #0
   d7fe4:	6083      	str	r3, [r0, #8]
   d7fe6:	f001 b96d 	b.w	d92c4 <__aeabi_atexit>
   d7fea:	bf00      	nop
   d7fec:	2003e664 	.word	0x2003e664
   d7ff0:	2003e428 	.word	0x2003e428
   d7ff4:	000d7fcf 	.word	0x000d7fcf

000d7ff8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7ff8:	b510      	push	{r4, lr}
   d7ffa:	4604      	mov	r4, r0
   d7ffc:	4608      	mov	r0, r1
{
    _spi = spi;
   d7ffe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d8000:	f7fe fe5a 	bl	d6cb8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8004:	2300      	movs	r3, #0
   d8006:	6063      	str	r3, [r4, #4]
}
   d8008:	4620      	mov	r0, r4
   d800a:	bd10      	pop	{r4, pc}

000d800c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d800c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8010:	ec57 6b10 	vmov	r6, r7, d0
   d8014:	4680      	mov	r8, r0
   d8016:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d8018:	ee10 0a10 	vmov	r0, s0
   d801c:	2200      	movs	r2, #0
   d801e:	2300      	movs	r3, #0
   d8020:	4639      	mov	r1, r7
   d8022:	f001 ff57 	bl	d9ed4 <__aeabi_dcmplt>
   d8026:	b128      	cbz	r0, d8034 <_Z4dtoadhPc+0x28>
        val = -val;
   d8028:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d802c:	461f      	mov	r7, r3
        *sout++ = '-';
   d802e:	232d      	movs	r3, #45	; 0x2d
   d8030:	f804 3b01 	strb.w	r3, [r4], #1
   d8034:	2300      	movs	r3, #0
    }
    long scale = 1;
   d8036:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d803a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d803c:	b2d9      	uxtb	r1, r3
   d803e:	4588      	cmp	r8, r1
   d8040:	d903      	bls.n	d804a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d8042:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d8046:	3301      	adds	r3, #1
   d8048:	e7f8      	b.n	d803c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d804a:	4648      	mov	r0, r9
   d804c:	f001 fc66 	bl	d991c <__aeabi_i2d>
   d8050:	4632      	mov	r2, r6
   d8052:	463b      	mov	r3, r7
   d8054:	f001 fccc 	bl	d99f0 <__aeabi_dmul>
   d8058:	4606      	mov	r6, r0
   d805a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d805c:	f002 f812 	bl	da084 <__aeabi_d2ulz>
   d8060:	4605      	mov	r5, r0
   d8062:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d8064:	f001 fc8e 	bl	d9984 <__aeabi_ul2d>
   d8068:	4602      	mov	r2, r0
   d806a:	460b      	mov	r3, r1
   d806c:	4630      	mov	r0, r6
   d806e:	4639      	mov	r1, r7
   d8070:	f001 fb06 	bl	d9680 <__aeabi_dsub>
   d8074:	4b13      	ldr	r3, [pc, #76]	; (d80c4 <_Z4dtoadhPc+0xb8>)
   d8076:	2200      	movs	r2, #0
   d8078:	f001 ff40 	bl	d9efc <__aeabi_dcmpge>
   d807c:	b110      	cbz	r0, d8084 <_Z4dtoadhPc+0x78>
        fixed++;
   d807e:	3501      	adds	r5, #1
   d8080:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d8084:	464a      	mov	r2, r9
   d8086:	4628      	mov	r0, r5
   d8088:	17d3      	asrs	r3, r2, #31
   d808a:	4651      	mov	r1, sl
   d808c:	f001 ffe2 	bl	da054 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d8090:	2301      	movs	r3, #1
   d8092:	4615      	mov	r5, r2
   d8094:	4621      	mov	r1, r4
   d8096:	220a      	movs	r2, #10
   d8098:	f000 ffaf 	bl	d8ffa <ultoa>
    if (prec) {
   d809c:	f1b8 0f00 	cmp.w	r8, #0
   d80a0:	d00d      	beq.n	d80be <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d80a2:	4620      	mov	r0, r4
   d80a4:	f002 fa2b 	bl	da4fe <strlen>
        *sout++ = '.';
   d80a8:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d80aa:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d80ac:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d80ae:	220a      	movs	r2, #10
   d80b0:	4643      	mov	r3, r8
   d80b2:	4628      	mov	r0, r5
   d80b4:	3101      	adds	r1, #1
    }
}
   d80b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d80ba:	f000 bf9e 	b.w	d8ffa <ultoa>
}
   d80be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80c2:	bf00      	nop
   d80c4:	3fe00000 	.word	0x3fe00000

000d80c8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d80c8:	b510      	push	{r4, lr}
   d80ca:	4604      	mov	r4, r0
{
	free(buffer);
   d80cc:	6800      	ldr	r0, [r0, #0]
   d80ce:	f7fe ff6f 	bl	d6fb0 <free>
}
   d80d2:	4620      	mov	r0, r4
   d80d4:	bd10      	pop	{r4, pc}

000d80d6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d80d6:	b510      	push	{r4, lr}
   d80d8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d80da:	6800      	ldr	r0, [r0, #0]
   d80dc:	b108      	cbz	r0, d80e2 <_ZN6String10invalidateEv+0xc>
   d80de:	f7fe ff67 	bl	d6fb0 <free>
	buffer = NULL;
   d80e2:	2300      	movs	r3, #0
	capacity = len = 0;
   d80e4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d80e8:	6023      	str	r3, [r4, #0]
}
   d80ea:	bd10      	pop	{r4, pc}

000d80ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d80ec:	b538      	push	{r3, r4, r5, lr}
   d80ee:	4604      	mov	r4, r0
   d80f0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d80f2:	6800      	ldr	r0, [r0, #0]
   d80f4:	3101      	adds	r1, #1
   d80f6:	f7fe ff63 	bl	d6fc0 <realloc>
	if (newbuffer) {
   d80fa:	b110      	cbz	r0, d8102 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d80fc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d8100:	2001      	movs	r0, #1
	}
	return 0;
}
   d8102:	bd38      	pop	{r3, r4, r5, pc}

000d8104 <_ZN6String7reserveEj>:
{
   d8104:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8106:	6803      	ldr	r3, [r0, #0]
{
   d8108:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d810a:	b123      	cbz	r3, d8116 <_ZN6String7reserveEj+0x12>
   d810c:	6843      	ldr	r3, [r0, #4]
   d810e:	428b      	cmp	r3, r1
   d8110:	d301      	bcc.n	d8116 <_ZN6String7reserveEj+0x12>
   d8112:	2001      	movs	r0, #1
}
   d8114:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8116:	4620      	mov	r0, r4
   d8118:	f7ff ffe8 	bl	d80ec <_ZN6String12changeBufferEj>
   d811c:	2800      	cmp	r0, #0
   d811e:	d0f9      	beq.n	d8114 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d8120:	68a3      	ldr	r3, [r4, #8]
   d8122:	2b00      	cmp	r3, #0
   d8124:	d1f5      	bne.n	d8112 <_ZN6String7reserveEj+0xe>
   d8126:	6822      	ldr	r2, [r4, #0]
   d8128:	7013      	strb	r3, [r2, #0]
   d812a:	e7f2      	b.n	d8112 <_ZN6String7reserveEj+0xe>

000d812c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d812c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d812e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d8130:	4611      	mov	r1, r2
   d8132:	9201      	str	r2, [sp, #4]
{
   d8134:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8136:	f7ff ffe5 	bl	d8104 <_ZN6String7reserveEj>
   d813a:	9a01      	ldr	r2, [sp, #4]
   d813c:	b928      	cbnz	r0, d814a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d813e:	4620      	mov	r0, r4
   d8140:	f7ff ffc9 	bl	d80d6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8144:	4620      	mov	r0, r4
   d8146:	b003      	add	sp, #12
   d8148:	bd30      	pop	{r4, r5, pc}
	len = length;
   d814a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d814c:	4629      	mov	r1, r5
   d814e:	6820      	ldr	r0, [r4, #0]
   d8150:	f002 f934 	bl	da3bc <memcpy>
	buffer[len] = 0;
   d8154:	6822      	ldr	r2, [r4, #0]
   d8156:	68a3      	ldr	r3, [r4, #8]
   d8158:	2100      	movs	r1, #0
   d815a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d815c:	e7f2      	b.n	d8144 <_ZN6String4copyEPKcj+0x18>

000d815e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d815e:	4288      	cmp	r0, r1
{
   d8160:	b510      	push	{r4, lr}
   d8162:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8164:	d005      	beq.n	d8172 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8166:	680b      	ldr	r3, [r1, #0]
   d8168:	b12b      	cbz	r3, d8176 <_ZN6StringaSERKS_+0x18>
   d816a:	688a      	ldr	r2, [r1, #8]
   d816c:	4619      	mov	r1, r3
   d816e:	f7ff ffdd 	bl	d812c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8172:	4620      	mov	r0, r4
   d8174:	bd10      	pop	{r4, pc}
	else invalidate();
   d8176:	f7ff ffae 	bl	d80d6 <_ZN6String10invalidateEv>
   d817a:	e7fa      	b.n	d8172 <_ZN6StringaSERKS_+0x14>

000d817c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d817c:	b510      	push	{r4, lr}
	buffer = NULL;
   d817e:	2300      	movs	r3, #0
String::String(const String &value)
   d8180:	4604      	mov	r4, r0
	capacity = 0;
   d8182:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d8186:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8188:	7303      	strb	r3, [r0, #12]
	*this = value;
   d818a:	f7ff ffe8 	bl	d815e <_ZN6StringaSERKS_>
}
   d818e:	4620      	mov	r0, r4
   d8190:	bd10      	pop	{r4, pc}

000d8192 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8192:	b513      	push	{r0, r1, r4, lr}
   d8194:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8196:	b159      	cbz	r1, d81b0 <_ZN6StringaSEPKc+0x1e>
   d8198:	4608      	mov	r0, r1
   d819a:	9101      	str	r1, [sp, #4]
   d819c:	f002 f9af 	bl	da4fe <strlen>
   d81a0:	9901      	ldr	r1, [sp, #4]
   d81a2:	4602      	mov	r2, r0
   d81a4:	4620      	mov	r0, r4
   d81a6:	f7ff ffc1 	bl	d812c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d81aa:	4620      	mov	r0, r4
   d81ac:	b002      	add	sp, #8
   d81ae:	bd10      	pop	{r4, pc}
	else invalidate();
   d81b0:	f7ff ff91 	bl	d80d6 <_ZN6String10invalidateEv>
   d81b4:	e7f9      	b.n	d81aa <_ZN6StringaSEPKc+0x18>

000d81b6 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d81b6:	b510      	push	{r4, lr}
   d81b8:	4604      	mov	r4, r0
   d81ba:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d81bc:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d81be:	4608      	mov	r0, r1
	capacity = 0;
   d81c0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d81c4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d81c6:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d81c8:	a901      	add	r1, sp, #4
   d81ca:	b2c0      	uxtb	r0, r0
   d81cc:	f7ff ff1e 	bl	d800c <_Z4dtoadhPc>
        *this = buf;
   d81d0:	a901      	add	r1, sp, #4
   d81d2:	4620      	mov	r0, r4
   d81d4:	f7ff ffdd 	bl	d8192 <_ZN6StringaSEPKc>
}
   d81d8:	4620      	mov	r0, r4
   d81da:	b00a      	add	sp, #40	; 0x28
   d81dc:	bd10      	pop	{r4, pc}

000d81de <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d81de:	b570      	push	{r4, r5, r6, lr}
   d81e0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d81e2:	460e      	mov	r6, r1
   d81e4:	b909      	cbnz	r1, d81ea <_ZN6String6concatEPKcj+0xc>
   d81e6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d81e8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d81ea:	b16a      	cbz	r2, d8208 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d81ec:	6884      	ldr	r4, [r0, #8]
   d81ee:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d81f0:	4621      	mov	r1, r4
   d81f2:	f7ff ff87 	bl	d8104 <_ZN6String7reserveEj>
   d81f6:	2800      	cmp	r0, #0
   d81f8:	d0f5      	beq.n	d81e6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d81fa:	6828      	ldr	r0, [r5, #0]
   d81fc:	68ab      	ldr	r3, [r5, #8]
   d81fe:	4631      	mov	r1, r6
   d8200:	4418      	add	r0, r3
   d8202:	f002 f956 	bl	da4b2 <strcpy>
	len = newlen;
   d8206:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d8208:	2001      	movs	r0, #1
   d820a:	e7ed      	b.n	d81e8 <_ZN6String6concatEPKcj+0xa>

000d820c <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d820c:	b513      	push	{r0, r1, r4, lr}
   d820e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8210:	b929      	cbnz	r1, d821e <_ZplRK15StringSumHelperPKc+0x12>
   d8212:	4620      	mov	r0, r4
   d8214:	f7ff ff5f 	bl	d80d6 <_ZN6String10invalidateEv>
	return a;
}
   d8218:	4620      	mov	r0, r4
   d821a:	b002      	add	sp, #8
   d821c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d821e:	4608      	mov	r0, r1
   d8220:	9101      	str	r1, [sp, #4]
   d8222:	f002 f96c 	bl	da4fe <strlen>
   d8226:	9901      	ldr	r1, [sp, #4]
   d8228:	4602      	mov	r2, r0
   d822a:	4620      	mov	r0, r4
   d822c:	f7ff ffd7 	bl	d81de <_ZN6String6concatEPKcj>
   d8230:	2800      	cmp	r0, #0
   d8232:	d0ee      	beq.n	d8212 <_ZplRK15StringSumHelperPKc+0x6>
   d8234:	e7f0      	b.n	d8218 <_ZplRK15StringSumHelperPKc+0xc>

000d8236 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8236:	b510      	push	{r4, lr}
   d8238:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d823a:	6800      	ldr	r0, [r0, #0]
   d823c:	b118      	cbz	r0, d8246 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d823e:	f7fe feb7 	bl	d6fb0 <free>
            wakeupSource_ = nullptr;
   d8242:	2300      	movs	r3, #0
   d8244:	6023      	str	r3, [r4, #0]
        }
    }
   d8246:	bd10      	pop	{r4, pc}

000d8248 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8248:	b510      	push	{r4, lr}
   d824a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d824c:	f7ff fff3 	bl	d8236 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d8250:	4620      	mov	r0, r4
   d8252:	bd10      	pop	{r4, pc}

000d8254 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8254:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8256:	4b09      	ldr	r3, [pc, #36]	; (d827c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d8258:	4c09      	ldr	r4, [pc, #36]	; (d8280 <_GLOBAL__sub_I_System+0x2c>)
   d825a:	2202      	movs	r2, #2
   d825c:	2000      	movs	r0, #0
   d825e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d8260:	4b08      	ldr	r3, [pc, #32]	; (d8284 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d8262:	6020      	str	r0, [r4, #0]
   d8264:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d8266:	71a0      	strb	r0, [r4, #6]
   d8268:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d826a:	f7fe fdd5 	bl	d6e18 <set_system_mode>
SystemClass System;
   d826e:	4620      	mov	r0, r4
   d8270:	4a05      	ldr	r2, [pc, #20]	; (d8288 <_GLOBAL__sub_I_System+0x34>)
   d8272:	4906      	ldr	r1, [pc, #24]	; (d828c <_GLOBAL__sub_I_System+0x38>)
   d8274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d8278:	f001 b824 	b.w	d92c4 <__aeabi_atexit>
   d827c:	2003e680 	.word	0x2003e680
   d8280:	2003e674 	.word	0x2003e674
   d8284:	ffff0000 	.word	0xffff0000
   d8288:	2003e428 	.word	0x2003e428
   d828c:	000d8249 	.word	0x000d8249

000d8290 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8290:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8292:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d8294:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8298:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d829a:	2201      	movs	r2, #1
   d829c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d82a0:	f10d 0107 	add.w	r1, sp, #7
   d82a4:	47a0      	blx	r4
}
   d82a6:	b002      	add	sp, #8
   d82a8:	bd10      	pop	{r4, pc}

000d82aa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d82aa:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d82ac:	6803      	ldr	r3, [r0, #0]
   d82ae:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d82b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d82b4:	46a4      	mov	ip, r4
}
   d82b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d82ba:	4760      	bx	ip

000d82bc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d82bc:	b513      	push	{r0, r1, r4, lr}
   d82be:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d82c0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d82c2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d82c6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d82c8:	f10d 0107 	add.w	r1, sp, #7
   d82cc:	2201      	movs	r2, #1
   d82ce:	47a0      	blx	r4
}
   d82d0:	b002      	add	sp, #8
   d82d2:	bd10      	pop	{r4, pc}

000d82d4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d82d4:	4770      	bx	lr

000d82d6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d82d6:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d82d8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d82da:	681a      	ldr	r2, [r3, #0]
   d82dc:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d82de:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d82e0:	da10      	bge.n	d8304 <_ZN9TCPClient9connectedEv+0x2e>
   d82e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d82e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d82ea:	429a      	cmp	r2, r3
   d82ec:	d10a      	bne.n	d8304 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d82ee:	6803      	ldr	r3, [r0, #0]
   d82f0:	691b      	ldr	r3, [r3, #16]
   d82f2:	4798      	blx	r3
        if (!rv) {
   d82f4:	4604      	mov	r4, r0
   d82f6:	b928      	cbnz	r0, d8304 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d82f8:	682b      	ldr	r3, [r5, #0]
   d82fa:	4628      	mov	r0, r5
   d82fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d82fe:	4798      	blx	r3
        rv = available();
   d8300:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d8302:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d8304:	2001      	movs	r0, #1
   d8306:	e7fc      	b.n	d8302 <_ZN9TCPClient9connectedEv+0x2c>

000d8308 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d8308:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d830a:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d830c:	43c0      	mvns	r0, r0
   d830e:	0fc0      	lsrs	r0, r0, #31
   d8310:	4770      	bx	lr

000d8312 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d8312:	4770      	bx	lr

000d8314 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d8314:	4b06      	ldr	r3, [pc, #24]	; (d8330 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d8316:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d8318:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d831a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d831e:	d005      	beq.n	d832c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d8320:	4608      	mov	r0, r1
   d8322:	f001 f88f 	bl	d9444 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d8326:	2800      	cmp	r0, #0
	return nullptr;
   d8328:	bf08      	it	eq
   d832a:	2400      	moveq	r4, #0
      }
   d832c:	4620      	mov	r0, r4
   d832e:	bd10      	pop	{r4, pc}
   d8330:	000dcb10 	.word	0x000dcb10

000d8334 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d8334:	b510      	push	{r4, lr}
   d8336:	21ac      	movs	r1, #172	; 0xac
   d8338:	4604      	mov	r4, r0
   d833a:	f000 ffc8 	bl	d92ce <_ZdlPvj>
   d833e:	4620      	mov	r0, r4
   d8340:	bd10      	pop	{r4, pc}

000d8342 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d8342:	f7fb beac 	b.w	d409e <_ZdlPv>

000d8346 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d834a:	f04f 0800 	mov.w	r8, #0
   d834e:	b086      	sub	sp, #24
   d8350:	461d      	mov	r5, r3
   d8352:	f8c0 8004 	str.w	r8, [r0, #4]
   d8356:	4604      	mov	r4, r0
   d8358:	460e      	mov	r6, r1
   d835a:	4617      	mov	r7, r2
    struct timeval tv = {};
   d835c:	4641      	mov	r1, r8
   d835e:	2210      	movs	r2, #16
   d8360:	a802      	add	r0, sp, #8
   d8362:	f002 f853 	bl	da40c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8366:	1c6b      	adds	r3, r5, #1
   d8368:	d009      	beq.n	d837e <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d836a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d836e:	fbb5 f3f0 	udiv	r3, r5, r0
   d8372:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8376:	fb00 5313 	mls	r3, r0, r3, r5
   d837a:	4358      	muls	r0, r3
   d837c:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d837e:	6960      	ldr	r0, [r4, #20]
   d8380:	2310      	movs	r3, #16
   d8382:	9300      	str	r3, [sp, #0]
   d8384:	6800      	ldr	r0, [r0, #0]
   d8386:	ab02      	add	r3, sp, #8
   d8388:	f241 0205 	movw	r2, #4101	; 0x1005
   d838c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8390:	f7fe fc52 	bl	d6c38 <sock_setsockopt>
    if (ret < 0) {
   d8394:	2800      	cmp	r0, #0
   d8396:	da07      	bge.n	d83a8 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d8398:	f7fe fe32 	bl	d7000 <__errno>
   d839c:	6803      	ldr	r3, [r0, #0]
   d839e:	6063      	str	r3, [r4, #4]
        return 0;
   d83a0:	2000      	movs	r0, #0
}
   d83a2:	b006      	add	sp, #24
   d83a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d83a8:	6960      	ldr	r0, [r4, #20]
   d83aa:	2300      	movs	r3, #0
   d83ac:	6800      	ldr	r0, [r0, #0]
   d83ae:	463a      	mov	r2, r7
   d83b0:	4631      	mov	r1, r6
   d83b2:	f7fe fc69 	bl	d6c88 <sock_send>
    if (ret < 0) {
   d83b6:	1e03      	subs	r3, r0, #0
   d83b8:	dbee      	blt.n	d8398 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d83ba:	4618      	mov	r0, r3
   d83bc:	e7f1      	b.n	d83a2 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d83c0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d83c0:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d83c2:	694d      	ldr	r5, [r1, #20]
   d83c4:	4b05      	ldr	r3, [pc, #20]	; (d83dc <_ZN9TCPClient8remoteIPEv+0x1c>)
   d83c6:	4604      	mov	r4, r0
   d83c8:	358c      	adds	r5, #140	; 0x8c
   d83ca:	f844 3b04 	str.w	r3, [r4], #4
   d83ce:	4606      	mov	r6, r0
   d83d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d83d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d83d4:	682b      	ldr	r3, [r5, #0]
   d83d6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d83d8:	4630      	mov	r0, r6
   d83da:	bd70      	pop	{r4, r5, r6, pc}
   d83dc:	000dcbdc 	.word	0x000dcbdc

000d83e0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d83e0:	b510      	push	{r4, lr}
   d83e2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d83e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d83e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d83ec:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d83ee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d83f0:	d005      	beq.n	d83fe <_ZN9TCPClient4peekEv+0x1e>
   d83f2:	6963      	ldr	r3, [r4, #20]
   d83f4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d83f8:	4413      	add	r3, r2
   d83fa:	7918      	ldrb	r0, [r3, #4]
}
   d83fc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d83fe:	6803      	ldr	r3, [r0, #0]
   d8400:	691b      	ldr	r3, [r3, #16]
   d8402:	4798      	blx	r3
   d8404:	2800      	cmp	r0, #0
   d8406:	d1f4      	bne.n	d83f2 <_ZN9TCPClient4peekEv+0x12>
   d8408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d840c:	e7f6      	b.n	d83fc <_ZN9TCPClient4peekEv+0x1c>

000d840e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d840e:	b510      	push	{r4, lr}
   d8410:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8412:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8416:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d841a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d841c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d841e:	d008      	beq.n	d8432 <_ZN9TCPClient4readEv+0x24>
   d8420:	6963      	ldr	r3, [r4, #20]
   d8422:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8426:	1c51      	adds	r1, r2, #1
   d8428:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d842c:	4413      	add	r3, r2
   d842e:	7918      	ldrb	r0, [r3, #4]
}
   d8430:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8432:	6803      	ldr	r3, [r0, #0]
   d8434:	691b      	ldr	r3, [r3, #16]
   d8436:	4798      	blx	r3
   d8438:	2800      	cmp	r0, #0
   d843a:	d1f1      	bne.n	d8420 <_ZN9TCPClient4readEv+0x12>
   d843c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8440:	e7f6      	b.n	d8430 <_ZN9TCPClient4readEv+0x22>

000d8442 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8444:	6943      	ldr	r3, [r0, #20]
   d8446:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d8448:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d844c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8450:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d8452:	4605      	mov	r5, r0
   d8454:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d8456:	d016      	beq.n	d8486 <_ZN9TCPClient4readEPhj+0x44>
   d8458:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d845a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d845e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8462:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8464:	42bc      	cmp	r4, r7
   d8466:	bf28      	it	cs
   d8468:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d846a:	3304      	adds	r3, #4
   d846c:	4622      	mov	r2, r4
   d846e:	4419      	add	r1, r3
   d8470:	4630      	mov	r0, r6
   d8472:	f001 ffa3 	bl	da3bc <memcpy>
   d8476:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d8478:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d847c:	4423      	add	r3, r4
   d847e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d8482:	4620      	mov	r0, r4
   d8484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d8486:	6803      	ldr	r3, [r0, #0]
   d8488:	691b      	ldr	r3, [r3, #16]
   d848a:	4798      	blx	r3
   d848c:	2800      	cmp	r0, #0
   d848e:	d1e3      	bne.n	d8458 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d8490:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d8494:	e7f5      	b.n	d8482 <_ZN9TCPClient4readEPhj+0x40>

000d8496 <_ZN9TCPClient12flush_bufferEv>:
   d8496:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d8498:	2300      	movs	r3, #0
   d849a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d849e:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d84a0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d84a4:	4770      	bx	lr

000d84a6 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d84a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d84aa:	461f      	mov	r7, r3
    stop();
   d84ac:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d84ae:	460c      	mov	r4, r1
    stop();
   d84b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d84b2:	b08a      	sub	sp, #40	; 0x28
   d84b4:	4605      	mov	r5, r0
   d84b6:	4616      	mov	r6, r2
    stop();
   d84b8:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d84ba:	7d23      	ldrb	r3, [r4, #20]
   d84bc:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d84c0:	2b04      	cmp	r3, #4
   d84c2:	bf0c      	ite	eq
   d84c4:	2002      	moveq	r0, #2
   d84c6:	200a      	movne	r0, #10
   d84c8:	2206      	movs	r2, #6
   d84ca:	2101      	movs	r1, #1
   d84cc:	f7fe fbec 	bl	d6ca8 <sock_socket>
   d84d0:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d84d4:	696b      	ldr	r3, [r5, #20]
   d84d6:	681b      	ldr	r3, [r3, #0]
   d84d8:	2b00      	cmp	r3, #0
   d84da:	da08      	bge.n	d84ee <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d84dc:	682b      	ldr	r3, [r5, #0]
   d84de:	4628      	mov	r0, r5
   d84e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d84e2:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d84e4:	4798      	blx	r3
}
   d84e6:	4620      	mov	r0, r4
   d84e8:	b00a      	add	sp, #40	; 0x28
   d84ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d84ee:	4628      	mov	r0, r5
   d84f0:	f7ff ffd1 	bl	d8496 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d84f4:	b1b7      	cbz	r7, d8524 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d84f6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d84f8:	a903      	add	r1, sp, #12
   d84fa:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d84fc:	9303      	str	r3, [sp, #12]
   d84fe:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8502:	f7fe fb59 	bl	d6bb8 <if_index_to_name>
   d8506:	2800      	cmp	r0, #0
   d8508:	d1e8      	bne.n	d84dc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d850a:	6968      	ldr	r0, [r5, #20]
   d850c:	2306      	movs	r3, #6
   d850e:	9300      	str	r3, [sp, #0]
   d8510:	6800      	ldr	r0, [r0, #0]
   d8512:	ab03      	add	r3, sp, #12
   d8514:	f241 020b 	movw	r2, #4107	; 0x100b
   d8518:	f640 71ff 	movw	r1, #4095	; 0xfff
   d851c:	f7fe fb8c 	bl	d6c38 <sock_setsockopt>
   d8520:	2800      	cmp	r0, #0
   d8522:	d1db      	bne.n	d84dc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d8524:	221c      	movs	r2, #28
   d8526:	2100      	movs	r1, #0
   d8528:	a803      	add	r0, sp, #12
   d852a:	f001 ff6f 	bl	da40c <memset>
    if (ip.version() == 4) {
   d852e:	7d23      	ldrb	r3, [r4, #20]
   d8530:	2b04      	cmp	r3, #4
   d8532:	d11d      	bne.n	d8570 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d8534:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d8538:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d853a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d853e:	f7fe fb5b 	bl	d6bf8 <inet_htons>
   d8542:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8546:	6860      	ldr	r0, [r4, #4]
   d8548:	f7fe fb46 	bl	d6bd8 <inet_htonl>
   d854c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d854e:	696b      	ldr	r3, [r5, #20]
   d8550:	221c      	movs	r2, #28
   d8552:	6818      	ldr	r0, [r3, #0]
   d8554:	a903      	add	r1, sp, #12
   d8556:	f7fe fb7f 	bl	d6c58 <sock_connect>
   d855a:	2800      	cmp	r0, #0
   d855c:	d1be      	bne.n	d84dc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d855e:	3404      	adds	r4, #4
   d8560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8562:	696d      	ldr	r5, [r5, #20]
   d8564:	358c      	adds	r5, #140	; 0x8c
   d8566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8568:	6823      	ldr	r3, [r4, #0]
   d856a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d856c:	2401      	movs	r4, #1
   d856e:	e7ba      	b.n	d84e6 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d8570:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d8574:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d8576:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d857a:	f7fe fb3d 	bl	d6bf8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d857e:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d8580:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8584:	1d23      	adds	r3, r4, #4
   d8586:	f104 0714 	add.w	r7, r4, #20
   d858a:	6818      	ldr	r0, [r3, #0]
   d858c:	6859      	ldr	r1, [r3, #4]
   d858e:	4632      	mov	r2, r6
   d8590:	c203      	stmia	r2!, {r0, r1}
   d8592:	3308      	adds	r3, #8
   d8594:	42bb      	cmp	r3, r7
   d8596:	4616      	mov	r6, r2
   d8598:	d1f7      	bne.n	d858a <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d859a:	e7d8      	b.n	d854e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d859c <_ZN9TCPClient9availableEv>:
{
   d859c:	b530      	push	{r4, r5, lr}
   d859e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d85a0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d85a4:	b08b      	sub	sp, #44	; 0x2c
   d85a6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d85a8:	b12b      	cbz	r3, d85b6 <_ZN9TCPClient9availableEv+0x1a>
   d85aa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d85ae:	429a      	cmp	r2, r3
   d85b0:	d101      	bne.n	d85b6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d85b2:	f7ff ff70 	bl	d8496 <_ZN9TCPClient12flush_bufferEv>
   d85b6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d85b8:	6808      	ldr	r0, [r1, #0]
   d85ba:	2800      	cmp	r0, #0
   d85bc:	db18      	blt.n	d85f0 <_ZN9TCPClient9availableEv+0x54>
   d85be:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d85c2:	2d7f      	cmp	r5, #127	; 0x7f
   d85c4:	d814      	bhi.n	d85f0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d85c6:	3104      	adds	r1, #4
   d85c8:	2308      	movs	r3, #8
   d85ca:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d85ce:	4429      	add	r1, r5
   d85d0:	f7fe fb4a 	bl	d6c68 <sock_recv>
            if (ret > 0) {
   d85d4:	2800      	cmp	r0, #0
   d85d6:	dd13      	ble.n	d8600 <_ZN9TCPClient9availableEv+0x64>
   d85d8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d85da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d85de:	b90a      	cbnz	r2, d85e4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d85e0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d85e4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d85e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d85ea:	4410      	add	r0, r2
   d85ec:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d85f0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d85f2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d85f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d85fa:	1ac0      	subs	r0, r0, r3
   d85fc:	b00b      	add	sp, #44	; 0x2c
   d85fe:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8600:	f7fe fcfe 	bl	d7000 <__errno>
   d8604:	6803      	ldr	r3, [r0, #0]
   d8606:	2b0b      	cmp	r3, #11
   d8608:	d0f2      	beq.n	d85f0 <_ZN9TCPClient9availableEv+0x54>
   d860a:	f7fe fcf9 	bl	d7000 <__errno>
   d860e:	6803      	ldr	r3, [r0, #0]
   d8610:	2b0b      	cmp	r3, #11
   d8612:	d0ed      	beq.n	d85f0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8614:	2320      	movs	r3, #32
   d8616:	2500      	movs	r5, #0
   d8618:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d861c:	f7fe fcf0 	bl	d7000 <__errno>
   d8620:	6803      	ldr	r3, [r0, #0]
   d8622:	9301      	str	r3, [sp, #4]
   d8624:	4b08      	ldr	r3, [pc, #32]	; (d8648 <_ZN9TCPClient9availableEv+0xac>)
   d8626:	4909      	ldr	r1, [pc, #36]	; (d864c <_ZN9TCPClient9availableEv+0xb0>)
   d8628:	9300      	str	r3, [sp, #0]
   d862a:	aa02      	add	r2, sp, #8
   d862c:	462b      	mov	r3, r5
   d862e:	2032      	movs	r0, #50	; 0x32
   d8630:	f7fe fbe2 	bl	d6df8 <log_message>
                    sock_close(d_->sock);
   d8634:	6963      	ldr	r3, [r4, #20]
   d8636:	6818      	ldr	r0, [r3, #0]
   d8638:	f7fe fb06 	bl	d6c48 <sock_close>
   d863c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d863e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8642:	601a      	str	r2, [r3, #0]
   d8644:	e7d4      	b.n	d85f0 <_ZN9TCPClient9availableEv+0x54>
   d8646:	bf00      	nop
   d8648:	000dcc4b 	.word	0x000dcc4b
   d864c:	000dcc44 	.word	0x000dcc44

000d8650 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d8650:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8652:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d8654:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8656:	6818      	ldr	r0, [r3, #0]
   d8658:	2800      	cmp	r0, #0
   d865a:	db01      	blt.n	d8660 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d865c:	f7fe faf4 	bl	d6c48 <sock_close>
   d8660:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d8662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8666:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d8668:	6960      	ldr	r0, [r4, #20]
   d866a:	2211      	movs	r2, #17
   d866c:	2100      	movs	r1, #0
   d866e:	308c      	adds	r0, #140	; 0x8c
   d8670:	f001 fecc 	bl	da40c <memset>
    flush_buffer();
   d8674:	4620      	mov	r0, r4
}
   d8676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d867a:	f7ff bf0c 	b.w	d8496 <_ZN9TCPClient12flush_bufferEv>

000d867e <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   d867e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d8680:	6818      	ldr	r0, [r3, #0]
}
   d8682:	43c0      	mvns	r0, r0
   d8684:	0fc0      	lsrs	r0, r0, #31
   d8686:	4770      	bx	lr

000d8688 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d8688:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d868a:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d868c:	4604      	mov	r4, r0
          total(0) {
   d868e:	6001      	str	r1, [r0, #0]
   d8690:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d8694:	3088      	adds	r0, #136	; 0x88
   d8696:	f7ff f8bf 	bl	d7818 <_ZN9IPAddressC1Ev>
}
   d869a:	4620      	mov	r0, r4
   d869c:	bd10      	pop	{r4, pc}
	...

000d86a0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d86a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d86a2:	2300      	movs	r3, #0
   d86a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d86a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d86ac:	4a0e      	ldr	r2, [pc, #56]	; (d86e8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d86ae:	6103      	str	r3, [r0, #16]
   d86b0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d86b2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d86b4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d86b6:	20ac      	movs	r0, #172	; 0xac
   d86b8:	9101      	str	r1, [sp, #4]
   d86ba:	f7fb fcec 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d86be:	1e05      	subs	r5, r0, #0
   d86c0:	f105 060c 	add.w	r6, r5, #12
   d86c4:	d008      	beq.n	d86d8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d86c6:	2301      	movs	r3, #1
   d86c8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d86cc:	4b07      	ldr	r3, [pc, #28]	; (d86ec <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d86ce:	9901      	ldr	r1, [sp, #4]
   d86d0:	602b      	str	r3, [r5, #0]
   d86d2:	4630      	mov	r0, r6
   d86d4:	f7ff ffd8 	bl	d8688 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d86d8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d86da:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d86de:	f7ff feda 	bl	d8496 <_ZN9TCPClient12flush_bufferEv>
}
   d86e2:	b002      	add	sp, #8
   d86e4:	bd70      	pop	{r4, r5, r6, pc}
   d86e6:	bf00      	nop
   d86e8:	000dcc80 	.word	0x000dcc80
   d86ec:	000dcc64 	.word	0x000dcc64

000d86f0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d86f0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d86f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   d86f6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d86f8:	f7ff ffd2 	bl	d86a0 <_ZN9TCPClientC1Ei>
}
   d86fc:	4620      	mov	r0, r4
   d86fe:	bd10      	pop	{r4, pc}

000d8700 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8700:	b510      	push	{r4, lr}
   d8702:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8704:	6800      	ldr	r0, [r0, #0]
   d8706:	2800      	cmp	r0, #0
   d8708:	db01      	blt.n	d870e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d870a:	f7fe fa9d 	bl	d6c48 <sock_close>
    }
}
   d870e:	4620      	mov	r0, r4
   d8710:	bd10      	pop	{r4, pc}

000d8712 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d8712:	300c      	adds	r0, #12
   d8714:	f7ff bff4 	b.w	d8700 <_ZN9TCPClient4DataD1Ev>

000d8718 <_ZN9IPAddressaSIPKhEERS_T_>:
    IPAddress& operator=(T address) {
   d8718:	b570      	push	{r4, r5, r6, lr}
   d871a:	b086      	sub	sp, #24
   d871c:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d871e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d8720:	4668      	mov	r0, sp
   d8722:	f7ff f8c9 	bl	d78b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8728:	1d34      	adds	r4, r6, #4
   d872a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d872c:	682b      	ldr	r3, [r5, #0]
   d872e:	7023      	strb	r3, [r4, #0]
    }
   d8730:	4630      	mov	r0, r6
   d8732:	b006      	add	sp, #24
   d8734:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8738 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d873c:	4698      	mov	r8, r3
    stop();
   d873e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8740:	b093      	sub	sp, #76	; 0x4c
   d8742:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8744:	2400      	movs	r4, #0
    stop();
   d8746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8748:	4606      	mov	r6, r0
   d874a:	4617      	mov	r7, r2
    stop();
   d874c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d874e:	4628      	mov	r0, r5
   d8750:	466b      	mov	r3, sp
   d8752:	4622      	mov	r2, r4
   d8754:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d8756:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8758:	f7fe fa5e 	bl	d6c18 <netdb_getaddrinfo>
   d875c:	4605      	mov	r5, r0
   d875e:	2800      	cmp	r0, #0
   d8760:	d163      	bne.n	d882a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d8762:	9b00      	ldr	r3, [sp, #0]
   d8764:	2b00      	cmp	r3, #0
   d8766:	d04b      	beq.n	d8800 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8768:	695b      	ldr	r3, [r3, #20]
   d876a:	2b00      	cmp	r3, #0
   d876c:	d048      	beq.n	d8800 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d876e:	a806      	add	r0, sp, #24
   d8770:	f7ff f852 	bl	d7818 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8774:	9b00      	ldr	r3, [sp, #0]
   d8776:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8778:	7863      	ldrb	r3, [r4, #1]
   d877a:	2b02      	cmp	r3, #2
   d877c:	d104      	bne.n	d8788 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d877e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8780:	a806      	add	r0, sp, #24
   d8782:	f7ff ffc9 	bl	d8718 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d8786:	e026      	b.n	d87d6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8788:	2b0a      	cmp	r3, #10
   d878a:	d124      	bne.n	d87d6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d878c:	2211      	movs	r2, #17
   d878e:	4629      	mov	r1, r5
   d8790:	a801      	add	r0, sp, #4
   d8792:	f001 fe3b 	bl	da40c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8796:	68a3      	ldr	r3, [r4, #8]
   d8798:	2b00      	cmp	r3, #0
   d879a:	d038      	beq.n	d880e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d879c:	f104 0308 	add.w	r3, r4, #8
   d87a0:	f10d 0c04 	add.w	ip, sp, #4
   d87a4:	3418      	adds	r4, #24
   d87a6:	6818      	ldr	r0, [r3, #0]
   d87a8:	6859      	ldr	r1, [r3, #4]
   d87aa:	4662      	mov	r2, ip
   d87ac:	c203      	stmia	r2!, {r0, r1}
   d87ae:	3308      	adds	r3, #8
   d87b0:	42a3      	cmp	r3, r4
   d87b2:	4694      	mov	ip, r2
   d87b4:	d1f7      	bne.n	d87a6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d87b6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d87b8:	a901      	add	r1, sp, #4
   d87ba:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d87bc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d87c0:	f7ff f838 	bl	d7834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d87c4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d87c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d87cc:	ac07      	add	r4, sp, #28
   d87ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d87d0:	f8dc 3000 	ldr.w	r3, [ip]
   d87d4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d87d6:	a806      	add	r0, sp, #24
   d87d8:	f7ff f83e 	bl	d7858 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d87dc:	b180      	cbz	r0, d8800 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d87de:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d87e0:	ad07      	add	r5, sp, #28
   d87e2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d87e6:	4b12      	ldr	r3, [pc, #72]	; (d8830 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d87e8:	930c      	str	r3, [sp, #48]	; 0x30
   d87ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d87ec:	ac0d      	add	r4, sp, #52	; 0x34
   d87ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d87f0:	682b      	ldr	r3, [r5, #0]
   d87f2:	7023      	strb	r3, [r4, #0]
   d87f4:	463a      	mov	r2, r7
   d87f6:	4643      	mov	r3, r8
   d87f8:	a90c      	add	r1, sp, #48	; 0x30
   d87fa:	4630      	mov	r0, r6
   d87fc:	47c8      	blx	r9
   d87fe:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8800:	9800      	ldr	r0, [sp, #0]
   d8802:	f7fe fa01 	bl	d6c08 <netdb_freeaddrinfo>
}
   d8806:	4628      	mov	r0, r5
   d8808:	b013      	add	sp, #76	; 0x4c
   d880a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d880e:	68e3      	ldr	r3, [r4, #12]
   d8810:	2b00      	cmp	r3, #0
   d8812:	d1c3      	bne.n	d879c <_ZN9TCPClient7connectEPKctm+0x64>
   d8814:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8818:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d881c:	f7fe f9dc 	bl	d6bd8 <inet_htonl>
   d8820:	4581      	cmp	r9, r0
   d8822:	d1bb      	bne.n	d879c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d8824:	f104 0114 	add.w	r1, r4, #20
   d8828:	e7aa      	b.n	d8780 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d882a:	4625      	mov	r5, r4
   d882c:	e7e8      	b.n	d8800 <_ZN9TCPClient7connectEPKctm+0xc8>
   d882e:	bf00      	nop
   d8830:	000dcbdc 	.word	0x000dcbdc

000d8834 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8834:	4b02      	ldr	r3, [pc, #8]	; (d8840 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8836:	681a      	ldr	r2, [r3, #0]
   d8838:	4b02      	ldr	r3, [pc, #8]	; (d8844 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d883a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d883c:	4770      	bx	lr
   d883e:	bf00      	nop
   d8840:	2003e250 	.word	0x2003e250
   d8844:	2003e684 	.word	0x2003e684

000d8848 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d8848:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d884a:	6804      	ldr	r4, [r0, #0]
   d884c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d884e:	46a4      	mov	ip, r4
    }
   d8850:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d8854:	4760      	bx	ip

000d8856 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d8856:	6803      	ldr	r3, [r0, #0]
   d8858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d885a:	4718      	bx	r3

000d885c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d885c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d885e:	4770      	bx	lr

000d8860 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d8860:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d8862:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d8864:	1a10      	subs	r0, r2, r0
   d8866:	4770      	bx	lr

000d8868 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d8868:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d886a:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d886c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d8870:	68db      	ldr	r3, [r3, #12]
   d8872:	2201      	movs	r2, #1
   d8874:	f10d 0107 	add.w	r1, sp, #7
   d8878:	4798      	blx	r3
}
   d887a:	b003      	add	sp, #12
   d887c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8880 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d8880:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d8882:	6803      	ldr	r3, [r0, #0]
   d8884:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d8886:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d8888:	4798      	blx	r3
   d888a:	b128      	cbz	r0, d8898 <_ZN3UDP4readEv+0x18>
   d888c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d888e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d8890:	1c59      	adds	r1, r3, #1
   d8892:	86e1      	strh	r1, [r4, #54]	; 0x36
   d8894:	5cd0      	ldrb	r0, [r2, r3]
}
   d8896:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d8898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d889c:	e7fb      	b.n	d8896 <_ZN3UDP4readEv+0x16>

000d889e <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d889e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d88a0:	6803      	ldr	r3, [r0, #0]
   d88a2:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d88a4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d88a6:	4798      	blx	r3
   d88a8:	b118      	cbz	r0, d88b2 <_ZN3UDP4peekEv+0x14>
   d88aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d88ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d88ae:	5cd0      	ldrb	r0, [r2, r3]
}
   d88b0:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d88b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d88b6:	e7fb      	b.n	d88b0 <_ZN3UDP4peekEv+0x12>

000d88b8 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d88b8:	4770      	bx	lr

000d88ba <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d88ba:	b410      	push	{r4}
   d88bc:	4603      	mov	r3, r0
   d88be:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d88c0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d88c2:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d88c4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d88c6:	6803      	ldr	r3, [r0, #0]
   d88c8:	1a52      	subs	r2, r2, r1
   d88ca:	68db      	ldr	r3, [r3, #12]
   d88cc:	4421      	add	r1, r4
}
   d88ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d88d2:	4718      	bx	r3

000d88d4 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d88d4:	f1a0 0010 	sub.w	r0, r0, #16
   d88d8:	f7ff bfef 	b.w	d88ba <_ZNK3UDP7printToER5Print>

000d88dc <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d88dc:	b570      	push	{r4, r5, r6, lr}
    stop();
   d88de:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d88e0:	b08c      	sub	sp, #48	; 0x30
    stop();
   d88e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d88e4:	4604      	mov	r4, r0
   d88e6:	460e      	mov	r6, r1
   d88e8:	4615      	mov	r5, r2
    stop();
   d88ea:	4798      	blx	r3
    const int one = 1;
   d88ec:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d88ee:	221c      	movs	r2, #28
   d88f0:	2100      	movs	r1, #0
   d88f2:	a805      	add	r0, sp, #20
    const int one = 1;
   d88f4:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d88f6:	f001 fd89 	bl	da40c <memset>
    saddr.sin6_len = sizeof(saddr);
   d88fa:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d88fe:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d8900:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d8904:	f7fe f978 	bl	d6bf8 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8908:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d890a:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d890e:	2102      	movs	r1, #2
   d8910:	200a      	movs	r0, #10
   d8912:	f7fe f9c9 	bl	d6ca8 <sock_socket>
    if (_sock < 0) {
   d8916:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8918:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d891a:	db25      	blt.n	d8968 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d891c:	2204      	movs	r2, #4
   d891e:	9200      	str	r2, [sp, #0]
   d8920:	ab02      	add	r3, sp, #8
   d8922:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8926:	f7fe f987 	bl	d6c38 <sock_setsockopt>
   d892a:	b9e8      	cbnz	r0, d8968 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d892c:	b195      	cbz	r5, d8954 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d892e:	9003      	str	r0, [sp, #12]
   d8930:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d8934:	a903      	add	r1, sp, #12
   d8936:	b2e8      	uxtb	r0, r5
   d8938:	f7fe f93e 	bl	d6bb8 <if_index_to_name>
   d893c:	b9a0      	cbnz	r0, d8968 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d893e:	2306      	movs	r3, #6
   d8940:	9300      	str	r3, [sp, #0]
   d8942:	6960      	ldr	r0, [r4, #20]
   d8944:	ab03      	add	r3, sp, #12
   d8946:	f241 020b 	movw	r2, #4107	; 0x100b
   d894a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d894e:	f7fe f973 	bl	d6c38 <sock_setsockopt>
   d8952:	b948      	cbnz	r0, d8968 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d8954:	6960      	ldr	r0, [r4, #20]
   d8956:	221c      	movs	r2, #28
   d8958:	a905      	add	r1, sp, #20
   d895a:	f7fe f965 	bl	d6c28 <sock_bind>
   d895e:	b918      	cbnz	r0, d8968 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d8960:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d8962:	2001      	movs	r0, #1
}
   d8964:	b00c      	add	sp, #48	; 0x30
   d8966:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d8968:	6823      	ldr	r3, [r4, #0]
   d896a:	4620      	mov	r0, r4
   d896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d896e:	4798      	blx	r3
   d8970:	2000      	movs	r0, #0
   d8972:	e7f7      	b.n	d8964 <_ZN3UDP5beginEtm+0x88>

000d8974 <_ZN3UDP4stopEv>:
void UDP::stop() {
   d8974:	b510      	push	{r4, lr}
   d8976:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d8978:	6940      	ldr	r0, [r0, #20]
   d897a:	2800      	cmp	r0, #0
   d897c:	db01      	blt.n	d8982 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d897e:	f7fe f963 	bl	d6c48 <sock_close>
    _sock = -1;
   d8982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8986:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d8988:	2300      	movs	r3, #0
   d898a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d898c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d898e:	bd10      	pop	{r4, pc}

000d8990 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d8990:	b570      	push	{r4, r5, r6, lr}
   d8992:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d8994:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8996:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d8998:	b168      	cbz	r0, d89b6 <_ZN3UDP5writeEPKhj+0x26>
   d899a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d899c:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d899e:	4294      	cmp	r4, r2
   d89a0:	bf28      	it	cs
   d89a2:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d89a4:	4622      	mov	r2, r4
   d89a6:	4430      	add	r0, r6
   d89a8:	f001 fd08 	bl	da3bc <memcpy>
    _offset += size;
   d89ac:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d89ae:	4423      	add	r3, r4
   d89b0:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d89b2:	4620      	mov	r0, r4
   d89b4:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d89b6:	4604      	mov	r4, r0
   d89b8:	e7f1      	b.n	d899e <_ZN3UDP5writeEPKhj+0xe>

000d89ba <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d89ba:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d89bc:	6803      	ldr	r3, [r0, #0]
   d89be:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d89c0:	4604      	mov	r4, r0
   d89c2:	460f      	mov	r7, r1
   d89c4:	4616      	mov	r6, r2
    if (available()) {
   d89c6:	4798      	blx	r3
   d89c8:	b190      	cbz	r0, d89f0 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d89ca:	6823      	ldr	r3, [r4, #0]
   d89cc:	4620      	mov	r0, r4
   d89ce:	691b      	ldr	r3, [r3, #16]
   d89d0:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d89d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d89d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d89d6:	4286      	cmp	r6, r0
   d89d8:	bfa8      	it	ge
   d89da:	4606      	movge	r6, r0
   d89dc:	4419      	add	r1, r3
   d89de:	4632      	mov	r2, r6
   d89e0:	4638      	mov	r0, r7
   d89e2:	f001 fceb 	bl	da3bc <memcpy>
        _offset += read;
   d89e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d89e8:	4433      	add	r3, r6
   d89ea:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d89ec:	4630      	mov	r0, r6
   d89ee:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d89f0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   d89f4:	e7fa      	b.n	d89ec <_ZN3UDP4readEPhj+0x32>
	...

000d89f8 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d89f8:	b570      	push	{r4, r5, r6, lr}
   d89fa:	4604      	mov	r4, r0
   d89fc:	4b05      	ldr	r3, [pc, #20]	; (d8a14 <_ZN3UDP8remoteIPEv+0x1c>)
   d89fe:	f844 3b04 	str.w	r3, [r4], #4
   d8a02:	f101 0520 	add.w	r5, r1, #32
   d8a06:	4606      	mov	r6, r0
   d8a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8a0c:	682b      	ldr	r3, [r5, #0]
   d8a0e:	7023      	strb	r3, [r4, #0]
   d8a10:	4630      	mov	r0, r6
   d8a12:	bd70      	pop	{r4, r5, r6, pc}
   d8a14:	000dcbdc 	.word	0x000dcbdc

000d8a18 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8a1a:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8a1c:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8a1e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8a20:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d8a22:	4a0a      	ldr	r2, [pc, #40]	; (d8a4c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d8a24:	9202      	str	r2, [sp, #8]
   d8a26:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8a28:	468c      	mov	ip, r1
   d8a2a:	4606      	mov	r6, r0
   d8a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8a2e:	ad03      	add	r5, sp, #12
   d8a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8a32:	6823      	ldr	r3, [r4, #0]
   d8a34:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8a36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d8a3a:	9300      	str	r3, [sp, #0]
   d8a3c:	4672      	mov	r2, lr
   d8a3e:	ab02      	add	r3, sp, #8
   d8a40:	4661      	mov	r1, ip
   d8a42:	4630      	mov	r0, r6
   d8a44:	47b8      	blx	r7
    }
   d8a46:	b009      	add	sp, #36	; 0x24
   d8a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a4a:	bf00      	nop
   d8a4c:	000dcbdc 	.word	0x000dcbdc

000d8a50 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d8a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8a52:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d8a54:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8a56:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d8a58:	4b0c      	ldr	r3, [pc, #48]	; (d8a8c <_ZN3UDP9endPacketEv+0x3c>)
   d8a5a:	9302      	str	r3, [sp, #8]
   d8a5c:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d8a60:	4604      	mov	r4, r0
   d8a62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8a64:	ad03      	add	r5, sp, #12
   d8a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8a68:	6833      	ldr	r3, [r6, #0]
   d8a6a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8a6c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d8a6e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d8a70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8a72:	9300      	str	r3, [sp, #0]
   d8a74:	4620      	mov	r0, r4
   d8a76:	ab02      	add	r3, sp, #8
   d8a78:	47b8      	blx	r7
    flush(); // wait for send to complete
   d8a7a:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8a7c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d8a7e:	69db      	ldr	r3, [r3, #28]
   d8a80:	4620      	mov	r0, r4
   d8a82:	4798      	blx	r3
}
   d8a84:	4628      	mov	r0, r5
   d8a86:	b009      	add	sp, #36	; 0x24
   d8a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a8a:	bf00      	nop
   d8a8c:	000dcbdc 	.word	0x000dcbdc

000d8a90 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d8a90:	b538      	push	{r3, r4, r5, lr}
   d8a92:	4605      	mov	r5, r0
   d8a94:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d8a96:	7d2b      	ldrb	r3, [r5, #20]
   d8a98:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d8a9a:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d8a9c:	d110      	bne.n	d8ac0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d8a9e:	f640 231c 	movw	r3, #2588	; 0xa1c
   d8aa2:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d8aa4:	f7fe f8a8 	bl	d6bf8 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8aa8:	3408      	adds	r4, #8
   d8aaa:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d8aac:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8ab0:	3514      	adds	r5, #20
   d8ab2:	f853 2b04 	ldr.w	r2, [r3], #4
   d8ab6:	f844 2b04 	str.w	r2, [r4], #4
   d8aba:	42ab      	cmp	r3, r5
   d8abc:	d1f9      	bne.n	d8ab2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d8abe:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d8ac0:	2b04      	cmp	r3, #4
   d8ac2:	d1fc      	bne.n	d8abe <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d8ac4:	f44f 7304 	mov.w	r3, #528	; 0x210
   d8ac8:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d8aca:	f7fe f895 	bl	d6bf8 <inet_htons>
   d8ace:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d8ad0:	6868      	ldr	r0, [r5, #4]
   d8ad2:	f7fe f881 	bl	d6bd8 <inet_htonl>
   d8ad6:	6060      	str	r0, [r4, #4]
}
   d8ad8:	e7f1      	b.n	d8abe <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d8ada <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8ada:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8ade:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d8ae0:	af03      	add	r7, sp, #12
   d8ae2:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8ae6:	4698      	mov	r8, r3
   d8ae8:	4604      	mov	r4, r0
   d8aea:	460d      	mov	r5, r1
   d8aec:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d8aee:	2100      	movs	r1, #0
   d8af0:	464a      	mov	r2, r9
   d8af2:	4638      	mov	r0, r7
   d8af4:	f001 fc8a 	bl	da40c <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d8af8:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d8afc:	463a      	mov	r2, r7
   d8afe:	4640      	mov	r0, r8
   d8b00:	f7ff ffc6 	bl	d8a90 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d8b04:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d8b08:	b153      	cbz	r3, d8b20 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d8b0a:	e9cd 7900 	strd	r7, r9, [sp]
   d8b0e:	6960      	ldr	r0, [r4, #20]
   d8b10:	2300      	movs	r3, #0
   d8b12:	4632      	mov	r2, r6
   d8b14:	4629      	mov	r1, r5
   d8b16:	f7fe f8bf 	bl	d6c98 <sock_sendto>
}
   d8b1a:	b00b      	add	sp, #44	; 0x2c
   d8b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d8b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8b24:	e7f9      	b.n	d8b1a <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d8b28 <_ZN3UDPC1Ev>:
UDP::UDP()
   d8b28:	b538      	push	{r3, r4, r5, lr}
   d8b2a:	2500      	movs	r5, #0
   d8b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8b30:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d8b34:	4b0b      	ldr	r3, [pc, #44]	; (d8b64 <_ZN3UDPC1Ev+0x3c>)
   d8b36:	f103 0208 	add.w	r2, r3, #8
   d8b3a:	336c      	adds	r3, #108	; 0x6c
   d8b3c:	6103      	str	r3, [r0, #16]
   d8b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   d8b42:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d8b44:	6002      	str	r2, [r0, #0]
   d8b46:	6143      	str	r3, [r0, #20]
   d8b48:	301c      	adds	r0, #28
   d8b4a:	f7fe fe65 	bl	d7818 <_ZN9IPAddressC1Ev>
   d8b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
   d8b52:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d8b56:	86e5      	strh	r5, [r4, #54]	; 0x36
   d8b58:	8725      	strh	r5, [r4, #56]	; 0x38
   d8b5a:	63e5      	str	r5, [r4, #60]	; 0x3c
   d8b5c:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d8b60:	4620      	mov	r0, r4
   d8b62:	bd38      	pop	{r3, r4, r5, pc}
   d8b64:	000dcce0 	.word	0x000dcce0

000d8b68 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d8b68:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d8b6a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d8b6e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d8b70:	b123      	cbz	r3, d8b7c <_ZN3UDP13releaseBufferEv+0x14>
   d8b72:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8b74:	b110      	cbz	r0, d8b7c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d8b76:	2101      	movs	r1, #1
   d8b78:	f000 fba9 	bl	d92ce <_ZdlPvj>
    _buffer = NULL;
   d8b7c:	2300      	movs	r3, #0
   d8b7e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d8b80:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d8b84:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d8b86:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d8b88:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d8b8a:	bd10      	pop	{r4, pc}

000d8b8c <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d8b8c:	b570      	push	{r4, r5, r6, lr}
   d8b8e:	4604      	mov	r4, r0
   d8b90:	4616      	mov	r6, r2
   d8b92:	460d      	mov	r5, r1
    releaseBuffer();
   d8b94:	f7ff ffe8 	bl	d8b68 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d8b98:	2300      	movs	r3, #0
    _buffer = buffer;
   d8b9a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d8b9c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d8b9e:	b12e      	cbz	r6, d8bac <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d8ba0:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d8ba2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d8ba4:	3800      	subs	r0, #0
   d8ba6:	bf18      	it	ne
   d8ba8:	2001      	movne	r0, #1
   d8baa:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d8bac:	2d00      	cmp	r5, #0
   d8bae:	d0f8      	beq.n	d8ba2 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d8bb0:	4628      	mov	r0, r5
   d8bb2:	f7fb fa72 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d8bb6:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d8bb8:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d8bba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d8bbe:	2800      	cmp	r0, #0
   d8bc0:	d0ef      	beq.n	d8ba2 <_ZN3UDP9setBufferEjPh+0x16>
   d8bc2:	e7ed      	b.n	d8ba0 <_ZN3UDP9setBufferEjPh+0x14>

000d8bc4 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bc6:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d8bc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8bca:	4605      	mov	r5, r0
   d8bcc:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d8bce:	b91a      	cbnz	r2, d8bd8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d8bd0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d8bd2:	b109      	cbz	r1, d8bd8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d8bd4:	f7ff ffda 	bl	d8b8c <_ZN3UDP9setBufferEjPh>
   d8bd8:	3404      	adds	r4, #4
   d8bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8bdc:	f105 0620 	add.w	r6, r5, #32
   d8be0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d8be2:	6823      	ldr	r3, [r4, #0]
   d8be4:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d8be6:	2300      	movs	r3, #0
}
   d8be8:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d8bea:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d8bec:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d8bee:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d8bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8bf2 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d8bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d8bf4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d8bf6:	4604      	mov	r4, r0
   d8bf8:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d8bfa:	b92a      	cbnz	r2, d8c08 <_ZN3UDP11parsePacketEm+0x16>
   d8bfc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d8bfe:	b119      	cbz	r1, d8c08 <_ZN3UDP11parsePacketEm+0x16>
   d8c00:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d8c02:	f7ff ffc3 	bl	d8b8c <_ZN3UDP9setBufferEjPh>
   d8c06:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d8c08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d8c0a:	2200      	movs	r2, #0
   d8c0c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d8c0e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d8c10:	b141      	cbz	r1, d8c24 <_ZN3UDP11parsePacketEm+0x32>
   d8c12:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d8c14:	b132      	cbz	r2, d8c24 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d8c16:	6820      	ldr	r0, [r4, #0]
   d8c18:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d8c1a:	4620      	mov	r0, r4
   d8c1c:	47a8      	blx	r5
        if (result > 0) {
   d8c1e:	2800      	cmp	r0, #0
            _total = result;
   d8c20:	bfc8      	it	gt
   d8c22:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d8c24:	6823      	ldr	r3, [r4, #0]
   d8c26:	691b      	ldr	r3, [r3, #16]
   d8c28:	4620      	mov	r0, r4
}
   d8c2a:	b003      	add	sp, #12
   d8c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d8c30:	4718      	bx	r3

000d8c32 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d8c32:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d8c34:	7843      	ldrb	r3, [r0, #1]
   d8c36:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d8c38:	b08d      	sub	sp, #52	; 0x34
   d8c3a:	4605      	mov	r5, r0
   d8c3c:	460c      	mov	r4, r1
   d8c3e:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d8c40:	d104      	bne.n	d8c4c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8c42:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   d8c44:	4620      	mov	r0, r4
   d8c46:	f7ff fd67 	bl	d8718 <_ZN9IPAddressaSIPKhEERS_T_>
   d8c4a:	e022      	b.n	d8c92 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d8c4c:	2b0a      	cmp	r3, #10
   d8c4e:	d125      	bne.n	d8c9c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d8c50:	2211      	movs	r2, #17
   d8c52:	2100      	movs	r1, #0
   d8c54:	a801      	add	r0, sp, #4
   d8c56:	f001 fbd9 	bl	da40c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8c5a:	68ab      	ldr	r3, [r5, #8]
   d8c5c:	b303      	cbz	r3, d8ca0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8c5e:	f105 0308 	add.w	r3, r5, #8
   d8c62:	ae01      	add	r6, sp, #4
   d8c64:	f105 0c18 	add.w	ip, r5, #24
   d8c68:	6818      	ldr	r0, [r3, #0]
   d8c6a:	6859      	ldr	r1, [r3, #4]
   d8c6c:	4632      	mov	r2, r6
   d8c6e:	c203      	stmia	r2!, {r0, r1}
   d8c70:	3308      	adds	r3, #8
   d8c72:	4563      	cmp	r3, ip
   d8c74:	4616      	mov	r6, r2
   d8c76:	d1f7      	bne.n	d8c68 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d8c78:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8c7a:	a901      	add	r1, sp, #4
   d8c7c:	a806      	add	r0, sp, #24
   d8c7e:	ae07      	add	r6, sp, #28
            a.v = 6;
   d8c80:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8c84:	f7fe fdd6 	bl	d7834 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8c88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8c8a:	3404      	adds	r4, #4
   d8c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8c8e:	6833      	ldr	r3, [r6, #0]
   d8c90:	7023      	strb	r3, [r4, #0]
        if (port) {
   d8c92:	b11f      	cbz	r7, d8c9c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d8c94:	8868      	ldrh	r0, [r5, #2]
   d8c96:	f7fd ffa7 	bl	d6be8 <inet_ntohs>
   d8c9a:	8038      	strh	r0, [r7, #0]
}
   d8c9c:	b00d      	add	sp, #52	; 0x34
   d8c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8ca0:	68eb      	ldr	r3, [r5, #12]
   d8ca2:	2b00      	cmp	r3, #0
   d8ca4:	d1db      	bne.n	d8c5e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d8ca6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8caa:	692e      	ldr	r6, [r5, #16]
   d8cac:	f7fd ff94 	bl	d6bd8 <inet_htonl>
   d8cb0:	4286      	cmp	r6, r0
   d8cb2:	d1d4      	bne.n	d8c5e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d8cb4:	f105 0114 	add.w	r1, r5, #20
   d8cb8:	e7c4      	b.n	d8c44 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>
	...

000d8cbc <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d8cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8cc0:	4617      	mov	r7, r2
   d8cc2:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d8cc4:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d8cc6:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d8cc8:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d8cca:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d8ccc:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d8cce:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d8cd0:	f7fd ffa2 	bl	d6c18 <netdb_getaddrinfo>
   d8cd4:	1e04      	subs	r4, r0, #0
   d8cd6:	db20      	blt.n	d8d1a <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d8cd8:	9b01      	ldr	r3, [sp, #4]
   d8cda:	b32b      	cbz	r3, d8d28 <_ZN3UDP11beginPacketEPKct+0x6c>
   d8cdc:	695b      	ldr	r3, [r3, #20]
   d8cde:	b31b      	cbz	r3, d8d28 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d8ce0:	a802      	add	r0, sp, #8
   d8ce2:	f7fe fd99 	bl	d7818 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8ce6:	9b01      	ldr	r3, [sp, #4]
   d8ce8:	2200      	movs	r2, #0
   d8cea:	6958      	ldr	r0, [r3, #20]
   d8cec:	a902      	add	r1, sp, #8
   d8cee:	f7ff ffa0 	bl	d8c32 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   d8cf2:	a802      	add	r0, sp, #8
   d8cf4:	f7fe fdb0 	bl	d7858 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8cf8:	b1b0      	cbz	r0, d8d28 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d8cfa:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8cfc:	ad03      	add	r5, sp, #12
   d8cfe:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d8d02:	4b0b      	ldr	r3, [pc, #44]	; (d8d30 <_ZN3UDP11beginPacketEPKct+0x74>)
   d8d04:	9308      	str	r3, [sp, #32]
   d8d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d08:	ac09      	add	r4, sp, #36	; 0x24
   d8d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d0c:	682b      	ldr	r3, [r5, #0]
   d8d0e:	7023      	strb	r3, [r4, #0]
   d8d10:	463a      	mov	r2, r7
   d8d12:	a908      	add	r1, sp, #32
   d8d14:	4630      	mov	r0, r6
   d8d16:	47c0      	blx	r8
   d8d18:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d8d1a:	9801      	ldr	r0, [sp, #4]
   d8d1c:	f7fd ff74 	bl	d6c08 <netdb_freeaddrinfo>
}
   d8d20:	4620      	mov	r0, r4
   d8d22:	b00e      	add	sp, #56	; 0x38
   d8d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d8d28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d8d2c:	e7f5      	b.n	d8d1a <_ZN3UDP11beginPacketEPKct+0x5e>
   d8d2e:	bf00      	nop
   d8d30:	000dcbdc 	.word	0x000dcbdc

000d8d34 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d8d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d8d38:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d8d3c:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d8d40:	b090      	sub	sp, #64	; 0x40
   d8d42:	4605      	mov	r5, r0
   d8d44:	460e      	mov	r6, r1
   d8d46:	4690      	mov	r8, r2
   d8d48:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d8d4a:	db3c      	blt.n	d8dc6 <_ZN3UDP13receivePacketEPhjm+0x92>
   d8d4c:	2900      	cmp	r1, #0
   d8d4e:	d03a      	beq.n	d8dc6 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d8d50:	f04f 0a1c 	mov.w	sl, #28
   d8d54:	af09      	add	r7, sp, #36	; 0x24
   d8d56:	4652      	mov	r2, sl
   d8d58:	2100      	movs	r1, #0
   d8d5a:	4638      	mov	r0, r7
   d8d5c:	f001 fb56 	bl	da40c <memset>
        socklen_t slen = sizeof(saddr);
   d8d60:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d8d64:	b1dc      	cbz	r4, d8d9e <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d8d66:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d8d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8d6c:	fbb4 f3f0 	udiv	r3, r4, r0
   d8d70:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d8d74:	fb00 4313 	mls	r3, r0, r3, r4
   d8d78:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d8d7a:	2310      	movs	r3, #16
            struct timeval tv = {};
   d8d7c:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d8d7e:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d8d80:	9300      	str	r3, [sp, #0]
   d8d82:	f241 0206 	movw	r2, #4102	; 0x1006
   d8d86:	446b      	add	r3, sp
   d8d88:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8d8c:	4648      	mov	r0, r9
   d8d8e:	f7fd ff53 	bl	d6c38 <sock_setsockopt>
            if (ret) {
   d8d92:	4604      	mov	r4, r0
   d8d94:	b120      	cbz	r0, d8da0 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d8d96:	4620      	mov	r0, r4
   d8d98:	b010      	add	sp, #64	; 0x40
   d8d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d8d9e:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d8da0:	ab03      	add	r3, sp, #12
   d8da2:	e9cd 7300 	strd	r7, r3, [sp]
   d8da6:	6968      	ldr	r0, [r5, #20]
   d8da8:	4623      	mov	r3, r4
   d8daa:	4642      	mov	r2, r8
   d8dac:	4631      	mov	r1, r6
   d8dae:	f7fd ff63 	bl	d6c78 <sock_recvfrom>
        if (ret >= 0) {
   d8db2:	1e04      	subs	r4, r0, #0
   d8db4:	dbef      	blt.n	d8d96 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d8db6:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d8dba:	f105 011c 	add.w	r1, r5, #28
   d8dbe:	4638      	mov	r0, r7
   d8dc0:	f7ff ff37 	bl	d8c32 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d8dc4:	e7e7      	b.n	d8d96 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d8dc6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d8dca:	e7e4      	b.n	d8d96 <_ZN3UDP13receivePacketEPhjm+0x62>

000d8dcc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8dcc:	4770      	bx	lr

000d8dce <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8dce:	7441      	strb	r1, [r0, #17]
}
   d8dd0:	4770      	bx	lr

000d8dd2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d8dd2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8dd4:	7c00      	ldrb	r0, [r0, #16]
   d8dd6:	f7fd ffb7 	bl	d6d48 <hal_usart_available_data_for_write>
}
   d8dda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8dde:	bd08      	pop	{r3, pc}

000d8de0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8de0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8de2:	7c00      	ldrb	r0, [r0, #16]
   d8de4:	f7fd ff88 	bl	d6cf8 <hal_usart_available>
}
   d8de8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8dec:	bd08      	pop	{r3, pc}

000d8dee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8dee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8df0:	7c00      	ldrb	r0, [r0, #16]
   d8df2:	f7fd ff91 	bl	d6d18 <hal_usart_peek>
}
   d8df6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8dfa:	bd08      	pop	{r3, pc}

000d8dfc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8dfc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8dfe:	7c00      	ldrb	r0, [r0, #16]
   d8e00:	f7fd ff82 	bl	d6d08 <hal_usart_read>
}
   d8e04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8e08:	bd08      	pop	{r3, pc}

000d8e0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d8e0a:	7c00      	ldrb	r0, [r0, #16]
   d8e0c:	f7fd bf8c 	b.w	d6d28 <hal_usart_flush>

000d8e10 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8e12:	7c45      	ldrb	r5, [r0, #17]
{
   d8e14:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8e16:	b12d      	cbz	r5, d8e24 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d8e18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8e1a:	b003      	add	sp, #12
   d8e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8e20:	f7fd bf62 	b.w	d6ce8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8e24:	7c00      	ldrb	r0, [r0, #16]
   d8e26:	9101      	str	r1, [sp, #4]
   d8e28:	f7fd ff8e 	bl	d6d48 <hal_usart_available_data_for_write>
   d8e2c:	2800      	cmp	r0, #0
   d8e2e:	9901      	ldr	r1, [sp, #4]
   d8e30:	dcf2      	bgt.n	d8e18 <_ZN11USARTSerial5writeEh+0x8>
}
   d8e32:	4628      	mov	r0, r5
   d8e34:	b003      	add	sp, #12
   d8e36:	bd30      	pop	{r4, r5, pc}

000d8e38 <_ZN11USARTSerialD0Ev>:
   d8e38:	b510      	push	{r4, lr}
   d8e3a:	2114      	movs	r1, #20
   d8e3c:	4604      	mov	r4, r0
   d8e3e:	f000 fa46 	bl	d92ce <_ZdlPvj>
   d8e42:	4620      	mov	r0, r4
   d8e44:	bd10      	pop	{r4, pc}
	...

000d8e48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8e48:	b510      	push	{r4, lr}
   d8e4a:	f04f 0c00 	mov.w	ip, #0
   d8e4e:	4604      	mov	r4, r0
   d8e50:	4608      	mov	r0, r1
   d8e52:	4611      	mov	r1, r2
   d8e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8e58:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8e5c:	4a04      	ldr	r2, [pc, #16]	; (d8e70 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8e5e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8e60:	2201      	movs	r2, #1
  _serial = serial;
   d8e62:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8e64:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8e66:	461a      	mov	r2, r3
   d8e68:	f7fd ff36 	bl	d6cd8 <hal_usart_init>
}
   d8e6c:	4620      	mov	r0, r4
   d8e6e:	bd10      	pop	{r4, pc}
   d8e70:	000dcd58 	.word	0x000dcd58

000d8e74 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8e74:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8e76:	4c0e      	ldr	r4, [pc, #56]	; (d8eb0 <_Z22__fetch_global_Serial1v+0x3c>)
   d8e78:	7821      	ldrb	r1, [r4, #0]
   d8e7a:	f3bf 8f5b 	dmb	ish
   d8e7e:	f011 0101 	ands.w	r1, r1, #1
   d8e82:	d112      	bne.n	d8eaa <_Z22__fetch_global_Serial1v+0x36>
   d8e84:	4620      	mov	r0, r4
   d8e86:	9101      	str	r1, [sp, #4]
   d8e88:	f7fb f90d 	bl	d40a6 <__cxa_guard_acquire>
   d8e8c:	9901      	ldr	r1, [sp, #4]
   d8e8e:	b160      	cbz	r0, d8eaa <_Z22__fetch_global_Serial1v+0x36>
   d8e90:	4a08      	ldr	r2, [pc, #32]	; (d8eb4 <_Z22__fetch_global_Serial1v+0x40>)
   d8e92:	4b09      	ldr	r3, [pc, #36]	; (d8eb8 <_Z22__fetch_global_Serial1v+0x44>)
   d8e94:	4809      	ldr	r0, [pc, #36]	; (d8ebc <_Z22__fetch_global_Serial1v+0x48>)
   d8e96:	f7ff ffd7 	bl	d8e48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d8e9a:	4620      	mov	r0, r4
   d8e9c:	f7fb f908 	bl	d40b0 <__cxa_guard_release>
   d8ea0:	4a07      	ldr	r2, [pc, #28]	; (d8ec0 <_Z22__fetch_global_Serial1v+0x4c>)
   d8ea2:	4908      	ldr	r1, [pc, #32]	; (d8ec4 <_Z22__fetch_global_Serial1v+0x50>)
   d8ea4:	4805      	ldr	r0, [pc, #20]	; (d8ebc <_Z22__fetch_global_Serial1v+0x48>)
   d8ea6:	f000 fa0d 	bl	d92c4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8eaa:	4804      	ldr	r0, [pc, #16]	; (d8ebc <_Z22__fetch_global_Serial1v+0x48>)
   d8eac:	b002      	add	sp, #8
   d8eae:	bd10      	pop	{r4, pc}
   d8eb0:	2003e688 	.word	0x2003e688
   d8eb4:	2003e68c 	.word	0x2003e68c
   d8eb8:	2003e710 	.word	0x2003e710
   d8ebc:	2003e794 	.word	0x2003e794
   d8ec0:	2003e428 	.word	0x2003e428
   d8ec4:	000d8dcd 	.word	0x000d8dcd

000d8ec8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8ec8:	7441      	strb	r1, [r0, #17]
}
   d8eca:	4770      	bx	lr

000d8ecc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8ecc:	4770      	bx	lr

000d8ece <_ZN9USBSerial4readEv>:
{
   d8ece:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8ed0:	2100      	movs	r1, #0
   d8ed2:	7c00      	ldrb	r0, [r0, #16]
   d8ed4:	f7fd ff60 	bl	d6d98 <HAL_USB_USART_Receive_Data>
}
   d8ed8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8edc:	bd08      	pop	{r3, pc}

000d8ede <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d8ede:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8ee0:	2101      	movs	r1, #1
   d8ee2:	7c00      	ldrb	r0, [r0, #16]
   d8ee4:	f7fd ff58 	bl	d6d98 <HAL_USB_USART_Receive_Data>
}
   d8ee8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8eec:	bd08      	pop	{r3, pc}

000d8eee <_ZN9USBSerial17availableForWriteEv>:
{
   d8eee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8ef0:	7c00      	ldrb	r0, [r0, #16]
   d8ef2:	f7fd ff49 	bl	d6d88 <HAL_USB_USART_Available_Data_For_Write>
}
   d8ef6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8efa:	bd08      	pop	{r3, pc}

000d8efc <_ZN9USBSerial9availableEv>:
{
   d8efc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8efe:	7c00      	ldrb	r0, [r0, #16]
   d8f00:	f7fd ff3a 	bl	d6d78 <HAL_USB_USART_Available_Data>
}
   d8f04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8f08:	bd08      	pop	{r3, pc}

000d8f0a <_ZN9USBSerial5writeEh>:
{
   d8f0a:	b513      	push	{r0, r1, r4, lr}
   d8f0c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8f0e:	7c00      	ldrb	r0, [r0, #16]
{
   d8f10:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8f12:	f7fd ff39 	bl	d6d88 <HAL_USB_USART_Available_Data_For_Write>
   d8f16:	2800      	cmp	r0, #0
   d8f18:	9901      	ldr	r1, [sp, #4]
   d8f1a:	dc01      	bgt.n	d8f20 <_ZN9USBSerial5writeEh+0x16>
   d8f1c:	7c60      	ldrb	r0, [r4, #17]
   d8f1e:	b120      	cbz	r0, d8f2a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8f20:	7c20      	ldrb	r0, [r4, #16]
   d8f22:	f7fd ff41 	bl	d6da8 <HAL_USB_USART_Send_Data>
   d8f26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8f2a:	b002      	add	sp, #8
   d8f2c:	bd10      	pop	{r4, pc}

000d8f2e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8f2e:	7c00      	ldrb	r0, [r0, #16]
   d8f30:	f7fd bf42 	b.w	d6db8 <HAL_USB_USART_Flush_Data>

000d8f34 <_ZN9USBSerialD0Ev>:
   d8f34:	b510      	push	{r4, lr}
   d8f36:	2114      	movs	r1, #20
   d8f38:	4604      	mov	r4, r0
   d8f3a:	f000 f9c8 	bl	d92ce <_ZdlPvj>
   d8f3e:	4620      	mov	r0, r4
   d8f40:	bd10      	pop	{r4, pc}
	...

000d8f44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8f44:	b510      	push	{r4, lr}
   d8f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8f4a:	4604      	mov	r4, r0
   d8f4c:	4608      	mov	r0, r1
   d8f4e:	2100      	movs	r1, #0
   d8f50:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8f54:	4b04      	ldr	r3, [pc, #16]	; (d8f68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8f56:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8f58:	2301      	movs	r3, #1
  _serial = serial;
   d8f5a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8f5c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8f5e:	4611      	mov	r1, r2
   d8f60:	f7fd fefa 	bl	d6d58 <HAL_USB_USART_Init>
}
   d8f64:	4620      	mov	r0, r4
   d8f66:	bd10      	pop	{r4, pc}
   d8f68:	000dcd88 	.word	0x000dcd88

000d8f6c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8f6c:	7c00      	ldrb	r0, [r0, #16]
   d8f6e:	2200      	movs	r2, #0
   d8f70:	f7fd befa 	b.w	d6d68 <HAL_USB_USART_Begin>

000d8f74 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8f74:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8f76:	2214      	movs	r2, #20
{
   d8f78:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8f7a:	2100      	movs	r1, #0
   d8f7c:	f001 fa46 	bl	da40c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8f80:	4620      	mov	r0, r4
   d8f82:	bd10      	pop	{r4, pc}

000d8f84 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8f84:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8f86:	4c10      	ldr	r4, [pc, #64]	; (d8fc8 <_Z16_fetch_usbserialv+0x44>)
{
   d8f88:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8f8a:	a803      	add	r0, sp, #12
   d8f8c:	f7ff fff2 	bl	d8f74 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8f90:	7821      	ldrb	r1, [r4, #0]
   d8f92:	f3bf 8f5b 	dmb	ish
   d8f96:	f011 0101 	ands.w	r1, r1, #1
   d8f9a:	d111      	bne.n	d8fc0 <_Z16_fetch_usbserialv+0x3c>
   d8f9c:	4620      	mov	r0, r4
   d8f9e:	9101      	str	r1, [sp, #4]
   d8fa0:	f7fb f881 	bl	d40a6 <__cxa_guard_acquire>
   d8fa4:	9901      	ldr	r1, [sp, #4]
   d8fa6:	b158      	cbz	r0, d8fc0 <_Z16_fetch_usbserialv+0x3c>
   d8fa8:	aa03      	add	r2, sp, #12
   d8faa:	4808      	ldr	r0, [pc, #32]	; (d8fcc <_Z16_fetch_usbserialv+0x48>)
   d8fac:	f7ff ffca 	bl	d8f44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8fb0:	4620      	mov	r0, r4
   d8fb2:	f7fb f87d 	bl	d40b0 <__cxa_guard_release>
   d8fb6:	4a06      	ldr	r2, [pc, #24]	; (d8fd0 <_Z16_fetch_usbserialv+0x4c>)
   d8fb8:	4906      	ldr	r1, [pc, #24]	; (d8fd4 <_Z16_fetch_usbserialv+0x50>)
   d8fba:	4804      	ldr	r0, [pc, #16]	; (d8fcc <_Z16_fetch_usbserialv+0x48>)
   d8fbc:	f000 f982 	bl	d92c4 <__aeabi_atexit>
	return _usbserial;
}
   d8fc0:	4802      	ldr	r0, [pc, #8]	; (d8fcc <_Z16_fetch_usbserialv+0x48>)
   d8fc2:	b008      	add	sp, #32
   d8fc4:	bd10      	pop	{r4, pc}
   d8fc6:	bf00      	nop
   d8fc8:	2003e7a8 	.word	0x2003e7a8
   d8fcc:	2003e7ac 	.word	0x2003e7ac
   d8fd0:	2003e428 	.word	0x2003e428
   d8fd4:	000d8ecd 	.word	0x000d8ecd

000d8fd8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d8fd8:	b510      	push	{r4, lr}
   d8fda:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d8fdc:	f001 fa8f 	bl	da4fe <strlen>
   d8fe0:	3801      	subs	r0, #1
   d8fe2:	1823      	adds	r3, r4, r0
   d8fe4:	4620      	mov	r0, r4
	while(i<j){
   d8fe6:	4283      	cmp	r3, r0
   d8fe8:	d906      	bls.n	d8ff8 <_Z11str_reversePc+0x20>
		c = *i;
   d8fea:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d8fec:	7819      	ldrb	r1, [r3, #0]
   d8fee:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d8ff2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d8ff6:	e7f6      	b.n	d8fe6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d8ff8:	bd10      	pop	{r4, pc}

000d8ffa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d8ffa:	b570      	push	{r4, r5, r6, lr}
   d8ffc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d8ffe:	1e91      	subs	r1, r2, #2
   d9000:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9002:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d9004:	d822      	bhi.n	d904c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d9006:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d9008:	b16d      	cbz	r5, d9026 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d900a:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d900e:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d9012:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d9014:	2d09      	cmp	r5, #9
                *ptr += '0';
   d9016:	bf94      	ite	ls
   d9018:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d901a:	3157      	addhi	r1, #87	; 0x57
   d901c:	b2c9      	uxtb	r1, r1
   d901e:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d9022:	4635      	mov	r5, r6
	while(a){
   d9024:	e7f0      	b.n	d9008 <ultoa+0xe>
   d9026:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d9028:	4423      	add	r3, r4
            *ptr++ = '0';
   d902a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d902c:	4293      	cmp	r3, r2
   d902e:	d902      	bls.n	d9036 <ultoa+0x3c>
            *ptr++ = '0';
   d9030:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d9034:	e7fa      	b.n	d902c <ultoa+0x32>
   d9036:	1a1a      	subs	r2, r3, r0
   d9038:	4283      	cmp	r3, r0
   d903a:	bf38      	it	cc
   d903c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d903e:	2300      	movs	r3, #0
   d9040:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d9042:	4620      	mov	r0, r4
   d9044:	f7ff ffc8 	bl	d8fd8 <_Z11str_reversePc>
	return buffer;
   d9048:	4620      	mov	r0, r4
}
   d904a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d904c:	2000      	movs	r0, #0
   d904e:	e7fc      	b.n	d904a <ultoa+0x50>

000d9050 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d9050:	4b01      	ldr	r3, [pc, #4]	; (d9058 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d9052:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9054:	4770      	bx	lr
   d9056:	bf00      	nop
   d9058:	2003e254 	.word	0x2003e254

000d905c <serialEventRun>:
{
   d905c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d905e:	4b0b      	ldr	r3, [pc, #44]	; (d908c <serialEventRun+0x30>)
   d9060:	b143      	cbz	r3, d9074 <serialEventRun+0x18>
   d9062:	f7ff ff8f 	bl	d8f84 <_Z16_fetch_usbserialv>
   d9066:	6803      	ldr	r3, [r0, #0]
   d9068:	691b      	ldr	r3, [r3, #16]
   d906a:	4798      	blx	r3
   d906c:	2800      	cmp	r0, #0
   d906e:	dd01      	ble.n	d9074 <serialEventRun+0x18>
        serialEvent();
   d9070:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9074:	4b06      	ldr	r3, [pc, #24]	; (d9090 <serialEventRun+0x34>)
   d9076:	b143      	cbz	r3, d908a <serialEventRun+0x2e>
   d9078:	f7ff fefc 	bl	d8e74 <_Z22__fetch_global_Serial1v>
   d907c:	6803      	ldr	r3, [r0, #0]
   d907e:	691b      	ldr	r3, [r3, #16]
   d9080:	4798      	blx	r3
   d9082:	2800      	cmp	r0, #0
   d9084:	dd01      	ble.n	d908a <serialEventRun+0x2e>
        serialEvent1();
   d9086:	f3af 8000 	nop.w
}
   d908a:	bd08      	pop	{r3, pc}
	...

000d9094 <_post_loop>:
{
   d9094:	b508      	push	{r3, lr}
	serialEventRun();
   d9096:	f7ff ffe1 	bl	d905c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d909a:	f7fd fd05 	bl	d6aa8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d909e:	4b01      	ldr	r3, [pc, #4]	; (d90a4 <_post_loop+0x10>)
   d90a0:	6018      	str	r0, [r3, #0]
}
   d90a2:	bd08      	pop	{r3, pc}
   d90a4:	2003e7d4 	.word	0x2003e7d4

000d90a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d90a8:	4802      	ldr	r0, [pc, #8]	; (d90b4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d90aa:	4a03      	ldr	r2, [pc, #12]	; (d90b8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d90ac:	4903      	ldr	r1, [pc, #12]	; (d90bc <_Z33system_initialize_user_backup_ramv+0x14>)
   d90ae:	1a12      	subs	r2, r2, r0
   d90b0:	f001 b984 	b.w	da3bc <memcpy>
   d90b4:	2003f400 	.word	0x2003f400
   d90b8:	2003f404 	.word	0x2003f404
   d90bc:	000dd168 	.word	0x000dd168

000d90c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d90c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d90c2:	2300      	movs	r3, #0
   d90c4:	9300      	str	r3, [sp, #0]
   d90c6:	461a      	mov	r2, r3
   d90c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d90cc:	f7fd fece 	bl	d6e6c <system_ctrl_set_result>
}
   d90d0:	b003      	add	sp, #12
   d90d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d90d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d90d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d90da:	8843      	ldrh	r3, [r0, #2]
   d90dc:	2b0a      	cmp	r3, #10
   d90de:	d008      	beq.n	d90f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d90e0:	2b50      	cmp	r3, #80	; 0x50
   d90e2:	d10b      	bne.n	d90fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d90e4:	4b09      	ldr	r3, [pc, #36]	; (d910c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d90e6:	681b      	ldr	r3, [r3, #0]
   d90e8:	b14b      	cbz	r3, d90fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d90ea:	b003      	add	sp, #12
   d90ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d90f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d90f2:	f7ff ffe5 	bl	d90c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d90f6:	b003      	add	sp, #12
   d90f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d90fc:	2300      	movs	r3, #0
   d90fe:	9300      	str	r3, [sp, #0]
   d9100:	461a      	mov	r2, r3
   d9102:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9106:	f7fd feb1 	bl	d6e6c <system_ctrl_set_result>
}
   d910a:	e7f4      	b.n	d90f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d910c:	2003e7c4 	.word	0x2003e7c4

000d9110 <module_user_init_hook>:
{
   d9110:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9112:	4c12      	ldr	r4, [pc, #72]	; (d915c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9114:	4812      	ldr	r0, [pc, #72]	; (d9160 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9116:	4d13      	ldr	r5, [pc, #76]	; (d9164 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9118:	2100      	movs	r1, #0
   d911a:	f7fd ff79 	bl	d7010 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d911e:	6823      	ldr	r3, [r4, #0]
   d9120:	42ab      	cmp	r3, r5
   d9122:	4b11      	ldr	r3, [pc, #68]	; (d9168 <module_user_init_hook+0x58>)
   d9124:	bf0c      	ite	eq
   d9126:	2201      	moveq	r2, #1
   d9128:	2200      	movne	r2, #0
   d912a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d912c:	d002      	beq.n	d9134 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d912e:	f7ff ffbb 	bl	d90a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d9132:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9134:	f7fd fca8 	bl	d6a88 <HAL_RNG_GetRandomNumber>
   d9138:	4604      	mov	r4, r0
    srand(seed);
   d913a:	f001 f97f 	bl	da43c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d913e:	4b0b      	ldr	r3, [pc, #44]	; (d916c <module_user_init_hook+0x5c>)
   d9140:	b113      	cbz	r3, d9148 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d9142:	4620      	mov	r0, r4
   d9144:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9148:	2100      	movs	r1, #0
   d914a:	4808      	ldr	r0, [pc, #32]	; (d916c <module_user_init_hook+0x5c>)
   d914c:	f7fd fec0 	bl	d6ed0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d9150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9154:	4806      	ldr	r0, [pc, #24]	; (d9170 <module_user_init_hook+0x60>)
   d9156:	2100      	movs	r1, #0
   d9158:	f7fd be7e 	b.w	d6e58 <system_ctrl_set_app_request_handler>
   d915c:	2003f400 	.word	0x2003f400
   d9160:	000d9051 	.word	0x000d9051
   d9164:	9a271c1e 	.word	0x9a271c1e
   d9168:	2003e7c0 	.word	0x2003e7c0
   d916c:	00000000 	.word	0x00000000
   d9170:	000d90d9 	.word	0x000d90d9

000d9174 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9174:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d9176:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d9178:	d902      	bls.n	d9180 <pinAvailable+0xc>
    return false;
   d917a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d917c:	b002      	add	sp, #8
   d917e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9180:	f1a0 030b 	sub.w	r3, r0, #11
   d9184:	2b02      	cmp	r3, #2
   d9186:	d81a      	bhi.n	d91be <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9188:	4c17      	ldr	r4, [pc, #92]	; (d91e8 <pinAvailable+0x74>)
   d918a:	7821      	ldrb	r1, [r4, #0]
   d918c:	f3bf 8f5b 	dmb	ish
   d9190:	f011 0101 	ands.w	r1, r1, #1
   d9194:	d10b      	bne.n	d91ae <pinAvailable+0x3a>
   d9196:	4620      	mov	r0, r4
   d9198:	9101      	str	r1, [sp, #4]
   d919a:	f7fa ff84 	bl	d40a6 <__cxa_guard_acquire>
   d919e:	9901      	ldr	r1, [sp, #4]
   d91a0:	b128      	cbz	r0, d91ae <pinAvailable+0x3a>
   d91a2:	4812      	ldr	r0, [pc, #72]	; (d91ec <pinAvailable+0x78>)
   d91a4:	f7fe ff28 	bl	d7ff8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d91a8:	4620      	mov	r0, r4
   d91aa:	f7fa ff81 	bl	d40b0 <__cxa_guard_release>
   d91ae:	4b0f      	ldr	r3, [pc, #60]	; (d91ec <pinAvailable+0x78>)
   d91b0:	7818      	ldrb	r0, [r3, #0]
   d91b2:	f7fd fd89 	bl	d6cc8 <hal_spi_is_enabled>
   d91b6:	2800      	cmp	r0, #0
   d91b8:	d1df      	bne.n	d917a <pinAvailable+0x6>
  return true; // 'pin' is available
   d91ba:	2001      	movs	r0, #1
   d91bc:	e7de      	b.n	d917c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d91be:	2801      	cmp	r0, #1
   d91c0:	d809      	bhi.n	d91d6 <pinAvailable+0x62>
   d91c2:	f000 f857 	bl	d9274 <_Z19__fetch_global_Wirev>
   d91c6:	2100      	movs	r1, #0
   d91c8:	7c00      	ldrb	r0, [r0, #16]
   d91ca:	f7fd fce5 	bl	d6b98 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d91ce:	f080 0001 	eor.w	r0, r0, #1
   d91d2:	b2c0      	uxtb	r0, r0
   d91d4:	e7d2      	b.n	d917c <pinAvailable+0x8>
   d91d6:	3809      	subs	r0, #9
   d91d8:	2801      	cmp	r0, #1
   d91da:	d8ee      	bhi.n	d91ba <pinAvailable+0x46>
   d91dc:	f7ff fe4a 	bl	d8e74 <_Z22__fetch_global_Serial1v>
   d91e0:	7c00      	ldrb	r0, [r0, #16]
   d91e2:	f7fd fda9 	bl	d6d38 <hal_usart_is_enabled>
   d91e6:	e7f2      	b.n	d91ce <pinAvailable+0x5a>
   d91e8:	2003e7c8 	.word	0x2003e7c8
   d91ec:	2003e7cc 	.word	0x2003e7cc

000d91f0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d91f0:	2823      	cmp	r0, #35	; 0x23
{
   d91f2:	b538      	push	{r3, r4, r5, lr}
   d91f4:	4604      	mov	r4, r0
   d91f6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d91f8:	d80a      	bhi.n	d9210 <pinMode+0x20>
   d91fa:	29ff      	cmp	r1, #255	; 0xff
   d91fc:	d008      	beq.n	d9210 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d91fe:	f7ff ffb9 	bl	d9174 <pinAvailable>
   d9202:	b128      	cbz	r0, d9210 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9204:	4629      	mov	r1, r5
   d9206:	4620      	mov	r0, r4
}
   d9208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d920c:	f7fd bc5c 	b.w	d6ac8 <HAL_Pin_Mode>
}
   d9210:	bd38      	pop	{r3, r4, r5, pc}

000d9212 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9212:	b538      	push	{r3, r4, r5, lr}
   d9214:	4604      	mov	r4, r0
   d9216:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9218:	f7fd fc5e 	bl	d6ad8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d921c:	28ff      	cmp	r0, #255	; 0xff
   d921e:	d010      	beq.n	d9242 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9220:	2806      	cmp	r0, #6
   d9222:	d804      	bhi.n	d922e <digitalWrite+0x1c>
   d9224:	234d      	movs	r3, #77	; 0x4d
   d9226:	fa23 f000 	lsr.w	r0, r3, r0
   d922a:	07c3      	lsls	r3, r0, #31
   d922c:	d409      	bmi.n	d9242 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d922e:	4620      	mov	r0, r4
   d9230:	f7ff ffa0 	bl	d9174 <pinAvailable>
   d9234:	b128      	cbz	r0, d9242 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9236:	4629      	mov	r1, r5
   d9238:	4620      	mov	r0, r4
}
   d923a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d923e:	f7fd bc53 	b.w	d6ae8 <HAL_GPIO_Write>
}
   d9242:	bd38      	pop	{r3, r4, r5, pc}

000d9244 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d9244:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d9246:	2300      	movs	r3, #0
   d9248:	2520      	movs	r5, #32
   d924a:	8043      	strh	r3, [r0, #2]
   d924c:	2314      	movs	r3, #20
{
   d924e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9250:	8003      	strh	r3, [r0, #0]
   d9252:	6085      	str	r5, [r0, #8]
   d9254:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9256:	4906      	ldr	r1, [pc, #24]	; (d9270 <_Z17acquireWireBufferv+0x2c>)
   d9258:	4628      	mov	r0, r5
   d925a:	f000 f83c 	bl	d92d6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d925e:	4904      	ldr	r1, [pc, #16]	; (d9270 <_Z17acquireWireBufferv+0x2c>)
	};
   d9260:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9262:	4628      	mov	r0, r5
   d9264:	f000 f837 	bl	d92d6 <_ZnajRKSt9nothrow_t>
	};
   d9268:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d926a:	4620      	mov	r0, r4
   d926c:	bd38      	pop	{r3, r4, r5, pc}
   d926e:	bf00      	nop
   d9270:	000dcdb0 	.word	0x000dcdb0

000d9274 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9274:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9276:	4d0f      	ldr	r5, [pc, #60]	; (d92b4 <_Z19__fetch_global_Wirev+0x40>)
   d9278:	7829      	ldrb	r1, [r5, #0]
   d927a:	f3bf 8f5b 	dmb	ish
   d927e:	f011 0401 	ands.w	r4, r1, #1
{
   d9282:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9284:	d113      	bne.n	d92ae <_Z19__fetch_global_Wirev+0x3a>
   d9286:	4628      	mov	r0, r5
   d9288:	f7fa ff0d 	bl	d40a6 <__cxa_guard_acquire>
   d928c:	b178      	cbz	r0, d92ae <_Z19__fetch_global_Wirev+0x3a>
   d928e:	a801      	add	r0, sp, #4
   d9290:	f7ff ffd8 	bl	d9244 <_Z17acquireWireBufferv>
   d9294:	aa01      	add	r2, sp, #4
   d9296:	4621      	mov	r1, r4
   d9298:	4807      	ldr	r0, [pc, #28]	; (d92b8 <_Z19__fetch_global_Wirev+0x44>)
   d929a:	f7fe fa59 	bl	d7750 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d929e:	4628      	mov	r0, r5
   d92a0:	f7fa ff06 	bl	d40b0 <__cxa_guard_release>
   d92a4:	4a05      	ldr	r2, [pc, #20]	; (d92bc <_Z19__fetch_global_Wirev+0x48>)
   d92a6:	4906      	ldr	r1, [pc, #24]	; (d92c0 <_Z19__fetch_global_Wirev+0x4c>)
   d92a8:	4803      	ldr	r0, [pc, #12]	; (d92b8 <_Z19__fetch_global_Wirev+0x44>)
   d92aa:	f000 f80b 	bl	d92c4 <__aeabi_atexit>
	return wire;
}
   d92ae:	4802      	ldr	r0, [pc, #8]	; (d92b8 <_Z19__fetch_global_Wirev+0x44>)
   d92b0:	b007      	add	sp, #28
   d92b2:	bd30      	pop	{r4, r5, pc}
   d92b4:	2003e7d8 	.word	0x2003e7d8
   d92b8:	2003e7dc 	.word	0x2003e7dc
   d92bc:	2003e428 	.word	0x2003e428
   d92c0:	000d76f9 	.word	0x000d76f9

000d92c4 <__aeabi_atexit>:
   d92c4:	460b      	mov	r3, r1
   d92c6:	4601      	mov	r1, r0
   d92c8:	4618      	mov	r0, r3
   d92ca:	f001 b869 	b.w	da3a0 <__cxa_atexit>

000d92ce <_ZdlPvj>:
   d92ce:	f7fa bee6 	b.w	d409e <_ZdlPv>

000d92d2 <_ZnwjRKSt9nothrow_t>:
   d92d2:	f7fa bee0 	b.w	d4096 <_Znwj>

000d92d6 <_ZnajRKSt9nothrow_t>:
   d92d6:	f7fa bee0 	b.w	d409a <_Znaj>

000d92da <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d92da:	68c3      	ldr	r3, [r0, #12]
   d92dc:	689a      	ldr	r2, [r3, #8]
   d92de:	60c2      	str	r2, [r0, #12]
   d92e0:	b510      	push	{r4, lr}
   d92e2:	b102      	cbz	r2, d92e6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   d92e4:	6050      	str	r0, [r2, #4]
   d92e6:	6842      	ldr	r2, [r0, #4]
   d92e8:	605a      	str	r2, [r3, #4]
   d92ea:	680c      	ldr	r4, [r1, #0]
   d92ec:	4284      	cmp	r4, r0
   d92ee:	d103      	bne.n	d92f8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   d92f0:	600b      	str	r3, [r1, #0]
   d92f2:	6098      	str	r0, [r3, #8]
   d92f4:	6043      	str	r3, [r0, #4]
   d92f6:	bd10      	pop	{r4, pc}
   d92f8:	6891      	ldr	r1, [r2, #8]
   d92fa:	4281      	cmp	r1, r0
   d92fc:	bf0c      	ite	eq
   d92fe:	6093      	streq	r3, [r2, #8]
   d9300:	60d3      	strne	r3, [r2, #12]
   d9302:	e7f6      	b.n	d92f2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000d9304 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d9304:	6883      	ldr	r3, [r0, #8]
   d9306:	68da      	ldr	r2, [r3, #12]
   d9308:	6082      	str	r2, [r0, #8]
   d930a:	b510      	push	{r4, lr}
   d930c:	b102      	cbz	r2, d9310 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   d930e:	6050      	str	r0, [r2, #4]
   d9310:	6842      	ldr	r2, [r0, #4]
   d9312:	605a      	str	r2, [r3, #4]
   d9314:	680c      	ldr	r4, [r1, #0]
   d9316:	4284      	cmp	r4, r0
   d9318:	d103      	bne.n	d9322 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   d931a:	600b      	str	r3, [r1, #0]
   d931c:	60d8      	str	r0, [r3, #12]
   d931e:	6043      	str	r3, [r0, #4]
   d9320:	bd10      	pop	{r4, pc}
   d9322:	68d1      	ldr	r1, [r2, #12]
   d9324:	4281      	cmp	r1, r0
   d9326:	bf0c      	ite	eq
   d9328:	60d3      	streq	r3, [r2, #12]
   d932a:	6093      	strne	r3, [r2, #8]
   d932c:	e7f6      	b.n	d931c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000d932e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d932e:	7803      	ldrb	r3, [r0, #0]
   d9330:	b933      	cbnz	r3, d9340 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d9332:	6843      	ldr	r3, [r0, #4]
   d9334:	685b      	ldr	r3, [r3, #4]
   d9336:	4283      	cmp	r3, r0
   d9338:	d102      	bne.n	d9340 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d933a:	68db      	ldr	r3, [r3, #12]
   d933c:	4618      	mov	r0, r3
   d933e:	4770      	bx	lr
   d9340:	6882      	ldr	r2, [r0, #8]
   d9342:	b122      	cbz	r2, d934e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   d9344:	4613      	mov	r3, r2
   d9346:	68d2      	ldr	r2, [r2, #12]
   d9348:	2a00      	cmp	r2, #0
   d934a:	d1fb      	bne.n	d9344 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   d934c:	e7f6      	b.n	d933c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d934e:	6843      	ldr	r3, [r0, #4]
   d9350:	689a      	ldr	r2, [r3, #8]
   d9352:	4282      	cmp	r2, r0
   d9354:	d1f2      	bne.n	d933c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d9356:	4618      	mov	r0, r3
   d9358:	685b      	ldr	r3, [r3, #4]
   d935a:	e7f9      	b.n	d9350 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000d935c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   d935c:	68c3      	ldr	r3, [r0, #12]
   d935e:	b123      	cbz	r3, d936a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   d9360:	4618      	mov	r0, r3
   d9362:	689b      	ldr	r3, [r3, #8]
   d9364:	2b00      	cmp	r3, #0
   d9366:	d1fb      	bne.n	d9360 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   d9368:	4770      	bx	lr
   d936a:	6843      	ldr	r3, [r0, #4]
   d936c:	68da      	ldr	r2, [r3, #12]
   d936e:	4282      	cmp	r2, r0
   d9370:	d102      	bne.n	d9378 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   d9372:	4618      	mov	r0, r3
   d9374:	685b      	ldr	r3, [r3, #4]
   d9376:	e7f9      	b.n	d936c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   d9378:	68c2      	ldr	r2, [r0, #12]
   d937a:	4293      	cmp	r3, r2
   d937c:	bf18      	it	ne
   d937e:	4618      	movne	r0, r3
   d9380:	4770      	bx	lr

000d9382 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d9382:	f7ff bfd4 	b.w	d932e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000d9386 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   d9386:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d938a:	461e      	mov	r6, r3
   d938c:	f103 0804 	add.w	r8, r3, #4
   d9390:	2300      	movs	r3, #0
   d9392:	e9c1 3302 	strd	r3, r3, [r1, #8]
   d9396:	460c      	mov	r4, r1
   d9398:	604a      	str	r2, [r1, #4]
   d939a:	700b      	strb	r3, [r1, #0]
   d939c:	b300      	cbz	r0, d93e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   d939e:	4296      	cmp	r6, r2
   d93a0:	6091      	str	r1, [r2, #8]
   d93a2:	d118      	bne.n	d93d6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   d93a4:	6071      	str	r1, [r6, #4]
   d93a6:	60f4      	str	r4, [r6, #12]
   d93a8:	2701      	movs	r7, #1
   d93aa:	f04f 0900 	mov.w	r9, #0
   d93ae:	6873      	ldr	r3, [r6, #4]
   d93b0:	42a3      	cmp	r3, r4
   d93b2:	d03f      	beq.n	d9434 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   d93b4:	6860      	ldr	r0, [r4, #4]
   d93b6:	7802      	ldrb	r2, [r0, #0]
   d93b8:	2a00      	cmp	r2, #0
   d93ba:	d13c      	bne.n	d9436 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   d93bc:	6845      	ldr	r5, [r0, #4]
   d93be:	68ab      	ldr	r3, [r5, #8]
   d93c0:	4298      	cmp	r0, r3
   d93c2:	d123      	bne.n	d940c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   d93c4:	68eb      	ldr	r3, [r5, #12]
   d93c6:	b183      	cbz	r3, d93ea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d93c8:	781a      	ldrb	r2, [r3, #0]
   d93ca:	b972      	cbnz	r2, d93ea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d93cc:	7007      	strb	r7, [r0, #0]
   d93ce:	701f      	strb	r7, [r3, #0]
   d93d0:	702a      	strb	r2, [r5, #0]
   d93d2:	462c      	mov	r4, r5
   d93d4:	e7eb      	b.n	d93ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   d93d6:	68b3      	ldr	r3, [r6, #8]
   d93d8:	4293      	cmp	r3, r2
   d93da:	d1e5      	bne.n	d93a8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d93dc:	60b1      	str	r1, [r6, #8]
   d93de:	e7e3      	b.n	d93a8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d93e0:	60d1      	str	r1, [r2, #12]
   d93e2:	68f3      	ldr	r3, [r6, #12]
   d93e4:	4293      	cmp	r3, r2
   d93e6:	d1df      	bne.n	d93a8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d93e8:	e7dd      	b.n	d93a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   d93ea:	68c3      	ldr	r3, [r0, #12]
   d93ec:	42a3      	cmp	r3, r4
   d93ee:	d103      	bne.n	d93f8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   d93f0:	4641      	mov	r1, r8
   d93f2:	f7ff ff72 	bl	d92da <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d93f6:	4604      	mov	r4, r0
   d93f8:	6863      	ldr	r3, [r4, #4]
   d93fa:	4641      	mov	r1, r8
   d93fc:	701f      	strb	r7, [r3, #0]
   d93fe:	4628      	mov	r0, r5
   d9400:	f885 9000 	strb.w	r9, [r5]
   d9404:	f7ff ff7e 	bl	d9304 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d9408:	4625      	mov	r5, r4
   d940a:	e7e2      	b.n	d93d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   d940c:	b113      	cbz	r3, d9414 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   d940e:	781a      	ldrb	r2, [r3, #0]
   d9410:	2a00      	cmp	r2, #0
   d9412:	d0db      	beq.n	d93cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   d9414:	6883      	ldr	r3, [r0, #8]
   d9416:	42a3      	cmp	r3, r4
   d9418:	d103      	bne.n	d9422 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   d941a:	4641      	mov	r1, r8
   d941c:	f7ff ff72 	bl	d9304 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d9420:	4604      	mov	r4, r0
   d9422:	6863      	ldr	r3, [r4, #4]
   d9424:	4641      	mov	r1, r8
   d9426:	701f      	strb	r7, [r3, #0]
   d9428:	4628      	mov	r0, r5
   d942a:	f885 9000 	strb.w	r9, [r5]
   d942e:	f7ff ff54 	bl	d92da <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d9432:	e7e9      	b.n	d9408 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   d9434:	4623      	mov	r3, r4
   d9436:	2201      	movs	r2, #1
   d9438:	701a      	strb	r2, [r3, #0]
   d943a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d943e <_ZSt25__throw_bad_function_callv>:
   d943e:	b508      	push	{r3, lr}
   d9440:	f7fd fdce 	bl	d6fe0 <abort>

000d9444 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d9444:	4901      	ldr	r1, [pc, #4]	; (d944c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d9446:	f000 b8f9 	b.w	d963c <_ZNKSt9type_infoeqERKS_>
   d944a:	bf00      	nop
   d944c:	000dcdcc 	.word	0x000dcdcc

000d9450 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d9450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d9452:	2400      	movs	r4, #0
   d9454:	2310      	movs	r3, #16
   d9456:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d945a:	6803      	ldr	r3, [r0, #0]
   d945c:	9400      	str	r4, [sp, #0]
   d945e:	699e      	ldr	r6, [r3, #24]
   d9460:	f88d 4004 	strb.w	r4, [sp, #4]
   d9464:	4615      	mov	r5, r2
   d9466:	466b      	mov	r3, sp
   d9468:	6812      	ldr	r2, [r2, #0]
   d946a:	47b0      	blx	r6
   d946c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d9470:	f003 0306 	and.w	r3, r3, #6
   d9474:	2b06      	cmp	r3, #6
   d9476:	bf03      	ittte	eq
   d9478:	9b00      	ldreq	r3, [sp, #0]
   d947a:	602b      	streq	r3, [r5, #0]
   d947c:	2001      	moveq	r0, #1
   d947e:	4620      	movne	r0, r4
   d9480:	b004      	add	sp, #16
   d9482:	bd70      	pop	{r4, r5, r6, pc}

000d9484 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d9484:	9800      	ldr	r0, [sp, #0]
   d9486:	4290      	cmp	r0, r2
   d9488:	bf14      	ite	ne
   d948a:	2001      	movne	r0, #1
   d948c:	2006      	moveq	r0, #6
   d948e:	4770      	bx	lr

000d9490 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d9490:	b510      	push	{r4, lr}
   d9492:	4b03      	ldr	r3, [pc, #12]	; (d94a0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d9494:	6003      	str	r3, [r0, #0]
   d9496:	4604      	mov	r4, r0
   d9498:	f000 f8cd 	bl	d9636 <_ZNSt9type_infoD1Ev>
   d949c:	4620      	mov	r0, r4
   d949e:	bd10      	pop	{r4, pc}
   d94a0:	000dce0c 	.word	0x000dce0c

000d94a4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d94a4:	b510      	push	{r4, lr}
   d94a6:	4604      	mov	r4, r0
   d94a8:	f7ff fff2 	bl	d9490 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d94ac:	4620      	mov	r0, r4
   d94ae:	2108      	movs	r1, #8
   d94b0:	f7ff ff0d 	bl	d92ce <_ZdlPvj>
   d94b4:	4620      	mov	r0, r4
   d94b6:	bd10      	pop	{r4, pc}

000d94b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d94b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d94bc:	461f      	mov	r7, r3
   d94be:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d94c2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d94c6:	4598      	cmp	r8, r3
   d94c8:	4606      	mov	r6, r0
   d94ca:	4615      	mov	r5, r2
   d94cc:	d107      	bne.n	d94de <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d94ce:	9907      	ldr	r1, [sp, #28]
   d94d0:	f000 f8b4 	bl	d963c <_ZNKSt9type_infoeqERKS_>
   d94d4:	b118      	cbz	r0, d94de <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d94d6:	7165      	strb	r5, [r4, #5]
   d94d8:	2000      	movs	r0, #0
   d94da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d94de:	4639      	mov	r1, r7
   d94e0:	4630      	mov	r0, r6
   d94e2:	f000 f8ab 	bl	d963c <_ZNKSt9type_infoeqERKS_>
   d94e6:	2800      	cmp	r0, #0
   d94e8:	d0f6      	beq.n	d94d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d94ea:	2301      	movs	r3, #1
   d94ec:	f8c4 8000 	str.w	r8, [r4]
   d94f0:	7125      	strb	r5, [r4, #4]
   d94f2:	71a3      	strb	r3, [r4, #6]
   d94f4:	e7f0      	b.n	d94d8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d94f6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d94f6:	b538      	push	{r3, r4, r5, lr}
   d94f8:	4615      	mov	r5, r2
   d94fa:	461c      	mov	r4, r3
   d94fc:	f000 f89e 	bl	d963c <_ZNKSt9type_infoeqERKS_>
   d9500:	b120      	cbz	r0, d950c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d9502:	2308      	movs	r3, #8
   d9504:	60e3      	str	r3, [r4, #12]
   d9506:	2306      	movs	r3, #6
   d9508:	6025      	str	r5, [r4, #0]
   d950a:	7123      	strb	r3, [r4, #4]
   d950c:	bd38      	pop	{r3, r4, r5, pc}

000d950e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d950e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9510:	4605      	mov	r5, r0
   d9512:	460c      	mov	r4, r1
   d9514:	9201      	str	r2, [sp, #4]
   d9516:	461e      	mov	r6, r3
   d9518:	f000 f890 	bl	d963c <_ZNKSt9type_infoeqERKS_>
   d951c:	b950      	cbnz	r0, d9534 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d951e:	2e03      	cmp	r6, #3
   d9520:	d808      	bhi.n	d9534 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d9522:	6823      	ldr	r3, [r4, #0]
   d9524:	9a01      	ldr	r2, [sp, #4]
   d9526:	695b      	ldr	r3, [r3, #20]
   d9528:	4629      	mov	r1, r5
   d952a:	4620      	mov	r0, r4
   d952c:	b002      	add	sp, #8
   d952e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9532:	4718      	bx	r3
   d9534:	b002      	add	sp, #8
   d9536:	bd70      	pop	{r4, r5, r6, pc}

000d9538 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d9538:	b510      	push	{r4, lr}
   d953a:	4b03      	ldr	r3, [pc, #12]	; (d9548 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d953c:	6003      	str	r3, [r0, #0]
   d953e:	4604      	mov	r4, r0
   d9540:	f7ff ffa6 	bl	d9490 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d9544:	4620      	mov	r0, r4
   d9546:	bd10      	pop	{r4, pc}
   d9548:	000dce6c 	.word	0x000dce6c

000d954c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d954c:	b510      	push	{r4, lr}
   d954e:	4604      	mov	r4, r0
   d9550:	f7ff fff2 	bl	d9538 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d9554:	4620      	mov	r0, r4
   d9556:	210c      	movs	r1, #12
   d9558:	f7ff feb9 	bl	d92ce <_ZdlPvj>
   d955c:	4620      	mov	r0, r4
   d955e:	bd10      	pop	{r4, pc}

000d9560 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d9560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9562:	9f08      	ldr	r7, [sp, #32]
   d9564:	4297      	cmp	r7, r2
   d9566:	4605      	mov	r5, r0
   d9568:	460e      	mov	r6, r1
   d956a:	4614      	mov	r4, r2
   d956c:	d00a      	beq.n	d9584 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d956e:	68a8      	ldr	r0, [r5, #8]
   d9570:	6802      	ldr	r2, [r0, #0]
   d9572:	9708      	str	r7, [sp, #32]
   d9574:	6a15      	ldr	r5, [r2, #32]
   d9576:	4631      	mov	r1, r6
   d9578:	4622      	mov	r2, r4
   d957a:	46ac      	mov	ip, r5
   d957c:	b003      	add	sp, #12
   d957e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9582:	4760      	bx	ip
   d9584:	4619      	mov	r1, r3
   d9586:	9301      	str	r3, [sp, #4]
   d9588:	f000 f858 	bl	d963c <_ZNKSt9type_infoeqERKS_>
   d958c:	9b01      	ldr	r3, [sp, #4]
   d958e:	2800      	cmp	r0, #0
   d9590:	d0ed      	beq.n	d956e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d9592:	2006      	movs	r0, #6
   d9594:	b003      	add	sp, #12
   d9596:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9598 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d9598:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d959c:	460d      	mov	r5, r1
   d959e:	4619      	mov	r1, r3
   d95a0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d95a4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d95a8:	4681      	mov	r9, r0
   d95aa:	4617      	mov	r7, r2
   d95ac:	4698      	mov	r8, r3
   d95ae:	f000 f845 	bl	d963c <_ZNKSt9type_infoeqERKS_>
   d95b2:	b190      	cbz	r0, d95da <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d95b4:	2d00      	cmp	r5, #0
   d95b6:	6034      	str	r4, [r6, #0]
   d95b8:	7137      	strb	r7, [r6, #4]
   d95ba:	db09      	blt.n	d95d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d95bc:	1961      	adds	r1, r4, r5
   d95be:	458a      	cmp	sl, r1
   d95c0:	bf0c      	ite	eq
   d95c2:	2106      	moveq	r1, #6
   d95c4:	2101      	movne	r1, #1
   d95c6:	71b1      	strb	r1, [r6, #6]
   d95c8:	2000      	movs	r0, #0
   d95ca:	b001      	add	sp, #4
   d95cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d95d0:	3502      	adds	r5, #2
   d95d2:	d1f9      	bne.n	d95c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d95d4:	2301      	movs	r3, #1
   d95d6:	71b3      	strb	r3, [r6, #6]
   d95d8:	e7f6      	b.n	d95c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d95da:	4554      	cmp	r4, sl
   d95dc:	d106      	bne.n	d95ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d95de:	4659      	mov	r1, fp
   d95e0:	4648      	mov	r0, r9
   d95e2:	f000 f82b 	bl	d963c <_ZNKSt9type_infoeqERKS_>
   d95e6:	b108      	cbz	r0, d95ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d95e8:	7177      	strb	r7, [r6, #5]
   d95ea:	e7ed      	b.n	d95c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d95ec:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d95f0:	6803      	ldr	r3, [r0, #0]
   d95f2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d95f6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d95fa:	69dc      	ldr	r4, [r3, #28]
   d95fc:	463a      	mov	r2, r7
   d95fe:	4643      	mov	r3, r8
   d9600:	4629      	mov	r1, r5
   d9602:	46a4      	mov	ip, r4
   d9604:	b001      	add	sp, #4
   d9606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d960a:	4760      	bx	ip

000d960c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d960c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9610:	4607      	mov	r7, r0
   d9612:	460c      	mov	r4, r1
   d9614:	4615      	mov	r5, r2
   d9616:	461e      	mov	r6, r3
   d9618:	f7ff ff6d 	bl	d94f6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d961c:	b948      	cbnz	r0, d9632 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d961e:	68b8      	ldr	r0, [r7, #8]
   d9620:	6803      	ldr	r3, [r0, #0]
   d9622:	699f      	ldr	r7, [r3, #24]
   d9624:	462a      	mov	r2, r5
   d9626:	4633      	mov	r3, r6
   d9628:	4621      	mov	r1, r4
   d962a:	46bc      	mov	ip, r7
   d962c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d9630:	4760      	bx	ip
   d9632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9636 <_ZNSt9type_infoD1Ev>:
   d9636:	4770      	bx	lr

000d9638 <_ZNKSt9type_info14__is_pointer_pEv>:
   d9638:	2000      	movs	r0, #0
   d963a:	4770      	bx	lr

000d963c <_ZNKSt9type_infoeqERKS_>:
   d963c:	4281      	cmp	r1, r0
   d963e:	b508      	push	{r3, lr}
   d9640:	d00e      	beq.n	d9660 <_ZNKSt9type_infoeqERKS_+0x24>
   d9642:	6840      	ldr	r0, [r0, #4]
   d9644:	7803      	ldrb	r3, [r0, #0]
   d9646:	2b2a      	cmp	r3, #42	; 0x2a
   d9648:	d00c      	beq.n	d9664 <_ZNKSt9type_infoeqERKS_+0x28>
   d964a:	6849      	ldr	r1, [r1, #4]
   d964c:	780b      	ldrb	r3, [r1, #0]
   d964e:	2b2a      	cmp	r3, #42	; 0x2a
   d9650:	bf08      	it	eq
   d9652:	3101      	addeq	r1, #1
   d9654:	f000 ff23 	bl	da49e <strcmp>
   d9658:	fab0 f080 	clz	r0, r0
   d965c:	0940      	lsrs	r0, r0, #5
   d965e:	bd08      	pop	{r3, pc}
   d9660:	2001      	movs	r0, #1
   d9662:	e7fc      	b.n	d965e <_ZNKSt9type_infoeqERKS_+0x22>
   d9664:	2000      	movs	r0, #0
   d9666:	e7fa      	b.n	d965e <_ZNKSt9type_infoeqERKS_+0x22>

000d9668 <nan>:
   d9668:	ed9f 0b01 	vldr	d0, [pc, #4]	; d9670 <nan+0x8>
   d966c:	4770      	bx	lr
   d966e:	bf00      	nop
   d9670:	00000000 	.word	0x00000000
   d9674:	7ff80000 	.word	0x7ff80000

000d9678 <__aeabi_drsub>:
   d9678:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d967c:	e002      	b.n	d9684 <__adddf3>
   d967e:	bf00      	nop

000d9680 <__aeabi_dsub>:
   d9680:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9684 <__adddf3>:
   d9684:	b530      	push	{r4, r5, lr}
   d9686:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d968a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d968e:	ea94 0f05 	teq	r4, r5
   d9692:	bf08      	it	eq
   d9694:	ea90 0f02 	teqeq	r0, r2
   d9698:	bf1f      	itttt	ne
   d969a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d969e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d96a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d96a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d96aa:	f000 80e2 	beq.w	d9872 <__adddf3+0x1ee>
   d96ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d96b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d96b6:	bfb8      	it	lt
   d96b8:	426d      	neglt	r5, r5
   d96ba:	dd0c      	ble.n	d96d6 <__adddf3+0x52>
   d96bc:	442c      	add	r4, r5
   d96be:	ea80 0202 	eor.w	r2, r0, r2
   d96c2:	ea81 0303 	eor.w	r3, r1, r3
   d96c6:	ea82 0000 	eor.w	r0, r2, r0
   d96ca:	ea83 0101 	eor.w	r1, r3, r1
   d96ce:	ea80 0202 	eor.w	r2, r0, r2
   d96d2:	ea81 0303 	eor.w	r3, r1, r3
   d96d6:	2d36      	cmp	r5, #54	; 0x36
   d96d8:	bf88      	it	hi
   d96da:	bd30      	pophi	{r4, r5, pc}
   d96dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d96e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d96e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d96e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d96ec:	d002      	beq.n	d96f4 <__adddf3+0x70>
   d96ee:	4240      	negs	r0, r0
   d96f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d96f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d96f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d96fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9700:	d002      	beq.n	d9708 <__adddf3+0x84>
   d9702:	4252      	negs	r2, r2
   d9704:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9708:	ea94 0f05 	teq	r4, r5
   d970c:	f000 80a7 	beq.w	d985e <__adddf3+0x1da>
   d9710:	f1a4 0401 	sub.w	r4, r4, #1
   d9714:	f1d5 0e20 	rsbs	lr, r5, #32
   d9718:	db0d      	blt.n	d9736 <__adddf3+0xb2>
   d971a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d971e:	fa22 f205 	lsr.w	r2, r2, r5
   d9722:	1880      	adds	r0, r0, r2
   d9724:	f141 0100 	adc.w	r1, r1, #0
   d9728:	fa03 f20e 	lsl.w	r2, r3, lr
   d972c:	1880      	adds	r0, r0, r2
   d972e:	fa43 f305 	asr.w	r3, r3, r5
   d9732:	4159      	adcs	r1, r3
   d9734:	e00e      	b.n	d9754 <__adddf3+0xd0>
   d9736:	f1a5 0520 	sub.w	r5, r5, #32
   d973a:	f10e 0e20 	add.w	lr, lr, #32
   d973e:	2a01      	cmp	r2, #1
   d9740:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9744:	bf28      	it	cs
   d9746:	f04c 0c02 	orrcs.w	ip, ip, #2
   d974a:	fa43 f305 	asr.w	r3, r3, r5
   d974e:	18c0      	adds	r0, r0, r3
   d9750:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9758:	d507      	bpl.n	d976a <__adddf3+0xe6>
   d975a:	f04f 0e00 	mov.w	lr, #0
   d975e:	f1dc 0c00 	rsbs	ip, ip, #0
   d9762:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9766:	eb6e 0101 	sbc.w	r1, lr, r1
   d976a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d976e:	d31b      	bcc.n	d97a8 <__adddf3+0x124>
   d9770:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9774:	d30c      	bcc.n	d9790 <__adddf3+0x10c>
   d9776:	0849      	lsrs	r1, r1, #1
   d9778:	ea5f 0030 	movs.w	r0, r0, rrx
   d977c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9780:	f104 0401 	add.w	r4, r4, #1
   d9784:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9788:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d978c:	f080 809a 	bcs.w	d98c4 <__adddf3+0x240>
   d9790:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9794:	bf08      	it	eq
   d9796:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d979a:	f150 0000 	adcs.w	r0, r0, #0
   d979e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d97a2:	ea41 0105 	orr.w	r1, r1, r5
   d97a6:	bd30      	pop	{r4, r5, pc}
   d97a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d97ac:	4140      	adcs	r0, r0
   d97ae:	eb41 0101 	adc.w	r1, r1, r1
   d97b2:	3c01      	subs	r4, #1
   d97b4:	bf28      	it	cs
   d97b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d97ba:	d2e9      	bcs.n	d9790 <__adddf3+0x10c>
   d97bc:	f091 0f00 	teq	r1, #0
   d97c0:	bf04      	itt	eq
   d97c2:	4601      	moveq	r1, r0
   d97c4:	2000      	moveq	r0, #0
   d97c6:	fab1 f381 	clz	r3, r1
   d97ca:	bf08      	it	eq
   d97cc:	3320      	addeq	r3, #32
   d97ce:	f1a3 030b 	sub.w	r3, r3, #11
   d97d2:	f1b3 0220 	subs.w	r2, r3, #32
   d97d6:	da0c      	bge.n	d97f2 <__adddf3+0x16e>
   d97d8:	320c      	adds	r2, #12
   d97da:	dd08      	ble.n	d97ee <__adddf3+0x16a>
   d97dc:	f102 0c14 	add.w	ip, r2, #20
   d97e0:	f1c2 020c 	rsb	r2, r2, #12
   d97e4:	fa01 f00c 	lsl.w	r0, r1, ip
   d97e8:	fa21 f102 	lsr.w	r1, r1, r2
   d97ec:	e00c      	b.n	d9808 <__adddf3+0x184>
   d97ee:	f102 0214 	add.w	r2, r2, #20
   d97f2:	bfd8      	it	le
   d97f4:	f1c2 0c20 	rsble	ip, r2, #32
   d97f8:	fa01 f102 	lsl.w	r1, r1, r2
   d97fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9800:	bfdc      	itt	le
   d9802:	ea41 010c 	orrle.w	r1, r1, ip
   d9806:	4090      	lslle	r0, r2
   d9808:	1ae4      	subs	r4, r4, r3
   d980a:	bfa2      	ittt	ge
   d980c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9810:	4329      	orrge	r1, r5
   d9812:	bd30      	popge	{r4, r5, pc}
   d9814:	ea6f 0404 	mvn.w	r4, r4
   d9818:	3c1f      	subs	r4, #31
   d981a:	da1c      	bge.n	d9856 <__adddf3+0x1d2>
   d981c:	340c      	adds	r4, #12
   d981e:	dc0e      	bgt.n	d983e <__adddf3+0x1ba>
   d9820:	f104 0414 	add.w	r4, r4, #20
   d9824:	f1c4 0220 	rsb	r2, r4, #32
   d9828:	fa20 f004 	lsr.w	r0, r0, r4
   d982c:	fa01 f302 	lsl.w	r3, r1, r2
   d9830:	ea40 0003 	orr.w	r0, r0, r3
   d9834:	fa21 f304 	lsr.w	r3, r1, r4
   d9838:	ea45 0103 	orr.w	r1, r5, r3
   d983c:	bd30      	pop	{r4, r5, pc}
   d983e:	f1c4 040c 	rsb	r4, r4, #12
   d9842:	f1c4 0220 	rsb	r2, r4, #32
   d9846:	fa20 f002 	lsr.w	r0, r0, r2
   d984a:	fa01 f304 	lsl.w	r3, r1, r4
   d984e:	ea40 0003 	orr.w	r0, r0, r3
   d9852:	4629      	mov	r1, r5
   d9854:	bd30      	pop	{r4, r5, pc}
   d9856:	fa21 f004 	lsr.w	r0, r1, r4
   d985a:	4629      	mov	r1, r5
   d985c:	bd30      	pop	{r4, r5, pc}
   d985e:	f094 0f00 	teq	r4, #0
   d9862:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9866:	bf06      	itte	eq
   d9868:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d986c:	3401      	addeq	r4, #1
   d986e:	3d01      	subne	r5, #1
   d9870:	e74e      	b.n	d9710 <__adddf3+0x8c>
   d9872:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9876:	bf18      	it	ne
   d9878:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d987c:	d029      	beq.n	d98d2 <__adddf3+0x24e>
   d987e:	ea94 0f05 	teq	r4, r5
   d9882:	bf08      	it	eq
   d9884:	ea90 0f02 	teqeq	r0, r2
   d9888:	d005      	beq.n	d9896 <__adddf3+0x212>
   d988a:	ea54 0c00 	orrs.w	ip, r4, r0
   d988e:	bf04      	itt	eq
   d9890:	4619      	moveq	r1, r3
   d9892:	4610      	moveq	r0, r2
   d9894:	bd30      	pop	{r4, r5, pc}
   d9896:	ea91 0f03 	teq	r1, r3
   d989a:	bf1e      	ittt	ne
   d989c:	2100      	movne	r1, #0
   d989e:	2000      	movne	r0, #0
   d98a0:	bd30      	popne	{r4, r5, pc}
   d98a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d98a6:	d105      	bne.n	d98b4 <__adddf3+0x230>
   d98a8:	0040      	lsls	r0, r0, #1
   d98aa:	4149      	adcs	r1, r1
   d98ac:	bf28      	it	cs
   d98ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d98b2:	bd30      	pop	{r4, r5, pc}
   d98b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d98b8:	bf3c      	itt	cc
   d98ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d98be:	bd30      	popcc	{r4, r5, pc}
   d98c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d98c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d98c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d98cc:	f04f 0000 	mov.w	r0, #0
   d98d0:	bd30      	pop	{r4, r5, pc}
   d98d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d98d6:	bf1a      	itte	ne
   d98d8:	4619      	movne	r1, r3
   d98da:	4610      	movne	r0, r2
   d98dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d98e0:	bf1c      	itt	ne
   d98e2:	460b      	movne	r3, r1
   d98e4:	4602      	movne	r2, r0
   d98e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d98ea:	bf06      	itte	eq
   d98ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d98f0:	ea91 0f03 	teqeq	r1, r3
   d98f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d98f8:	bd30      	pop	{r4, r5, pc}
   d98fa:	bf00      	nop

000d98fc <__aeabi_ui2d>:
   d98fc:	f090 0f00 	teq	r0, #0
   d9900:	bf04      	itt	eq
   d9902:	2100      	moveq	r1, #0
   d9904:	4770      	bxeq	lr
   d9906:	b530      	push	{r4, r5, lr}
   d9908:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d990c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9910:	f04f 0500 	mov.w	r5, #0
   d9914:	f04f 0100 	mov.w	r1, #0
   d9918:	e750      	b.n	d97bc <__adddf3+0x138>
   d991a:	bf00      	nop

000d991c <__aeabi_i2d>:
   d991c:	f090 0f00 	teq	r0, #0
   d9920:	bf04      	itt	eq
   d9922:	2100      	moveq	r1, #0
   d9924:	4770      	bxeq	lr
   d9926:	b530      	push	{r4, r5, lr}
   d9928:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d992c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9930:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9934:	bf48      	it	mi
   d9936:	4240      	negmi	r0, r0
   d9938:	f04f 0100 	mov.w	r1, #0
   d993c:	e73e      	b.n	d97bc <__adddf3+0x138>
   d993e:	bf00      	nop

000d9940 <__aeabi_f2d>:
   d9940:	0042      	lsls	r2, r0, #1
   d9942:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9946:	ea4f 0131 	mov.w	r1, r1, rrx
   d994a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d994e:	bf1f      	itttt	ne
   d9950:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9954:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9958:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d995c:	4770      	bxne	lr
   d995e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9962:	bf08      	it	eq
   d9964:	4770      	bxeq	lr
   d9966:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d996a:	bf04      	itt	eq
   d996c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9970:	4770      	bxeq	lr
   d9972:	b530      	push	{r4, r5, lr}
   d9974:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d997c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9980:	e71c      	b.n	d97bc <__adddf3+0x138>
   d9982:	bf00      	nop

000d9984 <__aeabi_ul2d>:
   d9984:	ea50 0201 	orrs.w	r2, r0, r1
   d9988:	bf08      	it	eq
   d998a:	4770      	bxeq	lr
   d998c:	b530      	push	{r4, r5, lr}
   d998e:	f04f 0500 	mov.w	r5, #0
   d9992:	e00a      	b.n	d99aa <__aeabi_l2d+0x16>

000d9994 <__aeabi_l2d>:
   d9994:	ea50 0201 	orrs.w	r2, r0, r1
   d9998:	bf08      	it	eq
   d999a:	4770      	bxeq	lr
   d999c:	b530      	push	{r4, r5, lr}
   d999e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d99a2:	d502      	bpl.n	d99aa <__aeabi_l2d+0x16>
   d99a4:	4240      	negs	r0, r0
   d99a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d99aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d99ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d99b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d99b6:	f43f aed8 	beq.w	d976a <__adddf3+0xe6>
   d99ba:	f04f 0203 	mov.w	r2, #3
   d99be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d99c2:	bf18      	it	ne
   d99c4:	3203      	addne	r2, #3
   d99c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d99ca:	bf18      	it	ne
   d99cc:	3203      	addne	r2, #3
   d99ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d99d2:	f1c2 0320 	rsb	r3, r2, #32
   d99d6:	fa00 fc03 	lsl.w	ip, r0, r3
   d99da:	fa20 f002 	lsr.w	r0, r0, r2
   d99de:	fa01 fe03 	lsl.w	lr, r1, r3
   d99e2:	ea40 000e 	orr.w	r0, r0, lr
   d99e6:	fa21 f102 	lsr.w	r1, r1, r2
   d99ea:	4414      	add	r4, r2
   d99ec:	e6bd      	b.n	d976a <__adddf3+0xe6>
   d99ee:	bf00      	nop

000d99f0 <__aeabi_dmul>:
   d99f0:	b570      	push	{r4, r5, r6, lr}
   d99f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d99f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d99fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d99fe:	bf1d      	ittte	ne
   d9a00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9a04:	ea94 0f0c 	teqne	r4, ip
   d9a08:	ea95 0f0c 	teqne	r5, ip
   d9a0c:	f000 f8de 	bleq	d9bcc <__aeabi_dmul+0x1dc>
   d9a10:	442c      	add	r4, r5
   d9a12:	ea81 0603 	eor.w	r6, r1, r3
   d9a16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9a1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9a1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9a22:	bf18      	it	ne
   d9a24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9a30:	d038      	beq.n	d9aa4 <__aeabi_dmul+0xb4>
   d9a32:	fba0 ce02 	umull	ip, lr, r0, r2
   d9a36:	f04f 0500 	mov.w	r5, #0
   d9a3a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9a3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9a42:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9a46:	f04f 0600 	mov.w	r6, #0
   d9a4a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9a4e:	f09c 0f00 	teq	ip, #0
   d9a52:	bf18      	it	ne
   d9a54:	f04e 0e01 	orrne.w	lr, lr, #1
   d9a58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9a5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9a60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9a64:	d204      	bcs.n	d9a70 <__aeabi_dmul+0x80>
   d9a66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9a6a:	416d      	adcs	r5, r5
   d9a6c:	eb46 0606 	adc.w	r6, r6, r6
   d9a70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9a74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9a78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9a7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9a80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9a84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9a88:	bf88      	it	hi
   d9a8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9a8e:	d81e      	bhi.n	d9ace <__aeabi_dmul+0xde>
   d9a90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9a94:	bf08      	it	eq
   d9a96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9a9a:	f150 0000 	adcs.w	r0, r0, #0
   d9a9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9aa2:	bd70      	pop	{r4, r5, r6, pc}
   d9aa4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9aa8:	ea46 0101 	orr.w	r1, r6, r1
   d9aac:	ea40 0002 	orr.w	r0, r0, r2
   d9ab0:	ea81 0103 	eor.w	r1, r1, r3
   d9ab4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9ab8:	bfc2      	ittt	gt
   d9aba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9abe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9ac2:	bd70      	popgt	{r4, r5, r6, pc}
   d9ac4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9ac8:	f04f 0e00 	mov.w	lr, #0
   d9acc:	3c01      	subs	r4, #1
   d9ace:	f300 80ab 	bgt.w	d9c28 <__aeabi_dmul+0x238>
   d9ad2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9ad6:	bfde      	ittt	le
   d9ad8:	2000      	movle	r0, #0
   d9ada:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9ade:	bd70      	pople	{r4, r5, r6, pc}
   d9ae0:	f1c4 0400 	rsb	r4, r4, #0
   d9ae4:	3c20      	subs	r4, #32
   d9ae6:	da35      	bge.n	d9b54 <__aeabi_dmul+0x164>
   d9ae8:	340c      	adds	r4, #12
   d9aea:	dc1b      	bgt.n	d9b24 <__aeabi_dmul+0x134>
   d9aec:	f104 0414 	add.w	r4, r4, #20
   d9af0:	f1c4 0520 	rsb	r5, r4, #32
   d9af4:	fa00 f305 	lsl.w	r3, r0, r5
   d9af8:	fa20 f004 	lsr.w	r0, r0, r4
   d9afc:	fa01 f205 	lsl.w	r2, r1, r5
   d9b00:	ea40 0002 	orr.w	r0, r0, r2
   d9b04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9b08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9b0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9b10:	fa21 f604 	lsr.w	r6, r1, r4
   d9b14:	eb42 0106 	adc.w	r1, r2, r6
   d9b18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9b1c:	bf08      	it	eq
   d9b1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9b22:	bd70      	pop	{r4, r5, r6, pc}
   d9b24:	f1c4 040c 	rsb	r4, r4, #12
   d9b28:	f1c4 0520 	rsb	r5, r4, #32
   d9b2c:	fa00 f304 	lsl.w	r3, r0, r4
   d9b30:	fa20 f005 	lsr.w	r0, r0, r5
   d9b34:	fa01 f204 	lsl.w	r2, r1, r4
   d9b38:	ea40 0002 	orr.w	r0, r0, r2
   d9b3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9b44:	f141 0100 	adc.w	r1, r1, #0
   d9b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9b4c:	bf08      	it	eq
   d9b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9b52:	bd70      	pop	{r4, r5, r6, pc}
   d9b54:	f1c4 0520 	rsb	r5, r4, #32
   d9b58:	fa00 f205 	lsl.w	r2, r0, r5
   d9b5c:	ea4e 0e02 	orr.w	lr, lr, r2
   d9b60:	fa20 f304 	lsr.w	r3, r0, r4
   d9b64:	fa01 f205 	lsl.w	r2, r1, r5
   d9b68:	ea43 0302 	orr.w	r3, r3, r2
   d9b6c:	fa21 f004 	lsr.w	r0, r1, r4
   d9b70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9b74:	fa21 f204 	lsr.w	r2, r1, r4
   d9b78:	ea20 0002 	bic.w	r0, r0, r2
   d9b7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9b80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9b84:	bf08      	it	eq
   d9b86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9b8a:	bd70      	pop	{r4, r5, r6, pc}
   d9b8c:	f094 0f00 	teq	r4, #0
   d9b90:	d10f      	bne.n	d9bb2 <__aeabi_dmul+0x1c2>
   d9b92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9b96:	0040      	lsls	r0, r0, #1
   d9b98:	eb41 0101 	adc.w	r1, r1, r1
   d9b9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9ba0:	bf08      	it	eq
   d9ba2:	3c01      	subeq	r4, #1
   d9ba4:	d0f7      	beq.n	d9b96 <__aeabi_dmul+0x1a6>
   d9ba6:	ea41 0106 	orr.w	r1, r1, r6
   d9baa:	f095 0f00 	teq	r5, #0
   d9bae:	bf18      	it	ne
   d9bb0:	4770      	bxne	lr
   d9bb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9bb6:	0052      	lsls	r2, r2, #1
   d9bb8:	eb43 0303 	adc.w	r3, r3, r3
   d9bbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9bc0:	bf08      	it	eq
   d9bc2:	3d01      	subeq	r5, #1
   d9bc4:	d0f7      	beq.n	d9bb6 <__aeabi_dmul+0x1c6>
   d9bc6:	ea43 0306 	orr.w	r3, r3, r6
   d9bca:	4770      	bx	lr
   d9bcc:	ea94 0f0c 	teq	r4, ip
   d9bd0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9bd4:	bf18      	it	ne
   d9bd6:	ea95 0f0c 	teqne	r5, ip
   d9bda:	d00c      	beq.n	d9bf6 <__aeabi_dmul+0x206>
   d9bdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9be0:	bf18      	it	ne
   d9be2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9be6:	d1d1      	bne.n	d9b8c <__aeabi_dmul+0x19c>
   d9be8:	ea81 0103 	eor.w	r1, r1, r3
   d9bec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9bf0:	f04f 0000 	mov.w	r0, #0
   d9bf4:	bd70      	pop	{r4, r5, r6, pc}
   d9bf6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9bfa:	bf06      	itte	eq
   d9bfc:	4610      	moveq	r0, r2
   d9bfe:	4619      	moveq	r1, r3
   d9c00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9c04:	d019      	beq.n	d9c3a <__aeabi_dmul+0x24a>
   d9c06:	ea94 0f0c 	teq	r4, ip
   d9c0a:	d102      	bne.n	d9c12 <__aeabi_dmul+0x222>
   d9c0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9c10:	d113      	bne.n	d9c3a <__aeabi_dmul+0x24a>
   d9c12:	ea95 0f0c 	teq	r5, ip
   d9c16:	d105      	bne.n	d9c24 <__aeabi_dmul+0x234>
   d9c18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9c1c:	bf1c      	itt	ne
   d9c1e:	4610      	movne	r0, r2
   d9c20:	4619      	movne	r1, r3
   d9c22:	d10a      	bne.n	d9c3a <__aeabi_dmul+0x24a>
   d9c24:	ea81 0103 	eor.w	r1, r1, r3
   d9c28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9c2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9c30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9c34:	f04f 0000 	mov.w	r0, #0
   d9c38:	bd70      	pop	{r4, r5, r6, pc}
   d9c3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9c3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9c42:	bd70      	pop	{r4, r5, r6, pc}

000d9c44 <__aeabi_ddiv>:
   d9c44:	b570      	push	{r4, r5, r6, lr}
   d9c46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9c4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9c4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9c52:	bf1d      	ittte	ne
   d9c54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9c58:	ea94 0f0c 	teqne	r4, ip
   d9c5c:	ea95 0f0c 	teqne	r5, ip
   d9c60:	f000 f8a7 	bleq	d9db2 <__aeabi_ddiv+0x16e>
   d9c64:	eba4 0405 	sub.w	r4, r4, r5
   d9c68:	ea81 0e03 	eor.w	lr, r1, r3
   d9c6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9c70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9c74:	f000 8088 	beq.w	d9d88 <__aeabi_ddiv+0x144>
   d9c78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9c7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9c80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9c84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9c88:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9c8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9c90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9c94:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9c98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9c9c:	429d      	cmp	r5, r3
   d9c9e:	bf08      	it	eq
   d9ca0:	4296      	cmpeq	r6, r2
   d9ca2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9ca6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9caa:	d202      	bcs.n	d9cb2 <__aeabi_ddiv+0x6e>
   d9cac:	085b      	lsrs	r3, r3, #1
   d9cae:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cb2:	1ab6      	subs	r6, r6, r2
   d9cb4:	eb65 0503 	sbc.w	r5, r5, r3
   d9cb8:	085b      	lsrs	r3, r3, #1
   d9cba:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9cc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9cc6:	ebb6 0e02 	subs.w	lr, r6, r2
   d9cca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9cce:	bf22      	ittt	cs
   d9cd0:	1ab6      	subcs	r6, r6, r2
   d9cd2:	4675      	movcs	r5, lr
   d9cd4:	ea40 000c 	orrcs.w	r0, r0, ip
   d9cd8:	085b      	lsrs	r3, r3, #1
   d9cda:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cde:	ebb6 0e02 	subs.w	lr, r6, r2
   d9ce2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9ce6:	bf22      	ittt	cs
   d9ce8:	1ab6      	subcs	r6, r6, r2
   d9cea:	4675      	movcs	r5, lr
   d9cec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9cf0:	085b      	lsrs	r3, r3, #1
   d9cf2:	ea4f 0232 	mov.w	r2, r2, rrx
   d9cf6:	ebb6 0e02 	subs.w	lr, r6, r2
   d9cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9cfe:	bf22      	ittt	cs
   d9d00:	1ab6      	subcs	r6, r6, r2
   d9d02:	4675      	movcs	r5, lr
   d9d04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9d08:	085b      	lsrs	r3, r3, #1
   d9d0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9d0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9d12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9d16:	bf22      	ittt	cs
   d9d18:	1ab6      	subcs	r6, r6, r2
   d9d1a:	4675      	movcs	r5, lr
   d9d1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9d20:	ea55 0e06 	orrs.w	lr, r5, r6
   d9d24:	d018      	beq.n	d9d58 <__aeabi_ddiv+0x114>
   d9d26:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9d2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9d2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9d32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9d36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9d3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9d3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9d42:	d1c0      	bne.n	d9cc6 <__aeabi_ddiv+0x82>
   d9d44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9d48:	d10b      	bne.n	d9d62 <__aeabi_ddiv+0x11e>
   d9d4a:	ea41 0100 	orr.w	r1, r1, r0
   d9d4e:	f04f 0000 	mov.w	r0, #0
   d9d52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9d56:	e7b6      	b.n	d9cc6 <__aeabi_ddiv+0x82>
   d9d58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9d5c:	bf04      	itt	eq
   d9d5e:	4301      	orreq	r1, r0
   d9d60:	2000      	moveq	r0, #0
   d9d62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9d66:	bf88      	it	hi
   d9d68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9d6c:	f63f aeaf 	bhi.w	d9ace <__aeabi_dmul+0xde>
   d9d70:	ebb5 0c03 	subs.w	ip, r5, r3
   d9d74:	bf04      	itt	eq
   d9d76:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9d7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9d7e:	f150 0000 	adcs.w	r0, r0, #0
   d9d82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9d86:	bd70      	pop	{r4, r5, r6, pc}
   d9d88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9d8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9d90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9d94:	bfc2      	ittt	gt
   d9d96:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9d9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9d9e:	bd70      	popgt	{r4, r5, r6, pc}
   d9da0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9da4:	f04f 0e00 	mov.w	lr, #0
   d9da8:	3c01      	subs	r4, #1
   d9daa:	e690      	b.n	d9ace <__aeabi_dmul+0xde>
   d9dac:	ea45 0e06 	orr.w	lr, r5, r6
   d9db0:	e68d      	b.n	d9ace <__aeabi_dmul+0xde>
   d9db2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9db6:	ea94 0f0c 	teq	r4, ip
   d9dba:	bf08      	it	eq
   d9dbc:	ea95 0f0c 	teqeq	r5, ip
   d9dc0:	f43f af3b 	beq.w	d9c3a <__aeabi_dmul+0x24a>
   d9dc4:	ea94 0f0c 	teq	r4, ip
   d9dc8:	d10a      	bne.n	d9de0 <__aeabi_ddiv+0x19c>
   d9dca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9dce:	f47f af34 	bne.w	d9c3a <__aeabi_dmul+0x24a>
   d9dd2:	ea95 0f0c 	teq	r5, ip
   d9dd6:	f47f af25 	bne.w	d9c24 <__aeabi_dmul+0x234>
   d9dda:	4610      	mov	r0, r2
   d9ddc:	4619      	mov	r1, r3
   d9dde:	e72c      	b.n	d9c3a <__aeabi_dmul+0x24a>
   d9de0:	ea95 0f0c 	teq	r5, ip
   d9de4:	d106      	bne.n	d9df4 <__aeabi_ddiv+0x1b0>
   d9de6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9dea:	f43f aefd 	beq.w	d9be8 <__aeabi_dmul+0x1f8>
   d9dee:	4610      	mov	r0, r2
   d9df0:	4619      	mov	r1, r3
   d9df2:	e722      	b.n	d9c3a <__aeabi_dmul+0x24a>
   d9df4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9df8:	bf18      	it	ne
   d9dfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9dfe:	f47f aec5 	bne.w	d9b8c <__aeabi_dmul+0x19c>
   d9e02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9e06:	f47f af0d 	bne.w	d9c24 <__aeabi_dmul+0x234>
   d9e0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9e0e:	f47f aeeb 	bne.w	d9be8 <__aeabi_dmul+0x1f8>
   d9e12:	e712      	b.n	d9c3a <__aeabi_dmul+0x24a>

000d9e14 <__gedf2>:
   d9e14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9e18:	e006      	b.n	d9e28 <__cmpdf2+0x4>
   d9e1a:	bf00      	nop

000d9e1c <__ledf2>:
   d9e1c:	f04f 0c01 	mov.w	ip, #1
   d9e20:	e002      	b.n	d9e28 <__cmpdf2+0x4>
   d9e22:	bf00      	nop

000d9e24 <__cmpdf2>:
   d9e24:	f04f 0c01 	mov.w	ip, #1
   d9e28:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9e2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9e30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9e34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9e38:	bf18      	it	ne
   d9e3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9e3e:	d01b      	beq.n	d9e78 <__cmpdf2+0x54>
   d9e40:	b001      	add	sp, #4
   d9e42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9e46:	bf0c      	ite	eq
   d9e48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9e4c:	ea91 0f03 	teqne	r1, r3
   d9e50:	bf02      	ittt	eq
   d9e52:	ea90 0f02 	teqeq	r0, r2
   d9e56:	2000      	moveq	r0, #0
   d9e58:	4770      	bxeq	lr
   d9e5a:	f110 0f00 	cmn.w	r0, #0
   d9e5e:	ea91 0f03 	teq	r1, r3
   d9e62:	bf58      	it	pl
   d9e64:	4299      	cmppl	r1, r3
   d9e66:	bf08      	it	eq
   d9e68:	4290      	cmpeq	r0, r2
   d9e6a:	bf2c      	ite	cs
   d9e6c:	17d8      	asrcs	r0, r3, #31
   d9e6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9e72:	f040 0001 	orr.w	r0, r0, #1
   d9e76:	4770      	bx	lr
   d9e78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9e7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9e80:	d102      	bne.n	d9e88 <__cmpdf2+0x64>
   d9e82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9e86:	d107      	bne.n	d9e98 <__cmpdf2+0x74>
   d9e88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9e8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9e90:	d1d6      	bne.n	d9e40 <__cmpdf2+0x1c>
   d9e92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9e96:	d0d3      	beq.n	d9e40 <__cmpdf2+0x1c>
   d9e98:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9e9c:	4770      	bx	lr
   d9e9e:	bf00      	nop

000d9ea0 <__aeabi_cdrcmple>:
   d9ea0:	4684      	mov	ip, r0
   d9ea2:	4610      	mov	r0, r2
   d9ea4:	4662      	mov	r2, ip
   d9ea6:	468c      	mov	ip, r1
   d9ea8:	4619      	mov	r1, r3
   d9eaa:	4663      	mov	r3, ip
   d9eac:	e000      	b.n	d9eb0 <__aeabi_cdcmpeq>
   d9eae:	bf00      	nop

000d9eb0 <__aeabi_cdcmpeq>:
   d9eb0:	b501      	push	{r0, lr}
   d9eb2:	f7ff ffb7 	bl	d9e24 <__cmpdf2>
   d9eb6:	2800      	cmp	r0, #0
   d9eb8:	bf48      	it	mi
   d9eba:	f110 0f00 	cmnmi.w	r0, #0
   d9ebe:	bd01      	pop	{r0, pc}

000d9ec0 <__aeabi_dcmpeq>:
   d9ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ec4:	f7ff fff4 	bl	d9eb0 <__aeabi_cdcmpeq>
   d9ec8:	bf0c      	ite	eq
   d9eca:	2001      	moveq	r0, #1
   d9ecc:	2000      	movne	r0, #0
   d9ece:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ed2:	bf00      	nop

000d9ed4 <__aeabi_dcmplt>:
   d9ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ed8:	f7ff ffea 	bl	d9eb0 <__aeabi_cdcmpeq>
   d9edc:	bf34      	ite	cc
   d9ede:	2001      	movcc	r0, #1
   d9ee0:	2000      	movcs	r0, #0
   d9ee2:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ee6:	bf00      	nop

000d9ee8 <__aeabi_dcmple>:
   d9ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9eec:	f7ff ffe0 	bl	d9eb0 <__aeabi_cdcmpeq>
   d9ef0:	bf94      	ite	ls
   d9ef2:	2001      	movls	r0, #1
   d9ef4:	2000      	movhi	r0, #0
   d9ef6:	f85d fb08 	ldr.w	pc, [sp], #8
   d9efa:	bf00      	nop

000d9efc <__aeabi_dcmpge>:
   d9efc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9f00:	f7ff ffce 	bl	d9ea0 <__aeabi_cdrcmple>
   d9f04:	bf94      	ite	ls
   d9f06:	2001      	movls	r0, #1
   d9f08:	2000      	movhi	r0, #0
   d9f0a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9f0e:	bf00      	nop

000d9f10 <__aeabi_dcmpgt>:
   d9f10:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9f14:	f7ff ffc4 	bl	d9ea0 <__aeabi_cdrcmple>
   d9f18:	bf34      	ite	cc
   d9f1a:	2001      	movcc	r0, #1
   d9f1c:	2000      	movcs	r0, #0
   d9f1e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9f22:	bf00      	nop

000d9f24 <__aeabi_d2iz>:
   d9f24:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9f28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9f2c:	d215      	bcs.n	d9f5a <__aeabi_d2iz+0x36>
   d9f2e:	d511      	bpl.n	d9f54 <__aeabi_d2iz+0x30>
   d9f30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9f34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9f38:	d912      	bls.n	d9f60 <__aeabi_d2iz+0x3c>
   d9f3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9f42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9f46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9f4a:	fa23 f002 	lsr.w	r0, r3, r2
   d9f4e:	bf18      	it	ne
   d9f50:	4240      	negne	r0, r0
   d9f52:	4770      	bx	lr
   d9f54:	f04f 0000 	mov.w	r0, #0
   d9f58:	4770      	bx	lr
   d9f5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9f5e:	d105      	bne.n	d9f6c <__aeabi_d2iz+0x48>
   d9f60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9f64:	bf08      	it	eq
   d9f66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9f6a:	4770      	bx	lr
   d9f6c:	f04f 0000 	mov.w	r0, #0
   d9f70:	4770      	bx	lr
   d9f72:	bf00      	nop

000d9f74 <__aeabi_d2uiz>:
   d9f74:	004a      	lsls	r2, r1, #1
   d9f76:	d211      	bcs.n	d9f9c <__aeabi_d2uiz+0x28>
   d9f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9f7c:	d211      	bcs.n	d9fa2 <__aeabi_d2uiz+0x2e>
   d9f7e:	d50d      	bpl.n	d9f9c <__aeabi_d2uiz+0x28>
   d9f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9f88:	d40e      	bmi.n	d9fa8 <__aeabi_d2uiz+0x34>
   d9f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9f96:	fa23 f002 	lsr.w	r0, r3, r2
   d9f9a:	4770      	bx	lr
   d9f9c:	f04f 0000 	mov.w	r0, #0
   d9fa0:	4770      	bx	lr
   d9fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9fa6:	d102      	bne.n	d9fae <__aeabi_d2uiz+0x3a>
   d9fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9fac:	4770      	bx	lr
   d9fae:	f04f 0000 	mov.w	r0, #0
   d9fb2:	4770      	bx	lr

000d9fb4 <__aeabi_d2f>:
   d9fb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9fb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9fbc:	bf24      	itt	cs
   d9fbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9fc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9fc6:	d90d      	bls.n	d9fe4 <__aeabi_d2f+0x30>
   d9fc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9fcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9fd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9fd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9fd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9fdc:	bf08      	it	eq
   d9fde:	f020 0001 	biceq.w	r0, r0, #1
   d9fe2:	4770      	bx	lr
   d9fe4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9fe8:	d121      	bne.n	da02e <__aeabi_d2f+0x7a>
   d9fea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9fee:	bfbc      	itt	lt
   d9ff0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9ff4:	4770      	bxlt	lr
   d9ff6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9ffa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9ffe:	f1c2 0218 	rsb	r2, r2, #24
   da002:	f1c2 0c20 	rsb	ip, r2, #32
   da006:	fa10 f30c 	lsls.w	r3, r0, ip
   da00a:	fa20 f002 	lsr.w	r0, r0, r2
   da00e:	bf18      	it	ne
   da010:	f040 0001 	orrne.w	r0, r0, #1
   da014:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da018:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da01c:	fa03 fc0c 	lsl.w	ip, r3, ip
   da020:	ea40 000c 	orr.w	r0, r0, ip
   da024:	fa23 f302 	lsr.w	r3, r3, r2
   da028:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da02c:	e7cc      	b.n	d9fc8 <__aeabi_d2f+0x14>
   da02e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da032:	d107      	bne.n	da044 <__aeabi_d2f+0x90>
   da034:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da038:	bf1e      	ittt	ne
   da03a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da03e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da042:	4770      	bxne	lr
   da044:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da048:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da04c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da050:	4770      	bx	lr
   da052:	bf00      	nop

000da054 <__aeabi_uldivmod>:
   da054:	b953      	cbnz	r3, da06c <__aeabi_uldivmod+0x18>
   da056:	b94a      	cbnz	r2, da06c <__aeabi_uldivmod+0x18>
   da058:	2900      	cmp	r1, #0
   da05a:	bf08      	it	eq
   da05c:	2800      	cmpeq	r0, #0
   da05e:	bf1c      	itt	ne
   da060:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   da064:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   da068:	f000 b98c 	b.w	da384 <__aeabi_idiv0>
   da06c:	f1ad 0c08 	sub.w	ip, sp, #8
   da070:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da074:	f000 f824 	bl	da0c0 <__udivmoddi4>
   da078:	f8dd e004 	ldr.w	lr, [sp, #4]
   da07c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da080:	b004      	add	sp, #16
   da082:	4770      	bx	lr

000da084 <__aeabi_d2ulz>:
   da084:	b5d0      	push	{r4, r6, r7, lr}
   da086:	4b0c      	ldr	r3, [pc, #48]	; (da0b8 <__aeabi_d2ulz+0x34>)
   da088:	2200      	movs	r2, #0
   da08a:	4606      	mov	r6, r0
   da08c:	460f      	mov	r7, r1
   da08e:	f7ff fcaf 	bl	d99f0 <__aeabi_dmul>
   da092:	f7ff ff6f 	bl	d9f74 <__aeabi_d2uiz>
   da096:	4604      	mov	r4, r0
   da098:	f7ff fc30 	bl	d98fc <__aeabi_ui2d>
   da09c:	4b07      	ldr	r3, [pc, #28]	; (da0bc <__aeabi_d2ulz+0x38>)
   da09e:	2200      	movs	r2, #0
   da0a0:	f7ff fca6 	bl	d99f0 <__aeabi_dmul>
   da0a4:	4602      	mov	r2, r0
   da0a6:	460b      	mov	r3, r1
   da0a8:	4630      	mov	r0, r6
   da0aa:	4639      	mov	r1, r7
   da0ac:	f7ff fae8 	bl	d9680 <__aeabi_dsub>
   da0b0:	f7ff ff60 	bl	d9f74 <__aeabi_d2uiz>
   da0b4:	4621      	mov	r1, r4
   da0b6:	bdd0      	pop	{r4, r6, r7, pc}
   da0b8:	3df00000 	.word	0x3df00000
   da0bc:	41f00000 	.word	0x41f00000

000da0c0 <__udivmoddi4>:
   da0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da0c4:	9d08      	ldr	r5, [sp, #32]
   da0c6:	4604      	mov	r4, r0
   da0c8:	468c      	mov	ip, r1
   da0ca:	2b00      	cmp	r3, #0
   da0cc:	f040 8083 	bne.w	da1d6 <__udivmoddi4+0x116>
   da0d0:	428a      	cmp	r2, r1
   da0d2:	4617      	mov	r7, r2
   da0d4:	d947      	bls.n	da166 <__udivmoddi4+0xa6>
   da0d6:	fab2 f282 	clz	r2, r2
   da0da:	b142      	cbz	r2, da0ee <__udivmoddi4+0x2e>
   da0dc:	f1c2 0020 	rsb	r0, r2, #32
   da0e0:	fa24 f000 	lsr.w	r0, r4, r0
   da0e4:	4091      	lsls	r1, r2
   da0e6:	4097      	lsls	r7, r2
   da0e8:	ea40 0c01 	orr.w	ip, r0, r1
   da0ec:	4094      	lsls	r4, r2
   da0ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da0f2:	0c23      	lsrs	r3, r4, #16
   da0f4:	fbbc f6f8 	udiv	r6, ip, r8
   da0f8:	fa1f fe87 	uxth.w	lr, r7
   da0fc:	fb08 c116 	mls	r1, r8, r6, ip
   da100:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da104:	fb06 f10e 	mul.w	r1, r6, lr
   da108:	4299      	cmp	r1, r3
   da10a:	d909      	bls.n	da120 <__udivmoddi4+0x60>
   da10c:	18fb      	adds	r3, r7, r3
   da10e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   da112:	f080 8119 	bcs.w	da348 <__udivmoddi4+0x288>
   da116:	4299      	cmp	r1, r3
   da118:	f240 8116 	bls.w	da348 <__udivmoddi4+0x288>
   da11c:	3e02      	subs	r6, #2
   da11e:	443b      	add	r3, r7
   da120:	1a5b      	subs	r3, r3, r1
   da122:	b2a4      	uxth	r4, r4
   da124:	fbb3 f0f8 	udiv	r0, r3, r8
   da128:	fb08 3310 	mls	r3, r8, r0, r3
   da12c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   da130:	fb00 fe0e 	mul.w	lr, r0, lr
   da134:	45a6      	cmp	lr, r4
   da136:	d909      	bls.n	da14c <__udivmoddi4+0x8c>
   da138:	193c      	adds	r4, r7, r4
   da13a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da13e:	f080 8105 	bcs.w	da34c <__udivmoddi4+0x28c>
   da142:	45a6      	cmp	lr, r4
   da144:	f240 8102 	bls.w	da34c <__udivmoddi4+0x28c>
   da148:	3802      	subs	r0, #2
   da14a:	443c      	add	r4, r7
   da14c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   da150:	eba4 040e 	sub.w	r4, r4, lr
   da154:	2600      	movs	r6, #0
   da156:	b11d      	cbz	r5, da160 <__udivmoddi4+0xa0>
   da158:	40d4      	lsrs	r4, r2
   da15a:	2300      	movs	r3, #0
   da15c:	e9c5 4300 	strd	r4, r3, [r5]
   da160:	4631      	mov	r1, r6
   da162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da166:	b902      	cbnz	r2, da16a <__udivmoddi4+0xaa>
   da168:	deff      	udf	#255	; 0xff
   da16a:	fab2 f282 	clz	r2, r2
   da16e:	2a00      	cmp	r2, #0
   da170:	d150      	bne.n	da214 <__udivmoddi4+0x154>
   da172:	1bcb      	subs	r3, r1, r7
   da174:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da178:	fa1f f887 	uxth.w	r8, r7
   da17c:	2601      	movs	r6, #1
   da17e:	fbb3 fcfe 	udiv	ip, r3, lr
   da182:	0c21      	lsrs	r1, r4, #16
   da184:	fb0e 331c 	mls	r3, lr, ip, r3
   da188:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da18c:	fb08 f30c 	mul.w	r3, r8, ip
   da190:	428b      	cmp	r3, r1
   da192:	d907      	bls.n	da1a4 <__udivmoddi4+0xe4>
   da194:	1879      	adds	r1, r7, r1
   da196:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   da19a:	d202      	bcs.n	da1a2 <__udivmoddi4+0xe2>
   da19c:	428b      	cmp	r3, r1
   da19e:	f200 80e9 	bhi.w	da374 <__udivmoddi4+0x2b4>
   da1a2:	4684      	mov	ip, r0
   da1a4:	1ac9      	subs	r1, r1, r3
   da1a6:	b2a3      	uxth	r3, r4
   da1a8:	fbb1 f0fe 	udiv	r0, r1, lr
   da1ac:	fb0e 1110 	mls	r1, lr, r0, r1
   da1b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   da1b4:	fb08 f800 	mul.w	r8, r8, r0
   da1b8:	45a0      	cmp	r8, r4
   da1ba:	d907      	bls.n	da1cc <__udivmoddi4+0x10c>
   da1bc:	193c      	adds	r4, r7, r4
   da1be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da1c2:	d202      	bcs.n	da1ca <__udivmoddi4+0x10a>
   da1c4:	45a0      	cmp	r8, r4
   da1c6:	f200 80d9 	bhi.w	da37c <__udivmoddi4+0x2bc>
   da1ca:	4618      	mov	r0, r3
   da1cc:	eba4 0408 	sub.w	r4, r4, r8
   da1d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   da1d4:	e7bf      	b.n	da156 <__udivmoddi4+0x96>
   da1d6:	428b      	cmp	r3, r1
   da1d8:	d909      	bls.n	da1ee <__udivmoddi4+0x12e>
   da1da:	2d00      	cmp	r5, #0
   da1dc:	f000 80b1 	beq.w	da342 <__udivmoddi4+0x282>
   da1e0:	2600      	movs	r6, #0
   da1e2:	e9c5 0100 	strd	r0, r1, [r5]
   da1e6:	4630      	mov	r0, r6
   da1e8:	4631      	mov	r1, r6
   da1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da1ee:	fab3 f683 	clz	r6, r3
   da1f2:	2e00      	cmp	r6, #0
   da1f4:	d14a      	bne.n	da28c <__udivmoddi4+0x1cc>
   da1f6:	428b      	cmp	r3, r1
   da1f8:	d302      	bcc.n	da200 <__udivmoddi4+0x140>
   da1fa:	4282      	cmp	r2, r0
   da1fc:	f200 80b8 	bhi.w	da370 <__udivmoddi4+0x2b0>
   da200:	1a84      	subs	r4, r0, r2
   da202:	eb61 0103 	sbc.w	r1, r1, r3
   da206:	2001      	movs	r0, #1
   da208:	468c      	mov	ip, r1
   da20a:	2d00      	cmp	r5, #0
   da20c:	d0a8      	beq.n	da160 <__udivmoddi4+0xa0>
   da20e:	e9c5 4c00 	strd	r4, ip, [r5]
   da212:	e7a5      	b.n	da160 <__udivmoddi4+0xa0>
   da214:	f1c2 0320 	rsb	r3, r2, #32
   da218:	fa20 f603 	lsr.w	r6, r0, r3
   da21c:	4097      	lsls	r7, r2
   da21e:	fa01 f002 	lsl.w	r0, r1, r2
   da222:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da226:	40d9      	lsrs	r1, r3
   da228:	4330      	orrs	r0, r6
   da22a:	0c03      	lsrs	r3, r0, #16
   da22c:	fbb1 f6fe 	udiv	r6, r1, lr
   da230:	fa1f f887 	uxth.w	r8, r7
   da234:	fb0e 1116 	mls	r1, lr, r6, r1
   da238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da23c:	fb06 f108 	mul.w	r1, r6, r8
   da240:	4299      	cmp	r1, r3
   da242:	fa04 f402 	lsl.w	r4, r4, r2
   da246:	d909      	bls.n	da25c <__udivmoddi4+0x19c>
   da248:	18fb      	adds	r3, r7, r3
   da24a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   da24e:	f080 808d 	bcs.w	da36c <__udivmoddi4+0x2ac>
   da252:	4299      	cmp	r1, r3
   da254:	f240 808a 	bls.w	da36c <__udivmoddi4+0x2ac>
   da258:	3e02      	subs	r6, #2
   da25a:	443b      	add	r3, r7
   da25c:	1a5b      	subs	r3, r3, r1
   da25e:	b281      	uxth	r1, r0
   da260:	fbb3 f0fe 	udiv	r0, r3, lr
   da264:	fb0e 3310 	mls	r3, lr, r0, r3
   da268:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da26c:	fb00 f308 	mul.w	r3, r0, r8
   da270:	428b      	cmp	r3, r1
   da272:	d907      	bls.n	da284 <__udivmoddi4+0x1c4>
   da274:	1879      	adds	r1, r7, r1
   da276:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   da27a:	d273      	bcs.n	da364 <__udivmoddi4+0x2a4>
   da27c:	428b      	cmp	r3, r1
   da27e:	d971      	bls.n	da364 <__udivmoddi4+0x2a4>
   da280:	3802      	subs	r0, #2
   da282:	4439      	add	r1, r7
   da284:	1acb      	subs	r3, r1, r3
   da286:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da28a:	e778      	b.n	da17e <__udivmoddi4+0xbe>
   da28c:	f1c6 0c20 	rsb	ip, r6, #32
   da290:	fa03 f406 	lsl.w	r4, r3, r6
   da294:	fa22 f30c 	lsr.w	r3, r2, ip
   da298:	431c      	orrs	r4, r3
   da29a:	fa20 f70c 	lsr.w	r7, r0, ip
   da29e:	fa01 f306 	lsl.w	r3, r1, r6
   da2a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da2a6:	fa21 f10c 	lsr.w	r1, r1, ip
   da2aa:	431f      	orrs	r7, r3
   da2ac:	0c3b      	lsrs	r3, r7, #16
   da2ae:	fbb1 f9fe 	udiv	r9, r1, lr
   da2b2:	fa1f f884 	uxth.w	r8, r4
   da2b6:	fb0e 1119 	mls	r1, lr, r9, r1
   da2ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da2be:	fb09 fa08 	mul.w	sl, r9, r8
   da2c2:	458a      	cmp	sl, r1
   da2c4:	fa02 f206 	lsl.w	r2, r2, r6
   da2c8:	fa00 f306 	lsl.w	r3, r0, r6
   da2cc:	d908      	bls.n	da2e0 <__udivmoddi4+0x220>
   da2ce:	1861      	adds	r1, r4, r1
   da2d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   da2d4:	d248      	bcs.n	da368 <__udivmoddi4+0x2a8>
   da2d6:	458a      	cmp	sl, r1
   da2d8:	d946      	bls.n	da368 <__udivmoddi4+0x2a8>
   da2da:	f1a9 0902 	sub.w	r9, r9, #2
   da2de:	4421      	add	r1, r4
   da2e0:	eba1 010a 	sub.w	r1, r1, sl
   da2e4:	b2bf      	uxth	r7, r7
   da2e6:	fbb1 f0fe 	udiv	r0, r1, lr
   da2ea:	fb0e 1110 	mls	r1, lr, r0, r1
   da2ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da2f2:	fb00 f808 	mul.w	r8, r0, r8
   da2f6:	45b8      	cmp	r8, r7
   da2f8:	d907      	bls.n	da30a <__udivmoddi4+0x24a>
   da2fa:	19e7      	adds	r7, r4, r7
   da2fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   da300:	d22e      	bcs.n	da360 <__udivmoddi4+0x2a0>
   da302:	45b8      	cmp	r8, r7
   da304:	d92c      	bls.n	da360 <__udivmoddi4+0x2a0>
   da306:	3802      	subs	r0, #2
   da308:	4427      	add	r7, r4
   da30a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da30e:	eba7 0708 	sub.w	r7, r7, r8
   da312:	fba0 8902 	umull	r8, r9, r0, r2
   da316:	454f      	cmp	r7, r9
   da318:	46c6      	mov	lr, r8
   da31a:	4649      	mov	r1, r9
   da31c:	d31a      	bcc.n	da354 <__udivmoddi4+0x294>
   da31e:	d017      	beq.n	da350 <__udivmoddi4+0x290>
   da320:	b15d      	cbz	r5, da33a <__udivmoddi4+0x27a>
   da322:	ebb3 020e 	subs.w	r2, r3, lr
   da326:	eb67 0701 	sbc.w	r7, r7, r1
   da32a:	fa07 fc0c 	lsl.w	ip, r7, ip
   da32e:	40f2      	lsrs	r2, r6
   da330:	ea4c 0202 	orr.w	r2, ip, r2
   da334:	40f7      	lsrs	r7, r6
   da336:	e9c5 2700 	strd	r2, r7, [r5]
   da33a:	2600      	movs	r6, #0
   da33c:	4631      	mov	r1, r6
   da33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da342:	462e      	mov	r6, r5
   da344:	4628      	mov	r0, r5
   da346:	e70b      	b.n	da160 <__udivmoddi4+0xa0>
   da348:	4606      	mov	r6, r0
   da34a:	e6e9      	b.n	da120 <__udivmoddi4+0x60>
   da34c:	4618      	mov	r0, r3
   da34e:	e6fd      	b.n	da14c <__udivmoddi4+0x8c>
   da350:	4543      	cmp	r3, r8
   da352:	d2e5      	bcs.n	da320 <__udivmoddi4+0x260>
   da354:	ebb8 0e02 	subs.w	lr, r8, r2
   da358:	eb69 0104 	sbc.w	r1, r9, r4
   da35c:	3801      	subs	r0, #1
   da35e:	e7df      	b.n	da320 <__udivmoddi4+0x260>
   da360:	4608      	mov	r0, r1
   da362:	e7d2      	b.n	da30a <__udivmoddi4+0x24a>
   da364:	4660      	mov	r0, ip
   da366:	e78d      	b.n	da284 <__udivmoddi4+0x1c4>
   da368:	4681      	mov	r9, r0
   da36a:	e7b9      	b.n	da2e0 <__udivmoddi4+0x220>
   da36c:	4666      	mov	r6, ip
   da36e:	e775      	b.n	da25c <__udivmoddi4+0x19c>
   da370:	4630      	mov	r0, r6
   da372:	e74a      	b.n	da20a <__udivmoddi4+0x14a>
   da374:	f1ac 0c02 	sub.w	ip, ip, #2
   da378:	4439      	add	r1, r7
   da37a:	e713      	b.n	da1a4 <__udivmoddi4+0xe4>
   da37c:	3802      	subs	r0, #2
   da37e:	443c      	add	r4, r7
   da380:	e724      	b.n	da1cc <__udivmoddi4+0x10c>
   da382:	bf00      	nop

000da384 <__aeabi_idiv0>:
   da384:	4770      	bx	lr
   da386:	bf00      	nop

000da388 <atof>:
   da388:	2100      	movs	r1, #0
   da38a:	f000 bf23 	b.w	db1d4 <strtod>
	...

000da390 <calloc>:
   da390:	4b02      	ldr	r3, [pc, #8]	; (da39c <calloc+0xc>)
   da392:	460a      	mov	r2, r1
   da394:	4601      	mov	r1, r0
   da396:	6818      	ldr	r0, [r3, #0]
   da398:	f000 b840 	b.w	da41c <_calloc_r>
   da39c:	2003e254 	.word	0x2003e254

000da3a0 <__cxa_atexit>:
   da3a0:	b510      	push	{r4, lr}
   da3a2:	4c05      	ldr	r4, [pc, #20]	; (da3b8 <__cxa_atexit+0x18>)
   da3a4:	4613      	mov	r3, r2
   da3a6:	b12c      	cbz	r4, da3b4 <__cxa_atexit+0x14>
   da3a8:	460a      	mov	r2, r1
   da3aa:	4601      	mov	r1, r0
   da3ac:	2002      	movs	r0, #2
   da3ae:	f3af 8000 	nop.w
   da3b2:	bd10      	pop	{r4, pc}
   da3b4:	4620      	mov	r0, r4
   da3b6:	e7fc      	b.n	da3b2 <__cxa_atexit+0x12>
   da3b8:	00000000 	.word	0x00000000

000da3bc <memcpy>:
   da3bc:	440a      	add	r2, r1
   da3be:	4291      	cmp	r1, r2
   da3c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da3c4:	d100      	bne.n	da3c8 <memcpy+0xc>
   da3c6:	4770      	bx	lr
   da3c8:	b510      	push	{r4, lr}
   da3ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   da3ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   da3d2:	4291      	cmp	r1, r2
   da3d4:	d1f9      	bne.n	da3ca <memcpy+0xe>
   da3d6:	bd10      	pop	{r4, pc}

000da3d8 <memmove>:
   da3d8:	4288      	cmp	r0, r1
   da3da:	b510      	push	{r4, lr}
   da3dc:	eb01 0402 	add.w	r4, r1, r2
   da3e0:	d902      	bls.n	da3e8 <memmove+0x10>
   da3e2:	4284      	cmp	r4, r0
   da3e4:	4623      	mov	r3, r4
   da3e6:	d807      	bhi.n	da3f8 <memmove+0x20>
   da3e8:	1e43      	subs	r3, r0, #1
   da3ea:	42a1      	cmp	r1, r4
   da3ec:	d008      	beq.n	da400 <memmove+0x28>
   da3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   da3f2:	f803 2f01 	strb.w	r2, [r3, #1]!
   da3f6:	e7f8      	b.n	da3ea <memmove+0x12>
   da3f8:	4402      	add	r2, r0
   da3fa:	4601      	mov	r1, r0
   da3fc:	428a      	cmp	r2, r1
   da3fe:	d100      	bne.n	da402 <memmove+0x2a>
   da400:	bd10      	pop	{r4, pc}
   da402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da406:	f802 4d01 	strb.w	r4, [r2, #-1]!
   da40a:	e7f7      	b.n	da3fc <memmove+0x24>

000da40c <memset>:
   da40c:	4402      	add	r2, r0
   da40e:	4603      	mov	r3, r0
   da410:	4293      	cmp	r3, r2
   da412:	d100      	bne.n	da416 <memset+0xa>
   da414:	4770      	bx	lr
   da416:	f803 1b01 	strb.w	r1, [r3], #1
   da41a:	e7f9      	b.n	da410 <memset+0x4>

000da41c <_calloc_r>:
   da41c:	b513      	push	{r0, r1, r4, lr}
   da41e:	434a      	muls	r2, r1
   da420:	4611      	mov	r1, r2
   da422:	9201      	str	r2, [sp, #4]
   da424:	f7fc fde4 	bl	d6ff0 <_malloc_r>
   da428:	4604      	mov	r4, r0
   da42a:	b118      	cbz	r0, da434 <_calloc_r+0x18>
   da42c:	9a01      	ldr	r2, [sp, #4]
   da42e:	2100      	movs	r1, #0
   da430:	f7ff ffec 	bl	da40c <memset>
   da434:	4620      	mov	r0, r4
   da436:	b002      	add	sp, #8
   da438:	bd10      	pop	{r4, pc}
	...

000da43c <srand>:
   da43c:	b538      	push	{r3, r4, r5, lr}
   da43e:	4b0d      	ldr	r3, [pc, #52]	; (da474 <srand+0x38>)
   da440:	681d      	ldr	r5, [r3, #0]
   da442:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da444:	4604      	mov	r4, r0
   da446:	b97b      	cbnz	r3, da468 <srand+0x2c>
   da448:	2018      	movs	r0, #24
   da44a:	f7fc fda9 	bl	d6fa0 <malloc>
   da44e:	4a0a      	ldr	r2, [pc, #40]	; (da478 <srand+0x3c>)
   da450:	4b0a      	ldr	r3, [pc, #40]	; (da47c <srand+0x40>)
   da452:	63a8      	str	r0, [r5, #56]	; 0x38
   da454:	e9c0 2300 	strd	r2, r3, [r0]
   da458:	4b09      	ldr	r3, [pc, #36]	; (da480 <srand+0x44>)
   da45a:	6083      	str	r3, [r0, #8]
   da45c:	230b      	movs	r3, #11
   da45e:	8183      	strh	r3, [r0, #12]
   da460:	2201      	movs	r2, #1
   da462:	2300      	movs	r3, #0
   da464:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da468:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da46a:	2200      	movs	r2, #0
   da46c:	611c      	str	r4, [r3, #16]
   da46e:	615a      	str	r2, [r3, #20]
   da470:	bd38      	pop	{r3, r4, r5, pc}
   da472:	bf00      	nop
   da474:	2003e254 	.word	0x2003e254
   da478:	abcd330e 	.word	0xabcd330e
   da47c:	e66d1234 	.word	0xe66d1234
   da480:	0005deec 	.word	0x0005deec

000da484 <strchr>:
   da484:	b2c9      	uxtb	r1, r1
   da486:	4603      	mov	r3, r0
   da488:	f810 2b01 	ldrb.w	r2, [r0], #1
   da48c:	b11a      	cbz	r2, da496 <strchr+0x12>
   da48e:	428a      	cmp	r2, r1
   da490:	d1f9      	bne.n	da486 <strchr+0x2>
   da492:	4618      	mov	r0, r3
   da494:	4770      	bx	lr
   da496:	2900      	cmp	r1, #0
   da498:	bf18      	it	ne
   da49a:	2300      	movne	r3, #0
   da49c:	e7f9      	b.n	da492 <strchr+0xe>

000da49e <strcmp>:
   da49e:	f810 2b01 	ldrb.w	r2, [r0], #1
   da4a2:	f811 3b01 	ldrb.w	r3, [r1], #1
   da4a6:	2a01      	cmp	r2, #1
   da4a8:	bf28      	it	cs
   da4aa:	429a      	cmpcs	r2, r3
   da4ac:	d0f7      	beq.n	da49e <strcmp>
   da4ae:	1ad0      	subs	r0, r2, r3
   da4b0:	4770      	bx	lr

000da4b2 <strcpy>:
   da4b2:	4603      	mov	r3, r0
   da4b4:	f811 2b01 	ldrb.w	r2, [r1], #1
   da4b8:	f803 2b01 	strb.w	r2, [r3], #1
   da4bc:	2a00      	cmp	r2, #0
   da4be:	d1f9      	bne.n	da4b4 <strcpy+0x2>
   da4c0:	4770      	bx	lr
	...

000da4c4 <strdup>:
   da4c4:	4b02      	ldr	r3, [pc, #8]	; (da4d0 <strdup+0xc>)
   da4c6:	4601      	mov	r1, r0
   da4c8:	6818      	ldr	r0, [r3, #0]
   da4ca:	f000 b803 	b.w	da4d4 <_strdup_r>
   da4ce:	bf00      	nop
   da4d0:	2003e254 	.word	0x2003e254

000da4d4 <_strdup_r>:
   da4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da4d6:	4604      	mov	r4, r0
   da4d8:	4608      	mov	r0, r1
   da4da:	460d      	mov	r5, r1
   da4dc:	f000 f80f 	bl	da4fe <strlen>
   da4e0:	1c42      	adds	r2, r0, #1
   da4e2:	4611      	mov	r1, r2
   da4e4:	4620      	mov	r0, r4
   da4e6:	9201      	str	r2, [sp, #4]
   da4e8:	f7fc fd82 	bl	d6ff0 <_malloc_r>
   da4ec:	4604      	mov	r4, r0
   da4ee:	b118      	cbz	r0, da4f8 <_strdup_r+0x24>
   da4f0:	9a01      	ldr	r2, [sp, #4]
   da4f2:	4629      	mov	r1, r5
   da4f4:	f7ff ff62 	bl	da3bc <memcpy>
   da4f8:	4620      	mov	r0, r4
   da4fa:	b003      	add	sp, #12
   da4fc:	bd30      	pop	{r4, r5, pc}

000da4fe <strlen>:
   da4fe:	4603      	mov	r3, r0
   da500:	f813 2b01 	ldrb.w	r2, [r3], #1
   da504:	2a00      	cmp	r2, #0
   da506:	d1fb      	bne.n	da500 <strlen+0x2>
   da508:	1a18      	subs	r0, r3, r0
   da50a:	3801      	subs	r0, #1
   da50c:	4770      	bx	lr

000da50e <strncmp>:
   da50e:	b510      	push	{r4, lr}
   da510:	b16a      	cbz	r2, da52e <strncmp+0x20>
   da512:	3901      	subs	r1, #1
   da514:	1884      	adds	r4, r0, r2
   da516:	f810 3b01 	ldrb.w	r3, [r0], #1
   da51a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   da51e:	4293      	cmp	r3, r2
   da520:	d103      	bne.n	da52a <strncmp+0x1c>
   da522:	42a0      	cmp	r0, r4
   da524:	d001      	beq.n	da52a <strncmp+0x1c>
   da526:	2b00      	cmp	r3, #0
   da528:	d1f5      	bne.n	da516 <strncmp+0x8>
   da52a:	1a98      	subs	r0, r3, r2
   da52c:	bd10      	pop	{r4, pc}
   da52e:	4610      	mov	r0, r2
   da530:	e7fc      	b.n	da52c <strncmp+0x1e>

000da532 <strncpy>:
   da532:	b510      	push	{r4, lr}
   da534:	3901      	subs	r1, #1
   da536:	4603      	mov	r3, r0
   da538:	b132      	cbz	r2, da548 <strncpy+0x16>
   da53a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da53e:	f803 4b01 	strb.w	r4, [r3], #1
   da542:	3a01      	subs	r2, #1
   da544:	2c00      	cmp	r4, #0
   da546:	d1f7      	bne.n	da538 <strncpy+0x6>
   da548:	441a      	add	r2, r3
   da54a:	2100      	movs	r1, #0
   da54c:	4293      	cmp	r3, r2
   da54e:	d100      	bne.n	da552 <strncpy+0x20>
   da550:	bd10      	pop	{r4, pc}
   da552:	f803 1b01 	strb.w	r1, [r3], #1
   da556:	e7f9      	b.n	da54c <strncpy+0x1a>

000da558 <strstr>:
   da558:	b5f0      	push	{r4, r5, r6, r7, lr}
   da55a:	780c      	ldrb	r4, [r1, #0]
   da55c:	b164      	cbz	r4, da578 <strstr+0x20>
   da55e:	4603      	mov	r3, r0
   da560:	781a      	ldrb	r2, [r3, #0]
   da562:	4618      	mov	r0, r3
   da564:	1c5e      	adds	r6, r3, #1
   da566:	b90a      	cbnz	r2, da56c <strstr+0x14>
   da568:	4610      	mov	r0, r2
   da56a:	e005      	b.n	da578 <strstr+0x20>
   da56c:	4294      	cmp	r4, r2
   da56e:	d108      	bne.n	da582 <strstr+0x2a>
   da570:	460d      	mov	r5, r1
   da572:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   da576:	b902      	cbnz	r2, da57a <strstr+0x22>
   da578:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da57a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   da57e:	4297      	cmp	r7, r2
   da580:	d0f7      	beq.n	da572 <strstr+0x1a>
   da582:	4633      	mov	r3, r6
   da584:	e7ec      	b.n	da560 <strstr+0x8>

000da586 <sulp>:
   da586:	b570      	push	{r4, r5, r6, lr}
   da588:	4604      	mov	r4, r0
   da58a:	460d      	mov	r5, r1
   da58c:	ec45 4b10 	vmov	d0, r4, r5
   da590:	4616      	mov	r6, r2
   da592:	f001 fce9 	bl	dbf68 <__ulp>
   da596:	ec51 0b10 	vmov	r0, r1, d0
   da59a:	b17e      	cbz	r6, da5bc <sulp+0x36>
   da59c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   da5a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da5a4:	2b00      	cmp	r3, #0
   da5a6:	dd09      	ble.n	da5bc <sulp+0x36>
   da5a8:	051b      	lsls	r3, r3, #20
   da5aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   da5ae:	2400      	movs	r4, #0
   da5b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   da5b4:	4622      	mov	r2, r4
   da5b6:	462b      	mov	r3, r5
   da5b8:	f7ff fa1a 	bl	d99f0 <__aeabi_dmul>
   da5bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000da5c0 <_strtod_l>:
   da5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da5c4:	b0a3      	sub	sp, #140	; 0x8c
   da5c6:	461f      	mov	r7, r3
   da5c8:	2300      	movs	r3, #0
   da5ca:	931e      	str	r3, [sp, #120]	; 0x78
   da5cc:	4ba4      	ldr	r3, [pc, #656]	; (da860 <_strtod_l+0x2a0>)
   da5ce:	9219      	str	r2, [sp, #100]	; 0x64
   da5d0:	681b      	ldr	r3, [r3, #0]
   da5d2:	9307      	str	r3, [sp, #28]
   da5d4:	4604      	mov	r4, r0
   da5d6:	4618      	mov	r0, r3
   da5d8:	4688      	mov	r8, r1
   da5da:	f7ff ff90 	bl	da4fe <strlen>
   da5de:	f04f 0a00 	mov.w	sl, #0
   da5e2:	4605      	mov	r5, r0
   da5e4:	f04f 0b00 	mov.w	fp, #0
   da5e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   da5ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da5ee:	781a      	ldrb	r2, [r3, #0]
   da5f0:	2a2b      	cmp	r2, #43	; 0x2b
   da5f2:	d04c      	beq.n	da68e <_strtod_l+0xce>
   da5f4:	d839      	bhi.n	da66a <_strtod_l+0xaa>
   da5f6:	2a0d      	cmp	r2, #13
   da5f8:	d832      	bhi.n	da660 <_strtod_l+0xa0>
   da5fa:	2a08      	cmp	r2, #8
   da5fc:	d832      	bhi.n	da664 <_strtod_l+0xa4>
   da5fe:	2a00      	cmp	r2, #0
   da600:	d03c      	beq.n	da67c <_strtod_l+0xbc>
   da602:	2300      	movs	r3, #0
   da604:	930e      	str	r3, [sp, #56]	; 0x38
   da606:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   da608:	7833      	ldrb	r3, [r6, #0]
   da60a:	2b30      	cmp	r3, #48	; 0x30
   da60c:	f040 80b4 	bne.w	da778 <_strtod_l+0x1b8>
   da610:	7873      	ldrb	r3, [r6, #1]
   da612:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da616:	2b58      	cmp	r3, #88	; 0x58
   da618:	d16c      	bne.n	da6f4 <_strtod_l+0x134>
   da61a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da61c:	9301      	str	r3, [sp, #4]
   da61e:	ab1e      	add	r3, sp, #120	; 0x78
   da620:	9702      	str	r7, [sp, #8]
   da622:	9300      	str	r3, [sp, #0]
   da624:	4a8f      	ldr	r2, [pc, #572]	; (da864 <_strtod_l+0x2a4>)
   da626:	ab1f      	add	r3, sp, #124	; 0x7c
   da628:	a91d      	add	r1, sp, #116	; 0x74
   da62a:	4620      	mov	r0, r4
   da62c:	f000 fe98 	bl	db360 <__gethex>
   da630:	f010 0707 	ands.w	r7, r0, #7
   da634:	4605      	mov	r5, r0
   da636:	d005      	beq.n	da644 <_strtod_l+0x84>
   da638:	2f06      	cmp	r7, #6
   da63a:	d12a      	bne.n	da692 <_strtod_l+0xd2>
   da63c:	3601      	adds	r6, #1
   da63e:	2300      	movs	r3, #0
   da640:	961d      	str	r6, [sp, #116]	; 0x74
   da642:	930e      	str	r3, [sp, #56]	; 0x38
   da644:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da646:	2b00      	cmp	r3, #0
   da648:	f040 8596 	bne.w	db178 <_strtod_l+0xbb8>
   da64c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da64e:	b1db      	cbz	r3, da688 <_strtod_l+0xc8>
   da650:	4652      	mov	r2, sl
   da652:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da656:	ec43 2b10 	vmov	d0, r2, r3
   da65a:	b023      	add	sp, #140	; 0x8c
   da65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da660:	2a20      	cmp	r2, #32
   da662:	d1ce      	bne.n	da602 <_strtod_l+0x42>
   da664:	3301      	adds	r3, #1
   da666:	931d      	str	r3, [sp, #116]	; 0x74
   da668:	e7c0      	b.n	da5ec <_strtod_l+0x2c>
   da66a:	2a2d      	cmp	r2, #45	; 0x2d
   da66c:	d1c9      	bne.n	da602 <_strtod_l+0x42>
   da66e:	2201      	movs	r2, #1
   da670:	920e      	str	r2, [sp, #56]	; 0x38
   da672:	1c5a      	adds	r2, r3, #1
   da674:	921d      	str	r2, [sp, #116]	; 0x74
   da676:	785b      	ldrb	r3, [r3, #1]
   da678:	2b00      	cmp	r3, #0
   da67a:	d1c4      	bne.n	da606 <_strtod_l+0x46>
   da67c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da67e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   da682:	2b00      	cmp	r3, #0
   da684:	f040 8576 	bne.w	db174 <_strtod_l+0xbb4>
   da688:	4652      	mov	r2, sl
   da68a:	465b      	mov	r3, fp
   da68c:	e7e3      	b.n	da656 <_strtod_l+0x96>
   da68e:	2200      	movs	r2, #0
   da690:	e7ee      	b.n	da670 <_strtod_l+0xb0>
   da692:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   da694:	b13a      	cbz	r2, da6a6 <_strtod_l+0xe6>
   da696:	2135      	movs	r1, #53	; 0x35
   da698:	a820      	add	r0, sp, #128	; 0x80
   da69a:	f001 fd64 	bl	dc166 <__copybits>
   da69e:	991e      	ldr	r1, [sp, #120]	; 0x78
   da6a0:	4620      	mov	r0, r4
   da6a2:	f001 f999 	bl	db9d8 <_Bfree>
   da6a6:	3f01      	subs	r7, #1
   da6a8:	2f05      	cmp	r7, #5
   da6aa:	d807      	bhi.n	da6bc <_strtod_l+0xfc>
   da6ac:	e8df f007 	tbb	[pc, r7]
   da6b0:	1d180b0e 	.word	0x1d180b0e
   da6b4:	030e      	.short	0x030e
   da6b6:	f04f 0b00 	mov.w	fp, #0
   da6ba:	46da      	mov	sl, fp
   da6bc:	0728      	lsls	r0, r5, #28
   da6be:	d5c1      	bpl.n	da644 <_strtod_l+0x84>
   da6c0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   da6c4:	e7be      	b.n	da644 <_strtod_l+0x84>
   da6c6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   da6ca:	e7f7      	b.n	da6bc <_strtod_l+0xfc>
   da6cc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   da6d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   da6d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   da6d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   da6da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   da6de:	e7ed      	b.n	da6bc <_strtod_l+0xfc>
   da6e0:	f8df b184 	ldr.w	fp, [pc, #388]	; da868 <_strtod_l+0x2a8>
   da6e4:	f04f 0a00 	mov.w	sl, #0
   da6e8:	e7e8      	b.n	da6bc <_strtod_l+0xfc>
   da6ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   da6ee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da6f2:	e7e3      	b.n	da6bc <_strtod_l+0xfc>
   da6f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da6f6:	1c5a      	adds	r2, r3, #1
   da6f8:	921d      	str	r2, [sp, #116]	; 0x74
   da6fa:	785b      	ldrb	r3, [r3, #1]
   da6fc:	2b30      	cmp	r3, #48	; 0x30
   da6fe:	d0f9      	beq.n	da6f4 <_strtod_l+0x134>
   da700:	2b00      	cmp	r3, #0
   da702:	d09f      	beq.n	da644 <_strtod_l+0x84>
   da704:	2301      	movs	r3, #1
   da706:	f04f 0900 	mov.w	r9, #0
   da70a:	9304      	str	r3, [sp, #16]
   da70c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da70e:	930a      	str	r3, [sp, #40]	; 0x28
   da710:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   da714:	464f      	mov	r7, r9
   da716:	220a      	movs	r2, #10
   da718:	981d      	ldr	r0, [sp, #116]	; 0x74
   da71a:	7806      	ldrb	r6, [r0, #0]
   da71c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   da720:	b2d9      	uxtb	r1, r3
   da722:	2909      	cmp	r1, #9
   da724:	d92a      	bls.n	da77c <_strtod_l+0x1bc>
   da726:	9907      	ldr	r1, [sp, #28]
   da728:	462a      	mov	r2, r5
   da72a:	f7ff fef0 	bl	da50e <strncmp>
   da72e:	b398      	cbz	r0, da798 <_strtod_l+0x1d8>
   da730:	2000      	movs	r0, #0
   da732:	4633      	mov	r3, r6
   da734:	463d      	mov	r5, r7
   da736:	9007      	str	r0, [sp, #28]
   da738:	4602      	mov	r2, r0
   da73a:	2b65      	cmp	r3, #101	; 0x65
   da73c:	d001      	beq.n	da742 <_strtod_l+0x182>
   da73e:	2b45      	cmp	r3, #69	; 0x45
   da740:	d118      	bne.n	da774 <_strtod_l+0x1b4>
   da742:	b91d      	cbnz	r5, da74c <_strtod_l+0x18c>
   da744:	9b04      	ldr	r3, [sp, #16]
   da746:	4303      	orrs	r3, r0
   da748:	d098      	beq.n	da67c <_strtod_l+0xbc>
   da74a:	2500      	movs	r5, #0
   da74c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   da750:	f108 0301 	add.w	r3, r8, #1
   da754:	931d      	str	r3, [sp, #116]	; 0x74
   da756:	f898 3001 	ldrb.w	r3, [r8, #1]
   da75a:	2b2b      	cmp	r3, #43	; 0x2b
   da75c:	d075      	beq.n	da84a <_strtod_l+0x28a>
   da75e:	2b2d      	cmp	r3, #45	; 0x2d
   da760:	d07b      	beq.n	da85a <_strtod_l+0x29a>
   da762:	f04f 0c00 	mov.w	ip, #0
   da766:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   da76a:	2909      	cmp	r1, #9
   da76c:	f240 8082 	bls.w	da874 <_strtod_l+0x2b4>
   da770:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   da774:	2600      	movs	r6, #0
   da776:	e09d      	b.n	da8b4 <_strtod_l+0x2f4>
   da778:	2300      	movs	r3, #0
   da77a:	e7c4      	b.n	da706 <_strtod_l+0x146>
   da77c:	2f08      	cmp	r7, #8
   da77e:	bfd8      	it	le
   da780:	9909      	ldrle	r1, [sp, #36]	; 0x24
   da782:	f100 0001 	add.w	r0, r0, #1
   da786:	bfda      	itte	le
   da788:	fb02 3301 	mlale	r3, r2, r1, r3
   da78c:	9309      	strle	r3, [sp, #36]	; 0x24
   da78e:	fb02 3909 	mlagt	r9, r2, r9, r3
   da792:	3701      	adds	r7, #1
   da794:	901d      	str	r0, [sp, #116]	; 0x74
   da796:	e7bf      	b.n	da718 <_strtod_l+0x158>
   da798:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da79a:	195a      	adds	r2, r3, r5
   da79c:	921d      	str	r2, [sp, #116]	; 0x74
   da79e:	5d5b      	ldrb	r3, [r3, r5]
   da7a0:	2f00      	cmp	r7, #0
   da7a2:	d037      	beq.n	da814 <_strtod_l+0x254>
   da7a4:	9007      	str	r0, [sp, #28]
   da7a6:	463d      	mov	r5, r7
   da7a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   da7ac:	2a09      	cmp	r2, #9
   da7ae:	d912      	bls.n	da7d6 <_strtod_l+0x216>
   da7b0:	2201      	movs	r2, #1
   da7b2:	e7c2      	b.n	da73a <_strtod_l+0x17a>
   da7b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da7b6:	1c5a      	adds	r2, r3, #1
   da7b8:	921d      	str	r2, [sp, #116]	; 0x74
   da7ba:	785b      	ldrb	r3, [r3, #1]
   da7bc:	3001      	adds	r0, #1
   da7be:	2b30      	cmp	r3, #48	; 0x30
   da7c0:	d0f8      	beq.n	da7b4 <_strtod_l+0x1f4>
   da7c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   da7c6:	2a08      	cmp	r2, #8
   da7c8:	f200 84db 	bhi.w	db182 <_strtod_l+0xbc2>
   da7cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   da7ce:	9007      	str	r0, [sp, #28]
   da7d0:	2000      	movs	r0, #0
   da7d2:	920a      	str	r2, [sp, #40]	; 0x28
   da7d4:	4605      	mov	r5, r0
   da7d6:	3b30      	subs	r3, #48	; 0x30
   da7d8:	f100 0201 	add.w	r2, r0, #1
   da7dc:	d014      	beq.n	da808 <_strtod_l+0x248>
   da7de:	9907      	ldr	r1, [sp, #28]
   da7e0:	4411      	add	r1, r2
   da7e2:	9107      	str	r1, [sp, #28]
   da7e4:	462a      	mov	r2, r5
   da7e6:	eb00 0e05 	add.w	lr, r0, r5
   da7ea:	210a      	movs	r1, #10
   da7ec:	4572      	cmp	r2, lr
   da7ee:	d113      	bne.n	da818 <_strtod_l+0x258>
   da7f0:	182a      	adds	r2, r5, r0
   da7f2:	2a08      	cmp	r2, #8
   da7f4:	f105 0501 	add.w	r5, r5, #1
   da7f8:	4405      	add	r5, r0
   da7fa:	dc1c      	bgt.n	da836 <_strtod_l+0x276>
   da7fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   da7fe:	220a      	movs	r2, #10
   da800:	fb02 3301 	mla	r3, r2, r1, r3
   da804:	9309      	str	r3, [sp, #36]	; 0x24
   da806:	2200      	movs	r2, #0
   da808:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da80a:	1c59      	adds	r1, r3, #1
   da80c:	911d      	str	r1, [sp, #116]	; 0x74
   da80e:	785b      	ldrb	r3, [r3, #1]
   da810:	4610      	mov	r0, r2
   da812:	e7c9      	b.n	da7a8 <_strtod_l+0x1e8>
   da814:	4638      	mov	r0, r7
   da816:	e7d2      	b.n	da7be <_strtod_l+0x1fe>
   da818:	2a08      	cmp	r2, #8
   da81a:	dc04      	bgt.n	da826 <_strtod_l+0x266>
   da81c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   da81e:	434e      	muls	r6, r1
   da820:	9609      	str	r6, [sp, #36]	; 0x24
   da822:	3201      	adds	r2, #1
   da824:	e7e2      	b.n	da7ec <_strtod_l+0x22c>
   da826:	f102 0c01 	add.w	ip, r2, #1
   da82a:	f1bc 0f10 	cmp.w	ip, #16
   da82e:	bfd8      	it	le
   da830:	fb01 f909 	mulle.w	r9, r1, r9
   da834:	e7f5      	b.n	da822 <_strtod_l+0x262>
   da836:	2d10      	cmp	r5, #16
   da838:	bfdc      	itt	le
   da83a:	220a      	movle	r2, #10
   da83c:	fb02 3909 	mlale	r9, r2, r9, r3
   da840:	e7e1      	b.n	da806 <_strtod_l+0x246>
   da842:	2300      	movs	r3, #0
   da844:	9307      	str	r3, [sp, #28]
   da846:	2201      	movs	r2, #1
   da848:	e77c      	b.n	da744 <_strtod_l+0x184>
   da84a:	f04f 0c00 	mov.w	ip, #0
   da84e:	f108 0302 	add.w	r3, r8, #2
   da852:	931d      	str	r3, [sp, #116]	; 0x74
   da854:	f898 3002 	ldrb.w	r3, [r8, #2]
   da858:	e785      	b.n	da766 <_strtod_l+0x1a6>
   da85a:	f04f 0c01 	mov.w	ip, #1
   da85e:	e7f6      	b.n	da84e <_strtod_l+0x28e>
   da860:	000dd00c 	.word	0x000dd00c
   da864:	000dceb4 	.word	0x000dceb4
   da868:	7ff00000 	.word	0x7ff00000
   da86c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da86e:	1c59      	adds	r1, r3, #1
   da870:	911d      	str	r1, [sp, #116]	; 0x74
   da872:	785b      	ldrb	r3, [r3, #1]
   da874:	2b30      	cmp	r3, #48	; 0x30
   da876:	d0f9      	beq.n	da86c <_strtod_l+0x2ac>
   da878:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   da87c:	2908      	cmp	r1, #8
   da87e:	f63f af79 	bhi.w	da774 <_strtod_l+0x1b4>
   da882:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   da886:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da888:	9308      	str	r3, [sp, #32]
   da88a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da88c:	1c59      	adds	r1, r3, #1
   da88e:	911d      	str	r1, [sp, #116]	; 0x74
   da890:	785b      	ldrb	r3, [r3, #1]
   da892:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   da896:	2e09      	cmp	r6, #9
   da898:	d937      	bls.n	da90a <_strtod_l+0x34a>
   da89a:	9e08      	ldr	r6, [sp, #32]
   da89c:	1b89      	subs	r1, r1, r6
   da89e:	2908      	cmp	r1, #8
   da8a0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   da8a4:	dc02      	bgt.n	da8ac <_strtod_l+0x2ec>
   da8a6:	4576      	cmp	r6, lr
   da8a8:	bfa8      	it	ge
   da8aa:	4676      	movge	r6, lr
   da8ac:	f1bc 0f00 	cmp.w	ip, #0
   da8b0:	d000      	beq.n	da8b4 <_strtod_l+0x2f4>
   da8b2:	4276      	negs	r6, r6
   da8b4:	2d00      	cmp	r5, #0
   da8b6:	d14f      	bne.n	da958 <_strtod_l+0x398>
   da8b8:	9904      	ldr	r1, [sp, #16]
   da8ba:	4301      	orrs	r1, r0
   da8bc:	f47f aec2 	bne.w	da644 <_strtod_l+0x84>
   da8c0:	2a00      	cmp	r2, #0
   da8c2:	f47f aedb 	bne.w	da67c <_strtod_l+0xbc>
   da8c6:	2b69      	cmp	r3, #105	; 0x69
   da8c8:	d027      	beq.n	da91a <_strtod_l+0x35a>
   da8ca:	dc24      	bgt.n	da916 <_strtod_l+0x356>
   da8cc:	2b49      	cmp	r3, #73	; 0x49
   da8ce:	d024      	beq.n	da91a <_strtod_l+0x35a>
   da8d0:	2b4e      	cmp	r3, #78	; 0x4e
   da8d2:	f47f aed3 	bne.w	da67c <_strtod_l+0xbc>
   da8d6:	499e      	ldr	r1, [pc, #632]	; (dab50 <_strtod_l+0x590>)
   da8d8:	a81d      	add	r0, sp, #116	; 0x74
   da8da:	f000 ff87 	bl	db7ec <__match>
   da8de:	2800      	cmp	r0, #0
   da8e0:	f43f aecc 	beq.w	da67c <_strtod_l+0xbc>
   da8e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da8e6:	781b      	ldrb	r3, [r3, #0]
   da8e8:	2b28      	cmp	r3, #40	; 0x28
   da8ea:	d12d      	bne.n	da948 <_strtod_l+0x388>
   da8ec:	4999      	ldr	r1, [pc, #612]	; (dab54 <_strtod_l+0x594>)
   da8ee:	aa20      	add	r2, sp, #128	; 0x80
   da8f0:	a81d      	add	r0, sp, #116	; 0x74
   da8f2:	f000 ff8f 	bl	db814 <__hexnan>
   da8f6:	2805      	cmp	r0, #5
   da8f8:	d126      	bne.n	da948 <_strtod_l+0x388>
   da8fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
   da8fc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   da900:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   da904:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   da908:	e69c      	b.n	da644 <_strtod_l+0x84>
   da90a:	210a      	movs	r1, #10
   da90c:	fb01 3e0e 	mla	lr, r1, lr, r3
   da910:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   da914:	e7b9      	b.n	da88a <_strtod_l+0x2ca>
   da916:	2b6e      	cmp	r3, #110	; 0x6e
   da918:	e7db      	b.n	da8d2 <_strtod_l+0x312>
   da91a:	498f      	ldr	r1, [pc, #572]	; (dab58 <_strtod_l+0x598>)
   da91c:	a81d      	add	r0, sp, #116	; 0x74
   da91e:	f000 ff65 	bl	db7ec <__match>
   da922:	2800      	cmp	r0, #0
   da924:	f43f aeaa 	beq.w	da67c <_strtod_l+0xbc>
   da928:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da92a:	498c      	ldr	r1, [pc, #560]	; (dab5c <_strtod_l+0x59c>)
   da92c:	3b01      	subs	r3, #1
   da92e:	a81d      	add	r0, sp, #116	; 0x74
   da930:	931d      	str	r3, [sp, #116]	; 0x74
   da932:	f000 ff5b 	bl	db7ec <__match>
   da936:	b910      	cbnz	r0, da93e <_strtod_l+0x37e>
   da938:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da93a:	3301      	adds	r3, #1
   da93c:	931d      	str	r3, [sp, #116]	; 0x74
   da93e:	f8df b22c 	ldr.w	fp, [pc, #556]	; dab6c <_strtod_l+0x5ac>
   da942:	f04f 0a00 	mov.w	sl, #0
   da946:	e67d      	b.n	da644 <_strtod_l+0x84>
   da948:	4885      	ldr	r0, [pc, #532]	; (dab60 <_strtod_l+0x5a0>)
   da94a:	f7fe fe8d 	bl	d9668 <nan>
   da94e:	ed8d 0b04 	vstr	d0, [sp, #16]
   da952:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   da956:	e675      	b.n	da644 <_strtod_l+0x84>
   da958:	9b07      	ldr	r3, [sp, #28]
   da95a:	9809      	ldr	r0, [sp, #36]	; 0x24
   da95c:	1af3      	subs	r3, r6, r3
   da95e:	2f00      	cmp	r7, #0
   da960:	bf08      	it	eq
   da962:	462f      	moveq	r7, r5
   da964:	2d10      	cmp	r5, #16
   da966:	9308      	str	r3, [sp, #32]
   da968:	46a8      	mov	r8, r5
   da96a:	bfa8      	it	ge
   da96c:	f04f 0810 	movge.w	r8, #16
   da970:	f7fe ffc4 	bl	d98fc <__aeabi_ui2d>
   da974:	2d09      	cmp	r5, #9
   da976:	4682      	mov	sl, r0
   da978:	468b      	mov	fp, r1
   da97a:	dd13      	ble.n	da9a4 <_strtod_l+0x3e4>
   da97c:	4b79      	ldr	r3, [pc, #484]	; (dab64 <_strtod_l+0x5a4>)
   da97e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   da982:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   da986:	f7ff f833 	bl	d99f0 <__aeabi_dmul>
   da98a:	4682      	mov	sl, r0
   da98c:	4648      	mov	r0, r9
   da98e:	468b      	mov	fp, r1
   da990:	f7fe ffb4 	bl	d98fc <__aeabi_ui2d>
   da994:	4602      	mov	r2, r0
   da996:	460b      	mov	r3, r1
   da998:	4650      	mov	r0, sl
   da99a:	4659      	mov	r1, fp
   da99c:	f7fe fe72 	bl	d9684 <__adddf3>
   da9a0:	4682      	mov	sl, r0
   da9a2:	468b      	mov	fp, r1
   da9a4:	2d0f      	cmp	r5, #15
   da9a6:	dc38      	bgt.n	daa1a <_strtod_l+0x45a>
   da9a8:	9b08      	ldr	r3, [sp, #32]
   da9aa:	2b00      	cmp	r3, #0
   da9ac:	f43f ae4a 	beq.w	da644 <_strtod_l+0x84>
   da9b0:	dd24      	ble.n	da9fc <_strtod_l+0x43c>
   da9b2:	2b16      	cmp	r3, #22
   da9b4:	dc0b      	bgt.n	da9ce <_strtod_l+0x40e>
   da9b6:	4d6b      	ldr	r5, [pc, #428]	; (dab64 <_strtod_l+0x5a4>)
   da9b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   da9bc:	e9d5 0100 	ldrd	r0, r1, [r5]
   da9c0:	4652      	mov	r2, sl
   da9c2:	465b      	mov	r3, fp
   da9c4:	f7ff f814 	bl	d99f0 <__aeabi_dmul>
   da9c8:	4682      	mov	sl, r0
   da9ca:	468b      	mov	fp, r1
   da9cc:	e63a      	b.n	da644 <_strtod_l+0x84>
   da9ce:	9a08      	ldr	r2, [sp, #32]
   da9d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   da9d4:	4293      	cmp	r3, r2
   da9d6:	db20      	blt.n	daa1a <_strtod_l+0x45a>
   da9d8:	4c62      	ldr	r4, [pc, #392]	; (dab64 <_strtod_l+0x5a4>)
   da9da:	f1c5 050f 	rsb	r5, r5, #15
   da9de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   da9e2:	4652      	mov	r2, sl
   da9e4:	465b      	mov	r3, fp
   da9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
   da9ea:	f7ff f801 	bl	d99f0 <__aeabi_dmul>
   da9ee:	9b08      	ldr	r3, [sp, #32]
   da9f0:	1b5d      	subs	r5, r3, r5
   da9f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   da9f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   da9fa:	e7e3      	b.n	da9c4 <_strtod_l+0x404>
   da9fc:	9b08      	ldr	r3, [sp, #32]
   da9fe:	3316      	adds	r3, #22
   daa00:	db0b      	blt.n	daa1a <_strtod_l+0x45a>
   daa02:	9b07      	ldr	r3, [sp, #28]
   daa04:	4a57      	ldr	r2, [pc, #348]	; (dab64 <_strtod_l+0x5a4>)
   daa06:	1b9e      	subs	r6, r3, r6
   daa08:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   daa0c:	e9d6 2300 	ldrd	r2, r3, [r6]
   daa10:	4650      	mov	r0, sl
   daa12:	4659      	mov	r1, fp
   daa14:	f7ff f916 	bl	d9c44 <__aeabi_ddiv>
   daa18:	e7d6      	b.n	da9c8 <_strtod_l+0x408>
   daa1a:	9b08      	ldr	r3, [sp, #32]
   daa1c:	eba5 0808 	sub.w	r8, r5, r8
   daa20:	4498      	add	r8, r3
   daa22:	f1b8 0f00 	cmp.w	r8, #0
   daa26:	dd71      	ble.n	dab0c <_strtod_l+0x54c>
   daa28:	f018 030f 	ands.w	r3, r8, #15
   daa2c:	d00a      	beq.n	daa44 <_strtod_l+0x484>
   daa2e:	494d      	ldr	r1, [pc, #308]	; (dab64 <_strtod_l+0x5a4>)
   daa30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   daa34:	4652      	mov	r2, sl
   daa36:	465b      	mov	r3, fp
   daa38:	e9d1 0100 	ldrd	r0, r1, [r1]
   daa3c:	f7fe ffd8 	bl	d99f0 <__aeabi_dmul>
   daa40:	4682      	mov	sl, r0
   daa42:	468b      	mov	fp, r1
   daa44:	f038 080f 	bics.w	r8, r8, #15
   daa48:	d04d      	beq.n	daae6 <_strtod_l+0x526>
   daa4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   daa4e:	dd22      	ble.n	daa96 <_strtod_l+0x4d6>
   daa50:	2500      	movs	r5, #0
   daa52:	462e      	mov	r6, r5
   daa54:	9509      	str	r5, [sp, #36]	; 0x24
   daa56:	9507      	str	r5, [sp, #28]
   daa58:	2322      	movs	r3, #34	; 0x22
   daa5a:	f8df b110 	ldr.w	fp, [pc, #272]	; dab6c <_strtod_l+0x5ac>
   daa5e:	6023      	str	r3, [r4, #0]
   daa60:	f04f 0a00 	mov.w	sl, #0
   daa64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daa66:	2b00      	cmp	r3, #0
   daa68:	f43f adec 	beq.w	da644 <_strtod_l+0x84>
   daa6c:	991e      	ldr	r1, [sp, #120]	; 0x78
   daa6e:	4620      	mov	r0, r4
   daa70:	f000 ffb2 	bl	db9d8 <_Bfree>
   daa74:	9907      	ldr	r1, [sp, #28]
   daa76:	4620      	mov	r0, r4
   daa78:	f000 ffae 	bl	db9d8 <_Bfree>
   daa7c:	4631      	mov	r1, r6
   daa7e:	4620      	mov	r0, r4
   daa80:	f000 ffaa 	bl	db9d8 <_Bfree>
   daa84:	9909      	ldr	r1, [sp, #36]	; 0x24
   daa86:	4620      	mov	r0, r4
   daa88:	f000 ffa6 	bl	db9d8 <_Bfree>
   daa8c:	4629      	mov	r1, r5
   daa8e:	4620      	mov	r0, r4
   daa90:	f000 ffa2 	bl	db9d8 <_Bfree>
   daa94:	e5d6      	b.n	da644 <_strtod_l+0x84>
   daa96:	2300      	movs	r3, #0
   daa98:	ea4f 1828 	mov.w	r8, r8, asr #4
   daa9c:	4650      	mov	r0, sl
   daa9e:	4659      	mov	r1, fp
   daaa0:	4699      	mov	r9, r3
   daaa2:	f1b8 0f01 	cmp.w	r8, #1
   daaa6:	dc21      	bgt.n	daaec <_strtod_l+0x52c>
   daaa8:	b10b      	cbz	r3, daaae <_strtod_l+0x4ee>
   daaaa:	4682      	mov	sl, r0
   daaac:	468b      	mov	fp, r1
   daaae:	4b2e      	ldr	r3, [pc, #184]	; (dab68 <_strtod_l+0x5a8>)
   daab0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   daab4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   daab8:	4652      	mov	r2, sl
   daaba:	465b      	mov	r3, fp
   daabc:	e9d9 0100 	ldrd	r0, r1, [r9]
   daac0:	f7fe ff96 	bl	d99f0 <__aeabi_dmul>
   daac4:	4b29      	ldr	r3, [pc, #164]	; (dab6c <_strtod_l+0x5ac>)
   daac6:	460a      	mov	r2, r1
   daac8:	400b      	ands	r3, r1
   daaca:	4929      	ldr	r1, [pc, #164]	; (dab70 <_strtod_l+0x5b0>)
   daacc:	428b      	cmp	r3, r1
   daace:	4682      	mov	sl, r0
   daad0:	d8be      	bhi.n	daa50 <_strtod_l+0x490>
   daad2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   daad6:	428b      	cmp	r3, r1
   daad8:	bf86      	itte	hi
   daada:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dab74 <_strtod_l+0x5b4>
   daade:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   daae2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   daae6:	2300      	movs	r3, #0
   daae8:	9304      	str	r3, [sp, #16]
   daaea:	e081      	b.n	dabf0 <_strtod_l+0x630>
   daaec:	f018 0f01 	tst.w	r8, #1
   daaf0:	d007      	beq.n	dab02 <_strtod_l+0x542>
   daaf2:	4b1d      	ldr	r3, [pc, #116]	; (dab68 <_strtod_l+0x5a8>)
   daaf4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   daaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   daafc:	f7fe ff78 	bl	d99f0 <__aeabi_dmul>
   dab00:	2301      	movs	r3, #1
   dab02:	f109 0901 	add.w	r9, r9, #1
   dab06:	ea4f 0868 	mov.w	r8, r8, asr #1
   dab0a:	e7ca      	b.n	daaa2 <_strtod_l+0x4e2>
   dab0c:	d0eb      	beq.n	daae6 <_strtod_l+0x526>
   dab0e:	f1c8 0800 	rsb	r8, r8, #0
   dab12:	f018 020f 	ands.w	r2, r8, #15
   dab16:	d00a      	beq.n	dab2e <_strtod_l+0x56e>
   dab18:	4b12      	ldr	r3, [pc, #72]	; (dab64 <_strtod_l+0x5a4>)
   dab1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dab1e:	4650      	mov	r0, sl
   dab20:	4659      	mov	r1, fp
   dab22:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab26:	f7ff f88d 	bl	d9c44 <__aeabi_ddiv>
   dab2a:	4682      	mov	sl, r0
   dab2c:	468b      	mov	fp, r1
   dab2e:	ea5f 1828 	movs.w	r8, r8, asr #4
   dab32:	d0d8      	beq.n	daae6 <_strtod_l+0x526>
   dab34:	f1b8 0f1f 	cmp.w	r8, #31
   dab38:	dd1e      	ble.n	dab78 <_strtod_l+0x5b8>
   dab3a:	2500      	movs	r5, #0
   dab3c:	462e      	mov	r6, r5
   dab3e:	9509      	str	r5, [sp, #36]	; 0x24
   dab40:	9507      	str	r5, [sp, #28]
   dab42:	2322      	movs	r3, #34	; 0x22
   dab44:	f04f 0a00 	mov.w	sl, #0
   dab48:	f04f 0b00 	mov.w	fp, #0
   dab4c:	6023      	str	r3, [r4, #0]
   dab4e:	e789      	b.n	daa64 <_strtod_l+0x4a4>
   dab50:	000dceae 	.word	0x000dceae
   dab54:	000dcec8 	.word	0x000dcec8
   dab58:	000dcea5 	.word	0x000dcea5
   dab5c:	000dcea8 	.word	0x000dcea8
   dab60:	000dc84f 	.word	0x000dc84f
   dab64:	000dd048 	.word	0x000dd048
   dab68:	000dd020 	.word	0x000dd020
   dab6c:	7ff00000 	.word	0x7ff00000
   dab70:	7ca00000 	.word	0x7ca00000
   dab74:	7fefffff 	.word	0x7fefffff
   dab78:	f018 0310 	ands.w	r3, r8, #16
   dab7c:	bf18      	it	ne
   dab7e:	236a      	movne	r3, #106	; 0x6a
   dab80:	f8df 93b4 	ldr.w	r9, [pc, #948]	; daf38 <_strtod_l+0x978>
   dab84:	9304      	str	r3, [sp, #16]
   dab86:	4650      	mov	r0, sl
   dab88:	4659      	mov	r1, fp
   dab8a:	2300      	movs	r3, #0
   dab8c:	f018 0f01 	tst.w	r8, #1
   dab90:	d004      	beq.n	dab9c <_strtod_l+0x5dc>
   dab92:	e9d9 2300 	ldrd	r2, r3, [r9]
   dab96:	f7fe ff2b 	bl	d99f0 <__aeabi_dmul>
   dab9a:	2301      	movs	r3, #1
   dab9c:	ea5f 0868 	movs.w	r8, r8, asr #1
   daba0:	f109 0908 	add.w	r9, r9, #8
   daba4:	d1f2      	bne.n	dab8c <_strtod_l+0x5cc>
   daba6:	b10b      	cbz	r3, dabac <_strtod_l+0x5ec>
   daba8:	4682      	mov	sl, r0
   dabaa:	468b      	mov	fp, r1
   dabac:	9b04      	ldr	r3, [sp, #16]
   dabae:	b1bb      	cbz	r3, dabe0 <_strtod_l+0x620>
   dabb0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dabb4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dabb8:	2b00      	cmp	r3, #0
   dabba:	4659      	mov	r1, fp
   dabbc:	dd10      	ble.n	dabe0 <_strtod_l+0x620>
   dabbe:	2b1f      	cmp	r3, #31
   dabc0:	f340 8128 	ble.w	dae14 <_strtod_l+0x854>
   dabc4:	2b34      	cmp	r3, #52	; 0x34
   dabc6:	bfde      	ittt	le
   dabc8:	3b20      	suble	r3, #32
   dabca:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dabce:	fa02 f303 	lslle.w	r3, r2, r3
   dabd2:	f04f 0a00 	mov.w	sl, #0
   dabd6:	bfcc      	ite	gt
   dabd8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dabdc:	ea03 0b01 	andle.w	fp, r3, r1
   dabe0:	2200      	movs	r2, #0
   dabe2:	2300      	movs	r3, #0
   dabe4:	4650      	mov	r0, sl
   dabe6:	4659      	mov	r1, fp
   dabe8:	f7ff f96a 	bl	d9ec0 <__aeabi_dcmpeq>
   dabec:	2800      	cmp	r0, #0
   dabee:	d1a4      	bne.n	dab3a <_strtod_l+0x57a>
   dabf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dabf2:	9300      	str	r3, [sp, #0]
   dabf4:	990a      	ldr	r1, [sp, #40]	; 0x28
   dabf6:	462b      	mov	r3, r5
   dabf8:	463a      	mov	r2, r7
   dabfa:	4620      	mov	r0, r4
   dabfc:	f000 ff41 	bl	dba82 <__s2b>
   dac00:	9009      	str	r0, [sp, #36]	; 0x24
   dac02:	2800      	cmp	r0, #0
   dac04:	f43f af24 	beq.w	daa50 <_strtod_l+0x490>
   dac08:	9b07      	ldr	r3, [sp, #28]
   dac0a:	1b9e      	subs	r6, r3, r6
   dac0c:	9b08      	ldr	r3, [sp, #32]
   dac0e:	2b00      	cmp	r3, #0
   dac10:	bfb4      	ite	lt
   dac12:	4633      	movlt	r3, r6
   dac14:	2300      	movge	r3, #0
   dac16:	9310      	str	r3, [sp, #64]	; 0x40
   dac18:	9b08      	ldr	r3, [sp, #32]
   dac1a:	2500      	movs	r5, #0
   dac1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dac20:	9318      	str	r3, [sp, #96]	; 0x60
   dac22:	462e      	mov	r6, r5
   dac24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dac26:	4620      	mov	r0, r4
   dac28:	6859      	ldr	r1, [r3, #4]
   dac2a:	f000 fea1 	bl	db970 <_Balloc>
   dac2e:	9007      	str	r0, [sp, #28]
   dac30:	2800      	cmp	r0, #0
   dac32:	f43f af11 	beq.w	daa58 <_strtod_l+0x498>
   dac36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dac38:	691a      	ldr	r2, [r3, #16]
   dac3a:	3202      	adds	r2, #2
   dac3c:	f103 010c 	add.w	r1, r3, #12
   dac40:	0092      	lsls	r2, r2, #2
   dac42:	300c      	adds	r0, #12
   dac44:	f7ff fbba 	bl	da3bc <memcpy>
   dac48:	ec4b ab10 	vmov	d0, sl, fp
   dac4c:	aa20      	add	r2, sp, #128	; 0x80
   dac4e:	a91f      	add	r1, sp, #124	; 0x7c
   dac50:	4620      	mov	r0, r4
   dac52:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dac56:	f001 fa03 	bl	dc060 <__d2b>
   dac5a:	901e      	str	r0, [sp, #120]	; 0x78
   dac5c:	2800      	cmp	r0, #0
   dac5e:	f43f aefb 	beq.w	daa58 <_strtod_l+0x498>
   dac62:	2101      	movs	r1, #1
   dac64:	4620      	mov	r0, r4
   dac66:	f000 ff9a 	bl	dbb9e <__i2b>
   dac6a:	4606      	mov	r6, r0
   dac6c:	2800      	cmp	r0, #0
   dac6e:	f43f aef3 	beq.w	daa58 <_strtod_l+0x498>
   dac72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dac74:	9904      	ldr	r1, [sp, #16]
   dac76:	2b00      	cmp	r3, #0
   dac78:	bfab      	itete	ge
   dac7a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dac7c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dac7e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dac80:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dac84:	bfac      	ite	ge
   dac86:	eb03 0902 	addge.w	r9, r3, r2
   dac8a:	1ad7      	sublt	r7, r2, r3
   dac8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dac8e:	eba3 0801 	sub.w	r8, r3, r1
   dac92:	4490      	add	r8, r2
   dac94:	4ba3      	ldr	r3, [pc, #652]	; (daf24 <_strtod_l+0x964>)
   dac96:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dac9a:	4598      	cmp	r8, r3
   dac9c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   daca0:	f280 80cc 	bge.w	dae3c <_strtod_l+0x87c>
   daca4:	eba3 0308 	sub.w	r3, r3, r8
   daca8:	2b1f      	cmp	r3, #31
   dacaa:	eba2 0203 	sub.w	r2, r2, r3
   dacae:	f04f 0101 	mov.w	r1, #1
   dacb2:	f300 80b6 	bgt.w	dae22 <_strtod_l+0x862>
   dacb6:	fa01 f303 	lsl.w	r3, r1, r3
   dacba:	9311      	str	r3, [sp, #68]	; 0x44
   dacbc:	2300      	movs	r3, #0
   dacbe:	930c      	str	r3, [sp, #48]	; 0x30
   dacc0:	eb09 0802 	add.w	r8, r9, r2
   dacc4:	9b04      	ldr	r3, [sp, #16]
   dacc6:	45c1      	cmp	r9, r8
   dacc8:	4417      	add	r7, r2
   dacca:	441f      	add	r7, r3
   daccc:	464b      	mov	r3, r9
   dacce:	bfa8      	it	ge
   dacd0:	4643      	movge	r3, r8
   dacd2:	42bb      	cmp	r3, r7
   dacd4:	bfa8      	it	ge
   dacd6:	463b      	movge	r3, r7
   dacd8:	2b00      	cmp	r3, #0
   dacda:	bfc2      	ittt	gt
   dacdc:	eba8 0803 	subgt.w	r8, r8, r3
   dace0:	1aff      	subgt	r7, r7, r3
   dace2:	eba9 0903 	subgt.w	r9, r9, r3
   dace6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dace8:	2b00      	cmp	r3, #0
   dacea:	dd17      	ble.n	dad1c <_strtod_l+0x75c>
   dacec:	4631      	mov	r1, r6
   dacee:	461a      	mov	r2, r3
   dacf0:	4620      	mov	r0, r4
   dacf2:	f000 fff9 	bl	dbce8 <__pow5mult>
   dacf6:	4606      	mov	r6, r0
   dacf8:	2800      	cmp	r0, #0
   dacfa:	f43f aead 	beq.w	daa58 <_strtod_l+0x498>
   dacfe:	4601      	mov	r1, r0
   dad00:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dad02:	4620      	mov	r0, r4
   dad04:	f000 ff54 	bl	dbbb0 <__multiply>
   dad08:	900f      	str	r0, [sp, #60]	; 0x3c
   dad0a:	2800      	cmp	r0, #0
   dad0c:	f43f aea4 	beq.w	daa58 <_strtod_l+0x498>
   dad10:	991e      	ldr	r1, [sp, #120]	; 0x78
   dad12:	4620      	mov	r0, r4
   dad14:	f000 fe60 	bl	db9d8 <_Bfree>
   dad18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dad1a:	931e      	str	r3, [sp, #120]	; 0x78
   dad1c:	f1b8 0f00 	cmp.w	r8, #0
   dad20:	f300 8091 	bgt.w	dae46 <_strtod_l+0x886>
   dad24:	9b08      	ldr	r3, [sp, #32]
   dad26:	2b00      	cmp	r3, #0
   dad28:	dd08      	ble.n	dad3c <_strtod_l+0x77c>
   dad2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dad2c:	9907      	ldr	r1, [sp, #28]
   dad2e:	4620      	mov	r0, r4
   dad30:	f000 ffda 	bl	dbce8 <__pow5mult>
   dad34:	9007      	str	r0, [sp, #28]
   dad36:	2800      	cmp	r0, #0
   dad38:	f43f ae8e 	beq.w	daa58 <_strtod_l+0x498>
   dad3c:	2f00      	cmp	r7, #0
   dad3e:	dd08      	ble.n	dad52 <_strtod_l+0x792>
   dad40:	9907      	ldr	r1, [sp, #28]
   dad42:	463a      	mov	r2, r7
   dad44:	4620      	mov	r0, r4
   dad46:	f001 f81d 	bl	dbd84 <__lshift>
   dad4a:	9007      	str	r0, [sp, #28]
   dad4c:	2800      	cmp	r0, #0
   dad4e:	f43f ae83 	beq.w	daa58 <_strtod_l+0x498>
   dad52:	f1b9 0f00 	cmp.w	r9, #0
   dad56:	dd08      	ble.n	dad6a <_strtod_l+0x7aa>
   dad58:	4631      	mov	r1, r6
   dad5a:	464a      	mov	r2, r9
   dad5c:	4620      	mov	r0, r4
   dad5e:	f001 f811 	bl	dbd84 <__lshift>
   dad62:	4606      	mov	r6, r0
   dad64:	2800      	cmp	r0, #0
   dad66:	f43f ae77 	beq.w	daa58 <_strtod_l+0x498>
   dad6a:	9a07      	ldr	r2, [sp, #28]
   dad6c:	991e      	ldr	r1, [sp, #120]	; 0x78
   dad6e:	4620      	mov	r0, r4
   dad70:	f001 f883 	bl	dbe7a <__mdiff>
   dad74:	4605      	mov	r5, r0
   dad76:	2800      	cmp	r0, #0
   dad78:	f43f ae6e 	beq.w	daa58 <_strtod_l+0x498>
   dad7c:	68c3      	ldr	r3, [r0, #12]
   dad7e:	930f      	str	r3, [sp, #60]	; 0x3c
   dad80:	2300      	movs	r3, #0
   dad82:	60c3      	str	r3, [r0, #12]
   dad84:	4631      	mov	r1, r6
   dad86:	f001 f85c 	bl	dbe42 <__mcmp>
   dad8a:	2800      	cmp	r0, #0
   dad8c:	da65      	bge.n	dae5a <_strtod_l+0x89a>
   dad8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dad90:	ea53 030a 	orrs.w	r3, r3, sl
   dad94:	f040 8087 	bne.w	daea6 <_strtod_l+0x8e6>
   dad98:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dad9c:	2b00      	cmp	r3, #0
   dad9e:	f040 8082 	bne.w	daea6 <_strtod_l+0x8e6>
   dada2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dada6:	0d1b      	lsrs	r3, r3, #20
   dada8:	051b      	lsls	r3, r3, #20
   dadaa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dadae:	d97a      	bls.n	daea6 <_strtod_l+0x8e6>
   dadb0:	696b      	ldr	r3, [r5, #20]
   dadb2:	b913      	cbnz	r3, dadba <_strtod_l+0x7fa>
   dadb4:	692b      	ldr	r3, [r5, #16]
   dadb6:	2b01      	cmp	r3, #1
   dadb8:	dd75      	ble.n	daea6 <_strtod_l+0x8e6>
   dadba:	4629      	mov	r1, r5
   dadbc:	2201      	movs	r2, #1
   dadbe:	4620      	mov	r0, r4
   dadc0:	f000 ffe0 	bl	dbd84 <__lshift>
   dadc4:	4631      	mov	r1, r6
   dadc6:	4605      	mov	r5, r0
   dadc8:	f001 f83b 	bl	dbe42 <__mcmp>
   dadcc:	2800      	cmp	r0, #0
   dadce:	dd6a      	ble.n	daea6 <_strtod_l+0x8e6>
   dadd0:	9904      	ldr	r1, [sp, #16]
   dadd2:	4a55      	ldr	r2, [pc, #340]	; (daf28 <_strtod_l+0x968>)
   dadd4:	465b      	mov	r3, fp
   dadd6:	2900      	cmp	r1, #0
   dadd8:	f000 8085 	beq.w	daee6 <_strtod_l+0x926>
   daddc:	ea02 010b 	and.w	r1, r2, fp
   dade0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dade4:	dc7f      	bgt.n	daee6 <_strtod_l+0x926>
   dade6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dadea:	f77f aeaa 	ble.w	dab42 <_strtod_l+0x582>
   dadee:	4a4f      	ldr	r2, [pc, #316]	; (daf2c <_strtod_l+0x96c>)
   dadf0:	2300      	movs	r3, #0
   dadf2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dadf6:	4650      	mov	r0, sl
   dadf8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dadfc:	4659      	mov	r1, fp
   dadfe:	f7fe fdf7 	bl	d99f0 <__aeabi_dmul>
   dae02:	460b      	mov	r3, r1
   dae04:	4303      	orrs	r3, r0
   dae06:	bf08      	it	eq
   dae08:	2322      	moveq	r3, #34	; 0x22
   dae0a:	4682      	mov	sl, r0
   dae0c:	468b      	mov	fp, r1
   dae0e:	bf08      	it	eq
   dae10:	6023      	streq	r3, [r4, #0]
   dae12:	e62b      	b.n	daa6c <_strtod_l+0x4ac>
   dae14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dae18:	fa02 f303 	lsl.w	r3, r2, r3
   dae1c:	ea03 0a0a 	and.w	sl, r3, sl
   dae20:	e6de      	b.n	dabe0 <_strtod_l+0x620>
   dae22:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dae26:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dae2a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dae2e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dae32:	fa01 f308 	lsl.w	r3, r1, r8
   dae36:	930c      	str	r3, [sp, #48]	; 0x30
   dae38:	9111      	str	r1, [sp, #68]	; 0x44
   dae3a:	e741      	b.n	dacc0 <_strtod_l+0x700>
   dae3c:	2300      	movs	r3, #0
   dae3e:	930c      	str	r3, [sp, #48]	; 0x30
   dae40:	2301      	movs	r3, #1
   dae42:	9311      	str	r3, [sp, #68]	; 0x44
   dae44:	e73c      	b.n	dacc0 <_strtod_l+0x700>
   dae46:	991e      	ldr	r1, [sp, #120]	; 0x78
   dae48:	4642      	mov	r2, r8
   dae4a:	4620      	mov	r0, r4
   dae4c:	f000 ff9a 	bl	dbd84 <__lshift>
   dae50:	901e      	str	r0, [sp, #120]	; 0x78
   dae52:	2800      	cmp	r0, #0
   dae54:	f47f af66 	bne.w	dad24 <_strtod_l+0x764>
   dae58:	e5fe      	b.n	daa58 <_strtod_l+0x498>
   dae5a:	465f      	mov	r7, fp
   dae5c:	d16e      	bne.n	daf3c <_strtod_l+0x97c>
   dae5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dae60:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dae64:	b342      	cbz	r2, daeb8 <_strtod_l+0x8f8>
   dae66:	4a32      	ldr	r2, [pc, #200]	; (daf30 <_strtod_l+0x970>)
   dae68:	4293      	cmp	r3, r2
   dae6a:	d128      	bne.n	daebe <_strtod_l+0x8fe>
   dae6c:	9b04      	ldr	r3, [sp, #16]
   dae6e:	4650      	mov	r0, sl
   dae70:	b1eb      	cbz	r3, daeae <_strtod_l+0x8ee>
   dae72:	4a2d      	ldr	r2, [pc, #180]	; (daf28 <_strtod_l+0x968>)
   dae74:	403a      	ands	r2, r7
   dae76:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dae7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dae7e:	d819      	bhi.n	daeb4 <_strtod_l+0x8f4>
   dae80:	0d12      	lsrs	r2, r2, #20
   dae82:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dae86:	fa01 f303 	lsl.w	r3, r1, r3
   dae8a:	4298      	cmp	r0, r3
   dae8c:	d117      	bne.n	daebe <_strtod_l+0x8fe>
   dae8e:	4b29      	ldr	r3, [pc, #164]	; (daf34 <_strtod_l+0x974>)
   dae90:	429f      	cmp	r7, r3
   dae92:	d102      	bne.n	dae9a <_strtod_l+0x8da>
   dae94:	3001      	adds	r0, #1
   dae96:	f43f addf 	beq.w	daa58 <_strtod_l+0x498>
   dae9a:	4b23      	ldr	r3, [pc, #140]	; (daf28 <_strtod_l+0x968>)
   dae9c:	403b      	ands	r3, r7
   dae9e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   daea2:	f04f 0a00 	mov.w	sl, #0
   daea6:	9b04      	ldr	r3, [sp, #16]
   daea8:	2b00      	cmp	r3, #0
   daeaa:	d1a0      	bne.n	dadee <_strtod_l+0x82e>
   daeac:	e5de      	b.n	daa6c <_strtod_l+0x4ac>
   daeae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   daeb2:	e7ea      	b.n	dae8a <_strtod_l+0x8ca>
   daeb4:	460b      	mov	r3, r1
   daeb6:	e7e8      	b.n	dae8a <_strtod_l+0x8ca>
   daeb8:	ea53 030a 	orrs.w	r3, r3, sl
   daebc:	d088      	beq.n	dadd0 <_strtod_l+0x810>
   daebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   daec0:	b1db      	cbz	r3, daefa <_strtod_l+0x93a>
   daec2:	423b      	tst	r3, r7
   daec4:	d0ef      	beq.n	daea6 <_strtod_l+0x8e6>
   daec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   daec8:	9a04      	ldr	r2, [sp, #16]
   daeca:	4650      	mov	r0, sl
   daecc:	4659      	mov	r1, fp
   daece:	b1c3      	cbz	r3, daf02 <_strtod_l+0x942>
   daed0:	f7ff fb59 	bl	da586 <sulp>
   daed4:	4602      	mov	r2, r0
   daed6:	460b      	mov	r3, r1
   daed8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   daedc:	f7fe fbd2 	bl	d9684 <__adddf3>
   daee0:	4682      	mov	sl, r0
   daee2:	468b      	mov	fp, r1
   daee4:	e7df      	b.n	daea6 <_strtod_l+0x8e6>
   daee6:	4013      	ands	r3, r2
   daee8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   daeec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   daef0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   daef4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   daef8:	e7d5      	b.n	daea6 <_strtod_l+0x8e6>
   daefa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   daefc:	ea13 0f0a 	tst.w	r3, sl
   daf00:	e7e0      	b.n	daec4 <_strtod_l+0x904>
   daf02:	f7ff fb40 	bl	da586 <sulp>
   daf06:	4602      	mov	r2, r0
   daf08:	460b      	mov	r3, r1
   daf0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   daf0e:	f7fe fbb7 	bl	d9680 <__aeabi_dsub>
   daf12:	2200      	movs	r2, #0
   daf14:	2300      	movs	r3, #0
   daf16:	4682      	mov	sl, r0
   daf18:	468b      	mov	fp, r1
   daf1a:	f7fe ffd1 	bl	d9ec0 <__aeabi_dcmpeq>
   daf1e:	2800      	cmp	r0, #0
   daf20:	d0c1      	beq.n	daea6 <_strtod_l+0x8e6>
   daf22:	e60e      	b.n	dab42 <_strtod_l+0x582>
   daf24:	fffffc02 	.word	0xfffffc02
   daf28:	7ff00000 	.word	0x7ff00000
   daf2c:	39500000 	.word	0x39500000
   daf30:	000fffff 	.word	0x000fffff
   daf34:	7fefffff 	.word	0x7fefffff
   daf38:	000dcee0 	.word	0x000dcee0
   daf3c:	4631      	mov	r1, r6
   daf3e:	4628      	mov	r0, r5
   daf40:	f001 f8de 	bl	dc100 <__ratio>
   daf44:	ec59 8b10 	vmov	r8, r9, d0
   daf48:	ee10 0a10 	vmov	r0, s0
   daf4c:	2200      	movs	r2, #0
   daf4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   daf52:	4649      	mov	r1, r9
   daf54:	f7fe ffc8 	bl	d9ee8 <__aeabi_dcmple>
   daf58:	2800      	cmp	r0, #0
   daf5a:	d07c      	beq.n	db056 <_strtod_l+0xa96>
   daf5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   daf5e:	2b00      	cmp	r3, #0
   daf60:	d04c      	beq.n	daffc <_strtod_l+0xa3c>
   daf62:	4b95      	ldr	r3, [pc, #596]	; (db1b8 <_strtod_l+0xbf8>)
   daf64:	2200      	movs	r2, #0
   daf66:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   daf6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; db1b8 <_strtod_l+0xbf8>
   daf6e:	f04f 0800 	mov.w	r8, #0
   daf72:	4b92      	ldr	r3, [pc, #584]	; (db1bc <_strtod_l+0xbfc>)
   daf74:	403b      	ands	r3, r7
   daf76:	9311      	str	r3, [sp, #68]	; 0x44
   daf78:	9a11      	ldr	r2, [sp, #68]	; 0x44
   daf7a:	4b91      	ldr	r3, [pc, #580]	; (db1c0 <_strtod_l+0xc00>)
   daf7c:	429a      	cmp	r2, r3
   daf7e:	f040 80b2 	bne.w	db0e6 <_strtod_l+0xb26>
   daf82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   daf86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   daf8a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   daf8e:	ec4b ab10 	vmov	d0, sl, fp
   daf92:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   daf96:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   daf9a:	f000 ffe5 	bl	dbf68 <__ulp>
   daf9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dafa2:	ec53 2b10 	vmov	r2, r3, d0
   dafa6:	f7fe fd23 	bl	d99f0 <__aeabi_dmul>
   dafaa:	4652      	mov	r2, sl
   dafac:	465b      	mov	r3, fp
   dafae:	f7fe fb69 	bl	d9684 <__adddf3>
   dafb2:	460b      	mov	r3, r1
   dafb4:	4981      	ldr	r1, [pc, #516]	; (db1bc <_strtod_l+0xbfc>)
   dafb6:	4a83      	ldr	r2, [pc, #524]	; (db1c4 <_strtod_l+0xc04>)
   dafb8:	4019      	ands	r1, r3
   dafba:	4291      	cmp	r1, r2
   dafbc:	4682      	mov	sl, r0
   dafbe:	d95e      	bls.n	db07e <_strtod_l+0xabe>
   dafc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dafc2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dafc6:	4293      	cmp	r3, r2
   dafc8:	d103      	bne.n	dafd2 <_strtod_l+0xa12>
   dafca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dafcc:	3301      	adds	r3, #1
   dafce:	f43f ad43 	beq.w	daa58 <_strtod_l+0x498>
   dafd2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; db1d0 <_strtod_l+0xc10>
   dafd6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dafda:	991e      	ldr	r1, [sp, #120]	; 0x78
   dafdc:	4620      	mov	r0, r4
   dafde:	f000 fcfb 	bl	db9d8 <_Bfree>
   dafe2:	9907      	ldr	r1, [sp, #28]
   dafe4:	4620      	mov	r0, r4
   dafe6:	f000 fcf7 	bl	db9d8 <_Bfree>
   dafea:	4631      	mov	r1, r6
   dafec:	4620      	mov	r0, r4
   dafee:	f000 fcf3 	bl	db9d8 <_Bfree>
   daff2:	4629      	mov	r1, r5
   daff4:	4620      	mov	r0, r4
   daff6:	f000 fcef 	bl	db9d8 <_Bfree>
   daffa:	e613      	b.n	dac24 <_strtod_l+0x664>
   daffc:	f1ba 0f00 	cmp.w	sl, #0
   db000:	d11b      	bne.n	db03a <_strtod_l+0xa7a>
   db002:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db006:	b9f3      	cbnz	r3, db046 <_strtod_l+0xa86>
   db008:	4b6b      	ldr	r3, [pc, #428]	; (db1b8 <_strtod_l+0xbf8>)
   db00a:	2200      	movs	r2, #0
   db00c:	4640      	mov	r0, r8
   db00e:	4649      	mov	r1, r9
   db010:	f7fe ff60 	bl	d9ed4 <__aeabi_dcmplt>
   db014:	b9d0      	cbnz	r0, db04c <_strtod_l+0xa8c>
   db016:	4640      	mov	r0, r8
   db018:	4649      	mov	r1, r9
   db01a:	4b6b      	ldr	r3, [pc, #428]	; (db1c8 <_strtod_l+0xc08>)
   db01c:	2200      	movs	r2, #0
   db01e:	f7fe fce7 	bl	d99f0 <__aeabi_dmul>
   db022:	4680      	mov	r8, r0
   db024:	4689      	mov	r9, r1
   db026:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   db02a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   db02e:	931b      	str	r3, [sp, #108]	; 0x6c
   db030:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   db034:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db038:	e79b      	b.n	daf72 <_strtod_l+0x9b2>
   db03a:	f1ba 0f01 	cmp.w	sl, #1
   db03e:	d102      	bne.n	db046 <_strtod_l+0xa86>
   db040:	2f00      	cmp	r7, #0
   db042:	f43f ad7e 	beq.w	dab42 <_strtod_l+0x582>
   db046:	4b61      	ldr	r3, [pc, #388]	; (db1cc <_strtod_l+0xc0c>)
   db048:	2200      	movs	r2, #0
   db04a:	e78c      	b.n	daf66 <_strtod_l+0x9a6>
   db04c:	f8df 9178 	ldr.w	r9, [pc, #376]	; db1c8 <_strtod_l+0xc08>
   db050:	f04f 0800 	mov.w	r8, #0
   db054:	e7e7      	b.n	db026 <_strtod_l+0xa66>
   db056:	4b5c      	ldr	r3, [pc, #368]	; (db1c8 <_strtod_l+0xc08>)
   db058:	4640      	mov	r0, r8
   db05a:	4649      	mov	r1, r9
   db05c:	2200      	movs	r2, #0
   db05e:	f7fe fcc7 	bl	d99f0 <__aeabi_dmul>
   db062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db064:	4680      	mov	r8, r0
   db066:	4689      	mov	r9, r1
   db068:	b933      	cbnz	r3, db078 <_strtod_l+0xab8>
   db06a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db06e:	9012      	str	r0, [sp, #72]	; 0x48
   db070:	9313      	str	r3, [sp, #76]	; 0x4c
   db072:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   db076:	e7dd      	b.n	db034 <_strtod_l+0xa74>
   db078:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   db07c:	e7f9      	b.n	db072 <_strtod_l+0xab2>
   db07e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   db082:	9b04      	ldr	r3, [sp, #16]
   db084:	2b00      	cmp	r3, #0
   db086:	d1a8      	bne.n	dafda <_strtod_l+0xa1a>
   db088:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db08c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db08e:	0d1b      	lsrs	r3, r3, #20
   db090:	051b      	lsls	r3, r3, #20
   db092:	429a      	cmp	r2, r3
   db094:	d1a1      	bne.n	dafda <_strtod_l+0xa1a>
   db096:	4640      	mov	r0, r8
   db098:	4649      	mov	r1, r9
   db09a:	f001 f8b5 	bl	dc208 <__aeabi_d2lz>
   db09e:	f7fe fc79 	bl	d9994 <__aeabi_l2d>
   db0a2:	4602      	mov	r2, r0
   db0a4:	460b      	mov	r3, r1
   db0a6:	4640      	mov	r0, r8
   db0a8:	4649      	mov	r1, r9
   db0aa:	f7fe fae9 	bl	d9680 <__aeabi_dsub>
   db0ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db0b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db0b4:	ea43 030a 	orr.w	r3, r3, sl
   db0b8:	4313      	orrs	r3, r2
   db0ba:	4680      	mov	r8, r0
   db0bc:	4689      	mov	r9, r1
   db0be:	d053      	beq.n	db168 <_strtod_l+0xba8>
   db0c0:	a335      	add	r3, pc, #212	; (adr r3, db198 <_strtod_l+0xbd8>)
   db0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   db0c6:	f7fe ff05 	bl	d9ed4 <__aeabi_dcmplt>
   db0ca:	2800      	cmp	r0, #0
   db0cc:	f47f acce 	bne.w	daa6c <_strtod_l+0x4ac>
   db0d0:	a333      	add	r3, pc, #204	; (adr r3, db1a0 <_strtod_l+0xbe0>)
   db0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   db0d6:	4640      	mov	r0, r8
   db0d8:	4649      	mov	r1, r9
   db0da:	f7fe ff19 	bl	d9f10 <__aeabi_dcmpgt>
   db0de:	2800      	cmp	r0, #0
   db0e0:	f43f af7b 	beq.w	dafda <_strtod_l+0xa1a>
   db0e4:	e4c2      	b.n	daa6c <_strtod_l+0x4ac>
   db0e6:	9b04      	ldr	r3, [sp, #16]
   db0e8:	b333      	cbz	r3, db138 <_strtod_l+0xb78>
   db0ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db0ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db0f0:	d822      	bhi.n	db138 <_strtod_l+0xb78>
   db0f2:	a32d      	add	r3, pc, #180	; (adr r3, db1a8 <_strtod_l+0xbe8>)
   db0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   db0f8:	4640      	mov	r0, r8
   db0fa:	4649      	mov	r1, r9
   db0fc:	f7fe fef4 	bl	d9ee8 <__aeabi_dcmple>
   db100:	b1a0      	cbz	r0, db12c <_strtod_l+0xb6c>
   db102:	4649      	mov	r1, r9
   db104:	4640      	mov	r0, r8
   db106:	f7fe ff35 	bl	d9f74 <__aeabi_d2uiz>
   db10a:	2801      	cmp	r0, #1
   db10c:	bf38      	it	cc
   db10e:	2001      	movcc	r0, #1
   db110:	f7fe fbf4 	bl	d98fc <__aeabi_ui2d>
   db114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db116:	4680      	mov	r8, r0
   db118:	4689      	mov	r9, r1
   db11a:	bb13      	cbnz	r3, db162 <_strtod_l+0xba2>
   db11c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db120:	9014      	str	r0, [sp, #80]	; 0x50
   db122:	9315      	str	r3, [sp, #84]	; 0x54
   db124:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   db128:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db12c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db12e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db130:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   db134:	1a9b      	subs	r3, r3, r2
   db136:	930d      	str	r3, [sp, #52]	; 0x34
   db138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db13c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   db140:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db144:	f000 ff10 	bl	dbf68 <__ulp>
   db148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db14c:	ec53 2b10 	vmov	r2, r3, d0
   db150:	f7fe fc4e 	bl	d99f0 <__aeabi_dmul>
   db154:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db158:	f7fe fa94 	bl	d9684 <__adddf3>
   db15c:	4682      	mov	sl, r0
   db15e:	468b      	mov	fp, r1
   db160:	e78f      	b.n	db082 <_strtod_l+0xac2>
   db162:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   db166:	e7dd      	b.n	db124 <_strtod_l+0xb64>
   db168:	a311      	add	r3, pc, #68	; (adr r3, db1b0 <_strtod_l+0xbf0>)
   db16a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db16e:	f7fe feb1 	bl	d9ed4 <__aeabi_dcmplt>
   db172:	e7b4      	b.n	db0de <_strtod_l+0xb1e>
   db174:	2300      	movs	r3, #0
   db176:	930e      	str	r3, [sp, #56]	; 0x38
   db178:	9a19      	ldr	r2, [sp, #100]	; 0x64
   db17a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db17c:	6013      	str	r3, [r2, #0]
   db17e:	f7ff ba65 	b.w	da64c <_strtod_l+0x8c>
   db182:	2b65      	cmp	r3, #101	; 0x65
   db184:	f43f ab5d 	beq.w	da842 <_strtod_l+0x282>
   db188:	2b45      	cmp	r3, #69	; 0x45
   db18a:	f43f ab5a 	beq.w	da842 <_strtod_l+0x282>
   db18e:	2201      	movs	r2, #1
   db190:	f7ff bb92 	b.w	da8b8 <_strtod_l+0x2f8>
   db194:	f3af 8000 	nop.w
   db198:	94a03595 	.word	0x94a03595
   db19c:	3fdfffff 	.word	0x3fdfffff
   db1a0:	35afe535 	.word	0x35afe535
   db1a4:	3fe00000 	.word	0x3fe00000
   db1a8:	ffc00000 	.word	0xffc00000
   db1ac:	41dfffff 	.word	0x41dfffff
   db1b0:	94a03595 	.word	0x94a03595
   db1b4:	3fcfffff 	.word	0x3fcfffff
   db1b8:	3ff00000 	.word	0x3ff00000
   db1bc:	7ff00000 	.word	0x7ff00000
   db1c0:	7fe00000 	.word	0x7fe00000
   db1c4:	7c9fffff 	.word	0x7c9fffff
   db1c8:	3fe00000 	.word	0x3fe00000
   db1cc:	bff00000 	.word	0xbff00000
   db1d0:	7fefffff 	.word	0x7fefffff

000db1d4 <strtod>:
   db1d4:	460a      	mov	r2, r1
   db1d6:	4601      	mov	r1, r0
   db1d8:	4802      	ldr	r0, [pc, #8]	; (db1e4 <strtod+0x10>)
   db1da:	4b03      	ldr	r3, [pc, #12]	; (db1e8 <strtod+0x14>)
   db1dc:	6800      	ldr	r0, [r0, #0]
   db1de:	f7ff b9ef 	b.w	da5c0 <_strtod_l>
   db1e2:	bf00      	nop
   db1e4:	2003e254 	.word	0x2003e254
   db1e8:	2003e2bc 	.word	0x2003e2bc

000db1ec <strtok>:
   db1ec:	4b13      	ldr	r3, [pc, #76]	; (db23c <strtok+0x50>)
   db1ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   db1f0:	681e      	ldr	r6, [r3, #0]
   db1f2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   db1f4:	4605      	mov	r5, r0
   db1f6:	b9c4      	cbnz	r4, db22a <strtok+0x3e>
   db1f8:	2050      	movs	r0, #80	; 0x50
   db1fa:	9101      	str	r1, [sp, #4]
   db1fc:	f7fb fed0 	bl	d6fa0 <malloc>
   db200:	65b0      	str	r0, [r6, #88]	; 0x58
   db202:	e9c0 4400 	strd	r4, r4, [r0]
   db206:	e9c0 4402 	strd	r4, r4, [r0, #8]
   db20a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   db20e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   db212:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   db216:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   db21a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   db21e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   db222:	9901      	ldr	r1, [sp, #4]
   db224:	6184      	str	r4, [r0, #24]
   db226:	7704      	strb	r4, [r0, #28]
   db228:	6244      	str	r4, [r0, #36]	; 0x24
   db22a:	6db2      	ldr	r2, [r6, #88]	; 0x58
   db22c:	2301      	movs	r3, #1
   db22e:	4628      	mov	r0, r5
   db230:	b002      	add	sp, #8
   db232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db236:	f000 b803 	b.w	db240 <__strtok_r>
   db23a:	bf00      	nop
   db23c:	2003e254 	.word	0x2003e254

000db240 <__strtok_r>:
   db240:	b5f0      	push	{r4, r5, r6, r7, lr}
   db242:	b908      	cbnz	r0, db248 <__strtok_r+0x8>
   db244:	6810      	ldr	r0, [r2, #0]
   db246:	b188      	cbz	r0, db26c <__strtok_r+0x2c>
   db248:	4604      	mov	r4, r0
   db24a:	4620      	mov	r0, r4
   db24c:	f814 5b01 	ldrb.w	r5, [r4], #1
   db250:	460f      	mov	r7, r1
   db252:	f817 6b01 	ldrb.w	r6, [r7], #1
   db256:	b91e      	cbnz	r6, db260 <__strtok_r+0x20>
   db258:	b965      	cbnz	r5, db274 <__strtok_r+0x34>
   db25a:	6015      	str	r5, [r2, #0]
   db25c:	4628      	mov	r0, r5
   db25e:	e005      	b.n	db26c <__strtok_r+0x2c>
   db260:	42b5      	cmp	r5, r6
   db262:	d1f6      	bne.n	db252 <__strtok_r+0x12>
   db264:	2b00      	cmp	r3, #0
   db266:	d1f0      	bne.n	db24a <__strtok_r+0xa>
   db268:	6014      	str	r4, [r2, #0]
   db26a:	7003      	strb	r3, [r0, #0]
   db26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db26e:	461c      	mov	r4, r3
   db270:	e00c      	b.n	db28c <__strtok_r+0x4c>
   db272:	b915      	cbnz	r5, db27a <__strtok_r+0x3a>
   db274:	f814 3b01 	ldrb.w	r3, [r4], #1
   db278:	460e      	mov	r6, r1
   db27a:	f816 5b01 	ldrb.w	r5, [r6], #1
   db27e:	42ab      	cmp	r3, r5
   db280:	d1f7      	bne.n	db272 <__strtok_r+0x32>
   db282:	2b00      	cmp	r3, #0
   db284:	d0f3      	beq.n	db26e <__strtok_r+0x2e>
   db286:	2300      	movs	r3, #0
   db288:	f804 3c01 	strb.w	r3, [r4, #-1]
   db28c:	6014      	str	r4, [r2, #0]
   db28e:	e7ed      	b.n	db26c <__strtok_r+0x2c>

000db290 <rshift>:
   db290:	6903      	ldr	r3, [r0, #16]
   db292:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   db296:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db29a:	ea4f 1261 	mov.w	r2, r1, asr #5
   db29e:	f100 0414 	add.w	r4, r0, #20
   db2a2:	dd45      	ble.n	db330 <rshift+0xa0>
   db2a4:	f011 011f 	ands.w	r1, r1, #31
   db2a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   db2ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   db2b0:	d10c      	bne.n	db2cc <rshift+0x3c>
   db2b2:	f100 0710 	add.w	r7, r0, #16
   db2b6:	4629      	mov	r1, r5
   db2b8:	42b1      	cmp	r1, r6
   db2ba:	d334      	bcc.n	db326 <rshift+0x96>
   db2bc:	1a9b      	subs	r3, r3, r2
   db2be:	009b      	lsls	r3, r3, #2
   db2c0:	1eea      	subs	r2, r5, #3
   db2c2:	4296      	cmp	r6, r2
   db2c4:	bf38      	it	cc
   db2c6:	2300      	movcc	r3, #0
   db2c8:	4423      	add	r3, r4
   db2ca:	e015      	b.n	db2f8 <rshift+0x68>
   db2cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   db2d0:	f1c1 0820 	rsb	r8, r1, #32
   db2d4:	40cf      	lsrs	r7, r1
   db2d6:	f105 0e04 	add.w	lr, r5, #4
   db2da:	46a1      	mov	r9, r4
   db2dc:	4576      	cmp	r6, lr
   db2de:	46f4      	mov	ip, lr
   db2e0:	d815      	bhi.n	db30e <rshift+0x7e>
   db2e2:	1a9b      	subs	r3, r3, r2
   db2e4:	009a      	lsls	r2, r3, #2
   db2e6:	3a04      	subs	r2, #4
   db2e8:	3501      	adds	r5, #1
   db2ea:	42ae      	cmp	r6, r5
   db2ec:	bf38      	it	cc
   db2ee:	2200      	movcc	r2, #0
   db2f0:	18a3      	adds	r3, r4, r2
   db2f2:	50a7      	str	r7, [r4, r2]
   db2f4:	b107      	cbz	r7, db2f8 <rshift+0x68>
   db2f6:	3304      	adds	r3, #4
   db2f8:	1b1a      	subs	r2, r3, r4
   db2fa:	42a3      	cmp	r3, r4
   db2fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   db300:	bf08      	it	eq
   db302:	2300      	moveq	r3, #0
   db304:	6102      	str	r2, [r0, #16]
   db306:	bf08      	it	eq
   db308:	6143      	streq	r3, [r0, #20]
   db30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db30e:	f8dc c000 	ldr.w	ip, [ip]
   db312:	fa0c fc08 	lsl.w	ip, ip, r8
   db316:	ea4c 0707 	orr.w	r7, ip, r7
   db31a:	f849 7b04 	str.w	r7, [r9], #4
   db31e:	f85e 7b04 	ldr.w	r7, [lr], #4
   db322:	40cf      	lsrs	r7, r1
   db324:	e7da      	b.n	db2dc <rshift+0x4c>
   db326:	f851 cb04 	ldr.w	ip, [r1], #4
   db32a:	f847 cf04 	str.w	ip, [r7, #4]!
   db32e:	e7c3      	b.n	db2b8 <rshift+0x28>
   db330:	4623      	mov	r3, r4
   db332:	e7e1      	b.n	db2f8 <rshift+0x68>

000db334 <__hexdig_fun>:
   db334:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   db338:	2b09      	cmp	r3, #9
   db33a:	d802      	bhi.n	db342 <__hexdig_fun+0xe>
   db33c:	3820      	subs	r0, #32
   db33e:	b2c0      	uxtb	r0, r0
   db340:	4770      	bx	lr
   db342:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   db346:	2b05      	cmp	r3, #5
   db348:	d801      	bhi.n	db34e <__hexdig_fun+0x1a>
   db34a:	3847      	subs	r0, #71	; 0x47
   db34c:	e7f7      	b.n	db33e <__hexdig_fun+0xa>
   db34e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   db352:	2b05      	cmp	r3, #5
   db354:	d801      	bhi.n	db35a <__hexdig_fun+0x26>
   db356:	3827      	subs	r0, #39	; 0x27
   db358:	e7f1      	b.n	db33e <__hexdig_fun+0xa>
   db35a:	2000      	movs	r0, #0
   db35c:	4770      	bx	lr
	...

000db360 <__gethex>:
   db360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db364:	ed2d 8b02 	vpush	{d8}
   db368:	b089      	sub	sp, #36	; 0x24
   db36a:	ee08 0a10 	vmov	s16, r0
   db36e:	9304      	str	r3, [sp, #16]
   db370:	4bbc      	ldr	r3, [pc, #752]	; (db664 <__gethex+0x304>)
   db372:	681b      	ldr	r3, [r3, #0]
   db374:	9301      	str	r3, [sp, #4]
   db376:	4618      	mov	r0, r3
   db378:	468b      	mov	fp, r1
   db37a:	4690      	mov	r8, r2
   db37c:	f7ff f8bf 	bl	da4fe <strlen>
   db380:	9b01      	ldr	r3, [sp, #4]
   db382:	f8db 2000 	ldr.w	r2, [fp]
   db386:	4403      	add	r3, r0
   db388:	4682      	mov	sl, r0
   db38a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   db38e:	9305      	str	r3, [sp, #20]
   db390:	1c93      	adds	r3, r2, #2
   db392:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   db396:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   db39a:	32fe      	adds	r2, #254	; 0xfe
   db39c:	18d1      	adds	r1, r2, r3
   db39e:	461f      	mov	r7, r3
   db3a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   db3a4:	9100      	str	r1, [sp, #0]
   db3a6:	2830      	cmp	r0, #48	; 0x30
   db3a8:	d0f8      	beq.n	db39c <__gethex+0x3c>
   db3aa:	f7ff ffc3 	bl	db334 <__hexdig_fun>
   db3ae:	4604      	mov	r4, r0
   db3b0:	2800      	cmp	r0, #0
   db3b2:	d13a      	bne.n	db42a <__gethex+0xca>
   db3b4:	9901      	ldr	r1, [sp, #4]
   db3b6:	4652      	mov	r2, sl
   db3b8:	4638      	mov	r0, r7
   db3ba:	f7ff f8a8 	bl	da50e <strncmp>
   db3be:	4605      	mov	r5, r0
   db3c0:	2800      	cmp	r0, #0
   db3c2:	d168      	bne.n	db496 <__gethex+0x136>
   db3c4:	f817 000a 	ldrb.w	r0, [r7, sl]
   db3c8:	eb07 060a 	add.w	r6, r7, sl
   db3cc:	f7ff ffb2 	bl	db334 <__hexdig_fun>
   db3d0:	2800      	cmp	r0, #0
   db3d2:	d062      	beq.n	db49a <__gethex+0x13a>
   db3d4:	4633      	mov	r3, r6
   db3d6:	7818      	ldrb	r0, [r3, #0]
   db3d8:	2830      	cmp	r0, #48	; 0x30
   db3da:	461f      	mov	r7, r3
   db3dc:	f103 0301 	add.w	r3, r3, #1
   db3e0:	d0f9      	beq.n	db3d6 <__gethex+0x76>
   db3e2:	f7ff ffa7 	bl	db334 <__hexdig_fun>
   db3e6:	2301      	movs	r3, #1
   db3e8:	fab0 f480 	clz	r4, r0
   db3ec:	0964      	lsrs	r4, r4, #5
   db3ee:	4635      	mov	r5, r6
   db3f0:	9300      	str	r3, [sp, #0]
   db3f2:	463a      	mov	r2, r7
   db3f4:	4616      	mov	r6, r2
   db3f6:	3201      	adds	r2, #1
   db3f8:	7830      	ldrb	r0, [r6, #0]
   db3fa:	f7ff ff9b 	bl	db334 <__hexdig_fun>
   db3fe:	2800      	cmp	r0, #0
   db400:	d1f8      	bne.n	db3f4 <__gethex+0x94>
   db402:	9901      	ldr	r1, [sp, #4]
   db404:	4652      	mov	r2, sl
   db406:	4630      	mov	r0, r6
   db408:	f7ff f881 	bl	da50e <strncmp>
   db40c:	b980      	cbnz	r0, db430 <__gethex+0xd0>
   db40e:	b94d      	cbnz	r5, db424 <__gethex+0xc4>
   db410:	eb06 050a 	add.w	r5, r6, sl
   db414:	462a      	mov	r2, r5
   db416:	4616      	mov	r6, r2
   db418:	3201      	adds	r2, #1
   db41a:	7830      	ldrb	r0, [r6, #0]
   db41c:	f7ff ff8a 	bl	db334 <__hexdig_fun>
   db420:	2800      	cmp	r0, #0
   db422:	d1f8      	bne.n	db416 <__gethex+0xb6>
   db424:	1bad      	subs	r5, r5, r6
   db426:	00ad      	lsls	r5, r5, #2
   db428:	e004      	b.n	db434 <__gethex+0xd4>
   db42a:	2400      	movs	r4, #0
   db42c:	4625      	mov	r5, r4
   db42e:	e7e0      	b.n	db3f2 <__gethex+0x92>
   db430:	2d00      	cmp	r5, #0
   db432:	d1f7      	bne.n	db424 <__gethex+0xc4>
   db434:	7833      	ldrb	r3, [r6, #0]
   db436:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db43a:	2b50      	cmp	r3, #80	; 0x50
   db43c:	d13b      	bne.n	db4b6 <__gethex+0x156>
   db43e:	7873      	ldrb	r3, [r6, #1]
   db440:	2b2b      	cmp	r3, #43	; 0x2b
   db442:	d02c      	beq.n	db49e <__gethex+0x13e>
   db444:	2b2d      	cmp	r3, #45	; 0x2d
   db446:	d02e      	beq.n	db4a6 <__gethex+0x146>
   db448:	1c71      	adds	r1, r6, #1
   db44a:	f04f 0900 	mov.w	r9, #0
   db44e:	7808      	ldrb	r0, [r1, #0]
   db450:	f7ff ff70 	bl	db334 <__hexdig_fun>
   db454:	1e43      	subs	r3, r0, #1
   db456:	b2db      	uxtb	r3, r3
   db458:	2b18      	cmp	r3, #24
   db45a:	d82c      	bhi.n	db4b6 <__gethex+0x156>
   db45c:	f1a0 0210 	sub.w	r2, r0, #16
   db460:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   db464:	f7ff ff66 	bl	db334 <__hexdig_fun>
   db468:	1e43      	subs	r3, r0, #1
   db46a:	b2db      	uxtb	r3, r3
   db46c:	2b18      	cmp	r3, #24
   db46e:	d91d      	bls.n	db4ac <__gethex+0x14c>
   db470:	f1b9 0f00 	cmp.w	r9, #0
   db474:	d000      	beq.n	db478 <__gethex+0x118>
   db476:	4252      	negs	r2, r2
   db478:	4415      	add	r5, r2
   db47a:	f8cb 1000 	str.w	r1, [fp]
   db47e:	b1e4      	cbz	r4, db4ba <__gethex+0x15a>
   db480:	9b00      	ldr	r3, [sp, #0]
   db482:	2b00      	cmp	r3, #0
   db484:	bf14      	ite	ne
   db486:	2700      	movne	r7, #0
   db488:	2706      	moveq	r7, #6
   db48a:	4638      	mov	r0, r7
   db48c:	b009      	add	sp, #36	; 0x24
   db48e:	ecbd 8b02 	vpop	{d8}
   db492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db496:	463e      	mov	r6, r7
   db498:	4625      	mov	r5, r4
   db49a:	2401      	movs	r4, #1
   db49c:	e7ca      	b.n	db434 <__gethex+0xd4>
   db49e:	f04f 0900 	mov.w	r9, #0
   db4a2:	1cb1      	adds	r1, r6, #2
   db4a4:	e7d3      	b.n	db44e <__gethex+0xee>
   db4a6:	f04f 0901 	mov.w	r9, #1
   db4aa:	e7fa      	b.n	db4a2 <__gethex+0x142>
   db4ac:	230a      	movs	r3, #10
   db4ae:	fb03 0202 	mla	r2, r3, r2, r0
   db4b2:	3a10      	subs	r2, #16
   db4b4:	e7d4      	b.n	db460 <__gethex+0x100>
   db4b6:	4631      	mov	r1, r6
   db4b8:	e7df      	b.n	db47a <__gethex+0x11a>
   db4ba:	1bf3      	subs	r3, r6, r7
   db4bc:	3b01      	subs	r3, #1
   db4be:	4621      	mov	r1, r4
   db4c0:	2b07      	cmp	r3, #7
   db4c2:	dc52      	bgt.n	db56a <__gethex+0x20a>
   db4c4:	ee18 0a10 	vmov	r0, s16
   db4c8:	f000 fa52 	bl	db970 <_Balloc>
   db4cc:	f04f 0b00 	mov.w	fp, #0
   db4d0:	f100 0914 	add.w	r9, r0, #20
   db4d4:	f1ca 0301 	rsb	r3, sl, #1
   db4d8:	4604      	mov	r4, r0
   db4da:	f8cd 9008 	str.w	r9, [sp, #8]
   db4de:	f8cd b000 	str.w	fp, [sp]
   db4e2:	9306      	str	r3, [sp, #24]
   db4e4:	42b7      	cmp	r7, r6
   db4e6:	d343      	bcc.n	db570 <__gethex+0x210>
   db4e8:	9802      	ldr	r0, [sp, #8]
   db4ea:	9b00      	ldr	r3, [sp, #0]
   db4ec:	f840 3b04 	str.w	r3, [r0], #4
   db4f0:	eba0 0009 	sub.w	r0, r0, r9
   db4f4:	1080      	asrs	r0, r0, #2
   db4f6:	0146      	lsls	r6, r0, #5
   db4f8:	6120      	str	r0, [r4, #16]
   db4fa:	4618      	mov	r0, r3
   db4fc:	f000 faff 	bl	dbafe <__hi0bits>
   db500:	1a30      	subs	r0, r6, r0
   db502:	f8d8 6000 	ldr.w	r6, [r8]
   db506:	42b0      	cmp	r0, r6
   db508:	dd66      	ble.n	db5d8 <__gethex+0x278>
   db50a:	1b87      	subs	r7, r0, r6
   db50c:	4639      	mov	r1, r7
   db50e:	4620      	mov	r0, r4
   db510:	f000 fe4c 	bl	dc1ac <__any_on>
   db514:	4682      	mov	sl, r0
   db516:	b1a8      	cbz	r0, db544 <__gethex+0x1e4>
   db518:	1e7b      	subs	r3, r7, #1
   db51a:	1159      	asrs	r1, r3, #5
   db51c:	f003 021f 	and.w	r2, r3, #31
   db520:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   db524:	f04f 0a01 	mov.w	sl, #1
   db528:	fa0a f202 	lsl.w	r2, sl, r2
   db52c:	420a      	tst	r2, r1
   db52e:	d009      	beq.n	db544 <__gethex+0x1e4>
   db530:	4553      	cmp	r3, sl
   db532:	dd05      	ble.n	db540 <__gethex+0x1e0>
   db534:	1eb9      	subs	r1, r7, #2
   db536:	4620      	mov	r0, r4
   db538:	f000 fe38 	bl	dc1ac <__any_on>
   db53c:	2800      	cmp	r0, #0
   db53e:	d148      	bne.n	db5d2 <__gethex+0x272>
   db540:	f04f 0a02 	mov.w	sl, #2
   db544:	4639      	mov	r1, r7
   db546:	4620      	mov	r0, r4
   db548:	f7ff fea2 	bl	db290 <rshift>
   db54c:	443d      	add	r5, r7
   db54e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db552:	42ab      	cmp	r3, r5
   db554:	da4f      	bge.n	db5f6 <__gethex+0x296>
   db556:	ee18 0a10 	vmov	r0, s16
   db55a:	4621      	mov	r1, r4
   db55c:	f000 fa3c 	bl	db9d8 <_Bfree>
   db560:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db562:	2300      	movs	r3, #0
   db564:	6013      	str	r3, [r2, #0]
   db566:	27a3      	movs	r7, #163	; 0xa3
   db568:	e78f      	b.n	db48a <__gethex+0x12a>
   db56a:	3101      	adds	r1, #1
   db56c:	105b      	asrs	r3, r3, #1
   db56e:	e7a7      	b.n	db4c0 <__gethex+0x160>
   db570:	1e73      	subs	r3, r6, #1
   db572:	9a05      	ldr	r2, [sp, #20]
   db574:	9303      	str	r3, [sp, #12]
   db576:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   db57a:	4293      	cmp	r3, r2
   db57c:	d019      	beq.n	db5b2 <__gethex+0x252>
   db57e:	f1bb 0f20 	cmp.w	fp, #32
   db582:	d107      	bne.n	db594 <__gethex+0x234>
   db584:	9b02      	ldr	r3, [sp, #8]
   db586:	9a00      	ldr	r2, [sp, #0]
   db588:	f843 2b04 	str.w	r2, [r3], #4
   db58c:	9302      	str	r3, [sp, #8]
   db58e:	2300      	movs	r3, #0
   db590:	9300      	str	r3, [sp, #0]
   db592:	469b      	mov	fp, r3
   db594:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   db598:	f7ff fecc 	bl	db334 <__hexdig_fun>
   db59c:	9b00      	ldr	r3, [sp, #0]
   db59e:	f000 000f 	and.w	r0, r0, #15
   db5a2:	fa00 f00b 	lsl.w	r0, r0, fp
   db5a6:	4303      	orrs	r3, r0
   db5a8:	9300      	str	r3, [sp, #0]
   db5aa:	f10b 0b04 	add.w	fp, fp, #4
   db5ae:	9b03      	ldr	r3, [sp, #12]
   db5b0:	e00d      	b.n	db5ce <__gethex+0x26e>
   db5b2:	9b03      	ldr	r3, [sp, #12]
   db5b4:	9a06      	ldr	r2, [sp, #24]
   db5b6:	4413      	add	r3, r2
   db5b8:	42bb      	cmp	r3, r7
   db5ba:	d3e0      	bcc.n	db57e <__gethex+0x21e>
   db5bc:	4618      	mov	r0, r3
   db5be:	9901      	ldr	r1, [sp, #4]
   db5c0:	9307      	str	r3, [sp, #28]
   db5c2:	4652      	mov	r2, sl
   db5c4:	f7fe ffa3 	bl	da50e <strncmp>
   db5c8:	9b07      	ldr	r3, [sp, #28]
   db5ca:	2800      	cmp	r0, #0
   db5cc:	d1d7      	bne.n	db57e <__gethex+0x21e>
   db5ce:	461e      	mov	r6, r3
   db5d0:	e788      	b.n	db4e4 <__gethex+0x184>
   db5d2:	f04f 0a03 	mov.w	sl, #3
   db5d6:	e7b5      	b.n	db544 <__gethex+0x1e4>
   db5d8:	da0a      	bge.n	db5f0 <__gethex+0x290>
   db5da:	1a37      	subs	r7, r6, r0
   db5dc:	4621      	mov	r1, r4
   db5de:	ee18 0a10 	vmov	r0, s16
   db5e2:	463a      	mov	r2, r7
   db5e4:	f000 fbce 	bl	dbd84 <__lshift>
   db5e8:	1bed      	subs	r5, r5, r7
   db5ea:	4604      	mov	r4, r0
   db5ec:	f100 0914 	add.w	r9, r0, #20
   db5f0:	f04f 0a00 	mov.w	sl, #0
   db5f4:	e7ab      	b.n	db54e <__gethex+0x1ee>
   db5f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   db5fa:	42a8      	cmp	r0, r5
   db5fc:	dd6d      	ble.n	db6da <__gethex+0x37a>
   db5fe:	1b45      	subs	r5, r0, r5
   db600:	42ae      	cmp	r6, r5
   db602:	dc31      	bgt.n	db668 <__gethex+0x308>
   db604:	f8d8 300c 	ldr.w	r3, [r8, #12]
   db608:	2b02      	cmp	r3, #2
   db60a:	d023      	beq.n	db654 <__gethex+0x2f4>
   db60c:	2b03      	cmp	r3, #3
   db60e:	d025      	beq.n	db65c <__gethex+0x2fc>
   db610:	2b01      	cmp	r3, #1
   db612:	d115      	bne.n	db640 <__gethex+0x2e0>
   db614:	42ae      	cmp	r6, r5
   db616:	d113      	bne.n	db640 <__gethex+0x2e0>
   db618:	2e01      	cmp	r6, #1
   db61a:	d10b      	bne.n	db634 <__gethex+0x2d4>
   db61c:	9a04      	ldr	r2, [sp, #16]
   db61e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   db622:	6013      	str	r3, [r2, #0]
   db624:	2301      	movs	r3, #1
   db626:	6123      	str	r3, [r4, #16]
   db628:	f8c9 3000 	str.w	r3, [r9]
   db62c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   db62e:	2762      	movs	r7, #98	; 0x62
   db630:	601c      	str	r4, [r3, #0]
   db632:	e72a      	b.n	db48a <__gethex+0x12a>
   db634:	1e71      	subs	r1, r6, #1
   db636:	4620      	mov	r0, r4
   db638:	f000 fdb8 	bl	dc1ac <__any_on>
   db63c:	2800      	cmp	r0, #0
   db63e:	d1ed      	bne.n	db61c <__gethex+0x2bc>
   db640:	ee18 0a10 	vmov	r0, s16
   db644:	4621      	mov	r1, r4
   db646:	f000 f9c7 	bl	db9d8 <_Bfree>
   db64a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db64c:	2300      	movs	r3, #0
   db64e:	6013      	str	r3, [r2, #0]
   db650:	2750      	movs	r7, #80	; 0x50
   db652:	e71a      	b.n	db48a <__gethex+0x12a>
   db654:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db656:	2b00      	cmp	r3, #0
   db658:	d1f2      	bne.n	db640 <__gethex+0x2e0>
   db65a:	e7df      	b.n	db61c <__gethex+0x2bc>
   db65c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db65e:	2b00      	cmp	r3, #0
   db660:	d1dc      	bne.n	db61c <__gethex+0x2bc>
   db662:	e7ed      	b.n	db640 <__gethex+0x2e0>
   db664:	000dd00c 	.word	0x000dd00c
   db668:	1e6f      	subs	r7, r5, #1
   db66a:	f1ba 0f00 	cmp.w	sl, #0
   db66e:	d131      	bne.n	db6d4 <__gethex+0x374>
   db670:	b127      	cbz	r7, db67c <__gethex+0x31c>
   db672:	4639      	mov	r1, r7
   db674:	4620      	mov	r0, r4
   db676:	f000 fd99 	bl	dc1ac <__any_on>
   db67a:	4682      	mov	sl, r0
   db67c:	117b      	asrs	r3, r7, #5
   db67e:	2101      	movs	r1, #1
   db680:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   db684:	f007 071f 	and.w	r7, r7, #31
   db688:	fa01 f707 	lsl.w	r7, r1, r7
   db68c:	421f      	tst	r7, r3
   db68e:	4629      	mov	r1, r5
   db690:	4620      	mov	r0, r4
   db692:	bf18      	it	ne
   db694:	f04a 0a02 	orrne.w	sl, sl, #2
   db698:	1b76      	subs	r6, r6, r5
   db69a:	f7ff fdf9 	bl	db290 <rshift>
   db69e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   db6a2:	2702      	movs	r7, #2
   db6a4:	f1ba 0f00 	cmp.w	sl, #0
   db6a8:	d048      	beq.n	db73c <__gethex+0x3dc>
   db6aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   db6ae:	2b02      	cmp	r3, #2
   db6b0:	d015      	beq.n	db6de <__gethex+0x37e>
   db6b2:	2b03      	cmp	r3, #3
   db6b4:	d017      	beq.n	db6e6 <__gethex+0x386>
   db6b6:	2b01      	cmp	r3, #1
   db6b8:	d109      	bne.n	db6ce <__gethex+0x36e>
   db6ba:	f01a 0f02 	tst.w	sl, #2
   db6be:	d006      	beq.n	db6ce <__gethex+0x36e>
   db6c0:	f8d9 0000 	ldr.w	r0, [r9]
   db6c4:	ea4a 0a00 	orr.w	sl, sl, r0
   db6c8:	f01a 0f01 	tst.w	sl, #1
   db6cc:	d10e      	bne.n	db6ec <__gethex+0x38c>
   db6ce:	f047 0710 	orr.w	r7, r7, #16
   db6d2:	e033      	b.n	db73c <__gethex+0x3dc>
   db6d4:	f04f 0a01 	mov.w	sl, #1
   db6d8:	e7d0      	b.n	db67c <__gethex+0x31c>
   db6da:	2701      	movs	r7, #1
   db6dc:	e7e2      	b.n	db6a4 <__gethex+0x344>
   db6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db6e0:	f1c3 0301 	rsb	r3, r3, #1
   db6e4:	9315      	str	r3, [sp, #84]	; 0x54
   db6e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db6e8:	2b00      	cmp	r3, #0
   db6ea:	d0f0      	beq.n	db6ce <__gethex+0x36e>
   db6ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db6f0:	f104 0314 	add.w	r3, r4, #20
   db6f4:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   db6f8:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   db6fc:	f04f 0c00 	mov.w	ip, #0
   db700:	4618      	mov	r0, r3
   db702:	f853 2b04 	ldr.w	r2, [r3], #4
   db706:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   db70a:	d01c      	beq.n	db746 <__gethex+0x3e6>
   db70c:	3201      	adds	r2, #1
   db70e:	6002      	str	r2, [r0, #0]
   db710:	2f02      	cmp	r7, #2
   db712:	f104 0314 	add.w	r3, r4, #20
   db716:	d13a      	bne.n	db78e <__gethex+0x42e>
   db718:	f8d8 2000 	ldr.w	r2, [r8]
   db71c:	3a01      	subs	r2, #1
   db71e:	42b2      	cmp	r2, r6
   db720:	d10a      	bne.n	db738 <__gethex+0x3d8>
   db722:	1171      	asrs	r1, r6, #5
   db724:	2201      	movs	r2, #1
   db726:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   db72a:	f006 061f 	and.w	r6, r6, #31
   db72e:	fa02 f606 	lsl.w	r6, r2, r6
   db732:	421e      	tst	r6, r3
   db734:	bf18      	it	ne
   db736:	4617      	movne	r7, r2
   db738:	f047 0720 	orr.w	r7, r7, #32
   db73c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   db73e:	601c      	str	r4, [r3, #0]
   db740:	9b04      	ldr	r3, [sp, #16]
   db742:	601d      	str	r5, [r3, #0]
   db744:	e6a1      	b.n	db48a <__gethex+0x12a>
   db746:	4299      	cmp	r1, r3
   db748:	f843 cc04 	str.w	ip, [r3, #-4]
   db74c:	d8d8      	bhi.n	db700 <__gethex+0x3a0>
   db74e:	68a3      	ldr	r3, [r4, #8]
   db750:	4599      	cmp	r9, r3
   db752:	db14      	blt.n	db77e <__gethex+0x41e>
   db754:	6861      	ldr	r1, [r4, #4]
   db756:	ee18 0a10 	vmov	r0, s16
   db75a:	3101      	adds	r1, #1
   db75c:	f000 f908 	bl	db970 <_Balloc>
   db760:	6922      	ldr	r2, [r4, #16]
   db762:	3202      	adds	r2, #2
   db764:	f104 010c 	add.w	r1, r4, #12
   db768:	4682      	mov	sl, r0
   db76a:	0092      	lsls	r2, r2, #2
   db76c:	300c      	adds	r0, #12
   db76e:	f7fe fe25 	bl	da3bc <memcpy>
   db772:	4621      	mov	r1, r4
   db774:	ee18 0a10 	vmov	r0, s16
   db778:	f000 f92e 	bl	db9d8 <_Bfree>
   db77c:	4654      	mov	r4, sl
   db77e:	6923      	ldr	r3, [r4, #16]
   db780:	1c5a      	adds	r2, r3, #1
   db782:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   db786:	6122      	str	r2, [r4, #16]
   db788:	2201      	movs	r2, #1
   db78a:	615a      	str	r2, [r3, #20]
   db78c:	e7c0      	b.n	db710 <__gethex+0x3b0>
   db78e:	6922      	ldr	r2, [r4, #16]
   db790:	454a      	cmp	r2, r9
   db792:	dd0b      	ble.n	db7ac <__gethex+0x44c>
   db794:	2101      	movs	r1, #1
   db796:	4620      	mov	r0, r4
   db798:	f7ff fd7a 	bl	db290 <rshift>
   db79c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db7a0:	3501      	adds	r5, #1
   db7a2:	42ab      	cmp	r3, r5
   db7a4:	f6ff aed7 	blt.w	db556 <__gethex+0x1f6>
   db7a8:	2701      	movs	r7, #1
   db7aa:	e7c5      	b.n	db738 <__gethex+0x3d8>
   db7ac:	f016 061f 	ands.w	r6, r6, #31
   db7b0:	d0fa      	beq.n	db7a8 <__gethex+0x448>
   db7b2:	449b      	add	fp, r3
   db7b4:	f1c6 0620 	rsb	r6, r6, #32
   db7b8:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   db7bc:	f000 f99f 	bl	dbafe <__hi0bits>
   db7c0:	42b0      	cmp	r0, r6
   db7c2:	dbe7      	blt.n	db794 <__gethex+0x434>
   db7c4:	e7f0      	b.n	db7a8 <__gethex+0x448>
   db7c6:	bf00      	nop

000db7c8 <L_shift>:
   db7c8:	f1c2 0208 	rsb	r2, r2, #8
   db7cc:	0092      	lsls	r2, r2, #2
   db7ce:	b570      	push	{r4, r5, r6, lr}
   db7d0:	f1c2 0620 	rsb	r6, r2, #32
   db7d4:	6843      	ldr	r3, [r0, #4]
   db7d6:	6804      	ldr	r4, [r0, #0]
   db7d8:	fa03 f506 	lsl.w	r5, r3, r6
   db7dc:	432c      	orrs	r4, r5
   db7de:	40d3      	lsrs	r3, r2
   db7e0:	6004      	str	r4, [r0, #0]
   db7e2:	f840 3f04 	str.w	r3, [r0, #4]!
   db7e6:	4288      	cmp	r0, r1
   db7e8:	d3f4      	bcc.n	db7d4 <L_shift+0xc>
   db7ea:	bd70      	pop	{r4, r5, r6, pc}

000db7ec <__match>:
   db7ec:	b530      	push	{r4, r5, lr}
   db7ee:	6803      	ldr	r3, [r0, #0]
   db7f0:	3301      	adds	r3, #1
   db7f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   db7f6:	b914      	cbnz	r4, db7fe <__match+0x12>
   db7f8:	6003      	str	r3, [r0, #0]
   db7fa:	2001      	movs	r0, #1
   db7fc:	bd30      	pop	{r4, r5, pc}
   db7fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   db802:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   db806:	2d19      	cmp	r5, #25
   db808:	bf98      	it	ls
   db80a:	3220      	addls	r2, #32
   db80c:	42a2      	cmp	r2, r4
   db80e:	d0f0      	beq.n	db7f2 <__match+0x6>
   db810:	2000      	movs	r0, #0
   db812:	e7f3      	b.n	db7fc <__match+0x10>

000db814 <__hexnan>:
   db814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db818:	680b      	ldr	r3, [r1, #0]
   db81a:	6801      	ldr	r1, [r0, #0]
   db81c:	115e      	asrs	r6, r3, #5
   db81e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   db822:	f013 031f 	ands.w	r3, r3, #31
   db826:	b087      	sub	sp, #28
   db828:	bf18      	it	ne
   db82a:	3604      	addne	r6, #4
   db82c:	2500      	movs	r5, #0
   db82e:	1f37      	subs	r7, r6, #4
   db830:	4682      	mov	sl, r0
   db832:	4690      	mov	r8, r2
   db834:	9301      	str	r3, [sp, #4]
   db836:	f846 5c04 	str.w	r5, [r6, #-4]
   db83a:	46b9      	mov	r9, r7
   db83c:	463c      	mov	r4, r7
   db83e:	9502      	str	r5, [sp, #8]
   db840:	46ab      	mov	fp, r5
   db842:	784a      	ldrb	r2, [r1, #1]
   db844:	1c4b      	adds	r3, r1, #1
   db846:	9303      	str	r3, [sp, #12]
   db848:	b342      	cbz	r2, db89c <__hexnan+0x88>
   db84a:	4610      	mov	r0, r2
   db84c:	9105      	str	r1, [sp, #20]
   db84e:	9204      	str	r2, [sp, #16]
   db850:	f7ff fd70 	bl	db334 <__hexdig_fun>
   db854:	2800      	cmp	r0, #0
   db856:	d14f      	bne.n	db8f8 <__hexnan+0xe4>
   db858:	9a04      	ldr	r2, [sp, #16]
   db85a:	9905      	ldr	r1, [sp, #20]
   db85c:	2a20      	cmp	r2, #32
   db85e:	d818      	bhi.n	db892 <__hexnan+0x7e>
   db860:	9b02      	ldr	r3, [sp, #8]
   db862:	459b      	cmp	fp, r3
   db864:	dd13      	ble.n	db88e <__hexnan+0x7a>
   db866:	454c      	cmp	r4, r9
   db868:	d206      	bcs.n	db878 <__hexnan+0x64>
   db86a:	2d07      	cmp	r5, #7
   db86c:	dc04      	bgt.n	db878 <__hexnan+0x64>
   db86e:	462a      	mov	r2, r5
   db870:	4649      	mov	r1, r9
   db872:	4620      	mov	r0, r4
   db874:	f7ff ffa8 	bl	db7c8 <L_shift>
   db878:	4544      	cmp	r4, r8
   db87a:	d950      	bls.n	db91e <__hexnan+0x10a>
   db87c:	2300      	movs	r3, #0
   db87e:	f1a4 0904 	sub.w	r9, r4, #4
   db882:	f844 3c04 	str.w	r3, [r4, #-4]
   db886:	f8cd b008 	str.w	fp, [sp, #8]
   db88a:	464c      	mov	r4, r9
   db88c:	461d      	mov	r5, r3
   db88e:	9903      	ldr	r1, [sp, #12]
   db890:	e7d7      	b.n	db842 <__hexnan+0x2e>
   db892:	2a29      	cmp	r2, #41	; 0x29
   db894:	d156      	bne.n	db944 <__hexnan+0x130>
   db896:	3102      	adds	r1, #2
   db898:	f8ca 1000 	str.w	r1, [sl]
   db89c:	f1bb 0f00 	cmp.w	fp, #0
   db8a0:	d050      	beq.n	db944 <__hexnan+0x130>
   db8a2:	454c      	cmp	r4, r9
   db8a4:	d206      	bcs.n	db8b4 <__hexnan+0xa0>
   db8a6:	2d07      	cmp	r5, #7
   db8a8:	dc04      	bgt.n	db8b4 <__hexnan+0xa0>
   db8aa:	462a      	mov	r2, r5
   db8ac:	4649      	mov	r1, r9
   db8ae:	4620      	mov	r0, r4
   db8b0:	f7ff ff8a 	bl	db7c8 <L_shift>
   db8b4:	4544      	cmp	r4, r8
   db8b6:	d934      	bls.n	db922 <__hexnan+0x10e>
   db8b8:	f1a8 0204 	sub.w	r2, r8, #4
   db8bc:	4623      	mov	r3, r4
   db8be:	f853 1b04 	ldr.w	r1, [r3], #4
   db8c2:	f842 1f04 	str.w	r1, [r2, #4]!
   db8c6:	429f      	cmp	r7, r3
   db8c8:	d2f9      	bcs.n	db8be <__hexnan+0xaa>
   db8ca:	1b3b      	subs	r3, r7, r4
   db8cc:	f023 0303 	bic.w	r3, r3, #3
   db8d0:	3304      	adds	r3, #4
   db8d2:	3401      	adds	r4, #1
   db8d4:	3e03      	subs	r6, #3
   db8d6:	42b4      	cmp	r4, r6
   db8d8:	bf88      	it	hi
   db8da:	2304      	movhi	r3, #4
   db8dc:	4443      	add	r3, r8
   db8de:	2200      	movs	r2, #0
   db8e0:	f843 2b04 	str.w	r2, [r3], #4
   db8e4:	429f      	cmp	r7, r3
   db8e6:	d2fb      	bcs.n	db8e0 <__hexnan+0xcc>
   db8e8:	683b      	ldr	r3, [r7, #0]
   db8ea:	b91b      	cbnz	r3, db8f4 <__hexnan+0xe0>
   db8ec:	4547      	cmp	r7, r8
   db8ee:	d127      	bne.n	db940 <__hexnan+0x12c>
   db8f0:	2301      	movs	r3, #1
   db8f2:	603b      	str	r3, [r7, #0]
   db8f4:	2005      	movs	r0, #5
   db8f6:	e026      	b.n	db946 <__hexnan+0x132>
   db8f8:	3501      	adds	r5, #1
   db8fa:	2d08      	cmp	r5, #8
   db8fc:	f10b 0b01 	add.w	fp, fp, #1
   db900:	dd06      	ble.n	db910 <__hexnan+0xfc>
   db902:	4544      	cmp	r4, r8
   db904:	d9c3      	bls.n	db88e <__hexnan+0x7a>
   db906:	2300      	movs	r3, #0
   db908:	f844 3c04 	str.w	r3, [r4, #-4]
   db90c:	2501      	movs	r5, #1
   db90e:	3c04      	subs	r4, #4
   db910:	6822      	ldr	r2, [r4, #0]
   db912:	f000 000f 	and.w	r0, r0, #15
   db916:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   db91a:	6022      	str	r2, [r4, #0]
   db91c:	e7b7      	b.n	db88e <__hexnan+0x7a>
   db91e:	2508      	movs	r5, #8
   db920:	e7b5      	b.n	db88e <__hexnan+0x7a>
   db922:	9b01      	ldr	r3, [sp, #4]
   db924:	2b00      	cmp	r3, #0
   db926:	d0df      	beq.n	db8e8 <__hexnan+0xd4>
   db928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db92c:	f1c3 0320 	rsb	r3, r3, #32
   db930:	fa22 f303 	lsr.w	r3, r2, r3
   db934:	f856 2c04 	ldr.w	r2, [r6, #-4]
   db938:	401a      	ands	r2, r3
   db93a:	f846 2c04 	str.w	r2, [r6, #-4]
   db93e:	e7d3      	b.n	db8e8 <__hexnan+0xd4>
   db940:	3f04      	subs	r7, #4
   db942:	e7d1      	b.n	db8e8 <__hexnan+0xd4>
   db944:	2004      	movs	r0, #4
   db946:	b007      	add	sp, #28
   db948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db94c <__ascii_mbtowc>:
   db94c:	b082      	sub	sp, #8
   db94e:	b901      	cbnz	r1, db952 <__ascii_mbtowc+0x6>
   db950:	a901      	add	r1, sp, #4
   db952:	b142      	cbz	r2, db966 <__ascii_mbtowc+0x1a>
   db954:	b14b      	cbz	r3, db96a <__ascii_mbtowc+0x1e>
   db956:	7813      	ldrb	r3, [r2, #0]
   db958:	600b      	str	r3, [r1, #0]
   db95a:	7812      	ldrb	r2, [r2, #0]
   db95c:	1e10      	subs	r0, r2, #0
   db95e:	bf18      	it	ne
   db960:	2001      	movne	r0, #1
   db962:	b002      	add	sp, #8
   db964:	4770      	bx	lr
   db966:	4610      	mov	r0, r2
   db968:	e7fb      	b.n	db962 <__ascii_mbtowc+0x16>
   db96a:	f06f 0001 	mvn.w	r0, #1
   db96e:	e7f8      	b.n	db962 <__ascii_mbtowc+0x16>

000db970 <_Balloc>:
   db970:	b570      	push	{r4, r5, r6, lr}
   db972:	6a46      	ldr	r6, [r0, #36]	; 0x24
   db974:	4604      	mov	r4, r0
   db976:	460d      	mov	r5, r1
   db978:	b93e      	cbnz	r6, db98a <_Balloc+0x1a>
   db97a:	2010      	movs	r0, #16
   db97c:	f7fb fb10 	bl	d6fa0 <malloc>
   db980:	e9c0 6601 	strd	r6, r6, [r0, #4]
   db984:	6260      	str	r0, [r4, #36]	; 0x24
   db986:	6006      	str	r6, [r0, #0]
   db988:	60c6      	str	r6, [r0, #12]
   db98a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   db98c:	68f3      	ldr	r3, [r6, #12]
   db98e:	b183      	cbz	r3, db9b2 <_Balloc+0x42>
   db990:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db992:	68db      	ldr	r3, [r3, #12]
   db994:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   db998:	b9b8      	cbnz	r0, db9ca <_Balloc+0x5a>
   db99a:	2101      	movs	r1, #1
   db99c:	fa01 f605 	lsl.w	r6, r1, r5
   db9a0:	1d72      	adds	r2, r6, #5
   db9a2:	0092      	lsls	r2, r2, #2
   db9a4:	4620      	mov	r0, r4
   db9a6:	f7fe fd39 	bl	da41c <_calloc_r>
   db9aa:	b160      	cbz	r0, db9c6 <_Balloc+0x56>
   db9ac:	e9c0 5601 	strd	r5, r6, [r0, #4]
   db9b0:	e00e      	b.n	db9d0 <_Balloc+0x60>
   db9b2:	2221      	movs	r2, #33	; 0x21
   db9b4:	2104      	movs	r1, #4
   db9b6:	4620      	mov	r0, r4
   db9b8:	f7fe fd30 	bl	da41c <_calloc_r>
   db9bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db9be:	60f0      	str	r0, [r6, #12]
   db9c0:	68db      	ldr	r3, [r3, #12]
   db9c2:	2b00      	cmp	r3, #0
   db9c4:	d1e4      	bne.n	db990 <_Balloc+0x20>
   db9c6:	2000      	movs	r0, #0
   db9c8:	bd70      	pop	{r4, r5, r6, pc}
   db9ca:	6802      	ldr	r2, [r0, #0]
   db9cc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   db9d0:	2300      	movs	r3, #0
   db9d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
   db9d6:	e7f7      	b.n	db9c8 <_Balloc+0x58>

000db9d8 <_Bfree>:
   db9d8:	b570      	push	{r4, r5, r6, lr}
   db9da:	6a46      	ldr	r6, [r0, #36]	; 0x24
   db9dc:	4605      	mov	r5, r0
   db9de:	460c      	mov	r4, r1
   db9e0:	b93e      	cbnz	r6, db9f2 <_Bfree+0x1a>
   db9e2:	2010      	movs	r0, #16
   db9e4:	f7fb fadc 	bl	d6fa0 <malloc>
   db9e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   db9ec:	6268      	str	r0, [r5, #36]	; 0x24
   db9ee:	6006      	str	r6, [r0, #0]
   db9f0:	60c6      	str	r6, [r0, #12]
   db9f2:	b13c      	cbz	r4, dba04 <_Bfree+0x2c>
   db9f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   db9f6:	6862      	ldr	r2, [r4, #4]
   db9f8:	68db      	ldr	r3, [r3, #12]
   db9fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   db9fe:	6021      	str	r1, [r4, #0]
   dba00:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dba04:	bd70      	pop	{r4, r5, r6, pc}

000dba06 <__multadd>:
   dba06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dba0a:	690e      	ldr	r6, [r1, #16]
   dba0c:	4607      	mov	r7, r0
   dba0e:	4698      	mov	r8, r3
   dba10:	460c      	mov	r4, r1
   dba12:	f101 0014 	add.w	r0, r1, #20
   dba16:	2300      	movs	r3, #0
   dba18:	6805      	ldr	r5, [r0, #0]
   dba1a:	b2a9      	uxth	r1, r5
   dba1c:	fb02 8101 	mla	r1, r2, r1, r8
   dba20:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dba24:	0c2d      	lsrs	r5, r5, #16
   dba26:	fb02 c505 	mla	r5, r2, r5, ip
   dba2a:	b289      	uxth	r1, r1
   dba2c:	3301      	adds	r3, #1
   dba2e:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dba32:	429e      	cmp	r6, r3
   dba34:	f840 1b04 	str.w	r1, [r0], #4
   dba38:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dba3c:	dcec      	bgt.n	dba18 <__multadd+0x12>
   dba3e:	f1b8 0f00 	cmp.w	r8, #0
   dba42:	d01b      	beq.n	dba7c <__multadd+0x76>
   dba44:	68a3      	ldr	r3, [r4, #8]
   dba46:	42b3      	cmp	r3, r6
   dba48:	dc12      	bgt.n	dba70 <__multadd+0x6a>
   dba4a:	6861      	ldr	r1, [r4, #4]
   dba4c:	4638      	mov	r0, r7
   dba4e:	3101      	adds	r1, #1
   dba50:	f7ff ff8e 	bl	db970 <_Balloc>
   dba54:	6922      	ldr	r2, [r4, #16]
   dba56:	3202      	adds	r2, #2
   dba58:	f104 010c 	add.w	r1, r4, #12
   dba5c:	4605      	mov	r5, r0
   dba5e:	0092      	lsls	r2, r2, #2
   dba60:	300c      	adds	r0, #12
   dba62:	f7fe fcab 	bl	da3bc <memcpy>
   dba66:	4621      	mov	r1, r4
   dba68:	4638      	mov	r0, r7
   dba6a:	f7ff ffb5 	bl	db9d8 <_Bfree>
   dba6e:	462c      	mov	r4, r5
   dba70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dba74:	3601      	adds	r6, #1
   dba76:	f8c3 8014 	str.w	r8, [r3, #20]
   dba7a:	6126      	str	r6, [r4, #16]
   dba7c:	4620      	mov	r0, r4
   dba7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dba82 <__s2b>:
   dba82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dba86:	460c      	mov	r4, r1
   dba88:	4615      	mov	r5, r2
   dba8a:	461f      	mov	r7, r3
   dba8c:	2209      	movs	r2, #9
   dba8e:	3308      	adds	r3, #8
   dba90:	4606      	mov	r6, r0
   dba92:	fb93 f3f2 	sdiv	r3, r3, r2
   dba96:	2100      	movs	r1, #0
   dba98:	2201      	movs	r2, #1
   dba9a:	429a      	cmp	r2, r3
   dba9c:	db20      	blt.n	dbae0 <__s2b+0x5e>
   dba9e:	4630      	mov	r0, r6
   dbaa0:	f7ff ff66 	bl	db970 <_Balloc>
   dbaa4:	9b08      	ldr	r3, [sp, #32]
   dbaa6:	6143      	str	r3, [r0, #20]
   dbaa8:	2d09      	cmp	r5, #9
   dbaaa:	f04f 0301 	mov.w	r3, #1
   dbaae:	6103      	str	r3, [r0, #16]
   dbab0:	dd19      	ble.n	dbae6 <__s2b+0x64>
   dbab2:	f104 0909 	add.w	r9, r4, #9
   dbab6:	46c8      	mov	r8, r9
   dbab8:	442c      	add	r4, r5
   dbaba:	f818 3b01 	ldrb.w	r3, [r8], #1
   dbabe:	4601      	mov	r1, r0
   dbac0:	3b30      	subs	r3, #48	; 0x30
   dbac2:	220a      	movs	r2, #10
   dbac4:	4630      	mov	r0, r6
   dbac6:	f7ff ff9e 	bl	dba06 <__multadd>
   dbaca:	45a0      	cmp	r8, r4
   dbacc:	d1f5      	bne.n	dbaba <__s2b+0x38>
   dbace:	f1a5 0408 	sub.w	r4, r5, #8
   dbad2:	444c      	add	r4, r9
   dbad4:	1b2d      	subs	r5, r5, r4
   dbad6:	1963      	adds	r3, r4, r5
   dbad8:	42bb      	cmp	r3, r7
   dbada:	db07      	blt.n	dbaec <__s2b+0x6a>
   dbadc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbae0:	0052      	lsls	r2, r2, #1
   dbae2:	3101      	adds	r1, #1
   dbae4:	e7d9      	b.n	dba9a <__s2b+0x18>
   dbae6:	340a      	adds	r4, #10
   dbae8:	2509      	movs	r5, #9
   dbaea:	e7f3      	b.n	dbad4 <__s2b+0x52>
   dbaec:	f814 3b01 	ldrb.w	r3, [r4], #1
   dbaf0:	4601      	mov	r1, r0
   dbaf2:	3b30      	subs	r3, #48	; 0x30
   dbaf4:	220a      	movs	r2, #10
   dbaf6:	4630      	mov	r0, r6
   dbaf8:	f7ff ff85 	bl	dba06 <__multadd>
   dbafc:	e7eb      	b.n	dbad6 <__s2b+0x54>

000dbafe <__hi0bits>:
   dbafe:	0c03      	lsrs	r3, r0, #16
   dbb00:	041b      	lsls	r3, r3, #16
   dbb02:	b9d3      	cbnz	r3, dbb3a <__hi0bits+0x3c>
   dbb04:	0400      	lsls	r0, r0, #16
   dbb06:	2310      	movs	r3, #16
   dbb08:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dbb0c:	bf04      	itt	eq
   dbb0e:	0200      	lsleq	r0, r0, #8
   dbb10:	3308      	addeq	r3, #8
   dbb12:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dbb16:	bf04      	itt	eq
   dbb18:	0100      	lsleq	r0, r0, #4
   dbb1a:	3304      	addeq	r3, #4
   dbb1c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dbb20:	bf04      	itt	eq
   dbb22:	0080      	lsleq	r0, r0, #2
   dbb24:	3302      	addeq	r3, #2
   dbb26:	2800      	cmp	r0, #0
   dbb28:	db05      	blt.n	dbb36 <__hi0bits+0x38>
   dbb2a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dbb2e:	f103 0301 	add.w	r3, r3, #1
   dbb32:	bf08      	it	eq
   dbb34:	2320      	moveq	r3, #32
   dbb36:	4618      	mov	r0, r3
   dbb38:	4770      	bx	lr
   dbb3a:	2300      	movs	r3, #0
   dbb3c:	e7e4      	b.n	dbb08 <__hi0bits+0xa>

000dbb3e <__lo0bits>:
   dbb3e:	6803      	ldr	r3, [r0, #0]
   dbb40:	f013 0207 	ands.w	r2, r3, #7
   dbb44:	4601      	mov	r1, r0
   dbb46:	d00b      	beq.n	dbb60 <__lo0bits+0x22>
   dbb48:	07da      	lsls	r2, r3, #31
   dbb4a:	d424      	bmi.n	dbb96 <__lo0bits+0x58>
   dbb4c:	0798      	lsls	r0, r3, #30
   dbb4e:	bf49      	itett	mi
   dbb50:	085b      	lsrmi	r3, r3, #1
   dbb52:	089b      	lsrpl	r3, r3, #2
   dbb54:	2001      	movmi	r0, #1
   dbb56:	600b      	strmi	r3, [r1, #0]
   dbb58:	bf5c      	itt	pl
   dbb5a:	600b      	strpl	r3, [r1, #0]
   dbb5c:	2002      	movpl	r0, #2
   dbb5e:	4770      	bx	lr
   dbb60:	b298      	uxth	r0, r3
   dbb62:	b9b0      	cbnz	r0, dbb92 <__lo0bits+0x54>
   dbb64:	0c1b      	lsrs	r3, r3, #16
   dbb66:	2010      	movs	r0, #16
   dbb68:	f013 0fff 	tst.w	r3, #255	; 0xff
   dbb6c:	bf04      	itt	eq
   dbb6e:	0a1b      	lsreq	r3, r3, #8
   dbb70:	3008      	addeq	r0, #8
   dbb72:	071a      	lsls	r2, r3, #28
   dbb74:	bf04      	itt	eq
   dbb76:	091b      	lsreq	r3, r3, #4
   dbb78:	3004      	addeq	r0, #4
   dbb7a:	079a      	lsls	r2, r3, #30
   dbb7c:	bf04      	itt	eq
   dbb7e:	089b      	lsreq	r3, r3, #2
   dbb80:	3002      	addeq	r0, #2
   dbb82:	07da      	lsls	r2, r3, #31
   dbb84:	d403      	bmi.n	dbb8e <__lo0bits+0x50>
   dbb86:	085b      	lsrs	r3, r3, #1
   dbb88:	f100 0001 	add.w	r0, r0, #1
   dbb8c:	d005      	beq.n	dbb9a <__lo0bits+0x5c>
   dbb8e:	600b      	str	r3, [r1, #0]
   dbb90:	4770      	bx	lr
   dbb92:	4610      	mov	r0, r2
   dbb94:	e7e8      	b.n	dbb68 <__lo0bits+0x2a>
   dbb96:	2000      	movs	r0, #0
   dbb98:	4770      	bx	lr
   dbb9a:	2020      	movs	r0, #32
   dbb9c:	4770      	bx	lr

000dbb9e <__i2b>:
   dbb9e:	b510      	push	{r4, lr}
   dbba0:	460c      	mov	r4, r1
   dbba2:	2101      	movs	r1, #1
   dbba4:	f7ff fee4 	bl	db970 <_Balloc>
   dbba8:	2201      	movs	r2, #1
   dbbaa:	6144      	str	r4, [r0, #20]
   dbbac:	6102      	str	r2, [r0, #16]
   dbbae:	bd10      	pop	{r4, pc}

000dbbb0 <__multiply>:
   dbbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbbb4:	4615      	mov	r5, r2
   dbbb6:	690a      	ldr	r2, [r1, #16]
   dbbb8:	692b      	ldr	r3, [r5, #16]
   dbbba:	429a      	cmp	r2, r3
   dbbbc:	bfb8      	it	lt
   dbbbe:	460b      	movlt	r3, r1
   dbbc0:	460c      	mov	r4, r1
   dbbc2:	bfbc      	itt	lt
   dbbc4:	462c      	movlt	r4, r5
   dbbc6:	461d      	movlt	r5, r3
   dbbc8:	6927      	ldr	r7, [r4, #16]
   dbbca:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dbbce:	68a3      	ldr	r3, [r4, #8]
   dbbd0:	6861      	ldr	r1, [r4, #4]
   dbbd2:	eb07 0609 	add.w	r6, r7, r9
   dbbd6:	42b3      	cmp	r3, r6
   dbbd8:	bfb8      	it	lt
   dbbda:	3101      	addlt	r1, #1
   dbbdc:	b085      	sub	sp, #20
   dbbde:	f7ff fec7 	bl	db970 <_Balloc>
   dbbe2:	f100 0114 	add.w	r1, r0, #20
   dbbe6:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dbbea:	460b      	mov	r3, r1
   dbbec:	2200      	movs	r2, #0
   dbbee:	4543      	cmp	r3, r8
   dbbf0:	d31d      	bcc.n	dbc2e <__multiply+0x7e>
   dbbf2:	f104 0314 	add.w	r3, r4, #20
   dbbf6:	f105 0214 	add.w	r2, r5, #20
   dbbfa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dbbfe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dbc02:	9302      	str	r3, [sp, #8]
   dbc04:	1b3b      	subs	r3, r7, r4
   dbc06:	3b15      	subs	r3, #21
   dbc08:	f023 0303 	bic.w	r3, r3, #3
   dbc0c:	3304      	adds	r3, #4
   dbc0e:	f104 0515 	add.w	r5, r4, #21
   dbc12:	42af      	cmp	r7, r5
   dbc14:	bf38      	it	cc
   dbc16:	2304      	movcc	r3, #4
   dbc18:	9301      	str	r3, [sp, #4]
   dbc1a:	9b02      	ldr	r3, [sp, #8]
   dbc1c:	9203      	str	r2, [sp, #12]
   dbc1e:	4293      	cmp	r3, r2
   dbc20:	d808      	bhi.n	dbc34 <__multiply+0x84>
   dbc22:	2e00      	cmp	r6, #0
   dbc24:	dc5a      	bgt.n	dbcdc <__multiply+0x12c>
   dbc26:	6106      	str	r6, [r0, #16]
   dbc28:	b005      	add	sp, #20
   dbc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbc2e:	f843 2b04 	str.w	r2, [r3], #4
   dbc32:	e7dc      	b.n	dbbee <__multiply+0x3e>
   dbc34:	f8b2 a000 	ldrh.w	sl, [r2]
   dbc38:	f1ba 0f00 	cmp.w	sl, #0
   dbc3c:	d024      	beq.n	dbc88 <__multiply+0xd8>
   dbc3e:	f104 0e14 	add.w	lr, r4, #20
   dbc42:	4689      	mov	r9, r1
   dbc44:	f04f 0c00 	mov.w	ip, #0
   dbc48:	f85e 5b04 	ldr.w	r5, [lr], #4
   dbc4c:	f8d9 b000 	ldr.w	fp, [r9]
   dbc50:	b2ab      	uxth	r3, r5
   dbc52:	fa1f fb8b 	uxth.w	fp, fp
   dbc56:	fb0a b303 	mla	r3, sl, r3, fp
   dbc5a:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dbc5e:	f8d9 5000 	ldr.w	r5, [r9]
   dbc62:	4463      	add	r3, ip
   dbc64:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dbc68:	fb0a c50b 	mla	r5, sl, fp, ip
   dbc6c:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dbc70:	b29b      	uxth	r3, r3
   dbc72:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dbc76:	4577      	cmp	r7, lr
   dbc78:	f849 3b04 	str.w	r3, [r9], #4
   dbc7c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dbc80:	d8e2      	bhi.n	dbc48 <__multiply+0x98>
   dbc82:	9b01      	ldr	r3, [sp, #4]
   dbc84:	f841 c003 	str.w	ip, [r1, r3]
   dbc88:	9b03      	ldr	r3, [sp, #12]
   dbc8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dbc8e:	3204      	adds	r2, #4
   dbc90:	f1b9 0f00 	cmp.w	r9, #0
   dbc94:	d020      	beq.n	dbcd8 <__multiply+0x128>
   dbc96:	680b      	ldr	r3, [r1, #0]
   dbc98:	f104 0c14 	add.w	ip, r4, #20
   dbc9c:	468e      	mov	lr, r1
   dbc9e:	f04f 0a00 	mov.w	sl, #0
   dbca2:	f8bc 5000 	ldrh.w	r5, [ip]
   dbca6:	f8be b002 	ldrh.w	fp, [lr, #2]
   dbcaa:	fb09 b505 	mla	r5, r9, r5, fp
   dbcae:	44aa      	add	sl, r5
   dbcb0:	b29b      	uxth	r3, r3
   dbcb2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dbcb6:	f84e 3b04 	str.w	r3, [lr], #4
   dbcba:	f85c 3b04 	ldr.w	r3, [ip], #4
   dbcbe:	f8be 5000 	ldrh.w	r5, [lr]
   dbcc2:	0c1b      	lsrs	r3, r3, #16
   dbcc4:	fb09 5303 	mla	r3, r9, r3, r5
   dbcc8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dbccc:	4567      	cmp	r7, ip
   dbcce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dbcd2:	d8e6      	bhi.n	dbca2 <__multiply+0xf2>
   dbcd4:	9d01      	ldr	r5, [sp, #4]
   dbcd6:	514b      	str	r3, [r1, r5]
   dbcd8:	3104      	adds	r1, #4
   dbcda:	e79e      	b.n	dbc1a <__multiply+0x6a>
   dbcdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dbce0:	2b00      	cmp	r3, #0
   dbce2:	d1a0      	bne.n	dbc26 <__multiply+0x76>
   dbce4:	3e01      	subs	r6, #1
   dbce6:	e79c      	b.n	dbc22 <__multiply+0x72>

000dbce8 <__pow5mult>:
   dbce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbcec:	4615      	mov	r5, r2
   dbcee:	f012 0203 	ands.w	r2, r2, #3
   dbcf2:	4606      	mov	r6, r0
   dbcf4:	460f      	mov	r7, r1
   dbcf6:	d007      	beq.n	dbd08 <__pow5mult+0x20>
   dbcf8:	4c21      	ldr	r4, [pc, #132]	; (dbd80 <__pow5mult+0x98>)
   dbcfa:	3a01      	subs	r2, #1
   dbcfc:	2300      	movs	r3, #0
   dbcfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dbd02:	f7ff fe80 	bl	dba06 <__multadd>
   dbd06:	4607      	mov	r7, r0
   dbd08:	10ad      	asrs	r5, r5, #2
   dbd0a:	d035      	beq.n	dbd78 <__pow5mult+0x90>
   dbd0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dbd0e:	b93c      	cbnz	r4, dbd20 <__pow5mult+0x38>
   dbd10:	2010      	movs	r0, #16
   dbd12:	f7fb f945 	bl	d6fa0 <malloc>
   dbd16:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dbd1a:	6270      	str	r0, [r6, #36]	; 0x24
   dbd1c:	6004      	str	r4, [r0, #0]
   dbd1e:	60c4      	str	r4, [r0, #12]
   dbd20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dbd24:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dbd28:	b94c      	cbnz	r4, dbd3e <__pow5mult+0x56>
   dbd2a:	f240 2171 	movw	r1, #625	; 0x271
   dbd2e:	4630      	mov	r0, r6
   dbd30:	f7ff ff35 	bl	dbb9e <__i2b>
   dbd34:	2300      	movs	r3, #0
   dbd36:	f8c8 0008 	str.w	r0, [r8, #8]
   dbd3a:	4604      	mov	r4, r0
   dbd3c:	6003      	str	r3, [r0, #0]
   dbd3e:	f04f 0900 	mov.w	r9, #0
   dbd42:	07eb      	lsls	r3, r5, #31
   dbd44:	d50a      	bpl.n	dbd5c <__pow5mult+0x74>
   dbd46:	4639      	mov	r1, r7
   dbd48:	4622      	mov	r2, r4
   dbd4a:	4630      	mov	r0, r6
   dbd4c:	f7ff ff30 	bl	dbbb0 <__multiply>
   dbd50:	4639      	mov	r1, r7
   dbd52:	4680      	mov	r8, r0
   dbd54:	4630      	mov	r0, r6
   dbd56:	f7ff fe3f 	bl	db9d8 <_Bfree>
   dbd5a:	4647      	mov	r7, r8
   dbd5c:	106d      	asrs	r5, r5, #1
   dbd5e:	d00b      	beq.n	dbd78 <__pow5mult+0x90>
   dbd60:	6820      	ldr	r0, [r4, #0]
   dbd62:	b938      	cbnz	r0, dbd74 <__pow5mult+0x8c>
   dbd64:	4622      	mov	r2, r4
   dbd66:	4621      	mov	r1, r4
   dbd68:	4630      	mov	r0, r6
   dbd6a:	f7ff ff21 	bl	dbbb0 <__multiply>
   dbd6e:	6020      	str	r0, [r4, #0]
   dbd70:	f8c0 9000 	str.w	r9, [r0]
   dbd74:	4604      	mov	r4, r0
   dbd76:	e7e4      	b.n	dbd42 <__pow5mult+0x5a>
   dbd78:	4638      	mov	r0, r7
   dbd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbd7e:	bf00      	nop
   dbd80:	000dd110 	.word	0x000dd110

000dbd84 <__lshift>:
   dbd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbd88:	460c      	mov	r4, r1
   dbd8a:	6849      	ldr	r1, [r1, #4]
   dbd8c:	6923      	ldr	r3, [r4, #16]
   dbd8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dbd92:	68a3      	ldr	r3, [r4, #8]
   dbd94:	4607      	mov	r7, r0
   dbd96:	4691      	mov	r9, r2
   dbd98:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dbd9c:	f108 0601 	add.w	r6, r8, #1
   dbda0:	42b3      	cmp	r3, r6
   dbda2:	db3f      	blt.n	dbe24 <__lshift+0xa0>
   dbda4:	4638      	mov	r0, r7
   dbda6:	f7ff fde3 	bl	db970 <_Balloc>
   dbdaa:	2300      	movs	r3, #0
   dbdac:	4605      	mov	r5, r0
   dbdae:	f100 0114 	add.w	r1, r0, #20
   dbdb2:	f100 0210 	add.w	r2, r0, #16
   dbdb6:	4618      	mov	r0, r3
   dbdb8:	4553      	cmp	r3, sl
   dbdba:	db36      	blt.n	dbe2a <__lshift+0xa6>
   dbdbc:	6920      	ldr	r0, [r4, #16]
   dbdbe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dbdc2:	f104 0314 	add.w	r3, r4, #20
   dbdc6:	f019 091f 	ands.w	r9, r9, #31
   dbdca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dbdce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dbdd2:	d02e      	beq.n	dbe32 <__lshift+0xae>
   dbdd4:	f1c9 0e20 	rsb	lr, r9, #32
   dbdd8:	468a      	mov	sl, r1
   dbdda:	2200      	movs	r2, #0
   dbddc:	6818      	ldr	r0, [r3, #0]
   dbdde:	fa00 f009 	lsl.w	r0, r0, r9
   dbde2:	4302      	orrs	r2, r0
   dbde4:	f84a 2b04 	str.w	r2, [sl], #4
   dbde8:	f853 2b04 	ldr.w	r2, [r3], #4
   dbdec:	459c      	cmp	ip, r3
   dbdee:	fa22 f20e 	lsr.w	r2, r2, lr
   dbdf2:	d8f3      	bhi.n	dbddc <__lshift+0x58>
   dbdf4:	ebac 0304 	sub.w	r3, ip, r4
   dbdf8:	3b15      	subs	r3, #21
   dbdfa:	f023 0303 	bic.w	r3, r3, #3
   dbdfe:	3304      	adds	r3, #4
   dbe00:	f104 0015 	add.w	r0, r4, #21
   dbe04:	4560      	cmp	r0, ip
   dbe06:	bf88      	it	hi
   dbe08:	2304      	movhi	r3, #4
   dbe0a:	50ca      	str	r2, [r1, r3]
   dbe0c:	b10a      	cbz	r2, dbe12 <__lshift+0x8e>
   dbe0e:	f108 0602 	add.w	r6, r8, #2
   dbe12:	3e01      	subs	r6, #1
   dbe14:	4638      	mov	r0, r7
   dbe16:	612e      	str	r6, [r5, #16]
   dbe18:	4621      	mov	r1, r4
   dbe1a:	f7ff fddd 	bl	db9d8 <_Bfree>
   dbe1e:	4628      	mov	r0, r5
   dbe20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbe24:	3101      	adds	r1, #1
   dbe26:	005b      	lsls	r3, r3, #1
   dbe28:	e7ba      	b.n	dbda0 <__lshift+0x1c>
   dbe2a:	f842 0f04 	str.w	r0, [r2, #4]!
   dbe2e:	3301      	adds	r3, #1
   dbe30:	e7c2      	b.n	dbdb8 <__lshift+0x34>
   dbe32:	3904      	subs	r1, #4
   dbe34:	f853 2b04 	ldr.w	r2, [r3], #4
   dbe38:	f841 2f04 	str.w	r2, [r1, #4]!
   dbe3c:	459c      	cmp	ip, r3
   dbe3e:	d8f9      	bhi.n	dbe34 <__lshift+0xb0>
   dbe40:	e7e7      	b.n	dbe12 <__lshift+0x8e>

000dbe42 <__mcmp>:
   dbe42:	b530      	push	{r4, r5, lr}
   dbe44:	6902      	ldr	r2, [r0, #16]
   dbe46:	690c      	ldr	r4, [r1, #16]
   dbe48:	1b12      	subs	r2, r2, r4
   dbe4a:	d10e      	bne.n	dbe6a <__mcmp+0x28>
   dbe4c:	f100 0314 	add.w	r3, r0, #20
   dbe50:	3114      	adds	r1, #20
   dbe52:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dbe56:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dbe5a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dbe5e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dbe62:	42a5      	cmp	r5, r4
   dbe64:	d003      	beq.n	dbe6e <__mcmp+0x2c>
   dbe66:	d305      	bcc.n	dbe74 <__mcmp+0x32>
   dbe68:	2201      	movs	r2, #1
   dbe6a:	4610      	mov	r0, r2
   dbe6c:	bd30      	pop	{r4, r5, pc}
   dbe6e:	4283      	cmp	r3, r0
   dbe70:	d3f3      	bcc.n	dbe5a <__mcmp+0x18>
   dbe72:	e7fa      	b.n	dbe6a <__mcmp+0x28>
   dbe74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dbe78:	e7f7      	b.n	dbe6a <__mcmp+0x28>

000dbe7a <__mdiff>:
   dbe7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbe7e:	460c      	mov	r4, r1
   dbe80:	4606      	mov	r6, r0
   dbe82:	4611      	mov	r1, r2
   dbe84:	4620      	mov	r0, r4
   dbe86:	4617      	mov	r7, r2
   dbe88:	f7ff ffdb 	bl	dbe42 <__mcmp>
   dbe8c:	1e05      	subs	r5, r0, #0
   dbe8e:	d108      	bne.n	dbea2 <__mdiff+0x28>
   dbe90:	4629      	mov	r1, r5
   dbe92:	4630      	mov	r0, r6
   dbe94:	f7ff fd6c 	bl	db970 <_Balloc>
   dbe98:	2301      	movs	r3, #1
   dbe9a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dbe9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbea2:	bfa4      	itt	ge
   dbea4:	463b      	movge	r3, r7
   dbea6:	4627      	movge	r7, r4
   dbea8:	4630      	mov	r0, r6
   dbeaa:	6879      	ldr	r1, [r7, #4]
   dbeac:	bfa6      	itte	ge
   dbeae:	461c      	movge	r4, r3
   dbeb0:	2500      	movge	r5, #0
   dbeb2:	2501      	movlt	r5, #1
   dbeb4:	f7ff fd5c 	bl	db970 <_Balloc>
   dbeb8:	693e      	ldr	r6, [r7, #16]
   dbeba:	60c5      	str	r5, [r0, #12]
   dbebc:	6925      	ldr	r5, [r4, #16]
   dbebe:	f107 0114 	add.w	r1, r7, #20
   dbec2:	f104 0914 	add.w	r9, r4, #20
   dbec6:	f100 0e14 	add.w	lr, r0, #20
   dbeca:	f107 0210 	add.w	r2, r7, #16
   dbece:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dbed2:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dbed6:	46f2      	mov	sl, lr
   dbed8:	2700      	movs	r7, #0
   dbeda:	f859 3b04 	ldr.w	r3, [r9], #4
   dbede:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dbee2:	fa1f f883 	uxth.w	r8, r3
   dbee6:	fa17 f78b 	uxtah	r7, r7, fp
   dbeea:	0c1b      	lsrs	r3, r3, #16
   dbeec:	eba7 0808 	sub.w	r8, r7, r8
   dbef0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dbef4:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dbef8:	fa1f f888 	uxth.w	r8, r8
   dbefc:	141f      	asrs	r7, r3, #16
   dbefe:	454d      	cmp	r5, r9
   dbf00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dbf04:	f84a 3b04 	str.w	r3, [sl], #4
   dbf08:	d8e7      	bhi.n	dbeda <__mdiff+0x60>
   dbf0a:	1b2b      	subs	r3, r5, r4
   dbf0c:	3b15      	subs	r3, #21
   dbf0e:	f023 0303 	bic.w	r3, r3, #3
   dbf12:	3304      	adds	r3, #4
   dbf14:	3415      	adds	r4, #21
   dbf16:	42a5      	cmp	r5, r4
   dbf18:	bf38      	it	cc
   dbf1a:	2304      	movcc	r3, #4
   dbf1c:	4419      	add	r1, r3
   dbf1e:	4473      	add	r3, lr
   dbf20:	469e      	mov	lr, r3
   dbf22:	460d      	mov	r5, r1
   dbf24:	4565      	cmp	r5, ip
   dbf26:	d30e      	bcc.n	dbf46 <__mdiff+0xcc>
   dbf28:	f10c 0203 	add.w	r2, ip, #3
   dbf2c:	1a52      	subs	r2, r2, r1
   dbf2e:	f022 0203 	bic.w	r2, r2, #3
   dbf32:	3903      	subs	r1, #3
   dbf34:	458c      	cmp	ip, r1
   dbf36:	bf38      	it	cc
   dbf38:	2200      	movcc	r2, #0
   dbf3a:	441a      	add	r2, r3
   dbf3c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dbf40:	b17b      	cbz	r3, dbf62 <__mdiff+0xe8>
   dbf42:	6106      	str	r6, [r0, #16]
   dbf44:	e7ab      	b.n	dbe9e <__mdiff+0x24>
   dbf46:	f855 8b04 	ldr.w	r8, [r5], #4
   dbf4a:	fa17 f488 	uxtah	r4, r7, r8
   dbf4e:	1422      	asrs	r2, r4, #16
   dbf50:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dbf54:	b2a4      	uxth	r4, r4
   dbf56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dbf5a:	f84e 4b04 	str.w	r4, [lr], #4
   dbf5e:	1417      	asrs	r7, r2, #16
   dbf60:	e7e0      	b.n	dbf24 <__mdiff+0xaa>
   dbf62:	3e01      	subs	r6, #1
   dbf64:	e7ea      	b.n	dbf3c <__mdiff+0xc2>
	...

000dbf68 <__ulp>:
   dbf68:	b082      	sub	sp, #8
   dbf6a:	ed8d 0b00 	vstr	d0, [sp]
   dbf6e:	9b01      	ldr	r3, [sp, #4]
   dbf70:	4912      	ldr	r1, [pc, #72]	; (dbfbc <__ulp+0x54>)
   dbf72:	4019      	ands	r1, r3
   dbf74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dbf78:	2900      	cmp	r1, #0
   dbf7a:	dd05      	ble.n	dbf88 <__ulp+0x20>
   dbf7c:	2200      	movs	r2, #0
   dbf7e:	460b      	mov	r3, r1
   dbf80:	ec43 2b10 	vmov	d0, r2, r3
   dbf84:	b002      	add	sp, #8
   dbf86:	4770      	bx	lr
   dbf88:	4249      	negs	r1, r1
   dbf8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dbf8e:	ea4f 5021 	mov.w	r0, r1, asr #20
   dbf92:	f04f 0200 	mov.w	r2, #0
   dbf96:	f04f 0300 	mov.w	r3, #0
   dbf9a:	da04      	bge.n	dbfa6 <__ulp+0x3e>
   dbf9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dbfa0:	fa41 f300 	asr.w	r3, r1, r0
   dbfa4:	e7ec      	b.n	dbf80 <__ulp+0x18>
   dbfa6:	f1a0 0114 	sub.w	r1, r0, #20
   dbfaa:	291e      	cmp	r1, #30
   dbfac:	bfda      	itte	le
   dbfae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dbfb2:	fa20 f101 	lsrle.w	r1, r0, r1
   dbfb6:	2101      	movgt	r1, #1
   dbfb8:	460a      	mov	r2, r1
   dbfba:	e7e1      	b.n	dbf80 <__ulp+0x18>
   dbfbc:	7ff00000 	.word	0x7ff00000

000dbfc0 <__b2d>:
   dbfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dbfc2:	6905      	ldr	r5, [r0, #16]
   dbfc4:	f100 0714 	add.w	r7, r0, #20
   dbfc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dbfcc:	1f2e      	subs	r6, r5, #4
   dbfce:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dbfd2:	4620      	mov	r0, r4
   dbfd4:	f7ff fd93 	bl	dbafe <__hi0bits>
   dbfd8:	f1c0 0320 	rsb	r3, r0, #32
   dbfdc:	280a      	cmp	r0, #10
   dbfde:	f8df c07c 	ldr.w	ip, [pc, #124]	; dc05c <__b2d+0x9c>
   dbfe2:	600b      	str	r3, [r1, #0]
   dbfe4:	dc14      	bgt.n	dc010 <__b2d+0x50>
   dbfe6:	f1c0 0e0b 	rsb	lr, r0, #11
   dbfea:	fa24 f10e 	lsr.w	r1, r4, lr
   dbfee:	42b7      	cmp	r7, r6
   dbff0:	ea41 030c 	orr.w	r3, r1, ip
   dbff4:	bf34      	ite	cc
   dbff6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dbffa:	2100      	movcs	r1, #0
   dbffc:	3015      	adds	r0, #21
   dbffe:	fa04 f000 	lsl.w	r0, r4, r0
   dc002:	fa21 f10e 	lsr.w	r1, r1, lr
   dc006:	ea40 0201 	orr.w	r2, r0, r1
   dc00a:	ec43 2b10 	vmov	d0, r2, r3
   dc00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc010:	42b7      	cmp	r7, r6
   dc012:	bf3a      	itte	cc
   dc014:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc018:	f1a5 0608 	subcc.w	r6, r5, #8
   dc01c:	2100      	movcs	r1, #0
   dc01e:	380b      	subs	r0, #11
   dc020:	d017      	beq.n	dc052 <__b2d+0x92>
   dc022:	f1c0 0c20 	rsb	ip, r0, #32
   dc026:	fa04 f500 	lsl.w	r5, r4, r0
   dc02a:	42be      	cmp	r6, r7
   dc02c:	fa21 f40c 	lsr.w	r4, r1, ip
   dc030:	ea45 0504 	orr.w	r5, r5, r4
   dc034:	bf8c      	ite	hi
   dc036:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dc03a:	2400      	movls	r4, #0
   dc03c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dc040:	fa01 f000 	lsl.w	r0, r1, r0
   dc044:	fa24 f40c 	lsr.w	r4, r4, ip
   dc048:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dc04c:	ea40 0204 	orr.w	r2, r0, r4
   dc050:	e7db      	b.n	dc00a <__b2d+0x4a>
   dc052:	ea44 030c 	orr.w	r3, r4, ip
   dc056:	460a      	mov	r2, r1
   dc058:	e7d7      	b.n	dc00a <__b2d+0x4a>
   dc05a:	bf00      	nop
   dc05c:	3ff00000 	.word	0x3ff00000

000dc060 <__d2b>:
   dc060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dc064:	4689      	mov	r9, r1
   dc066:	2101      	movs	r1, #1
   dc068:	ec57 6b10 	vmov	r6, r7, d0
   dc06c:	4690      	mov	r8, r2
   dc06e:	f7ff fc7f 	bl	db970 <_Balloc>
   dc072:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dc076:	4604      	mov	r4, r0
   dc078:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dc07c:	bb35      	cbnz	r5, dc0cc <__d2b+0x6c>
   dc07e:	2e00      	cmp	r6, #0
   dc080:	9301      	str	r3, [sp, #4]
   dc082:	d028      	beq.n	dc0d6 <__d2b+0x76>
   dc084:	4668      	mov	r0, sp
   dc086:	9600      	str	r6, [sp, #0]
   dc088:	f7ff fd59 	bl	dbb3e <__lo0bits>
   dc08c:	9900      	ldr	r1, [sp, #0]
   dc08e:	b300      	cbz	r0, dc0d2 <__d2b+0x72>
   dc090:	9a01      	ldr	r2, [sp, #4]
   dc092:	f1c0 0320 	rsb	r3, r0, #32
   dc096:	fa02 f303 	lsl.w	r3, r2, r3
   dc09a:	430b      	orrs	r3, r1
   dc09c:	40c2      	lsrs	r2, r0
   dc09e:	6163      	str	r3, [r4, #20]
   dc0a0:	9201      	str	r2, [sp, #4]
   dc0a2:	9b01      	ldr	r3, [sp, #4]
   dc0a4:	61a3      	str	r3, [r4, #24]
   dc0a6:	2b00      	cmp	r3, #0
   dc0a8:	bf14      	ite	ne
   dc0aa:	2202      	movne	r2, #2
   dc0ac:	2201      	moveq	r2, #1
   dc0ae:	6122      	str	r2, [r4, #16]
   dc0b0:	b1d5      	cbz	r5, dc0e8 <__d2b+0x88>
   dc0b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dc0b6:	4405      	add	r5, r0
   dc0b8:	f8c9 5000 	str.w	r5, [r9]
   dc0bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dc0c0:	f8c8 0000 	str.w	r0, [r8]
   dc0c4:	4620      	mov	r0, r4
   dc0c6:	b003      	add	sp, #12
   dc0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc0cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc0d0:	e7d5      	b.n	dc07e <__d2b+0x1e>
   dc0d2:	6161      	str	r1, [r4, #20]
   dc0d4:	e7e5      	b.n	dc0a2 <__d2b+0x42>
   dc0d6:	a801      	add	r0, sp, #4
   dc0d8:	f7ff fd31 	bl	dbb3e <__lo0bits>
   dc0dc:	9b01      	ldr	r3, [sp, #4]
   dc0de:	6163      	str	r3, [r4, #20]
   dc0e0:	2201      	movs	r2, #1
   dc0e2:	6122      	str	r2, [r4, #16]
   dc0e4:	3020      	adds	r0, #32
   dc0e6:	e7e3      	b.n	dc0b0 <__d2b+0x50>
   dc0e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dc0ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dc0f0:	f8c9 0000 	str.w	r0, [r9]
   dc0f4:	6918      	ldr	r0, [r3, #16]
   dc0f6:	f7ff fd02 	bl	dbafe <__hi0bits>
   dc0fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dc0fe:	e7df      	b.n	dc0c0 <__d2b+0x60>

000dc100 <__ratio>:
   dc100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc104:	4688      	mov	r8, r1
   dc106:	4669      	mov	r1, sp
   dc108:	4681      	mov	r9, r0
   dc10a:	f7ff ff59 	bl	dbfc0 <__b2d>
   dc10e:	a901      	add	r1, sp, #4
   dc110:	4640      	mov	r0, r8
   dc112:	ec55 4b10 	vmov	r4, r5, d0
   dc116:	f7ff ff53 	bl	dbfc0 <__b2d>
   dc11a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dc11e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dc122:	eba3 0c02 	sub.w	ip, r3, r2
   dc126:	e9dd 3200 	ldrd	r3, r2, [sp]
   dc12a:	1a9b      	subs	r3, r3, r2
   dc12c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dc130:	ec51 0b10 	vmov	r0, r1, d0
   dc134:	2b00      	cmp	r3, #0
   dc136:	bfd6      	itet	le
   dc138:	460a      	movle	r2, r1
   dc13a:	462a      	movgt	r2, r5
   dc13c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dc140:	468b      	mov	fp, r1
   dc142:	462f      	mov	r7, r5
   dc144:	bfd4      	ite	le
   dc146:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dc14a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dc14e:	4620      	mov	r0, r4
   dc150:	ee10 2a10 	vmov	r2, s0
   dc154:	465b      	mov	r3, fp
   dc156:	4639      	mov	r1, r7
   dc158:	f7fd fd74 	bl	d9c44 <__aeabi_ddiv>
   dc15c:	ec41 0b10 	vmov	d0, r0, r1
   dc160:	b003      	add	sp, #12
   dc162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc166 <__copybits>:
   dc166:	3901      	subs	r1, #1
   dc168:	b570      	push	{r4, r5, r6, lr}
   dc16a:	1149      	asrs	r1, r1, #5
   dc16c:	6914      	ldr	r4, [r2, #16]
   dc16e:	3101      	adds	r1, #1
   dc170:	f102 0314 	add.w	r3, r2, #20
   dc174:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dc178:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dc17c:	1f05      	subs	r5, r0, #4
   dc17e:	42a3      	cmp	r3, r4
   dc180:	d30c      	bcc.n	dc19c <__copybits+0x36>
   dc182:	1aa3      	subs	r3, r4, r2
   dc184:	3b11      	subs	r3, #17
   dc186:	f023 0303 	bic.w	r3, r3, #3
   dc18a:	3211      	adds	r2, #17
   dc18c:	42a2      	cmp	r2, r4
   dc18e:	bf88      	it	hi
   dc190:	2300      	movhi	r3, #0
   dc192:	4418      	add	r0, r3
   dc194:	2300      	movs	r3, #0
   dc196:	4288      	cmp	r0, r1
   dc198:	d305      	bcc.n	dc1a6 <__copybits+0x40>
   dc19a:	bd70      	pop	{r4, r5, r6, pc}
   dc19c:	f853 6b04 	ldr.w	r6, [r3], #4
   dc1a0:	f845 6f04 	str.w	r6, [r5, #4]!
   dc1a4:	e7eb      	b.n	dc17e <__copybits+0x18>
   dc1a6:	f840 3b04 	str.w	r3, [r0], #4
   dc1aa:	e7f4      	b.n	dc196 <__copybits+0x30>

000dc1ac <__any_on>:
   dc1ac:	f100 0214 	add.w	r2, r0, #20
   dc1b0:	6900      	ldr	r0, [r0, #16]
   dc1b2:	114b      	asrs	r3, r1, #5
   dc1b4:	4298      	cmp	r0, r3
   dc1b6:	b510      	push	{r4, lr}
   dc1b8:	db11      	blt.n	dc1de <__any_on+0x32>
   dc1ba:	dd0a      	ble.n	dc1d2 <__any_on+0x26>
   dc1bc:	f011 011f 	ands.w	r1, r1, #31
   dc1c0:	d007      	beq.n	dc1d2 <__any_on+0x26>
   dc1c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dc1c6:	fa24 f001 	lsr.w	r0, r4, r1
   dc1ca:	fa00 f101 	lsl.w	r1, r0, r1
   dc1ce:	428c      	cmp	r4, r1
   dc1d0:	d10b      	bne.n	dc1ea <__any_on+0x3e>
   dc1d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dc1d6:	4293      	cmp	r3, r2
   dc1d8:	d803      	bhi.n	dc1e2 <__any_on+0x36>
   dc1da:	2000      	movs	r0, #0
   dc1dc:	bd10      	pop	{r4, pc}
   dc1de:	4603      	mov	r3, r0
   dc1e0:	e7f7      	b.n	dc1d2 <__any_on+0x26>
   dc1e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dc1e6:	2900      	cmp	r1, #0
   dc1e8:	d0f5      	beq.n	dc1d6 <__any_on+0x2a>
   dc1ea:	2001      	movs	r0, #1
   dc1ec:	e7f6      	b.n	dc1dc <__any_on+0x30>

000dc1ee <__ascii_wctomb>:
   dc1ee:	b149      	cbz	r1, dc204 <__ascii_wctomb+0x16>
   dc1f0:	2aff      	cmp	r2, #255	; 0xff
   dc1f2:	bf85      	ittet	hi
   dc1f4:	238a      	movhi	r3, #138	; 0x8a
   dc1f6:	6003      	strhi	r3, [r0, #0]
   dc1f8:	700a      	strbls	r2, [r1, #0]
   dc1fa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dc1fe:	bf98      	it	ls
   dc200:	2001      	movls	r0, #1
   dc202:	4770      	bx	lr
   dc204:	4608      	mov	r0, r1
   dc206:	4770      	bx	lr

000dc208 <__aeabi_d2lz>:
   dc208:	b538      	push	{r3, r4, r5, lr}
   dc20a:	2200      	movs	r2, #0
   dc20c:	2300      	movs	r3, #0
   dc20e:	4604      	mov	r4, r0
   dc210:	460d      	mov	r5, r1
   dc212:	f7fd fe5f 	bl	d9ed4 <__aeabi_dcmplt>
   dc216:	b928      	cbnz	r0, dc224 <__aeabi_d2lz+0x1c>
   dc218:	4620      	mov	r0, r4
   dc21a:	4629      	mov	r1, r5
   dc21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc220:	f7fd bf30 	b.w	da084 <__aeabi_d2ulz>
   dc224:	4620      	mov	r0, r4
   dc226:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dc22a:	f7fd ff2b 	bl	da084 <__aeabi_d2ulz>
   dc22e:	4240      	negs	r0, r0
   dc230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc234:	bd38      	pop	{r3, r4, r5, pc}
   dc236:	bf00      	nop

000dc238 <dynalib_user>:
   dc238:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dc248:	0000 0000 6341 6974 6576 5720 6165 2072     ....Active Wear 
   dc258:	7453 7461 6f69 006e 6341 6974 6576 5700     Station.Active.W
   dc268:	6165 0072 7553 6767 7365 6974 6e6f 2f00     ear.Suggestion./
   dc278:	6547 5774 6165 6874 7265 6f46 6572 6163     GetWeatherForeca
   dc288:	7473 002f 6e49 4920 646e 7865 003a 0046     st/.In Index:.F.
   dc298:	754f 2074 6e49 6564 3a78 4600 6961 656c     Out Index:.Faile
   dc2a8:	2064 6f74 7220 6165 2064 7266 6d6f 4420     d to read from D
   dc2b8:	5448 7320 6e65 6f73 0072 6547 5774 6165     HT sensor.GetWea
   dc2c8:	6874 7265 6f46 6572 6163 7473 4900 646e     therForecast.Ind
   dc2d8:	6f6f 2072 6554 706d 4900 646e 6f6f 2072     oor Temp.Indoor 
   dc2e8:	7548 696d 6964 7974 4f00 7475 6f64 726f     Humidity.Outdoor
   dc2f8:	5420 6d65 0070 754f 6474 6f6f 2072 7548      Temp.Outdoor Hu
   dc308:	696d 6964 7974 4900 646e 6f6f 2072 6548     midity.Indoor He
   dc318:	7461 4920 646e 7865 4f00 7475 6f64 726f     at Index.Outdoor
   dc328:	4820 6165 2074 6e49 6564 0078 7573 7362      Heat Index.subs
   dc338:	7263 7069 6974 6e6f 6148 646e 656c 2072     criptionHandler 
   dc348:	7325 7400 6d65 0070 7568 006d 6577 6862     %s.temp.hum.webh
   dc358:	6f6f 006b 6255 6469 746f 0073               ook.Ubidots.

000dc364 <_ZL9BasicFont>:
	...
   dc36c:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   dc37c:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   dc38c:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   dc39c:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   dc3ac:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   dc3bc:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   dc3cc:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   dc3dc:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   dc3ec:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   dc3fc:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   dc40c:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   dc41c:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   dc42c:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   dc43c:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   dc44c:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   dc45c:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   dc46c:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   dc47c:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   dc48c:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   dc49c:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   dc4ac:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   dc4bc:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   dc4cc:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   dc4dc:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   dc4ec:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   dc4fc:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   dc50c:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   dc51c:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   dc52c:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   dc53c:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   dc54c:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   dc55c:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   dc56c:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   dc57c:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   dc58c:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   dc59c:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   dc5ac:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   dc5bc:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   dc5cc:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   dc5dc:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   dc5ec:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   dc5fc:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   dc60c:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   dc61c:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   dc62c:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   dc63c:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   dc64c:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   dc65c:	0200 0505 0002 0000 6255 6469 746f 5073     ........UbidotsP
   dc66c:	7261 6974 6c63 2f65 2e33 0032 7254 6979     article/3.2.Tryi
   dc67c:	676e 7420 206f 6f63 6e6e 6365 2074 6f74     ng to connect to
   dc68c:	0020 2c20 6120 7474 6d65 7470 6e20 6d75      . , attempt num
   dc69c:	6562 3a72 0020 7441 6574 706d 2074 6966     ber: .Attempt fi
   dc6ac:	696e 6873 6465 5300 7265 6576 2772 2073     nished.Server's 
   dc6bc:	6572 7073 6e6f 6573 003a 2d0a 2d2d 2d2d     response:..-----
   dc6cc:	2d2d 2d2d 002d 6974 656d 756f 2c74 6320     -----.timeout, c
   dc6dc:	756f 646c 6e20 746f 7220 6165 2064 6e61     ould not read an
   dc6ec:	2079 6572 7073 6e6f 6573 6620 6f72 206d     y response from 
   dc6fc:	6874 2065 6f68 7473 5000 534f 2054 612f     the host.POST /a
   dc70c:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   dc71c:	2000 5448 5054 312f 312e 0a0d 4800 736f     . HTTP/1.1...Hos
   dc72c:	3a74 0020 7355 7265 412d 6567 746e 203a     t: .User-Agent: 
   dc73c:	5800 412d 7475 2d68 6f54 656b 3a6e 0020     .X-Auth-Token: .
   dc74c:	6f43 6e6e 6365 6974 6e6f 203a 6c63 736f     Connection: clos
   dc75c:	0d65 000a 6f43 746e 6e65 2d74 7954 6570     e...Content-Type
   dc76c:	203a 7061 6c70 6369 7461 6f69 2f6e 736a     : application/js
   dc77c:	6e6f 0a0d 4300 6e6f 6574 746e 4c2d 6e65     on...Content-Len
   dc78c:	7467 3a68 0020 614d 696b 676e 7220 7165     gth: .Making req
   dc79c:	6575 7473 7420 206f 6255 6469 746f 3a73     uest to Ubidots:
   dc7ac:	000a 6177 7469 6e69 2067 6f66 2072 6573     ..waiting for se
   dc7bc:	7672 7265 6120 736e 6577 2072 2e2e 002e     rver answer ....
   dc7cc:	550a 6962 6f64 7374 2027 6553 7672 7265     .Ubidots' Server
   dc7dc:	7220 7365 6f70 736e 3a65 000a 6f43 6c75      response:..Coul
   dc7ec:	2064 6f6e 2074 6573 646e 6420 7461 2061     d not send data 
   dc7fc:	6f74 7520 6962 6f64 7374 7520 6973 676e     to ubidots using
   dc80c:	4820 5454 0050 4547 2054 612f 6970 762f      HTTP.GET /api/v
   dc81c:	2e31 2f36 6564 6976 6563 2f73 2f00 766c     1.6/devices/./lv
   dc82c:	4300 6e6f 6574 746e 542d 7079 3a65 6120     .Content-Type: a
   dc83c:	7070 696c 6163 6974 6e6f 6a2f 6f73 0d6e     pplication/json.
   dc84c:	0d0a 000a 6f43 6e6e 6365 6974 6e6f 4620     ....Connection F
   dc85c:	6961 656c 2064 6275 6469 746f 2073 202d     ailed ubidots - 
   dc86c:	7254 2079 6741 6961 006e 0000               Try Again...

000dc878 <_ZTV7UbiHTTP>:
	...
   dc880:	576d 000d 599d 000d 5519 000d 551d 000d     mW...Y...U...U..

000dc890 <_ZTV11UbiParticle>:
	...
   dc898:	5bbd 000d 5b9d 000d 5ba9 000d 5bad 000d     .[...[...[...[..
   dc8a8:	6f59 2075 7261 2065 6573 646e 6e69 2067     You are sending 
   dc8b8:	6f6d 6572 7420 6168 206e 6874 2065 616d     more than the ma
   dc8c8:	6978 756d 206d 666f 6320 6e6f 6573 7563     ximum of consecu
   dc8d8:	6974 6576 7620 7261 6169 6c62 7365 2500     tive variables.%
   dc8e8:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   dc8f8:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   dc908:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   dc918:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   dc928:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   dc938:	2500 2c73 7000 7961 6f6c 6461 003a 7325     .%s,.payload:.%s
   dc948:	507c 534f 7c54 7325 007c 7325 7325 253a     |POST|%s|.%s%s:%
   dc958:	0073 7325 3e3d 2500 2473 7325 2500 4073     s.%s=>.%s$%s.%s@
   dc968:	6c25 0075 7325 657c 646e 5300 6e65 6964     %lu.%s|end.Sendi
   dc978:	676e 6420 7461 2e61 2e2e 4100 7474 6d65     ng data....Attem
   dc988:	7470 6e69 2067 6f74 7220 6365 6e6f 656e     pting to reconne
   dc998:	7463 7c00 564c 007c 6150 6c79 616f 2064     ct.|LV|.Payload 
   dc9a8:	6f66 2072 6572 7571 7365 3a74 0a00 2d2d     for request:..--
   dc9b8:	2d2d 5000 534f 0054 4b4f 4300 756f 646c     --.POST.OK.Could
   dc9c8:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   dc9d8:	6874 2065 6f68 7473 4c00 0056 5245 4f52     the host.LV.ERRO
   dc9e8:	2052 6f63 6c75 2064 6f6e 2074 6f63 6e6e     R could not conn
   dc9f8:	6365 2074 6f74 7420 6568 7320 7265 6576     ect to the serve
   dca08:	0072 756e 6c6c 4500 5252 524f 0000 0000     r.null.ERROR....

000dca18 <_ZTV6UbiTCP>:
	...
   dca20:	648d 000d 6531 000d 61dd 000d 678d 000d     .d..1e...a...g..
   dca30:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   dca40:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   dca50:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   dca60:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   dca70:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   dca80:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   dca90:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   dcaa0:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   dcab0:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   dcac0:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   dcad0:	7720 7469 2068 4455 0050 0000                with UDP...

000dcadc <_ZTV6UbiUDP>:
	...
   dcae4:	690d 000d 6895 000d 68a1 000d 68a5 000d     .i...h...h...h..
   dcaf4:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   dcb04:	6962 6f64 7374 632e 6d6f 0000               bidots.com..

000dcb10 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000dcb18 <_ZTVN5spark13CellularClassE>:
	...
   dcb20:	710b 000d 7101 000d 70f7 000d 70ad 000d     .q...q...p...p..
   dcb30:	70eb 000d 70df 000d 7ddd 000d 7de5 000d     .p...p...}...}..
   dcb40:	70d3 000d 70cb 000d 70c1 000d 70b7 000d     .p...p...p...p..
   dcb50:	7e15 000d                                   .~..

000dcb54 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcb5c:	7145 000d 714b 000d 7189 000d 7159 000d     Eq..Kq...q..Yq..
   dcb6c:	7147 000d                                   Gq..

000dcb70 <_ZTVN5spark13EthernetClassE>:
	...
   dcb78:	76db 000d 76d1 000d 76c7 000d 76bd 000d     .v...v...v...v..
   dcb88:	76b1 000d 76a5 000d 7ddd 000d 7de5 000d     .v...v...}...}..
   dcb98:	7699 000d 7691 000d 7687 000d 767d 000d     .v...v...v..}v..
   dcba8:	7e15 000d                                   .~..

000dcbac <_ZTV7TwoWire>:
	...
   dcbb4:	76f9 000d 7743 000d 771b 000d 76fb 000d     .v..Cw...w...v..
   dcbc4:	7723 000d 772b 000d 7733 000d 773b 000d     #w..+w..3w..;w..

000dcbd4 <_ZTV9IPAddress>:
	...
   dcbdc:	77b5 000d 77a5 000d 77a7 000d               .w...w...w..

000dcbe8 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcbf0:	7903 000d 7909 000d 791f 000d 7917 000d     .y...y...y...y..
   dcc00:	7905 000d 7061 0070                         .y..app.

000dcc08 <_ZTVN5spark12NetworkClassE>:
	...
   dcc10:	7d9d 000d 7da7 000d 7db1 000d 7dbb 000d     .}...}...}...}..
   dcc20:	7dc5 000d 7dd1 000d 7ddd 000d 7de5 000d     .}...}...}...}..
   dcc30:	7ded 000d 7df9 000d 7e01 000d 7e0b 000d     .}...}...~...~..
   dcc40:	7e15 000d 6977 6972 676e 7200 6365 2076     .~..wiring.recv 
   dcc50:	7265 6f72 2072 203d 6425 0000               error = %d..

000dcc5c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcc64:	8313 000d 8335 000d 8713 000d 8343 000d     ....5.......C...
   dcc74:	8315 000d                                   ....

000dcc78 <_ZTV9TCPClient>:
	...
   dcc80:	51b5 000d 5245 000d 8291 000d 82ab 000d     .Q..ER..........
   dcc90:	859d 000d 840f 000d 83e1 000d 82d5 000d     ................
   dcca0:	84a7 000d 8739 000d 8443 000d 8651 000d     ....9...C...Q...
   dccb0:	82d7 000d 8309 000d 82bd 000d 8347 000d     ............G...
   dccc0:	83c1 000d 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   dccd0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000dcce0 <_ZTV3UDP>:
	...
   dcce8:	5195 000d 5259 000d 8869 000d 8991 000d     .Q..YR..i.......
   dccf8:	8861 000d 8881 000d 889f 000d 88b9 000d     a...............
   dcd08:	88dd 000d 8975 000d 8adb 000d 8a19 000d     ....u...........
   dcd18:	8d35 000d 8849 000d 8bc5 000d 8cbd 000d     5...I...........
   dcd28:	8a51 000d 8bf3 000d 89bb 000d 8857 000d     Q...........W...
   dcd38:	89f9 000d 885d 000d 88bb 000d fff0 ffff     ....]...........
   dcd48:	0000 0000 88d5 000d                         ........

000dcd50 <_ZTV11USARTSerial>:
	...
   dcd58:	8dcd 000d 8e39 000d 8e11 000d 7f09 000d     ....9...........
   dcd68:	8de1 000d 8dfd 000d 8def 000d 8e0b 000d     ................
   dcd78:	8dcf 000d 8dd3 000d                         ........

000dcd80 <_ZTV9USBSerial>:
	...
   dcd88:	8ecd 000d 8f35 000d 8f0b 000d 7f09 000d     ....5...........
   dcd98:	8efd 000d 8ecf 000d 8edf 000d 8f2f 000d     ............/...
   dcda8:	8eef 000d 8ec9 000d                         ........

000dcdb0 <_ZSt7nothrow>:
	...

000dcdb1 <_ZTSSt19_Sp_make_shared_tag>:
   dcdb1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   dcdc1:	6572 5f64 6174 0067 0000                     red_tag....

000dcdcc <_ZTISt19_Sp_make_shared_tag>:
   dcdcc:	ce0c 000d cdb1 000d                         ........

000dcdd4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   dcdd4:	ce6c 000d cde0 000d ce90 000d               l...........

000dcde0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   dcde0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   dcdf0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   dce00:	0045 0000                                   E...

000dce04 <_ZTVN10__cxxabiv117__class_type_infoE>:
   dce04:	0000 0000 cdd4 000d 9491 000d 94a5 000d     ................
   dce14:	9639 000d 9639 000d 950f 000d 9451 000d     9...9.......Q...
   dce24:	94f7 000d 94b9 000d 9485 000d               ............

000dce30 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   dce30:	ce6c 000d ce3c 000d cdd4 000d               l...<.......

000dce3c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dce3c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   dce4c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   dce5c:	666e 456f 0000 0000                         nfoE....

000dce64 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dce64:	0000 0000 ce30 000d 9539 000d 954d 000d     ....0...9...M...
   dce74:	9639 000d 9639 000d 950f 000d 9451 000d     9...9.......Q...
   dce84:	960d 000d 9599 000d 9561 000d               ........a...

000dce90 <_ZTISt9type_info>:
   dce90:	ce0c 000d ce98 000d                         ........

000dce98 <_ZTSSt9type_info>:
   dce98:	7453 7439 7079 5f65 6e69 6f66 6e00 0066     St9type_info.nf.
   dcea8:	6e69 7469 0079 6e61 0000 0000               inity.an....

000dceb4 <fpi.7566>:
   dceb4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dcec4:	0000 0000                                   ....

000dcec8 <fpinan.7602>:
   dcec8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dcee0 <tinytens>:
   dcee0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dcef0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dcf00:	6f43 64ac 0628 1168                         Co.d(.h.

000dcf08 <_ctype_>:
   dcf08:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dcf18:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dcf28:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dcf38:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dcf48:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dcf58:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dcf68:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dcf78:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dcf88:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd00c <_C_numeric_locale>:
   dd00c:	c7ca 000d c84f 000d e2b8 2003 0043 4f50     ....O...... C.PO
   dd01c:	4953 0058                                   SIX.

000dd020 <__mprec_bigtens>:
   dd020:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dd030:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dd040:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dd048 <__mprec_tens>:
   dd048:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dd058:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dd068:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dd078:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dd088:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dd098:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dd0a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dd0b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dd0c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dd0d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dd0e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dd0f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dd108:	9db4 79d9 7843 44ea                         ...yCx.D

000dd110 <p05.7490>:
   dd110:	0005 0000 0019 0000 007d 0000               ........}...

000dd11c <link_const_variable_data_end>:
   dd11c:	000d47b1 	.word	0x000d47b1
   dd120:	000d54c5 	.word	0x000d54c5
   dd124:	000d5b79 	.word	0x000d5b79
   dd128:	000d617d 	.word	0x000d617d
   dd12c:	000d6871 	.word	0x000d6871
   dd130:	000d68d5 	.word	0x000d68d5
   dd134:	000d7085 	.word	0x000d7085
   dd138:	000d7115 	.word	0x000d7115
   dd13c:	000d76e5 	.word	0x000d76e5
   dd140:	000d7d8d 	.word	0x000d7d8d
   dd144:	000d7ef5 	.word	0x000d7ef5
   dd148:	000d7fdd 	.word	0x000d7fdd
   dd14c:	000d8255 	.word	0x000d8255
   dd150:	000d8835 	.word	0x000d8835

000dd154 <link_constructors_end>:
	...
