
/Users/talalagedeon/Desktop/particlePDP/shortproject/target/3.0.0/boron/shortproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003564  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7580  000d7580  00007580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d7588  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e584  000d758c  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  2003e5ec  2003e5ec  0002e5ec  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d75f4  000d75f4  000275f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d761c  000d761c  0002761c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001a44fa  00000000  00000000  00027620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00019051  00000000  00000000  001cbb1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00037d97  00000000  00000000  001e4b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002cc8  00000000  00000000  0021c902  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000096b8  00000000  00000000  0021f5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003abb6  00000000  00000000  00228c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00041c3c  00000000  00000000  00263838  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00129cca  00000000  00000000  002a5474  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007f08  00000000  00000000  003cf140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ff89 	bl	d6f44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ff91 	bl	d6f60 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e584 	.word	0x2003e584
   d4048:	000d758c 	.word	0x000d758c
   d404c:	2003e5ec 	.word	0x2003e5ec
   d4050:	2003e5ec 	.word	0x2003e5ec
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f865 	bl	d612c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7550 	.word	0x000d7550
   d407c:	000d7574 	.word	0x000d7574

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b824 	b.w	d40cc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8c7 	bl	d4218 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b80f 	b.w	d60b0 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bfbf 	b.w	d5014 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bfbd 	b.w	d5014 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bfc3 	b.w	d5024 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_Z9myHandlerPKcS0_>:
  Particle.subscribe("hook-response/CurrentWeather", myHandler, MY_DEVICES);
}

void myHandler(const char *event, const char *data) {
  // Handle the integration response
}
   d40ae:	4770      	bx	lr

000d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b0:	b513      	push	{r0, r1, r4, lr}
   d40b2:	4b05      	ldr	r3, [pc, #20]	; (d40c8 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40b4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40b6:	f88d 3000 	strb.w	r3, [sp]
   d40ba:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40bc:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40be:	f001 f9a1 	bl	d5404 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40c2:	4620      	mov	r0, r4
   d40c4:	b002      	add	sp, #8
   d40c6:	bd10      	pop	{r4, pc}
   d40c8:	2003e5f0 	.word	0x2003e5f0

000d40cc <setup>:
void setup() {
   d40cc:	b513      	push	{r0, r1, r4, lr}
  Serial.begin(9600);
   d40ce:	f001 ff51 	bl	d5f74 <_Z16_fetch_usbserialv>
   d40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d6:	f001 ff41 	bl	d5f5c <_ZN9USBSerial5beginEl>
  Serial.println("DHT11 test");
   d40da:	f001 ff4b 	bl	d5f74 <_Z16_fetch_usbserialv>
   d40de:	491f      	ldr	r1, [pc, #124]	; (d415c <setup+0x90>)
  SeeedOled.init();
   d40e0:	4c1f      	ldr	r4, [pc, #124]	; (d4160 <setup+0x94>)
  Serial.println("DHT11 test");
   d40e2:	f001 fd04 	bl	d5aee <_ZN5Print7printlnEPKc>
  dht.begin();
   d40e6:	481f      	ldr	r0, [pc, #124]	; (d4164 <setup+0x98>)
   d40e8:	f000 f9aa 	bl	d4440 <_ZN3DHT5beginEv>
  leds.init();
   d40ec:	481e      	ldr	r0, [pc, #120]	; (d4168 <setup+0x9c>)
   d40ee:	f000 fc8d 	bl	d4a0c <_ZN12ChainableLED4initEv>
  Wire.begin();
   d40f2:	f002 f8cd 	bl	d6290 <_Z19__fetch_global_Wirev>
   d40f6:	f001 fb77 	bl	d57e8 <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   d40fa:	4620      	mov	r0, r4
   d40fc:	f000 fcbc 	bl	d4a78 <_ZN9SeeedOLED4initEv>
  SeeedOled.clearDisplay();
   d4100:	4620      	mov	r0, r4
   d4102:	f000 fd1b 	bl	d4b3c <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d4106:	4620      	mov	r0, r4
   d4108:	f000 fd7d 	bl	d4c06 <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d410c:	4620      	mov	r0, r4
   d410e:	f000 fcc5 	bl	d4a9c <_ZN9SeeedOLED11setPageModeEv>
  SeeedOled.setTextXY(2, 0);
   d4112:	2200      	movs	r2, #0
   d4114:	4620      	mov	r0, r4
   d4116:	2102      	movs	r1, #2
   d4118:	f000 fccb 	bl	d4ab2 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Particle");
   d411c:	4620      	mov	r0, r4
   d411e:	4913      	ldr	r1, [pc, #76]	; (d416c <setup+0xa0>)
   d4120:	f000 fd2d 	bl	d4b7e <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d4124:	2200      	movs	r2, #0
   d4126:	4620      	mov	r0, r4
   d4128:	2103      	movs	r1, #3
   d412a:	f000 fcc2 	bl	d4ab2 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Weather");
   d412e:	4620      	mov	r0, r4
   d4130:	490f      	ldr	r1, [pc, #60]	; (d4170 <setup+0xa4>)
   d4132:	f000 fd24 	bl	d4b7e <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4136:	2200      	movs	r2, #0
   d4138:	4620      	mov	r0, r4
   d413a:	2104      	movs	r1, #4
   d413c:	f000 fcb9 	bl	d4ab2 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Station");
   d4140:	4620      	mov	r0, r4
   d4142:	490c      	ldr	r1, [pc, #48]	; (d4174 <setup+0xa8>)
   d4144:	f000 fd1b 	bl	d4b7e <_ZN9SeeedOLED9putStringEPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4148:	2300      	movs	r3, #0
   d414a:	e9cd 3300 	strd	r3, r3, [sp]
   d414e:	490a      	ldr	r1, [pc, #40]	; (d4178 <setup+0xac>)
   d4150:	480a      	ldr	r0, [pc, #40]	; (d417c <setup+0xb0>)
   d4152:	461a      	mov	r2, r3
   d4154:	f000 feee 	bl	d4f34 <spark_subscribe>
}
   d4158:	b002      	add	sp, #8
   d415a:	bd10      	pop	{r4, pc}
   d415c:	000d7038 	.word	0x000d7038
   d4160:	2003e618 	.word	0x2003e618
   d4164:	2003e5f4 	.word	0x2003e5f4
   d4168:	2003e608 	.word	0x2003e608
   d416c:	000d7043 	.word	0x000d7043
   d4170:	000d7069 	.word	0x000d7069
   d4174:	000d704c 	.word	0x000d704c
   d4178:	000d40af 	.word	0x000d40af
   d417c:	000d7054 	.word	0x000d7054

000d4180 <_Z13updateDisplayii>:
  // Trigger the integration
  Particle.publish("CurrentWeather", data, PRIVATE);
}

void updateDisplay (int temp, int humidity)
{
   d4180:	b570      	push	{r4, r5, r6, lr}
  SeeedOled.clearDisplay(), 
   d4182:	4c15      	ldr	r4, [pc, #84]	; (d41d8 <_Z13updateDisplayii+0x58>)
{
   d4184:	4606      	mov	r6, r0
  SeeedOled.clearDisplay(), 
   d4186:	4620      	mov	r0, r4
{
   d4188:	460d      	mov	r5, r1
  SeeedOled.clearDisplay(), 
   d418a:	f000 fcd7 	bl	d4b3c <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setTextXY(1, 0);
   d418e:	2200      	movs	r2, #0
   d4190:	4620      	mov	r0, r4
   d4192:	2101      	movs	r1, #1
   d4194:	f000 fc8d 	bl	d4ab2 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Indoor Temp: ");
   d4198:	4620      	mov	r0, r4
   d419a:	4910      	ldr	r1, [pc, #64]	; (d41dc <_Z13updateDisplayii+0x5c>)
   d419c:	f000 fcef 	bl	d4b7e <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(temp);
   d41a0:	4631      	mov	r1, r6
   d41a2:	4620      	mov	r0, r4
   d41a4:	f000 fcf8 	bl	d4b98 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("C");
   d41a8:	4620      	mov	r0, r4
   d41aa:	490d      	ldr	r1, [pc, #52]	; (d41e0 <_Z13updateDisplayii+0x60>)
   d41ac:	f000 fce7 	bl	d4b7e <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(2, 0);
   d41b0:	2200      	movs	r2, #0
   d41b2:	4620      	mov	r0, r4
   d41b4:	2102      	movs	r1, #2
   d41b6:	f000 fc7c 	bl	d4ab2 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Indoor Humd: ");
   d41ba:	4620      	mov	r0, r4
   d41bc:	4909      	ldr	r1, [pc, #36]	; (d41e4 <_Z13updateDisplayii+0x64>)
   d41be:	f000 fcde 	bl	d4b7e <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidity);
   d41c2:	4629      	mov	r1, r5
   d41c4:	4620      	mov	r0, r4
   d41c6:	f000 fce7 	bl	d4b98 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
   d41ca:	4620      	mov	r0, r4
   d41cc:	4906      	ldr	r1, [pc, #24]	; (d41e8 <_Z13updateDisplayii+0x68>)
   d41ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SeeedOled.putString("%");
   d41d2:	f000 bcd4 	b.w	d4b7e <_ZN9SeeedOLED9putStringEPKc>
   d41d6:	bf00      	nop
   d41d8:	2003e618 	.word	0x2003e618
   d41dc:	000d7071 	.word	0x000d7071
   d41e0:	000d70b2 	.word	0x000d70b2
   d41e4:	000d707f 	.word	0x000d707f
   d41e8:	000d708d 	.word	0x000d708d

000d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d41ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d41ee:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d41f0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d41f2:	b17c      	cbz	r4, d4214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d41f4:	6863      	ldr	r3, [r4, #4]
   d41f6:	3b01      	subs	r3, #1
   d41f8:	6063      	str	r3, [r4, #4]
   d41fa:	b95b      	cbnz	r3, d4214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d41fc:	6823      	ldr	r3, [r4, #0]
   d41fe:	4620      	mov	r0, r4
   d4200:	689b      	ldr	r3, [r3, #8]
   d4202:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4204:	68a3      	ldr	r3, [r4, #8]
   d4206:	3b01      	subs	r3, #1
   d4208:	60a3      	str	r3, [r4, #8]
   d420a:	b91b      	cbnz	r3, d4214 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d420c:	6823      	ldr	r3, [r4, #0]
   d420e:	4620      	mov	r0, r4
   d4210:	68db      	ldr	r3, [r3, #12]
   d4212:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4214:	4628      	mov	r0, r5
   d4216:	bd38      	pop	{r3, r4, r5, pc}

000d4218 <loop>:
void loop() {
   d4218:	b500      	push	{lr}
   d421a:	ed2d 8b04 	vpush	{d8-d9}
  delay(50000);
   d421e:	f24c 3050 	movw	r0, #50000	; 0xc350
void loop() {
   d4222:	b08d      	sub	sp, #52	; 0x34
  delay(50000);
   d4224:	f000 ff26 	bl	d5074 <delay>
  String data = String(10);
   d4228:	220a      	movs	r2, #10
   d422a:	4611      	mov	r1, r2
   d422c:	a804      	add	r0, sp, #16
   d422e:	f001 fd60 	bl	d5cf2 <_ZN6StringC1Eih>
  float humidity = dht.getHumidity();
   d4232:	4849      	ldr	r0, [pc, #292]	; (d4358 <loop+0x140>)
   d4234:	f000 fb36 	bl	d48a4 <_ZN3DHT11getHumidityEv>
  float temp = dht.getTempCelcius();
   d4238:	4847      	ldr	r0, [pc, #284]	; (d4358 <loop+0x140>)
  float humidity = dht.getHumidity();
   d423a:	eef0 8a40 	vmov.f32	s17, s0
  float temp = dht.getTempCelcius();
   d423e:	f000 faf1 	bl	d4824 <_ZN3DHT14getTempCelciusEv>
  float f = dht.getTempFarenheit();
   d4242:	4845      	ldr	r0, [pc, #276]	; (d4358 <loop+0x140>)
  float temp = dht.getTempCelcius();
   d4244:	eeb0 9a40 	vmov.f32	s18, s0
  float f = dht.getTempFarenheit();
   d4248:	f000 faee 	bl	d4828 <_ZN3DHT16getTempFarenheitEv>
  if (isnan(humidity) || isnan(temp) || isnan(f)){
   d424c:	eef4 8a68 	vcmp.f32	s17, s17
   d4250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float f = dht.getTempFarenheit();
   d4254:	eeb0 8a40 	vmov.f32	s16, s0
  if (isnan(humidity) || isnan(temp) || isnan(f)){
   d4258:	d609      	bvs.n	d426e <loop+0x56>
   d425a:	eeb4 9a49 	vcmp.f32	s18, s18
   d425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4262:	d604      	bvs.n	d426e <loop+0x56>
   d4264:	eeb4 0a40 	vcmp.f32	s0, s0
   d4268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d426c:	d70c      	bvc.n	d4288 <loop+0x70>
    Serial.println("Failed to read from DHT sensor");
   d426e:	f001 fe81 	bl	d5f74 <_Z16_fetch_usbserialv>
   d4272:	493a      	ldr	r1, [pc, #232]	; (d435c <loop+0x144>)
   d4274:	f001 fc3b 	bl	d5aee <_ZN5Print7printlnEPKc>
  String data = String(10);
   d4278:	a804      	add	r0, sp, #16
   d427a:	f001 fcdd 	bl	d5c38 <_ZN6StringD1Ev>
}
   d427e:	b00d      	add	sp, #52	; 0x34
   d4280:	ecbd 8b04 	vpop	{d8-d9}
   d4284:	f85d fb04 	ldr.w	pc, [sp], #4
  if (f > 75.0){
   d4288:	eddf 7a35 	vldr	s15, [pc, #212]	; d4360 <loop+0x148>
   d428c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4294:	eef0 9a67 	vmov.f32	s19, s15
   d4298:	dd06      	ble.n	d42a8 <loop+0x90>
leds.setColorRGB(0,255,0,0);
   d429a:	2300      	movs	r3, #0
   d429c:	4831      	ldr	r0, [pc, #196]	; (d4364 <loop+0x14c>)
   d429e:	9300      	str	r3, [sp, #0]
   d42a0:	22ff      	movs	r2, #255	; 0xff
   d42a2:	4619      	mov	r1, r3
   d42a4:	f000 fb6a 	bl	d497c <_ZN12ChainableLED11setColorRGBEhhhh>
  if (f < 75.0){
   d42a8:	eeb4 8ae9 	vcmpe.f32	s16, s19
   d42ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42b0:	d507      	bpl.n	d42c2 <loop+0xaa>
    leds.setColorRGB(0,0,0,255);
   d42b2:	23ff      	movs	r3, #255	; 0xff
   d42b4:	9300      	str	r3, [sp, #0]
   d42b6:	2300      	movs	r3, #0
   d42b8:	482a      	ldr	r0, [pc, #168]	; (d4364 <loop+0x14c>)
   d42ba:	461a      	mov	r2, r3
   d42bc:	4619      	mov	r1, r3
   d42be:	f000 fb5d 	bl	d497c <_ZN12ChainableLED11setColorRGBEhhhh>
  updateDisplay(temp, humidity);
   d42c2:	eefd 7ae8 	vcvt.s32.f32	s15, s17
   d42c6:	ee17 1a90 	vmov	r1, s15
   d42ca:	eefd 7ac9 	vcvt.s32.f32	s15, s18
   d42ce:	ee17 0a90 	vmov	r0, s15
   d42d2:	f7ff ff55 	bl	d4180 <_Z13updateDisplayii>
  Particle.publish("tempC",String (temp));
   d42d6:	eeb0 0a49 	vmov.f32	s0, s18
   d42da:	2106      	movs	r1, #6
   d42dc:	a808      	add	r0, sp, #32
   d42de:	f001 fd1b 	bl	d5d18 <_ZN6StringC1Efi>
   d42e2:	9a08      	ldr	r2, [sp, #32]
   d42e4:	4920      	ldr	r1, [pc, #128]	; (d4368 <loop+0x150>)
   d42e6:	a802      	add	r0, sp, #8
   d42e8:	f7ff fee2 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42ec:	a803      	add	r0, sp, #12
   d42ee:	f7ff ff7d 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42f2:	a808      	add	r0, sp, #32
   d42f4:	f001 fca0 	bl	d5c38 <_ZN6StringD1Ev>
  Particle.publish("tempF", String (f));
   d42f8:	eeb0 0a48 	vmov.f32	s0, s16
   d42fc:	2106      	movs	r1, #6
   d42fe:	a808      	add	r0, sp, #32
   d4300:	f001 fd0a 	bl	d5d18 <_ZN6StringC1Efi>
   d4304:	9a08      	ldr	r2, [sp, #32]
   d4306:	4919      	ldr	r1, [pc, #100]	; (d436c <loop+0x154>)
   d4308:	a802      	add	r0, sp, #8
   d430a:	f7ff fed1 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d430e:	a803      	add	r0, sp, #12
   d4310:	f7ff ff6c 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4314:	a808      	add	r0, sp, #32
   d4316:	f001 fc8f 	bl	d5c38 <_ZN6StringD1Ev>
  Particle.publish("humid", String (humidity));
   d431a:	eeb0 0a68 	vmov.f32	s0, s17
   d431e:	2106      	movs	r1, #6
   d4320:	a808      	add	r0, sp, #32
   d4322:	f001 fcf9 	bl	d5d18 <_ZN6StringC1Efi>
   d4326:	9a08      	ldr	r2, [sp, #32]
   d4328:	4911      	ldr	r1, [pc, #68]	; (d4370 <loop+0x158>)
   d432a:	a802      	add	r0, sp, #8
   d432c:	f7ff fec0 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4330:	a803      	add	r0, sp, #12
   d4332:	f7ff ff5b 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4336:	a808      	add	r0, sp, #32
   d4338:	f001 fc7e 	bl	d5c38 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d433c:	4b0d      	ldr	r3, [pc, #52]	; (d4374 <loop+0x15c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d433e:	9a04      	ldr	r2, [sp, #16]
   d4340:	781b      	ldrb	r3, [r3, #0]
   d4342:	f88d 3000 	strb.w	r3, [sp]
   d4346:	a808      	add	r0, sp, #32
   d4348:	490b      	ldr	r1, [pc, #44]	; (d4378 <loop+0x160>)
   d434a:	233c      	movs	r3, #60	; 0x3c
   d434c:	f001 f85a 	bl	d5404 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4350:	a809      	add	r0, sp, #36	; 0x24
   d4352:	f7ff ff4b 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4356:	e78f      	b.n	d4278 <loop+0x60>
   d4358:	2003e5f4 	.word	0x2003e5f4
   d435c:	000d708f 	.word	0x000d708f
   d4360:	42960000 	.word	0x42960000
   d4364:	2003e608 	.word	0x2003e608
   d4368:	000d70ae 	.word	0x000d70ae
   d436c:	000d70b4 	.word	0x000d70b4
   d4370:	000d70ba 	.word	0x000d70ba
   d4374:	2003e5f1 	.word	0x2003e5f1
   d4378:	000d7062 	.word	0x000d7062

000d437c <_GLOBAL__sub_I_dht>:
   d437c:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   d437e:	4b0d      	ldr	r3, [pc, #52]	; (d43b4 <_GLOBAL__sub_I_dht+0x38>)
ChainableLED leds (RX, TX, 1);
   d4380:	4c0d      	ldr	r4, [pc, #52]	; (d43b8 <_GLOBAL__sub_I_dht+0x3c>)
DHT dht(DHTPIN, DHTTYPE);
   d4382:	480e      	ldr	r0, [pc, #56]	; (d43bc <_GLOBAL__sub_I_dht+0x40>)
   d4384:	2200      	movs	r2, #0
   d4386:	701a      	strb	r2, [r3, #0]
   d4388:	4b0d      	ldr	r3, [pc, #52]	; (d43c0 <_GLOBAL__sub_I_dht+0x44>)
   d438a:	2501      	movs	r5, #1
   d438c:	701d      	strb	r5, [r3, #0]
   d438e:	220b      	movs	r2, #11
   d4390:	2306      	movs	r3, #6
   d4392:	2113      	movs	r1, #19
   d4394:	f000 f84d 	bl	d4432 <_ZN3DHTC1Ehhh>
ChainableLED leds (RX, TX, 1);
   d4398:	462b      	mov	r3, r5
   d439a:	2209      	movs	r2, #9
   d439c:	210a      	movs	r1, #10
   d439e:	4620      	mov	r0, r4
   d43a0:	f000 fa82 	bl	d48a8 <_ZN12ChainableLEDC1Ehhh>
   d43a4:	4620      	mov	r0, r4
   d43a6:	4a07      	ldr	r2, [pc, #28]	; (d43c4 <_GLOBAL__sub_I_dht+0x48>)
   d43a8:	4907      	ldr	r1, [pc, #28]	; (d43c8 <_GLOBAL__sub_I_dht+0x4c>)
   d43aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
ChainableLED leds (RX, TX, 1);
   d43ae:	f001 bf97 	b.w	d62e0 <__aeabi_atexit>
   d43b2:	bf00      	nop
   d43b4:	2003e5f0 	.word	0x2003e5f0
   d43b8:	2003e608 	.word	0x2003e608
   d43bc:	2003e5f4 	.word	0x2003e5f4
   d43c0:	2003e5f1 	.word	0x2003e5f1
   d43c4:	2003e5ec 	.word	0x2003e5ec
   d43c8:	000d48c3 	.word	0x000d48c3

000d43cc <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d43cc:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d43ce:	6803      	ldr	r3, [r0, #0]
   d43d0:	2b2f      	cmp	r3, #47	; 0x2f
{
   d43d2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d43d4:	d904      	bls.n	d43e0 <nrf_gpio_pin_port_decode+0x14>
   d43d6:	4a07      	ldr	r2, [pc, #28]	; (d43f4 <nrf_gpio_pin_port_decode+0x28>)
   d43d8:	2100      	movs	r1, #0
   d43da:	200a      	movs	r0, #10
   d43dc:	f000 fd5e 	bl	d4e9c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d43e0:	6823      	ldr	r3, [r4, #0]
   d43e2:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d43e4:	bf83      	ittte	hi
   d43e6:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d43ea:	4803      	ldrhi	r0, [pc, #12]	; (d43f8 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d43ec:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d43ee:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d43f2:	bd10      	pop	{r4, pc}
   d43f4:	000d4c3d 	.word	0x000d4c3d
   d43f8:	50000300 	.word	0x50000300

000d43fc <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d43fc:	b507      	push	{r0, r1, r2, lr}
   d43fe:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4400:	a801      	add	r0, sp, #4
   d4402:	f7ff ffe3 	bl	d43cc <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4406:	9a01      	ldr	r2, [sp, #4]
   d4408:	2301      	movs	r3, #1
   d440a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d440c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4410:	b003      	add	sp, #12
   d4412:	f85d fb04 	ldr.w	pc, [sp], #4

000d4416 <nrf_gpio_pin_read>:
{
   d4416:	b507      	push	{r0, r1, r2, lr}
   d4418:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d441a:	a801      	add	r0, sp, #4
   d441c:	f7ff ffd6 	bl	d43cc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4420:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4422:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4426:	40d8      	lsrs	r0, r3
}
   d4428:	f000 0001 	and.w	r0, r0, #1
   d442c:	b003      	add	sp, #12
   d442e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4432 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4432:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4434:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4436:	2301      	movs	r3, #1
	_pin = pin;
   d4438:	7181      	strb	r1, [r0, #6]
	_type = type;
   d443a:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d443c:	7403      	strb	r3, [r0, #16]
}
   d443e:	bd10      	pop	{r4, pc}

000d4440 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4444:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4446:	4c1e      	ldr	r4, [pc, #120]	; (d44c0 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4448:	7980      	ldrb	r0, [r0, #6]
   d444a:	f8df 8078 	ldr.w	r8, [pc, #120]	; d44c4 <_ZN3DHT5beginEv+0x84>
   d444e:	2100      	movs	r1, #0
   d4450:	f001 fedc 	bl	d620c <pinMode>
	pinSetFast(_pin);
   d4454:	79ae      	ldrb	r6, [r5, #6]
   d4456:	7823      	ldrb	r3, [r4, #0]
   d4458:	f3bf 8f5b 	dmb	ish
   d445c:	f013 0f01 	tst.w	r3, #1
   d4460:	d10a      	bne.n	d4478 <_ZN3DHT5beginEv+0x38>
   d4462:	4620      	mov	r0, r4
   d4464:	f7ff fe1b 	bl	d409e <__cxa_guard_acquire>
   d4468:	b130      	cbz	r0, d4478 <_ZN3DHT5beginEv+0x38>
   d446a:	f000 fbf7 	bl	d4c5c <HAL_Pin_Map>
   d446e:	f8c8 0000 	str.w	r0, [r8]
   d4472:	4620      	mov	r0, r4
   d4474:	f7ff fe18 	bl	d40a8 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4478:	f8d8 3000 	ldr.w	r3, [r8]
   d447c:	0136      	lsls	r6, r6, #4
   d447e:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4480:	7823      	ldrb	r3, [r4, #0]
   d4482:	f3bf 8f5b 	dmb	ish
   d4486:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4488:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d448c:	d40a      	bmi.n	d44a4 <_ZN3DHT5beginEv+0x64>
   d448e:	480c      	ldr	r0, [pc, #48]	; (d44c0 <_ZN3DHT5beginEv+0x80>)
   d4490:	f7ff fe05 	bl	d409e <__cxa_guard_acquire>
   d4494:	b130      	cbz	r0, d44a4 <_ZN3DHT5beginEv+0x64>
   d4496:	f000 fbe1 	bl	d4c5c <HAL_Pin_Map>
   d449a:	f8c8 0000 	str.w	r0, [r8]
   d449e:	4808      	ldr	r0, [pc, #32]	; (d44c0 <_ZN3DHT5beginEv+0x80>)
   d44a0:	f7ff fe02 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44a4:	f8d8 3000 	ldr.w	r3, [r8]
   d44a8:	4433      	add	r3, r6
   d44aa:	785b      	ldrb	r3, [r3, #1]
   d44ac:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d44b0:	ea43 0007 	orr.w	r0, r3, r7
   d44b4:	f7ff ffa2 	bl	d43fc <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d44b8:	2300      	movs	r3, #0
   d44ba:	60eb      	str	r3, [r5, #12]
}
   d44bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d44c0:	2003e610 	.word	0x2003e610
   d44c4:	2003e614 	.word	0x2003e614

000d44c8 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d44c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d44cc:	4604      	mov	r4, r0
   d44ce:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44d0:	f000 fbbc 	bl	d4c4c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d44d4:	68e3      	ldr	r3, [r4, #12]
   d44d6:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d44d8:	bf84      	itt	hi
   d44da:	2300      	movhi	r3, #0
   d44dc:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d44de:	7c23      	ldrb	r3, [r4, #16]
   d44e0:	b92b      	cbnz	r3, d44ee <_ZN3DHT4readEv+0x26>
   d44e2:	68e3      	ldr	r3, [r4, #12]
   d44e4:	1ac0      	subs	r0, r0, r3
   d44e6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d44ea:	f0c0 8160 	bcc.w	d47ae <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d44ee:	2500      	movs	r5, #0
   d44f0:	7425      	strb	r5, [r4, #16]
   d44f2:	f000 fbab 	bl	d4c4c <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44f6:	4eb0      	ldr	r6, [pc, #704]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d44f8:	6025      	str	r5, [r4, #0]
   d44fa:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d44fc:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d44fe:	79a7      	ldrb	r7, [r4, #6]
   d4500:	7833      	ldrb	r3, [r6, #0]
   d4502:	4dae      	ldr	r5, [pc, #696]	; (d47bc <_ZN3DHT4readEv+0x2f4>)
   d4504:	f3bf 8f5b 	dmb	ish
   d4508:	f013 0f01 	tst.w	r3, #1
   d450c:	d109      	bne.n	d4522 <_ZN3DHT4readEv+0x5a>
   d450e:	4630      	mov	r0, r6
   d4510:	f7ff fdc5 	bl	d409e <__cxa_guard_acquire>
   d4514:	b128      	cbz	r0, d4522 <_ZN3DHT4readEv+0x5a>
   d4516:	f000 fba1 	bl	d4c5c <HAL_Pin_Map>
   d451a:	6028      	str	r0, [r5, #0]
   d451c:	4630      	mov	r0, r6
   d451e:	f7ff fdc3 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4522:	682b      	ldr	r3, [r5, #0]
   d4524:	013f      	lsls	r7, r7, #4
   d4526:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d452a:	7833      	ldrb	r3, [r6, #0]
   d452c:	f3bf 8f5b 	dmb	ish
   d4530:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4532:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4536:	d409      	bmi.n	d454c <_ZN3DHT4readEv+0x84>
   d4538:	489f      	ldr	r0, [pc, #636]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d453a:	f7ff fdb0 	bl	d409e <__cxa_guard_acquire>
   d453e:	b128      	cbz	r0, d454c <_ZN3DHT4readEv+0x84>
   d4540:	f000 fb8c 	bl	d4c5c <HAL_Pin_Map>
   d4544:	6028      	str	r0, [r5, #0]
   d4546:	489c      	ldr	r0, [pc, #624]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d4548:	f7ff fdae 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d454c:	682b      	ldr	r3, [r5, #0]
   d454e:	441f      	add	r7, r3
   d4550:	7878      	ldrb	r0, [r7, #1]
   d4552:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4556:	ea40 0008 	orr.w	r0, r0, r8
   d455a:	f7ff ff4f 	bl	d43fc <nrf_gpio_pin_set>
	delay(250);
   d455e:	20fa      	movs	r0, #250	; 0xfa
   d4560:	f000 fd88 	bl	d5074 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4564:	79a0      	ldrb	r0, [r4, #6]
   d4566:	2101      	movs	r1, #1
   d4568:	f001 fe50 	bl	d620c <pinMode>
	pinResetFast(_pin);
   d456c:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d456e:	7833      	ldrb	r3, [r6, #0]
   d4570:	f3bf 8f5b 	dmb	ish
   d4574:	07da      	lsls	r2, r3, #31
   d4576:	d409      	bmi.n	d458c <_ZN3DHT4readEv+0xc4>
   d4578:	488f      	ldr	r0, [pc, #572]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d457a:	f7ff fd90 	bl	d409e <__cxa_guard_acquire>
   d457e:	b128      	cbz	r0, d458c <_ZN3DHT4readEv+0xc4>
   d4580:	f000 fb6c 	bl	d4c5c <HAL_Pin_Map>
   d4584:	6028      	str	r0, [r5, #0]
   d4586:	488c      	ldr	r0, [pc, #560]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d4588:	f7ff fd8e 	bl	d40a8 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d458c:	682b      	ldr	r3, [r5, #0]
   d458e:	013f      	lsls	r7, r7, #4
   d4590:	5ddb      	ldrb	r3, [r3, r7]
   d4592:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4596:	7833      	ldrb	r3, [r6, #0]
   d4598:	f3bf 8f5b 	dmb	ish
   d459c:	07db      	lsls	r3, r3, #31
   d459e:	d409      	bmi.n	d45b4 <_ZN3DHT4readEv+0xec>
   d45a0:	4885      	ldr	r0, [pc, #532]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d45a2:	f7ff fd7c 	bl	d409e <__cxa_guard_acquire>
   d45a6:	b128      	cbz	r0, d45b4 <_ZN3DHT4readEv+0xec>
   d45a8:	f000 fb58 	bl	d4c5c <HAL_Pin_Map>
   d45ac:	6028      	str	r0, [r5, #0]
   d45ae:	4882      	ldr	r0, [pc, #520]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d45b0:	f7ff fd7a 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45b4:	682b      	ldr	r3, [r5, #0]
   d45b6:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45b8:	a803      	add	r0, sp, #12
   d45ba:	787b      	ldrb	r3, [r7, #1]
   d45bc:	f003 031f 	and.w	r3, r3, #31
   d45c0:	ea43 0308 	orr.w	r3, r3, r8
   d45c4:	9303      	str	r3, [sp, #12]
   d45c6:	f7ff ff01 	bl	d43cc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d45ca:	9a03      	ldr	r2, [sp, #12]
   d45cc:	2301      	movs	r3, #1
   d45ce:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d45d0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d45d4:	2014      	movs	r0, #20
   d45d6:	f000 fd4d 	bl	d5074 <delay>
	noInterrupts();
   d45da:	f001 f919 	bl	d5810 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d45de:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45e0:	7833      	ldrb	r3, [r6, #0]
   d45e2:	f3bf 8f5b 	dmb	ish
   d45e6:	07d8      	lsls	r0, r3, #31
   d45e8:	d409      	bmi.n	d45fe <_ZN3DHT4readEv+0x136>
   d45ea:	4873      	ldr	r0, [pc, #460]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d45ec:	f7ff fd57 	bl	d409e <__cxa_guard_acquire>
   d45f0:	b128      	cbz	r0, d45fe <_ZN3DHT4readEv+0x136>
   d45f2:	f000 fb33 	bl	d4c5c <HAL_Pin_Map>
   d45f6:	6028      	str	r0, [r5, #0]
   d45f8:	486f      	ldr	r0, [pc, #444]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d45fa:	f7ff fd55 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45fe:	682b      	ldr	r3, [r5, #0]
   d4600:	013f      	lsls	r7, r7, #4
   d4602:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4606:	7833      	ldrb	r3, [r6, #0]
   d4608:	f3bf 8f5b 	dmb	ish
   d460c:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d460e:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4612:	d409      	bmi.n	d4628 <_ZN3DHT4readEv+0x160>
   d4614:	4868      	ldr	r0, [pc, #416]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d4616:	f7ff fd42 	bl	d409e <__cxa_guard_acquire>
   d461a:	b128      	cbz	r0, d4628 <_ZN3DHT4readEv+0x160>
   d461c:	f000 fb1e 	bl	d4c5c <HAL_Pin_Map>
   d4620:	6028      	str	r0, [r5, #0]
   d4622:	4865      	ldr	r0, [pc, #404]	; (d47b8 <_ZN3DHT4readEv+0x2f0>)
   d4624:	f7ff fd40 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4628:	682b      	ldr	r3, [r5, #0]
   d462a:	441f      	add	r7, r3
   d462c:	7878      	ldrb	r0, [r7, #1]
   d462e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4632:	ea40 0008 	orr.w	r0, r0, r8
   d4636:	f7ff fee1 	bl	d43fc <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d463a:	2028      	movs	r0, #40	; 0x28
   d463c:	f000 fafe 	bl	d4c3c <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4640:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4642:	f8df 8174 	ldr.w	r8, [pc, #372]	; d47b8 <_ZN3DHT4readEv+0x2f0>
   d4646:	2100      	movs	r1, #0
   d4648:	f001 fde0 	bl	d620c <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d464c:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d464e:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4650:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4652:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4654:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4658:	f894 b006 	ldrb.w	fp, [r4, #6]
   d465c:	7833      	ldrb	r3, [r6, #0]
   d465e:	f3bf 8f5b 	dmb	ish
   d4662:	07da      	lsls	r2, r3, #31
   d4664:	d409      	bmi.n	d467a <_ZN3DHT4readEv+0x1b2>
   d4666:	4640      	mov	r0, r8
   d4668:	f7ff fd19 	bl	d409e <__cxa_guard_acquire>
   d466c:	b128      	cbz	r0, d467a <_ZN3DHT4readEv+0x1b2>
   d466e:	f000 faf5 	bl	d4c5c <HAL_Pin_Map>
   d4672:	6028      	str	r0, [r5, #0]
   d4674:	4640      	mov	r0, r8
   d4676:	f7ff fd17 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d467a:	682b      	ldr	r3, [r5, #0]
   d467c:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4680:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4684:	015b      	lsls	r3, r3, #5
   d4686:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4688:	7833      	ldrb	r3, [r6, #0]
   d468a:	f3bf 8f5b 	dmb	ish
   d468e:	07db      	lsls	r3, r3, #31
   d4690:	d409      	bmi.n	d46a6 <_ZN3DHT4readEv+0x1de>
   d4692:	4640      	mov	r0, r8
   d4694:	f7ff fd03 	bl	d409e <__cxa_guard_acquire>
   d4698:	b128      	cbz	r0, d46a6 <_ZN3DHT4readEv+0x1de>
   d469a:	f000 fadf 	bl	d4c5c <HAL_Pin_Map>
   d469e:	6028      	str	r0, [r5, #0]
   d46a0:	4640      	mov	r0, r8
   d46a2:	f7ff fd01 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46a6:	682b      	ldr	r3, [r5, #0]
   d46a8:	445b      	add	r3, fp
   d46aa:	f893 b001 	ldrb.w	fp, [r3, #1]
   d46ae:	9b01      	ldr	r3, [sp, #4]
   d46b0:	f00b 0b1f 	and.w	fp, fp, #31
   d46b4:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d46b8:	4658      	mov	r0, fp
   d46ba:	f7ff feac 	bl	d4416 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d46be:	4658      	mov	r0, fp
   d46c0:	f7ff fea9 	bl	d4416 <nrf_gpio_pin_read>
   d46c4:	9b00      	ldr	r3, [sp, #0]
   d46c6:	4283      	cmp	r3, r0
   d46c8:	d109      	bne.n	d46de <_ZN3DHT4readEv+0x216>
			counter++;
   d46ca:	f109 0901 	add.w	r9, r9, #1
   d46ce:	fa5f f989 	uxtb.w	r9, r9
   d46d2:	2001      	movs	r0, #1
   d46d4:	f000 fab2 	bl	d4c3c <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d46d8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d46dc:	d1bc      	bne.n	d4658 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d46de:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46e2:	7833      	ldrb	r3, [r6, #0]
   d46e4:	f3bf 8f5b 	dmb	ish
   d46e8:	07d8      	lsls	r0, r3, #31
   d46ea:	d409      	bmi.n	d4700 <_ZN3DHT4readEv+0x238>
   d46ec:	4640      	mov	r0, r8
   d46ee:	f7ff fcd6 	bl	d409e <__cxa_guard_acquire>
   d46f2:	b128      	cbz	r0, d4700 <_ZN3DHT4readEv+0x238>
   d46f4:	f000 fab2 	bl	d4c5c <HAL_Pin_Map>
   d46f8:	6028      	str	r0, [r5, #0]
   d46fa:	4640      	mov	r0, r8
   d46fc:	f7ff fcd4 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4700:	682b      	ldr	r3, [r5, #0]
   d4702:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4706:	f813 300b 	ldrb.w	r3, [r3, fp]
   d470a:	015b      	lsls	r3, r3, #5
   d470c:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d470e:	7833      	ldrb	r3, [r6, #0]
   d4710:	f3bf 8f5b 	dmb	ish
   d4714:	07d9      	lsls	r1, r3, #31
   d4716:	d409      	bmi.n	d472c <_ZN3DHT4readEv+0x264>
   d4718:	4640      	mov	r0, r8
   d471a:	f7ff fcc0 	bl	d409e <__cxa_guard_acquire>
   d471e:	b128      	cbz	r0, d472c <_ZN3DHT4readEv+0x264>
   d4720:	f000 fa9c 	bl	d4c5c <HAL_Pin_Map>
   d4724:	6028      	str	r0, [r5, #0]
   d4726:	4640      	mov	r0, r8
   d4728:	f7ff fcbe 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d472c:	682b      	ldr	r3, [r5, #0]
   d472e:	445b      	add	r3, fp
   d4730:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4734:	9b00      	ldr	r3, [sp, #0]
   d4736:	f00b 0b1f 	and.w	fp, fp, #31
   d473a:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d473e:	4658      	mov	r0, fp
   d4740:	f7ff fe69 	bl	d4416 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4744:	4658      	mov	r0, fp
   d4746:	f7ff fe66 	bl	d4416 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d474a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d474e:	b2c3      	uxtb	r3, r0
   d4750:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4752:	d018      	beq.n	d4786 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4754:	2f03      	cmp	r7, #3
   d4756:	d911      	bls.n	d477c <_ZN3DHT4readEv+0x2b4>
   d4758:	07fa      	lsls	r2, r7, #31
   d475a:	d40f      	bmi.n	d477c <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d475c:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4760:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d4764:	5ca3      	ldrb	r3, [r4, r2]
   d4766:	005b      	lsls	r3, r3, #1
   d4768:	b2db      	uxtb	r3, r3
   d476a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d476c:	7a21      	ldrb	r1, [r4, #8]
   d476e:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4770:	bf3c      	itt	cc
   d4772:	f043 0301 	orrcc.w	r3, r3, #1
   d4776:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4778:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d477c:	3701      	adds	r7, #1
   d477e:	b2ff      	uxtb	r7, r7
   d4780:	2f55      	cmp	r7, #85	; 0x55
   d4782:	f47f af67 	bne.w	d4654 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d4786:	f001 f845 	bl	d5814 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d478a:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d478e:	d910      	bls.n	d47b2 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4790:	7863      	ldrb	r3, [r4, #1]
   d4792:	7820      	ldrb	r0, [r4, #0]
   d4794:	4418      	add	r0, r3
   d4796:	78a3      	ldrb	r3, [r4, #2]
   d4798:	4418      	add	r0, r3
   d479a:	78e3      	ldrb	r3, [r4, #3]
   d479c:	4418      	add	r0, r3
   d479e:	7923      	ldrb	r3, [r4, #4]
   d47a0:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d47a2:	1ac3      	subs	r3, r0, r3
   d47a4:	4258      	negs	r0, r3
   d47a6:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d47a8:	b005      	add	sp, #20
   d47aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d47ae:	2001      	movs	r0, #1
   d47b0:	e7fa      	b.n	d47a8 <_ZN3DHT4readEv+0x2e0>
	return false;
   d47b2:	2000      	movs	r0, #0
   d47b4:	e7f8      	b.n	d47a8 <_ZN3DHT4readEv+0x2e0>
   d47b6:	bf00      	nop
   d47b8:	2003e610 	.word	0x2003e610
   d47bc:	2003e614 	.word	0x2003e614

000d47c0 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d47c0:	b510      	push	{r4, lr}
   d47c2:	4604      	mov	r4, r0
	if (read()) {
   d47c4:	f7ff fe80 	bl	d44c8 <_ZN3DHT4readEv>
   d47c8:	b320      	cbz	r0, d4814 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d47ca:	79e3      	ldrb	r3, [r4, #7]
   d47cc:	2b0b      	cmp	r3, #11
   d47ce:	d01b      	beq.n	d4808 <_ZN3DHT15readTemperatureEv+0x48>
   d47d0:	3b15      	subs	r3, #21
   d47d2:	2b01      	cmp	r3, #1
   d47d4:	d81e      	bhi.n	d4814 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d47d6:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d47d8:	eddf 6a10 	vldr	s13, [pc, #64]	; d481c <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d47dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d47e0:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d47e4:	78e2      	ldrb	r2, [r4, #3]
   d47e6:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d47ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d47ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d47f2:	061b      	lsls	r3, r3, #24
				f += data[3];
   d47f4:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d47f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d47fc:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4800:	d507      	bpl.n	d4812 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d4802:	eeb1 0a40 	vneg.f32	s0, s0
   d4806:	e004      	b.n	d4812 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d4808:	78a3      	ldrb	r3, [r4, #2]
   d480a:	ee00 3a10 	vmov	s0, r3
   d480e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4812:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4814:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4820 <_ZN3DHT15readTemperatureEv+0x60>
   d4818:	e7fb      	b.n	d4812 <_ZN3DHT15readTemperatureEv+0x52>
   d481a:	bf00      	nop
   d481c:	43800000 	.word	0x43800000
   d4820:	7fc00000 	.word	0x7fc00000

000d4824 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d4824:	f7ff bfcc 	b.w	d47c0 <_ZN3DHT15readTemperatureEv>

000d4828 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d4828:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d482a:	f7ff ffc9 	bl	d47c0 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d482e:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4832:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4836:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d483a:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d483e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4848 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4842:	ee37 0a00 	vadd.f32	s0, s14, s0
   d4846:	bd08      	pop	{r3, pc}
   d4848:	42000000 	.word	0x42000000

000d484c <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d484c:	b510      	push	{r4, lr}
   d484e:	4604      	mov	r4, r0
	if (read()) {
   d4850:	f7ff fe3a 	bl	d44c8 <_ZN3DHT4readEv>
   d4854:	b1f0      	cbz	r0, d4894 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d4856:	79e3      	ldrb	r3, [r4, #7]
   d4858:	2b0b      	cmp	r3, #11
   d485a:	d015      	beq.n	d4888 <_ZN3DHT12readHumidityEv+0x3c>
   d485c:	3b15      	subs	r3, #21
   d485e:	2b01      	cmp	r3, #1
   d4860:	d818      	bhi.n	d4894 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4862:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4864:	eddf 6a0d 	vldr	s13, [pc, #52]	; d489c <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4868:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d486c:	7863      	ldrb	r3, [r4, #1]
   d486e:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4872:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d4876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d487a:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d487e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4882:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4886:	bd10      	pop	{r4, pc}
				f = data[0];
   d4888:	7823      	ldrb	r3, [r4, #0]
   d488a:	ee00 3a10 	vmov	s0, r3
   d488e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4892:	e7f8      	b.n	d4886 <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4894:	ed9f 0a02 	vldr	s0, [pc, #8]	; d48a0 <_ZN3DHT12readHumidityEv+0x54>
   d4898:	e7f5      	b.n	d4886 <_ZN3DHT12readHumidityEv+0x3a>
   d489a:	bf00      	nop
   d489c:	43800000 	.word	0x43800000
   d48a0:	7fc00000 	.word	0x7fc00000

000d48a4 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d48a4:	f7ff bfd2 	b.w	d484c <_ZN3DHT12readHumidityEv>

000d48a8 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d48a8:	b510      	push	{r4, lr}
   d48aa:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d48ac:	7001      	strb	r1, [r0, #0]
   d48ae:	7042      	strb	r2, [r0, #1]
   d48b0:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d48b2:	2101      	movs	r1, #1
   d48b4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d48b8:	f002 fb2e 	bl	d6f18 <calloc>
   d48bc:	6060      	str	r0, [r4, #4]
}
   d48be:	4620      	mov	r0, r4
   d48c0:	bd10      	pop	{r4, pc}

000d48c2 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d48c2:	b510      	push	{r4, lr}
   d48c4:	4604      	mov	r4, r0
{
    free(_led_state);
   d48c6:	6840      	ldr	r0, [r0, #4]
   d48c8:	f000 fbac 	bl	d5024 <free>
}
   d48cc:	4620      	mov	r0, r4
   d48ce:	bd10      	pop	{r4, pc}

000d48d0 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d48d0:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d48d2:	2100      	movs	r1, #0
{
   d48d4:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d48d6:	7800      	ldrb	r0, [r0, #0]
   d48d8:	f001 fca9 	bl	d622e <digitalWrite>
   d48dc:	2014      	movs	r0, #20
   d48de:	f000 f9ad 	bl	d4c3c <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d48e2:	7820      	ldrb	r0, [r4, #0]
   d48e4:	2101      	movs	r1, #1
   d48e6:	f001 fca2 	bl	d622e <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d48ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d48ee:	2014      	movs	r0, #20
   d48f0:	f000 b9a4 	b.w	d4c3c <HAL_Delay_Microseconds>

000d48f4 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d48f4:	b570      	push	{r4, r5, r6, lr}
   d48f6:	4606      	mov	r6, r0
   d48f8:	460c      	mov	r4, r1
   d48fa:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d48fc:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   d48fe:	bf4c      	ite	mi
   d4900:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d4902:	2100      	movpl	r1, #0
   d4904:	7870      	ldrb	r0, [r6, #1]
   d4906:	f001 fc92 	bl	d622e <digitalWrite>
        clk();
   d490a:	3d01      	subs	r5, #1
   d490c:	4630      	mov	r0, r6
   d490e:	f7ff ffdf 	bl	d48d0 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d4912:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   d4914:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   d4918:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   d491a:	d1ef      	bne.n	d48fc <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   d491c:	bd70      	pop	{r4, r5, r6, pc}

000d491e <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d491e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4920:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   d4924:	461e      	mov	r6, r3
   d4926:	460c      	mov	r4, r1
   d4928:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d492a:	bf14      	ite	ne
   d492c:	21c0      	movne	r1, #192	; 0xc0
   d492e:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4930:	0673      	lsls	r3, r6, #25
   d4932:	bf58      	it	pl
   d4934:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4938:	062a      	lsls	r2, r5, #24
   d493a:	bf58      	it	pl
   d493c:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d4940:	066b      	lsls	r3, r5, #25
   d4942:	bf58      	it	pl
   d4944:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4948:	0622      	lsls	r2, r4, #24
   d494a:	bf58      	it	pl
   d494c:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d4950:	0663      	lsls	r3, r4, #25
   d4952:	bf58      	it	pl
   d4954:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d4958:	9001      	str	r0, [sp, #4]
   d495a:	f7ff ffcb 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d495e:	9801      	ldr	r0, [sp, #4]
   d4960:	4631      	mov	r1, r6
   d4962:	f7ff ffc7 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d4966:	9801      	ldr	r0, [sp, #4]
   d4968:	4629      	mov	r1, r5
   d496a:	f7ff ffc3 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d496e:	9801      	ldr	r0, [sp, #4]
   d4970:	4621      	mov	r1, r4
}
   d4972:	b002      	add	sp, #8
   d4974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   d4978:	f7ff bfbc 	b.w	d48f4 <_ZN12ChainableLED8sendByteEh>

000d497c <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4980:	4604      	mov	r4, r0
   d4982:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d4984:	2100      	movs	r1, #0
{
   d4986:	4690      	mov	r8, r2
   d4988:	4699      	mov	r9, r3
   d498a:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   d498e:	f7ff ffb1 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4992:	2100      	movs	r1, #0
   d4994:	4620      	mov	r0, r4
   d4996:	f7ff ffad 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d499a:	2100      	movs	r1, #0
   d499c:	4620      	mov	r0, r4
   d499e:	f7ff ffa9 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d49a2:	2100      	movs	r1, #0
   d49a4:	4620      	mov	r0, r4
   d49a6:	f7ff ffa5 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>
   d49aa:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d49ac:	78a3      	ldrb	r3, [r4, #2]
   d49ae:	b2f5      	uxtb	r5, r6
   d49b0:	42ab      	cmp	r3, r5
   d49b2:	d919      	bls.n	d49e8 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
   d49b4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   d49b8:	42af      	cmp	r7, r5
   d49ba:	f100 0201 	add.w	r2, r0, #1
   d49be:	f100 0302 	add.w	r3, r0, #2
   d49c2:	d108      	bne.n	d49d6 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
        {
            _led_state[i*3 + _CL_RED] = red;
   d49c4:	6861      	ldr	r1, [r4, #4]
   d49c6:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   d49ca:	6861      	ldr	r1, [r4, #4]
   d49cc:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   d49d0:	6861      	ldr	r1, [r4, #4]
   d49d2:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d49d6:	6861      	ldr	r1, [r4, #4]
   d49d8:	5ccb      	ldrb	r3, [r1, r3]
   d49da:	5c8a      	ldrb	r2, [r1, r2]
   d49dc:	5c09      	ldrb	r1, [r1, r0]
   d49de:	4620      	mov	r0, r4
   d49e0:	f7ff ff9d 	bl	d491e <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   d49e4:	3601      	adds	r6, #1
   d49e6:	e7e1      	b.n	d49ac <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d49e8:	4620      	mov	r0, r4
   d49ea:	2100      	movs	r1, #0
   d49ec:	f7ff ff82 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d49f0:	4620      	mov	r0, r4
   d49f2:	2100      	movs	r1, #0
   d49f4:	f7ff ff7e 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d49f8:	4620      	mov	r0, r4
   d49fa:	2100      	movs	r1, #0
   d49fc:	f7ff ff7a 	bl	d48f4 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4a00:	4620      	mov	r0, r4
   d4a02:	2100      	movs	r1, #0
}
   d4a04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   d4a08:	f7ff bf74 	b.w	d48f4 <_ZN12ChainableLED8sendByteEh>

000d4a0c <_ZN12ChainableLED4initEv>:
{
   d4a0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4a0e:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d4a10:	2101      	movs	r1, #1
   d4a12:	7800      	ldrb	r0, [r0, #0]
   d4a14:	f001 fbfa 	bl	d620c <pinMode>
    pinMode(_data_pin, OUTPUT);
   d4a18:	7860      	ldrb	r0, [r4, #1]
   d4a1a:	2101      	movs	r1, #1
   d4a1c:	f001 fbf6 	bl	d620c <pinMode>
   d4a20:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   d4a22:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   d4a24:	78a3      	ldrb	r3, [r4, #2]
   d4a26:	b2e9      	uxtb	r1, r5
   d4a28:	428b      	cmp	r3, r1
   d4a2a:	d907      	bls.n	d4a3c <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   d4a2c:	2300      	movs	r3, #0
   d4a2e:	9600      	str	r6, [sp, #0]
   d4a30:	461a      	mov	r2, r3
   d4a32:	4620      	mov	r0, r4
   d4a34:	f7ff ffa2 	bl	d497c <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   d4a38:	3501      	adds	r5, #1
   d4a3a:	e7f3      	b.n	d4a24 <_ZN12ChainableLED4initEv+0x18>
}
   d4a3c:	b002      	add	sp, #8
   d4a3e:	bd70      	pop	{r4, r5, r6, pc}

000d4a40 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4a40:	6803      	ldr	r3, [r0, #0]
   d4a42:	b2c9      	uxtb	r1, r1
   d4a44:	689b      	ldr	r3, [r3, #8]
   d4a46:	4718      	bx	r3

000d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
    delay(5);
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   d4a48:	b510      	push	{r4, lr}
   d4a4a:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4a4c:	f001 fc20 	bl	d6290 <_Z19__fetch_global_Wirev>
   d4a50:	213c      	movs	r1, #60	; 0x3c
   d4a52:	f000 fed3 	bl	d57fc <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
  Wire.write(SeeedOLED_Command_Mode);	     // Set OLED Command mode
   d4a56:	f001 fc1b 	bl	d6290 <_Z19__fetch_global_Wirev>
   d4a5a:	2180      	movs	r1, #128	; 0x80
   d4a5c:	f7ff fff0 	bl	d4a40 <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d4a60:	f001 fc16 	bl	d6290 <_Z19__fetch_global_Wirev>
   d4a64:	6803      	ldr	r3, [r0, #0]
   d4a66:	4621      	mov	r1, r4
   d4a68:	689b      	ldr	r3, [r3, #8]
   d4a6a:	4798      	blx	r3
#else
  Wire.send(SeeedOLED_Command_Mode);	     // Set OLED Command mode
  Wire.send(command);
#endif
  Wire.endTransmission();    		     // End I2C communication
   d4a6c:	f001 fc10 	bl	d6290 <_Z19__fetch_global_Wirev>
}
   d4a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission();    		     // End I2C communication
   d4a74:	f000 bec9 	b.w	d580a <_ZN7TwoWire15endTransmissionEv>

000d4a78 <_ZN9SeeedOLED4initEv>:
{
   d4a78:	b508      	push	{r3, lr}
    sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d4a7a:	20ae      	movs	r0, #174	; 0xae
   d4a7c:	f7ff ffe4 	bl	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d4a80:	2005      	movs	r0, #5
   d4a82:	f000 faf7 	bl	d5074 <delay>
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d4a86:	20af      	movs	r0, #175	; 0xaf
   d4a88:	f7ff ffde 	bl	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d4a8c:	2005      	movs	r0, #5
   d4a8e:	f000 faf1 	bl	d5074 <delay>
}
   d4a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
   d4a96:	20a6      	movs	r0, #166	; 0xa6
   d4a98:	f7ff bfd6 	b.w	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4a9c <_ZN9SeeedOLED11setPageModeEv>:
    sendCommand(0x20); 			//set addressing mode
    sendCommand(0x00); 			//set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d4a9c:	b508      	push	{r3, lr}
    addressingMode = PAGE_MODE;
   d4a9e:	2301      	movs	r3, #1
   d4aa0:	7003      	strb	r3, [r0, #0]
    sendCommand(0x20); 			//set addressing mode
   d4aa2:	2020      	movs	r0, #32
   d4aa4:	f7ff ffd0 	bl	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x02); 			//set page addressing mode
}
   d4aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(0x02); 			//set page addressing mode
   d4aac:	2002      	movs	r0, #2
   d4aae:	f7ff bfcb 	b.w	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4ab2 <_ZN9SeeedOLED9setTextXYEhh>:


void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4ab2:	b510      	push	{r4, lr}
    sendCommand(0xB0 + Row); 			//set page address
   d4ab4:	3950      	subs	r1, #80	; 0x50
{
   d4ab6:	4614      	mov	r4, r2
    sendCommand(0xB0 + Row); 			//set page address
   d4ab8:	b2c8      	uxtb	r0, r1
   d4aba:	f7ff ffc5 	bl	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x00 + (8*Column & 0x0F)); 	//set column lower address
   d4abe:	00e0      	lsls	r0, r4, #3
   d4ac0:	f000 0008 	and.w	r0, r0, #8
   d4ac4:	f7ff ffc0 	bl	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4ac8:	f3c4 0043 	ubfx	r0, r4, #1, #4
   d4acc:	3010      	adds	r0, #16
}
   d4ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4ad2:	f7ff bfb9 	b.w	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4ad6 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
  setTextXY(0,0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d4ad6:	b510      	push	{r4, lr}
   d4ad8:	460c      	mov	r4, r1
     Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d4ada:	f001 fbd9 	bl	d6290 <_Z19__fetch_global_Wirev>
   d4ade:	213c      	movs	r1, #60	; 0x3c
   d4ae0:	f000 fe8c 	bl	d57fc <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
     Wire.write(SeeedOLED_Data_Mode);            // data mode
   d4ae4:	f001 fbd4 	bl	d6290 <_Z19__fetch_global_Wirev>
   d4ae8:	2140      	movs	r1, #64	; 0x40
   d4aea:	f7ff ffa9 	bl	d4a40 <_ZN7TwoWire5writeEi>
     Wire.write(Data);
   d4aee:	f001 fbcf 	bl	d6290 <_Z19__fetch_global_Wirev>
   d4af2:	6803      	ldr	r3, [r0, #0]
   d4af4:	4621      	mov	r1, r4
   d4af6:	689b      	ldr	r3, [r3, #8]
   d4af8:	4798      	blx	r3
#else
     Wire.send(SeeedOLED_Data_Mode);            // data mode
     Wire.send(Data);
#endif
     Wire.endTransmission();                    // stop I2C transmission
   d4afa:	f001 fbc9 	bl	d6290 <_Z19__fetch_global_Wirev>
}
   d4afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     Wire.endTransmission();                    // stop I2C transmission
   d4b02:	f000 be82 	b.w	d580a <_ZN7TwoWire15endTransmissionEv>
	...

000d4b08 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
    if(C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d4b08:	f1a1 0320 	sub.w	r3, r1, #32
    {
    C=' '; //Space
   d4b0c:	2b5f      	cmp	r3, #95	; 0x5f
   d4b0e:	bf88      	it	hi
   d4b10:	2120      	movhi	r1, #32
{
   d4b12:	b570      	push	{r4, r5, r6, lr}
   d4b14:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   d4b18:	4d07      	ldr	r5, [pc, #28]	; (d4b38 <_ZN9SeeedOLED7putCharEh+0x30>)
   d4b1a:	3920      	subs	r1, #32
   d4b1c:	4606      	mov	r6, r0
    }
    unsigned char i=0;
    for(i=0;i<8;i++)
   d4b1e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C=' '; //Space
   d4b22:	2408      	movs	r4, #8
    {
       //read bytes from code memory
       sendData(pgm_read_byte(&BasicFont[C-32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d4b24:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b28:	4630      	mov	r0, r6
   d4b2a:	3c01      	subs	r4, #1
   d4b2c:	f7ff ffd3 	bl	d4ad6 <_ZN9SeeedOLED8sendDataEh>
    for(i=0;i<8;i++)
   d4b30:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4b34:	d1f6      	bne.n	d4b24 <_ZN9SeeedOLED7putCharEh+0x1c>
    }
}
   d4b36:	bd70      	pop	{r4, r5, r6, pc}
   d4b38:	000d70c0 	.word	0x000d70c0

000d4b3c <_ZN9SeeedOLED12clearDisplayEv>:
{
   d4b3c:	b570      	push	{r4, r5, r6, lr}
   d4b3e:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d4b40:	20ae      	movs	r0, #174	; 0xae
   d4b42:	f7ff ff81 	bl	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   d4b46:	2600      	movs	r6, #0
    setTextXY(j,0);
   d4b48:	2200      	movs	r2, #0
   d4b4a:	b2f1      	uxtb	r1, r6
   d4b4c:	4628      	mov	r0, r5
   d4b4e:	f7ff ffb0 	bl	d4ab2 <_ZN9SeeedOLED9setTextXYEhh>
   d4b52:	2410      	movs	r4, #16
        putChar(' ');
   d4b54:	2120      	movs	r1, #32
   d4b56:	4628      	mov	r0, r5
   d4b58:	3c01      	subs	r4, #1
   d4b5a:	f7ff ffd5 	bl	d4b08 <_ZN9SeeedOLED7putCharEh>
      for(i=0;i<16;i++)  //clear all columns
   d4b5e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4b62:	d1f7      	bne.n	d4b54 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for(j=0;j<8;j++)
   d4b64:	3601      	adds	r6, #1
   d4b66:	2e08      	cmp	r6, #8
   d4b68:	d1ee      	bne.n	d4b48 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d4b6a:	20af      	movs	r0, #175	; 0xaf
   d4b6c:	f7ff ff6c 	bl	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0,0);
   d4b70:	4622      	mov	r2, r4
   d4b72:	4621      	mov	r1, r4
   d4b74:	4628      	mov	r0, r5
}
   d4b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0,0);
   d4b7a:	f7ff bf9a 	b.w	d4ab2 <_ZN9SeeedOLED9setTextXYEhh>

000d4b7e <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   d4b7e:	b570      	push	{r4, r5, r6, lr}
   d4b80:	4606      	mov	r6, r0
   d4b82:	460d      	mov	r5, r1
   d4b84:	2400      	movs	r4, #0
    unsigned char i=0;
    while(String[i])
   d4b86:	b2e3      	uxtb	r3, r4
   d4b88:	3401      	adds	r4, #1
   d4b8a:	5ce9      	ldrb	r1, [r5, r3]
   d4b8c:	b119      	cbz	r1, d4b96 <_ZN9SeeedOLED9putStringEPKc+0x18>
    {
        putChar(String[i]);
   d4b8e:	4630      	mov	r0, r6
   d4b90:	f7ff ffba 	bl	d4b08 <_ZN9SeeedOLED7putCharEh>
    while(String[i])
   d4b94:	e7f7      	b.n	d4b86 <_ZN9SeeedOLED9putStringEPKc+0x8>
        i++;
    }
}
   d4b96:	bd70      	pop	{r4, r5, r6, pc}

000d4b98 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   d4b98:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b9a:	b085      	sub	sp, #20
  unsigned char char_buffer[10]="";
   d4b9c:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d4b9e:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10]="";
   d4ba0:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   d4ba4:	4606      	mov	r6, r0
  unsigned char char_buffer[10]="";
   d4ba6:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   d4baa:	da24      	bge.n	d4bf6 <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f=1;
    putChar('-');
   d4bac:	212d      	movs	r1, #45	; 0x2d
   d4bae:	f7ff ffab 	bl	d4b08 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d4bb2:	4264      	negs	r4, r4
    f=1;
   d4bb4:	2301      	movs	r3, #1
  unsigned char f = 0;
   d4bb6:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d4bb8:	200a      	movs	r0, #10
   d4bba:	462a      	mov	r2, r5
   d4bbc:	a904      	add	r1, sp, #16
   d4bbe:	440a      	add	r2, r1
   d4bc0:	3501      	adds	r5, #1
   d4bc2:	fbb4 f1f0 	udiv	r1, r4, r0
   d4bc6:	fb00 4411 	mls	r4, r0, r1, r4
   d4bca:	f802 4c0c 	strb.w	r4, [r2, #-12]
   d4bce:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   d4bd0:	460c      	mov	r4, r1
   d4bd2:	2900      	cmp	r1, #0
   d4bd4:	d1f1      	bne.n	d4bba <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f=f+i;
   d4bd6:	442b      	add	r3, r5
   d4bd8:	b2dc      	uxtb	r4, r3
   d4bda:	ab04      	add	r3, sp, #16
   d4bdc:	195f      	adds	r7, r3, r5
   d4bde:	3f0d      	subs	r7, #13
  for(; i > 0; i--)
   d4be0:	b175      	cbz	r5, d4c00 <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0'+ char_buffer[i - 1]);
   d4be2:	f817 1901 	ldrb.w	r1, [r7], #-1
   d4be6:	3130      	adds	r1, #48	; 0x30
   d4be8:	b2c9      	uxtb	r1, r1
   d4bea:	4630      	mov	r0, r6
  for(; i > 0; i--)
   d4bec:	3d01      	subs	r5, #1
    putChar('0'+ char_buffer[i - 1]);
   d4bee:	f7ff ff8b 	bl	d4b08 <_ZN9SeeedOLED7putCharEh>
  for(; i > 0; i--)
   d4bf2:	b2ed      	uxtb	r5, r5
   d4bf4:	e7f4      	b.n	d4be0 <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   d4bf6:	d1de      	bne.n	d4bb6 <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   d4bf8:	2130      	movs	r1, #48	; 0x30
   d4bfa:	f7ff ff85 	bl	d4b08 <_ZN9SeeedOLED7putCharEh>
    return f;
   d4bfe:	2401      	movs	r4, #1
  }
  return f;

}
   d4c00:	4620      	mov	r0, r4
   d4c02:	b005      	add	sp, #20
   d4c04:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c06 <_ZN9SeeedOLED16setNormalDisplayEv>:
    sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
    sendCommand(SeeedOLED_Normal_Display_Cmd);
   d4c06:	20a6      	movs	r0, #166	; 0xa6
   d4c08:	f7ff bf1e 	b.w	d4a48 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4c0c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <os_mutex_recursive_create+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030248 	.word	0x00030248

000d4c1c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <os_mutex_recursive_destroy+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030248 	.word	0x00030248

000d4c2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <HAL_RNG_GetRandomNumber+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	685b      	ldr	r3, [r3, #4]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030218 	.word	0x00030218

000d4c3c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <HAL_Delay_Microseconds+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	68db      	ldr	r3, [r3, #12]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030218 	.word	0x00030218

000d4c4c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	695b      	ldr	r3, [r3, #20]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030218 	.word	0x00030218

000d4c5c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <HAL_Pin_Map+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	681b      	ldr	r3, [r3, #0]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	0003022c 	.word	0x0003022c

000d4c6c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <HAL_Pin_Mode+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	689b      	ldr	r3, [r3, #8]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	0003022c 	.word	0x0003022c

000d4c7c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <HAL_Get_Pin_Mode+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	68db      	ldr	r3, [r3, #12]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	0003022c 	.word	0x0003022c

000d4c8c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <HAL_GPIO_Write+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	691b      	ldr	r3, [r3, #16]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	0003022c 	.word	0x0003022c

000d4c9c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <HAL_Interrupts_Enable_All+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	6a1b      	ldr	r3, [r3, #32]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	0003022c 	.word	0x0003022c

000d4cac <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <HAL_Interrupts_Disable_All+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	0003022c 	.word	0x0003022c

000d4cbc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <hal_i2c_begin+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	68db      	ldr	r3, [r3, #12]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030228 	.word	0x00030228

000d4ccc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <hal_i2c_begin_transmission+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	699b      	ldr	r3, [r3, #24]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030228 	.word	0x00030228

000d4cdc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <hal_i2c_end_transmission+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	69db      	ldr	r3, [r3, #28]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030228 	.word	0x00030228

000d4cec <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <hal_i2c_write+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6a1b      	ldr	r3, [r3, #32]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030228 	.word	0x00030228

000d4cfc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <hal_i2c_available+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030228 	.word	0x00030228

000d4d0c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <hal_i2c_read+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030228 	.word	0x00030228

000d4d1c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <hal_i2c_peek+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030228 	.word	0x00030228

000d4d2c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <hal_i2c_flush+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030228 	.word	0x00030228

000d4d3c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <hal_i2c_is_enabled+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030228 	.word	0x00030228

000d4d4c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <hal_i2c_init+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030228 	.word	0x00030228

000d4d5c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <inet_inet_ntop+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	695b      	ldr	r3, [r3, #20]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030264 	.word	0x00030264

000d4d6c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <netdb_freeaddrinfo+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	689b      	ldr	r3, [r3, #8]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030268 	.word	0x00030268

000d4d7c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <netdb_getaddrinfo+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	68db      	ldr	r3, [r3, #12]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030268 	.word	0x00030268

000d4d8c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <hal_spi_init+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	69db      	ldr	r3, [r3, #28]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030230 	.word	0x00030230

000d4d9c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <hal_spi_is_enabled+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	6a1b      	ldr	r3, [r3, #32]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030230 	.word	0x00030230

000d4dac <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <hal_usart_init+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	681b      	ldr	r3, [r3, #0]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	0003023c 	.word	0x0003023c

000d4dbc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <hal_usart_write+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	68db      	ldr	r3, [r3, #12]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	0003023c 	.word	0x0003023c

000d4dcc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <hal_usart_available+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	691b      	ldr	r3, [r3, #16]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	0003023c 	.word	0x0003023c

000d4ddc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <hal_usart_read+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	695b      	ldr	r3, [r3, #20]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	0003023c 	.word	0x0003023c

000d4dec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <hal_usart_peek+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	699b      	ldr	r3, [r3, #24]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	0003023c 	.word	0x0003023c

000d4dfc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <hal_usart_flush+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	69db      	ldr	r3, [r3, #28]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003023c 	.word	0x0003023c

000d4e0c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <hal_usart_is_enabled+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	6a1b      	ldr	r3, [r3, #32]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003023c 	.word	0x0003023c

000d4e1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <hal_usart_available_data_for_write+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003023c 	.word	0x0003023c

000d4e2c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <HAL_USB_USART_Init+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	681b      	ldr	r3, [r3, #0]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003024c 	.word	0x0003024c

000d4e3c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <HAL_USB_USART_Begin+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	685b      	ldr	r3, [r3, #4]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003024c 	.word	0x0003024c

000d4e4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <HAL_USB_USART_Available_Data+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	691b      	ldr	r3, [r3, #16]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003024c 	.word	0x0003024c

000d4e5c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	695b      	ldr	r3, [r3, #20]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	0003024c 	.word	0x0003024c

000d4e6c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <HAL_USB_USART_Receive_Data+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	699b      	ldr	r3, [r3, #24]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	0003024c 	.word	0x0003024c

000d4e7c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_USB_USART_Send_Data+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	69db      	ldr	r3, [r3, #28]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	0003024c 	.word	0x0003024c

000d4e8c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <HAL_USB_USART_Flush_Data+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	6a1b      	ldr	r3, [r3, #32]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	0003024c 	.word	0x0003024c

000d4e9c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <panic_+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030260 	.word	0x00030260

000d4eac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <set_system_mode+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	685b      	ldr	r3, [r3, #4]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030220 	.word	0x00030220

000d4ebc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <system_delay_ms+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	695b      	ldr	r3, [r3, #20]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030220 	.word	0x00030220

000d4ecc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <application_thread_current+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030220 	.word	0x00030220

000d4edc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <application_thread_invoke+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030220 	.word	0x00030220

000d4eec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b03      	ldr	r3, [pc, #12]	; (d4efc <system_ctrl_set_app_request_handler+0x10>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ef6:	9301      	str	r3, [sp, #4]
   d4ef8:	bd08      	pop	{r3, pc}
   d4efa:	0000      	.short	0x0000
   d4efc:	00030220 	.word	0x00030220

000d4f00 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b03      	ldr	r3, [pc, #12]	; (d4f10 <system_ctrl_set_result+0x10>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f0a:	9301      	str	r3, [sp, #4]
   d4f0c:	bd08      	pop	{r3, pc}
   d4f0e:	0000      	.short	0x0000
   d4f10:	00030220 	.word	0x00030220

000d4f14 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <spark_cloud_flag_connected+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	695b      	ldr	r3, [r3, #20]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030244 	.word	0x00030244

000d4f24 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <spark_send_event+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6a1b      	ldr	r3, [r3, #32]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030244 	.word	0x00030244

000d4f34 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <spark_subscribe+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030244 	.word	0x00030244

000d4f44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030244 	.word	0x00030244

000d4f54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <network_connect+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	685b      	ldr	r3, [r3, #4]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030240 	.word	0x00030240

000d4f64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <network_connecting+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	689b      	ldr	r3, [r3, #8]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030240 	.word	0x00030240

000d4f74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <network_disconnect+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	68db      	ldr	r3, [r3, #12]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030240 	.word	0x00030240

000d4f84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <network_ready+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	691b      	ldr	r3, [r3, #16]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030240 	.word	0x00030240

000d4f94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <network_on+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	695b      	ldr	r3, [r3, #20]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030240 	.word	0x00030240

000d4fa4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <network_off+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	699b      	ldr	r3, [r3, #24]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030240 	.word	0x00030240

000d4fb4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <network_listen+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	69db      	ldr	r3, [r3, #28]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030240 	.word	0x00030240

000d4fc4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <network_listening+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	6a1b      	ldr	r3, [r3, #32]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030240 	.word	0x00030240

000d4fd4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <network_set_listen_timeout+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030240 	.word	0x00030240

000d4fe4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <network_get_listen_timeout+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030240 	.word	0x00030240

000d4ff4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <network_is_on+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030240 	.word	0x00030240

000d5004 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <network_is_off+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030240 	.word	0x00030240

000d5014 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <malloc+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	681b      	ldr	r3, [r3, #0]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	0003021c 	.word	0x0003021c

000d5024 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <free+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	685b      	ldr	r3, [r3, #4]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	0003021c 	.word	0x0003021c

000d5034 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <realloc+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	689b      	ldr	r3, [r3, #8]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	0003021c 	.word	0x0003021c

000d5044 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <abort+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	0003021c 	.word	0x0003021c

000d5054 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <_malloc_r+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	0003021c 	.word	0x0003021c

000d5064 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <newlib_impure_ptr_callback+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	0003021c 	.word	0x0003021c

000d5074 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5074:	2100      	movs	r1, #0
   d5076:	f7ff bf21 	b.w	d4ebc <system_delay_ms>

000d507a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d507a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d507c:	6883      	ldr	r3, [r0, #8]
   d507e:	4604      	mov	r4, r0
   d5080:	b90b      	cbnz	r3, d5086 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5082:	f001 f936 	bl	d62f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5086:	68c3      	ldr	r3, [r0, #12]
   d5088:	4798      	blx	r3
      if (_M_manager)
   d508a:	68a3      	ldr	r3, [r4, #8]
   d508c:	b11b      	cbz	r3, d5096 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d508e:	2203      	movs	r2, #3
   d5090:	4621      	mov	r1, r4
   d5092:	4620      	mov	r0, r4
   d5094:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5096:	4620      	mov	r0, r4
   d5098:	2110      	movs	r1, #16
}
   d509a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d509e:	f001 b924 	b.w	d62ea <_ZdlPvj>

000d50a2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d50a2:	b510      	push	{r4, lr}
   d50a4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d50a6:	6800      	ldr	r0, [r0, #0]
   d50a8:	b108      	cbz	r0, d50ae <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d50aa:	f7ff fdb7 	bl	d4c1c <os_mutex_recursive_destroy>
    }
   d50ae:	4620      	mov	r0, r4
   d50b0:	bd10      	pop	{r4, pc}

000d50b2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d50b2:	b510      	push	{r4, lr}
      if (_M_manager)
   d50b4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d50b6:	4604      	mov	r4, r0
      if (_M_manager)
   d50b8:	b113      	cbz	r3, d50c0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50ba:	2203      	movs	r2, #3
   d50bc:	4601      	mov	r1, r0
   d50be:	4798      	blx	r3
    }
   d50c0:	4620      	mov	r0, r4
   d50c2:	bd10      	pop	{r4, pc}

000d50c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d50c4:	680b      	ldr	r3, [r1, #0]
   d50c6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d50c8:	b113      	cbz	r3, d50d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d50ca:	685a      	ldr	r2, [r3, #4]
   d50cc:	3201      	adds	r2, #1
   d50ce:	605a      	str	r2, [r3, #4]
      }
   d50d0:	4770      	bx	lr

000d50d2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d50d2:	b513      	push	{r0, r1, r4, lr}
   d50d4:	460b      	mov	r3, r1
   d50d6:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50d8:	e9d0 0100 	ldrd	r0, r1, [r0]
   d50dc:	466c      	mov	r4, sp
   d50de:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d50e2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d50e6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d50ea:	e894 0003 	ldmia.w	r4, {r0, r1}
   d50ee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d50f2:	b002      	add	sp, #8
   d50f4:	bd10      	pop	{r4, pc}
	...

000d50f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d50f8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d50fa:	4c06      	ldr	r4, [pc, #24]	; (d5114 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d50fc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d50fe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5100:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5102:	f7ff fd83 	bl	d4c0c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5106:	4620      	mov	r0, r4
   d5108:	4a03      	ldr	r2, [pc, #12]	; (d5118 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d510a:	4904      	ldr	r1, [pc, #16]	; (d511c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d510c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5110:	f001 b8e6 	b.w	d62e0 <__aeabi_atexit>
   d5114:	2003e61c 	.word	0x2003e61c
   d5118:	2003e5ec 	.word	0x2003e5ec
   d511c:	000d50a3 	.word	0x000d50a3

000d5120 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5120:	2200      	movs	r2, #0
   d5122:	6840      	ldr	r0, [r0, #4]
   d5124:	4611      	mov	r1, r2
   d5126:	f7ff bf2d 	b.w	d4f84 <network_ready>

000d512a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d512a:	2200      	movs	r2, #0
   d512c:	6840      	ldr	r0, [r0, #4]
   d512e:	4611      	mov	r1, r2
   d5130:	f7ff bf48 	b.w	d4fc4 <network_listening>

000d5134 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5134:	2200      	movs	r2, #0
   d5136:	6840      	ldr	r0, [r0, #4]
   d5138:	4611      	mov	r1, r2
   d513a:	f7ff bf53 	b.w	d4fe4 <network_get_listen_timeout>

000d513e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d513e:	6840      	ldr	r0, [r0, #4]
   d5140:	2200      	movs	r2, #0
   d5142:	f7ff bf47 	b.w	d4fd4 <network_set_listen_timeout>

000d5146 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5146:	6840      	ldr	r0, [r0, #4]
   d5148:	2200      	movs	r2, #0
   d514a:	f081 0101 	eor.w	r1, r1, #1
   d514e:	f7ff bf31 	b.w	d4fb4 <network_listen>

000d5152 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5152:	2300      	movs	r3, #0
   d5154:	6840      	ldr	r0, [r0, #4]
   d5156:	461a      	mov	r2, r3
   d5158:	4619      	mov	r1, r3
   d515a:	f7ff bf23 	b.w	d4fa4 <network_off>

000d515e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d515e:	2300      	movs	r3, #0
   d5160:	6840      	ldr	r0, [r0, #4]
   d5162:	461a      	mov	r2, r3
   d5164:	4619      	mov	r1, r3
   d5166:	f7ff bf15 	b.w	d4f94 <network_on>

000d516a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d516a:	2200      	movs	r2, #0
   d516c:	6840      	ldr	r0, [r0, #4]
   d516e:	4611      	mov	r1, r2
   d5170:	f7ff bef8 	b.w	d4f64 <network_connecting>

000d5174 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5174:	6840      	ldr	r0, [r0, #4]
   d5176:	2200      	movs	r2, #0
   d5178:	2102      	movs	r1, #2
   d517a:	f7ff befb 	b.w	d4f74 <network_disconnect>

000d517e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d517e:	2300      	movs	r3, #0
   d5180:	6840      	ldr	r0, [r0, #4]
   d5182:	461a      	mov	r2, r3
   d5184:	f7ff bee6 	b.w	d4f54 <network_connect>

000d5188 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5188:	4b08      	ldr	r3, [pc, #32]	; (d51ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d518a:	b510      	push	{r4, lr}
   d518c:	2428      	movs	r4, #40	; 0x28
   d518e:	4622      	mov	r2, r4
   d5190:	4618      	mov	r0, r3
   d5192:	2100      	movs	r1, #0
   d5194:	f001 fee4 	bl	d6f60 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5198:	4b05      	ldr	r3, [pc, #20]	; (d51b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d519a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d519c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d51a0:	6042      	str	r2, [r0, #4]
   d51a2:	2204      	movs	r2, #4
   d51a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d51a6:	4a03      	ldr	r2, [pc, #12]	; (d51b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d51a8:	601a      	str	r2, [r3, #0]
   d51aa:	bd10      	pop	{r4, pc}
   d51ac:	2003e628 	.word	0x2003e628
   d51b0:	2003e620 	.word	0x2003e620
   d51b4:	000d73c8 	.word	0x000d73c8

000d51b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d51b8:	4770      	bx	lr

000d51ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d51ba:	2000      	movs	r0, #0
   d51bc:	4770      	bx	lr

000d51be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d51be:	b510      	push	{r4, lr}
   d51c0:	2110      	movs	r1, #16
   d51c2:	4604      	mov	r4, r0
   d51c4:	f001 f891 	bl	d62ea <_ZdlPvj>
   d51c8:	4620      	mov	r0, r4
   d51ca:	bd10      	pop	{r4, pc}

000d51cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d51cc:	b508      	push	{r3, lr}
      { delete this; }
   d51ce:	f7ff fff6 	bl	d51be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d51d2:	bd08      	pop	{r3, pc}

000d51d4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d51d4:	b530      	push	{r4, r5, lr}
        type_(type) {
   d51d6:	2200      	movs	r2, #0
   d51d8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d51dc:	6002      	str	r2, [r0, #0]
   d51de:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d51e0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d51e2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d51e4:	680c      	ldr	r4, [r1, #0]
   d51e6:	8085      	strh	r5, [r0, #4]
   d51e8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d51ea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d51ec:	bd30      	pop	{r4, r5, pc}

000d51ee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d51ee:	b510      	push	{r4, lr}
   d51f0:	4604      	mov	r4, r0
    free((void*)msg_);
   d51f2:	6800      	ldr	r0, [r0, #0]
   d51f4:	f7ff ff16 	bl	d5024 <free>
}
   d51f8:	4620      	mov	r0, r4
   d51fa:	bd10      	pop	{r4, pc}

000d51fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d51fc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d51fe:	68c4      	ldr	r4, [r0, #12]
   d5200:	b1f4      	cbz	r4, d5240 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5202:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5204:	2b02      	cmp	r3, #2
   d5206:	d103      	bne.n	d5210 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5208:	f104 000c 	add.w	r0, r4, #12
   d520c:	f7ff ffef 	bl	d51ee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5210:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5212:	b135      	cbz	r5, d5222 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5214:	4628      	mov	r0, r5
   d5216:	f7ff ff4c 	bl	d50b2 <_ZNSt14_Function_baseD1Ev>
   d521a:	2110      	movs	r1, #16
   d521c:	4628      	mov	r0, r5
   d521e:	f001 f864 	bl	d62ea <_ZdlPvj>
   d5222:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5224:	b135      	cbz	r5, d5234 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5226:	4628      	mov	r0, r5
   d5228:	f7ff ff43 	bl	d50b2 <_ZNSt14_Function_baseD1Ev>
   d522c:	2110      	movs	r1, #16
   d522e:	4628      	mov	r0, r5
   d5230:	f001 f85b 	bl	d62ea <_ZdlPvj>
   d5234:	4620      	mov	r0, r4
   d5236:	2114      	movs	r1, #20
   d5238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d523c:	f001 b855 	b.w	d62ea <_ZdlPvj>
   d5240:	bd38      	pop	{r3, r4, r5, pc}

000d5242 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5242:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5244:	460e      	mov	r6, r1
   d5246:	4604      	mov	r4, r0
   d5248:	f856 3b04 	ldr.w	r3, [r6], #4
   d524c:	9300      	str	r3, [sp, #0]
   d524e:	460d      	mov	r5, r1
   d5250:	a801      	add	r0, sp, #4
   d5252:	4631      	mov	r1, r6
   d5254:	f7ff ff36 	bl	d50c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5258:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d525a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d525c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d525e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5260:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5262:	2300      	movs	r3, #0
   d5264:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5266:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5268:	f7fe ffc0 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d526c:	4630      	mov	r0, r6
   d526e:	f7fe ffbd 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5272:	4628      	mov	r0, r5
   d5274:	2108      	movs	r1, #8
   d5276:	f001 f838 	bl	d62ea <_ZdlPvj>
        return p;
    }
   d527a:	4620      	mov	r0, r4
   d527c:	b002      	add	sp, #8
   d527e:	bd70      	pop	{r4, r5, r6, pc}

000d5280 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5280:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5282:	b510      	push	{r4, lr}
      if (_M_empty())
   d5284:	b90a      	cbnz	r2, d528a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5286:	f001 f834 	bl	d62f2 <_ZSt25__throw_bad_function_callv>
    }
   d528a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d528e:	68c3      	ldr	r3, [r0, #12]
   d5290:	4718      	bx	r3

000d5292 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5292:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5294:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5296:	f100 0110 	add.w	r1, r0, #16
   d529a:	f7ff fff1 	bl	d5280 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d529e:	bd08      	pop	{r3, pc}

000d52a0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d52a0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d52a2:	b510      	push	{r4, lr}
      if (_M_empty())
   d52a4:	b90a      	cbnz	r2, d52aa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d52a6:	f001 f824 	bl	d62f2 <_ZSt25__throw_bad_function_callv>
    }
   d52aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52ae:	68c3      	ldr	r3, [r0, #12]
   d52b0:	4718      	bx	r3

000d52b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d52b2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d52b4:	6800      	ldr	r0, [r0, #0]
   d52b6:	f100 0110 	add.w	r1, r0, #16
   d52ba:	f7ff fff1 	bl	d52a0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d52be:	bd08      	pop	{r3, pc}

000d52c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d52c0:	b538      	push	{r3, r4, r5, lr}
   d52c2:	2300      	movs	r3, #0
   d52c4:	4604      	mov	r4, r0
   d52c6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52c8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d52ca:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52cc:	f7fe fee1 	bl	d4092 <_Znwj>
   d52d0:	b128      	cbz	r0, d52de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d52d2:	2301      	movs	r3, #1
   d52d4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d52d8:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d52da:	6003      	str	r3, [r0, #0]
   d52dc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52de:	6020      	str	r0, [r4, #0]
	}
   d52e0:	4620      	mov	r0, r4
   d52e2:	bd38      	pop	{r3, r4, r5, pc}
   d52e4:	000d7404 	.word	0x000d7404

000d52e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d52e8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d52ea:	2300      	movs	r3, #0
   d52ec:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d52ee:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d52f0:	4604      	mov	r4, r0
   d52f2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d52f4:	b12b      	cbz	r3, d5302 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d52f6:	2202      	movs	r2, #2
   d52f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d52fa:	68eb      	ldr	r3, [r5, #12]
   d52fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d52fe:	68ab      	ldr	r3, [r5, #8]
   d5300:	60a3      	str	r3, [r4, #8]
    }
   d5302:	4620      	mov	r0, r4
   d5304:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5308:	b5f0      	push	{r4, r5, r6, r7, lr}
   d530a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d530c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d530e:	4668      	mov	r0, sp
   d5310:	f7ff ff60 	bl	d51d4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5314:	f04f 0302 	mov.w	r3, #2
   d5318:	e8d4 2f4f 	ldrexb	r2, [r4]
   d531c:	2a00      	cmp	r2, #0
   d531e:	d103      	bne.n	d5328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5320:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5324:	2900      	cmp	r1, #0
   d5326:	d1f7      	bne.n	d5318 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5328:	d125      	bne.n	d5376 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d532a:	f104 050c 	add.w	r5, r4, #12
   d532e:	4669      	mov	r1, sp
   d5330:	4628      	mov	r0, r5
   d5332:	f7ff ff4f 	bl	d51d4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5336:	f3bf 8f5b 	dmb	ish
   d533a:	2301      	movs	r3, #1
   d533c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d533e:	2000      	movs	r0, #0
   d5340:	f104 0308 	add.w	r3, r4, #8
   d5344:	f3bf 8f5b 	dmb	ish
   d5348:	e853 6f00 	ldrex	r6, [r3]
   d534c:	e843 0200 	strex	r2, r0, [r3]
   d5350:	2a00      	cmp	r2, #0
   d5352:	d1f9      	bne.n	d5348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5354:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5358:	b16e      	cbz	r6, d5376 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d535a:	f7ff fdb7 	bl	d4ecc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d535e:	b178      	cbz	r0, d5380 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5360:	4629      	mov	r1, r5
   d5362:	4630      	mov	r0, r6
   d5364:	f7ff ff8c 	bl	d5280 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5368:	4630      	mov	r0, r6
   d536a:	f7ff fea2 	bl	d50b2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d536e:	2110      	movs	r1, #16
   d5370:	4630      	mov	r0, r6
   d5372:	f000 ffba 	bl	d62ea <_ZdlPvj>
        p_->setError(std::move(error));
   d5376:	4668      	mov	r0, sp
   d5378:	f7ff ff39 	bl	d51ee <_ZN8particle5ErrorD1Ev>
    }
   d537c:	b009      	add	sp, #36	; 0x24
   d537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5380:	4631      	mov	r1, r6
   d5382:	a802      	add	r0, sp, #8
   d5384:	f7ff ffb0 	bl	d52e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5388:	68e0      	ldr	r0, [r4, #12]
   d538a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d538e:	b108      	cbz	r0, d5394 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5390:	f001 fe22 	bl	d6fd8 <strdup>
        type_(type) {
   d5394:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5396:	2010      	movs	r0, #16
   d5398:	f8ad 501c 	strh.w	r5, [sp, #28]
   d539c:	f7fe fe79 	bl	d4092 <_Znwj>
   d53a0:	4605      	mov	r5, r0
   d53a2:	b1e8      	cbz	r0, d53e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d53a4:	2700      	movs	r7, #0
   d53a6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53a8:	2018      	movs	r0, #24
   d53aa:	f7fe fe72 	bl	d4092 <_Znwj>
   d53ae:	4604      	mov	r4, r0
   d53b0:	b188      	cbz	r0, d53d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d53b2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d53b4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d53b6:	a802      	add	r0, sp, #8
   d53b8:	f7ff fe8b 	bl	d50d2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53bc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d53be:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53c0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d53c4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d53c6:	a906      	add	r1, sp, #24
   d53c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53ca:	60e3      	str	r3, [r4, #12]
   d53cc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d53d0:	9205      	str	r2, [sp, #20]
   d53d2:	f7ff feff 	bl	d51d4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d53d6:	4b08      	ldr	r3, [pc, #32]	; (d53f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d53d8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53da:	4b08      	ldr	r3, [pc, #32]	; (d53fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53dc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d53de:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d53e0:	a806      	add	r0, sp, #24
   d53e2:	f7ff ff04 	bl	d51ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d53e6:	a802      	add	r0, sp, #8
   d53e8:	f7ff fe63 	bl	d50b2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53ec:	2200      	movs	r2, #0
   d53ee:	4629      	mov	r1, r5
   d53f0:	4803      	ldr	r0, [pc, #12]	; (d5400 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d53f2:	f7ff fd73 	bl	d4edc <application_thread_invoke>
   d53f6:	e7b7      	b.n	d5368 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d53f8:	000d5293 	.word	0x000d5293
   d53fc:	000d5529 	.word	0x000d5529
   d5400:	000d507b 	.word	0x000d507b

000d5404 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5408:	b08a      	sub	sp, #40	; 0x28
   d540a:	4605      	mov	r5, r0
   d540c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5410:	460c      	mov	r4, r1
   d5412:	4617      	mov	r7, r2
   d5414:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5416:	f7ff fd7d 	bl	d4f14 <spark_cloud_flag_connected>
   d541a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d541c:	4682      	mov	sl, r0
   d541e:	bb38      	cbnz	r0, d5470 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5420:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5424:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5426:	a905      	add	r1, sp, #20
   d5428:	4630      	mov	r0, r6
   d542a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d542e:	f7ff fed1 	bl	d51d4 <_ZN8particle5ErrorC1EOS0_>
   d5432:	2014      	movs	r0, #20
   d5434:	f7fe fe2d 	bl	d4092 <_Znwj>
   d5438:	4604      	mov	r4, r0
   d543a:	b148      	cbz	r0, d5450 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d543c:	2302      	movs	r3, #2
   d543e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5440:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5442:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5446:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5448:	4631      	mov	r1, r6
   d544a:	300c      	adds	r0, #12
   d544c:	f7ff fec2 	bl	d51d4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5450:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5452:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5454:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5458:	f7ff ff32 	bl	d52c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d545c:	4630      	mov	r0, r6
   d545e:	f7ff fec6 	bl	d51ee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5462:	a805      	add	r0, sp, #20
   d5464:	f7ff fec3 	bl	d51ee <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5468:	4628      	mov	r0, r5
   d546a:	b00a      	add	sp, #40	; 0x28
   d546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5470:	230c      	movs	r3, #12
   d5472:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5476:	2014      	movs	r0, #20
   d5478:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d547c:	9307      	str	r3, [sp, #28]
   d547e:	f7fe fe08 	bl	d4092 <_Znwj>
   d5482:	4601      	mov	r1, r0
   d5484:	b128      	cbz	r0, d5492 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5486:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d548a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d548e:	f880 a001 	strb.w	sl, [r0, #1]
   d5492:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5494:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5496:	f7ff ff13 	bl	d52c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d549a:	4b22      	ldr	r3, [pc, #136]	; (d5524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d549c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d549e:	2008      	movs	r0, #8
   d54a0:	f7fe fdf7 	bl	d4092 <_Znwj>
   d54a4:	4682      	mov	sl, r0
   d54a6:	b128      	cbz	r0, d54b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54a8:	9b03      	ldr	r3, [sp, #12]
   d54aa:	f840 3b04 	str.w	r3, [r0], #4
   d54ae:	a904      	add	r1, sp, #16
   d54b0:	f7ff fe08 	bl	d50c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d54b4:	9600      	str	r6, [sp, #0]
   d54b6:	fa5f f389 	uxtb.w	r3, r9
   d54ba:	4642      	mov	r2, r8
   d54bc:	4639      	mov	r1, r7
   d54be:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d54c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d54c4:	f7ff fd2e 	bl	d4f24 <spark_send_event>
   d54c8:	b9b8      	cbnz	r0, d54fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d54ca:	9b03      	ldr	r3, [sp, #12]
   d54cc:	785b      	ldrb	r3, [r3, #1]
   d54ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d54d2:	b993      	cbnz	r3, d54fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d54d4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d54d8:	a905      	add	r1, sp, #20
   d54da:	a803      	add	r0, sp, #12
   d54dc:	9205      	str	r2, [sp, #20]
   d54de:	f8ad 3018 	strh.w	r3, [sp, #24]
   d54e2:	f7ff ff11 	bl	d5308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d54e6:	a805      	add	r0, sp, #20
   d54e8:	f7ff fe81 	bl	d51ee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d54ec:	a805      	add	r0, sp, #20
   d54ee:	9909      	ldr	r1, [sp, #36]	; 0x24
   d54f0:	f7ff fea7 	bl	d5242 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d54f4:	a806      	add	r0, sp, #24
   d54f6:	f7fe fe79 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54fa:	9b03      	ldr	r3, [sp, #12]
   d54fc:	9305      	str	r3, [sp, #20]
   d54fe:	a904      	add	r1, sp, #16
   d5500:	a806      	add	r0, sp, #24
   d5502:	f7ff fddf 	bl	d50c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5506:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5508:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d550a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d550c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d550e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5510:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5512:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5514:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5516:	f7fe fe69 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d551a:	a804      	add	r0, sp, #16
   d551c:	f7fe fe66 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5520:	e7a2      	b.n	d5468 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5522:	bf00      	nop
   d5524:	000d55ed 	.word	0x000d55ed

000d5528 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5528:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d552a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d552c:	4605      	mov	r5, r0
	  switch (__op)
   d552e:	d007      	beq.n	d5540 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5530:	2a03      	cmp	r2, #3
   d5532:	d018      	beq.n	d5566 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5534:	2a01      	cmp	r2, #1
   d5536:	d101      	bne.n	d553c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5538:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d553a:	6003      	str	r3, [r0, #0]
	}
   d553c:	2000      	movs	r0, #0
   d553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5540:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5542:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5544:	f7fe fda5 	bl	d4092 <_Znwj>
   d5548:	4604      	mov	r4, r0
   d554a:	b150      	cbz	r0, d5562 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d554c:	4631      	mov	r1, r6
   d554e:	f7ff fecb 	bl	d52e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5552:	6930      	ldr	r0, [r6, #16]
   d5554:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5558:	b108      	cbz	r0, d555e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d555a:	f001 fd3d 	bl	d6fd8 <strdup>
        type_(type) {
   d555e:	6120      	str	r0, [r4, #16]
   d5560:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5562:	602c      	str	r4, [r5, #0]
	}
   d5564:	e7ea      	b.n	d553c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5566:	6804      	ldr	r4, [r0, #0]
   d5568:	2c00      	cmp	r4, #0
   d556a:	d0e7      	beq.n	d553c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d556c:	f104 0010 	add.w	r0, r4, #16
   d5570:	f7ff fe3d 	bl	d51ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5574:	4620      	mov	r0, r4
   d5576:	f7ff fd9c 	bl	d50b2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d557a:	2118      	movs	r1, #24
   d557c:	4620      	mov	r0, r4
   d557e:	f000 feb4 	bl	d62ea <_ZdlPvj>
   d5582:	e7db      	b.n	d553c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5584 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5584:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5586:	2300      	movs	r3, #0
   d5588:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d558a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d558c:	4604      	mov	r4, r0
   d558e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5590:	b12b      	cbz	r3, d559e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5592:	2202      	movs	r2, #2
   d5594:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5596:	68eb      	ldr	r3, [r5, #12]
   d5598:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d559a:	68ab      	ldr	r3, [r5, #8]
   d559c:	60a3      	str	r3, [r4, #8]
    }
   d559e:	4620      	mov	r0, r4
   d55a0:	bd38      	pop	{r3, r4, r5, pc}

000d55a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d55a2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d55a4:	b570      	push	{r4, r5, r6, lr}
   d55a6:	4604      	mov	r4, r0
	  switch (__op)
   d55a8:	d007      	beq.n	d55ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d55aa:	2a03      	cmp	r2, #3
   d55ac:	d012      	beq.n	d55d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d55ae:	2a01      	cmp	r2, #1
   d55b0:	d101      	bne.n	d55b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d55b2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d55b4:	6003      	str	r3, [r0, #0]
	}
   d55b6:	2000      	movs	r0, #0
   d55b8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d55ba:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d55bc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d55be:	f7fe fd68 	bl	d4092 <_Znwj>
   d55c2:	4605      	mov	r5, r0
   d55c4:	b120      	cbz	r0, d55d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d55c6:	4631      	mov	r1, r6
   d55c8:	f7ff ffdc 	bl	d5584 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d55cc:	7c33      	ldrb	r3, [r6, #16]
   d55ce:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d55d0:	6025      	str	r5, [r4, #0]
	}
   d55d2:	e7f0      	b.n	d55b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d55d4:	6804      	ldr	r4, [r0, #0]
   d55d6:	2c00      	cmp	r4, #0
   d55d8:	d0ed      	beq.n	d55b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d55da:	4620      	mov	r0, r4
   d55dc:	f7ff fd69 	bl	d50b2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d55e0:	2114      	movs	r1, #20
   d55e2:	4620      	mov	r0, r4
   d55e4:	f000 fe81 	bl	d62ea <_ZdlPvj>
   d55e8:	e7e5      	b.n	d55b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d55ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d55ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55ee:	b089      	sub	sp, #36	; 0x24
   d55f0:	4604      	mov	r4, r0
   d55f2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d55f4:	a801      	add	r0, sp, #4
   d55f6:	4611      	mov	r1, r2
   d55f8:	f7ff fe23 	bl	d5242 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d55fc:	b1a4      	cbz	r4, d5628 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d55fe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5600:	b11d      	cbz	r5, d560a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5602:	4628      	mov	r0, r5
   d5604:	f001 fce8 	bl	d6fd8 <strdup>
   d5608:	4605      	mov	r5, r0
   d560a:	a801      	add	r0, sp, #4
   d560c:	a903      	add	r1, sp, #12
        type_(type) {
   d560e:	9503      	str	r5, [sp, #12]
   d5610:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5614:	f7ff fe78 	bl	d5308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5618:	a803      	add	r0, sp, #12
   d561a:	f7ff fde8 	bl	d51ee <_ZN8particle5ErrorD1Ev>
   d561e:	a802      	add	r0, sp, #8
   d5620:	f7fe fde4 	bl	d41ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5624:	b009      	add	sp, #36	; 0x24
   d5626:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5628:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d562a:	2301      	movs	r3, #1
   d562c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5630:	2a00      	cmp	r2, #0
   d5632:	d103      	bne.n	d563c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5634:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5638:	2900      	cmp	r1, #0
   d563a:	d1f7      	bne.n	d562c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d563c:	d1ef      	bne.n	d561e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d563e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5640:	f3bf 8f5b 	dmb	ish
   d5644:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5646:	1d2b      	adds	r3, r5, #4
   d5648:	f3bf 8f5b 	dmb	ish
   d564c:	e853 6f00 	ldrex	r6, [r3]
   d5650:	e843 4200 	strex	r2, r4, [r3]
   d5654:	2a00      	cmp	r2, #0
   d5656:	d1f9      	bne.n	d564c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5658:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d565c:	2e00      	cmp	r6, #0
   d565e:	d0de      	beq.n	d561e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5660:	4620      	mov	r0, r4
   d5662:	f7ff fc33 	bl	d4ecc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5666:	4607      	mov	r7, r0
   d5668:	b160      	cbz	r0, d5684 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d566a:	f105 010c 	add.w	r1, r5, #12
   d566e:	4630      	mov	r0, r6
   d5670:	f7ff fe16 	bl	d52a0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5674:	4630      	mov	r0, r6
   d5676:	f7ff fd1c 	bl	d50b2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d567a:	2110      	movs	r1, #16
   d567c:	4630      	mov	r0, r6
   d567e:	f000 fe34 	bl	d62ea <_ZdlPvj>
   d5682:	e7cc      	b.n	d561e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5684:	4631      	mov	r1, r6
   d5686:	a803      	add	r0, sp, #12
   d5688:	f7ff ff7c 	bl	d5584 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d568c:	7b2b      	ldrb	r3, [r5, #12]
   d568e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5692:	2010      	movs	r0, #16
   d5694:	f7fe fcfd 	bl	d4092 <_Znwj>
   d5698:	4605      	mov	r5, r0
   d569a:	b1d0      	cbz	r0, d56d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d569c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d569e:	2014      	movs	r0, #20
   d56a0:	f7fe fcf7 	bl	d4092 <_Znwj>
   d56a4:	4604      	mov	r4, r0
   d56a6:	b178      	cbz	r0, d56c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d56a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d56aa:	4601      	mov	r1, r0
   d56ac:	a803      	add	r0, sp, #12
   d56ae:	f7ff fd10 	bl	d50d2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56b2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d56b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d56b6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56b8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d56ba:	9205      	str	r2, [sp, #20]
   d56bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d56be:	60e3      	str	r3, [r4, #12]
   d56c0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d56c4:	9206      	str	r2, [sp, #24]
   d56c6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d56c8:	4b06      	ldr	r3, [pc, #24]	; (d56e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d56ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d56cc:	4b06      	ldr	r3, [pc, #24]	; (d56e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56ce:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d56d0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d56d2:	a803      	add	r0, sp, #12
   d56d4:	f7ff fced 	bl	d50b2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d56d8:	2200      	movs	r2, #0
   d56da:	4629      	mov	r1, r5
   d56dc:	4803      	ldr	r0, [pc, #12]	; (d56ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d56de:	f7ff fbfd 	bl	d4edc <application_thread_invoke>
   d56e2:	e7c7      	b.n	d5674 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d56e4:	000d52b3 	.word	0x000d52b3
   d56e8:	000d55a3 	.word	0x000d55a3
   d56ec:	000d507b 	.word	0x000d507b

000d56f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56f0:	2200      	movs	r2, #0
   d56f2:	6840      	ldr	r0, [r0, #4]
   d56f4:	4611      	mov	r1, r2
   d56f6:	f7ff bc65 	b.w	d4fc4 <network_listening>

000d56fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d56fa:	2200      	movs	r2, #0
   d56fc:	6840      	ldr	r0, [r0, #4]
   d56fe:	4611      	mov	r1, r2
   d5700:	f7ff bc70 	b.w	d4fe4 <network_get_listen_timeout>

000d5704 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5704:	6840      	ldr	r0, [r0, #4]
   d5706:	2200      	movs	r2, #0
   d5708:	f7ff bc64 	b.w	d4fd4 <network_set_listen_timeout>

000d570c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d570c:	6840      	ldr	r0, [r0, #4]
   d570e:	2200      	movs	r2, #0
   d5710:	f081 0101 	eor.w	r1, r1, #1
   d5714:	f7ff bc4e 	b.w	d4fb4 <network_listen>

000d5718 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5718:	2300      	movs	r3, #0
   d571a:	6840      	ldr	r0, [r0, #4]
   d571c:	461a      	mov	r2, r3
   d571e:	4619      	mov	r1, r3
   d5720:	f7ff bc40 	b.w	d4fa4 <network_off>

000d5724 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5724:	2300      	movs	r3, #0
   d5726:	6840      	ldr	r0, [r0, #4]
   d5728:	461a      	mov	r2, r3
   d572a:	4619      	mov	r1, r3
   d572c:	f7ff bc32 	b.w	d4f94 <network_on>

000d5730 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5730:	2200      	movs	r2, #0
   d5732:	6840      	ldr	r0, [r0, #4]
   d5734:	4611      	mov	r1, r2
   d5736:	f7ff bc25 	b.w	d4f84 <network_ready>

000d573a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d573a:	2200      	movs	r2, #0
   d573c:	6840      	ldr	r0, [r0, #4]
   d573e:	4611      	mov	r1, r2
   d5740:	f7ff bc10 	b.w	d4f64 <network_connecting>

000d5744 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5744:	6840      	ldr	r0, [r0, #4]
   d5746:	2200      	movs	r2, #0
   d5748:	2102      	movs	r1, #2
   d574a:	f7ff bc13 	b.w	d4f74 <network_disconnect>

000d574e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d574e:	2300      	movs	r3, #0
   d5750:	6840      	ldr	r0, [r0, #4]
   d5752:	461a      	mov	r2, r3
   d5754:	f7ff bbfe 	b.w	d4f54 <network_connect>

000d5758 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5758:	4b02      	ldr	r3, [pc, #8]	; (d5764 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d575a:	2203      	movs	r2, #3
   d575c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d575e:	4a02      	ldr	r2, [pc, #8]	; (d5768 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5760:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5762:	4770      	bx	lr
   d5764:	2003e650 	.word	0x2003e650
   d5768:	000d7420 	.word	0x000d7420

000d576c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d576c:	4770      	bx	lr

000d576e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d576e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5770:	4606      	mov	r6, r0
   d5772:	4615      	mov	r5, r2
   d5774:	460c      	mov	r4, r1
   d5776:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5778:	42bc      	cmp	r4, r7
   d577a:	d006      	beq.n	d578a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d577c:	6833      	ldr	r3, [r6, #0]
   d577e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5782:	689b      	ldr	r3, [r3, #8]
   d5784:	4630      	mov	r0, r6
   d5786:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5788:	e7f6      	b.n	d5778 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d578a:	4628      	mov	r0, r5
   d578c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d578e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d578e:	7c00      	ldrb	r0, [r0, #16]
   d5790:	2200      	movs	r2, #0
   d5792:	f7ff baab 	b.w	d4cec <hal_i2c_write>

000d5796 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5796:	7c00      	ldrb	r0, [r0, #16]
   d5798:	2100      	movs	r1, #0
   d579a:	f7ff baaf 	b.w	d4cfc <hal_i2c_available>

000d579e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d579e:	7c00      	ldrb	r0, [r0, #16]
   d57a0:	2100      	movs	r1, #0
   d57a2:	f7ff bab3 	b.w	d4d0c <hal_i2c_read>

000d57a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d57a6:	7c00      	ldrb	r0, [r0, #16]
   d57a8:	2100      	movs	r1, #0
   d57aa:	f7ff bab7 	b.w	d4d1c <hal_i2c_peek>

000d57ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d57ae:	7c00      	ldrb	r0, [r0, #16]
   d57b0:	2100      	movs	r1, #0
   d57b2:	f7ff babb 	b.w	d4d2c <hal_i2c_flush>

000d57b6 <_ZN7TwoWireD0Ev>:
   d57b6:	b510      	push	{r4, lr}
   d57b8:	2114      	movs	r1, #20
   d57ba:	4604      	mov	r4, r0
   d57bc:	f000 fd95 	bl	d62ea <_ZdlPvj>
   d57c0:	4620      	mov	r0, r4
   d57c2:	bd10      	pop	{r4, pc}

000d57c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d57c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57ca:	4604      	mov	r4, r0
   d57cc:	4608      	mov	r0, r1
   d57ce:	2100      	movs	r1, #0
   d57d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d57d4:	4b03      	ldr	r3, [pc, #12]	; (d57e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d57d6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d57d8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d57da:	4611      	mov	r1, r2
   d57dc:	f7ff fab6 	bl	d4d4c <hal_i2c_init>
}
   d57e0:	4620      	mov	r0, r4
   d57e2:	bd10      	pop	{r4, pc}
   d57e4:	000d745c 	.word	0x000d745c

000d57e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d57e8:	2300      	movs	r3, #0
   d57ea:	7c00      	ldrb	r0, [r0, #16]
   d57ec:	461a      	mov	r2, r3
   d57ee:	4619      	mov	r1, r3
   d57f0:	f7ff ba64 	b.w	d4cbc <hal_i2c_begin>

000d57f4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d57f4:	7c00      	ldrb	r0, [r0, #16]
   d57f6:	2200      	movs	r2, #0
   d57f8:	f7ff ba68 	b.w	d4ccc <hal_i2c_begin_transmission>

000d57fc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d57fc:	b2c9      	uxtb	r1, r1
   d57fe:	f7ff bff9 	b.w	d57f4 <_ZN7TwoWire17beginTransmissionEh>

000d5802 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5802:	7c00      	ldrb	r0, [r0, #16]
   d5804:	2200      	movs	r2, #0
   d5806:	f7ff ba69 	b.w	d4cdc <hal_i2c_end_transmission>

000d580a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d580a:	2101      	movs	r1, #1
   d580c:	f7ff bff9 	b.w	d5802 <_ZN7TwoWire15endTransmissionEh>

000d5810 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5810:	f7ff ba4c 	b.w	d4cac <HAL_Interrupts_Disable_All>

000d5814 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5814:	f7ff ba42 	b.w	d4c9c <HAL_Interrupts_Enable_All>

000d5818 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5818:	4770      	bx	lr

000d581a <_ZN9IPAddressD0Ev>:
   d581a:	b510      	push	{r4, lr}
   d581c:	2118      	movs	r1, #24
   d581e:	4604      	mov	r4, r0
   d5820:	f000 fd63 	bl	d62ea <_ZdlPvj>
   d5824:	4620      	mov	r0, r4
   d5826:	bd10      	pop	{r4, pc}

000d5828 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5828:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d582a:	7d03      	ldrb	r3, [r0, #20]
   d582c:	2b06      	cmp	r3, #6
{
   d582e:	b08d      	sub	sp, #52	; 0x34
   d5830:	460e      	mov	r6, r1
   d5832:	f100 0704 	add.w	r7, r0, #4
   d5836:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d583a:	d012      	beq.n	d5862 <_ZNK9IPAddress7printToER5Print+0x3a>
   d583c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5840:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5844:	220a      	movs	r2, #10
   d5846:	4630      	mov	r0, r6
   d5848:	f000 f95b 	bl	d5b02 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d584c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d584e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5850:	d019      	beq.n	d5886 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5852:	2c00      	cmp	r4, #0
   d5854:	d0f4      	beq.n	d5840 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5856:	212e      	movs	r1, #46	; 0x2e
   d5858:	4630      	mov	r0, r6
   d585a:	f000 f939 	bl	d5ad0 <_ZN5Print5printEc>
   d585e:	4404      	add	r4, r0
   d5860:	e7ee      	b.n	d5840 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5862:	232f      	movs	r3, #47	; 0x2f
   d5864:	466a      	mov	r2, sp
   d5866:	4639      	mov	r1, r7
   d5868:	200a      	movs	r0, #10
		buf[0] = 0;
   d586a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d586e:	f7ff fa75 	bl	d4d5c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5872:	4668      	mov	r0, sp
   d5874:	f001 fbcd 	bl	d7012 <strlen>
   d5878:	6833      	ldr	r3, [r6, #0]
   d587a:	4602      	mov	r2, r0
   d587c:	68db      	ldr	r3, [r3, #12]
   d587e:	4669      	mov	r1, sp
   d5880:	4630      	mov	r0, r6
   d5882:	4798      	blx	r3
   d5884:	4604      	mov	r4, r0
    }
    return n;
}
   d5886:	4620      	mov	r0, r4
   d5888:	b00d      	add	sp, #52	; 0x34
   d588a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d588c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d588c:	b510      	push	{r4, lr}
   d588e:	4b05      	ldr	r3, [pc, #20]	; (d58a4 <_ZN9IPAddressC1Ev+0x18>)
   d5890:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5892:	2211      	movs	r2, #17
   d5894:	f840 3b04 	str.w	r3, [r0], #4
   d5898:	2100      	movs	r1, #0
   d589a:	f001 fb61 	bl	d6f60 <memset>
}
   d589e:	4620      	mov	r0, r4
   d58a0:	bd10      	pop	{r4, pc}
   d58a2:	bf00      	nop
   d58a4:	000d7484 	.word	0x000d7484

000d58a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d58a8:	4603      	mov	r3, r0
   d58aa:	4a07      	ldr	r2, [pc, #28]	; (d58c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d58ac:	b510      	push	{r4, lr}
   d58ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d58b2:	f101 0210 	add.w	r2, r1, #16
   d58b6:	f851 4b04 	ldr.w	r4, [r1], #4
   d58ba:	f843 4b04 	str.w	r4, [r3], #4
   d58be:	4291      	cmp	r1, r2
   d58c0:	d1f9      	bne.n	d58b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d58c2:	780a      	ldrb	r2, [r1, #0]
   d58c4:	701a      	strb	r2, [r3, #0]
}
   d58c6:	bd10      	pop	{r4, pc}
   d58c8:	000d7484 	.word	0x000d7484

000d58cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d58cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d58ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d58d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d58d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d58da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d58de:	2304      	movs	r3, #4
   d58e0:	6041      	str	r1, [r0, #4]
   d58e2:	7503      	strb	r3, [r0, #20]
}
   d58e4:	bd10      	pop	{r4, pc}
	...

000d58e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d58e8:	b513      	push	{r0, r1, r4, lr}
   d58ea:	4b05      	ldr	r3, [pc, #20]	; (d5900 <_ZN9IPAddressC1EPKh+0x18>)
   d58ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d58ee:	78cb      	ldrb	r3, [r1, #3]
   d58f0:	9300      	str	r3, [sp, #0]
   d58f2:	788b      	ldrb	r3, [r1, #2]
   d58f4:	784a      	ldrb	r2, [r1, #1]
   d58f6:	7809      	ldrb	r1, [r1, #0]
   d58f8:	f7ff ffe8 	bl	d58cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d58fc:	b002      	add	sp, #8
   d58fe:	bd10      	pop	{r4, pc}
   d5900:	000d7484 	.word	0x000d7484

000d5904 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5904:	4b01      	ldr	r3, [pc, #4]	; (d590c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5906:	4a02      	ldr	r2, [pc, #8]	; (d5910 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5908:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d590a:	4770      	bx	lr
   d590c:	2003e658 	.word	0x2003e658
   d5910:	000d7490 	.word	0x000d7490

000d5914 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5914:	2300      	movs	r3, #0
   d5916:	6840      	ldr	r0, [r0, #4]
   d5918:	461a      	mov	r2, r3
   d591a:	f7ff bb1b 	b.w	d4f54 <network_connect>

000d591e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d591e:	6840      	ldr	r0, [r0, #4]
   d5920:	2200      	movs	r2, #0
   d5922:	2102      	movs	r1, #2
   d5924:	f7ff bb26 	b.w	d4f74 <network_disconnect>

000d5928 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5928:	2200      	movs	r2, #0
   d592a:	6840      	ldr	r0, [r0, #4]
   d592c:	4611      	mov	r1, r2
   d592e:	f7ff bb19 	b.w	d4f64 <network_connecting>

000d5932 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5932:	2200      	movs	r2, #0
   d5934:	6840      	ldr	r0, [r0, #4]
   d5936:	4611      	mov	r1, r2
   d5938:	f7ff bb24 	b.w	d4f84 <network_ready>

000d593c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d593c:	2300      	movs	r3, #0
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	461a      	mov	r2, r3
   d5942:	4619      	mov	r1, r3
   d5944:	f7ff bb26 	b.w	d4f94 <network_on>

000d5948 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5948:	2300      	movs	r3, #0
   d594a:	6840      	ldr	r0, [r0, #4]
   d594c:	461a      	mov	r2, r3
   d594e:	4619      	mov	r1, r3
   d5950:	f7ff bb28 	b.w	d4fa4 <network_off>

000d5954 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5954:	6840      	ldr	r0, [r0, #4]
   d5956:	2100      	movs	r1, #0
   d5958:	f7ff bb4c 	b.w	d4ff4 <network_is_on>

000d595c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d595c:	6840      	ldr	r0, [r0, #4]
   d595e:	2100      	movs	r1, #0
   d5960:	f7ff bb50 	b.w	d5004 <network_is_off>

000d5964 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5964:	6840      	ldr	r0, [r0, #4]
   d5966:	2200      	movs	r2, #0
   d5968:	f081 0101 	eor.w	r1, r1, #1
   d596c:	f7ff bb22 	b.w	d4fb4 <network_listen>

000d5970 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5970:	6840      	ldr	r0, [r0, #4]
   d5972:	2200      	movs	r2, #0
   d5974:	f7ff bb2e 	b.w	d4fd4 <network_set_listen_timeout>

000d5978 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5978:	2200      	movs	r2, #0
   d597a:	6840      	ldr	r0, [r0, #4]
   d597c:	4611      	mov	r1, r2
   d597e:	f7ff bb31 	b.w	d4fe4 <network_get_listen_timeout>

000d5982 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5982:	2200      	movs	r2, #0
   d5984:	6840      	ldr	r0, [r0, #4]
   d5986:	4611      	mov	r1, r2
   d5988:	f7ff bb1c 	b.w	d4fc4 <network_listening>

000d598c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d598c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5990:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5992:	b095      	sub	sp, #84	; 0x54
   d5994:	4616      	mov	r6, r2
   d5996:	460d      	mov	r5, r1
   d5998:	4607      	mov	r7, r0
    IPAddress addr;
   d599a:	f7ff ff77 	bl	d588c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d599e:	4621      	mov	r1, r4
   d59a0:	2218      	movs	r2, #24
   d59a2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d59a4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d59a6:	f001 fadb 	bl	d6f60 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d59aa:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d59ac:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d59b0:	4621      	mov	r1, r4
   d59b2:	466b      	mov	r3, sp
   d59b4:	aa0c      	add	r2, sp, #48	; 0x30
   d59b6:	4630      	mov	r0, r6
   d59b8:	f7ff f9e0 	bl	d4d7c <netdb_getaddrinfo>
    if (!r) {
   d59bc:	4604      	mov	r4, r0
   d59be:	2800      	cmp	r0, #0
   d59c0:	d14c      	bne.n	d5a5c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59c2:	4602      	mov	r2, r0
   d59c4:	2101      	movs	r1, #1
   d59c6:	6868      	ldr	r0, [r5, #4]
   d59c8:	f7ff fadc 	bl	d4f84 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59cc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d59ce:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59d0:	4622      	mov	r2, r4
   d59d2:	6868      	ldr	r0, [r5, #4]
   d59d4:	f7ff fad6 	bl	d4f84 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59d8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d59da:	4681      	mov	r9, r0
        bool ok = false;
   d59dc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59de:	2e00      	cmp	r6, #0
   d59e0:	d03c      	beq.n	d5a5c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d59e2:	2900      	cmp	r1, #0
   d59e4:	d13a      	bne.n	d5a5c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d59e6:	6873      	ldr	r3, [r6, #4]
   d59e8:	2b02      	cmp	r3, #2
   d59ea:	d003      	beq.n	d59f4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d59ec:	2b0a      	cmp	r3, #10
   d59ee:	d011      	beq.n	d5a14 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59f0:	69f6      	ldr	r6, [r6, #28]
   d59f2:	e7f4      	b.n	d59de <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d59f4:	f1b8 0f00 	cmp.w	r8, #0
   d59f8:	d00a      	beq.n	d5a10 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d59fa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d59fc:	a806      	add	r0, sp, #24
   d59fe:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5a00:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d5a02:	f7ff ff71 	bl	d58e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a08:	1d3c      	adds	r4, r7, #4
   d5a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a0c:	682b      	ldr	r3, [r5, #0]
   d5a0e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d5a10:	4641      	mov	r1, r8
   d5a12:	e7ed      	b.n	d59f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5a14:	f1b9 0f00 	cmp.w	r9, #0
   d5a18:	d101      	bne.n	d5a1e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5a1a:	4649      	mov	r1, r9
   d5a1c:	e7e8      	b.n	d59f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5a1e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5a20:	2210      	movs	r2, #16
   d5a22:	a801      	add	r0, sp, #4
   d5a24:	f001 fa9c 	bl	d6f60 <memset>
                    a.v = 6;
   d5a28:	2306      	movs	r3, #6
   d5a2a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5a2e:	ad01      	add	r5, sp, #4
   d5a30:	f104 0308 	add.w	r3, r4, #8
   d5a34:	3418      	adds	r4, #24
   d5a36:	6818      	ldr	r0, [r3, #0]
   d5a38:	6859      	ldr	r1, [r3, #4]
   d5a3a:	462a      	mov	r2, r5
   d5a3c:	c203      	stmia	r2!, {r0, r1}
   d5a3e:	3308      	adds	r3, #8
   d5a40:	42a3      	cmp	r3, r4
   d5a42:	4615      	mov	r5, r2
   d5a44:	d1f7      	bne.n	d5a36 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d5a46:	a901      	add	r1, sp, #4
   d5a48:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5a4a:	ad07      	add	r5, sp, #28
   d5a4c:	f7ff ff2c 	bl	d58a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a52:	1d3c      	adds	r4, r7, #4
   d5a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a56:	682b      	ldr	r3, [r5, #0]
   d5a58:	7023      	strb	r3, [r4, #0]
   d5a5a:	e7de      	b.n	d5a1a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5a5c:	9800      	ldr	r0, [sp, #0]
   d5a5e:	f7ff f985 	bl	d4d6c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5a62:	4638      	mov	r0, r7
   d5a64:	b015      	add	sp, #84	; 0x54
   d5a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5a6c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5a6c:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5a6e:	4a03      	ldr	r2, [pc, #12]	; (d5a7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5a70:	601a      	str	r2, [r3, #0]
   d5a72:	2200      	movs	r2, #0
   d5a74:	605a      	str	r2, [r3, #4]

} // spark
   d5a76:	4770      	bx	lr
   d5a78:	2003e65c 	.word	0x2003e65c
   d5a7c:	000d749c 	.word	0x000d749c

000d5a80 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a82:	4606      	mov	r6, r0
   d5a84:	460d      	mov	r5, r1
  size_t n = 0;
   d5a86:	188f      	adds	r7, r1, r2
   d5a88:	2400      	movs	r4, #0
  while (size--) {
   d5a8a:	42bd      	cmp	r5, r7
   d5a8c:	d00c      	beq.n	d5aa8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5a8e:	6833      	ldr	r3, [r6, #0]
   d5a90:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5a94:	689b      	ldr	r3, [r3, #8]
   d5a96:	4630      	mov	r0, r6
   d5a98:	4798      	blx	r3
     if (chunk>=0)
   d5a9a:	1e03      	subs	r3, r0, #0
   d5a9c:	db01      	blt.n	d5aa2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5a9e:	441c      	add	r4, r3
  while (size--) {
   d5aa0:	e7f3      	b.n	d5a8a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5aa2:	2c00      	cmp	r4, #0
   d5aa4:	bf08      	it	eq
   d5aa6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5aac <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5aac:	b513      	push	{r0, r1, r4, lr}
   d5aae:	4604      	mov	r4, r0
    }
   d5ab0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5ab2:	b159      	cbz	r1, d5acc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5ab4:	9101      	str	r1, [sp, #4]
   d5ab6:	f001 faac 	bl	d7012 <strlen>
   d5aba:	6823      	ldr	r3, [r4, #0]
   d5abc:	9901      	ldr	r1, [sp, #4]
   d5abe:	68db      	ldr	r3, [r3, #12]
   d5ac0:	4602      	mov	r2, r0
   d5ac2:	4620      	mov	r0, r4
    }
   d5ac4:	b002      	add	sp, #8
   d5ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5aca:	4718      	bx	r3
    }
   d5acc:	b002      	add	sp, #8
   d5ace:	bd10      	pop	{r4, pc}

000d5ad0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5ad0:	6803      	ldr	r3, [r0, #0]
   d5ad2:	689b      	ldr	r3, [r3, #8]
   d5ad4:	4718      	bx	r3

000d5ad6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5ad6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5ad8:	210d      	movs	r1, #13
{
   d5ada:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5adc:	f7ff fff8 	bl	d5ad0 <_ZN5Print5printEc>
  n += print('\n');
   d5ae0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5ae2:	4604      	mov	r4, r0
  n += print('\n');
   d5ae4:	4628      	mov	r0, r5
   d5ae6:	f7ff fff3 	bl	d5ad0 <_ZN5Print5printEc>
  return n;
}
   d5aea:	4420      	add	r0, r4
   d5aec:	bd38      	pop	{r3, r4, r5, pc}

000d5aee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5aee:	b538      	push	{r3, r4, r5, lr}
   d5af0:	4605      	mov	r5, r0
  return write(str);
   d5af2:	f7ff ffdb 	bl	d5aac <_ZN5Print5writeEPKc>
   d5af6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5af8:	4628      	mov	r0, r5
   d5afa:	f7ff ffec 	bl	d5ad6 <_ZN5Print7printlnEv>
  return n;
}
   d5afe:	4420      	add	r0, r4
   d5b00:	bd38      	pop	{r3, r4, r5, pc}

000d5b02 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5b02:	b530      	push	{r4, r5, lr}
   d5b04:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5b06:	2300      	movs	r3, #0
   d5b08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5b0c:	2a01      	cmp	r2, #1
   d5b0e:	bf98      	it	ls
   d5b10:	220a      	movls	r2, #10
   d5b12:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5b14:	460d      	mov	r5, r1
   d5b16:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5b1a:	fb01 5312 	mls	r3, r1, r2, r5
   d5b1e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5b22:	2b09      	cmp	r3, #9
   d5b24:	bf94      	ite	ls
   d5b26:	3330      	addls	r3, #48	; 0x30
   d5b28:	3337      	addhi	r3, #55	; 0x37
   d5b2a:	b2db      	uxtb	r3, r3
  } while(n);
   d5b2c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5b2e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5b32:	d9ef      	bls.n	d5b14 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5b34:	4621      	mov	r1, r4
   d5b36:	f7ff ffb9 	bl	d5aac <_ZN5Print5writeEPKc>
}
   d5b3a:	b00b      	add	sp, #44	; 0x2c
   d5b3c:	bd30      	pop	{r4, r5, pc}

000d5b3e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5b3e:	b510      	push	{r4, lr}
   d5b40:	4604      	mov	r4, r0
   d5b42:	f7ff fab6 	bl	d50b2 <_ZNSt14_Function_baseD1Ev>
   d5b46:	4620      	mov	r0, r4
   d5b48:	bd10      	pop	{r4, pc}
	...

000d5b4c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5b4c:	4803      	ldr	r0, [pc, #12]	; (d5b5c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5b4e:	4a04      	ldr	r2, [pc, #16]	; (d5b60 <_GLOBAL__sub_I_RGB+0x14>)
   d5b50:	4904      	ldr	r1, [pc, #16]	; (d5b64 <_GLOBAL__sub_I_RGB+0x18>)
   d5b52:	2300      	movs	r3, #0
   d5b54:	6083      	str	r3, [r0, #8]
   d5b56:	f000 bbc3 	b.w	d62e0 <__aeabi_atexit>
   d5b5a:	bf00      	nop
   d5b5c:	2003e664 	.word	0x2003e664
   d5b60:	2003e5ec 	.word	0x2003e5ec
   d5b64:	000d5b3f 	.word	0x000d5b3f

000d5b68 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5b68:	b510      	push	{r4, lr}
   d5b6a:	4604      	mov	r4, r0
   d5b6c:	4608      	mov	r0, r1
{
    _spi = spi;
   d5b6e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5b70:	f7ff f90c 	bl	d4d8c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5b74:	2300      	movs	r3, #0
   d5b76:	6063      	str	r3, [r4, #4]
}
   d5b78:	4620      	mov	r0, r4
   d5b7a:	bd10      	pop	{r4, pc}

000d5b7c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b80:	ec57 6b10 	vmov	r6, r7, d0
   d5b84:	4680      	mov	r8, r0
   d5b86:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d5b88:	ee10 0a10 	vmov	r0, s0
   d5b8c:	2200      	movs	r2, #0
   d5b8e:	2300      	movs	r3, #0
   d5b90:	4639      	mov	r1, r7
   d5b92:	f000 ffdf 	bl	d6b54 <__aeabi_dcmplt>
   d5b96:	b128      	cbz	r0, d5ba4 <_Z4dtoadhPc+0x28>
        val = -val;
   d5b98:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d5b9c:	461f      	mov	r7, r3
        *sout++ = '-';
   d5b9e:	232d      	movs	r3, #45	; 0x2d
   d5ba0:	f804 3b01 	strb.w	r3, [r4], #1
   d5ba4:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5ba6:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5baa:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d5bac:	b2d9      	uxtb	r1, r3
   d5bae:	4588      	cmp	r8, r1
   d5bb0:	d903      	bls.n	d5bba <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d5bb2:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d5bb6:	3301      	adds	r3, #1
   d5bb8:	e7f8      	b.n	d5bac <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d5bba:	4648      	mov	r0, r9
   d5bbc:	f000 fcee 	bl	d659c <__aeabi_i2d>
   d5bc0:	4632      	mov	r2, r6
   d5bc2:	463b      	mov	r3, r7
   d5bc4:	f000 fd54 	bl	d6670 <__aeabi_dmul>
   d5bc8:	4606      	mov	r6, r0
   d5bca:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d5bcc:	f001 f822 	bl	d6c14 <__aeabi_d2ulz>
   d5bd0:	4605      	mov	r5, r0
   d5bd2:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5bd4:	f000 fd16 	bl	d6604 <__aeabi_ul2d>
   d5bd8:	4602      	mov	r2, r0
   d5bda:	460b      	mov	r3, r1
   d5bdc:	4630      	mov	r0, r6
   d5bde:	4639      	mov	r1, r7
   d5be0:	f000 fb8e 	bl	d6300 <__aeabi_dsub>
   d5be4:	4b13      	ldr	r3, [pc, #76]	; (d5c34 <_Z4dtoadhPc+0xb8>)
   d5be6:	2200      	movs	r2, #0
   d5be8:	f000 ffc8 	bl	d6b7c <__aeabi_dcmpge>
   d5bec:	b110      	cbz	r0, d5bf4 <_Z4dtoadhPc+0x78>
        fixed++;
   d5bee:	3501      	adds	r5, #1
   d5bf0:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5bf4:	464a      	mov	r2, r9
   d5bf6:	4628      	mov	r0, r5
   d5bf8:	17d3      	asrs	r3, r2, #31
   d5bfa:	4651      	mov	r1, sl
   d5bfc:	f000 fff2 	bl	d6be4 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5c00:	2301      	movs	r3, #1
   d5c02:	4615      	mov	r5, r2
   d5c04:	4621      	mov	r1, r4
   d5c06:	220a      	movs	r2, #10
   d5c08:	f000 f9ef 	bl	d5fea <ultoa>
    if (prec) {
   d5c0c:	f1b8 0f00 	cmp.w	r8, #0
   d5c10:	d00d      	beq.n	d5c2e <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d5c12:	4620      	mov	r0, r4
   d5c14:	f001 f9fd 	bl	d7012 <strlen>
        *sout++ = '.';
   d5c18:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d5c1a:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d5c1c:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d5c1e:	220a      	movs	r2, #10
   d5c20:	4643      	mov	r3, r8
   d5c22:	4628      	mov	r0, r5
   d5c24:	3101      	adds	r1, #1
    }
}
   d5c26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d5c2a:	f000 b9de 	b.w	d5fea <ultoa>
}
   d5c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5c32:	bf00      	nop
   d5c34:	3fe00000 	.word	0x3fe00000

000d5c38 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5c38:	b510      	push	{r4, lr}
   d5c3a:	4604      	mov	r4, r0
{
	free(buffer);
   d5c3c:	6800      	ldr	r0, [r0, #0]
   d5c3e:	f7ff f9f1 	bl	d5024 <free>
}
   d5c42:	4620      	mov	r0, r4
   d5c44:	bd10      	pop	{r4, pc}

000d5c46 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5c46:	b510      	push	{r4, lr}
   d5c48:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5c4a:	6800      	ldr	r0, [r0, #0]
   d5c4c:	b108      	cbz	r0, d5c52 <_ZN6String10invalidateEv+0xc>
   d5c4e:	f7ff f9e9 	bl	d5024 <free>
	buffer = NULL;
   d5c52:	2300      	movs	r3, #0
	capacity = len = 0;
   d5c54:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5c58:	6023      	str	r3, [r4, #0]
}
   d5c5a:	bd10      	pop	{r4, pc}

000d5c5c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5c5c:	b538      	push	{r3, r4, r5, lr}
   d5c5e:	4604      	mov	r4, r0
   d5c60:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5c62:	6800      	ldr	r0, [r0, #0]
   d5c64:	3101      	adds	r1, #1
   d5c66:	f7ff f9e5 	bl	d5034 <realloc>
	if (newbuffer) {
   d5c6a:	b110      	cbz	r0, d5c72 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5c6c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5c70:	2001      	movs	r0, #1
	}
	return 0;
}
   d5c72:	bd38      	pop	{r3, r4, r5, pc}

000d5c74 <_ZN6String7reserveEj>:
{
   d5c74:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5c76:	6803      	ldr	r3, [r0, #0]
{
   d5c78:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5c7a:	b123      	cbz	r3, d5c86 <_ZN6String7reserveEj+0x12>
   d5c7c:	6843      	ldr	r3, [r0, #4]
   d5c7e:	428b      	cmp	r3, r1
   d5c80:	d301      	bcc.n	d5c86 <_ZN6String7reserveEj+0x12>
   d5c82:	2001      	movs	r0, #1
}
   d5c84:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5c86:	4620      	mov	r0, r4
   d5c88:	f7ff ffe8 	bl	d5c5c <_ZN6String12changeBufferEj>
   d5c8c:	2800      	cmp	r0, #0
   d5c8e:	d0f9      	beq.n	d5c84 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5c90:	68a3      	ldr	r3, [r4, #8]
   d5c92:	2b00      	cmp	r3, #0
   d5c94:	d1f5      	bne.n	d5c82 <_ZN6String7reserveEj+0xe>
   d5c96:	6822      	ldr	r2, [r4, #0]
   d5c98:	7013      	strb	r3, [r2, #0]
   d5c9a:	e7f2      	b.n	d5c82 <_ZN6String7reserveEj+0xe>

000d5c9c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5c9e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5ca0:	4611      	mov	r1, r2
   d5ca2:	9201      	str	r2, [sp, #4]
{
   d5ca4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5ca6:	f7ff ffe5 	bl	d5c74 <_ZN6String7reserveEj>
   d5caa:	9a01      	ldr	r2, [sp, #4]
   d5cac:	b928      	cbnz	r0, d5cba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5cae:	4620      	mov	r0, r4
   d5cb0:	f7ff ffc9 	bl	d5c46 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	b003      	add	sp, #12
   d5cb8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5cba:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5cbc:	4629      	mov	r1, r5
   d5cbe:	6820      	ldr	r0, [r4, #0]
   d5cc0:	f001 f940 	bl	d6f44 <memcpy>
	buffer[len] = 0;
   d5cc4:	6822      	ldr	r2, [r4, #0]
   d5cc6:	68a3      	ldr	r3, [r4, #8]
   d5cc8:	2100      	movs	r1, #0
   d5cca:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5ccc:	e7f2      	b.n	d5cb4 <_ZN6String4copyEPKcj+0x18>

000d5cce <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5cce:	b513      	push	{r0, r1, r4, lr}
   d5cd0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5cd2:	b159      	cbz	r1, d5cec <_ZN6StringaSEPKc+0x1e>
   d5cd4:	4608      	mov	r0, r1
   d5cd6:	9101      	str	r1, [sp, #4]
   d5cd8:	f001 f99b 	bl	d7012 <strlen>
   d5cdc:	9901      	ldr	r1, [sp, #4]
   d5cde:	4602      	mov	r2, r0
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	f7ff ffdb 	bl	d5c9c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5ce6:	4620      	mov	r0, r4
   d5ce8:	b002      	add	sp, #8
   d5cea:	bd10      	pop	{r4, pc}
	else invalidate();
   d5cec:	f7ff ffab 	bl	d5c46 <_ZN6String10invalidateEv>
   d5cf0:	e7f9      	b.n	d5ce6 <_ZN6StringaSEPKc+0x18>

000d5cf2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d5cf2:	b510      	push	{r4, lr}
   d5cf4:	4604      	mov	r4, r0
   d5cf6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5cf8:	2300      	movs	r3, #0
	capacity = 0;
   d5cfa:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5cfe:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5d00:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d5d02:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d5d04:	a901      	add	r1, sp, #4
   d5d06:	f000 f99b 	bl	d6040 <itoa>
	*this = buf;
   d5d0a:	a901      	add	r1, sp, #4
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	f7ff ffde 	bl	d5cce <_ZN6StringaSEPKc>
}
   d5d12:	4620      	mov	r0, r4
   d5d14:	b00a      	add	sp, #40	; 0x28
   d5d16:	bd10      	pop	{r4, pc}

000d5d18 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d5d18:	b530      	push	{r4, r5, lr}
   d5d1a:	4604      	mov	r4, r0
	buffer = NULL;
   d5d1c:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d5d1e:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d5d20:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5d24:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5d26:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d5d28:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d5d2c:	b2cd      	uxtb	r5, r1
   d5d2e:	f000 fc47 	bl	d65c0 <__aeabi_f2d>
   d5d32:	ec41 0b10 	vmov	d0, r0, r1
   d5d36:	a901      	add	r1, sp, #4
   d5d38:	4628      	mov	r0, r5
   d5d3a:	f7ff ff1f 	bl	d5b7c <_Z4dtoadhPc>
        *this = buf;
   d5d3e:	a901      	add	r1, sp, #4
   d5d40:	4620      	mov	r0, r4
   d5d42:	f7ff ffc4 	bl	d5cce <_ZN6StringaSEPKc>
}
   d5d46:	4620      	mov	r0, r4
   d5d48:	b00b      	add	sp, #44	; 0x2c
   d5d4a:	bd30      	pop	{r4, r5, pc}

000d5d4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5d4c:	b510      	push	{r4, lr}
   d5d4e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5d50:	6800      	ldr	r0, [r0, #0]
   d5d52:	b118      	cbz	r0, d5d5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5d54:	f7ff f966 	bl	d5024 <free>
            wakeupSource_ = nullptr;
   d5d58:	2300      	movs	r3, #0
   d5d5a:	6023      	str	r3, [r4, #0]
        }
    }
   d5d5c:	bd10      	pop	{r4, pc}

000d5d5e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5d5e:	b510      	push	{r4, lr}
   d5d60:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5d62:	f7ff fff3 	bl	d5d4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5d66:	4620      	mov	r0, r4
   d5d68:	bd10      	pop	{r4, pc}
	...

000d5d6c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5d6c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5d6e:	4b09      	ldr	r3, [pc, #36]	; (d5d94 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5d70:	4c09      	ldr	r4, [pc, #36]	; (d5d98 <_GLOBAL__sub_I_System+0x2c>)
   d5d72:	2202      	movs	r2, #2
   d5d74:	2000      	movs	r0, #0
   d5d76:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5d78:	4b08      	ldr	r3, [pc, #32]	; (d5d9c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5d7a:	6020      	str	r0, [r4, #0]
   d5d7c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5d7e:	71a0      	strb	r0, [r4, #6]
   d5d80:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5d82:	f7ff f893 	bl	d4eac <set_system_mode>
SystemClass System;
   d5d86:	4620      	mov	r0, r4
   d5d88:	4a05      	ldr	r2, [pc, #20]	; (d5da0 <_GLOBAL__sub_I_System+0x34>)
   d5d8a:	4906      	ldr	r1, [pc, #24]	; (d5da4 <_GLOBAL__sub_I_System+0x38>)
   d5d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5d90:	f000 baa6 	b.w	d62e0 <__aeabi_atexit>
   d5d94:	2003e680 	.word	0x2003e680
   d5d98:	2003e674 	.word	0x2003e674
   d5d9c:	ffff0000 	.word	0xffff0000
   d5da0:	2003e5ec 	.word	0x2003e5ec
   d5da4:	000d5d5f 	.word	0x000d5d5f

000d5da8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5da8:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5daa:	681a      	ldr	r2, [r3, #0]
   d5dac:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5dae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5db0:	4770      	bx	lr
   d5db2:	bf00      	nop
   d5db4:	2003e584 	.word	0x2003e584
   d5db8:	2003e684 	.word	0x2003e684

000d5dbc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5dbc:	4770      	bx	lr

000d5dbe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5dbe:	7441      	strb	r1, [r0, #17]
}
   d5dc0:	4770      	bx	lr

000d5dc2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5dc2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5dc4:	7c00      	ldrb	r0, [r0, #16]
   d5dc6:	f7ff f829 	bl	d4e1c <hal_usart_available_data_for_write>
}
   d5dca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5dce:	bd08      	pop	{r3, pc}

000d5dd0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5dd0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5dd2:	7c00      	ldrb	r0, [r0, #16]
   d5dd4:	f7fe fffa 	bl	d4dcc <hal_usart_available>
}
   d5dd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ddc:	bd08      	pop	{r3, pc}

000d5dde <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5dde:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5de0:	7c00      	ldrb	r0, [r0, #16]
   d5de2:	f7ff f803 	bl	d4dec <hal_usart_peek>
}
   d5de6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5dea:	bd08      	pop	{r3, pc}

000d5dec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5dec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5dee:	7c00      	ldrb	r0, [r0, #16]
   d5df0:	f7fe fff4 	bl	d4ddc <hal_usart_read>
}
   d5df4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5df8:	bd08      	pop	{r3, pc}

000d5dfa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5dfa:	7c00      	ldrb	r0, [r0, #16]
   d5dfc:	f7fe bffe 	b.w	d4dfc <hal_usart_flush>

000d5e00 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e02:	7c45      	ldrb	r5, [r0, #17]
{
   d5e04:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e06:	b12d      	cbz	r5, d5e14 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5e08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5e0a:	b003      	add	sp, #12
   d5e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5e10:	f7fe bfd4 	b.w	d4dbc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e14:	7c00      	ldrb	r0, [r0, #16]
   d5e16:	9101      	str	r1, [sp, #4]
   d5e18:	f7ff f800 	bl	d4e1c <hal_usart_available_data_for_write>
   d5e1c:	2800      	cmp	r0, #0
   d5e1e:	9901      	ldr	r1, [sp, #4]
   d5e20:	dcf2      	bgt.n	d5e08 <_ZN11USARTSerial5writeEh+0x8>
}
   d5e22:	4628      	mov	r0, r5
   d5e24:	b003      	add	sp, #12
   d5e26:	bd30      	pop	{r4, r5, pc}

000d5e28 <_ZN11USARTSerialD0Ev>:
   d5e28:	b510      	push	{r4, lr}
   d5e2a:	2114      	movs	r1, #20
   d5e2c:	4604      	mov	r4, r0
   d5e2e:	f000 fa5c 	bl	d62ea <_ZdlPvj>
   d5e32:	4620      	mov	r0, r4
   d5e34:	bd10      	pop	{r4, pc}
	...

000d5e38 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5e38:	b510      	push	{r4, lr}
   d5e3a:	f04f 0c00 	mov.w	ip, #0
   d5e3e:	4604      	mov	r4, r0
   d5e40:	4608      	mov	r0, r1
   d5e42:	4611      	mov	r1, r2
   d5e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5e48:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5e4c:	4a04      	ldr	r2, [pc, #16]	; (d5e60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5e4e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5e50:	2201      	movs	r2, #1
  _serial = serial;
   d5e52:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5e54:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5e56:	461a      	mov	r2, r3
   d5e58:	f7fe ffa8 	bl	d4dac <hal_usart_init>
}
   d5e5c:	4620      	mov	r0, r4
   d5e5e:	bd10      	pop	{r4, pc}
   d5e60:	000d74f4 	.word	0x000d74f4

000d5e64 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5e64:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5e66:	4c0e      	ldr	r4, [pc, #56]	; (d5ea0 <_Z22__fetch_global_Serial1v+0x3c>)
   d5e68:	7821      	ldrb	r1, [r4, #0]
   d5e6a:	f3bf 8f5b 	dmb	ish
   d5e6e:	f011 0101 	ands.w	r1, r1, #1
   d5e72:	d112      	bne.n	d5e9a <_Z22__fetch_global_Serial1v+0x36>
   d5e74:	4620      	mov	r0, r4
   d5e76:	9101      	str	r1, [sp, #4]
   d5e78:	f7fe f911 	bl	d409e <__cxa_guard_acquire>
   d5e7c:	9901      	ldr	r1, [sp, #4]
   d5e7e:	b160      	cbz	r0, d5e9a <_Z22__fetch_global_Serial1v+0x36>
   d5e80:	4a08      	ldr	r2, [pc, #32]	; (d5ea4 <_Z22__fetch_global_Serial1v+0x40>)
   d5e82:	4b09      	ldr	r3, [pc, #36]	; (d5ea8 <_Z22__fetch_global_Serial1v+0x44>)
   d5e84:	4809      	ldr	r0, [pc, #36]	; (d5eac <_Z22__fetch_global_Serial1v+0x48>)
   d5e86:	f7ff ffd7 	bl	d5e38 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	f7fe f90c 	bl	d40a8 <__cxa_guard_release>
   d5e90:	4a07      	ldr	r2, [pc, #28]	; (d5eb0 <_Z22__fetch_global_Serial1v+0x4c>)
   d5e92:	4908      	ldr	r1, [pc, #32]	; (d5eb4 <_Z22__fetch_global_Serial1v+0x50>)
   d5e94:	4805      	ldr	r0, [pc, #20]	; (d5eac <_Z22__fetch_global_Serial1v+0x48>)
   d5e96:	f000 fa23 	bl	d62e0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5e9a:	4804      	ldr	r0, [pc, #16]	; (d5eac <_Z22__fetch_global_Serial1v+0x48>)
   d5e9c:	b002      	add	sp, #8
   d5e9e:	bd10      	pop	{r4, pc}
   d5ea0:	2003e688 	.word	0x2003e688
   d5ea4:	2003e68c 	.word	0x2003e68c
   d5ea8:	2003e710 	.word	0x2003e710
   d5eac:	2003e794 	.word	0x2003e794
   d5eb0:	2003e5ec 	.word	0x2003e5ec
   d5eb4:	000d5dbd 	.word	0x000d5dbd

000d5eb8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5eb8:	7441      	strb	r1, [r0, #17]
}
   d5eba:	4770      	bx	lr

000d5ebc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ebc:	4770      	bx	lr

000d5ebe <_ZN9USBSerial4readEv>:
{
   d5ebe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5ec0:	2100      	movs	r1, #0
   d5ec2:	7c00      	ldrb	r0, [r0, #16]
   d5ec4:	f7fe ffd2 	bl	d4e6c <HAL_USB_USART_Receive_Data>
}
   d5ec8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5ecc:	bd08      	pop	{r3, pc}

000d5ece <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5ece:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5ed0:	2101      	movs	r1, #1
   d5ed2:	7c00      	ldrb	r0, [r0, #16]
   d5ed4:	f7fe ffca 	bl	d4e6c <HAL_USB_USART_Receive_Data>
}
   d5ed8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5edc:	bd08      	pop	{r3, pc}

000d5ede <_ZN9USBSerial17availableForWriteEv>:
{
   d5ede:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5ee0:	7c00      	ldrb	r0, [r0, #16]
   d5ee2:	f7fe ffbb 	bl	d4e5c <HAL_USB_USART_Available_Data_For_Write>
}
   d5ee6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5eea:	bd08      	pop	{r3, pc}

000d5eec <_ZN9USBSerial9availableEv>:
{
   d5eec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5eee:	7c00      	ldrb	r0, [r0, #16]
   d5ef0:	f7fe ffac 	bl	d4e4c <HAL_USB_USART_Available_Data>
}
   d5ef4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ef8:	bd08      	pop	{r3, pc}

000d5efa <_ZN9USBSerial5writeEh>:
{
   d5efa:	b513      	push	{r0, r1, r4, lr}
   d5efc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5efe:	7c00      	ldrb	r0, [r0, #16]
{
   d5f00:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f02:	f7fe ffab 	bl	d4e5c <HAL_USB_USART_Available_Data_For_Write>
   d5f06:	2800      	cmp	r0, #0
   d5f08:	9901      	ldr	r1, [sp, #4]
   d5f0a:	dc01      	bgt.n	d5f10 <_ZN9USBSerial5writeEh+0x16>
   d5f0c:	7c60      	ldrb	r0, [r4, #17]
   d5f0e:	b120      	cbz	r0, d5f1a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5f10:	7c20      	ldrb	r0, [r4, #16]
   d5f12:	f7fe ffb3 	bl	d4e7c <HAL_USB_USART_Send_Data>
   d5f16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5f1a:	b002      	add	sp, #8
   d5f1c:	bd10      	pop	{r4, pc}

000d5f1e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5f1e:	7c00      	ldrb	r0, [r0, #16]
   d5f20:	f7fe bfb4 	b.w	d4e8c <HAL_USB_USART_Flush_Data>

000d5f24 <_ZN9USBSerialD0Ev>:
   d5f24:	b510      	push	{r4, lr}
   d5f26:	2114      	movs	r1, #20
   d5f28:	4604      	mov	r4, r0
   d5f2a:	f000 f9de 	bl	d62ea <_ZdlPvj>
   d5f2e:	4620      	mov	r0, r4
   d5f30:	bd10      	pop	{r4, pc}
	...

000d5f34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f34:	b510      	push	{r4, lr}
   d5f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f3a:	4604      	mov	r4, r0
   d5f3c:	4608      	mov	r0, r1
   d5f3e:	2100      	movs	r1, #0
   d5f40:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5f44:	4b04      	ldr	r3, [pc, #16]	; (d5f58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5f46:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5f48:	2301      	movs	r3, #1
  _serial = serial;
   d5f4a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5f4c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5f4e:	4611      	mov	r1, r2
   d5f50:	f7fe ff6c 	bl	d4e2c <HAL_USB_USART_Init>
}
   d5f54:	4620      	mov	r0, r4
   d5f56:	bd10      	pop	{r4, pc}
   d5f58:	000d7524 	.word	0x000d7524

000d5f5c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5f5c:	7c00      	ldrb	r0, [r0, #16]
   d5f5e:	2200      	movs	r2, #0
   d5f60:	f7fe bf6c 	b.w	d4e3c <HAL_USB_USART_Begin>

000d5f64 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f66:	2214      	movs	r2, #20
{
   d5f68:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f6a:	2100      	movs	r1, #0
   d5f6c:	f000 fff8 	bl	d6f60 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f70:	4620      	mov	r0, r4
   d5f72:	bd10      	pop	{r4, pc}

000d5f74 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f74:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f76:	4c10      	ldr	r4, [pc, #64]	; (d5fb8 <_Z16_fetch_usbserialv+0x44>)
{
   d5f78:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f7a:	a803      	add	r0, sp, #12
   d5f7c:	f7ff fff2 	bl	d5f64 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f80:	7821      	ldrb	r1, [r4, #0]
   d5f82:	f3bf 8f5b 	dmb	ish
   d5f86:	f011 0101 	ands.w	r1, r1, #1
   d5f8a:	d111      	bne.n	d5fb0 <_Z16_fetch_usbserialv+0x3c>
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	9101      	str	r1, [sp, #4]
   d5f90:	f7fe f885 	bl	d409e <__cxa_guard_acquire>
   d5f94:	9901      	ldr	r1, [sp, #4]
   d5f96:	b158      	cbz	r0, d5fb0 <_Z16_fetch_usbserialv+0x3c>
   d5f98:	aa03      	add	r2, sp, #12
   d5f9a:	4808      	ldr	r0, [pc, #32]	; (d5fbc <_Z16_fetch_usbserialv+0x48>)
   d5f9c:	f7ff ffca 	bl	d5f34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	f7fe f881 	bl	d40a8 <__cxa_guard_release>
   d5fa6:	4a06      	ldr	r2, [pc, #24]	; (d5fc0 <_Z16_fetch_usbserialv+0x4c>)
   d5fa8:	4906      	ldr	r1, [pc, #24]	; (d5fc4 <_Z16_fetch_usbserialv+0x50>)
   d5faa:	4804      	ldr	r0, [pc, #16]	; (d5fbc <_Z16_fetch_usbserialv+0x48>)
   d5fac:	f000 f998 	bl	d62e0 <__aeabi_atexit>
	return _usbserial;
}
   d5fb0:	4802      	ldr	r0, [pc, #8]	; (d5fbc <_Z16_fetch_usbserialv+0x48>)
   d5fb2:	b008      	add	sp, #32
   d5fb4:	bd10      	pop	{r4, pc}
   d5fb6:	bf00      	nop
   d5fb8:	2003e7a8 	.word	0x2003e7a8
   d5fbc:	2003e7ac 	.word	0x2003e7ac
   d5fc0:	2003e5ec 	.word	0x2003e5ec
   d5fc4:	000d5ebd 	.word	0x000d5ebd

000d5fc8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5fc8:	b510      	push	{r4, lr}
   d5fca:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5fcc:	f001 f821 	bl	d7012 <strlen>
   d5fd0:	3801      	subs	r0, #1
   d5fd2:	1823      	adds	r3, r4, r0
   d5fd4:	4620      	mov	r0, r4
	while(i<j){
   d5fd6:	4283      	cmp	r3, r0
   d5fd8:	d906      	bls.n	d5fe8 <_Z11str_reversePc+0x20>
		c = *i;
   d5fda:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5fdc:	7819      	ldrb	r1, [r3, #0]
   d5fde:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5fe2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d5fe6:	e7f6      	b.n	d5fd6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5fe8:	bd10      	pop	{r4, pc}

000d5fea <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5fea:	b570      	push	{r4, r5, r6, lr}
   d5fec:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5fee:	1e91      	subs	r1, r2, #2
   d5ff0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5ff2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5ff4:	d822      	bhi.n	d603c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5ff6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5ff8:	b16d      	cbz	r5, d6016 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5ffa:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5ffe:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6002:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6004:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6006:	bf94      	ite	ls
   d6008:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d600a:	3157      	addhi	r1, #87	; 0x57
   d600c:	b2c9      	uxtb	r1, r1
   d600e:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6012:	4635      	mov	r5, r6
	while(a){
   d6014:	e7f0      	b.n	d5ff8 <ultoa+0xe>
   d6016:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6018:	4423      	add	r3, r4
            *ptr++ = '0';
   d601a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d601c:	4293      	cmp	r3, r2
   d601e:	d902      	bls.n	d6026 <ultoa+0x3c>
            *ptr++ = '0';
   d6020:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6024:	e7fa      	b.n	d601c <ultoa+0x32>
   d6026:	1a1a      	subs	r2, r3, r0
   d6028:	4283      	cmp	r3, r0
   d602a:	bf38      	it	cc
   d602c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d602e:	2300      	movs	r3, #0
   d6030:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6032:	4620      	mov	r0, r4
   d6034:	f7ff ffc8 	bl	d5fc8 <_Z11str_reversePc>
	return buffer;
   d6038:	4620      	mov	r0, r4
}
   d603a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d603c:	2000      	movs	r0, #0
   d603e:	e7fc      	b.n	d603a <ultoa+0x50>

000d6040 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6040:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6042:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6044:	460c      	mov	r4, r1
   d6046:	4615      	mov	r5, r2
	if(a<0){
   d6048:	da0e      	bge.n	d6068 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d604a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d604e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6052:	bf14      	ite	ne
   d6054:	4258      	negne	r0, r3
   d6056:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6058:	2301      	movs	r3, #1
		*buffer = '-';
   d605a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d605c:	462a      	mov	r2, r5
   d605e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6060:	f7ff ffc3 	bl	d5fea <ultoa>
	}
	return buffer;
}
   d6064:	4620      	mov	r0, r4
   d6066:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6068:	2301      	movs	r3, #1
   d606a:	e7f9      	b.n	d6060 <itoa+0x20>

000d606c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d606c:	4b01      	ldr	r3, [pc, #4]	; (d6074 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d606e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6070:	4770      	bx	lr
   d6072:	bf00      	nop
   d6074:	2003e588 	.word	0x2003e588

000d6078 <serialEventRun>:
{
   d6078:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d607a:	4b0b      	ldr	r3, [pc, #44]	; (d60a8 <serialEventRun+0x30>)
   d607c:	b143      	cbz	r3, d6090 <serialEventRun+0x18>
   d607e:	f7ff ff79 	bl	d5f74 <_Z16_fetch_usbserialv>
   d6082:	6803      	ldr	r3, [r0, #0]
   d6084:	691b      	ldr	r3, [r3, #16]
   d6086:	4798      	blx	r3
   d6088:	2800      	cmp	r0, #0
   d608a:	dd01      	ble.n	d6090 <serialEventRun+0x18>
        serialEvent();
   d608c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6090:	4b06      	ldr	r3, [pc, #24]	; (d60ac <serialEventRun+0x34>)
   d6092:	b143      	cbz	r3, d60a6 <serialEventRun+0x2e>
   d6094:	f7ff fee6 	bl	d5e64 <_Z22__fetch_global_Serial1v>
   d6098:	6803      	ldr	r3, [r0, #0]
   d609a:	691b      	ldr	r3, [r3, #16]
   d609c:	4798      	blx	r3
   d609e:	2800      	cmp	r0, #0
   d60a0:	dd01      	ble.n	d60a6 <serialEventRun+0x2e>
        serialEvent1();
   d60a2:	f3af 8000 	nop.w
}
   d60a6:	bd08      	pop	{r3, pc}
	...

000d60b0 <_post_loop>:
{
   d60b0:	b508      	push	{r3, lr}
	serialEventRun();
   d60b2:	f7ff ffe1 	bl	d6078 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d60b6:	f7fe fdc9 	bl	d4c4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d60ba:	4b01      	ldr	r3, [pc, #4]	; (d60c0 <_post_loop+0x10>)
   d60bc:	6018      	str	r0, [r3, #0]
}
   d60be:	bd08      	pop	{r3, pc}
   d60c0:	2003e7d4 	.word	0x2003e7d4

000d60c4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d60c4:	4802      	ldr	r0, [pc, #8]	; (d60d0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d60c6:	4a03      	ldr	r2, [pc, #12]	; (d60d4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d60c8:	4903      	ldr	r1, [pc, #12]	; (d60d8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d60ca:	1a12      	subs	r2, r2, r0
   d60cc:	f000 bf3a 	b.w	d6f44 <memcpy>
   d60d0:	2003f400 	.word	0x2003f400
   d60d4:	2003f404 	.word	0x2003f404
   d60d8:	000d7588 	.word	0x000d7588

000d60dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d60dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d60de:	2300      	movs	r3, #0
   d60e0:	9300      	str	r3, [sp, #0]
   d60e2:	461a      	mov	r2, r3
   d60e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d60e8:	f7fe ff0a 	bl	d4f00 <system_ctrl_set_result>
}
   d60ec:	b003      	add	sp, #12
   d60ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d60f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d60f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d60f6:	8843      	ldrh	r3, [r0, #2]
   d60f8:	2b0a      	cmp	r3, #10
   d60fa:	d008      	beq.n	d610e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d60fc:	2b50      	cmp	r3, #80	; 0x50
   d60fe:	d10b      	bne.n	d6118 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6100:	4b09      	ldr	r3, [pc, #36]	; (d6128 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6102:	681b      	ldr	r3, [r3, #0]
   d6104:	b14b      	cbz	r3, d611a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6106:	b003      	add	sp, #12
   d6108:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d610c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d610e:	f7ff ffe5 	bl	d60dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6112:	b003      	add	sp, #12
   d6114:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6118:	2300      	movs	r3, #0
   d611a:	9300      	str	r3, [sp, #0]
   d611c:	461a      	mov	r2, r3
   d611e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6122:	f7fe feed 	bl	d4f00 <system_ctrl_set_result>
}
   d6126:	e7f4      	b.n	d6112 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6128:	2003e7c4 	.word	0x2003e7c4

000d612c <module_user_init_hook>:
{
   d612c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d612e:	4c12      	ldr	r4, [pc, #72]	; (d6178 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6130:	4812      	ldr	r0, [pc, #72]	; (d617c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6132:	4d13      	ldr	r5, [pc, #76]	; (d6180 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6134:	2100      	movs	r1, #0
   d6136:	f7fe ff95 	bl	d5064 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d613a:	6823      	ldr	r3, [r4, #0]
   d613c:	42ab      	cmp	r3, r5
   d613e:	4b11      	ldr	r3, [pc, #68]	; (d6184 <module_user_init_hook+0x58>)
   d6140:	bf0c      	ite	eq
   d6142:	2201      	moveq	r2, #1
   d6144:	2200      	movne	r2, #0
   d6146:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6148:	d002      	beq.n	d6150 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d614a:	f7ff ffbb 	bl	d60c4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d614e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6150:	f7fe fd6c 	bl	d4c2c <HAL_RNG_GetRandomNumber>
   d6154:	4604      	mov	r4, r0
    srand(seed);
   d6156:	f000 ff1b 	bl	d6f90 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d615a:	4b0b      	ldr	r3, [pc, #44]	; (d6188 <module_user_init_hook+0x5c>)
   d615c:	b113      	cbz	r3, d6164 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d615e:	4620      	mov	r0, r4
   d6160:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6164:	2100      	movs	r1, #0
   d6166:	4808      	ldr	r0, [pc, #32]	; (d6188 <module_user_init_hook+0x5c>)
   d6168:	f7fe feec 	bl	d4f44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d616c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6170:	4806      	ldr	r0, [pc, #24]	; (d618c <module_user_init_hook+0x60>)
   d6172:	2100      	movs	r1, #0
   d6174:	f7fe beba 	b.w	d4eec <system_ctrl_set_app_request_handler>
   d6178:	2003f400 	.word	0x2003f400
   d617c:	000d606d 	.word	0x000d606d
   d6180:	9a271c1e 	.word	0x9a271c1e
   d6184:	2003e7c0 	.word	0x2003e7c0
   d6188:	00000000 	.word	0x00000000
   d618c:	000d60f5 	.word	0x000d60f5

000d6190 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6190:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6192:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6194:	d902      	bls.n	d619c <pinAvailable+0xc>
    return false;
   d6196:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6198:	b002      	add	sp, #8
   d619a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d619c:	f1a0 030b 	sub.w	r3, r0, #11
   d61a0:	2b02      	cmp	r3, #2
   d61a2:	d81a      	bhi.n	d61da <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d61a4:	4c17      	ldr	r4, [pc, #92]	; (d6204 <pinAvailable+0x74>)
   d61a6:	7821      	ldrb	r1, [r4, #0]
   d61a8:	f3bf 8f5b 	dmb	ish
   d61ac:	f011 0101 	ands.w	r1, r1, #1
   d61b0:	d10b      	bne.n	d61ca <pinAvailable+0x3a>
   d61b2:	4620      	mov	r0, r4
   d61b4:	9101      	str	r1, [sp, #4]
   d61b6:	f7fd ff72 	bl	d409e <__cxa_guard_acquire>
   d61ba:	9901      	ldr	r1, [sp, #4]
   d61bc:	b128      	cbz	r0, d61ca <pinAvailable+0x3a>
   d61be:	4812      	ldr	r0, [pc, #72]	; (d6208 <pinAvailable+0x78>)
   d61c0:	f7ff fcd2 	bl	d5b68 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d61c4:	4620      	mov	r0, r4
   d61c6:	f7fd ff6f 	bl	d40a8 <__cxa_guard_release>
   d61ca:	4b0f      	ldr	r3, [pc, #60]	; (d6208 <pinAvailable+0x78>)
   d61cc:	7818      	ldrb	r0, [r3, #0]
   d61ce:	f7fe fde5 	bl	d4d9c <hal_spi_is_enabled>
   d61d2:	2800      	cmp	r0, #0
   d61d4:	d1df      	bne.n	d6196 <pinAvailable+0x6>
  return true; // 'pin' is available
   d61d6:	2001      	movs	r0, #1
   d61d8:	e7de      	b.n	d6198 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d61da:	2801      	cmp	r0, #1
   d61dc:	d809      	bhi.n	d61f2 <pinAvailable+0x62>
   d61de:	f000 f857 	bl	d6290 <_Z19__fetch_global_Wirev>
   d61e2:	2100      	movs	r1, #0
   d61e4:	7c00      	ldrb	r0, [r0, #16]
   d61e6:	f7fe fda9 	bl	d4d3c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d61ea:	f080 0001 	eor.w	r0, r0, #1
   d61ee:	b2c0      	uxtb	r0, r0
   d61f0:	e7d2      	b.n	d6198 <pinAvailable+0x8>
   d61f2:	3809      	subs	r0, #9
   d61f4:	2801      	cmp	r0, #1
   d61f6:	d8ee      	bhi.n	d61d6 <pinAvailable+0x46>
   d61f8:	f7ff fe34 	bl	d5e64 <_Z22__fetch_global_Serial1v>
   d61fc:	7c00      	ldrb	r0, [r0, #16]
   d61fe:	f7fe fe05 	bl	d4e0c <hal_usart_is_enabled>
   d6202:	e7f2      	b.n	d61ea <pinAvailable+0x5a>
   d6204:	2003e7c8 	.word	0x2003e7c8
   d6208:	2003e7cc 	.word	0x2003e7cc

000d620c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d620c:	2823      	cmp	r0, #35	; 0x23
{
   d620e:	b538      	push	{r3, r4, r5, lr}
   d6210:	4604      	mov	r4, r0
   d6212:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6214:	d80a      	bhi.n	d622c <pinMode+0x20>
   d6216:	29ff      	cmp	r1, #255	; 0xff
   d6218:	d008      	beq.n	d622c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d621a:	f7ff ffb9 	bl	d6190 <pinAvailable>
   d621e:	b128      	cbz	r0, d622c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6220:	4629      	mov	r1, r5
   d6222:	4620      	mov	r0, r4
}
   d6224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6228:	f7fe bd20 	b.w	d4c6c <HAL_Pin_Mode>
}
   d622c:	bd38      	pop	{r3, r4, r5, pc}

000d622e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d622e:	b538      	push	{r3, r4, r5, lr}
   d6230:	4604      	mov	r4, r0
   d6232:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6234:	f7fe fd22 	bl	d4c7c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6238:	28ff      	cmp	r0, #255	; 0xff
   d623a:	d010      	beq.n	d625e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d623c:	2806      	cmp	r0, #6
   d623e:	d804      	bhi.n	d624a <digitalWrite+0x1c>
   d6240:	234d      	movs	r3, #77	; 0x4d
   d6242:	fa23 f000 	lsr.w	r0, r3, r0
   d6246:	07c3      	lsls	r3, r0, #31
   d6248:	d409      	bmi.n	d625e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d624a:	4620      	mov	r0, r4
   d624c:	f7ff ffa0 	bl	d6190 <pinAvailable>
   d6250:	b128      	cbz	r0, d625e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6252:	4629      	mov	r1, r5
   d6254:	4620      	mov	r0, r4
}
   d6256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d625a:	f7fe bd17 	b.w	d4c8c <HAL_GPIO_Write>
}
   d625e:	bd38      	pop	{r3, r4, r5, pc}

000d6260 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6260:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6262:	2300      	movs	r3, #0
   d6264:	2520      	movs	r5, #32
   d6266:	8043      	strh	r3, [r0, #2]
   d6268:	2314      	movs	r3, #20
{
   d626a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d626c:	8003      	strh	r3, [r0, #0]
   d626e:	6085      	str	r5, [r0, #8]
   d6270:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6272:	4906      	ldr	r1, [pc, #24]	; (d628c <_Z17acquireWireBufferv+0x2c>)
   d6274:	4628      	mov	r0, r5
   d6276:	f000 f83a 	bl	d62ee <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d627a:	4904      	ldr	r1, [pc, #16]	; (d628c <_Z17acquireWireBufferv+0x2c>)
	};
   d627c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d627e:	4628      	mov	r0, r5
   d6280:	f000 f835 	bl	d62ee <_ZnajRKSt9nothrow_t>
	};
   d6284:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6286:	4620      	mov	r0, r4
   d6288:	bd38      	pop	{r3, r4, r5, pc}
   d628a:	bf00      	nop
   d628c:	000d754c 	.word	0x000d754c

000d6290 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6290:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6292:	4d0f      	ldr	r5, [pc, #60]	; (d62d0 <_Z19__fetch_global_Wirev+0x40>)
   d6294:	7829      	ldrb	r1, [r5, #0]
   d6296:	f3bf 8f5b 	dmb	ish
   d629a:	f011 0401 	ands.w	r4, r1, #1
{
   d629e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d62a0:	d113      	bne.n	d62ca <_Z19__fetch_global_Wirev+0x3a>
   d62a2:	4628      	mov	r0, r5
   d62a4:	f7fd fefb 	bl	d409e <__cxa_guard_acquire>
   d62a8:	b178      	cbz	r0, d62ca <_Z19__fetch_global_Wirev+0x3a>
   d62aa:	a801      	add	r0, sp, #4
   d62ac:	f7ff ffd8 	bl	d6260 <_Z17acquireWireBufferv>
   d62b0:	aa01      	add	r2, sp, #4
   d62b2:	4621      	mov	r1, r4
   d62b4:	4807      	ldr	r0, [pc, #28]	; (d62d4 <_Z19__fetch_global_Wirev+0x44>)
   d62b6:	f7ff fa85 	bl	d57c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d62ba:	4628      	mov	r0, r5
   d62bc:	f7fd fef4 	bl	d40a8 <__cxa_guard_release>
   d62c0:	4a05      	ldr	r2, [pc, #20]	; (d62d8 <_Z19__fetch_global_Wirev+0x48>)
   d62c2:	4906      	ldr	r1, [pc, #24]	; (d62dc <_Z19__fetch_global_Wirev+0x4c>)
   d62c4:	4803      	ldr	r0, [pc, #12]	; (d62d4 <_Z19__fetch_global_Wirev+0x44>)
   d62c6:	f000 f80b 	bl	d62e0 <__aeabi_atexit>
	return wire;
}
   d62ca:	4802      	ldr	r0, [pc, #8]	; (d62d4 <_Z19__fetch_global_Wirev+0x44>)
   d62cc:	b007      	add	sp, #28
   d62ce:	bd30      	pop	{r4, r5, pc}
   d62d0:	2003e7d8 	.word	0x2003e7d8
   d62d4:	2003e7dc 	.word	0x2003e7dc
   d62d8:	2003e5ec 	.word	0x2003e5ec
   d62dc:	000d576d 	.word	0x000d576d

000d62e0 <__aeabi_atexit>:
   d62e0:	460b      	mov	r3, r1
   d62e2:	4601      	mov	r1, r0
   d62e4:	4618      	mov	r0, r3
   d62e6:	f000 be1f 	b.w	d6f28 <__cxa_atexit>

000d62ea <_ZdlPvj>:
   d62ea:	f7fd bed6 	b.w	d409a <_ZdlPv>

000d62ee <_ZnajRKSt9nothrow_t>:
   d62ee:	f7fd bed2 	b.w	d4096 <_Znaj>

000d62f2 <_ZSt25__throw_bad_function_callv>:
   d62f2:	b508      	push	{r3, lr}
   d62f4:	f7fe fea6 	bl	d5044 <abort>

000d62f8 <__aeabi_drsub>:
   d62f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d62fc:	e002      	b.n	d6304 <__adddf3>
   d62fe:	bf00      	nop

000d6300 <__aeabi_dsub>:
   d6300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6304 <__adddf3>:
   d6304:	b530      	push	{r4, r5, lr}
   d6306:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d630a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d630e:	ea94 0f05 	teq	r4, r5
   d6312:	bf08      	it	eq
   d6314:	ea90 0f02 	teqeq	r0, r2
   d6318:	bf1f      	itttt	ne
   d631a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d631e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6322:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6326:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d632a:	f000 80e2 	beq.w	d64f2 <__adddf3+0x1ee>
   d632e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6332:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6336:	bfb8      	it	lt
   d6338:	426d      	neglt	r5, r5
   d633a:	dd0c      	ble.n	d6356 <__adddf3+0x52>
   d633c:	442c      	add	r4, r5
   d633e:	ea80 0202 	eor.w	r2, r0, r2
   d6342:	ea81 0303 	eor.w	r3, r1, r3
   d6346:	ea82 0000 	eor.w	r0, r2, r0
   d634a:	ea83 0101 	eor.w	r1, r3, r1
   d634e:	ea80 0202 	eor.w	r2, r0, r2
   d6352:	ea81 0303 	eor.w	r3, r1, r3
   d6356:	2d36      	cmp	r5, #54	; 0x36
   d6358:	bf88      	it	hi
   d635a:	bd30      	pophi	{r4, r5, pc}
   d635c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6360:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6364:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6368:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d636c:	d002      	beq.n	d6374 <__adddf3+0x70>
   d636e:	4240      	negs	r0, r0
   d6370:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6374:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6378:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d637c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6380:	d002      	beq.n	d6388 <__adddf3+0x84>
   d6382:	4252      	negs	r2, r2
   d6384:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6388:	ea94 0f05 	teq	r4, r5
   d638c:	f000 80a7 	beq.w	d64de <__adddf3+0x1da>
   d6390:	f1a4 0401 	sub.w	r4, r4, #1
   d6394:	f1d5 0e20 	rsbs	lr, r5, #32
   d6398:	db0d      	blt.n	d63b6 <__adddf3+0xb2>
   d639a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d639e:	fa22 f205 	lsr.w	r2, r2, r5
   d63a2:	1880      	adds	r0, r0, r2
   d63a4:	f141 0100 	adc.w	r1, r1, #0
   d63a8:	fa03 f20e 	lsl.w	r2, r3, lr
   d63ac:	1880      	adds	r0, r0, r2
   d63ae:	fa43 f305 	asr.w	r3, r3, r5
   d63b2:	4159      	adcs	r1, r3
   d63b4:	e00e      	b.n	d63d4 <__adddf3+0xd0>
   d63b6:	f1a5 0520 	sub.w	r5, r5, #32
   d63ba:	f10e 0e20 	add.w	lr, lr, #32
   d63be:	2a01      	cmp	r2, #1
   d63c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d63c4:	bf28      	it	cs
   d63c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d63ca:	fa43 f305 	asr.w	r3, r3, r5
   d63ce:	18c0      	adds	r0, r0, r3
   d63d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d63d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d63d8:	d507      	bpl.n	d63ea <__adddf3+0xe6>
   d63da:	f04f 0e00 	mov.w	lr, #0
   d63de:	f1dc 0c00 	rsbs	ip, ip, #0
   d63e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d63e6:	eb6e 0101 	sbc.w	r1, lr, r1
   d63ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d63ee:	d31b      	bcc.n	d6428 <__adddf3+0x124>
   d63f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d63f4:	d30c      	bcc.n	d6410 <__adddf3+0x10c>
   d63f6:	0849      	lsrs	r1, r1, #1
   d63f8:	ea5f 0030 	movs.w	r0, r0, rrx
   d63fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6400:	f104 0401 	add.w	r4, r4, #1
   d6404:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6408:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d640c:	f080 809a 	bcs.w	d6544 <__adddf3+0x240>
   d6410:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6414:	bf08      	it	eq
   d6416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d641a:	f150 0000 	adcs.w	r0, r0, #0
   d641e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6422:	ea41 0105 	orr.w	r1, r1, r5
   d6426:	bd30      	pop	{r4, r5, pc}
   d6428:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d642c:	4140      	adcs	r0, r0
   d642e:	eb41 0101 	adc.w	r1, r1, r1
   d6432:	3c01      	subs	r4, #1
   d6434:	bf28      	it	cs
   d6436:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d643a:	d2e9      	bcs.n	d6410 <__adddf3+0x10c>
   d643c:	f091 0f00 	teq	r1, #0
   d6440:	bf04      	itt	eq
   d6442:	4601      	moveq	r1, r0
   d6444:	2000      	moveq	r0, #0
   d6446:	fab1 f381 	clz	r3, r1
   d644a:	bf08      	it	eq
   d644c:	3320      	addeq	r3, #32
   d644e:	f1a3 030b 	sub.w	r3, r3, #11
   d6452:	f1b3 0220 	subs.w	r2, r3, #32
   d6456:	da0c      	bge.n	d6472 <__adddf3+0x16e>
   d6458:	320c      	adds	r2, #12
   d645a:	dd08      	ble.n	d646e <__adddf3+0x16a>
   d645c:	f102 0c14 	add.w	ip, r2, #20
   d6460:	f1c2 020c 	rsb	r2, r2, #12
   d6464:	fa01 f00c 	lsl.w	r0, r1, ip
   d6468:	fa21 f102 	lsr.w	r1, r1, r2
   d646c:	e00c      	b.n	d6488 <__adddf3+0x184>
   d646e:	f102 0214 	add.w	r2, r2, #20
   d6472:	bfd8      	it	le
   d6474:	f1c2 0c20 	rsble	ip, r2, #32
   d6478:	fa01 f102 	lsl.w	r1, r1, r2
   d647c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6480:	bfdc      	itt	le
   d6482:	ea41 010c 	orrle.w	r1, r1, ip
   d6486:	4090      	lslle	r0, r2
   d6488:	1ae4      	subs	r4, r4, r3
   d648a:	bfa2      	ittt	ge
   d648c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6490:	4329      	orrge	r1, r5
   d6492:	bd30      	popge	{r4, r5, pc}
   d6494:	ea6f 0404 	mvn.w	r4, r4
   d6498:	3c1f      	subs	r4, #31
   d649a:	da1c      	bge.n	d64d6 <__adddf3+0x1d2>
   d649c:	340c      	adds	r4, #12
   d649e:	dc0e      	bgt.n	d64be <__adddf3+0x1ba>
   d64a0:	f104 0414 	add.w	r4, r4, #20
   d64a4:	f1c4 0220 	rsb	r2, r4, #32
   d64a8:	fa20 f004 	lsr.w	r0, r0, r4
   d64ac:	fa01 f302 	lsl.w	r3, r1, r2
   d64b0:	ea40 0003 	orr.w	r0, r0, r3
   d64b4:	fa21 f304 	lsr.w	r3, r1, r4
   d64b8:	ea45 0103 	orr.w	r1, r5, r3
   d64bc:	bd30      	pop	{r4, r5, pc}
   d64be:	f1c4 040c 	rsb	r4, r4, #12
   d64c2:	f1c4 0220 	rsb	r2, r4, #32
   d64c6:	fa20 f002 	lsr.w	r0, r0, r2
   d64ca:	fa01 f304 	lsl.w	r3, r1, r4
   d64ce:	ea40 0003 	orr.w	r0, r0, r3
   d64d2:	4629      	mov	r1, r5
   d64d4:	bd30      	pop	{r4, r5, pc}
   d64d6:	fa21 f004 	lsr.w	r0, r1, r4
   d64da:	4629      	mov	r1, r5
   d64dc:	bd30      	pop	{r4, r5, pc}
   d64de:	f094 0f00 	teq	r4, #0
   d64e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d64e6:	bf06      	itte	eq
   d64e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d64ec:	3401      	addeq	r4, #1
   d64ee:	3d01      	subne	r5, #1
   d64f0:	e74e      	b.n	d6390 <__adddf3+0x8c>
   d64f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d64f6:	bf18      	it	ne
   d64f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d64fc:	d029      	beq.n	d6552 <__adddf3+0x24e>
   d64fe:	ea94 0f05 	teq	r4, r5
   d6502:	bf08      	it	eq
   d6504:	ea90 0f02 	teqeq	r0, r2
   d6508:	d005      	beq.n	d6516 <__adddf3+0x212>
   d650a:	ea54 0c00 	orrs.w	ip, r4, r0
   d650e:	bf04      	itt	eq
   d6510:	4619      	moveq	r1, r3
   d6512:	4610      	moveq	r0, r2
   d6514:	bd30      	pop	{r4, r5, pc}
   d6516:	ea91 0f03 	teq	r1, r3
   d651a:	bf1e      	ittt	ne
   d651c:	2100      	movne	r1, #0
   d651e:	2000      	movne	r0, #0
   d6520:	bd30      	popne	{r4, r5, pc}
   d6522:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6526:	d105      	bne.n	d6534 <__adddf3+0x230>
   d6528:	0040      	lsls	r0, r0, #1
   d652a:	4149      	adcs	r1, r1
   d652c:	bf28      	it	cs
   d652e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6532:	bd30      	pop	{r4, r5, pc}
   d6534:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6538:	bf3c      	itt	cc
   d653a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d653e:	bd30      	popcc	{r4, r5, pc}
   d6540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6544:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6548:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d654c:	f04f 0000 	mov.w	r0, #0
   d6550:	bd30      	pop	{r4, r5, pc}
   d6552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6556:	bf1a      	itte	ne
   d6558:	4619      	movne	r1, r3
   d655a:	4610      	movne	r0, r2
   d655c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6560:	bf1c      	itt	ne
   d6562:	460b      	movne	r3, r1
   d6564:	4602      	movne	r2, r0
   d6566:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d656a:	bf06      	itte	eq
   d656c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6570:	ea91 0f03 	teqeq	r1, r3
   d6574:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6578:	bd30      	pop	{r4, r5, pc}
   d657a:	bf00      	nop

000d657c <__aeabi_ui2d>:
   d657c:	f090 0f00 	teq	r0, #0
   d6580:	bf04      	itt	eq
   d6582:	2100      	moveq	r1, #0
   d6584:	4770      	bxeq	lr
   d6586:	b530      	push	{r4, r5, lr}
   d6588:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d658c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6590:	f04f 0500 	mov.w	r5, #0
   d6594:	f04f 0100 	mov.w	r1, #0
   d6598:	e750      	b.n	d643c <__adddf3+0x138>
   d659a:	bf00      	nop

000d659c <__aeabi_i2d>:
   d659c:	f090 0f00 	teq	r0, #0
   d65a0:	bf04      	itt	eq
   d65a2:	2100      	moveq	r1, #0
   d65a4:	4770      	bxeq	lr
   d65a6:	b530      	push	{r4, r5, lr}
   d65a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d65ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d65b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d65b4:	bf48      	it	mi
   d65b6:	4240      	negmi	r0, r0
   d65b8:	f04f 0100 	mov.w	r1, #0
   d65bc:	e73e      	b.n	d643c <__adddf3+0x138>
   d65be:	bf00      	nop

000d65c0 <__aeabi_f2d>:
   d65c0:	0042      	lsls	r2, r0, #1
   d65c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d65c6:	ea4f 0131 	mov.w	r1, r1, rrx
   d65ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d65ce:	bf1f      	itttt	ne
   d65d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d65d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d65d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d65dc:	4770      	bxne	lr
   d65de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d65e2:	bf08      	it	eq
   d65e4:	4770      	bxeq	lr
   d65e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d65ea:	bf04      	itt	eq
   d65ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d65f0:	4770      	bxeq	lr
   d65f2:	b530      	push	{r4, r5, lr}
   d65f4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d65f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d65fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6600:	e71c      	b.n	d643c <__adddf3+0x138>
   d6602:	bf00      	nop

000d6604 <__aeabi_ul2d>:
   d6604:	ea50 0201 	orrs.w	r2, r0, r1
   d6608:	bf08      	it	eq
   d660a:	4770      	bxeq	lr
   d660c:	b530      	push	{r4, r5, lr}
   d660e:	f04f 0500 	mov.w	r5, #0
   d6612:	e00a      	b.n	d662a <__aeabi_l2d+0x16>

000d6614 <__aeabi_l2d>:
   d6614:	ea50 0201 	orrs.w	r2, r0, r1
   d6618:	bf08      	it	eq
   d661a:	4770      	bxeq	lr
   d661c:	b530      	push	{r4, r5, lr}
   d661e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6622:	d502      	bpl.n	d662a <__aeabi_l2d+0x16>
   d6624:	4240      	negs	r0, r0
   d6626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d662a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d662e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6636:	f43f aed8 	beq.w	d63ea <__adddf3+0xe6>
   d663a:	f04f 0203 	mov.w	r2, #3
   d663e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6642:	bf18      	it	ne
   d6644:	3203      	addne	r2, #3
   d6646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d664a:	bf18      	it	ne
   d664c:	3203      	addne	r2, #3
   d664e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6652:	f1c2 0320 	rsb	r3, r2, #32
   d6656:	fa00 fc03 	lsl.w	ip, r0, r3
   d665a:	fa20 f002 	lsr.w	r0, r0, r2
   d665e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6662:	ea40 000e 	orr.w	r0, r0, lr
   d6666:	fa21 f102 	lsr.w	r1, r1, r2
   d666a:	4414      	add	r4, r2
   d666c:	e6bd      	b.n	d63ea <__adddf3+0xe6>
   d666e:	bf00      	nop

000d6670 <__aeabi_dmul>:
   d6670:	b570      	push	{r4, r5, r6, lr}
   d6672:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6676:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d667a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d667e:	bf1d      	ittte	ne
   d6680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6684:	ea94 0f0c 	teqne	r4, ip
   d6688:	ea95 0f0c 	teqne	r5, ip
   d668c:	f000 f8de 	bleq	d684c <__aeabi_dmul+0x1dc>
   d6690:	442c      	add	r4, r5
   d6692:	ea81 0603 	eor.w	r6, r1, r3
   d6696:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d669a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d669e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d66a2:	bf18      	it	ne
   d66a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d66a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d66b0:	d038      	beq.n	d6724 <__aeabi_dmul+0xb4>
   d66b2:	fba0 ce02 	umull	ip, lr, r0, r2
   d66b6:	f04f 0500 	mov.w	r5, #0
   d66ba:	fbe1 e502 	umlal	lr, r5, r1, r2
   d66be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d66c2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d66c6:	f04f 0600 	mov.w	r6, #0
   d66ca:	fbe1 5603 	umlal	r5, r6, r1, r3
   d66ce:	f09c 0f00 	teq	ip, #0
   d66d2:	bf18      	it	ne
   d66d4:	f04e 0e01 	orrne.w	lr, lr, #1
   d66d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d66dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d66e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d66e4:	d204      	bcs.n	d66f0 <__aeabi_dmul+0x80>
   d66e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d66ea:	416d      	adcs	r5, r5
   d66ec:	eb46 0606 	adc.w	r6, r6, r6
   d66f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d66f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d66f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d66fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6700:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6704:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6708:	bf88      	it	hi
   d670a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d670e:	d81e      	bhi.n	d674e <__aeabi_dmul+0xde>
   d6710:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6714:	bf08      	it	eq
   d6716:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d671a:	f150 0000 	adcs.w	r0, r0, #0
   d671e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6722:	bd70      	pop	{r4, r5, r6, pc}
   d6724:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6728:	ea46 0101 	orr.w	r1, r6, r1
   d672c:	ea40 0002 	orr.w	r0, r0, r2
   d6730:	ea81 0103 	eor.w	r1, r1, r3
   d6734:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6738:	bfc2      	ittt	gt
   d673a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d673e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6742:	bd70      	popgt	{r4, r5, r6, pc}
   d6744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6748:	f04f 0e00 	mov.w	lr, #0
   d674c:	3c01      	subs	r4, #1
   d674e:	f300 80ab 	bgt.w	d68a8 <__aeabi_dmul+0x238>
   d6752:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6756:	bfde      	ittt	le
   d6758:	2000      	movle	r0, #0
   d675a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d675e:	bd70      	pople	{r4, r5, r6, pc}
   d6760:	f1c4 0400 	rsb	r4, r4, #0
   d6764:	3c20      	subs	r4, #32
   d6766:	da35      	bge.n	d67d4 <__aeabi_dmul+0x164>
   d6768:	340c      	adds	r4, #12
   d676a:	dc1b      	bgt.n	d67a4 <__aeabi_dmul+0x134>
   d676c:	f104 0414 	add.w	r4, r4, #20
   d6770:	f1c4 0520 	rsb	r5, r4, #32
   d6774:	fa00 f305 	lsl.w	r3, r0, r5
   d6778:	fa20 f004 	lsr.w	r0, r0, r4
   d677c:	fa01 f205 	lsl.w	r2, r1, r5
   d6780:	ea40 0002 	orr.w	r0, r0, r2
   d6784:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d678c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6790:	fa21 f604 	lsr.w	r6, r1, r4
   d6794:	eb42 0106 	adc.w	r1, r2, r6
   d6798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d679c:	bf08      	it	eq
   d679e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67a2:	bd70      	pop	{r4, r5, r6, pc}
   d67a4:	f1c4 040c 	rsb	r4, r4, #12
   d67a8:	f1c4 0520 	rsb	r5, r4, #32
   d67ac:	fa00 f304 	lsl.w	r3, r0, r4
   d67b0:	fa20 f005 	lsr.w	r0, r0, r5
   d67b4:	fa01 f204 	lsl.w	r2, r1, r4
   d67b8:	ea40 0002 	orr.w	r0, r0, r2
   d67bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d67c4:	f141 0100 	adc.w	r1, r1, #0
   d67c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d67cc:	bf08      	it	eq
   d67ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67d2:	bd70      	pop	{r4, r5, r6, pc}
   d67d4:	f1c4 0520 	rsb	r5, r4, #32
   d67d8:	fa00 f205 	lsl.w	r2, r0, r5
   d67dc:	ea4e 0e02 	orr.w	lr, lr, r2
   d67e0:	fa20 f304 	lsr.w	r3, r0, r4
   d67e4:	fa01 f205 	lsl.w	r2, r1, r5
   d67e8:	ea43 0302 	orr.w	r3, r3, r2
   d67ec:	fa21 f004 	lsr.w	r0, r1, r4
   d67f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67f4:	fa21 f204 	lsr.w	r2, r1, r4
   d67f8:	ea20 0002 	bic.w	r0, r0, r2
   d67fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6804:	bf08      	it	eq
   d6806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d680a:	bd70      	pop	{r4, r5, r6, pc}
   d680c:	f094 0f00 	teq	r4, #0
   d6810:	d10f      	bne.n	d6832 <__aeabi_dmul+0x1c2>
   d6812:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6816:	0040      	lsls	r0, r0, #1
   d6818:	eb41 0101 	adc.w	r1, r1, r1
   d681c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6820:	bf08      	it	eq
   d6822:	3c01      	subeq	r4, #1
   d6824:	d0f7      	beq.n	d6816 <__aeabi_dmul+0x1a6>
   d6826:	ea41 0106 	orr.w	r1, r1, r6
   d682a:	f095 0f00 	teq	r5, #0
   d682e:	bf18      	it	ne
   d6830:	4770      	bxne	lr
   d6832:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6836:	0052      	lsls	r2, r2, #1
   d6838:	eb43 0303 	adc.w	r3, r3, r3
   d683c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6840:	bf08      	it	eq
   d6842:	3d01      	subeq	r5, #1
   d6844:	d0f7      	beq.n	d6836 <__aeabi_dmul+0x1c6>
   d6846:	ea43 0306 	orr.w	r3, r3, r6
   d684a:	4770      	bx	lr
   d684c:	ea94 0f0c 	teq	r4, ip
   d6850:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6854:	bf18      	it	ne
   d6856:	ea95 0f0c 	teqne	r5, ip
   d685a:	d00c      	beq.n	d6876 <__aeabi_dmul+0x206>
   d685c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6860:	bf18      	it	ne
   d6862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6866:	d1d1      	bne.n	d680c <__aeabi_dmul+0x19c>
   d6868:	ea81 0103 	eor.w	r1, r1, r3
   d686c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6870:	f04f 0000 	mov.w	r0, #0
   d6874:	bd70      	pop	{r4, r5, r6, pc}
   d6876:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d687a:	bf06      	itte	eq
   d687c:	4610      	moveq	r0, r2
   d687e:	4619      	moveq	r1, r3
   d6880:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6884:	d019      	beq.n	d68ba <__aeabi_dmul+0x24a>
   d6886:	ea94 0f0c 	teq	r4, ip
   d688a:	d102      	bne.n	d6892 <__aeabi_dmul+0x222>
   d688c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6890:	d113      	bne.n	d68ba <__aeabi_dmul+0x24a>
   d6892:	ea95 0f0c 	teq	r5, ip
   d6896:	d105      	bne.n	d68a4 <__aeabi_dmul+0x234>
   d6898:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d689c:	bf1c      	itt	ne
   d689e:	4610      	movne	r0, r2
   d68a0:	4619      	movne	r1, r3
   d68a2:	d10a      	bne.n	d68ba <__aeabi_dmul+0x24a>
   d68a4:	ea81 0103 	eor.w	r1, r1, r3
   d68a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d68ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d68b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d68b4:	f04f 0000 	mov.w	r0, #0
   d68b8:	bd70      	pop	{r4, r5, r6, pc}
   d68ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d68be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d68c2:	bd70      	pop	{r4, r5, r6, pc}

000d68c4 <__aeabi_ddiv>:
   d68c4:	b570      	push	{r4, r5, r6, lr}
   d68c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68d2:	bf1d      	ittte	ne
   d68d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d68d8:	ea94 0f0c 	teqne	r4, ip
   d68dc:	ea95 0f0c 	teqne	r5, ip
   d68e0:	f000 f8a7 	bleq	d6a32 <__aeabi_ddiv+0x16e>
   d68e4:	eba4 0405 	sub.w	r4, r4, r5
   d68e8:	ea81 0e03 	eor.w	lr, r1, r3
   d68ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d68f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d68f4:	f000 8088 	beq.w	d6a08 <__aeabi_ddiv+0x144>
   d68f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d68fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6900:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6908:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d690c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6910:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6914:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6918:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d691c:	429d      	cmp	r5, r3
   d691e:	bf08      	it	eq
   d6920:	4296      	cmpeq	r6, r2
   d6922:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6926:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d692a:	d202      	bcs.n	d6932 <__aeabi_ddiv+0x6e>
   d692c:	085b      	lsrs	r3, r3, #1
   d692e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6932:	1ab6      	subs	r6, r6, r2
   d6934:	eb65 0503 	sbc.w	r5, r5, r3
   d6938:	085b      	lsrs	r3, r3, #1
   d693a:	ea4f 0232 	mov.w	r2, r2, rrx
   d693e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6942:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6946:	ebb6 0e02 	subs.w	lr, r6, r2
   d694a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d694e:	bf22      	ittt	cs
   d6950:	1ab6      	subcs	r6, r6, r2
   d6952:	4675      	movcs	r5, lr
   d6954:	ea40 000c 	orrcs.w	r0, r0, ip
   d6958:	085b      	lsrs	r3, r3, #1
   d695a:	ea4f 0232 	mov.w	r2, r2, rrx
   d695e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6962:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6966:	bf22      	ittt	cs
   d6968:	1ab6      	subcs	r6, r6, r2
   d696a:	4675      	movcs	r5, lr
   d696c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6970:	085b      	lsrs	r3, r3, #1
   d6972:	ea4f 0232 	mov.w	r2, r2, rrx
   d6976:	ebb6 0e02 	subs.w	lr, r6, r2
   d697a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d697e:	bf22      	ittt	cs
   d6980:	1ab6      	subcs	r6, r6, r2
   d6982:	4675      	movcs	r5, lr
   d6984:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6988:	085b      	lsrs	r3, r3, #1
   d698a:	ea4f 0232 	mov.w	r2, r2, rrx
   d698e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6992:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6996:	bf22      	ittt	cs
   d6998:	1ab6      	subcs	r6, r6, r2
   d699a:	4675      	movcs	r5, lr
   d699c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d69a0:	ea55 0e06 	orrs.w	lr, r5, r6
   d69a4:	d018      	beq.n	d69d8 <__aeabi_ddiv+0x114>
   d69a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d69aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d69ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d69b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d69b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d69ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d69be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d69c2:	d1c0      	bne.n	d6946 <__aeabi_ddiv+0x82>
   d69c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69c8:	d10b      	bne.n	d69e2 <__aeabi_ddiv+0x11e>
   d69ca:	ea41 0100 	orr.w	r1, r1, r0
   d69ce:	f04f 0000 	mov.w	r0, #0
   d69d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d69d6:	e7b6      	b.n	d6946 <__aeabi_ddiv+0x82>
   d69d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69dc:	bf04      	itt	eq
   d69de:	4301      	orreq	r1, r0
   d69e0:	2000      	moveq	r0, #0
   d69e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d69e6:	bf88      	it	hi
   d69e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d69ec:	f63f aeaf 	bhi.w	d674e <__aeabi_dmul+0xde>
   d69f0:	ebb5 0c03 	subs.w	ip, r5, r3
   d69f4:	bf04      	itt	eq
   d69f6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d69fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d69fe:	f150 0000 	adcs.w	r0, r0, #0
   d6a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a06:	bd70      	pop	{r4, r5, r6, pc}
   d6a08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6a0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6a10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6a14:	bfc2      	ittt	gt
   d6a16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6a1e:	bd70      	popgt	{r4, r5, r6, pc}
   d6a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a24:	f04f 0e00 	mov.w	lr, #0
   d6a28:	3c01      	subs	r4, #1
   d6a2a:	e690      	b.n	d674e <__aeabi_dmul+0xde>
   d6a2c:	ea45 0e06 	orr.w	lr, r5, r6
   d6a30:	e68d      	b.n	d674e <__aeabi_dmul+0xde>
   d6a32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a36:	ea94 0f0c 	teq	r4, ip
   d6a3a:	bf08      	it	eq
   d6a3c:	ea95 0f0c 	teqeq	r5, ip
   d6a40:	f43f af3b 	beq.w	d68ba <__aeabi_dmul+0x24a>
   d6a44:	ea94 0f0c 	teq	r4, ip
   d6a48:	d10a      	bne.n	d6a60 <__aeabi_ddiv+0x19c>
   d6a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6a4e:	f47f af34 	bne.w	d68ba <__aeabi_dmul+0x24a>
   d6a52:	ea95 0f0c 	teq	r5, ip
   d6a56:	f47f af25 	bne.w	d68a4 <__aeabi_dmul+0x234>
   d6a5a:	4610      	mov	r0, r2
   d6a5c:	4619      	mov	r1, r3
   d6a5e:	e72c      	b.n	d68ba <__aeabi_dmul+0x24a>
   d6a60:	ea95 0f0c 	teq	r5, ip
   d6a64:	d106      	bne.n	d6a74 <__aeabi_ddiv+0x1b0>
   d6a66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6a6a:	f43f aefd 	beq.w	d6868 <__aeabi_dmul+0x1f8>
   d6a6e:	4610      	mov	r0, r2
   d6a70:	4619      	mov	r1, r3
   d6a72:	e722      	b.n	d68ba <__aeabi_dmul+0x24a>
   d6a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a78:	bf18      	it	ne
   d6a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a7e:	f47f aec5 	bne.w	d680c <__aeabi_dmul+0x19c>
   d6a82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6a86:	f47f af0d 	bne.w	d68a4 <__aeabi_dmul+0x234>
   d6a8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6a8e:	f47f aeeb 	bne.w	d6868 <__aeabi_dmul+0x1f8>
   d6a92:	e712      	b.n	d68ba <__aeabi_dmul+0x24a>

000d6a94 <__gedf2>:
   d6a94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6a98:	e006      	b.n	d6aa8 <__cmpdf2+0x4>
   d6a9a:	bf00      	nop

000d6a9c <__ledf2>:
   d6a9c:	f04f 0c01 	mov.w	ip, #1
   d6aa0:	e002      	b.n	d6aa8 <__cmpdf2+0x4>
   d6aa2:	bf00      	nop

000d6aa4 <__cmpdf2>:
   d6aa4:	f04f 0c01 	mov.w	ip, #1
   d6aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6ab8:	bf18      	it	ne
   d6aba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6abe:	d01b      	beq.n	d6af8 <__cmpdf2+0x54>
   d6ac0:	b001      	add	sp, #4
   d6ac2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6ac6:	bf0c      	ite	eq
   d6ac8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6acc:	ea91 0f03 	teqne	r1, r3
   d6ad0:	bf02      	ittt	eq
   d6ad2:	ea90 0f02 	teqeq	r0, r2
   d6ad6:	2000      	moveq	r0, #0
   d6ad8:	4770      	bxeq	lr
   d6ada:	f110 0f00 	cmn.w	r0, #0
   d6ade:	ea91 0f03 	teq	r1, r3
   d6ae2:	bf58      	it	pl
   d6ae4:	4299      	cmppl	r1, r3
   d6ae6:	bf08      	it	eq
   d6ae8:	4290      	cmpeq	r0, r2
   d6aea:	bf2c      	ite	cs
   d6aec:	17d8      	asrcs	r0, r3, #31
   d6aee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6af2:	f040 0001 	orr.w	r0, r0, #1
   d6af6:	4770      	bx	lr
   d6af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b00:	d102      	bne.n	d6b08 <__cmpdf2+0x64>
   d6b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6b06:	d107      	bne.n	d6b18 <__cmpdf2+0x74>
   d6b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b10:	d1d6      	bne.n	d6ac0 <__cmpdf2+0x1c>
   d6b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6b16:	d0d3      	beq.n	d6ac0 <__cmpdf2+0x1c>
   d6b18:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6b1c:	4770      	bx	lr
   d6b1e:	bf00      	nop

000d6b20 <__aeabi_cdrcmple>:
   d6b20:	4684      	mov	ip, r0
   d6b22:	4610      	mov	r0, r2
   d6b24:	4662      	mov	r2, ip
   d6b26:	468c      	mov	ip, r1
   d6b28:	4619      	mov	r1, r3
   d6b2a:	4663      	mov	r3, ip
   d6b2c:	e000      	b.n	d6b30 <__aeabi_cdcmpeq>
   d6b2e:	bf00      	nop

000d6b30 <__aeabi_cdcmpeq>:
   d6b30:	b501      	push	{r0, lr}
   d6b32:	f7ff ffb7 	bl	d6aa4 <__cmpdf2>
   d6b36:	2800      	cmp	r0, #0
   d6b38:	bf48      	it	mi
   d6b3a:	f110 0f00 	cmnmi.w	r0, #0
   d6b3e:	bd01      	pop	{r0, pc}

000d6b40 <__aeabi_dcmpeq>:
   d6b40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b44:	f7ff fff4 	bl	d6b30 <__aeabi_cdcmpeq>
   d6b48:	bf0c      	ite	eq
   d6b4a:	2001      	moveq	r0, #1
   d6b4c:	2000      	movne	r0, #0
   d6b4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b52:	bf00      	nop

000d6b54 <__aeabi_dcmplt>:
   d6b54:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b58:	f7ff ffea 	bl	d6b30 <__aeabi_cdcmpeq>
   d6b5c:	bf34      	ite	cc
   d6b5e:	2001      	movcc	r0, #1
   d6b60:	2000      	movcs	r0, #0
   d6b62:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b66:	bf00      	nop

000d6b68 <__aeabi_dcmple>:
   d6b68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b6c:	f7ff ffe0 	bl	d6b30 <__aeabi_cdcmpeq>
   d6b70:	bf94      	ite	ls
   d6b72:	2001      	movls	r0, #1
   d6b74:	2000      	movhi	r0, #0
   d6b76:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b7a:	bf00      	nop

000d6b7c <__aeabi_dcmpge>:
   d6b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b80:	f7ff ffce 	bl	d6b20 <__aeabi_cdrcmple>
   d6b84:	bf94      	ite	ls
   d6b86:	2001      	movls	r0, #1
   d6b88:	2000      	movhi	r0, #0
   d6b8a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b8e:	bf00      	nop

000d6b90 <__aeabi_dcmpgt>:
   d6b90:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b94:	f7ff ffc4 	bl	d6b20 <__aeabi_cdrcmple>
   d6b98:	bf34      	ite	cc
   d6b9a:	2001      	movcc	r0, #1
   d6b9c:	2000      	movcs	r0, #0
   d6b9e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ba2:	bf00      	nop

000d6ba4 <__aeabi_d2uiz>:
   d6ba4:	004a      	lsls	r2, r1, #1
   d6ba6:	d211      	bcs.n	d6bcc <__aeabi_d2uiz+0x28>
   d6ba8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6bac:	d211      	bcs.n	d6bd2 <__aeabi_d2uiz+0x2e>
   d6bae:	d50d      	bpl.n	d6bcc <__aeabi_d2uiz+0x28>
   d6bb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6bb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6bb8:	d40e      	bmi.n	d6bd8 <__aeabi_d2uiz+0x34>
   d6bba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6bbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6bc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6bc6:	fa23 f002 	lsr.w	r0, r3, r2
   d6bca:	4770      	bx	lr
   d6bcc:	f04f 0000 	mov.w	r0, #0
   d6bd0:	4770      	bx	lr
   d6bd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6bd6:	d102      	bne.n	d6bde <__aeabi_d2uiz+0x3a>
   d6bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6bdc:	4770      	bx	lr
   d6bde:	f04f 0000 	mov.w	r0, #0
   d6be2:	4770      	bx	lr

000d6be4 <__aeabi_uldivmod>:
   d6be4:	b953      	cbnz	r3, d6bfc <__aeabi_uldivmod+0x18>
   d6be6:	b94a      	cbnz	r2, d6bfc <__aeabi_uldivmod+0x18>
   d6be8:	2900      	cmp	r1, #0
   d6bea:	bf08      	it	eq
   d6bec:	2800      	cmpeq	r0, #0
   d6bee:	bf1c      	itt	ne
   d6bf0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6bf4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d6bf8:	f000 b98c 	b.w	d6f14 <__aeabi_idiv0>
   d6bfc:	f1ad 0c08 	sub.w	ip, sp, #8
   d6c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6c04:	f000 f824 	bl	d6c50 <__udivmoddi4>
   d6c08:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6c10:	b004      	add	sp, #16
   d6c12:	4770      	bx	lr

000d6c14 <__aeabi_d2ulz>:
   d6c14:	b5d0      	push	{r4, r6, r7, lr}
   d6c16:	4b0c      	ldr	r3, [pc, #48]	; (d6c48 <__aeabi_d2ulz+0x34>)
   d6c18:	2200      	movs	r2, #0
   d6c1a:	4606      	mov	r6, r0
   d6c1c:	460f      	mov	r7, r1
   d6c1e:	f7ff fd27 	bl	d6670 <__aeabi_dmul>
   d6c22:	f7ff ffbf 	bl	d6ba4 <__aeabi_d2uiz>
   d6c26:	4604      	mov	r4, r0
   d6c28:	f7ff fca8 	bl	d657c <__aeabi_ui2d>
   d6c2c:	4b07      	ldr	r3, [pc, #28]	; (d6c4c <__aeabi_d2ulz+0x38>)
   d6c2e:	2200      	movs	r2, #0
   d6c30:	f7ff fd1e 	bl	d6670 <__aeabi_dmul>
   d6c34:	4602      	mov	r2, r0
   d6c36:	460b      	mov	r3, r1
   d6c38:	4630      	mov	r0, r6
   d6c3a:	4639      	mov	r1, r7
   d6c3c:	f7ff fb60 	bl	d6300 <__aeabi_dsub>
   d6c40:	f7ff ffb0 	bl	d6ba4 <__aeabi_d2uiz>
   d6c44:	4621      	mov	r1, r4
   d6c46:	bdd0      	pop	{r4, r6, r7, pc}
   d6c48:	3df00000 	.word	0x3df00000
   d6c4c:	41f00000 	.word	0x41f00000

000d6c50 <__udivmoddi4>:
   d6c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6c54:	9d08      	ldr	r5, [sp, #32]
   d6c56:	4604      	mov	r4, r0
   d6c58:	468c      	mov	ip, r1
   d6c5a:	2b00      	cmp	r3, #0
   d6c5c:	f040 8083 	bne.w	d6d66 <__udivmoddi4+0x116>
   d6c60:	428a      	cmp	r2, r1
   d6c62:	4617      	mov	r7, r2
   d6c64:	d947      	bls.n	d6cf6 <__udivmoddi4+0xa6>
   d6c66:	fab2 f282 	clz	r2, r2
   d6c6a:	b142      	cbz	r2, d6c7e <__udivmoddi4+0x2e>
   d6c6c:	f1c2 0020 	rsb	r0, r2, #32
   d6c70:	fa24 f000 	lsr.w	r0, r4, r0
   d6c74:	4091      	lsls	r1, r2
   d6c76:	4097      	lsls	r7, r2
   d6c78:	ea40 0c01 	orr.w	ip, r0, r1
   d6c7c:	4094      	lsls	r4, r2
   d6c7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6c82:	0c23      	lsrs	r3, r4, #16
   d6c84:	fbbc f6f8 	udiv	r6, ip, r8
   d6c88:	fa1f fe87 	uxth.w	lr, r7
   d6c8c:	fb08 c116 	mls	r1, r8, r6, ip
   d6c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d6c94:	fb06 f10e 	mul.w	r1, r6, lr
   d6c98:	4299      	cmp	r1, r3
   d6c9a:	d909      	bls.n	d6cb0 <__udivmoddi4+0x60>
   d6c9c:	18fb      	adds	r3, r7, r3
   d6c9e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d6ca2:	f080 8119 	bcs.w	d6ed8 <__udivmoddi4+0x288>
   d6ca6:	4299      	cmp	r1, r3
   d6ca8:	f240 8116 	bls.w	d6ed8 <__udivmoddi4+0x288>
   d6cac:	3e02      	subs	r6, #2
   d6cae:	443b      	add	r3, r7
   d6cb0:	1a5b      	subs	r3, r3, r1
   d6cb2:	b2a4      	uxth	r4, r4
   d6cb4:	fbb3 f0f8 	udiv	r0, r3, r8
   d6cb8:	fb08 3310 	mls	r3, r8, r0, r3
   d6cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d6cc0:	fb00 fe0e 	mul.w	lr, r0, lr
   d6cc4:	45a6      	cmp	lr, r4
   d6cc6:	d909      	bls.n	d6cdc <__udivmoddi4+0x8c>
   d6cc8:	193c      	adds	r4, r7, r4
   d6cca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6cce:	f080 8105 	bcs.w	d6edc <__udivmoddi4+0x28c>
   d6cd2:	45a6      	cmp	lr, r4
   d6cd4:	f240 8102 	bls.w	d6edc <__udivmoddi4+0x28c>
   d6cd8:	3802      	subs	r0, #2
   d6cda:	443c      	add	r4, r7
   d6cdc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d6ce0:	eba4 040e 	sub.w	r4, r4, lr
   d6ce4:	2600      	movs	r6, #0
   d6ce6:	b11d      	cbz	r5, d6cf0 <__udivmoddi4+0xa0>
   d6ce8:	40d4      	lsrs	r4, r2
   d6cea:	2300      	movs	r3, #0
   d6cec:	e9c5 4300 	strd	r4, r3, [r5]
   d6cf0:	4631      	mov	r1, r6
   d6cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6cf6:	b902      	cbnz	r2, d6cfa <__udivmoddi4+0xaa>
   d6cf8:	deff      	udf	#255	; 0xff
   d6cfa:	fab2 f282 	clz	r2, r2
   d6cfe:	2a00      	cmp	r2, #0
   d6d00:	d150      	bne.n	d6da4 <__udivmoddi4+0x154>
   d6d02:	1bcb      	subs	r3, r1, r7
   d6d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d6d08:	fa1f f887 	uxth.w	r8, r7
   d6d0c:	2601      	movs	r6, #1
   d6d0e:	fbb3 fcfe 	udiv	ip, r3, lr
   d6d12:	0c21      	lsrs	r1, r4, #16
   d6d14:	fb0e 331c 	mls	r3, lr, ip, r3
   d6d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6d1c:	fb08 f30c 	mul.w	r3, r8, ip
   d6d20:	428b      	cmp	r3, r1
   d6d22:	d907      	bls.n	d6d34 <__udivmoddi4+0xe4>
   d6d24:	1879      	adds	r1, r7, r1
   d6d26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d6d2a:	d202      	bcs.n	d6d32 <__udivmoddi4+0xe2>
   d6d2c:	428b      	cmp	r3, r1
   d6d2e:	f200 80e9 	bhi.w	d6f04 <__udivmoddi4+0x2b4>
   d6d32:	4684      	mov	ip, r0
   d6d34:	1ac9      	subs	r1, r1, r3
   d6d36:	b2a3      	uxth	r3, r4
   d6d38:	fbb1 f0fe 	udiv	r0, r1, lr
   d6d3c:	fb0e 1110 	mls	r1, lr, r0, r1
   d6d40:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d6d44:	fb08 f800 	mul.w	r8, r8, r0
   d6d48:	45a0      	cmp	r8, r4
   d6d4a:	d907      	bls.n	d6d5c <__udivmoddi4+0x10c>
   d6d4c:	193c      	adds	r4, r7, r4
   d6d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6d52:	d202      	bcs.n	d6d5a <__udivmoddi4+0x10a>
   d6d54:	45a0      	cmp	r8, r4
   d6d56:	f200 80d9 	bhi.w	d6f0c <__udivmoddi4+0x2bc>
   d6d5a:	4618      	mov	r0, r3
   d6d5c:	eba4 0408 	sub.w	r4, r4, r8
   d6d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d6d64:	e7bf      	b.n	d6ce6 <__udivmoddi4+0x96>
   d6d66:	428b      	cmp	r3, r1
   d6d68:	d909      	bls.n	d6d7e <__udivmoddi4+0x12e>
   d6d6a:	2d00      	cmp	r5, #0
   d6d6c:	f000 80b1 	beq.w	d6ed2 <__udivmoddi4+0x282>
   d6d70:	2600      	movs	r6, #0
   d6d72:	e9c5 0100 	strd	r0, r1, [r5]
   d6d76:	4630      	mov	r0, r6
   d6d78:	4631      	mov	r1, r6
   d6d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d7e:	fab3 f683 	clz	r6, r3
   d6d82:	2e00      	cmp	r6, #0
   d6d84:	d14a      	bne.n	d6e1c <__udivmoddi4+0x1cc>
   d6d86:	428b      	cmp	r3, r1
   d6d88:	d302      	bcc.n	d6d90 <__udivmoddi4+0x140>
   d6d8a:	4282      	cmp	r2, r0
   d6d8c:	f200 80b8 	bhi.w	d6f00 <__udivmoddi4+0x2b0>
   d6d90:	1a84      	subs	r4, r0, r2
   d6d92:	eb61 0103 	sbc.w	r1, r1, r3
   d6d96:	2001      	movs	r0, #1
   d6d98:	468c      	mov	ip, r1
   d6d9a:	2d00      	cmp	r5, #0
   d6d9c:	d0a8      	beq.n	d6cf0 <__udivmoddi4+0xa0>
   d6d9e:	e9c5 4c00 	strd	r4, ip, [r5]
   d6da2:	e7a5      	b.n	d6cf0 <__udivmoddi4+0xa0>
   d6da4:	f1c2 0320 	rsb	r3, r2, #32
   d6da8:	fa20 f603 	lsr.w	r6, r0, r3
   d6dac:	4097      	lsls	r7, r2
   d6dae:	fa01 f002 	lsl.w	r0, r1, r2
   d6db2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d6db6:	40d9      	lsrs	r1, r3
   d6db8:	4330      	orrs	r0, r6
   d6dba:	0c03      	lsrs	r3, r0, #16
   d6dbc:	fbb1 f6fe 	udiv	r6, r1, lr
   d6dc0:	fa1f f887 	uxth.w	r8, r7
   d6dc4:	fb0e 1116 	mls	r1, lr, r6, r1
   d6dc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d6dcc:	fb06 f108 	mul.w	r1, r6, r8
   d6dd0:	4299      	cmp	r1, r3
   d6dd2:	fa04 f402 	lsl.w	r4, r4, r2
   d6dd6:	d909      	bls.n	d6dec <__udivmoddi4+0x19c>
   d6dd8:	18fb      	adds	r3, r7, r3
   d6dda:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d6dde:	f080 808d 	bcs.w	d6efc <__udivmoddi4+0x2ac>
   d6de2:	4299      	cmp	r1, r3
   d6de4:	f240 808a 	bls.w	d6efc <__udivmoddi4+0x2ac>
   d6de8:	3e02      	subs	r6, #2
   d6dea:	443b      	add	r3, r7
   d6dec:	1a5b      	subs	r3, r3, r1
   d6dee:	b281      	uxth	r1, r0
   d6df0:	fbb3 f0fe 	udiv	r0, r3, lr
   d6df4:	fb0e 3310 	mls	r3, lr, r0, r3
   d6df8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6dfc:	fb00 f308 	mul.w	r3, r0, r8
   d6e00:	428b      	cmp	r3, r1
   d6e02:	d907      	bls.n	d6e14 <__udivmoddi4+0x1c4>
   d6e04:	1879      	adds	r1, r7, r1
   d6e06:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d6e0a:	d273      	bcs.n	d6ef4 <__udivmoddi4+0x2a4>
   d6e0c:	428b      	cmp	r3, r1
   d6e0e:	d971      	bls.n	d6ef4 <__udivmoddi4+0x2a4>
   d6e10:	3802      	subs	r0, #2
   d6e12:	4439      	add	r1, r7
   d6e14:	1acb      	subs	r3, r1, r3
   d6e16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d6e1a:	e778      	b.n	d6d0e <__udivmoddi4+0xbe>
   d6e1c:	f1c6 0c20 	rsb	ip, r6, #32
   d6e20:	fa03 f406 	lsl.w	r4, r3, r6
   d6e24:	fa22 f30c 	lsr.w	r3, r2, ip
   d6e28:	431c      	orrs	r4, r3
   d6e2a:	fa20 f70c 	lsr.w	r7, r0, ip
   d6e2e:	fa01 f306 	lsl.w	r3, r1, r6
   d6e32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d6e36:	fa21 f10c 	lsr.w	r1, r1, ip
   d6e3a:	431f      	orrs	r7, r3
   d6e3c:	0c3b      	lsrs	r3, r7, #16
   d6e3e:	fbb1 f9fe 	udiv	r9, r1, lr
   d6e42:	fa1f f884 	uxth.w	r8, r4
   d6e46:	fb0e 1119 	mls	r1, lr, r9, r1
   d6e4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d6e4e:	fb09 fa08 	mul.w	sl, r9, r8
   d6e52:	458a      	cmp	sl, r1
   d6e54:	fa02 f206 	lsl.w	r2, r2, r6
   d6e58:	fa00 f306 	lsl.w	r3, r0, r6
   d6e5c:	d908      	bls.n	d6e70 <__udivmoddi4+0x220>
   d6e5e:	1861      	adds	r1, r4, r1
   d6e60:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d6e64:	d248      	bcs.n	d6ef8 <__udivmoddi4+0x2a8>
   d6e66:	458a      	cmp	sl, r1
   d6e68:	d946      	bls.n	d6ef8 <__udivmoddi4+0x2a8>
   d6e6a:	f1a9 0902 	sub.w	r9, r9, #2
   d6e6e:	4421      	add	r1, r4
   d6e70:	eba1 010a 	sub.w	r1, r1, sl
   d6e74:	b2bf      	uxth	r7, r7
   d6e76:	fbb1 f0fe 	udiv	r0, r1, lr
   d6e7a:	fb0e 1110 	mls	r1, lr, r0, r1
   d6e7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d6e82:	fb00 f808 	mul.w	r8, r0, r8
   d6e86:	45b8      	cmp	r8, r7
   d6e88:	d907      	bls.n	d6e9a <__udivmoddi4+0x24a>
   d6e8a:	19e7      	adds	r7, r4, r7
   d6e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d6e90:	d22e      	bcs.n	d6ef0 <__udivmoddi4+0x2a0>
   d6e92:	45b8      	cmp	r8, r7
   d6e94:	d92c      	bls.n	d6ef0 <__udivmoddi4+0x2a0>
   d6e96:	3802      	subs	r0, #2
   d6e98:	4427      	add	r7, r4
   d6e9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d6e9e:	eba7 0708 	sub.w	r7, r7, r8
   d6ea2:	fba0 8902 	umull	r8, r9, r0, r2
   d6ea6:	454f      	cmp	r7, r9
   d6ea8:	46c6      	mov	lr, r8
   d6eaa:	4649      	mov	r1, r9
   d6eac:	d31a      	bcc.n	d6ee4 <__udivmoddi4+0x294>
   d6eae:	d017      	beq.n	d6ee0 <__udivmoddi4+0x290>
   d6eb0:	b15d      	cbz	r5, d6eca <__udivmoddi4+0x27a>
   d6eb2:	ebb3 020e 	subs.w	r2, r3, lr
   d6eb6:	eb67 0701 	sbc.w	r7, r7, r1
   d6eba:	fa07 fc0c 	lsl.w	ip, r7, ip
   d6ebe:	40f2      	lsrs	r2, r6
   d6ec0:	ea4c 0202 	orr.w	r2, ip, r2
   d6ec4:	40f7      	lsrs	r7, r6
   d6ec6:	e9c5 2700 	strd	r2, r7, [r5]
   d6eca:	2600      	movs	r6, #0
   d6ecc:	4631      	mov	r1, r6
   d6ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6ed2:	462e      	mov	r6, r5
   d6ed4:	4628      	mov	r0, r5
   d6ed6:	e70b      	b.n	d6cf0 <__udivmoddi4+0xa0>
   d6ed8:	4606      	mov	r6, r0
   d6eda:	e6e9      	b.n	d6cb0 <__udivmoddi4+0x60>
   d6edc:	4618      	mov	r0, r3
   d6ede:	e6fd      	b.n	d6cdc <__udivmoddi4+0x8c>
   d6ee0:	4543      	cmp	r3, r8
   d6ee2:	d2e5      	bcs.n	d6eb0 <__udivmoddi4+0x260>
   d6ee4:	ebb8 0e02 	subs.w	lr, r8, r2
   d6ee8:	eb69 0104 	sbc.w	r1, r9, r4
   d6eec:	3801      	subs	r0, #1
   d6eee:	e7df      	b.n	d6eb0 <__udivmoddi4+0x260>
   d6ef0:	4608      	mov	r0, r1
   d6ef2:	e7d2      	b.n	d6e9a <__udivmoddi4+0x24a>
   d6ef4:	4660      	mov	r0, ip
   d6ef6:	e78d      	b.n	d6e14 <__udivmoddi4+0x1c4>
   d6ef8:	4681      	mov	r9, r0
   d6efa:	e7b9      	b.n	d6e70 <__udivmoddi4+0x220>
   d6efc:	4666      	mov	r6, ip
   d6efe:	e775      	b.n	d6dec <__udivmoddi4+0x19c>
   d6f00:	4630      	mov	r0, r6
   d6f02:	e74a      	b.n	d6d9a <__udivmoddi4+0x14a>
   d6f04:	f1ac 0c02 	sub.w	ip, ip, #2
   d6f08:	4439      	add	r1, r7
   d6f0a:	e713      	b.n	d6d34 <__udivmoddi4+0xe4>
   d6f0c:	3802      	subs	r0, #2
   d6f0e:	443c      	add	r4, r7
   d6f10:	e724      	b.n	d6d5c <__udivmoddi4+0x10c>
   d6f12:	bf00      	nop

000d6f14 <__aeabi_idiv0>:
   d6f14:	4770      	bx	lr
   d6f16:	bf00      	nop

000d6f18 <calloc>:
   d6f18:	4b02      	ldr	r3, [pc, #8]	; (d6f24 <calloc+0xc>)
   d6f1a:	460a      	mov	r2, r1
   d6f1c:	4601      	mov	r1, r0
   d6f1e:	6818      	ldr	r0, [r3, #0]
   d6f20:	f000 b826 	b.w	d6f70 <_calloc_r>
   d6f24:	2003e588 	.word	0x2003e588

000d6f28 <__cxa_atexit>:
   d6f28:	b510      	push	{r4, lr}
   d6f2a:	4c05      	ldr	r4, [pc, #20]	; (d6f40 <__cxa_atexit+0x18>)
   d6f2c:	4613      	mov	r3, r2
   d6f2e:	b12c      	cbz	r4, d6f3c <__cxa_atexit+0x14>
   d6f30:	460a      	mov	r2, r1
   d6f32:	4601      	mov	r1, r0
   d6f34:	2002      	movs	r0, #2
   d6f36:	f3af 8000 	nop.w
   d6f3a:	bd10      	pop	{r4, pc}
   d6f3c:	4620      	mov	r0, r4
   d6f3e:	e7fc      	b.n	d6f3a <__cxa_atexit+0x12>
   d6f40:	00000000 	.word	0x00000000

000d6f44 <memcpy>:
   d6f44:	440a      	add	r2, r1
   d6f46:	4291      	cmp	r1, r2
   d6f48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6f4c:	d100      	bne.n	d6f50 <memcpy+0xc>
   d6f4e:	4770      	bx	lr
   d6f50:	b510      	push	{r4, lr}
   d6f52:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6f56:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6f5a:	4291      	cmp	r1, r2
   d6f5c:	d1f9      	bne.n	d6f52 <memcpy+0xe>
   d6f5e:	bd10      	pop	{r4, pc}

000d6f60 <memset>:
   d6f60:	4402      	add	r2, r0
   d6f62:	4603      	mov	r3, r0
   d6f64:	4293      	cmp	r3, r2
   d6f66:	d100      	bne.n	d6f6a <memset+0xa>
   d6f68:	4770      	bx	lr
   d6f6a:	f803 1b01 	strb.w	r1, [r3], #1
   d6f6e:	e7f9      	b.n	d6f64 <memset+0x4>

000d6f70 <_calloc_r>:
   d6f70:	b513      	push	{r0, r1, r4, lr}
   d6f72:	434a      	muls	r2, r1
   d6f74:	4611      	mov	r1, r2
   d6f76:	9201      	str	r2, [sp, #4]
   d6f78:	f7fe f86c 	bl	d5054 <_malloc_r>
   d6f7c:	4604      	mov	r4, r0
   d6f7e:	b118      	cbz	r0, d6f88 <_calloc_r+0x18>
   d6f80:	9a01      	ldr	r2, [sp, #4]
   d6f82:	2100      	movs	r1, #0
   d6f84:	f7ff ffec 	bl	d6f60 <memset>
   d6f88:	4620      	mov	r0, r4
   d6f8a:	b002      	add	sp, #8
   d6f8c:	bd10      	pop	{r4, pc}
	...

000d6f90 <srand>:
   d6f90:	b538      	push	{r3, r4, r5, lr}
   d6f92:	4b0d      	ldr	r3, [pc, #52]	; (d6fc8 <srand+0x38>)
   d6f94:	681d      	ldr	r5, [r3, #0]
   d6f96:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6f98:	4604      	mov	r4, r0
   d6f9a:	b97b      	cbnz	r3, d6fbc <srand+0x2c>
   d6f9c:	2018      	movs	r0, #24
   d6f9e:	f7fe f839 	bl	d5014 <malloc>
   d6fa2:	4a0a      	ldr	r2, [pc, #40]	; (d6fcc <srand+0x3c>)
   d6fa4:	4b0a      	ldr	r3, [pc, #40]	; (d6fd0 <srand+0x40>)
   d6fa6:	63a8      	str	r0, [r5, #56]	; 0x38
   d6fa8:	e9c0 2300 	strd	r2, r3, [r0]
   d6fac:	4b09      	ldr	r3, [pc, #36]	; (d6fd4 <srand+0x44>)
   d6fae:	6083      	str	r3, [r0, #8]
   d6fb0:	230b      	movs	r3, #11
   d6fb2:	8183      	strh	r3, [r0, #12]
   d6fb4:	2201      	movs	r2, #1
   d6fb6:	2300      	movs	r3, #0
   d6fb8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6fbc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6fbe:	2200      	movs	r2, #0
   d6fc0:	611c      	str	r4, [r3, #16]
   d6fc2:	615a      	str	r2, [r3, #20]
   d6fc4:	bd38      	pop	{r3, r4, r5, pc}
   d6fc6:	bf00      	nop
   d6fc8:	2003e588 	.word	0x2003e588
   d6fcc:	abcd330e 	.word	0xabcd330e
   d6fd0:	e66d1234 	.word	0xe66d1234
   d6fd4:	0005deec 	.word	0x0005deec

000d6fd8 <strdup>:
   d6fd8:	4b02      	ldr	r3, [pc, #8]	; (d6fe4 <strdup+0xc>)
   d6fda:	4601      	mov	r1, r0
   d6fdc:	6818      	ldr	r0, [r3, #0]
   d6fde:	f000 b803 	b.w	d6fe8 <_strdup_r>
   d6fe2:	bf00      	nop
   d6fe4:	2003e588 	.word	0x2003e588

000d6fe8 <_strdup_r>:
   d6fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6fea:	4604      	mov	r4, r0
   d6fec:	4608      	mov	r0, r1
   d6fee:	460d      	mov	r5, r1
   d6ff0:	f000 f80f 	bl	d7012 <strlen>
   d6ff4:	1c42      	adds	r2, r0, #1
   d6ff6:	4611      	mov	r1, r2
   d6ff8:	4620      	mov	r0, r4
   d6ffa:	9201      	str	r2, [sp, #4]
   d6ffc:	f7fe f82a 	bl	d5054 <_malloc_r>
   d7000:	4604      	mov	r4, r0
   d7002:	b118      	cbz	r0, d700c <_strdup_r+0x24>
   d7004:	9a01      	ldr	r2, [sp, #4]
   d7006:	4629      	mov	r1, r5
   d7008:	f7ff ff9c 	bl	d6f44 <memcpy>
   d700c:	4620      	mov	r0, r4
   d700e:	b003      	add	sp, #12
   d7010:	bd30      	pop	{r4, r5, pc}

000d7012 <strlen>:
   d7012:	4603      	mov	r3, r0
   d7014:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7018:	2a00      	cmp	r2, #0
   d701a:	d1fb      	bne.n	d7014 <strlen+0x2>
   d701c:	1a18      	subs	r0, r3, r0
   d701e:	3801      	subs	r0, #1
   d7020:	4770      	bx	lr

000d7022 <link_code_end>:
	...

000d7024 <dynalib_user>:
   d7024:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d7034:	0000 0000 4844 3154 2031 6574 7473 5000     ....DHT11 test.P
   d7044:	7261 6974 6c63 0065 7453 7461 6f69 006e     article.Station.
   d7054:	6f68 6b6f 722d 7365 6f70 736e 2f65 7543     hook-response/Cu
   d7064:	7272 6e65 5774 6165 6874 7265 4900 646e     rrentWeather.Ind
   d7074:	6f6f 2072 6554 706d 203a 4900 646e 6f6f     oor Temp: .Indoo
   d7084:	2072 7548 646d 203a 2500 4600 6961 656c     r Humd: .%.Faile
   d7094:	2064 6f74 7220 6165 2064 7266 6d6f 4420     d to read from D
   d70a4:	5448 7320 6e65 6f73 0072 6574 706d 0043     HT sensor.tempC.
   d70b4:	6574 706d 0046 7568 696d 0064               tempF.humid.

000d70c0 <_ZL9BasicFont>:
	...
   d70c8:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d70d8:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d70e8:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d70f8:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d7108:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d7118:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d7128:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d7138:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d7148:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d7158:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d7168:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d7178:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d7188:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d7198:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d71a8:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d71b8:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d71c8:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d71d8:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d71e8:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d71f8:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d7208:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d7218:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d7228:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d7238:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d7248:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d7258:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d7268:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d7278:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d7288:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d7298:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d72a8:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d72b8:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d72c8:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d72d8:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d72e8:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d72f8:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d7308:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d7318:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d7328:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d7338:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d7348:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d7358:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d7368:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d7378:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d7388:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d7398:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d73a8:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d73b8:	0200 0505 0002 0000                         ........

000d73c0 <_ZTVN5spark13CellularClassE>:
	...
   d73c8:	517f 000d 5175 000d 516b 000d 5121 000d     .Q..uQ..kQ..!Q..
   d73d8:	515f 000d 5153 000d 5955 000d 595d 000d     _Q..SQ..UY..]Y..
   d73e8:	5147 000d 513f 000d 5135 000d 512b 000d     GQ..?Q..5Q..+Q..
   d73f8:	598d 000d                                   .Y..

000d73fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7404:	51b9 000d 51bf 000d 51fd 000d 51cd 000d     .Q...Q...Q...Q..
   d7414:	51bb 000d                                   .Q..

000d7418 <_ZTVN5spark13EthernetClassE>:
	...
   d7420:	574f 000d 5745 000d 573b 000d 5731 000d     OW..EW..;W..1W..
   d7430:	5725 000d 5719 000d 5955 000d 595d 000d     %W...W..UY..]Y..
   d7440:	570d 000d 5705 000d 56fb 000d 56f1 000d     .W...W...V...V..
   d7450:	598d 000d                                   .Y..

000d7454 <_ZTV7TwoWire>:
	...
   d745c:	576d 000d 57b7 000d 578f 000d 576f 000d     mW...W...W..oW..
   d746c:	5797 000d 579f 000d 57a7 000d 57af 000d     .W...W...W...W..

000d747c <_ZTV9IPAddress>:
	...
   d7484:	5829 000d 5819 000d 581b 000d 7061 0070     )X...X...X..app.

000d7494 <_ZTVN5spark12NetworkClassE>:
	...
   d749c:	5915 000d 591f 000d 5929 000d 5933 000d     .Y...Y..)Y..3Y..
   d74ac:	593d 000d 5949 000d 5955 000d 595d 000d     =Y..IY..UY..]Y..
   d74bc:	5965 000d 5971 000d 5979 000d 5983 000d     eY..qY..yY...Y..
   d74cc:	598d 000d 5925 252d 2d6d 6425 2554 3a48     .Y..%Y-%m-%dT%H:
   d74dc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d74ec <_ZTV11USARTSerial>:
	...
   d74f4:	5dbd 000d 5e29 000d 5e01 000d 5a81 000d     .]..)^...^...Z..
   d7504:	5dd1 000d 5ded 000d 5ddf 000d 5dfb 000d     .]...]...]...]..
   d7514:	5dbf 000d 5dc3 000d                         .]...]..

000d751c <_ZTV9USBSerial>:
	...
   d7524:	5ebd 000d 5f25 000d 5efb 000d 5a81 000d     .^..%_...^...Z..
   d7534:	5eed 000d 5ebf 000d 5ecf 000d 5f1f 000d     .^...^...^..._..
   d7544:	5edf 000d 5eb9 000d                         .^...^..

000d754c <_ZSt7nothrow>:
	...

000d754d <link_const_variable_data_end>:
   d754d:	00          	.byte	0x00
	...

000d7550 <link_constructors_location>:
   d7550:	000d437d 	.word	0x000d437d
   d7554:	000d50f9 	.word	0x000d50f9
   d7558:	000d5189 	.word	0x000d5189
   d755c:	000d5759 	.word	0x000d5759
   d7560:	000d5905 	.word	0x000d5905
   d7564:	000d5a6d 	.word	0x000d5a6d
   d7568:	000d5b4d 	.word	0x000d5b4d
   d756c:	000d5d6d 	.word	0x000d5d6d
   d7570:	000d5da9 	.word	0x000d5da9

000d7574 <link_constructors_end>:
	...
