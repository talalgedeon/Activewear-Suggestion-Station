
/Users/talalagedeon/Desktop/particlePDP/shortproject/target/3.0.0/boron/shortproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000094f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dd510  000dd510  0000d510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dd518  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  2003e258  000dd51c  0001e258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003b0  2003e440  2003e440  0002e440  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000dd704  000dd704  0002d704  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dd72c  000dd72c  0002d72c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00283c4f  00000000  00000000  0002d730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00024cb7  00000000  00000000  002b137f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000473a6  00000000  00000000  002d6036  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003678  00000000  00000000  0031d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000b9a0  00000000  00000000  00320a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000467e5  00000000  00000000  0032c3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005d30b  00000000  00000000  00372bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00142e6a  00000000  00000000  003cfee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000a714  00000000  00000000  00512d50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fb95 	bl	da760 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fbb7 	bl	da7b0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e258 	.word	0x2003e258
   d404c:	000dd51c 	.word	0x000dd51c
   d4050:	2003e440 	.word	0x2003e440
   d4054:	2003e440 	.word	0x2003e440
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 fa0f 	bl	d9484 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dd4d4 	.word	0x000dd4d4
   d4080:	000dd50c 	.word	0x000dd50c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83e 	b.w	d4104 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9df 	bl	d444c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 b9b9 	b.w	d9408 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 b84d 	b.w	d7134 <malloc>

000d409a <_Znaj>:
   d409a:	f003 b84b 	b.w	d7134 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 b851 	b.w	d7144 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f003 b84f 	b.w	d7144 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b8:	b513      	push	{r0, r1, r4, lr}
   d40ba:	4b05      	ldr	r3, [pc, #20]	; (d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40bc:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40be:	f88d 3000 	strb.w	r3, [sp]
   d40c2:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40c4:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c6:	f003 fa2d 	bl	d7524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40ca:	4620      	mov	r0, r4
   d40cc:	b002      	add	sp, #8
   d40ce:	bd10      	pop	{r4, pc}
   d40d0:	2003e444 	.word	0x2003e444

000d40d4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40d4:	b40e      	push	{r1, r2, r3}
   d40d6:	b510      	push	{r4, lr}
   d40d8:	b08d      	sub	sp, #52	; 0x34
   d40da:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d40dc:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d40de:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d40e2:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40e4:	2300      	movs	r3, #0
   d40e6:	2020      	movs	r0, #32
   d40e8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40ec:	e9cd 4200 	strd	r4, r2, [sp]
   d40f0:	201e      	movs	r0, #30
   d40f2:	aa04      	add	r2, sp, #16
   d40f4:	f002 ff52 	bl	d6f9c <log_message_v>
}
   d40f8:	b00d      	add	sp, #52	; 0x34
   d40fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40fe:	b003      	add	sp, #12
   d4100:	4770      	bx	lr
	...

000d4104 <setup>:

// Read Temp Data
float temp = dht.getTempFarenheit();


void setup() {
   d4104:	b510      	push	{r4, lr}
   d4106:	b08a      	sub	sp, #40	; 0x28
  Serial.begin(9600);
   d4108:	f005 f8f6 	bl	d92f8 <_Z16_fetch_usbserialv>
   d410c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4110:	f005 f8e6 	bl	d92e0 <_ZN9USBSerial5beginEl>
  Serial.println("Active Wear Station"); 
   d4114:	f005 f8f0 	bl	d92f8 <_Z16_fetch_usbserialv>
   d4118:	492c      	ldr	r1, [pc, #176]	; (d41cc <setup+0xc8>)
  leds.init();

  Wire.begin();

// initialize display library
  SeeedOled.init(); 
   d411a:	4c2d      	ldr	r4, [pc, #180]	; (d41d0 <setup+0xcc>)
  Serial.println("Active Wear Station"); 
   d411c:	f003 fffb 	bl	d8116 <_ZN5Print7printlnEPKc>
  dht.begin();
   d4120:	482c      	ldr	r0, [pc, #176]	; (d41d4 <setup+0xd0>)
   d4122:	f000 fcad 	bl	d4a80 <_ZN3DHT5beginEv>
  leds.init();
   d4126:	482c      	ldr	r0, [pc, #176]	; (d41d8 <setup+0xd4>)
   d4128:	f000 ff8e 	bl	d5048 <_ZN12ChainableLED4initEv>
  Wire.begin();
   d412c:	f005 fa5c 	bl	d95e8 <_Z19__fetch_global_Wirev>
   d4130:	f003 fbea 	bl	d7908 <_ZN7TwoWire5beginEv>
  SeeedOled.init(); 
   d4134:	4620      	mov	r0, r4
   d4136:	f000 ffbd 	bl	d50b4 <_ZN9SeeedOLED4initEv>

// Clearing display
  SeeedOled.clearDisplay();
   d413a:	4620      	mov	r0, r4
   d413c:	f001 f81c 	bl	d5178 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d4140:	4620      	mov	r0, r4
   d4142:	f001 f87e 	bl	d5242 <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d4146:	4620      	mov	r0, r4
   d4148:	f000 ffc6 	bl	d50d8 <_ZN9SeeedOLED11setPageModeEv>

// Adding Active Wear Station at setup
  SeeedOled.setTextXY(2, 0);
   d414c:	2200      	movs	r2, #0
   d414e:	4620      	mov	r0, r4
   d4150:	2102      	movs	r1, #2
   d4152:	f000 ffcc 	bl	d50ee <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Active");
   d4156:	4620      	mov	r0, r4
   d4158:	4920      	ldr	r1, [pc, #128]	; (d41dc <setup+0xd8>)
   d415a:	f001 f82e 	bl	d51ba <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d415e:	2200      	movs	r2, #0
   d4160:	4620      	mov	r0, r4
   d4162:	2103      	movs	r1, #3
   d4164:	f000 ffc3 	bl	d50ee <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Wear");
   d4168:	4620      	mov	r0, r4
   d416a:	491d      	ldr	r1, [pc, #116]	; (d41e0 <setup+0xdc>)
   d416c:	f001 f825 	bl	d51ba <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4170:	2200      	movs	r2, #0
   d4172:	4620      	mov	r0, r4
   d4174:	2104      	movs	r1, #4
   d4176:	f000 ffba 	bl	d50ee <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Suggestion");
   d417a:	4620      	mov	r0, r4
   d417c:	4919      	ldr	r1, [pc, #100]	; (d41e4 <setup+0xe0>)
   d417e:	f001 f81c 	bl	d51ba <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(5, 0);
   d4182:	2200      	movs	r2, #0
   d4184:	4620      	mov	r0, r4
   d4186:	2105      	movs	r1, #5
   d4188:	f000 ffb1 	bl	d50ee <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Station");
   d418c:	4916      	ldr	r1, [pc, #88]	; (d41e8 <setup+0xe4>)
   d418e:	4620      	mov	r0, r4
   d4190:	f001 f813 	bl	d51ba <_ZN9SeeedOLED9putStringEPKc>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4194:	a802      	add	r0, sp, #8
   d4196:	f002 ff4d 	bl	d7034 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d419a:	a902      	add	r1, sp, #8
   d419c:	a806      	add	r0, sp, #24
   d419e:	f004 f98d 	bl	d84bc <_ZN6StringC1ERKS_>

// Subscribing to GetWeatherForecast webhook
  Particle.subscribe(System.deviceID() + "/GetWeatherForecast/", setCurrentWeather, MY_DEVICES);
   d41a2:	4912      	ldr	r1, [pc, #72]	; (d41ec <setup+0xe8>)
   d41a4:	a806      	add	r0, sp, #24
   d41a6:	f004 f9eb 	bl	d8580 <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d41aa:	2300      	movs	r3, #0
   d41ac:	e9cd 3300 	strd	r3, r3, [sp]
   d41b0:	490f      	ldr	r1, [pc, #60]	; (d41f0 <setup+0xec>)
   d41b2:	6800      	ldr	r0, [r0, #0]
   d41b4:	461a      	mov	r2, r3
   d41b6:	f002 ff4d 	bl	d7054 <spark_subscribe>
class StringSumHelper : public String
   d41ba:	a806      	add	r0, sp, #24
   d41bc:	f004 f924 	bl	d8408 <_ZN6StringD1Ev>
   d41c0:	a802      	add	r0, sp, #8
   d41c2:	f004 f921 	bl	d8408 <_ZN6StringD1Ev>
}
   d41c6:	b00a      	add	sp, #40	; 0x28
   d41c8:	bd10      	pop	{r4, pc}
   d41ca:	bf00      	nop
   d41cc:	000dc5f4 	.word	0x000dc5f4
   d41d0:	2003e480 	.word	0x2003e480
   d41d4:	2003e448 	.word	0x2003e448
   d41d8:	2003e460 	.word	0x2003e460
   d41dc:	000dc608 	.word	0x000dc608
   d41e0:	000dc60f 	.word	0x000dc60f
   d41e4:	000dc614 	.word	0x000dc614
   d41e8:	000dc600 	.word	0x000dc600
   d41ec:	000dc61f 	.word	0x000dc61f
   d41f0:	000d4835 	.word	0x000d4835

000d41f4 <_Z13updateDisplaydd>:
        }
    }}

// Updating OLED Display
void updateDisplay (double inside, double outside)
{
   d41f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

// Clearing Display before updating
  SeeedOled.clearDisplay(), 
   d41f8:	4c1e      	ldr	r4, [pc, #120]	; (d4274 <_Z13updateDisplaydd+0x80>)
  SeeedOled.putString("Heat Indexes");

  SeeedOled.setTextXY(3, 0);
  SeeedOled.putString("In Index:");
  SeeedOled.putNumber(inside);
  SeeedOled.putString("F");
   d41fa:	4d1f      	ldr	r5, [pc, #124]	; (d4278 <_Z13updateDisplaydd+0x84>)
  SeeedOled.clearDisplay(), 
   d41fc:	4620      	mov	r0, r4
{
   d41fe:	ec59 8b10 	vmov	r8, r9, d0
   d4202:	ec57 6b11 	vmov	r6, r7, d1
  SeeedOled.clearDisplay(), 
   d4206:	f000 ffb7 	bl	d5178 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setTextXY(1, 0);
   d420a:	2200      	movs	r2, #0
   d420c:	4620      	mov	r0, r4
   d420e:	2101      	movs	r1, #1
   d4210:	f000 ff6d 	bl	d50ee <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Heat Indexes");
   d4214:	4620      	mov	r0, r4
   d4216:	4919      	ldr	r1, [pc, #100]	; (d427c <_Z13updateDisplaydd+0x88>)
   d4218:	f000 ffcf 	bl	d51ba <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d421c:	2200      	movs	r2, #0
   d421e:	4620      	mov	r0, r4
   d4220:	2103      	movs	r1, #3
   d4222:	f000 ff64 	bl	d50ee <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("In Index:");
   d4226:	4620      	mov	r0, r4
   d4228:	4915      	ldr	r1, [pc, #84]	; (d4280 <_Z13updateDisplaydd+0x8c>)
   d422a:	f000 ffc6 	bl	d51ba <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(inside);
   d422e:	4649      	mov	r1, r9
   d4230:	4640      	mov	r0, r8
   d4232:	f006 f849 	bl	da2c8 <__aeabi_d2iz>
   d4236:	4601      	mov	r1, r0
   d4238:	4620      	mov	r0, r4
   d423a:	f000 ffcb 	bl	d51d4 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("F");
   d423e:	4629      	mov	r1, r5
   d4240:	4620      	mov	r0, r4
   d4242:	f000 ffba 	bl	d51ba <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(5, 0);
   d4246:	2200      	movs	r2, #0
   d4248:	4620      	mov	r0, r4
   d424a:	2105      	movs	r1, #5
   d424c:	f000 ff4f 	bl	d50ee <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Out Index:");
   d4250:	4620      	mov	r0, r4
   d4252:	490c      	ldr	r1, [pc, #48]	; (d4284 <_Z13updateDisplaydd+0x90>)
   d4254:	f000 ffb1 	bl	d51ba <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(outside);
   d4258:	4639      	mov	r1, r7
   d425a:	4630      	mov	r0, r6
   d425c:	f006 f834 	bl	da2c8 <__aeabi_d2iz>
   d4260:	4601      	mov	r1, r0
   d4262:	4620      	mov	r0, r4
   d4264:	f000 ffb6 	bl	d51d4 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("F");
   d4268:	4629      	mov	r1, r5
   d426a:	4620      	mov	r0, r4

}
   d426c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  SeeedOled.putString("F");
   d4270:	f000 bfa3 	b.w	d51ba <_ZN9SeeedOLED9putStringEPKc>
   d4274:	2003e480 	.word	0x2003e480
   d4278:	000dc64b 	.word	0x000dc64b
   d427c:	000dc634 	.word	0x000dc634
   d4280:	000dc641 	.word	0x000dc641
   d4284:	000dc64d 	.word	0x000dc64d

000d4288 <_Z15indoorHeatIndexdd>:

// Indoor heat index equation
double indoorHeatIndex (double temp, double humidity) {
   d4288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d428c:	ec55 4b10 	vmov	r4, r5, d0
   d4290:	ed2d 8b02 	vpush	{d8}
    const double c9 = -0.00000199;

    double heatIndex = c1 + (c2 * temp) +
                           (c3 * humidity) +
                           (c4 * temp*humidity) + 
                           (c5 * (temp*temp)) +
   d4294:	ee10 2a10 	vmov	r2, s0
   d4298:	ee10 0a10 	vmov	r0, s0
   d429c:	462b      	mov	r3, r5
   d429e:	4629      	mov	r1, r5
double indoorHeatIndex (double temp, double humidity) {
   d42a0:	ec57 6b11 	vmov	r6, r7, d1
                           (c5 * (temp*temp)) +
   d42a4:	f005 fd60 	bl	d9d68 <__aeabi_dmul>
                           (c6 * (humidity * humidity)) +
   d42a8:	4632      	mov	r2, r6
                           (c5 * (temp*temp)) +
   d42aa:	4682      	mov	sl, r0
   d42ac:	468b      	mov	fp, r1
                           (c6 * (humidity * humidity)) +
   d42ae:	463b      	mov	r3, r7
   d42b0:	4630      	mov	r0, r6
   d42b2:	4639      	mov	r1, r7
   d42b4:	f005 fd58 	bl	d9d68 <__aeabi_dmul>
    double heatIndex = c1 + (c2 * temp) +
   d42b8:	a347      	add	r3, pc, #284	; (adr r3, d43d8 <_Z15indoorHeatIndexdd+0x150>)
   d42ba:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c6 * (humidity * humidity)) +
   d42be:	ec41 0b18 	vmov	d8, r0, r1
    double heatIndex = c1 + (c2 * temp) +
   d42c2:	4620      	mov	r0, r4
   d42c4:	4629      	mov	r1, r5
   d42c6:	f005 fd4f 	bl	d9d68 <__aeabi_dmul>
   d42ca:	a345      	add	r3, pc, #276	; (adr r3, d43e0 <_Z15indoorHeatIndexdd+0x158>)
   d42cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42d0:	f005 fb92 	bl	d99f8 <__aeabi_dsub>
                           (c3 * humidity) +
   d42d4:	a344      	add	r3, pc, #272	; (adr r3, d43e8 <_Z15indoorHeatIndexdd+0x160>)
   d42d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    double heatIndex = c1 + (c2 * temp) +
   d42da:	4680      	mov	r8, r0
   d42dc:	4689      	mov	r9, r1
                           (c3 * humidity) +
   d42de:	4630      	mov	r0, r6
   d42e0:	4639      	mov	r1, r7
   d42e2:	f005 fd41 	bl	d9d68 <__aeabi_dmul>
   d42e6:	4602      	mov	r2, r0
   d42e8:	460b      	mov	r3, r1
    double heatIndex = c1 + (c2 * temp) +
   d42ea:	4640      	mov	r0, r8
   d42ec:	4649      	mov	r1, r9
   d42ee:	f005 fb85 	bl	d99fc <__adddf3>
                           (c4 * temp*humidity) + 
   d42f2:	a33f      	add	r3, pc, #252	; (adr r3, d43f0 <_Z15indoorHeatIndexdd+0x168>)
   d42f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    double heatIndex = c1 + (c2 * temp) +
   d42f8:	4680      	mov	r8, r0
   d42fa:	4689      	mov	r9, r1
                           (c4 * temp*humidity) + 
   d42fc:	4620      	mov	r0, r4
   d42fe:	4629      	mov	r1, r5
   d4300:	f005 fd32 	bl	d9d68 <__aeabi_dmul>
   d4304:	4632      	mov	r2, r6
   d4306:	463b      	mov	r3, r7
   d4308:	f005 fd2e 	bl	d9d68 <__aeabi_dmul>
   d430c:	4602      	mov	r2, r0
   d430e:	460b      	mov	r3, r1
                           (c3 * humidity) +
   d4310:	4640      	mov	r0, r8
   d4312:	4649      	mov	r1, r9
   d4314:	f005 fb72 	bl	d99fc <__adddf3>
                           (c5 * (temp*temp)) +
   d4318:	a337      	add	r3, pc, #220	; (adr r3, d43f8 <_Z15indoorHeatIndexdd+0x170>)
   d431a:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c3 * humidity) +
   d431e:	4680      	mov	r8, r0
   d4320:	4689      	mov	r9, r1
                           (c5 * (temp*temp)) +
   d4322:	4650      	mov	r0, sl
   d4324:	4659      	mov	r1, fp
   d4326:	f005 fd1f 	bl	d9d68 <__aeabi_dmul>
   d432a:	4602      	mov	r2, r0
   d432c:	460b      	mov	r3, r1
                           (c4 * temp*humidity) + 
   d432e:	4640      	mov	r0, r8
   d4330:	4649      	mov	r1, r9
   d4332:	f005 fb63 	bl	d99fc <__adddf3>
                           (c6 * (humidity * humidity)) +
   d4336:	a332      	add	r3, pc, #200	; (adr r3, d4400 <_Z15indoorHeatIndexdd+0x178>)
   d4338:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c4 * temp*humidity) + 
   d433c:	4680      	mov	r8, r0
   d433e:	4689      	mov	r9, r1
                           (c6 * (humidity * humidity)) +
   d4340:	ec51 0b18 	vmov	r0, r1, d8
   d4344:	f005 fd10 	bl	d9d68 <__aeabi_dmul>
   d4348:	4602      	mov	r2, r0
   d434a:	460b      	mov	r3, r1
                           (c5 * (temp*temp)) +
   d434c:	4640      	mov	r0, r8
   d434e:	4649      	mov	r1, r9
   d4350:	f005 fb54 	bl	d99fc <__adddf3>
                           (c7 * (temp * temp) * humidity) + 
   d4354:	a32c      	add	r3, pc, #176	; (adr r3, d4408 <_Z15indoorHeatIndexdd+0x180>)
   d4356:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c5 * (temp*temp)) +
   d435a:	4680      	mov	r8, r0
   d435c:	4689      	mov	r9, r1
                           (c7 * (temp * temp) * humidity) + 
   d435e:	4650      	mov	r0, sl
   d4360:	4659      	mov	r1, fp
   d4362:	f005 fd01 	bl	d9d68 <__aeabi_dmul>
   d4366:	4632      	mov	r2, r6
   d4368:	463b      	mov	r3, r7
   d436a:	f005 fcfd 	bl	d9d68 <__aeabi_dmul>
   d436e:	4602      	mov	r2, r0
   d4370:	460b      	mov	r3, r1
                           (c6 * (humidity * humidity)) +
   d4372:	4640      	mov	r0, r8
   d4374:	4649      	mov	r1, r9
   d4376:	f005 fb41 	bl	d99fc <__adddf3>
                           (c8 * temp * (humidity * humidity)) +
   d437a:	a325      	add	r3, pc, #148	; (adr r3, d4410 <_Z15indoorHeatIndexdd+0x188>)
   d437c:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c6 * (humidity * humidity)) +
   d4380:	4606      	mov	r6, r0
   d4382:	460f      	mov	r7, r1
                           (c8 * temp * (humidity * humidity)) +
   d4384:	4620      	mov	r0, r4
   d4386:	4629      	mov	r1, r5
   d4388:	f005 fcee 	bl	d9d68 <__aeabi_dmul>
   d438c:	ec53 2b18 	vmov	r2, r3, d8
   d4390:	f005 fcea 	bl	d9d68 <__aeabi_dmul>
   d4394:	4602      	mov	r2, r0
   d4396:	460b      	mov	r3, r1
                           (c7 * (temp * temp) * humidity) + 
   d4398:	4630      	mov	r0, r6
   d439a:	4639      	mov	r1, r7
   d439c:	f005 fb2e 	bl	d99fc <__adddf3>
                           (c9 * (temp * temp) * (humidity * humidity));
   d43a0:	a31d      	add	r3, pc, #116	; (adr r3, d4418 <_Z15indoorHeatIndexdd+0x190>)
   d43a2:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c7 * (temp * temp) * humidity) + 
   d43a6:	4604      	mov	r4, r0
   d43a8:	460d      	mov	r5, r1
                           (c9 * (temp * temp) * (humidity * humidity));
   d43aa:	4650      	mov	r0, sl
   d43ac:	4659      	mov	r1, fp
   d43ae:	f005 fcdb 	bl	d9d68 <__aeabi_dmul>
   d43b2:	ec53 2b18 	vmov	r2, r3, d8
   d43b6:	f005 fcd7 	bl	d9d68 <__aeabi_dmul>
   d43ba:	4602      	mov	r2, r0
   d43bc:	460b      	mov	r3, r1
    double heatIndex = c1 + (c2 * temp) +
   d43be:	4620      	mov	r0, r4
   d43c0:	4629      	mov	r1, r5
   d43c2:	f005 fb1b 	bl	d99fc <__adddf3>

  return heatIndex;
}   
   d43c6:	ecbd 8b02 	vpop	{d8}
   d43ca:	ec41 0b10 	vmov	d0, r0, r1
   d43ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d43d2:	bf00      	nop
   d43d4:	f3af 8000 	nop.w
   d43d8:	18ced8ec 	.word	0x18ced8ec
   d43dc:	40006462 	.word	0x40006462
   d43e0:	126e978d 	.word	0x126e978d
   d43e4:	40453083 	.word	0x40453083
   d43e8:	b75a49cd 	.word	0xb75a49cd
   d43ec:	40244962 	.word	0x40244962
   d43f0:	07c647f8 	.word	0x07c647f8
   d43f4:	bfccc4c9 	.word	0xbfccc4c9
   d43f8:	039c16cc 	.word	0x039c16cc
   d43fc:	bf7c01fc 	.word	0xbf7c01fc
   d4400:	00d18c24 	.word	0x00d18c24
   d4404:	bfac10ff 	.word	0xbfac10ff
   d4408:	8760dce5 	.word	0x8760dce5
   d440c:	3f5421b5 	.word	0x3f5421b5
   d4410:	013330da 	.word	0x013330da
   d4414:	3f4bf1f9 	.word	0x3f4bf1f9
   d4418:	11d3bd01 	.word	0x11d3bd01
   d441c:	bec0b17e 	.word	0xbec0b17e

000d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4420:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4422:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4424:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4426:	b17c      	cbz	r4, d4448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4428:	6863      	ldr	r3, [r4, #4]
   d442a:	3b01      	subs	r3, #1
   d442c:	6063      	str	r3, [r4, #4]
   d442e:	b95b      	cbnz	r3, d4448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4430:	6823      	ldr	r3, [r4, #0]
   d4432:	4620      	mov	r0, r4
   d4434:	689b      	ldr	r3, [r3, #8]
   d4436:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4438:	68a3      	ldr	r3, [r4, #8]
   d443a:	3b01      	subs	r3, #1
   d443c:	60a3      	str	r3, [r4, #8]
   d443e:	b91b      	cbnz	r3, d4448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4440:	6823      	ldr	r3, [r4, #0]
   d4442:	4620      	mov	r0, r4
   d4444:	68db      	ldr	r3, [r3, #12]
   d4446:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4448:	4628      	mov	r0, r5
   d444a:	bd38      	pop	{r3, r4, r5, pc}

000d444c <loop>:
void loop() {
   d444c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4450:	ed2d 8b04 	vpush	{d8-d9}
  delay(50000);
   d4454:	f24c 3050 	movw	r0, #50000	; 0xc350
void loop() {
   d4458:	b088      	sub	sp, #32
  delay(50000);
   d445a:	f002 feab 	bl	d71b4 <delay>
double inside = indoorHeatIndex(temp, humidity);
   d445e:	4b22      	ldr	r3, [pc, #136]	; (d44e8 <loop+0x9c>)
   d4460:	4c22      	ldr	r4, [pc, #136]	; (d44ec <loop+0xa0>)
   d4462:	edd3 9a00 	vldr	s19, [r3]
   d4466:	ed94 9a00 	vldr	s18, [r4]
   d446a:	ee19 0a90 	vmov	r0, s19
   d446e:	f005 fc23 	bl	d9cb8 <__aeabi_f2d>
   d4472:	ec41 0b18 	vmov	d8, r0, r1
   d4476:	ee19 0a10 	vmov	r0, s18
   d447a:	f005 fc1d 	bl	d9cb8 <__aeabi_f2d>
   d447e:	eeb0 1a48 	vmov.f32	s2, s16
   d4482:	eef0 1a68 	vmov.f32	s3, s17
   d4486:	ec41 0b10 	vmov	d0, r0, r1
   d448a:	f7ff fefd 	bl	d4288 <_Z15indoorHeatIndexdd>
double outside = outdoorHeatIndex (tempOutdoor, humidityOutdoor);
   d448e:	4b18      	ldr	r3, [pc, #96]	; (d44f0 <loop+0xa4>)
   d4490:	6818      	ldr	r0, [r3, #0]
double inside = indoorHeatIndex(temp, humidity);
   d4492:	ec57 6b10 	vmov	r6, r7, d0
double outside = outdoorHeatIndex (tempOutdoor, humidityOutdoor);
   d4496:	f005 fc0f 	bl	d9cb8 <__aeabi_f2d>
   d449a:	4b16      	ldr	r3, [pc, #88]	; (d44f4 <loop+0xa8>)
   d449c:	ec41 0b18 	vmov	d8, r0, r1
   d44a0:	6818      	ldr	r0, [r3, #0]
   d44a2:	f005 fc09 	bl	d9cb8 <__aeabi_f2d>
   d44a6:	eeb0 1a48 	vmov.f32	s2, s16
   d44aa:	eef0 1a68 	vmov.f32	s3, s17
   d44ae:	ec41 0b10 	vmov	d0, r0, r1
   d44b2:	f7ff fee9 	bl	d4288 <_Z15indoorHeatIndexdd>
  if (isnan(humidity) || isnan(temp)){
   d44b6:	eef4 9a69 	vcmp.f32	s19, s19
   d44ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
double outside = outdoorHeatIndex (tempOutdoor, humidityOutdoor);
   d44be:	eeb0 8a40 	vmov.f32	s16, s0
   d44c2:	eef0 8a60 	vmov.f32	s17, s1
  if (isnan(humidity) || isnan(temp)){
   d44c6:	d604      	bvs.n	d44d2 <loop+0x86>
   d44c8:	eeb4 9a49 	vcmp.f32	s18, s18
   d44cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44d0:	d714      	bvc.n	d44fc <loop+0xb0>
    Serial.println("Failed to read from DHT sensor");
   d44d2:	f004 ff11 	bl	d92f8 <_Z16_fetch_usbserialv>
   d44d6:	4908      	ldr	r1, [pc, #32]	; (d44f8 <loop+0xac>)
   d44d8:	f003 fe1d 	bl	d8116 <_ZN5Print7printlnEPKc>
}
   d44dc:	b008      	add	sp, #32
   d44de:	ecbd 8b04 	vpop	{d8-d9}
   d44e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d44e6:	bf00      	nop
   d44e8:	2003e45c 	.word	0x2003e45c
   d44ec:	2003e468 	.word	0x2003e468
   d44f0:	2003e260 	.word	0x2003e260
   d44f4:	2003e264 	.word	0x2003e264
   d44f8:	000dc658 	.word	0x000dc658
  if (millis() - lastPublish >= publishPeriod) {
   d44fc:	4db8      	ldr	r5, [pc, #736]	; (d47e0 <loop+0x394>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44fe:	f002 fb9d 	bl	d6c3c <HAL_Timer_Get_Milli_Seconds>
   d4502:	682b      	ldr	r3, [r5, #0]
   d4504:	1ac0      	subs	r0, r0, r3
   d4506:	4bb7      	ldr	r3, [pc, #732]	; (d47e4 <loop+0x398>)
   d4508:	4298      	cmp	r0, r3
   d450a:	d90f      	bls.n	d452c <loop+0xe0>
   d450c:	f002 fb96 	bl	d6c3c <HAL_Timer_Get_Milli_Seconds>
   d4510:	4bb5      	ldr	r3, [pc, #724]	; (d47e8 <loop+0x39c>)
    lastPublish = millis();
   d4512:	6028      	str	r0, [r5, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4514:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4516:	f88d 3000 	strb.w	r3, [sp]
   d451a:	a804      	add	r0, sp, #16
   d451c:	49b3      	ldr	r1, [pc, #716]	; (d47ec <loop+0x3a0>)
   d451e:	233c      	movs	r3, #60	; 0x3c
   d4520:	2200      	movs	r2, #0
   d4522:	f002 ffff 	bl	d7524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4526:	a805      	add	r0, sp, #20
   d4528:	f7ff ff7a 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (inside < outside){
   d452c:	ec53 2b18 	vmov	r2, r3, d8
   d4530:	4630      	mov	r0, r6
   d4532:	4639      	mov	r1, r7
   d4534:	f005 fe8a 	bl	da24c <__aeabi_dcmplt>
   d4538:	b138      	cbz	r0, d454a <loop+0xfe>
  leds.setColorRGB(0,0,0,255);
   d453a:	23ff      	movs	r3, #255	; 0xff
   d453c:	9300      	str	r3, [sp, #0]
   d453e:	2300      	movs	r3, #0
   d4540:	48ab      	ldr	r0, [pc, #684]	; (d47f0 <loop+0x3a4>)
   d4542:	461a      	mov	r2, r3
   d4544:	4619      	mov	r1, r3
   d4546:	f000 fd37 	bl	d4fb8 <_ZN12ChainableLED11setColorRGBEhhhh>
  if (inside > outside){
   d454a:	ec53 2b18 	vmov	r2, r3, d8
   d454e:	4630      	mov	r0, r6
   d4550:	4639      	mov	r1, r7
   d4552:	f005 fe99 	bl	da288 <__aeabi_dcmpgt>
   d4556:	b130      	cbz	r0, d4566 <loop+0x11a>
    leds.setColorRGB(0,255,0,0);
   d4558:	2300      	movs	r3, #0
   d455a:	48a5      	ldr	r0, [pc, #660]	; (d47f0 <loop+0x3a4>)
   d455c:	9300      	str	r3, [sp, #0]
   d455e:	22ff      	movs	r2, #255	; 0xff
   d4560:	4619      	mov	r1, r3
   d4562:	f000 fd29 	bl	d4fb8 <_ZN12ChainableLED11setColorRGBEhhhh>
 updateDisplay (inside, outside);
   d4566:	eeb0 1a48 	vmov.f32	s2, s16
   d456a:	eef0 1a68 	vmov.f32	s3, s17
   d456e:	ec47 6b10 	vmov	d0, r6, r7
  ubidots.add("Indoor Humidity", humidity);
   d4572:	f8df 82ac 	ldr.w	r8, [pc, #684]	; d4820 <loop+0x3d4>
  ubidots.add("Outdoor Temp", tempOutdoor);
   d4576:	4d9f      	ldr	r5, [pc, #636]	; (d47f4 <loop+0x3a8>)
  ubidots.add("Outdoor Humidity", humidityOutdoor);
   d4578:	4e9f      	ldr	r6, [pc, #636]	; (d47f8 <loop+0x3ac>)
 updateDisplay (inside, outside);
   d457a:	f7ff fe3b 	bl	d41f4 <_Z13updateDisplaydd>
  ubidots.add("Indoor Temp", temp);
   d457e:	ed94 0a00 	vldr	s0, [r4]
   d4582:	499e      	ldr	r1, [pc, #632]	; (d47fc <loop+0x3b0>)
   d4584:	489e      	ldr	r0, [pc, #632]	; (d4800 <loop+0x3b4>)
   d4586:	f002 fb2c 	bl	d6be2 <_ZN7Ubidots3addEPcf>
  ubidots.add("Indoor Humidity", humidity);
   d458a:	ed98 0a00 	vldr	s0, [r8]
   d458e:	499d      	ldr	r1, [pc, #628]	; (d4804 <loop+0x3b8>)
   d4590:	489b      	ldr	r0, [pc, #620]	; (d4800 <loop+0x3b4>)
   d4592:	f002 fb26 	bl	d6be2 <_ZN7Ubidots3addEPcf>
  ubidots.add("Outdoor Temp", tempOutdoor);
   d4596:	ed95 0a00 	vldr	s0, [r5]
   d459a:	499b      	ldr	r1, [pc, #620]	; (d4808 <loop+0x3bc>)
   d459c:	4898      	ldr	r0, [pc, #608]	; (d4800 <loop+0x3b4>)
   d459e:	f002 fb20 	bl	d6be2 <_ZN7Ubidots3addEPcf>
  ubidots.add("Outdoor Humidity", humidityOutdoor);
   d45a2:	ed96 0a00 	vldr	s0, [r6]
   d45a6:	4999      	ldr	r1, [pc, #612]	; (d480c <loop+0x3c0>)
   d45a8:	4895      	ldr	r0, [pc, #596]	; (d4800 <loop+0x3b4>)
   d45aa:	f002 fb1a 	bl	d6be2 <_ZN7Ubidots3addEPcf>
  ubidots.add("Indoor Heat Index",indoorHeatIndex(temp, humidity));
   d45ae:	f8d8 0000 	ldr.w	r0, [r8]
   d45b2:	f005 fb81 	bl	d9cb8 <__aeabi_f2d>
   d45b6:	ec41 0b19 	vmov	d9, r0, r1
   d45ba:	6820      	ldr	r0, [r4, #0]
   d45bc:	f005 fb7c 	bl	d9cb8 <__aeabi_f2d>
   d45c0:	eeb0 1a49 	vmov.f32	s2, s18
   d45c4:	eef0 1a69 	vmov.f32	s3, s19
   d45c8:	ec41 0b10 	vmov	d0, r0, r1
   d45cc:	f7ff fe5c 	bl	d4288 <_Z15indoorHeatIndexdd>
   d45d0:	ec51 0b10 	vmov	r0, r1, d0
   d45d4:	f005 fec0 	bl	da358 <__aeabi_d2f>
   d45d8:	498d      	ldr	r1, [pc, #564]	; (d4810 <loop+0x3c4>)
   d45da:	ee00 0a10 	vmov	s0, r0
   d45de:	4888      	ldr	r0, [pc, #544]	; (d4800 <loop+0x3b4>)
   d45e0:	f002 faff 	bl	d6be2 <_ZN7Ubidots3addEPcf>
  ubidots.add("Outdoor Heat Index", outdoorHeatIndex(tempOutdoor, humidityOutdoor));
   d45e4:	6830      	ldr	r0, [r6, #0]
   d45e6:	f005 fb67 	bl	d9cb8 <__aeabi_f2d>
   d45ea:	ec41 0b19 	vmov	d9, r0, r1
   d45ee:	6828      	ldr	r0, [r5, #0]
   d45f0:	f005 fb62 	bl	d9cb8 <__aeabi_f2d>
   d45f4:	eeb0 1a49 	vmov.f32	s2, s18
   d45f8:	eef0 1a69 	vmov.f32	s3, s19
   d45fc:	ec41 0b10 	vmov	d0, r0, r1
   d4600:	f7ff fe42 	bl	d4288 <_Z15indoorHeatIndexdd>
   d4604:	ec51 0b10 	vmov	r0, r1, d0
   d4608:	f005 fea6 	bl	da358 <__aeabi_d2f>
   d460c:	4981      	ldr	r1, [pc, #516]	; (d4814 <loop+0x3c8>)
   d460e:	ee00 0a10 	vmov	s0, r0
   d4612:	487b      	ldr	r0, [pc, #492]	; (d4800 <loop+0x3b4>)
   d4614:	f002 fae5 	bl	d6be2 <_ZN7Ubidots3addEPcf>
  bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC); 
   d4618:	4b7f      	ldr	r3, [pc, #508]	; (d4818 <loop+0x3cc>)
   d461a:	4879      	ldr	r0, [pc, #484]	; (d4800 <loop+0x3b4>)
   d461c:	781a      	ldrb	r2, [r3, #0]
   d461e:	4b7f      	ldr	r3, [pc, #508]	; (d481c <loop+0x3d0>)
   d4620:	6819      	ldr	r1, [r3, #0]
   d4622:	f002 fae7 	bl	d6bf4 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
  Particle.publish("Indoor Temp",String (temp));
   d4626:	ed94 0a00 	vldr	s0, [r4]
   d462a:	2106      	movs	r1, #6
   d462c:	a804      	add	r0, sp, #16
   d462e:	f003 ff62 	bl	d84f6 <_ZN6StringC1Efi>
   d4632:	9a04      	ldr	r2, [sp, #16]
   d4634:	4971      	ldr	r1, [pc, #452]	; (d47fc <loop+0x3b0>)
   d4636:	a802      	add	r0, sp, #8
   d4638:	f7ff fd3e 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d463c:	a803      	add	r0, sp, #12
   d463e:	f7ff feef 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4642:	a804      	add	r0, sp, #16
   d4644:	f003 fee0 	bl	d8408 <_ZN6StringD1Ev>
  Particle.publish("Indoor Humidity", String (humidity));
   d4648:	ed98 0a00 	vldr	s0, [r8]
   d464c:	2106      	movs	r1, #6
   d464e:	a804      	add	r0, sp, #16
   d4650:	f003 ff51 	bl	d84f6 <_ZN6StringC1Efi>
   d4654:	9a04      	ldr	r2, [sp, #16]
   d4656:	496b      	ldr	r1, [pc, #428]	; (d4804 <loop+0x3b8>)
   d4658:	a802      	add	r0, sp, #8
   d465a:	f7ff fd2d 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d465e:	a803      	add	r0, sp, #12
   d4660:	f7ff fede 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4664:	a804      	add	r0, sp, #16
   d4666:	f003 fecf 	bl	d8408 <_ZN6StringD1Ev>
  Particle.publish("Outdoor Temp",String (tempOutdoor));
   d466a:	ed95 0a00 	vldr	s0, [r5]
   d466e:	2106      	movs	r1, #6
   d4670:	a804      	add	r0, sp, #16
   d4672:	f003 ff40 	bl	d84f6 <_ZN6StringC1Efi>
   d4676:	9a04      	ldr	r2, [sp, #16]
   d4678:	4963      	ldr	r1, [pc, #396]	; (d4808 <loop+0x3bc>)
   d467a:	a802      	add	r0, sp, #8
   d467c:	f7ff fd1c 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4680:	a803      	add	r0, sp, #12
   d4682:	f7ff fecd 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4686:	a804      	add	r0, sp, #16
   d4688:	f003 febe 	bl	d8408 <_ZN6StringD1Ev>
  Particle.publish("Outdoor Humidity", String (humidity));
   d468c:	ed98 0a00 	vldr	s0, [r8]
   d4690:	2106      	movs	r1, #6
   d4692:	a804      	add	r0, sp, #16
   d4694:	f003 ff2f 	bl	d84f6 <_ZN6StringC1Efi>
   d4698:	9a04      	ldr	r2, [sp, #16]
   d469a:	495c      	ldr	r1, [pc, #368]	; (d480c <loop+0x3c0>)
   d469c:	a802      	add	r0, sp, #8
   d469e:	f7ff fd0b 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d46a2:	a803      	add	r0, sp, #12
   d46a4:	f7ff febc 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46a8:	a804      	add	r0, sp, #16
   d46aa:	f003 fead 	bl	d8408 <_ZN6StringD1Ev>
  Particle.publish("Indoor Heat Index",String(indoorHeatIndex(temp, humidity)));
   d46ae:	f8d8 0000 	ldr.w	r0, [r8]
   d46b2:	f005 fb01 	bl	d9cb8 <__aeabi_f2d>
   d46b6:	ec41 0b19 	vmov	d9, r0, r1
   d46ba:	6820      	ldr	r0, [r4, #0]
   d46bc:	f005 fafc 	bl	d9cb8 <__aeabi_f2d>
   d46c0:	eeb0 1a49 	vmov.f32	s2, s18
   d46c4:	eef0 1a69 	vmov.f32	s3, s19
   d46c8:	ec41 0b10 	vmov	d0, r0, r1
   d46cc:	f7ff fddc 	bl	d4288 <_Z15indoorHeatIndexdd>
   d46d0:	2106      	movs	r1, #6
   d46d2:	a804      	add	r0, sp, #16
   d46d4:	f003 ff29 	bl	d852a <_ZN6StringC1Edi>
   d46d8:	9a04      	ldr	r2, [sp, #16]
   d46da:	494d      	ldr	r1, [pc, #308]	; (d4810 <loop+0x3c4>)
   d46dc:	a802      	add	r0, sp, #8
   d46de:	f7ff fceb 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d46e2:	a803      	add	r0, sp, #12
   d46e4:	f7ff fe9c 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46e8:	a804      	add	r0, sp, #16
   d46ea:	f003 fe8d 	bl	d8408 <_ZN6StringD1Ev>
  Particle.publish("Outdoor Heat Index",String(outdoorHeatIndex(tempOutdoor, humidityOutdoor)));
   d46ee:	6830      	ldr	r0, [r6, #0]
   d46f0:	f005 fae2 	bl	d9cb8 <__aeabi_f2d>
   d46f4:	ec41 0b19 	vmov	d9, r0, r1
   d46f8:	6828      	ldr	r0, [r5, #0]
   d46fa:	f005 fadd 	bl	d9cb8 <__aeabi_f2d>
   d46fe:	eeb0 1a49 	vmov.f32	s2, s18
   d4702:	eef0 1a69 	vmov.f32	s3, s19
   d4706:	ec41 0b10 	vmov	d0, r0, r1
   d470a:	f7ff fdbd 	bl	d4288 <_Z15indoorHeatIndexdd>
   d470e:	2106      	movs	r1, #6
   d4710:	a804      	add	r0, sp, #16
   d4712:	f003 ff0a 	bl	d852a <_ZN6StringC1Edi>
   d4716:	9a04      	ldr	r2, [sp, #16]
   d4718:	493e      	ldr	r1, [pc, #248]	; (d4814 <loop+0x3c8>)
   d471a:	a802      	add	r0, sp, #8
   d471c:	f7ff fccc 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4720:	a803      	add	r0, sp, #12
   d4722:	f7ff fe7d 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4726:	a804      	add	r0, sp, #16
   d4728:	f003 fe6e 	bl	d8408 <_ZN6StringD1Ev>
  Serial.println(long(indoorHeatIndex(temp, humidity)));
   d472c:	f004 fde4 	bl	d92f8 <_Z16_fetch_usbserialv>
   d4730:	4607      	mov	r7, r0
   d4732:	f8d8 0000 	ldr.w	r0, [r8]
   d4736:	f005 fabf 	bl	d9cb8 <__aeabi_f2d>
   d473a:	ec41 0b19 	vmov	d9, r0, r1
   d473e:	6820      	ldr	r0, [r4, #0]
   d4740:	f005 faba 	bl	d9cb8 <__aeabi_f2d>
   d4744:	eeb0 1a49 	vmov.f32	s2, s18
   d4748:	eef0 1a69 	vmov.f32	s3, s19
   d474c:	ec41 0b10 	vmov	d0, r0, r1
   d4750:	f7ff fd9a 	bl	d4288 <_Z15indoorHeatIndexdd>
   d4754:	ec51 0b10 	vmov	r0, r1, d0
   d4758:	f005 fdb6 	bl	da2c8 <__aeabi_d2iz>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d475c:	1e04      	subs	r4, r0, #0
   d475e:	da3a      	bge.n	d47d6 <loop+0x38a>
            t = print('-');
   d4760:	212d      	movs	r1, #45	; 0x2d
   d4762:	4638      	mov	r0, r7
   d4764:	f003 fcc8 	bl	d80f8 <_ZN5Print5printEc>
            val = -n;
   d4768:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d476a:	220a      	movs	r2, #10
   d476c:	4638      	mov	r0, r7
   d476e:	f003 fcdc 	bl	d812a <_ZN5Print11printNumberEmh>
        n += println();
   d4772:	4638      	mov	r0, r7
   d4774:	f003 fcc3 	bl	d80fe <_ZN5Print7printlnEv>
  Serial.println(long(outdoorHeatIndex(tempOutdoor, humidityOutdoor)));
   d4778:	f004 fdbe 	bl	d92f8 <_Z16_fetch_usbserialv>
   d477c:	4607      	mov	r7, r0
   d477e:	6830      	ldr	r0, [r6, #0]
   d4780:	f005 fa9a 	bl	d9cb8 <__aeabi_f2d>
   d4784:	ec41 0b19 	vmov	d9, r0, r1
   d4788:	6828      	ldr	r0, [r5, #0]
   d478a:	f005 fa95 	bl	d9cb8 <__aeabi_f2d>
   d478e:	eeb0 1a49 	vmov.f32	s2, s18
   d4792:	eef0 1a69 	vmov.f32	s3, s19
   d4796:	ec41 0b10 	vmov	d0, r0, r1
   d479a:	f7ff fd75 	bl	d4288 <_Z15indoorHeatIndexdd>
   d479e:	ec51 0b10 	vmov	r0, r1, d0
   d47a2:	f005 fd91 	bl	da2c8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d47a6:	1e04      	subs	r4, r0, #0
   d47a8:	da17      	bge.n	d47da <loop+0x38e>
            t = print('-');
   d47aa:	212d      	movs	r1, #45	; 0x2d
   d47ac:	4638      	mov	r0, r7
   d47ae:	f003 fca3 	bl	d80f8 <_ZN5Print5printEc>
            val = -n;
   d47b2:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d47b4:	220a      	movs	r2, #10
   d47b6:	4638      	mov	r0, r7
   d47b8:	f003 fcb7 	bl	d812a <_ZN5Print11printNumberEmh>
        n += println();
   d47bc:	4638      	mov	r0, r7
   d47be:	f003 fc9e 	bl	d80fe <_ZN5Print7printlnEv>
  Serial.println(outside);
   d47c2:	f004 fd99 	bl	d92f8 <_Z16_fetch_usbserialv>
   d47c6:	eeb0 0a48 	vmov.f32	s0, s16
   d47ca:	eef0 0a68 	vmov.f32	s1, s17
   d47ce:	2102      	movs	r1, #2
   d47d0:	f003 fd92 	bl	d82f8 <_ZN5Print7printlnEdi>
   d47d4:	e682      	b.n	d44dc <loop+0x90>
            val = n;
   d47d6:	4621      	mov	r1, r4
   d47d8:	e7c7      	b.n	d476a <loop+0x31e>
   d47da:	4621      	mov	r1, r4
   d47dc:	e7ea      	b.n	d47b4 <loop+0x368>
   d47de:	bf00      	nop
   d47e0:	2003e25c 	.word	0x2003e25c
   d47e4:	000dbb9f 	.word	0x000dbb9f
   d47e8:	2003e445 	.word	0x2003e445
   d47ec:	000dc677 	.word	0x000dc677
   d47f0:	2003e460 	.word	0x2003e460
   d47f4:	2003e264 	.word	0x2003e264
   d47f8:	2003e260 	.word	0x2003e260
   d47fc:	000dc68a 	.word	0x000dc68a
   d4800:	2003e46c 	.word	0x2003e46c
   d4804:	000dc696 	.word	0x000dc696
   d4808:	000dc6a6 	.word	0x000dc6a6
   d480c:	000dc6b3 	.word	0x000dc6b3
   d4810:	000dc6c4 	.word	0x000dc6c4
   d4814:	000dc6d6 	.word	0x000dc6d6
   d4818:	2003e444 	.word	0x2003e444
   d481c:	2003e258 	.word	0x2003e258
   d4820:	2003e45c 	.word	0x2003e45c

000d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4824:	680b      	ldr	r3, [r1, #0]
   d4826:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4828:	b113      	cbz	r3, d4830 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d482a:	685a      	ldr	r2, [r3, #4]
   d482c:	3201      	adds	r2, #1
   d482e:	605a      	str	r2, [r3, #4]
      }
   d4830:	4770      	bx	lr
	...

000d4834 <_Z17setCurrentWeatherPKcS0_>:
void setCurrentWeather(const char *event, const char *data) {
   d4834:	b5f0      	push	{r4, r5, r6, r7, lr}
    Log.info("subscriptionHandler %s", data);
   d4836:	460a      	mov	r2, r1
void setCurrentWeather(const char *event, const char *data) {
   d4838:	b091      	sub	sp, #68	; 0x44
   d483a:	460c      	mov	r4, r1
    Log.info("subscriptionHandler %s", data);
   d483c:	4848      	ldr	r0, [pc, #288]	; (d4960 <_Z17setCurrentWeatherPKcS0_+0x12c>)
   d483e:	4949      	ldr	r1, [pc, #292]	; (d4964 <_Z17setCurrentWeatherPKcS0_+0x130>)
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
   d4840:	4d49      	ldr	r5, [pc, #292]	; (d4968 <_Z17setCurrentWeatherPKcS0_+0x134>)
            tempOutdoor = iter.value().toDouble();
   d4842:	4e4a      	ldr	r6, [pc, #296]	; (d496c <_Z17setCurrentWeatherPKcS0_+0x138>)
    Log.info("subscriptionHandler %s", data);
   d4844:	f7ff fc46 	bl	d40d4 <_ZNK5spark6Logger4infoEPKcz>
    return parseCopy(json, strlen(json));
   d4848:	4620      	mov	r0, r4
   d484a:	f006 f82a 	bl	da8a2 <strlen>
   d484e:	4621      	mov	r1, r4
   d4850:	4602      	mov	r2, r0
   d4852:	a803      	add	r0, sp, #12
   d4854:	f003 fb10 	bl	d7e78 <_ZN5spark9JSONValue9parseCopyEPKcj>
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
   d4858:	9c05      	ldr	r4, [sp, #20]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d485a:	9b03      	ldr	r3, [sp, #12]
   d485c:	9306      	str	r3, [sp, #24]
   d485e:	a904      	add	r1, sp, #16
   d4860:	a807      	add	r0, sp, #28
   d4862:	f7ff ffdf 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4866:	aa06      	add	r2, sp, #24
   d4868:	4621      	mov	r1, r4
   d486a:	a80a      	add	r0, sp, #40	; 0x28
   d486c:	f003 fac4 	bl	d7df8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4870:	a807      	add	r0, sp, #28
   d4872:	f7ff fdd5 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4876:	4f3e      	ldr	r7, [pc, #248]	; (d4970 <_Z17setCurrentWeatherPKcS0_+0x13c>)
    while (iter.next()) {
   d4878:	a80a      	add	r0, sp, #40	; 0x28
   d487a:	f003 fad5 	bl	d7e28 <_ZN5spark18JSONObjectIterator4nextEv>
   d487e:	2800      	cmp	r0, #0
   d4880:	d066      	beq.n	d4950 <_Z17setCurrentWeatherPKcS0_+0x11c>
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
   d4882:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4886:	9301      	str	r3, [sp, #4]
   d4888:	a90b      	add	r1, sp, #44	; 0x2c
   d488a:	a802      	add	r0, sp, #8
   d488c:	f7ff ffca 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4890:	4621      	mov	r1, r4
   d4892:	aa01      	add	r2, sp, #4
   d4894:	a806      	add	r0, sp, #24
   d4896:	f003 fa8b 	bl	d7db0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d489a:	a802      	add	r0, sp, #8
   d489c:	f7ff fdc0 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d48a0:	9808      	ldr	r0, [sp, #32]
   d48a2:	4629      	mov	r1, r5
   d48a4:	f005 ffcd 	bl	da842 <strcmp>
   d48a8:	4604      	mov	r4, r0
   d48aa:	a807      	add	r0, sp, #28
   d48ac:	f7ff fdb8 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "temp") {
   d48b0:	b9cc      	cbnz	r4, d48e6 <_Z17setCurrentWeatherPKcS0_+0xb2>
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   d48b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d48b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d48b6:	9301      	str	r3, [sp, #4]
   d48b8:	a90b      	add	r1, sp, #44	; 0x2c
   d48ba:	a802      	add	r0, sp, #8
   d48bc:	f7ff ffb2 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d48c0:	aa01      	add	r2, sp, #4
   d48c2:	4621      	mov	r1, r4
   d48c4:	a806      	add	r0, sp, #24
   d48c6:	f003 f92f 	bl	d7b28 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d48ca:	a802      	add	r0, sp, #8
   d48cc:	f7ff fda8 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            tempOutdoor = iter.value().toDouble();
   d48d0:	a806      	add	r0, sp, #24
   d48d2:	f003 f961 	bl	d7b98 <_ZNK5spark9JSONValue8toDoubleEv>
   d48d6:	ec51 0b10 	vmov	r0, r1, d0
   d48da:	f005 fd3d 	bl	da358 <__aeabi_d2f>
   d48de:	6030      	str	r0, [r6, #0]
   d48e0:	a807      	add	r0, sp, #28
   d48e2:	f7ff fd9d 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(k_, d_);
   d48e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d48e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d48ea:	9301      	str	r3, [sp, #4]
   d48ec:	a90b      	add	r1, sp, #44	; 0x2c
   d48ee:	a802      	add	r0, sp, #8
   d48f0:	f7ff ff98 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d48f4:	4621      	mov	r1, r4
   d48f6:	aa01      	add	r2, sp, #4
   d48f8:	a806      	add	r0, sp, #24
   d48fa:	f003 fa59 	bl	d7db0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d48fe:	a802      	add	r0, sp, #8
   d4900:	f7ff fd8e 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4904:	9808      	ldr	r0, [sp, #32]
   d4906:	4639      	mov	r1, r7
   d4908:	f005 ff9b 	bl	da842 <strcmp>
   d490c:	4604      	mov	r4, r0
   d490e:	a807      	add	r0, sp, #28
   d4910:	f7ff fd86 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "hum") {
   d4914:	2c00      	cmp	r4, #0
   d4916:	d1af      	bne.n	d4878 <_Z17setCurrentWeatherPKcS0_+0x44>
    return JSONValue(v_, d_);
   d4918:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d491a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	a90b      	add	r1, sp, #44	; 0x2c
   d4920:	a802      	add	r0, sp, #8
   d4922:	f7ff ff7f 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4926:	aa01      	add	r2, sp, #4
   d4928:	4621      	mov	r1, r4
   d492a:	a806      	add	r0, sp, #24
   d492c:	f003 f8fc 	bl	d7b28 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4930:	a802      	add	r0, sp, #8
   d4932:	f7ff fd75 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            humidityOutdoor = iter.value().toDouble();
   d4936:	a806      	add	r0, sp, #24
   d4938:	f003 f92e 	bl	d7b98 <_ZNK5spark9JSONValue8toDoubleEv>
   d493c:	ec51 0b10 	vmov	r0, r1, d0
   d4940:	f005 fd0a 	bl	da358 <__aeabi_d2f>
   d4944:	4b0b      	ldr	r3, [pc, #44]	; (d4974 <_Z17setCurrentWeatherPKcS0_+0x140>)
   d4946:	6018      	str	r0, [r3, #0]
   d4948:	a807      	add	r0, sp, #28
   d494a:	f7ff fd69 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d494e:	e792      	b.n	d4876 <_Z17setCurrentWeatherPKcS0_+0x42>
   d4950:	a80b      	add	r0, sp, #44	; 0x2c
   d4952:	f7ff fd65 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4956:	a804      	add	r0, sp, #16
   d4958:	f7ff fd62 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }}
   d495c:	b011      	add	sp, #68	; 0x44
   d495e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4960:	2003e658 	.word	0x2003e658
   d4964:	000dc6e9 	.word	0x000dc6e9
   d4968:	000dc700 	.word	0x000dc700
   d496c:	2003e264 	.word	0x2003e264
   d4970:	000dc705 	.word	0x000dc705
   d4974:	2003e260 	.word	0x2003e260

000d4978 <_GLOBAL__sub_I_WEBHOOK_NAME>:
                           (c7 * (tempOutdoor * tempOutdoor) * humidityOutdoor) + 
                           (c8 * tempOutdoor * (humidityOutdoor * humidityOutdoor)) +
                           (c9 * (tempOutdoor * tempOutdoor) * (humidityOutdoor * humidityOutdoor));

  return outHeatIndex;
}   
   d4978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d497a:	4b19      	ldr	r3, [pc, #100]	; (d49e0 <_GLOBAL__sub_I_WEBHOOK_NAME+0x68>)
Ubidots ubidots("webhook", UBI_PARTICLE); 
   d497c:	4c19      	ldr	r4, [pc, #100]	; (d49e4 <_GLOBAL__sub_I_WEBHOOK_NAME+0x6c>)
   d497e:	491a      	ldr	r1, [pc, #104]	; (d49e8 <_GLOBAL__sub_I_WEBHOOK_NAME+0x70>)
   d4980:	4e1a      	ldr	r6, [pc, #104]	; (d49ec <_GLOBAL__sub_I_WEBHOOK_NAME+0x74>)
ChainableLED leds (RX, TX, 1);
   d4982:	4d1b      	ldr	r5, [pc, #108]	; (d49f0 <_GLOBAL__sub_I_WEBHOOK_NAME+0x78>)
   d4984:	2200      	movs	r2, #0
   d4986:	701a      	strb	r2, [r3, #0]
   d4988:	4b1a      	ldr	r3, [pc, #104]	; (d49f4 <_GLOBAL__sub_I_WEBHOOK_NAME+0x7c>)
   d498a:	2701      	movs	r7, #1
   d498c:	701f      	strb	r7, [r3, #0]
Ubidots ubidots("webhook", UBI_PARTICLE); 
   d498e:	2203      	movs	r2, #3
   d4990:	4620      	mov	r0, r4
   d4992:	f002 f905 	bl	d6ba0 <_ZN7UbidotsC1EPc11IotProtocol>
   d4996:	4620      	mov	r0, r4
DHT dht(DHTPIN, DHTTYPE); 
   d4998:	4c17      	ldr	r4, [pc, #92]	; (d49f8 <_GLOBAL__sub_I_WEBHOOK_NAME+0x80>)
Ubidots ubidots("webhook", UBI_PARTICLE); 
   d499a:	4918      	ldr	r1, [pc, #96]	; (d49fc <_GLOBAL__sub_I_WEBHOOK_NAME+0x84>)
   d499c:	4632      	mov	r2, r6
   d499e:	f004 fe4b 	bl	d9638 <__aeabi_atexit>
DHT dht(DHTPIN, DHTTYPE); 
   d49a2:	2306      	movs	r3, #6
   d49a4:	220b      	movs	r2, #11
   d49a6:	2113      	movs	r1, #19
   d49a8:	4620      	mov	r0, r4
   d49aa:	f000 f862 	bl	d4a72 <_ZN3DHTC1Ehhh>
ChainableLED leds (RX, TX, 1);
   d49ae:	463b      	mov	r3, r7
   d49b0:	2209      	movs	r2, #9
   d49b2:	210a      	movs	r1, #10
   d49b4:	4628      	mov	r0, r5
   d49b6:	f000 fa95 	bl	d4ee4 <_ZN12ChainableLEDC1Ehhh>
   d49ba:	4911      	ldr	r1, [pc, #68]	; (d4a00 <_GLOBAL__sub_I_WEBHOOK_NAME+0x88>)
   d49bc:	4632      	mov	r2, r6
   d49be:	4628      	mov	r0, r5
   d49c0:	f004 fe3a 	bl	d9638 <__aeabi_atexit>
float humidity = dht.getHumidity();
   d49c4:	4620      	mov	r0, r4
   d49c6:	f000 fa8b 	bl	d4ee0 <_ZN3DHT11getHumidityEv>
   d49ca:	4b0e      	ldr	r3, [pc, #56]	; (d4a04 <_GLOBAL__sub_I_WEBHOOK_NAME+0x8c>)
float temp = dht.getTempFarenheit();
   d49cc:	4620      	mov	r0, r4
float humidity = dht.getHumidity();
   d49ce:	ed83 0a00 	vstr	s0, [r3]
float temp = dht.getTempFarenheit();
   d49d2:	f000 fa47 	bl	d4e64 <_ZN3DHT16getTempFarenheitEv>
   d49d6:	4b0c      	ldr	r3, [pc, #48]	; (d4a08 <_GLOBAL__sub_I_WEBHOOK_NAME+0x90>)
   d49d8:	ed83 0a00 	vstr	s0, [r3]
}   
   d49dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d49de:	bf00      	nop
   d49e0:	2003e444 	.word	0x2003e444
   d49e4:	2003e46c 	.word	0x2003e46c
   d49e8:	000dc709 	.word	0x000dc709
   d49ec:	2003e440 	.word	0x2003e440
   d49f0:	2003e460 	.word	0x2003e460
   d49f4:	2003e445 	.word	0x2003e445
   d49f8:	2003e448 	.word	0x2003e448
   d49fc:	000d6bbd 	.word	0x000d6bbd
   d4a00:	000d4eff 	.word	0x000d4eff
   d4a04:	2003e45c 	.word	0x2003e45c
   d4a08:	2003e468 	.word	0x2003e468

000d4a0c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4a0c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4a0e:	6803      	ldr	r3, [r0, #0]
   d4a10:	2b2f      	cmp	r3, #47	; 0x2f
{
   d4a12:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4a14:	d904      	bls.n	d4a20 <nrf_gpio_pin_port_decode+0x14>
   d4a16:	4a07      	ldr	r2, [pc, #28]	; (d4a34 <nrf_gpio_pin_port_decode+0x28>)
   d4a18:	2100      	movs	r1, #0
   d4a1a:	200a      	movs	r0, #10
   d4a1c:	f002 fa9e 	bl	d6f5c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4a20:	6823      	ldr	r3, [r4, #0]
   d4a22:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4a24:	bf83      	ittte	hi
   d4a26:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4a2a:	4803      	ldrhi	r0, [pc, #12]	; (d4a38 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4a2c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4a2e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d4a32:	bd10      	pop	{r4, pc}
   d4a34:	000d6c2d 	.word	0x000d6c2d
   d4a38:	50000300 	.word	0x50000300

000d4a3c <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4a3c:	b507      	push	{r0, r1, r2, lr}
   d4a3e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4a40:	a801      	add	r0, sp, #4
   d4a42:	f7ff ffe3 	bl	d4a0c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4a46:	9a01      	ldr	r2, [sp, #4]
   d4a48:	2301      	movs	r3, #1
   d4a4a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4a4c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4a50:	b003      	add	sp, #12
   d4a52:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a56 <nrf_gpio_pin_read>:
{
   d4a56:	b507      	push	{r0, r1, r2, lr}
   d4a58:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4a5a:	a801      	add	r0, sp, #4
   d4a5c:	f7ff ffd6 	bl	d4a0c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4a60:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4a62:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4a66:	40d8      	lsrs	r0, r3
}
   d4a68:	f000 0001 	and.w	r0, r0, #1
   d4a6c:	b003      	add	sp, #12
   d4a6e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a72 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4a72:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4a74:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4a76:	2301      	movs	r3, #1
	_pin = pin;
   d4a78:	7181      	strb	r1, [r0, #6]
	_type = type;
   d4a7a:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4a7c:	7403      	strb	r3, [r0, #16]
}
   d4a7e:	bd10      	pop	{r4, pc}

000d4a80 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a84:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4a86:	4c1e      	ldr	r4, [pc, #120]	; (d4b00 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4a88:	7980      	ldrb	r0, [r0, #6]
   d4a8a:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4b04 <_ZN3DHT5beginEv+0x84>
   d4a8e:	2100      	movs	r1, #0
   d4a90:	f004 fd68 	bl	d9564 <pinMode>
	pinSetFast(_pin);
   d4a94:	79ae      	ldrb	r6, [r5, #6]
   d4a96:	7823      	ldrb	r3, [r4, #0]
   d4a98:	f3bf 8f5b 	dmb	ish
   d4a9c:	f013 0f01 	tst.w	r3, #1
   d4aa0:	d10a      	bne.n	d4ab8 <_ZN3DHT5beginEv+0x38>
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	f7ff faff 	bl	d40a6 <__cxa_guard_acquire>
   d4aa8:	b130      	cbz	r0, d4ab8 <_ZN3DHT5beginEv+0x38>
   d4aaa:	f002 f8cf 	bl	d6c4c <HAL_Pin_Map>
   d4aae:	f8c8 0000 	str.w	r0, [r8]
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	f7ff fafc 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ab8:	f8d8 3000 	ldr.w	r3, [r8]
   d4abc:	0136      	lsls	r6, r6, #4
   d4abe:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ac0:	7823      	ldrb	r3, [r4, #0]
   d4ac2:	f3bf 8f5b 	dmb	ish
   d4ac6:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ac8:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4acc:	d40a      	bmi.n	d4ae4 <_ZN3DHT5beginEv+0x64>
   d4ace:	480c      	ldr	r0, [pc, #48]	; (d4b00 <_ZN3DHT5beginEv+0x80>)
   d4ad0:	f7ff fae9 	bl	d40a6 <__cxa_guard_acquire>
   d4ad4:	b130      	cbz	r0, d4ae4 <_ZN3DHT5beginEv+0x64>
   d4ad6:	f002 f8b9 	bl	d6c4c <HAL_Pin_Map>
   d4ada:	f8c8 0000 	str.w	r0, [r8]
   d4ade:	4808      	ldr	r0, [pc, #32]	; (d4b00 <_ZN3DHT5beginEv+0x80>)
   d4ae0:	f7ff fae6 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ae4:	f8d8 3000 	ldr.w	r3, [r8]
   d4ae8:	4433      	add	r3, r6
   d4aea:	785b      	ldrb	r3, [r3, #1]
   d4aec:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4af0:	ea43 0007 	orr.w	r0, r3, r7
   d4af4:	f7ff ffa2 	bl	d4a3c <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d4af8:	2300      	movs	r3, #0
   d4afa:	60eb      	str	r3, [r5, #12]
}
   d4afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b00:	2003e478 	.word	0x2003e478
   d4b04:	2003e47c 	.word	0x2003e47c

000d4b08 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d4b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b0c:	4604      	mov	r4, r0
   d4b0e:	b085      	sub	sp, #20
   d4b10:	f002 f894 	bl	d6c3c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4b14:	68e3      	ldr	r3, [r4, #12]
   d4b16:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4b18:	bf84      	itt	hi
   d4b1a:	2300      	movhi	r3, #0
   d4b1c:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4b1e:	7c23      	ldrb	r3, [r4, #16]
   d4b20:	b92b      	cbnz	r3, d4b2e <_ZN3DHT4readEv+0x26>
   d4b22:	68e3      	ldr	r3, [r4, #12]
   d4b24:	1ac0      	subs	r0, r0, r3
   d4b26:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4b2a:	f0c0 8160 	bcc.w	d4dee <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4b2e:	2500      	movs	r5, #0
   d4b30:	7425      	strb	r5, [r4, #16]
   d4b32:	f002 f883 	bl	d6c3c <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b36:	4eb0      	ldr	r6, [pc, #704]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4b38:	6025      	str	r5, [r4, #0]
   d4b3a:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d4b3c:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d4b3e:	79a7      	ldrb	r7, [r4, #6]
   d4b40:	7833      	ldrb	r3, [r6, #0]
   d4b42:	4dae      	ldr	r5, [pc, #696]	; (d4dfc <_ZN3DHT4readEv+0x2f4>)
   d4b44:	f3bf 8f5b 	dmb	ish
   d4b48:	f013 0f01 	tst.w	r3, #1
   d4b4c:	d109      	bne.n	d4b62 <_ZN3DHT4readEv+0x5a>
   d4b4e:	4630      	mov	r0, r6
   d4b50:	f7ff faa9 	bl	d40a6 <__cxa_guard_acquire>
   d4b54:	b128      	cbz	r0, d4b62 <_ZN3DHT4readEv+0x5a>
   d4b56:	f002 f879 	bl	d6c4c <HAL_Pin_Map>
   d4b5a:	6028      	str	r0, [r5, #0]
   d4b5c:	4630      	mov	r0, r6
   d4b5e:	f7ff faa7 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b62:	682b      	ldr	r3, [r5, #0]
   d4b64:	013f      	lsls	r7, r7, #4
   d4b66:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b6a:	7833      	ldrb	r3, [r6, #0]
   d4b6c:	f3bf 8f5b 	dmb	ish
   d4b70:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b72:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b76:	d409      	bmi.n	d4b8c <_ZN3DHT4readEv+0x84>
   d4b78:	489f      	ldr	r0, [pc, #636]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4b7a:	f7ff fa94 	bl	d40a6 <__cxa_guard_acquire>
   d4b7e:	b128      	cbz	r0, d4b8c <_ZN3DHT4readEv+0x84>
   d4b80:	f002 f864 	bl	d6c4c <HAL_Pin_Map>
   d4b84:	6028      	str	r0, [r5, #0]
   d4b86:	489c      	ldr	r0, [pc, #624]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4b88:	f7ff fa92 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b8c:	682b      	ldr	r3, [r5, #0]
   d4b8e:	441f      	add	r7, r3
   d4b90:	7878      	ldrb	r0, [r7, #1]
   d4b92:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4b96:	ea40 0008 	orr.w	r0, r0, r8
   d4b9a:	f7ff ff4f 	bl	d4a3c <nrf_gpio_pin_set>
	delay(250);
   d4b9e:	20fa      	movs	r0, #250	; 0xfa
   d4ba0:	f002 fb08 	bl	d71b4 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4ba4:	79a0      	ldrb	r0, [r4, #6]
   d4ba6:	2101      	movs	r1, #1
   d4ba8:	f004 fcdc 	bl	d9564 <pinMode>
	pinResetFast(_pin);
   d4bac:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4bae:	7833      	ldrb	r3, [r6, #0]
   d4bb0:	f3bf 8f5b 	dmb	ish
   d4bb4:	07da      	lsls	r2, r3, #31
   d4bb6:	d409      	bmi.n	d4bcc <_ZN3DHT4readEv+0xc4>
   d4bb8:	488f      	ldr	r0, [pc, #572]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4bba:	f7ff fa74 	bl	d40a6 <__cxa_guard_acquire>
   d4bbe:	b128      	cbz	r0, d4bcc <_ZN3DHT4readEv+0xc4>
   d4bc0:	f002 f844 	bl	d6c4c <HAL_Pin_Map>
   d4bc4:	6028      	str	r0, [r5, #0]
   d4bc6:	488c      	ldr	r0, [pc, #560]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4bc8:	f7ff fa72 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4bcc:	682b      	ldr	r3, [r5, #0]
   d4bce:	013f      	lsls	r7, r7, #4
   d4bd0:	5ddb      	ldrb	r3, [r3, r7]
   d4bd2:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4bd6:	7833      	ldrb	r3, [r6, #0]
   d4bd8:	f3bf 8f5b 	dmb	ish
   d4bdc:	07db      	lsls	r3, r3, #31
   d4bde:	d409      	bmi.n	d4bf4 <_ZN3DHT4readEv+0xec>
   d4be0:	4885      	ldr	r0, [pc, #532]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4be2:	f7ff fa60 	bl	d40a6 <__cxa_guard_acquire>
   d4be6:	b128      	cbz	r0, d4bf4 <_ZN3DHT4readEv+0xec>
   d4be8:	f002 f830 	bl	d6c4c <HAL_Pin_Map>
   d4bec:	6028      	str	r0, [r5, #0]
   d4bee:	4882      	ldr	r0, [pc, #520]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4bf0:	f7ff fa5e 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4bf4:	682b      	ldr	r3, [r5, #0]
   d4bf6:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4bf8:	a803      	add	r0, sp, #12
   d4bfa:	787b      	ldrb	r3, [r7, #1]
   d4bfc:	f003 031f 	and.w	r3, r3, #31
   d4c00:	ea43 0308 	orr.w	r3, r3, r8
   d4c04:	9303      	str	r3, [sp, #12]
   d4c06:	f7ff ff01 	bl	d4a0c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4c0a:	9a03      	ldr	r2, [sp, #12]
   d4c0c:	2301      	movs	r3, #1
   d4c0e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4c10:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4c14:	2014      	movs	r0, #20
   d4c16:	f002 facd 	bl	d71b4 <delay>
	noInterrupts();
   d4c1a:	f002 fe89 	bl	d7930 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4c1e:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4c20:	7833      	ldrb	r3, [r6, #0]
   d4c22:	f3bf 8f5b 	dmb	ish
   d4c26:	07d8      	lsls	r0, r3, #31
   d4c28:	d409      	bmi.n	d4c3e <_ZN3DHT4readEv+0x136>
   d4c2a:	4873      	ldr	r0, [pc, #460]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4c2c:	f7ff fa3b 	bl	d40a6 <__cxa_guard_acquire>
   d4c30:	b128      	cbz	r0, d4c3e <_ZN3DHT4readEv+0x136>
   d4c32:	f002 f80b 	bl	d6c4c <HAL_Pin_Map>
   d4c36:	6028      	str	r0, [r5, #0]
   d4c38:	486f      	ldr	r0, [pc, #444]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4c3a:	f7ff fa39 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4c3e:	682b      	ldr	r3, [r5, #0]
   d4c40:	013f      	lsls	r7, r7, #4
   d4c42:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4c46:	7833      	ldrb	r3, [r6, #0]
   d4c48:	f3bf 8f5b 	dmb	ish
   d4c4c:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4c4e:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4c52:	d409      	bmi.n	d4c68 <_ZN3DHT4readEv+0x160>
   d4c54:	4868      	ldr	r0, [pc, #416]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4c56:	f7ff fa26 	bl	d40a6 <__cxa_guard_acquire>
   d4c5a:	b128      	cbz	r0, d4c68 <_ZN3DHT4readEv+0x160>
   d4c5c:	f001 fff6 	bl	d6c4c <HAL_Pin_Map>
   d4c60:	6028      	str	r0, [r5, #0]
   d4c62:	4865      	ldr	r0, [pc, #404]	; (d4df8 <_ZN3DHT4readEv+0x2f0>)
   d4c64:	f7ff fa24 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4c68:	682b      	ldr	r3, [r5, #0]
   d4c6a:	441f      	add	r7, r3
   d4c6c:	7878      	ldrb	r0, [r7, #1]
   d4c6e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4c72:	ea40 0008 	orr.w	r0, r0, r8
   d4c76:	f7ff fee1 	bl	d4a3c <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4c7a:	2028      	movs	r0, #40	; 0x28
   d4c7c:	f001 ffd6 	bl	d6c2c <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4c80:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4c82:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4df8 <_ZN3DHT4readEv+0x2f0>
   d4c86:	2100      	movs	r1, #0
   d4c88:	f004 fc6c 	bl	d9564 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d4c8c:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d4c8e:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4c90:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4c92:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4c94:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4c98:	f894 b006 	ldrb.w	fp, [r4, #6]
   d4c9c:	7833      	ldrb	r3, [r6, #0]
   d4c9e:	f3bf 8f5b 	dmb	ish
   d4ca2:	07da      	lsls	r2, r3, #31
   d4ca4:	d409      	bmi.n	d4cba <_ZN3DHT4readEv+0x1b2>
   d4ca6:	4640      	mov	r0, r8
   d4ca8:	f7ff f9fd 	bl	d40a6 <__cxa_guard_acquire>
   d4cac:	b128      	cbz	r0, d4cba <_ZN3DHT4readEv+0x1b2>
   d4cae:	f001 ffcd 	bl	d6c4c <HAL_Pin_Map>
   d4cb2:	6028      	str	r0, [r5, #0]
   d4cb4:	4640      	mov	r0, r8
   d4cb6:	f7ff f9fb 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4cba:	682b      	ldr	r3, [r5, #0]
   d4cbc:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4cc0:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4cc4:	015b      	lsls	r3, r3, #5
   d4cc6:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4cc8:	7833      	ldrb	r3, [r6, #0]
   d4cca:	f3bf 8f5b 	dmb	ish
   d4cce:	07db      	lsls	r3, r3, #31
   d4cd0:	d409      	bmi.n	d4ce6 <_ZN3DHT4readEv+0x1de>
   d4cd2:	4640      	mov	r0, r8
   d4cd4:	f7ff f9e7 	bl	d40a6 <__cxa_guard_acquire>
   d4cd8:	b128      	cbz	r0, d4ce6 <_ZN3DHT4readEv+0x1de>
   d4cda:	f001 ffb7 	bl	d6c4c <HAL_Pin_Map>
   d4cde:	6028      	str	r0, [r5, #0]
   d4ce0:	4640      	mov	r0, r8
   d4ce2:	f7ff f9e5 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ce6:	682b      	ldr	r3, [r5, #0]
   d4ce8:	445b      	add	r3, fp
   d4cea:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4cee:	9b01      	ldr	r3, [sp, #4]
   d4cf0:	f00b 0b1f 	and.w	fp, fp, #31
   d4cf4:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4cf8:	4658      	mov	r0, fp
   d4cfa:	f7ff feac 	bl	d4a56 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4cfe:	4658      	mov	r0, fp
   d4d00:	f7ff fea9 	bl	d4a56 <nrf_gpio_pin_read>
   d4d04:	9b00      	ldr	r3, [sp, #0]
   d4d06:	4283      	cmp	r3, r0
   d4d08:	d109      	bne.n	d4d1e <_ZN3DHT4readEv+0x216>
			counter++;
   d4d0a:	f109 0901 	add.w	r9, r9, #1
   d4d0e:	fa5f f989 	uxtb.w	r9, r9
   d4d12:	2001      	movs	r0, #1
   d4d14:	f001 ff8a 	bl	d6c2c <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4d18:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4d1c:	d1bc      	bne.n	d4c98 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4d1e:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4d22:	7833      	ldrb	r3, [r6, #0]
   d4d24:	f3bf 8f5b 	dmb	ish
   d4d28:	07d8      	lsls	r0, r3, #31
   d4d2a:	d409      	bmi.n	d4d40 <_ZN3DHT4readEv+0x238>
   d4d2c:	4640      	mov	r0, r8
   d4d2e:	f7ff f9ba 	bl	d40a6 <__cxa_guard_acquire>
   d4d32:	b128      	cbz	r0, d4d40 <_ZN3DHT4readEv+0x238>
   d4d34:	f001 ff8a 	bl	d6c4c <HAL_Pin_Map>
   d4d38:	6028      	str	r0, [r5, #0]
   d4d3a:	4640      	mov	r0, r8
   d4d3c:	f7ff f9b8 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4d40:	682b      	ldr	r3, [r5, #0]
   d4d42:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4d46:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4d4a:	015b      	lsls	r3, r3, #5
   d4d4c:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4d4e:	7833      	ldrb	r3, [r6, #0]
   d4d50:	f3bf 8f5b 	dmb	ish
   d4d54:	07d9      	lsls	r1, r3, #31
   d4d56:	d409      	bmi.n	d4d6c <_ZN3DHT4readEv+0x264>
   d4d58:	4640      	mov	r0, r8
   d4d5a:	f7ff f9a4 	bl	d40a6 <__cxa_guard_acquire>
   d4d5e:	b128      	cbz	r0, d4d6c <_ZN3DHT4readEv+0x264>
   d4d60:	f001 ff74 	bl	d6c4c <HAL_Pin_Map>
   d4d64:	6028      	str	r0, [r5, #0]
   d4d66:	4640      	mov	r0, r8
   d4d68:	f7ff f9a2 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4d6c:	682b      	ldr	r3, [r5, #0]
   d4d6e:	445b      	add	r3, fp
   d4d70:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4d74:	9b00      	ldr	r3, [sp, #0]
   d4d76:	f00b 0b1f 	and.w	fp, fp, #31
   d4d7a:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d4d7e:	4658      	mov	r0, fp
   d4d80:	f7ff fe69 	bl	d4a56 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4d84:	4658      	mov	r0, fp
   d4d86:	f7ff fe66 	bl	d4a56 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d4d8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d4d8e:	b2c3      	uxtb	r3, r0
   d4d90:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4d92:	d018      	beq.n	d4dc6 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4d94:	2f03      	cmp	r7, #3
   d4d96:	d911      	bls.n	d4dbc <_ZN3DHT4readEv+0x2b4>
   d4d98:	07fa      	lsls	r2, r7, #31
   d4d9a:	d40f      	bmi.n	d4dbc <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4d9c:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4da0:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d4da4:	5ca3      	ldrb	r3, [r4, r2]
   d4da6:	005b      	lsls	r3, r3, #1
   d4da8:	b2db      	uxtb	r3, r3
   d4daa:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4dac:	7a21      	ldrb	r1, [r4, #8]
   d4dae:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4db0:	bf3c      	itt	cc
   d4db2:	f043 0301 	orrcc.w	r3, r3, #1
   d4db6:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4db8:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4dbc:	3701      	adds	r7, #1
   d4dbe:	b2ff      	uxtb	r7, r7
   d4dc0:	2f55      	cmp	r7, #85	; 0x55
   d4dc2:	f47f af67 	bne.w	d4c94 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d4dc6:	f002 fdb5 	bl	d7934 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d4dca:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4dce:	d910      	bls.n	d4df2 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4dd0:	7863      	ldrb	r3, [r4, #1]
   d4dd2:	7820      	ldrb	r0, [r4, #0]
   d4dd4:	4418      	add	r0, r3
   d4dd6:	78a3      	ldrb	r3, [r4, #2]
   d4dd8:	4418      	add	r0, r3
   d4dda:	78e3      	ldrb	r3, [r4, #3]
   d4ddc:	4418      	add	r0, r3
   d4dde:	7923      	ldrb	r3, [r4, #4]
   d4de0:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d4de2:	1ac3      	subs	r3, r0, r3
   d4de4:	4258      	negs	r0, r3
   d4de6:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d4de8:	b005      	add	sp, #20
   d4dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4dee:	2001      	movs	r0, #1
   d4df0:	e7fa      	b.n	d4de8 <_ZN3DHT4readEv+0x2e0>
	return false;
   d4df2:	2000      	movs	r0, #0
   d4df4:	e7f8      	b.n	d4de8 <_ZN3DHT4readEv+0x2e0>
   d4df6:	bf00      	nop
   d4df8:	2003e478 	.word	0x2003e478
   d4dfc:	2003e47c 	.word	0x2003e47c

000d4e00 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4e00:	b510      	push	{r4, lr}
   d4e02:	4604      	mov	r4, r0
	if (read()) {
   d4e04:	f7ff fe80 	bl	d4b08 <_ZN3DHT4readEv>
   d4e08:	b320      	cbz	r0, d4e54 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d4e0a:	79e3      	ldrb	r3, [r4, #7]
   d4e0c:	2b0b      	cmp	r3, #11
   d4e0e:	d01b      	beq.n	d4e48 <_ZN3DHT15readTemperatureEv+0x48>
   d4e10:	3b15      	subs	r3, #21
   d4e12:	2b01      	cmp	r3, #1
   d4e14:	d81e      	bhi.n	d4e54 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d4e16:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d4e18:	eddf 6a10 	vldr	s13, [pc, #64]	; d4e5c <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4e20:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d4e24:	78e2      	ldrb	r2, [r4, #3]
   d4e26:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d4e2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d4e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d4e32:	061b      	lsls	r3, r3, #24
				f += data[3];
   d4e34:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4e38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4e3c:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4e40:	d507      	bpl.n	d4e52 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d4e42:	eeb1 0a40 	vneg.f32	s0, s0
   d4e46:	e004      	b.n	d4e52 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d4e48:	78a3      	ldrb	r3, [r4, #2]
   d4e4a:	ee00 3a10 	vmov	s0, r3
   d4e4e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4e52:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4e54:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4e60 <_ZN3DHT15readTemperatureEv+0x60>
   d4e58:	e7fb      	b.n	d4e52 <_ZN3DHT15readTemperatureEv+0x52>
   d4e5a:	bf00      	nop
   d4e5c:	43800000 	.word	0x43800000
   d4e60:	7fc00000 	.word	0x7fc00000

000d4e64 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d4e64:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4e66:	f7ff ffcb 	bl	d4e00 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d4e6a:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4e6e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4e72:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4e76:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d4e7a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4e84 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4e7e:	ee37 0a00 	vadd.f32	s0, s14, s0
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	42000000 	.word	0x42000000

000d4e88 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4e88:	b510      	push	{r4, lr}
   d4e8a:	4604      	mov	r4, r0
	if (read()) {
   d4e8c:	f7ff fe3c 	bl	d4b08 <_ZN3DHT4readEv>
   d4e90:	b1f0      	cbz	r0, d4ed0 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d4e92:	79e3      	ldrb	r3, [r4, #7]
   d4e94:	2b0b      	cmp	r3, #11
   d4e96:	d015      	beq.n	d4ec4 <_ZN3DHT12readHumidityEv+0x3c>
   d4e98:	3b15      	subs	r3, #21
   d4e9a:	2b01      	cmp	r3, #1
   d4e9c:	d818      	bhi.n	d4ed0 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4e9e:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4ea0:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4ed8 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4ea4:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4ea8:	7863      	ldrb	r3, [r4, #1]
   d4eaa:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4eae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d4eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4eb6:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4eba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4ebe:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4ec2:	bd10      	pop	{r4, pc}
				f = data[0];
   d4ec4:	7823      	ldrb	r3, [r4, #0]
   d4ec6:	ee00 3a10 	vmov	s0, r3
   d4eca:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4ece:	e7f8      	b.n	d4ec2 <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4ed0:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4edc <_ZN3DHT12readHumidityEv+0x54>
   d4ed4:	e7f5      	b.n	d4ec2 <_ZN3DHT12readHumidityEv+0x3a>
   d4ed6:	bf00      	nop
   d4ed8:	43800000 	.word	0x43800000
   d4edc:	7fc00000 	.word	0x7fc00000

000d4ee0 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4ee0:	f7ff bfd2 	b.w	d4e88 <_ZN3DHT12readHumidityEv>

000d4ee4 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d4ee4:	b510      	push	{r4, lr}
   d4ee6:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d4ee8:	7001      	strb	r1, [r0, #0]
   d4eea:	7042      	strb	r2, [r0, #1]
   d4eec:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d4eee:	2101      	movs	r1, #1
   d4ef0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d4ef4:	f005 fc1e 	bl	da734 <calloc>
   d4ef8:	6060      	str	r0, [r4, #4]
}
   d4efa:	4620      	mov	r0, r4
   d4efc:	bd10      	pop	{r4, pc}

000d4efe <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d4efe:	b510      	push	{r4, lr}
   d4f00:	4604      	mov	r4, r0
{
    free(_led_state);
   d4f02:	6840      	ldr	r0, [r0, #4]
   d4f04:	f002 f91e 	bl	d7144 <free>
}
   d4f08:	4620      	mov	r0, r4
   d4f0a:	bd10      	pop	{r4, pc}

000d4f0c <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4f0c:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d4f0e:	2100      	movs	r1, #0
{
   d4f10:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d4f12:	7800      	ldrb	r0, [r0, #0]
   d4f14:	f004 fb37 	bl	d9586 <digitalWrite>
   d4f18:	2014      	movs	r0, #20
   d4f1a:	f001 fe87 	bl	d6c2c <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d4f1e:	7820      	ldrb	r0, [r4, #0]
   d4f20:	2101      	movs	r1, #1
   d4f22:	f004 fb30 	bl	d9586 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d4f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4f2a:	2014      	movs	r0, #20
   d4f2c:	f001 be7e 	b.w	d6c2c <HAL_Delay_Microseconds>

000d4f30 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d4f30:	b570      	push	{r4, r5, r6, lr}
   d4f32:	4606      	mov	r6, r0
   d4f34:	460c      	mov	r4, r1
   d4f36:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d4f38:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   d4f3a:	bf4c      	ite	mi
   d4f3c:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d4f3e:	2100      	movpl	r1, #0
   d4f40:	7870      	ldrb	r0, [r6, #1]
   d4f42:	f004 fb20 	bl	d9586 <digitalWrite>
        clk();
   d4f46:	3d01      	subs	r5, #1
   d4f48:	4630      	mov	r0, r6
   d4f4a:	f7ff ffdf 	bl	d4f0c <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d4f4e:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   d4f50:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   d4f54:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   d4f56:	d1ef      	bne.n	d4f38 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   d4f58:	bd70      	pop	{r4, r5, r6, pc}

000d4f5a <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4f5c:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   d4f60:	461e      	mov	r6, r3
   d4f62:	460c      	mov	r4, r1
   d4f64:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4f66:	bf14      	ite	ne
   d4f68:	21c0      	movne	r1, #192	; 0xc0
   d4f6a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4f6c:	0673      	lsls	r3, r6, #25
   d4f6e:	bf58      	it	pl
   d4f70:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4f74:	062a      	lsls	r2, r5, #24
   d4f76:	bf58      	it	pl
   d4f78:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d4f7c:	066b      	lsls	r3, r5, #25
   d4f7e:	bf58      	it	pl
   d4f80:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4f84:	0622      	lsls	r2, r4, #24
   d4f86:	bf58      	it	pl
   d4f88:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d4f8c:	0663      	lsls	r3, r4, #25
   d4f8e:	bf58      	it	pl
   d4f90:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d4f94:	9001      	str	r0, [sp, #4]
   d4f96:	f7ff ffcb 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d4f9a:	9801      	ldr	r0, [sp, #4]
   d4f9c:	4631      	mov	r1, r6
   d4f9e:	f7ff ffc7 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d4fa2:	9801      	ldr	r0, [sp, #4]
   d4fa4:	4629      	mov	r1, r5
   d4fa6:	f7ff ffc3 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d4faa:	9801      	ldr	r0, [sp, #4]
   d4fac:	4621      	mov	r1, r4
}
   d4fae:	b002      	add	sp, #8
   d4fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   d4fb4:	f7ff bfbc 	b.w	d4f30 <_ZN12ChainableLED8sendByteEh>

000d4fb8 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d4fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4fbc:	4604      	mov	r4, r0
   d4fbe:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d4fc0:	2100      	movs	r1, #0
{
   d4fc2:	4690      	mov	r8, r2
   d4fc4:	4699      	mov	r9, r3
   d4fc6:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   d4fca:	f7ff ffb1 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4fce:	2100      	movs	r1, #0
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	f7ff ffad 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4fd6:	2100      	movs	r1, #0
   d4fd8:	4620      	mov	r0, r4
   d4fda:	f7ff ffa9 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4fde:	2100      	movs	r1, #0
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	f7ff ffa5 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>
   d4fe6:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4fe8:	78a3      	ldrb	r3, [r4, #2]
   d4fea:	b2f5      	uxtb	r5, r6
   d4fec:	42ab      	cmp	r3, r5
   d4fee:	d919      	bls.n	d5024 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
   d4ff0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   d4ff4:	42af      	cmp	r7, r5
   d4ff6:	f100 0201 	add.w	r2, r0, #1
   d4ffa:	f100 0302 	add.w	r3, r0, #2
   d4ffe:	d108      	bne.n	d5012 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
        {
            _led_state[i*3 + _CL_RED] = red;
   d5000:	6861      	ldr	r1, [r4, #4]
   d5002:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   d5006:	6861      	ldr	r1, [r4, #4]
   d5008:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   d500c:	6861      	ldr	r1, [r4, #4]
   d500e:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d5012:	6861      	ldr	r1, [r4, #4]
   d5014:	5ccb      	ldrb	r3, [r1, r3]
   d5016:	5c8a      	ldrb	r2, [r1, r2]
   d5018:	5c09      	ldrb	r1, [r1, r0]
   d501a:	4620      	mov	r0, r4
   d501c:	f7ff ff9d 	bl	d4f5a <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   d5020:	3601      	adds	r6, #1
   d5022:	e7e1      	b.n	d4fe8 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d5024:	4620      	mov	r0, r4
   d5026:	2100      	movs	r1, #0
   d5028:	f7ff ff82 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d502c:	4620      	mov	r0, r4
   d502e:	2100      	movs	r1, #0
   d5030:	f7ff ff7e 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d5034:	4620      	mov	r0, r4
   d5036:	2100      	movs	r1, #0
   d5038:	f7ff ff7a 	bl	d4f30 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d503c:	4620      	mov	r0, r4
   d503e:	2100      	movs	r1, #0
}
   d5040:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   d5044:	f7ff bf74 	b.w	d4f30 <_ZN12ChainableLED8sendByteEh>

000d5048 <_ZN12ChainableLED4initEv>:
{
   d5048:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d504a:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d504c:	2101      	movs	r1, #1
   d504e:	7800      	ldrb	r0, [r0, #0]
   d5050:	f004 fa88 	bl	d9564 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d5054:	7860      	ldrb	r0, [r4, #1]
   d5056:	2101      	movs	r1, #1
   d5058:	f004 fa84 	bl	d9564 <pinMode>
   d505c:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   d505e:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   d5060:	78a3      	ldrb	r3, [r4, #2]
   d5062:	b2e9      	uxtb	r1, r5
   d5064:	428b      	cmp	r3, r1
   d5066:	d907      	bls.n	d5078 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   d5068:	2300      	movs	r3, #0
   d506a:	9600      	str	r6, [sp, #0]
   d506c:	461a      	mov	r2, r3
   d506e:	4620      	mov	r0, r4
   d5070:	f7ff ffa2 	bl	d4fb8 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   d5074:	3501      	adds	r5, #1
   d5076:	e7f3      	b.n	d5060 <_ZN12ChainableLED4initEv+0x18>
}
   d5078:	b002      	add	sp, #8
   d507a:	bd70      	pop	{r4, r5, r6, pc}

000d507c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d507c:	6803      	ldr	r3, [r0, #0]
   d507e:	b2c9      	uxtb	r1, r1
   d5080:	689b      	ldr	r3, [r3, #8]
   d5082:	4718      	bx	r3

000d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
    delay(5);
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   d5084:	b510      	push	{r4, lr}
   d5086:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d5088:	f004 faae 	bl	d95e8 <_Z19__fetch_global_Wirev>
   d508c:	213c      	movs	r1, #60	; 0x3c
   d508e:	f002 fc45 	bl	d791c <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
  Wire.write(SeeedOLED_Command_Mode);	     // Set OLED Command mode
   d5092:	f004 faa9 	bl	d95e8 <_Z19__fetch_global_Wirev>
   d5096:	2180      	movs	r1, #128	; 0x80
   d5098:	f7ff fff0 	bl	d507c <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d509c:	f004 faa4 	bl	d95e8 <_Z19__fetch_global_Wirev>
   d50a0:	6803      	ldr	r3, [r0, #0]
   d50a2:	4621      	mov	r1, r4
   d50a4:	689b      	ldr	r3, [r3, #8]
   d50a6:	4798      	blx	r3
#else
  Wire.send(SeeedOLED_Command_Mode);	     // Set OLED Command mode
  Wire.send(command);
#endif
  Wire.endTransmission();    		     // End I2C communication
   d50a8:	f004 fa9e 	bl	d95e8 <_Z19__fetch_global_Wirev>
}
   d50ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission();    		     // End I2C communication
   d50b0:	f002 bc3b 	b.w	d792a <_ZN7TwoWire15endTransmissionEv>

000d50b4 <_ZN9SeeedOLED4initEv>:
{
   d50b4:	b508      	push	{r3, lr}
    sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d50b6:	20ae      	movs	r0, #174	; 0xae
   d50b8:	f7ff ffe4 	bl	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d50bc:	2005      	movs	r0, #5
   d50be:	f002 f879 	bl	d71b4 <delay>
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d50c2:	20af      	movs	r0, #175	; 0xaf
   d50c4:	f7ff ffde 	bl	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d50c8:	2005      	movs	r0, #5
   d50ca:	f002 f873 	bl	d71b4 <delay>
}
   d50ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
   d50d2:	20a6      	movs	r0, #166	; 0xa6
   d50d4:	f7ff bfd6 	b.w	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d50d8 <_ZN9SeeedOLED11setPageModeEv>:
    sendCommand(0x20); 			//set addressing mode
    sendCommand(0x00); 			//set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d50d8:	b508      	push	{r3, lr}
    addressingMode = PAGE_MODE;
   d50da:	2301      	movs	r3, #1
   d50dc:	7003      	strb	r3, [r0, #0]
    sendCommand(0x20); 			//set addressing mode
   d50de:	2020      	movs	r0, #32
   d50e0:	f7ff ffd0 	bl	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x02); 			//set page addressing mode
}
   d50e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(0x02); 			//set page addressing mode
   d50e8:	2002      	movs	r0, #2
   d50ea:	f7ff bfcb 	b.w	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d50ee <_ZN9SeeedOLED9setTextXYEhh>:


void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d50ee:	b510      	push	{r4, lr}
    sendCommand(0xB0 + Row); 			//set page address
   d50f0:	3950      	subs	r1, #80	; 0x50
{
   d50f2:	4614      	mov	r4, r2
    sendCommand(0xB0 + Row); 			//set page address
   d50f4:	b2c8      	uxtb	r0, r1
   d50f6:	f7ff ffc5 	bl	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x00 + (8*Column & 0x0F)); 	//set column lower address
   d50fa:	00e0      	lsls	r0, r4, #3
   d50fc:	f000 0008 	and.w	r0, r0, #8
   d5100:	f7ff ffc0 	bl	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d5104:	f3c4 0043 	ubfx	r0, r4, #1, #4
   d5108:	3010      	adds	r0, #16
}
   d510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d510e:	f7ff bfb9 	b.w	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d5112 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
  setTextXY(0,0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d5112:	b510      	push	{r4, lr}
   d5114:	460c      	mov	r4, r1
     Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d5116:	f004 fa67 	bl	d95e8 <_Z19__fetch_global_Wirev>
   d511a:	213c      	movs	r1, #60	; 0x3c
   d511c:	f002 fbfe 	bl	d791c <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
     Wire.write(SeeedOLED_Data_Mode);            // data mode
   d5120:	f004 fa62 	bl	d95e8 <_Z19__fetch_global_Wirev>
   d5124:	2140      	movs	r1, #64	; 0x40
   d5126:	f7ff ffa9 	bl	d507c <_ZN7TwoWire5writeEi>
     Wire.write(Data);
   d512a:	f004 fa5d 	bl	d95e8 <_Z19__fetch_global_Wirev>
   d512e:	6803      	ldr	r3, [r0, #0]
   d5130:	4621      	mov	r1, r4
   d5132:	689b      	ldr	r3, [r3, #8]
   d5134:	4798      	blx	r3
#else
     Wire.send(SeeedOLED_Data_Mode);            // data mode
     Wire.send(Data);
#endif
     Wire.endTransmission();                    // stop I2C transmission
   d5136:	f004 fa57 	bl	d95e8 <_Z19__fetch_global_Wirev>
}
   d513a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     Wire.endTransmission();                    // stop I2C transmission
   d513e:	f002 bbf4 	b.w	d792a <_ZN7TwoWire15endTransmissionEv>
	...

000d5144 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
    if(C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d5144:	f1a1 0320 	sub.w	r3, r1, #32
    {
    C=' '; //Space
   d5148:	2b5f      	cmp	r3, #95	; 0x5f
   d514a:	bf88      	it	hi
   d514c:	2120      	movhi	r1, #32
{
   d514e:	b570      	push	{r4, r5, r6, lr}
   d5150:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   d5154:	4d07      	ldr	r5, [pc, #28]	; (d5174 <_ZN9SeeedOLED7putCharEh+0x30>)
   d5156:	3920      	subs	r1, #32
   d5158:	4606      	mov	r6, r0
    }
    unsigned char i=0;
    for(i=0;i<8;i++)
   d515a:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C=' '; //Space
   d515e:	2408      	movs	r4, #8
    {
       //read bytes from code memory
       sendData(pgm_read_byte(&BasicFont[C-32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d5160:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5164:	4630      	mov	r0, r6
   d5166:	3c01      	subs	r4, #1
   d5168:	f7ff ffd3 	bl	d5112 <_ZN9SeeedOLED8sendDataEh>
    for(i=0;i<8;i++)
   d516c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d5170:	d1f6      	bne.n	d5160 <_ZN9SeeedOLED7putCharEh+0x1c>
    }
}
   d5172:	bd70      	pop	{r4, r5, r6, pc}
   d5174:	000dc719 	.word	0x000dc719

000d5178 <_ZN9SeeedOLED12clearDisplayEv>:
{
   d5178:	b570      	push	{r4, r5, r6, lr}
   d517a:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d517c:	20ae      	movs	r0, #174	; 0xae
   d517e:	f7ff ff81 	bl	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   d5182:	2600      	movs	r6, #0
    setTextXY(j,0);
   d5184:	2200      	movs	r2, #0
   d5186:	b2f1      	uxtb	r1, r6
   d5188:	4628      	mov	r0, r5
   d518a:	f7ff ffb0 	bl	d50ee <_ZN9SeeedOLED9setTextXYEhh>
   d518e:	2410      	movs	r4, #16
        putChar(' ');
   d5190:	2120      	movs	r1, #32
   d5192:	4628      	mov	r0, r5
   d5194:	3c01      	subs	r4, #1
   d5196:	f7ff ffd5 	bl	d5144 <_ZN9SeeedOLED7putCharEh>
      for(i=0;i<16;i++)  //clear all columns
   d519a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d519e:	d1f7      	bne.n	d5190 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for(j=0;j<8;j++)
   d51a0:	3601      	adds	r6, #1
   d51a2:	2e08      	cmp	r6, #8
   d51a4:	d1ee      	bne.n	d5184 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d51a6:	20af      	movs	r0, #175	; 0xaf
   d51a8:	f7ff ff6c 	bl	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0,0);
   d51ac:	4622      	mov	r2, r4
   d51ae:	4621      	mov	r1, r4
   d51b0:	4628      	mov	r0, r5
}
   d51b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0,0);
   d51b6:	f7ff bf9a 	b.w	d50ee <_ZN9SeeedOLED9setTextXYEhh>

000d51ba <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   d51ba:	b570      	push	{r4, r5, r6, lr}
   d51bc:	4606      	mov	r6, r0
   d51be:	460d      	mov	r5, r1
   d51c0:	2400      	movs	r4, #0
    unsigned char i=0;
    while(String[i])
   d51c2:	b2e3      	uxtb	r3, r4
   d51c4:	3401      	adds	r4, #1
   d51c6:	5ce9      	ldrb	r1, [r5, r3]
   d51c8:	b119      	cbz	r1, d51d2 <_ZN9SeeedOLED9putStringEPKc+0x18>
    {
        putChar(String[i]);
   d51ca:	4630      	mov	r0, r6
   d51cc:	f7ff ffba 	bl	d5144 <_ZN9SeeedOLED7putCharEh>
    while(String[i])
   d51d0:	e7f7      	b.n	d51c2 <_ZN9SeeedOLED9putStringEPKc+0x8>
        i++;
    }
}
   d51d2:	bd70      	pop	{r4, r5, r6, pc}

000d51d4 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   d51d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d51d6:	b085      	sub	sp, #20
  unsigned char char_buffer[10]="";
   d51d8:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d51da:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10]="";
   d51dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   d51e0:	4606      	mov	r6, r0
  unsigned char char_buffer[10]="";
   d51e2:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   d51e6:	da24      	bge.n	d5232 <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f=1;
    putChar('-');
   d51e8:	212d      	movs	r1, #45	; 0x2d
   d51ea:	f7ff ffab 	bl	d5144 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d51ee:	4264      	negs	r4, r4
    f=1;
   d51f0:	2301      	movs	r3, #1
  unsigned char f = 0;
   d51f2:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d51f4:	200a      	movs	r0, #10
   d51f6:	462a      	mov	r2, r5
   d51f8:	a904      	add	r1, sp, #16
   d51fa:	440a      	add	r2, r1
   d51fc:	3501      	adds	r5, #1
   d51fe:	fbb4 f1f0 	udiv	r1, r4, r0
   d5202:	fb00 4411 	mls	r4, r0, r1, r4
   d5206:	f802 4c0c 	strb.w	r4, [r2, #-12]
   d520a:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   d520c:	460c      	mov	r4, r1
   d520e:	2900      	cmp	r1, #0
   d5210:	d1f1      	bne.n	d51f6 <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f=f+i;
   d5212:	442b      	add	r3, r5
   d5214:	b2dc      	uxtb	r4, r3
   d5216:	ab04      	add	r3, sp, #16
   d5218:	195f      	adds	r7, r3, r5
   d521a:	3f0d      	subs	r7, #13
  for(; i > 0; i--)
   d521c:	b175      	cbz	r5, d523c <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0'+ char_buffer[i - 1]);
   d521e:	f817 1901 	ldrb.w	r1, [r7], #-1
   d5222:	3130      	adds	r1, #48	; 0x30
   d5224:	b2c9      	uxtb	r1, r1
   d5226:	4630      	mov	r0, r6
  for(; i > 0; i--)
   d5228:	3d01      	subs	r5, #1
    putChar('0'+ char_buffer[i - 1]);
   d522a:	f7ff ff8b 	bl	d5144 <_ZN9SeeedOLED7putCharEh>
  for(; i > 0; i--)
   d522e:	b2ed      	uxtb	r5, r5
   d5230:	e7f4      	b.n	d521c <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   d5232:	d1de      	bne.n	d51f2 <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   d5234:	2130      	movs	r1, #48	; 0x30
   d5236:	f7ff ff85 	bl	d5144 <_ZN9SeeedOLED7putCharEh>
    return f;
   d523a:	2401      	movs	r4, #1
  }
  return f;

}
   d523c:	4620      	mov	r0, r4
   d523e:	b005      	add	sp, #20
   d5240:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5242 <_ZN9SeeedOLED16setNormalDisplayEv>:
    sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
    sendCommand(SeeedOLED_Normal_Display_Cmd);
   d5242:	20a6      	movs	r0, #166	; 0xa6
   d5244:	f7ff bf1e 	b.w	d5084 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d5248 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
   d5248:	6803      	ldr	r3, [r0, #0]
   d524a:	4718      	bx	r3

000d524c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d524c:	2a01      	cmp	r2, #1
   d524e:	d003      	beq.n	d5258 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d5250:	2a02      	cmp	r2, #2
   d5252:	d003      	beq.n	d525c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d5254:	2000      	movs	r0, #0
   d5256:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5258:	6001      	str	r1, [r0, #0]
	      break;
   d525a:	e7fb      	b.n	d5254 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d525c:	680b      	ldr	r3, [r1, #0]
   d525e:	6003      	str	r3, [r0, #0]
	}
   d5260:	e7f8      	b.n	d5254 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d5264 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d5264:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5266:	201c      	movs	r0, #28
   d5268:	f7fe ff15 	bl	d4096 <_Znwj>
   d526c:	4604      	mov	r4, r0
   d526e:	b148      	cbz	r0, d5284 <_Z10builderTcpv+0x20>
   d5270:	4b06      	ldr	r3, [pc, #24]	; (d528c <_Z10builderTcpv+0x28>)
   d5272:	4907      	ldr	r1, [pc, #28]	; (d5290 <_Z10builderTcpv+0x2c>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	9300      	str	r3, [sp, #0]
   d5278:	6809      	ldr	r1, [r1, #0]
   d527a:	4b06      	ldr	r3, [pc, #24]	; (d5294 <_Z10builderTcpv+0x30>)
   d527c:	f242 3234 	movw	r2, #9012	; 0x2334
   d5280:	f001 f878 	bl	d6374 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d5284:	4620      	mov	r0, r4
   d5286:	b002      	add	sp, #8
   d5288:	bd10      	pop	{r4, pc}
   d528a:	bf00      	nop
   d528c:	2003e50c 	.word	0x2003e50c
   d5290:	2003e508 	.word	0x2003e508
   d5294:	000dca19 	.word	0x000dca19

000d5298 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d5298:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d529a:	2020      	movs	r0, #32
   d529c:	f7fe fefb 	bl	d4096 <_Znwj>
   d52a0:	4604      	mov	r4, r0
   d52a2:	b140      	cbz	r0, d52b6 <_Z11builderHttpv+0x1e>
   d52a4:	4b05      	ldr	r3, [pc, #20]	; (d52bc <_Z11builderHttpv+0x24>)
   d52a6:	4906      	ldr	r1, [pc, #24]	; (d52c0 <_Z11builderHttpv+0x28>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	9300      	str	r3, [sp, #0]
   d52ac:	6809      	ldr	r1, [r1, #0]
   d52ae:	4b05      	ldr	r3, [pc, #20]	; (d52c4 <_Z11builderHttpv+0x2c>)
   d52b0:	2250      	movs	r2, #80	; 0x50
   d52b2:	f000 fa5f 	bl	d5774 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d52b6:	4620      	mov	r0, r4
   d52b8:	b002      	add	sp, #8
   d52ba:	bd10      	pop	{r4, pc}
   d52bc:	2003e50c 	.word	0x2003e50c
   d52c0:	2003e508 	.word	0x2003e508
   d52c4:	000dca19 	.word	0x000dca19

000d52c8 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d52c8:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d52ca:	201c      	movs	r0, #28
   d52cc:	f7fe fee3 	bl	d4096 <_Znwj>
   d52d0:	4604      	mov	r4, r0
   d52d2:	b148      	cbz	r0, d52e8 <_Z10builderUdpv+0x20>
   d52d4:	4b06      	ldr	r3, [pc, #24]	; (d52f0 <_Z10builderUdpv+0x28>)
   d52d6:	4907      	ldr	r1, [pc, #28]	; (d52f4 <_Z10builderUdpv+0x2c>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	9300      	str	r3, [sp, #0]
   d52dc:	6809      	ldr	r1, [r1, #0]
   d52de:	4b06      	ldr	r3, [pc, #24]	; (d52f8 <_Z10builderUdpv+0x30>)
   d52e0:	f242 3234 	movw	r2, #9012	; 0x2334
   d52e4:	f001 fbb0 	bl	d6a48 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d52e8:	4620      	mov	r0, r4
   d52ea:	b002      	add	sp, #8
   d52ec:	bd10      	pop	{r4, pc}
   d52ee:	bf00      	nop
   d52f0:	2003e50c 	.word	0x2003e50c
   d52f4:	2003e508 	.word	0x2003e508
   d52f8:	000dca19 	.word	0x000dca19

000d52fc <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d52fc:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d52fe:	2014      	movs	r0, #20
   d5300:	f7fe fec9 	bl	d4096 <_Znwj>
   d5304:	4604      	mov	r4, r0
   d5306:	b140      	cbz	r0, d531a <_Z15builderParticlev+0x1e>
   d5308:	4b05      	ldr	r3, [pc, #20]	; (d5320 <_Z15builderParticlev+0x24>)
   d530a:	4906      	ldr	r1, [pc, #24]	; (d5324 <_Z15builderParticlev+0x28>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	9300      	str	r3, [sp, #0]
   d5310:	2300      	movs	r3, #0
   d5312:	6809      	ldr	r1, [r1, #0]
   d5314:	461a      	mov	r2, r3
   d5316:	f000 fd59 	bl	d5dcc <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   d531a:	4620      	mov	r0, r4
   d531c:	b002      	add	sp, #8
   d531e:	bd10      	pop	{r4, pc}
   d5320:	2003e50c 	.word	0x2003e50c
   d5324:	2003e508 	.word	0x2003e508

000d5328 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5328:	b510      	push	{r4, lr}
   d532a:	4b06      	ldr	r3, [pc, #24]	; (d5344 <_ZN3UDPD1Ev+0x1c>)
   d532c:	6003      	str	r3, [r0, #0]
   d532e:	3364      	adds	r3, #100	; 0x64
   d5330:	4604      	mov	r4, r0
   d5332:	6103      	str	r3, [r0, #16]
   d5334:	f003 fcd8 	bl	d8ce8 <_ZN3UDP4stopEv>
   d5338:	4620      	mov	r0, r4
   d533a:	f003 fdcf 	bl	d8edc <_ZN3UDP13releaseBufferEv>
   d533e:	4620      	mov	r0, r4
   d5340:	bd10      	pop	{r4, pc}
   d5342:	bf00      	nop
   d5344:	000dd0a8 	.word	0x000dd0a8

000d5348 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5348:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d534a:	6984      	ldr	r4, [r0, #24]
   d534c:	4b0a      	ldr	r3, [pc, #40]	; (d5378 <_ZN9TCPClientD1Ev+0x30>)
   d534e:	6003      	str	r3, [r0, #0]
   d5350:	4605      	mov	r5, r0
   d5352:	b17c      	cbz	r4, d5374 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d5354:	6863      	ldr	r3, [r4, #4]
   d5356:	3b01      	subs	r3, #1
   d5358:	6063      	str	r3, [r4, #4]
   d535a:	b95b      	cbnz	r3, d5374 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d535c:	6823      	ldr	r3, [r4, #0]
   d535e:	4620      	mov	r0, r4
   d5360:	689b      	ldr	r3, [r3, #8]
   d5362:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5364:	68a3      	ldr	r3, [r4, #8]
   d5366:	3b01      	subs	r3, #1
   d5368:	60a3      	str	r3, [r4, #8]
   d536a:	b91b      	cbnz	r3, d5374 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d536c:	6823      	ldr	r3, [r4, #0]
   d536e:	4620      	mov	r0, r4
   d5370:	68db      	ldr	r3, [r3, #12]
   d5372:	4798      	blx	r3
   d5374:	4628      	mov	r0, r5
   d5376:	bd38      	pop	{r3, r4, r5, pc}
   d5378:	000dd040 	.word	0x000dd040

000d537c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d537c:	b510      	push	{r4, lr}
      if (_M_manager)
   d537e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5380:	4604      	mov	r4, r0
      if (_M_manager)
   d5382:	b113      	cbz	r3, d538a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5384:	2203      	movs	r2, #3
   d5386:	4601      	mov	r1, r0
   d5388:	4798      	blx	r3
    }
   d538a:	4620      	mov	r0, r4
   d538c:	bd10      	pop	{r4, pc}
	...

000d5390 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d5390:	b510      	push	{r4, lr}
   d5392:	b086      	sub	sp, #24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5394:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5396:	9102      	str	r1, [sp, #8]
	operator=(_Functor&& __f)
   d5398:	4604      	mov	r4, r0
   d539a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d539e:	466a      	mov	r2, sp
   d53a0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d53a4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d53a8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d53ac:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d53b0:	68a2      	ldr	r2, [r4, #8]
   d53b2:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d53b4:	4a06      	ldr	r2, [pc, #24]	; (d53d0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
   d53b6:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d53b8:	68e2      	ldr	r2, [r4, #12]
   d53ba:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d53bc:	4a05      	ldr	r2, [pc, #20]	; (d53d4 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
   d53be:	60e2      	str	r2, [r4, #12]
   d53c0:	e884 0003 	stmia.w	r4, {r0, r1}
    class function<_Res(_ArgTypes...)>
   d53c4:	4618      	mov	r0, r3
   d53c6:	f7ff ffd9 	bl	d537c <_ZNSt14_Function_baseD1Ev>
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d53ca:	4620      	mov	r0, r4
   d53cc:	b006      	add	sp, #24
   d53ce:	bd10      	pop	{r4, pc}
   d53d0:	000d524d 	.word	0x000d524d
   d53d4:	000d5249 	.word	0x000d5249

000d53d8 <_ZN9TCPClientD0Ev>:
   d53d8:	b510      	push	{r4, lr}
   d53da:	4604      	mov	r4, r0
   d53dc:	f7ff ffb4 	bl	d5348 <_ZN9TCPClientD1Ev>
   d53e0:	4620      	mov	r0, r4
   d53e2:	211c      	movs	r1, #28
   d53e4:	f004 f92d 	bl	d9642 <_ZdlPvj>
   d53e8:	4620      	mov	r0, r4
   d53ea:	bd10      	pop	{r4, pc}

000d53ec <_ZN3UDPD0Ev>:
   d53ec:	b510      	push	{r4, lr}
   d53ee:	4604      	mov	r4, r0
   d53f0:	f7ff ff9a 	bl	d5328 <_ZN3UDPD1Ev>
   d53f4:	4620      	mov	r0, r4
   d53f6:	214c      	movs	r1, #76	; 0x4c
   d53f8:	f004 f923 	bl	d9642 <_ZdlPvj>
   d53fc:	4620      	mov	r0, r4
   d53fe:	bd10      	pop	{r4, pc}

000d5400 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   d5400:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   d5402:	f100 0108 	add.w	r1, r0, #8
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
   d5406:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   d5408:	460b      	mov	r3, r1
      while (__x != 0)
   d540a:	b13a      	cbz	r2, d541c <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d540c:	7c15      	ldrb	r5, [r2, #16]
   d540e:	7804      	ldrb	r4, [r0, #0]
   d5410:	42a5      	cmp	r5, r4
   d5412:	bf2a      	itet	cs
   d5414:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
   d5416:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
   d5418:	6892      	ldrcs	r2, [r2, #8]
   d541a:	e7f6      	b.n	d540a <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d541c:	4299      	cmp	r1, r3
   d541e:	d004      	beq.n	d542a <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
   d5420:	7800      	ldrb	r0, [r0, #0]
   d5422:	7c1a      	ldrb	r2, [r3, #16]
   d5424:	4290      	cmp	r0, r2
   d5426:	bf38      	it	cc
   d5428:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d542a:	69da      	ldr	r2, [r3, #28]
   d542c:	b90a      	cbnz	r2, d5432 <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
   d542e:	f004 f9c0 	bl	d97b2 <_ZSt25__throw_bad_function_callv>
}
   d5432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5436:	6a1a      	ldr	r2, [r3, #32]
   d5438:	f103 0014 	add.w	r0, r3, #20
   d543c:	4710      	bx	r2

000d543e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
      _Link_type __x = _M_begin();
   d543e:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5440:	b570      	push	{r4, r5, r6, lr}
   d5442:	4616      	mov	r6, r2
   d5444:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   d5446:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   d5448:	2201      	movs	r2, #1
      while (__x != 0)
   d544a:	b15b      	cbz	r3, d5464 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d544c:	7830      	ldrb	r0, [r6, #0]
   d544e:	7c1a      	ldrb	r2, [r3, #16]
   d5450:	4290      	cmp	r0, r2
   d5452:	bf34      	ite	cc
   d5454:	6898      	ldrcc	r0, [r3, #8]
   d5456:	68d8      	ldrcs	r0, [r3, #12]
   d5458:	461d      	mov	r5, r3
   d545a:	bf34      	ite	cc
   d545c:	2201      	movcc	r2, #1
   d545e:	2200      	movcs	r2, #0
   d5460:	4603      	mov	r3, r0
   d5462:	e7f2      	b.n	d544a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   d5464:	b192      	cbz	r2, d548c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>
	  if (__j == begin())
   d5466:	68ca      	ldr	r2, [r1, #12]
   d5468:	42aa      	cmp	r2, r5
   d546a:	d103      	bne.n	d5474 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d546c:	e9c4 3500 	strd	r3, r5, [r4]
    }
   d5470:	4620      	mov	r0, r4
   d5472:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   d5474:	4628      	mov	r0, r5
   d5476:	f004 f93e 	bl	d96f6 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d547a:	7833      	ldrb	r3, [r6, #0]
   d547c:	7c02      	ldrb	r2, [r0, #16]
   d547e:	429a      	cmp	r2, r3
   d5480:	f04f 0300 	mov.w	r3, #0
   d5484:	d3f2      	bcc.n	d546c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d5486:	e9c4 0300 	strd	r0, r3, [r4]
   d548a:	e7f1      	b.n	d5470 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x32>
   d548c:	4628      	mov	r0, r5
   d548e:	e7f4      	b.n	d547a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3c>

000d5490 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d5490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return &this->_M_impl._M_header; }
   d5494:	f100 0804 	add.w	r8, r0, #4
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   d5498:	6885      	ldr	r5, [r0, #8]
   d549a:	b085      	sub	sp, #20
   d549c:	4606      	mov	r6, r0
   d549e:	4689      	mov	r9, r1
      { return &this->_M_impl._M_header; }
   d54a0:	4644      	mov	r4, r8
      while (__x != 0)
   d54a2:	b155      	cbz	r5, d54ba <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d54a4:	f899 3000 	ldrb.w	r3, [r9]
   d54a8:	7c2a      	ldrb	r2, [r5, #16]
   d54aa:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
   d54ac:	bf36      	itet	cc
   d54ae:	68eb      	ldrcc	r3, [r5, #12]
	  __y = __x, __x = _S_left(__x);
   d54b0:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
   d54b2:	4625      	movcc	r5, r4
   d54b4:	462c      	mov	r4, r5
   d54b6:	461d      	mov	r5, r3
   d54b8:	e7f3      	b.n	d54a2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x12>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d54ba:	45a0      	cmp	r8, r4
   d54bc:	d004      	beq.n	d54c8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x38>
   d54be:	f899 2000 	ldrb.w	r2, [r9]
   d54c2:	7c23      	ldrb	r3, [r4, #16]
   d54c4:	429a      	cmp	r2, r3
   d54c6:	d22e      	bcs.n	d5526 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x96>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d54c8:	2024      	movs	r0, #36	; 0x24
   d54ca:	f7fe fde4 	bl	d4096 <_Znwj>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d54ce:	f899 9000 	ldrb.w	r9, [r9]
   d54d2:	f880 9010 	strb.w	r9, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   d54d6:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   d54d8:	45a0      	cmp	r8, r4
   d54da:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   d54dc:	f100 0210 	add.w	r2, r0, #16
   d54e0:	61c3      	str	r3, [r0, #28]
   d54e2:	d125      	bne.n	d5530 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa0>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d54e4:	6973      	ldr	r3, [r6, #20]
   d54e6:	b11b      	cbz	r3, d54f0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x60>
   d54e8:	6931      	ldr	r1, [r6, #16]
   d54ea:	7c0b      	ldrb	r3, [r1, #16]
   d54ec:	454b      	cmp	r3, r9
   d54ee:	d309      	bcc.n	d5504 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
   d54f0:	4631      	mov	r1, r6
   d54f2:	a802      	add	r0, sp, #8
   d54f4:	f7ff ffa3 	bl	d543e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d54f8:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
	    if (__res.second)
   d54fc:	2900      	cmp	r1, #0
   d54fe:	d051      	beq.n	d55a4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5500:	2c00      	cmp	r4, #0
   d5502:	d14d      	bne.n	d55a0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d5504:	4588      	cmp	r8, r1
   d5506:	d04b      	beq.n	d55a0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5508:	7c38      	ldrb	r0, [r7, #16]
   d550a:	7c0b      	ldrb	r3, [r1, #16]
   d550c:	4298      	cmp	r0, r3
   d550e:	bf2c      	ite	cs
   d5510:	2000      	movcs	r0, #0
   d5512:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d5514:	4643      	mov	r3, r8
   d5516:	460a      	mov	r2, r1
   d5518:	4639      	mov	r1, r7
   d551a:	f004 f8ee 	bl	d96fa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d551e:	6973      	ldr	r3, [r6, #20]
   d5520:	3301      	adds	r3, #1
   d5522:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d5524:	463c      	mov	r4, r7
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   d5526:	f104 0014 	add.w	r0, r4, #20
   d552a:	b005      	add	sp, #20
   d552c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d5530:	7c23      	ldrb	r3, [r4, #16]
   d5532:	9201      	str	r2, [sp, #4]
   d5534:	454b      	cmp	r3, r9
   d5536:	d918      	bls.n	d556a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xda>
	  if (__pos._M_node == _M_leftmost()) // begin()
   d5538:	68f3      	ldr	r3, [r6, #12]
   d553a:	429c      	cmp	r4, r3
   d553c:	d009      	beq.n	d5552 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	_M_node = _Rb_tree_decrement(_M_node);
   d553e:	4620      	mov	r0, r4
   d5540:	f004 f8d9 	bl	d96f6 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d5544:	7c03      	ldrb	r3, [r0, #16]
   d5546:	9a01      	ldr	r2, [sp, #4]
   d5548:	454b      	cmp	r3, r9
   d554a:	d205      	bcs.n	d5558 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc8>
	      if (_S_right(__before._M_node) == 0)
   d554c:	68c3      	ldr	r3, [r0, #12]
   d554e:	b953      	cbnz	r3, d5566 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
   d5550:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   d5552:	4621      	mov	r1, r4
   d5554:	461c      	mov	r4, r3
   d5556:	e7d1      	b.n	d54fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d5558:	4631      	mov	r1, r6
   d555a:	a802      	add	r0, sp, #8
   d555c:	f7ff ff6f 	bl	d543e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5560:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   d5564:	e7f5      	b.n	d5552 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
   d5566:	4623      	mov	r3, r4
   d5568:	e7f3      	b.n	d5552 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d556a:	d21b      	bcs.n	d55a4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
	  if (__pos._M_node == _M_rightmost())
   d556c:	6931      	ldr	r1, [r6, #16]
   d556e:	428c      	cmp	r4, r1
   d5570:	d00b      	beq.n	d558a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
	_M_node = _Rb_tree_increment(_M_node);
   d5572:	4620      	mov	r0, r4
   d5574:	f004 f8ac 	bl	d96d0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d5578:	7c03      	ldrb	r3, [r0, #16]
   d557a:	9a01      	ldr	r2, [sp, #4]
   d557c:	454b      	cmp	r3, r9
	_M_node = _Rb_tree_increment(_M_node);
   d557e:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d5580:	d905      	bls.n	d558e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfe>
	      if (_S_right(__pos._M_node) == 0)
   d5582:	68e3      	ldr	r3, [r4, #12]
   d5584:	b953      	cbnz	r3, d559c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
   d5586:	4621      	mov	r1, r4
   d5588:	461d      	mov	r5, r3
   d558a:	462c      	mov	r4, r5
   d558c:	e7b6      	b.n	d54fc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d558e:	4631      	mov	r1, r6
   d5590:	a802      	add	r0, sp, #8
   d5592:	f7ff ff54 	bl	d543e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5596:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
   d559a:	e7f6      	b.n	d558a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
   d559c:	4601      	mov	r1, r0
   d559e:	e7f4      	b.n	d558a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
			    || _M_impl._M_key_compare(_S_key(__z),
   d55a0:	2001      	movs	r0, #1
   d55a2:	e7b7      	b.n	d5514 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
   d55a4:	f107 0014 	add.w	r0, r7, #20
   d55a8:	f7ff fee8 	bl	d537c <_ZNSt14_Function_baseD1Ev>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d55ac:	4638      	mov	r0, r7
   d55ae:	f7fe fd76 	bl	d409e <_ZdlPv>
   d55b2:	4627      	mov	r7, r4
   d55b4:	e7b6      	b.n	d5524 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	...

000d55b8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   d55b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d55bc:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   d55be:	2600      	movs	r6, #0
   d55c0:	4617      	mov	r7, r2
	  : _Node_allocator()
   d55c2:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   d55c6:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   d55ca:	e9c0 2605 	strd	r2, r6, [r0, #20]
   d55ce:	4604      	mov	r4, r0
   d55d0:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   d55d2:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   d55d4:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   d55d6:	f10d 0107 	add.w	r1, sp, #7
   d55da:	2301      	movs	r3, #1
   d55dc:	4628      	mov	r0, r5
   d55de:	f88d 3007 	strb.w	r3, [sp, #7]
   d55e2:	f7ff ff55 	bl	d5490 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d55e6:	4916      	ldr	r1, [pc, #88]	; (d5640 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   d55e8:	f7ff fed2 	bl	d5390 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   d55ec:	f10d 0107 	add.w	r1, sp, #7
   d55f0:	4628      	mov	r0, r5
   d55f2:	f88d 6007 	strb.w	r6, [sp, #7]
   d55f6:	f7ff ff4b 	bl	d5490 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d55fa:	4912      	ldr	r1, [pc, #72]	; (d5644 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d55fc:	f7ff fec8 	bl	d5390 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   d5600:	2302      	movs	r3, #2
   d5602:	f10d 0107 	add.w	r1, sp, #7
   d5606:	4628      	mov	r0, r5
   d5608:	f88d 3007 	strb.w	r3, [sp, #7]
   d560c:	f7ff ff40 	bl	d5490 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5610:	490d      	ldr	r1, [pc, #52]	; (d5648 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d5612:	f7ff febd 	bl	d5390 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   d5616:	2303      	movs	r3, #3
   d5618:	f10d 0107 	add.w	r1, sp, #7
   d561c:	4628      	mov	r0, r5
   d561e:	f88d 3007 	strb.w	r3, [sp, #7]
   d5622:	f7ff ff35 	bl	d5490 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5626:	4909      	ldr	r1, [pc, #36]	; (d564c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d5628:	f7ff feb2 	bl	d5390 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   d562c:	4b08      	ldr	r3, [pc, #32]	; (d5650 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d562e:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   d5632:	4b08      	ldr	r3, [pc, #32]	; (d5654 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   d5634:	4620      	mov	r0, r4
  _token = token;
   d5636:	601f      	str	r7, [r3, #0]
}
   d5638:	b002      	add	sp, #8
   d563a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d563e:	bf00      	nop
   d5640:	000d5265 	.word	0x000d5265
   d5644:	000d5299 	.word	0x000d5299
   d5648:	000d52c9 	.word	0x000d52c9
   d564c:	000d52fd 	.word	0x000d52fd
   d5650:	2003e508 	.word	0x2003e508
   d5654:	2003e50c 	.word	0x2003e50c

000d5658 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   d5658:	b510      	push	{r4, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d565a:	4c0e      	ldr	r4, [pc, #56]	; (d5694 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x3c>)
   d565c:	4620      	mov	r0, r4
   d565e:	f003 fa01 	bl	d8a64 <_ZN9TCPClientC1Ev>
   d5662:	4620      	mov	r0, r4
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d5664:	4c0c      	ldr	r4, [pc, #48]	; (d5698 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x40>)
   d5666:	4a0d      	ldr	r2, [pc, #52]	; (d569c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d5668:	490d      	ldr	r1, [pc, #52]	; (d56a0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d566a:	f003 ffe5 	bl	d9638 <__aeabi_atexit>
   d566e:	4620      	mov	r0, r4
   d5670:	f003 f9f8 	bl	d8a64 <_ZN9TCPClientC1Ev>
   d5674:	4620      	mov	r0, r4
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d5676:	4c0b      	ldr	r4, [pc, #44]	; (d56a4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d5678:	4a08      	ldr	r2, [pc, #32]	; (d569c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d567a:	4909      	ldr	r1, [pc, #36]	; (d56a0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d567c:	f003 ffdc 	bl	d9638 <__aeabi_atexit>
   d5680:	4620      	mov	r0, r4
   d5682:	f003 fc0b 	bl	d8e9c <_ZN3UDPC1Ev>
   d5686:	4620      	mov	r0, r4
   d5688:	4a04      	ldr	r2, [pc, #16]	; (d569c <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d568a:	4907      	ldr	r1, [pc, #28]	; (d56a8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d568c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5690:	f003 bfd2 	b.w	d9638 <__aeabi_atexit>
   d5694:	2003e4ec 	.word	0x2003e4ec
   d5698:	2003e484 	.word	0x2003e484
   d569c:	2003e440 	.word	0x2003e440
   d56a0:	000d5349 	.word	0x000d5349
   d56a4:	2003e4a0 	.word	0x2003e4a0
   d56a8:	000d5329 	.word	0x000d5329

000d56ac <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d56ac:	7501      	strb	r1, [r0, #20]
   d56ae:	4770      	bx	lr

000d56b0 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   d56b0:	2200      	movs	r2, #0
	  : _Node_allocator()
   d56b2:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d56b4:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d56b8:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d56bc:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d56be:	4770      	bx	lr

000d56c0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d56c0:	b570      	push	{r4, r5, r6, lr}
   d56c2:	4606      	mov	r6, r0
   d56c4:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d56c8:	2014      	movs	r0, #20
   d56ca:	f001 fd33 	bl	d7134 <malloc>
   d56ce:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d56d0:	2014      	movs	r0, #20
   d56d2:	f001 fd2f 	bl	d7134 <malloc>
   d56d6:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d56d8:	4630      	mov	r0, r6
   d56da:	f005 f8e2 	bl	da8a2 <strlen>
    for (int i = 0; i < len - 2; i++) {
   d56de:	4632      	mov	r2, r6
   d56e0:	2300      	movs	r3, #0
   d56e2:	3802      	subs	r0, #2
   d56e4:	4298      	cmp	r0, r3
   d56e6:	dd14      	ble.n	d5712 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   d56e8:	f812 1b01 	ldrb.w	r1, [r2], #1
   d56ec:	290d      	cmp	r1, #13
   d56ee:	d13a      	bne.n	d5766 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d56f0:	7811      	ldrb	r1, [r2, #0]
   d56f2:	290a      	cmp	r1, #10
   d56f4:	d137      	bne.n	d5766 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d56f6:	7851      	ldrb	r1, [r2, #1]
   d56f8:	290d      	cmp	r1, #13
   d56fa:	d134      	bne.n	d5766 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d56fc:	7891      	ldrb	r1, [r2, #2]
   d56fe:	290a      	cmp	r1, #10
   d5700:	d131      	bne.n	d5766 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d5702:	3304      	adds	r3, #4
   d5704:	18f1      	adds	r1, r6, r3
   d5706:	2214      	movs	r2, #20
   d5708:	4628      	mov	r0, r5
   d570a:	f005 f8e4 	bl	da8d6 <strncpy>
        parsed[20] = '\0';
   d570e:	2300      	movs	r3, #0
   d5710:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   d5712:	210a      	movs	r1, #10
   d5714:	4628      	mov	r0, r5
   d5716:	f005 f887 	bl	da828 <strchr>
    if (pch == NULL) {
   d571a:	4606      	mov	r6, r0
   d571c:	b328      	cbz	r0, d576a <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   d571e:	210a      	movs	r1, #10
   d5720:	3001      	adds	r0, #1
   d5722:	f005 f881 	bl	da828 <strchr>
    if (pch2 == NULL) {
   d5726:	b300      	cbz	r0, d576a <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   d5728:	4631      	mov	r1, r6
   d572a:	4620      	mov	r0, r4
   d572c:	f005 f893 	bl	da856 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d5730:	4620      	mov	r0, r4
   d5732:	f005 f8b6 	bl	da8a2 <strlen>
   d5736:	4420      	add	r0, r4
   d5738:	2300      	movs	r3, #0
   d573a:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   d573e:	4620      	mov	r0, r4
   d5740:	f004 fff4 	bl	da72c <atof>
   d5744:	ec51 0b10 	vmov	r0, r1, d0
   d5748:	f004 fe06 	bl	da358 <__aeabi_d2f>
   d574c:	ee08 0a10 	vmov	s16, r0
    free(dst);
   d5750:	4620      	mov	r0, r4
   d5752:	f001 fcf7 	bl	d7144 <free>
    free(parsed);
   d5756:	4628      	mov	r0, r5
   d5758:	f001 fcf4 	bl	d7144 <free>
}
   d575c:	eeb0 0a48 	vmov.f32	s0, s16
   d5760:	ecbd 8b02 	vpop	{d8}
   d5764:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   d5766:	3301      	adds	r3, #1
   d5768:	e7bc      	b.n	d56e4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   d576a:	ed9f 8a01 	vldr	s16, [pc, #4]	; d5770 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   d576e:	e7f5      	b.n	d575c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   d5770:	cda2425f 	.word	0xcda2425f

000d5774 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5774:	b530      	push	{r4, r5, lr}
   d5776:	4d07      	ldr	r5, [pc, #28]	; (d5794 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d5778:	6005      	str	r5, [r0, #0]
   d577a:	2500      	movs	r5, #0
  _user_agent = user_agent;
   d577c:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5780:	7505      	strb	r5, [r0, #20]
  _token = token;
   d5782:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5784:	f241 3588 	movw	r5, #5000	; 0x1388
   d5788:	6185      	str	r5, [r0, #24]
   d578a:	2505      	movs	r5, #5
  _port = port;
   d578c:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5790:	7705      	strb	r5, [r0, #28]
}
   d5792:	bd30      	pop	{r4, r5, pc}
   d5794:	000dcc34 	.word	0x000dcc34

000d5798 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   d5798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d579c:	f8df 808c 	ldr.w	r8, [pc, #140]	; d582c <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   d57a0:	f8df a08c 	ldr.w	sl, [pc, #140]	; d5830 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   d57a4:	f8df b08c 	ldr.w	fp, [pc, #140]	; d5834 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   d57a8:	4604      	mov	r4, r0
   d57aa:	460d      	mov	r5, r1
   d57ac:	4617      	mov	r7, r2
   d57ae:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d57b0:	4640      	mov	r0, r8
   d57b2:	fa5f f986 	uxtb.w	r9, r6
   d57b6:	f002 ff48 	bl	d864a <_ZN9TCPClient9connectedEv>
   d57ba:	bb88      	cbnz	r0, d5820 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   d57bc:	7f23      	ldrb	r3, [r4, #28]
   d57be:	454b      	cmp	r3, r9
   d57c0:	d92e      	bls.n	d5820 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   d57c2:	7d23      	ldrb	r3, [r4, #20]
   d57c4:	b1cb      	cbz	r3, d57fa <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   d57c6:	f003 fd97 	bl	d92f8 <_Z16_fetch_usbserialv>
   d57ca:	4651      	mov	r1, sl
   d57cc:	f002 fc90 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(host);
   d57d0:	f003 fd92 	bl	d92f8 <_Z16_fetch_usbserialv>
   d57d4:	4629      	mov	r1, r5
   d57d6:	f002 fc8b 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d57da:	f003 fd8d 	bl	d92f8 <_Z16_fetch_usbserialv>
   d57de:	4659      	mov	r1, fp
   d57e0:	f002 fc86 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d57e4:	f003 fd88 	bl	d92f8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d57e8:	220a      	movs	r2, #10
   d57ea:	4649      	mov	r1, r9
   d57ec:	9001      	str	r0, [sp, #4]
   d57ee:	f002 fc9c 	bl	d812a <_ZN5Print11printNumberEmh>
        n += println();
   d57f2:	9b01      	ldr	r3, [sp, #4]
   d57f4:	4618      	mov	r0, r3
   d57f6:	f002 fc82 	bl	d80fe <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   d57fa:	2300      	movs	r3, #0
   d57fc:	b2ba      	uxth	r2, r7
   d57fe:	4629      	mov	r1, r5
   d5800:	4640      	mov	r0, r8
   d5802:	f003 f953 	bl	d8aac <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d5806:	7d23      	ldrb	r3, [r4, #20]
   d5808:	b123      	cbz	r3, d5814 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   d580a:	f003 fd75 	bl	d92f8 <_Z16_fetch_usbserialv>
   d580e:	4906      	ldr	r1, [pc, #24]	; (d5828 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d5810:	f002 fc81 	bl	d8116 <_ZN5Print7printlnEPKc>
    delay(1000);
   d5814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5818:	f001 fccc 	bl	d71b4 <delay>
   d581c:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d581e:	e7c7      	b.n	d57b0 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   d5820:	b003      	add	sp, #12
   d5822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5826:	bf00      	nop
   d5828:	000dca57 	.word	0x000dca57
   d582c:	2003e510 	.word	0x2003e510
   d5830:	000dca2d 	.word	0x000dca2d
   d5834:	000dca43 	.word	0x000dca43

000d5838 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   d5838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d583c:	1e4b      	subs	r3, r1, #1
   d583e:	460c      	mov	r4, r1
   d5840:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d5844:	4605      	mov	r5, r0
    response[i] = '\0';
   d5846:	2100      	movs	r1, #0
   d5848:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d584c:	4293      	cmp	r3, r2
   d584e:	d1fb      	bne.n	d5848 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
   d5850:	7d2b      	ldrb	r3, [r5, #20]
   d5852:	b14b      	cbz	r3, d5868 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d5854:	f003 fd50 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5858:	4914      	ldr	r1, [pc, #80]	; (d58ac <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d585a:	f002 fc5c 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d585e:	f003 fd4b 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5862:	4913      	ldr	r1, [pc, #76]	; (d58b0 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d5864:	f002 fc57 	bl	d8116 <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   d5868:	4f12      	ldr	r7, [pc, #72]	; (d58b4 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
void UbiHTTP::readServerAnswer(char* response) {
   d586a:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d586c:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
   d5870:	4638      	mov	r0, r7
   d5872:	f003 f84d 	bl	d8910 <_ZN9TCPClient9availableEv>
   d5876:	b170      	cbz	r0, d5896 <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
   d5878:	4638      	mov	r0, r7
   d587a:	f002 ff82 	bl	d8782 <_ZN9TCPClient4readEv>
   d587e:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
   d5880:	7d2b      	ldrb	r3, [r5, #20]
   d5882:	b12b      	cbz	r3, d5890 <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
   d5884:	f003 fd38 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5888:	6803      	ldr	r3, [r0, #0]
   d588a:	5da1      	ldrb	r1, [r4, r6]
   d588c:	689b      	ldr	r3, [r3, #8]
   d588e:	4798      	blx	r3
    j++;
   d5890:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d5892:	4546      	cmp	r6, r8
   d5894:	d1ec      	bne.n	d5870 <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
   d5896:	7d2b      	ldrb	r3, [r5, #20]
   d5898:	b133      	cbz	r3, d58a8 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
   d589a:	f003 fd2d 	bl	d92f8 <_Z16_fetch_usbserialv>
}
   d589e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
   d58a2:	4905      	ldr	r1, [pc, #20]	; (d58b8 <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
   d58a4:	f002 bc37 	b.w	d8116 <_ZN5Print7printlnEPKc>
}
   d58a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58ac:	000dca7c 	.word	0x000dca7c
   d58b0:	000dca68 	.word	0x000dca68
   d58b4:	2003e510 	.word	0x2003e510
   d58b8:	000dca7b 	.word	0x000dca7b

000d58bc <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   d58bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d58be:	4f0e      	ldr	r7, [pc, #56]	; (d58f8 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   d58c0:	4604      	mov	r4, r0
  int timeout = 0;
   d58c2:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d58c4:	4638      	mov	r0, r7
   d58c6:	f003 f823 	bl	d8910 <_ZN9TCPClient9availableEv>
   d58ca:	4605      	mov	r5, r0
   d58cc:	b990      	cbnz	r0, d58f4 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   d58ce:	69a3      	ldr	r3, [r4, #24]
   d58d0:	42b3      	cmp	r3, r6
   d58d2:	dd0f      	ble.n	d58f4 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   d58d4:	2001      	movs	r0, #1
   d58d6:	f001 fc6d 	bl	d71b4 <delay>
    if (timeout > _timeout - 1) {
   d58da:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d58dc:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d58de:	42b3      	cmp	r3, r6
   d58e0:	dcf0      	bgt.n	d58c4 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
   d58e2:	7d20      	ldrb	r0, [r4, #20]
   d58e4:	b128      	cbz	r0, d58f2 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d58e6:	f003 fd07 	bl	d92f8 <_Z16_fetch_usbserialv>
   d58ea:	4904      	ldr	r1, [pc, #16]	; (d58fc <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d58ec:	f002 fc13 	bl	d8116 <_ZN5Print7printlnEPKc>
   d58f0:	4628      	mov	r0, r5
}
   d58f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d58f4:	2001      	movs	r0, #1
   d58f6:	e7fc      	b.n	d58f2 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   d58f8:	2003e510 	.word	0x2003e510
   d58fc:	000dca87 	.word	0x000dca87

000d5900 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5902:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d5904:	6902      	ldr	r2, [r0, #16]
   d5906:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5908:	4604      	mov	r4, r0
   d590a:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d590c:	f7ff ff44 	bl	d5798 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   d5910:	4878      	ldr	r0, [pc, #480]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5912:	f002 fe9a 	bl	d864a <_ZN9TCPClient9connectedEv>
   d5916:	4606      	mov	r6, r0
   d5918:	2800      	cmp	r0, #0
   d591a:	f000 80e1 	beq.w	d5ae0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d591e:	4976      	ldr	r1, [pc, #472]	; (d5af8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d5920:	4874      	ldr	r0, [pc, #464]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5922:	f002 fbe5 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5926:	4639      	mov	r1, r7
   d5928:	4872      	ldr	r0, [pc, #456]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d592a:	f002 fbe1 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d592e:	4973      	ldr	r1, [pc, #460]	; (d5afc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d5930:	4870      	ldr	r0, [pc, #448]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5932:	f002 fbdd 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d5936:	4972      	ldr	r1, [pc, #456]	; (d5b00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d5938:	486e      	ldr	r0, [pc, #440]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d593a:	f002 fbd9 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d593e:	6861      	ldr	r1, [r4, #4]
   d5940:	486c      	ldr	r0, [pc, #432]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5942:	f002 fbd5 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d5946:	496f      	ldr	r1, [pc, #444]	; (d5b04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5948:	486a      	ldr	r0, [pc, #424]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d594a:	f002 fbd1 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d594e:	496e      	ldr	r1, [pc, #440]	; (d5b08 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d5950:	4868      	ldr	r0, [pc, #416]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5952:	f002 fbcd 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d5956:	68a1      	ldr	r1, [r4, #8]
   d5958:	4866      	ldr	r0, [pc, #408]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d595a:	f002 fbc9 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d595e:	4969      	ldr	r1, [pc, #420]	; (d5b04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5960:	4864      	ldr	r0, [pc, #400]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5962:	f002 fbc5 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d5966:	4969      	ldr	r1, [pc, #420]	; (d5b0c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d5968:	4862      	ldr	r0, [pc, #392]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d596a:	f002 fbc1 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d596e:	68e1      	ldr	r1, [r4, #12]
   d5970:	4860      	ldr	r0, [pc, #384]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5972:	f002 fbbd 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d5976:	4963      	ldr	r1, [pc, #396]	; (d5b04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5978:	485e      	ldr	r0, [pc, #376]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d597a:	f002 fbb9 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d597e:	4964      	ldr	r1, [pc, #400]	; (d5b10 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d5980:	485c      	ldr	r0, [pc, #368]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5982:	f002 fbb5 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d5986:	4963      	ldr	r1, [pc, #396]	; (d5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5988:	485a      	ldr	r0, [pc, #360]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d598a:	f002 fbb1 	bl	d80f0 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d598e:	4628      	mov	r0, r5
   d5990:	f004 ff87 	bl	da8a2 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d5994:	4960      	ldr	r1, [pc, #384]	; (d5b18 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   d5996:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d5998:	4856      	ldr	r0, [pc, #344]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d599a:	f002 fba9 	bl	d80f0 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d599e:	220a      	movs	r2, #10
   d59a0:	4631      	mov	r1, r6
   d59a2:	4854      	ldr	r0, [pc, #336]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59a4:	f002 fbc1 	bl	d812a <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   d59a8:	495c      	ldr	r1, [pc, #368]	; (d5b1c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d59aa:	4852      	ldr	r0, [pc, #328]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59ac:	f002 fba0 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d59b0:	4629      	mov	r1, r5
   d59b2:	4850      	ldr	r0, [pc, #320]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59b4:	f002 fb9c 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d59b8:	4952      	ldr	r1, [pc, #328]	; (d5b04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d59ba:	484e      	ldr	r0, [pc, #312]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59bc:	f002 fb98 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d59c0:	484c      	ldr	r0, [pc, #304]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59c2:	f002 fe41 	bl	d8648 <_ZN9TCPClient5flushEv>
    if (_debug) {
   d59c6:	7d23      	ldrb	r3, [r4, #20]
   d59c8:	2b00      	cmp	r3, #0
   d59ca:	d069      	beq.n	d5aa0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d59cc:	f003 fc94 	bl	d92f8 <_Z16_fetch_usbserialv>
   d59d0:	4953      	ldr	r1, [pc, #332]	; (d5b20 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d59d2:	f002 fba0 	bl	d8116 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d59d6:	f003 fc8f 	bl	d92f8 <_Z16_fetch_usbserialv>
   d59da:	4947      	ldr	r1, [pc, #284]	; (d5af8 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d59dc:	f002 fb88 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d59e0:	f003 fc8a 	bl	d92f8 <_Z16_fetch_usbserialv>
   d59e4:	4639      	mov	r1, r7
   d59e6:	f002 fb83 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d59ea:	f003 fc85 	bl	d92f8 <_Z16_fetch_usbserialv>
   d59ee:	4943      	ldr	r1, [pc, #268]	; (d5afc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d59f0:	f002 fb7e 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d59f4:	f003 fc80 	bl	d92f8 <_Z16_fetch_usbserialv>
   d59f8:	4941      	ldr	r1, [pc, #260]	; (d5b00 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d59fa:	f002 fb79 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d59fe:	f003 fc7b 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a02:	6861      	ldr	r1, [r4, #4]
   d5a04:	f002 fb74 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5a08:	f003 fc76 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a0c:	493d      	ldr	r1, [pc, #244]	; (d5b04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5a0e:	f002 fb6f 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d5a12:	f003 fc71 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a16:	493c      	ldr	r1, [pc, #240]	; (d5b08 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d5a18:	f002 fb6a 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5a1c:	f003 fc6c 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a20:	68a1      	ldr	r1, [r4, #8]
   d5a22:	f002 fb65 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5a26:	f003 fc67 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a2a:	4936      	ldr	r1, [pc, #216]	; (d5b04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5a2c:	f002 fb60 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d5a30:	f003 fc62 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a34:	4935      	ldr	r1, [pc, #212]	; (d5b0c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d5a36:	f002 fb5b 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5a3a:	f003 fc5d 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a3e:	68e1      	ldr	r1, [r4, #12]
   d5a40:	f002 fb56 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5a44:	f003 fc58 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a48:	492e      	ldr	r1, [pc, #184]	; (d5b04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5a4a:	f002 fb51 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d5a4e:	f003 fc53 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a52:	492f      	ldr	r1, [pc, #188]	; (d5b10 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d5a54:	f002 fb4c 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d5a58:	f003 fc4e 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a5c:	492d      	ldr	r1, [pc, #180]	; (d5b14 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5a5e:	f002 fb47 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d5a62:	f003 fc49 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a66:	492c      	ldr	r1, [pc, #176]	; (d5b18 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d5a68:	f002 fb42 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d5a6c:	f003 fc44 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a70:	220a      	movs	r2, #10
   d5a72:	4631      	mov	r1, r6
   d5a74:	f002 fb59 	bl	d812a <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d5a78:	f003 fc3e 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a7c:	4927      	ldr	r1, [pc, #156]	; (d5b1c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d5a7e:	f002 fb37 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d5a82:	f003 fc39 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a86:	4629      	mov	r1, r5
   d5a88:	f002 fb32 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5a8c:	f003 fc34 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a90:	491c      	ldr	r1, [pc, #112]	; (d5b04 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5a92:	f002 fb2d 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   d5a96:	f003 fc2f 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5a9a:	4922      	ldr	r1, [pc, #136]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d5a9c:	f002 fb3b 	bl	d8116 <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   d5aa0:	4620      	mov	r0, r4
   d5aa2:	f7ff ff0b 	bl	d58bc <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   d5aa6:	7d23      	ldrb	r3, [r4, #20]
   d5aa8:	b92b      	cbnz	r3, d5ab6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   d5aaa:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   d5aac:	4811      	ldr	r0, [pc, #68]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5aae:	f002 ff89 	bl	d89c4 <_ZN9TCPClient4stopEv>
}
   d5ab2:	4620      	mov	r0, r4
   d5ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   d5ab6:	f003 fc1f 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5aba:	491b      	ldr	r1, [pc, #108]	; (d5b28 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   d5abc:	4d0d      	ldr	r5, [pc, #52]	; (d5af4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   d5abe:	f002 fb2a 	bl	d8116 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d5ac2:	4628      	mov	r0, r5
   d5ac4:	f002 ff24 	bl	d8910 <_ZN9TCPClient9availableEv>
   d5ac8:	2800      	cmp	r0, #0
   d5aca:	d0ee      	beq.n	d5aaa <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d5acc:	4628      	mov	r0, r5
   d5ace:	f002 fe58 	bl	d8782 <_ZN9TCPClient4readEv>
   d5ad2:	4604      	mov	r4, r0
        Serial.print(c);
   d5ad4:	f003 fc10 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5ad8:	b2e1      	uxtb	r1, r4
   d5ada:	f002 fb0d 	bl	d80f8 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   d5ade:	e7f0      	b.n	d5ac2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   d5ae0:	7d24      	ldrb	r4, [r4, #20]
   d5ae2:	2c00      	cmp	r4, #0
   d5ae4:	d0e2      	beq.n	d5aac <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   d5ae6:	f003 fc07 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5aea:	4910      	ldr	r1, [pc, #64]	; (d5b2c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d5aec:	f002 fb13 	bl	d8116 <_ZN5Print7printlnEPKc>
  bool result = false;
   d5af0:	4634      	mov	r4, r6
   d5af2:	e7db      	b.n	d5aac <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   d5af4:	2003e510 	.word	0x2003e510
   d5af8:	000dcaba 	.word	0x000dcaba
   d5afc:	000dcad2 	.word	0x000dcad2
   d5b00:	000dcade 	.word	0x000dcade
   d5b04:	000dcc02 	.word	0x000dcc02
   d5b08:	000dcae5 	.word	0x000dcae5
   d5b0c:	000dcaf2 	.word	0x000dcaf2
   d5b10:	000dcb01 	.word	0x000dcb01
   d5b14:	000dcb15 	.word	0x000dcb15
   d5b18:	000dcb36 	.word	0x000dcb36
   d5b1c:	000dcc00 	.word	0x000dcc00
   d5b20:	000dcb47 	.word	0x000dcb47
   d5b24:	000dcb63 	.word	0x000dcb63
   d5b28:	000dcb81 	.word	0x000dcb81
   d5b2c:	000dcb9d 	.word	0x000dcb9d

000d5b30 <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d5b30:	b570      	push	{r4, r5, r6, lr}
   d5b32:	ed2d 8b02 	vpush	{d8}
   d5b36:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d5b38:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d5b3a:	460e      	mov	r6, r1
   d5b3c:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d5b3e:	6841      	ldr	r1, [r0, #4]
   d5b40:	4866      	ldr	r0, [pc, #408]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b42:	2250      	movs	r2, #80	; 0x50
   d5b44:	f002 ffb2 	bl	d8aac <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d5b48:	4620      	mov	r0, r4
   d5b4a:	6861      	ldr	r1, [r4, #4]
   d5b4c:	2250      	movs	r2, #80	; 0x50
   d5b4e:	f7ff fe23 	bl	d5798 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d5b52:	4862      	ldr	r0, [pc, #392]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b54:	f002 fd79 	bl	d864a <_ZN9TCPClient9connectedEv>
   d5b58:	2800      	cmp	r0, #0
   d5b5a:	f000 80b6 	beq.w	d5cca <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d5b5e:	4960      	ldr	r1, [pc, #384]	; (d5ce0 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d5b60:	485e      	ldr	r0, [pc, #376]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b62:	f002 fac5 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5b66:	4631      	mov	r1, r6
   d5b68:	485c      	ldr	r0, [pc, #368]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b6a:	f002 fac1 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d5b6e:	495d      	ldr	r1, [pc, #372]	; (d5ce4 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5b70:	485a      	ldr	r0, [pc, #360]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b72:	f002 fabd 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d5b76:	4629      	mov	r1, r5
   d5b78:	4858      	ldr	r0, [pc, #352]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b7a:	f002 fab9 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d5b7e:	495a      	ldr	r1, [pc, #360]	; (d5ce8 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d5b80:	4856      	ldr	r0, [pc, #344]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b82:	f002 fab5 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d5b86:	4959      	ldr	r1, [pc, #356]	; (d5cec <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d5b88:	4854      	ldr	r0, [pc, #336]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b8a:	f002 fab1 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d5b8e:	4958      	ldr	r1, [pc, #352]	; (d5cf0 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d5b90:	4852      	ldr	r0, [pc, #328]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b92:	f002 faad 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d5b96:	6861      	ldr	r1, [r4, #4]
   d5b98:	4850      	ldr	r0, [pc, #320]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b9a:	f002 faa9 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5b9e:	4955      	ldr	r1, [pc, #340]	; (d5cf4 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5ba0:	484e      	ldr	r0, [pc, #312]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5ba2:	f002 faa5 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d5ba6:	4954      	ldr	r1, [pc, #336]	; (d5cf8 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5ba8:	484c      	ldr	r0, [pc, #304]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5baa:	f002 faa1 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d5bae:	68a1      	ldr	r1, [r4, #8]
   d5bb0:	484a      	ldr	r0, [pc, #296]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bb2:	f002 fa9d 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5bb6:	494f      	ldr	r1, [pc, #316]	; (d5cf4 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5bb8:	4848      	ldr	r0, [pc, #288]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bba:	f002 fa99 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d5bbe:	494f      	ldr	r1, [pc, #316]	; (d5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5bc0:	4846      	ldr	r0, [pc, #280]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bc2:	f002 fa95 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d5bc6:	68e1      	ldr	r1, [r4, #12]
   d5bc8:	4844      	ldr	r0, [pc, #272]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bca:	f002 fa91 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5bce:	4949      	ldr	r1, [pc, #292]	; (d5cf4 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5bd0:	4842      	ldr	r0, [pc, #264]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bd2:	f002 fa8d 	bl	d80f0 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d5bd6:	494a      	ldr	r1, [pc, #296]	; (d5d00 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5bd8:	4840      	ldr	r0, [pc, #256]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bda:	f002 fa89 	bl	d80f0 <_ZN5Print5printEPKc>
    if (_debug) {
   d5bde:	7d23      	ldrb	r3, [r4, #20]
   d5be0:	2b00      	cmp	r3, #0
   d5be2:	d04f      	beq.n	d5c84 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   d5be4:	f003 fb88 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5be8:	493d      	ldr	r1, [pc, #244]	; (d5ce0 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d5bea:	f002 fa81 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d5bee:	f003 fb83 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5bf2:	4631      	mov	r1, r6
   d5bf4:	f002 fa7c 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("/");
   d5bf8:	f003 fb7e 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5bfc:	4939      	ldr	r1, [pc, #228]	; (d5ce4 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5bfe:	f002 fa77 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d5c02:	f003 fb79 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c06:	4629      	mov	r1, r5
   d5c08:	f002 fa72 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d5c0c:	f003 fb74 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c10:	4935      	ldr	r1, [pc, #212]	; (d5ce8 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d5c12:	f002 fa6d 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d5c16:	f003 fb6f 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c1a:	4934      	ldr	r1, [pc, #208]	; (d5cec <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d5c1c:	f002 fa68 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d5c20:	f003 fb6a 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c24:	4932      	ldr	r1, [pc, #200]	; (d5cf0 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d5c26:	f002 fa63 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d5c2a:	f003 fb65 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c2e:	6861      	ldr	r1, [r4, #4]
   d5c30:	f002 fa5e 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5c34:	f003 fb60 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c38:	492e      	ldr	r1, [pc, #184]	; (d5cf4 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5c3a:	f002 fa59 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d5c3e:	f003 fb5b 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c42:	492d      	ldr	r1, [pc, #180]	; (d5cf8 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5c44:	f002 fa54 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5c48:	f003 fb56 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c4c:	68a1      	ldr	r1, [r4, #8]
   d5c4e:	f002 fa4f 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5c52:	f003 fb51 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c56:	4927      	ldr	r1, [pc, #156]	; (d5cf4 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5c58:	f002 fa4a 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d5c5c:	f003 fb4c 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c60:	4926      	ldr	r1, [pc, #152]	; (d5cfc <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5c62:	f002 fa45 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5c66:	f003 fb47 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c6a:	68e1      	ldr	r1, [r4, #12]
   d5c6c:	f002 fa40 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5c70:	f003 fb42 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c74:	491f      	ldr	r1, [pc, #124]	; (d5cf4 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5c76:	f002 fa3b 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d5c7a:	f003 fb3d 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5c7e:	4920      	ldr	r1, [pc, #128]	; (d5d00 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5c80:	f002 fa36 	bl	d80f0 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   d5c84:	4620      	mov	r0, r4
   d5c86:	f7ff fe19 	bl	d58bc <_ZN7UbiHTTP16waitServerAnswerEv>
   d5c8a:	b948      	cbnz	r0, d5ca0 <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   d5c8c:	4813      	ldr	r0, [pc, #76]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   d5c8e:	ed9f 8a1d 	vldr	s16, [pc, #116]	; d5d04 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   d5c92:	f002 fe97 	bl	d89c4 <_ZN9TCPClient4stopEv>
}
   d5c96:	eeb0 0a48 	vmov.f32	s0, s16
   d5c9a:	ecbd 8b02 	vpop	{d8}
   d5c9e:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5ca0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d5ca4:	f001 fa46 	bl	d7134 <malloc>
    readServerAnswer(response);
   d5ca8:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5caa:	4605      	mov	r5, r0
    readServerAnswer(response);
   d5cac:	4620      	mov	r0, r4
   d5cae:	f7ff fdc3 	bl	d5838 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   d5cb2:	4628      	mov	r0, r5
   d5cb4:	f7ff fd04 	bl	d56c0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   d5cb8:	4808      	ldr	r0, [pc, #32]	; (d5cdc <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5cba:	eeb0 8a40 	vmov.f32	s16, s0
   d5cbe:	f002 fe81 	bl	d89c4 <_ZN9TCPClient4stopEv>
    free(response);
   d5cc2:	4628      	mov	r0, r5
   d5cc4:	f001 fa3e 	bl	d7144 <free>
    return value;
   d5cc8:	e7e5      	b.n	d5c96 <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   d5cca:	7d23      	ldrb	r3, [r4, #20]
   d5ccc:	2b00      	cmp	r3, #0
   d5cce:	d0dd      	beq.n	d5c8c <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   d5cd0:	f003 fb12 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5cd4:	490c      	ldr	r1, [pc, #48]	; (d5d08 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d5cd6:	f002 fa1e 	bl	d8116 <_ZN5Print7printlnEPKc>
   d5cda:	e7d7      	b.n	d5c8c <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   d5cdc:	2003e510 	.word	0x2003e510
   d5ce0:	000dcbc7 	.word	0x000dcbc7
   d5ce4:	000dcbdc 	.word	0x000dcbdc
   d5ce8:	000dcbde 	.word	0x000dcbde
   d5cec:	000dcad2 	.word	0x000dcad2
   d5cf0:	000dcade 	.word	0x000dcade
   d5cf4:	000dcc02 	.word	0x000dcc02
   d5cf8:	000dcae5 	.word	0x000dcae5
   d5cfc:	000dcaf2 	.word	0x000dcaf2
   d5d00:	000dcbe2 	.word	0x000dcbe2
   d5d04:	cda2425f 	.word	0xcda2425f
   d5d08:	000dcc05 	.word	0x000dcc05

000d5d0c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
}
   d5d0c:	b510      	push	{r4, lr}
   d5d0e:	4c05      	ldr	r4, [pc, #20]	; (d5d24 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x18>)
   d5d10:	4620      	mov	r0, r4
   d5d12:	f002 fea7 	bl	d8a64 <_ZN9TCPClientC1Ev>
   d5d16:	4620      	mov	r0, r4
   d5d18:	4a03      	ldr	r2, [pc, #12]	; (d5d28 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d5d1a:	4904      	ldr	r1, [pc, #16]	; (d5d2c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d5d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5d20:	f003 bc8a 	b.w	d9638 <__aeabi_atexit>
   d5d24:	2003e510 	.word	0x2003e510
   d5d28:	2003e440 	.word	0x2003e440
   d5d2c:	000d5349 	.word	0x000d5349

000d5d30 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d5d30:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5d38 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d5d34:	4770      	bx	lr
   d5d36:	bf00      	nop
   d5d38:	cda2425f 	.word	0xcda2425f

000d5d3c <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d5d3c:	7401      	strb	r1, [r0, #16]
   d5d3e:	4770      	bx	lr

000d5d40 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   d5d40:	2200      	movs	r2, #0
	  : _Node_allocator()
   d5d42:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d5d44:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d5d48:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d5d4c:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d5d4e:	4770      	bx	lr

000d5d50 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5d50:	b530      	push	{r4, r5, lr}
   d5d52:	b085      	sub	sp, #20
   d5d54:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5d56:	9b08      	ldr	r3, [sp, #32]
   d5d58:	781b      	ldrb	r3, [r3, #0]
   d5d5a:	f88d 3000 	strb.w	r3, [sp]
   d5d5e:	a802      	add	r0, sp, #8
   d5d60:	233c      	movs	r3, #60	; 0x3c
   d5d62:	f001 fbdf 	bl	d7524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5d66:	2000      	movs	r0, #0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5d68:	9c02      	ldr	r4, [sp, #8]
   d5d6a:	f001 f92f 	bl	d6fcc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5d6e:	b120      	cbz	r0, d5d7a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d5d70:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5d72:	b913      	cbnz	r3, d5d7a <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   d5d74:	f001 f94e 	bl	d7014 <spark_process>
    }
   d5d78:	e7fa      	b.n	d5d70 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   d5d7a:	7863      	ldrb	r3, [r4, #1]
   d5d7c:	f3bf 8f5b 	dmb	ish
   d5d80:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d5d82:	b9ab      	cbnz	r3, d5db0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   d5d84:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   d5d86:	9c03      	ldr	r4, [sp, #12]
   d5d88:	b17c      	cbz	r4, d5daa <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   d5d8a:	6863      	ldr	r3, [r4, #4]
   d5d8c:	3b01      	subs	r3, #1
   d5d8e:	6063      	str	r3, [r4, #4]
   d5d90:	b95b      	cbnz	r3, d5daa <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   d5d92:	6823      	ldr	r3, [r4, #0]
   d5d94:	4620      	mov	r0, r4
   d5d96:	689b      	ldr	r3, [r3, #8]
   d5d98:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5d9a:	68a3      	ldr	r3, [r4, #8]
   d5d9c:	3b01      	subs	r3, #1
   d5d9e:	60a3      	str	r3, [r4, #8]
   d5da0:	b91b      	cbnz	r3, d5daa <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   d5da2:	6823      	ldr	r3, [r4, #0]
   d5da4:	4620      	mov	r0, r4
   d5da6:	68db      	ldr	r3, [r3, #12]
   d5da8:	4798      	blx	r3
}
   d5daa:	4628      	mov	r0, r5
   d5dac:	b005      	add	sp, #20
   d5dae:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d5db0:	2000      	movs	r0, #0
   d5db2:	f001 f90b 	bl	d6fcc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5db6:	b120      	cbz	r0, d5dc2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   d5db8:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5dba:	b913      	cbnz	r3, d5dc2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   d5dbc:	f001 f92a 	bl	d7014 <spark_process>
    }
   d5dc0:	e7fa      	b.n	d5db8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5dc2:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d5dc4:	2b01      	cmp	r3, #1
   d5dc6:	d1dd      	bne.n	d5d84 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   d5dc8:	7b25      	ldrb	r5, [r4, #12]
   d5dca:	e7dc      	b.n	d5d86 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000d5dcc <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d5dcc:	b510      	push	{r4, lr}
   d5dce:	4c04      	ldr	r4, [pc, #16]	; (d5de0 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d5dd0:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   d5dd2:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d5dd6:	2400      	movs	r4, #0
  _token = token;
   d5dd8:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d5dda:	7404      	strb	r4, [r0, #16]
  _token = token;
   d5ddc:	60c3      	str	r3, [r0, #12]
}
   d5dde:	bd10      	pop	{r4, pc}
   d5de0:	000dcc4c 	.word	0x000dcc4c

000d5de4 <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
   d5de4:	b510      	push	{r4, lr}
   d5de6:	4604      	mov	r4, r0
  delete[] _default_device_label;
   d5de8:	6800      	ldr	r0, [r0, #0]
   d5dea:	b108      	cbz	r0, d5df0 <_ZN18UbiProtocolHandlerD1Ev+0xc>
   d5dec:	f7fe f959 	bl	d40a2 <_ZdaPv>

  free(_dots);
   d5df0:	68e0      	ldr	r0, [r4, #12]
   d5df2:	f001 f9a7 	bl	d7144 <free>
  delete _ubiProtocol;
   d5df6:	6860      	ldr	r0, [r4, #4]
   d5df8:	b110      	cbz	r0, d5e00 <_ZN18UbiProtocolHandlerD1Ev+0x1c>
   d5dfa:	2104      	movs	r1, #4
   d5dfc:	f003 fc21 	bl	d9642 <_ZdlPvj>
}
   d5e00:	4620      	mov	r0, r4
   d5e02:	bd10      	pop	{r4, pc}

000d5e04 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d5e04:	b538      	push	{r3, r4, r5, lr}
   d5e06:	4604      	mov	r4, r0
  _dirty = true;
   d5e08:	2001      	movs	r0, #1
   d5e0a:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d5e0c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5e10:	68e5      	ldr	r5, [r4, #12]
   d5e12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5e16:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d5e1a:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d5e1e:	68e0      	ldr	r0, [r4, #12]
   d5e20:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d5e24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d5e28:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d5e2c:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d5e30:	68e0      	ldr	r0, [r4, #12]
   d5e32:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d5e36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d5e3a:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d5e3c:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d5e40:	68e1      	ldr	r1, [r4, #12]
   d5e42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d5e46:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d5e4a:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d5e4c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5e50:	68e2      	ldr	r2, [r4, #12]
   d5e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5e56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d5e5a:	9a04      	ldr	r2, [sp, #16]
   d5e5c:	611a      	str	r2, [r3, #16]
  _current_value++;
   d5e5e:	7c23      	ldrb	r3, [r4, #16]
   d5e60:	3301      	adds	r3, #1
   d5e62:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d5e64:	2b0a      	cmp	r3, #10
  _current_value++;
   d5e66:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d5e68:	dd08      	ble.n	d5e7c <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d5e6a:	7ca3      	ldrb	r3, [r4, #18]
   d5e6c:	b123      	cbz	r3, d5e78 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   d5e6e:	f003 fa43 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5e72:	4903      	ldr	r1, [pc, #12]	; (d5e80 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d5e74:	f002 f94f 	bl	d8116 <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d5e78:	230a      	movs	r3, #10
   d5e7a:	7423      	strb	r3, [r4, #16]
  }
}
   d5e7c:	bd38      	pop	{r3, r4, r5, pc}
   d5e7e:	bf00      	nop
   d5e80:	000dcc5c 	.word	0x000dcc5c

000d5e84 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d5e84:	b510      	push	{r4, lr}
   d5e86:	ee10 0a10 	vmov	r0, s0
   d5e8a:	b086      	sub	sp, #24
   d5e8c:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d5e8e:	f003 ff13 	bl	d9cb8 <__aeabi_f2d>
   d5e92:	4602      	mov	r2, r0
   d5e94:	460b      	mov	r3, r1
   d5e96:	a801      	add	r0, sp, #4
   d5e98:	490a      	ldr	r1, [pc, #40]	; (d5ec4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   d5e9a:	f001 f963 	bl	d7164 <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d5e9e:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   d5ea0:	2214      	movs	r2, #20
  uint8_t k = 0;
   d5ea2:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   d5ea4:	f810 1b01 	ldrb.w	r1, [r0], #1
   d5ea8:	2920      	cmp	r1, #32
   d5eaa:	d006      	beq.n	d5eba <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d5eac:	54e1      	strb	r1, [r4, r3]
      k++;
   d5eae:	3301      	adds	r3, #1
   d5eb0:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d5eb2:	b911      	cbnz	r1, d5eba <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d5eb4:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   d5eb6:	b006      	add	sp, #24
   d5eb8:	bd10      	pop	{r4, pc}
  while (j < 20) {
   d5eba:	3a01      	subs	r2, #1
   d5ebc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d5ec0:	d1f0      	bne.n	d5ea4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   d5ec2:	e7f8      	b.n	d5eb6 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   d5ec4:	000dcc9b 	.word	0x000dcc9b

000d5ec8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d5ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ecc:	460c      	mov	r4, r1
   d5ece:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   d5ed0:	494c      	ldr	r1, [pc, #304]	; (d6004 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d5ed2:	f8df 8154 	ldr.w	r8, [pc, #340]	; d6028 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d5ed6:	f8df 9154 	ldr.w	r9, [pc, #340]	; d602c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
        sprintf(payload, "%s000", payload);
   d5eda:	f8df a154 	ldr.w	sl, [pc, #340]	; d6030 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d5ede:	4605      	mov	r5, r0
  sprintf(payload, "{");
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	f004 fcb8 	bl	da856 <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   d5ee6:	2600      	movs	r6, #0
   d5ee8:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d5eec:	429e      	cmp	r6, r3
   d5eee:	da6a      	bge.n	d5fc6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfe>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5ef0:	68eb      	ldr	r3, [r5, #12]
   d5ef2:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d5ef6:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d5efa:	ed93 0a02 	vldr	s0, [r3, #8]
   d5efe:	a903      	add	r1, sp, #12
   d5f00:	4628      	mov	r0, r5
   d5f02:	f7ff ffbf 	bl	d5e84 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d5f06:	68eb      	ldr	r3, [r5, #12]
   d5f08:	a903      	add	r1, sp, #12
   d5f0a:	9100      	str	r1, [sp, #0]
   d5f0c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d5f10:	4622      	mov	r2, r4
   d5f12:	4641      	mov	r1, r8
   d5f14:	4620      	mov	r0, r4
   d5f16:	f001 f925 	bl	d7164 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5f1a:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5f1c:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5f20:	443b      	add	r3, r7
   d5f22:	68db      	ldr	r3, [r3, #12]
   d5f24:	b343      	cbz	r3, d5f78 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d5f26:	4622      	mov	r2, r4
   d5f28:	4649      	mov	r1, r9
   d5f2a:	4620      	mov	r0, r4
   d5f2c:	f001 f91a 	bl	d7164 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d5f30:	68eb      	ldr	r3, [r5, #12]
   d5f32:	443b      	add	r3, r7
   d5f34:	691b      	ldr	r3, [r3, #16]
   d5f36:	2b00      	cmp	r3, #0
   d5f38:	d038      	beq.n	d5fac <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d5f3a:	200a      	movs	r0, #10
   d5f3c:	fb93 f1f0 	sdiv	r1, r3, r0
   d5f40:	fb91 fcf0 	sdiv	ip, r1, r0
   d5f44:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d5f48:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5f4c:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d5f4e:	2264      	movs	r2, #100	; 0x64
   d5f50:	fb93 f2f2 	sdiv	r2, r3, r2
   d5f54:	fb92 fef0 	sdiv	lr, r2, r0
   d5f58:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5f5c:	9100      	str	r1, [sp, #0]
   d5f5e:	fa5f f38c 	uxtb.w	r3, ip
   d5f62:	4929      	ldr	r1, [pc, #164]	; (d6008 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d5f64:	b2d2      	uxtb	r2, r2
   d5f66:	a802      	add	r0, sp, #8
   d5f68:	f001 f8fc 	bl	d7164 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d5f6c:	4927      	ldr	r1, [pc, #156]	; (d600c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d5f6e:	ab02      	add	r3, sp, #8
   d5f70:	4622      	mov	r2, r4
   d5f72:	4620      	mov	r0, r4
   d5f74:	f001 f8f6 	bl	d7164 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d5f78:	68eb      	ldr	r3, [r5, #12]
   d5f7a:	441f      	add	r7, r3
   d5f7c:	687b      	ldr	r3, [r7, #4]
   d5f7e:	b123      	cbz	r3, d5f8a <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   d5f80:	4923      	ldr	r1, [pc, #140]	; (d6010 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d5f82:	4622      	mov	r2, r4
   d5f84:	4620      	mov	r0, r4
   d5f86:	f001 f8ed 	bl	d7164 <sprintf>
    sprintf(payload, "%s}", payload);
   d5f8a:	4622      	mov	r2, r4
   d5f8c:	4921      	ldr	r1, [pc, #132]	; (d6014 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d5f8e:	4620      	mov	r0, r4
   d5f90:	f001 f8e8 	bl	d7164 <sprintf>
    i++;
   d5f94:	3601      	adds	r6, #1
    if (i < _current_value) {
   d5f96:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d5f9a:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d5f9c:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d5f9e:	4622      	mov	r2, r4
    if (i < _current_value) {
   d5fa0:	da0a      	bge.n	d5fb8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf0>
      sprintf(payload, "%s,", payload);
   d5fa2:	491d      	ldr	r1, [pc, #116]	; (d6018 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d5fa4:	4620      	mov	r0, r4
   d5fa6:	f001 f8dd 	bl	d7164 <sprintf>
   d5faa:	e79d      	b.n	d5ee8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   d5fac:	4622      	mov	r2, r4
   d5fae:	4651      	mov	r1, sl
   d5fb0:	4620      	mov	r0, r4
   d5fb2:	f001 f8d7 	bl	d7164 <sprintf>
   d5fb6:	e7df      	b.n	d5f78 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s}", payload);
   d5fb8:	4916      	ldr	r1, [pc, #88]	; (d6014 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d5fba:	4620      	mov	r0, r4
   d5fbc:	f001 f8d2 	bl	d7164 <sprintf>
      _current_value = 0;
   d5fc0:	2300      	movs	r3, #0
   d5fc2:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d5fc4:	e790      	b.n	d5ee8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   d5fc6:	7cab      	ldrb	r3, [r5, #18]
   d5fc8:	b1c3      	cbz	r3, d5ffc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>
    Serial.println("----------");
   d5fca:	f003 f995 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5fce:	4913      	ldr	r1, [pc, #76]	; (d601c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d5fd0:	f002 f8a1 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d5fd4:	f003 f990 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5fd8:	4911      	ldr	r1, [pc, #68]	; (d6020 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d5fda:	f002 f89c 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d5fde:	f003 f98b 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5fe2:	4621      	mov	r1, r4
   d5fe4:	f002 f897 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d5fe8:	f003 f986 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5fec:	490b      	ldr	r1, [pc, #44]	; (d601c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d5fee:	f002 f892 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d5ff2:	f003 f981 	bl	d92f8 <_Z16_fetch_usbserialv>
   d5ff6:	490b      	ldr	r1, [pc, #44]	; (d6024 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d5ff8:	f002 f88d 	bl	d8116 <_ZN5Print7printlnEPKc>
}
   d5ffc:	b009      	add	sp, #36	; 0x24
   d5ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6002:	bf00      	nop
   d6004:	000dcca0 	.word	0x000dcca0
   d6008:	000dccc8 	.word	0x000dccc8
   d600c:	000dcccf 	.word	0x000dcccf
   d6010:	000dccda 	.word	0x000dccda
   d6014:	000dcce9 	.word	0x000dcce9
   d6018:	000dcced 	.word	0x000dcced
   d601c:	000dca7c 	.word	0x000dca7c
   d6020:	000dccf1 	.word	0x000dccf1
   d6024:	000dcc04 	.word	0x000dcc04
   d6028:	000dcca2 	.word	0x000dcca2
   d602c:	000dccb5 	.word	0x000dccb5
   d6030:	000dccd4 	.word	0x000dccd4

000d6034 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d6034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6038:	460c      	mov	r4, r1
   d603a:	4605      	mov	r5, r0
   d603c:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d603e:	4952      	ldr	r1, [pc, #328]	; (d6188 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d6040:	f8df 8174 	ldr.w	r8, [pc, #372]	; d61b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6044:	f8df 9174 	ldr.w	r9, [pc, #372]	; d61bc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  sprintf(payload, "");
   d6048:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d604a:	4616      	mov	r6, r2
   d604c:	461f      	mov	r7, r3
  sprintf(payload, "");
   d604e:	f004 fc02 	bl	da856 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d6052:	68ab      	ldr	r3, [r5, #8]
   d6054:	4a4d      	ldr	r2, [pc, #308]	; (d618c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d6056:	494e      	ldr	r1, [pc, #312]	; (d6190 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d6058:	4620      	mov	r0, r4
   d605a:	f001 f883 	bl	d7164 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d605e:	4633      	mov	r3, r6
   d6060:	494c      	ldr	r1, [pc, #304]	; (d6194 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d6062:	9700      	str	r7, [sp, #0]
   d6064:	4622      	mov	r2, r4
   d6066:	4620      	mov	r0, r4
   d6068:	f001 f87c 	bl	d7164 <sprintf>
  sprintf(payload, "%s=>", payload);
   d606c:	494a      	ldr	r1, [pc, #296]	; (d6198 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d606e:	4f49      	ldr	r7, [pc, #292]	; (d6194 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
  sprintf(payload, "%s=>", payload);
   d6070:	4622      	mov	r2, r4
   d6072:	4620      	mov	r0, r4
   d6074:	f001 f876 	bl	d7164 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d6078:	2600      	movs	r6, #0
   d607a:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d607e:	429e      	cmp	r6, r3
   d6080:	da64      	bge.n	d614c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d6082:	68eb      	ldr	r3, [r5, #12]
   d6084:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d6088:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d608c:	ed93 0a02 	vldr	s0, [r3, #8]
   d6090:	a903      	add	r1, sp, #12
   d6092:	4628      	mov	r0, r5
   d6094:	f7ff fef6 	bl	d5e84 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d6098:	68eb      	ldr	r3, [r5, #12]
   d609a:	a903      	add	r1, sp, #12
   d609c:	9100      	str	r1, [sp, #0]
   d609e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d60a2:	4622      	mov	r2, r4
   d60a4:	4639      	mov	r1, r7
   d60a6:	4620      	mov	r0, r4
   d60a8:	f001 f85c 	bl	d7164 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d60ac:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d60ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   d60b2:	4453      	add	r3, sl
   d60b4:	685b      	ldr	r3, [r3, #4]
   d60b6:	b123      	cbz	r3, d60c2 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d60b8:	4622      	mov	r2, r4
   d60ba:	4641      	mov	r1, r8
   d60bc:	4620      	mov	r0, r4
   d60be:	f001 f851 	bl	d7164 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d60c2:	68eb      	ldr	r3, [r5, #12]
   d60c4:	4453      	add	r3, sl
   d60c6:	68db      	ldr	r3, [r3, #12]
   d60c8:	b33b      	cbz	r3, d611a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d60ca:	4622      	mov	r2, r4
   d60cc:	4649      	mov	r1, r9
   d60ce:	4620      	mov	r0, r4
   d60d0:	f001 f848 	bl	d7164 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d60d4:	68eb      	ldr	r3, [r5, #12]
   d60d6:	4453      	add	r3, sl
   d60d8:	691b      	ldr	r3, [r3, #16]
   d60da:	b353      	cbz	r3, d6132 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d60dc:	200a      	movs	r0, #10
   d60de:	fb93 f1f0 	sdiv	r1, r3, r0
   d60e2:	fb91 fcf0 	sdiv	ip, r1, r0
   d60e6:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d60ea:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d60ee:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d60f0:	2264      	movs	r2, #100	; 0x64
   d60f2:	fb93 f2f2 	sdiv	r2, r3, r2
   d60f6:	fb92 fef0 	sdiv	lr, r2, r0
   d60fa:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d60fe:	9100      	str	r1, [sp, #0]
   d6100:	fa5f f38c 	uxtb.w	r3, ip
   d6104:	4925      	ldr	r1, [pc, #148]	; (d619c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d6106:	b2d2      	uxtb	r2, r2
   d6108:	a802      	add	r0, sp, #8
   d610a:	f001 f82b 	bl	d7164 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d610e:	4924      	ldr	r1, [pc, #144]	; (d61a0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d6110:	ab02      	add	r3, sp, #8
   d6112:	4622      	mov	r2, r4
   d6114:	4620      	mov	r0, r4
   d6116:	f001 f825 	bl	d7164 <sprintf>
    if (i < _current_value) {
   d611a:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d611e:	3601      	adds	r6, #1
   d6120:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d6122:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d6124:	4622      	mov	r2, r4
    if (i < _current_value) {
   d6126:	da0a      	bge.n	d613e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
   d6128:	491e      	ldr	r1, [pc, #120]	; (d61a4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d612a:	4620      	mov	r0, r4
   d612c:	f001 f81a 	bl	d7164 <sprintf>
   d6130:	e7a3      	b.n	d607a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   d6132:	491d      	ldr	r1, [pc, #116]	; (d61a8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d6134:	4622      	mov	r2, r4
   d6136:	4620      	mov	r0, r4
   d6138:	f001 f814 	bl	d7164 <sprintf>
   d613c:	e7ed      	b.n	d611a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
   d613e:	491b      	ldr	r1, [pc, #108]	; (d61ac <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d6140:	4620      	mov	r0, r4
   d6142:	f001 f80f 	bl	d7164 <sprintf>
      _current_value = 0;
   d6146:	2300      	movs	r3, #0
   d6148:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d614a:	e796      	b.n	d607a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   d614c:	7cab      	ldrb	r3, [r5, #18]
   d614e:	b1c3      	cbz	r3, d6182 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
   d6150:	f003 f8d2 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6154:	4916      	ldr	r1, [pc, #88]	; (d61b0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d6156:	f001 ffde 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d615a:	f003 f8cd 	bl	d92f8 <_Z16_fetch_usbserialv>
   d615e:	4915      	ldr	r1, [pc, #84]	; (d61b4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d6160:	f001 ffd9 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d6164:	f003 f8c8 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6168:	4621      	mov	r1, r4
   d616a:	f001 ffd4 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d616e:	f003 f8c3 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6172:	490f      	ldr	r1, [pc, #60]	; (d61b0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d6174:	f001 ffcf 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d6178:	f003 f8be 	bl	d92f8 <_Z16_fetch_usbserialv>
   d617c:	4902      	ldr	r1, [pc, #8]	; (d6188 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d617e:	f001 ffca 	bl	d8116 <_ZN5Print7printlnEPKc>
}
   d6182:	b009      	add	sp, #36	; 0x24
   d6184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6188:	000dcc04 	.word	0x000dcc04
   d618c:	000dca19 	.word	0x000dca19
   d6190:	000dccfa 	.word	0x000dccfa
   d6194:	000dcd06 	.word	0x000dcd06
   d6198:	000dcd0e 	.word	0x000dcd0e
   d619c:	000dccc8 	.word	0x000dccc8
   d61a0:	000dcccf 	.word	0x000dcccf
   d61a4:	000dcced 	.word	0x000dcced
   d61a8:	000dccd4 	.word	0x000dccd4
   d61ac:	000dcd20 	.word	0x000dcd20
   d61b0:	000dca7c 	.word	0x000dca7c
   d61b4:	000dccf1 	.word	0x000dccf1
   d61b8:	000dcd13 	.word	0x000dcd13
   d61bc:	000dcd19 	.word	0x000dcd19

000d61c0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d61c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d61c4:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d61c6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d61ca:	461e      	mov	r6, r3
   d61cc:	460f      	mov	r7, r1
   d61ce:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d61d0:	f000 ffb0 	bl	d7134 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d61d4:	7ce3      	ldrb	r3, [r4, #19]
   d61d6:	3b01      	subs	r3, #1
   d61d8:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d61da:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d61dc:	d826      	bhi.n	d622c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   d61de:	4601      	mov	r1, r0
   d61e0:	4643      	mov	r3, r8
   d61e2:	463a      	mov	r2, r7
   d61e4:	4620      	mov	r0, r4
   d61e6:	f7ff ff25 	bl	d6034 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   d61ea:	7ca3      	ldrb	r3, [r4, #18]
   d61ec:	b123      	cbz	r3, d61f8 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   d61ee:	f003 f883 	bl	d92f8 <_Z16_fetch_usbserialv>
   d61f2:	4911      	ldr	r1, [pc, #68]	; (d6238 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   d61f4:	f001 ff8f 	bl	d8116 <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d61f8:	6860      	ldr	r0, [r4, #4]
   d61fa:	6803      	ldr	r3, [r0, #0]
   d61fc:	9600      	str	r6, [sp, #0]
   d61fe:	f8d3 9000 	ldr.w	r9, [r3]
   d6202:	4639      	mov	r1, r7
   d6204:	462b      	mov	r3, r5
   d6206:	4642      	mov	r2, r8
   d6208:	47c8      	blx	r9
   d620a:	4607      	mov	r7, r0
  free(payload);
   d620c:	4628      	mov	r0, r5
   d620e:	f000 ff99 	bl	d7144 <free>
  delete flags;
   d6212:	b11e      	cbz	r6, d621c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   d6214:	2101      	movs	r1, #1
   d6216:	4630      	mov	r0, r6
   d6218:	f003 fa13 	bl	d9642 <_ZdlPvj>
  if (result) {
   d621c:	2300      	movs	r3, #0
   d621e:	b107      	cbz	r7, d6222 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   d6220:	7463      	strb	r3, [r4, #17]
}
   d6222:	4638      	mov	r0, r7
  _current_value = 0;
   d6224:	7423      	strb	r3, [r4, #16]
}
   d6226:	b003      	add	sp, #12
   d6228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   d622c:	4601      	mov	r1, r0
   d622e:	4620      	mov	r0, r4
   d6230:	f7ff fe4a 	bl	d5ec8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   d6234:	e7d9      	b.n	d61ea <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   d6236:	bf00      	nop
   d6238:	000dcd27 	.word	0x000dcd27

000d623c <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d623c:	b570      	push	{r4, r5, r6, lr}
   d623e:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d6240:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d6242:	460d      	mov	r5, r1
   d6244:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d6246:	f7fd ff26 	bl	d4096 <_Znwj>
  flags->particle_flag = flag;
   d624a:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   d624c:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   d624e:	462a      	mov	r2, r5
   d6250:	4629      	mov	r1, r5
   d6252:	4620      	mov	r0, r4
}
   d6254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   d6258:	f7ff bfb2 	b.w	d61c0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d625c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d625c:	b570      	push	{r4, r5, r6, lr}
   d625e:	4605      	mov	r5, r0
   d6260:	460c      	mov	r4, r1
      while (__x != 0)
   d6262:	b184      	cbz	r4, d6286 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	  _M_erase(_S_right(__x));
   d6264:	68e1      	ldr	r1, [r4, #12]
   d6266:	4628      	mov	r0, r5
   d6268:	f7ff fff8 	bl	d625c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      if (_M_manager)
   d626c:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
   d626e:	68a6      	ldr	r6, [r4, #8]
   d6270:	b123      	cbz	r3, d627c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
    class function<_Res(_ArgTypes...)>
   d6272:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6276:	2203      	movs	r2, #3
   d6278:	4608      	mov	r0, r1
   d627a:	4798      	blx	r3
   d627c:	4620      	mov	r0, r4
   d627e:	f7fd ff0e 	bl	d409e <_ZdlPv>
	  __x = __y;
   d6282:	4634      	mov	r4, r6
      }
   d6284:	e7ed      	b.n	d6262 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
    }
   d6286:	bd70      	pop	{r4, r5, r6, pc}

000d6288 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   d6288:	b5f0      	push	{r4, r5, r6, r7, lr}
   d628a:	b08d      	sub	sp, #52	; 0x34
   d628c:	4604      	mov	r4, r0
   d628e:	a801      	add	r0, sp, #4
   d6290:	460d      	mov	r5, r1
   d6292:	4617      	mov	r7, r2
   d6294:	461e      	mov	r6, r3
   d6296:	f000 fecd 	bl	d7034 <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
   d629a:	9803      	ldr	r0, [sp, #12]
   d629c:	3001      	adds	r0, #1
   d629e:	f7fd fefc 	bl	d409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d62a2:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   d62a4:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d62a6:	f004 fad6 	bl	da856 <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
   d62aa:	462a      	mov	r2, r5
   d62ac:	4633      	mov	r3, r6
   d62ae:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
   d62b0:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d62b2:	a805      	add	r0, sp, #20
   d62b4:	f7ff f980 	bl	d55b8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d62b8:	20c8      	movs	r0, #200	; 0xc8
   d62ba:	f000 ff3b 	bl	d7134 <malloc>
   d62be:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d62c0:	a805      	add	r0, sp, #20
   d62c2:	f7ff f89d 	bl	d5400 <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
   d62c6:	2300      	movs	r3, #0
  _token = token;
   d62c8:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
   d62cc:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
   d62ce:	7423      	strb	r3, [r4, #16]
   d62d0:	a806      	add	r0, sp, #24
   d62d2:	f7ff ffc3 	bl	d625c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
   d62d6:	a801      	add	r0, sp, #4
   d62d8:	f002 f896 	bl	d8408 <_ZN6StringD1Ev>
}
   d62dc:	b00d      	add	sp, #52	; 0x34
   d62de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d62e0 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   d62e0:	b538      	push	{r3, r4, r5, lr}
   d62e2:	2500      	movs	r5, #0
   d62e4:	4604      	mov	r4, r0
   d62e6:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   d62e8:	f7ff ffce 	bl	d6288 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d62ec:	4620      	mov	r0, r4
   d62ee:	bd38      	pop	{r3, r4, r5, pc}

000d62f0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d62f0:	b570      	push	{r4, r5, r6, lr}
   d62f2:	4605      	mov	r5, r0
   d62f4:	460c      	mov	r4, r1
      while (__x != 0)
   d62f6:	b14c      	cbz	r4, d630c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x1c>
	  _M_erase(_S_right(__x));
   d62f8:	68e1      	ldr	r1, [r4, #12]
   d62fa:	4628      	mov	r0, r5
   d62fc:	f7ff fff8 	bl	d62f0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
   d6300:	68a6      	ldr	r6, [r4, #8]
   d6302:	4620      	mov	r0, r4
   d6304:	f7fd fecb 	bl	d409e <_ZdlPv>
	  __x = __y;
   d6308:	4634      	mov	r4, r6
      while (__x != 0)
   d630a:	e7f4      	b.n	d62f6 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x6>
    }
   d630c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6310 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   d6310:	b510      	push	{r4, lr}
        val_(val) {
   d6312:	4b10      	ldr	r3, [pc, #64]	; (d6354 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x44>)
   d6314:	4c10      	ldr	r4, [pc, #64]	; (d6358 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x48>)
   d6316:	2200      	movs	r2, #0
   d6318:	701a      	strb	r2, [r3, #0]
   d631a:	4620      	mov	r0, r4
   d631c:	f002 fba2 	bl	d8a64 <_ZN9TCPClientC1Ev>
   d6320:	4620      	mov	r0, r4
   d6322:	4c0e      	ldr	r4, [pc, #56]	; (d635c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x4c>)
   d6324:	4a0e      	ldr	r2, [pc, #56]	; (d6360 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6326:	490f      	ldr	r1, [pc, #60]	; (d6364 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d6328:	f003 f986 	bl	d9638 <__aeabi_atexit>
   d632c:	4620      	mov	r0, r4
   d632e:	f002 fb99 	bl	d8a64 <_ZN9TCPClientC1Ev>
   d6332:	4620      	mov	r0, r4
   d6334:	4c0c      	ldr	r4, [pc, #48]	; (d6368 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x58>)
   d6336:	4a0a      	ldr	r2, [pc, #40]	; (d6360 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6338:	490a      	ldr	r1, [pc, #40]	; (d6364 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d633a:	f003 f97d 	bl	d9638 <__aeabi_atexit>
   d633e:	4620      	mov	r0, r4
   d6340:	f002 fdac 	bl	d8e9c <_ZN3UDPC1Ev>
   d6344:	4620      	mov	r0, r4
   d6346:	4a06      	ldr	r2, [pc, #24]	; (d6360 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6348:	4908      	ldr	r1, [pc, #32]	; (d636c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x5c>)
   d634a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d634e:	f003 b973 	b.w	d9638 <__aeabi_atexit>
   d6352:	bf00      	nop
   d6354:	2003e5b0 	.word	0x2003e5b0
   d6358:	2003e594 	.word	0x2003e594
   d635c:	2003e52c 	.word	0x2003e52c
   d6360:	2003e440 	.word	0x2003e440
   d6364:	000d5349 	.word	0x000d5349
   d6368:	2003e548 	.word	0x2003e548
   d636c:	000d5329 	.word	0x000d5329

000d6370 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d6370:	7501      	strb	r1, [r0, #20]
   d6372:	4770      	bx	lr

000d6374 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6374:	b530      	push	{r4, r5, lr}
   d6376:	4d06      	ldr	r5, [pc, #24]	; (d6390 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d6378:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d637a:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d637e:	2500      	movs	r5, #0
  _token = token;
   d6380:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6382:	7505      	strb	r5, [r0, #20]
   d6384:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d6388:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d638c:	6185      	str	r5, [r0, #24]
}
   d638e:	bd30      	pop	{r4, r5, pc}
   d6390:	000dcdd4 	.word	0x000dcdd4

000d6394 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   d6394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6398:	460d      	mov	r5, r1
   d639a:	4617      	mov	r7, r2
   d639c:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   d639e:	f002 ffab 	bl	d92f8 <_Z16_fetch_usbserialv>
   d63a2:	491e      	ldr	r1, [pc, #120]	; (d641c <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d63a4:	4e1e      	ldr	r6, [pc, #120]	; (d6420 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   d63a6:	f8df a07c 	ldr.w	sl, [pc, #124]	; d6424 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   d63aa:	f8df b07c 	ldr.w	fp, [pc, #124]	; d6428 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   d63ae:	f001 feb2 	bl	d8116 <_ZN5Print7printlnEPKc>
   d63b2:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d63b4:	4630      	mov	r0, r6
   d63b6:	f002 fb1c 	bl	d89f2 <_ZN9TCPClient6statusEv>
   d63ba:	bb60      	cbnz	r0, d6416 <_ZN6UbiTCP9reconnectEPKci+0x82>
   d63bc:	2c05      	cmp	r4, #5
   d63be:	d02a      	beq.n	d6416 <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   d63c0:	f898 3014 	ldrb.w	r3, [r8, #20]
   d63c4:	b1c3      	cbz	r3, d63f8 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   d63c6:	f002 ff97 	bl	d92f8 <_Z16_fetch_usbserialv>
   d63ca:	4651      	mov	r1, sl
   d63cc:	f001 fe90 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(host);
   d63d0:	f002 ff92 	bl	d92f8 <_Z16_fetch_usbserialv>
   d63d4:	4629      	mov	r1, r5
   d63d6:	f001 fe8b 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d63da:	f002 ff8d 	bl	d92f8 <_Z16_fetch_usbserialv>
   d63de:	4659      	mov	r1, fp
   d63e0:	f001 fe86 	bl	d80f0 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d63e4:	f002 ff88 	bl	d92f8 <_Z16_fetch_usbserialv>
   d63e8:	220a      	movs	r2, #10
   d63ea:	4681      	mov	r9, r0
   d63ec:	4621      	mov	r1, r4
   d63ee:	f001 fe9c 	bl	d812a <_ZN5Print11printNumberEmh>
        n += println();
   d63f2:	4648      	mov	r0, r9
   d63f4:	f001 fe83 	bl	d80fe <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   d63f8:	4630      	mov	r0, r6
   d63fa:	f002 fae3 	bl	d89c4 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d63fe:	2300      	movs	r3, #0
   d6400:	b2ba      	uxth	r2, r7
   d6402:	4629      	mov	r1, r5
   d6404:	4630      	mov	r0, r6
   d6406:	f002 fb51 	bl	d8aac <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   d640a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d640e:	f000 fed1 	bl	d71b4 <delay>
   d6412:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6414:	e7ce      	b.n	d63b4 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   d6416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d641a:	bf00      	nop
   d641c:	000dcd37 	.word	0x000dcd37
   d6420:	2003e5b4 	.word	0x2003e5b4
   d6424:	000dca2d 	.word	0x000dca2d
   d6428:	000dca43 	.word	0x000dca43

000d642c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d642c:	b570      	push	{r4, r5, r6, lr}
   d642e:	4604      	mov	r4, r0
   d6430:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   d6432:	6881      	ldr	r1, [r0, #8]
   d6434:	482e      	ldr	r0, [pc, #184]	; (d64f0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d6436:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   d6438:	f001 fe5a 	bl	d80f0 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   d643c:	492d      	ldr	r1, [pc, #180]	; (d64f4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d643e:	482c      	ldr	r0, [pc, #176]	; (d64f0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6440:	f001 fe56 	bl	d80f0 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   d6444:	68e1      	ldr	r1, [r4, #12]
   d6446:	482a      	ldr	r0, [pc, #168]	; (d64f0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6448:	f001 fe52 	bl	d80f0 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   d644c:	492a      	ldr	r1, [pc, #168]	; (d64f8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d644e:	4828      	ldr	r0, [pc, #160]	; (d64f0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6450:	f001 fe4e 	bl	d80f0 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   d6454:	4631      	mov	r1, r6
   d6456:	4826      	ldr	r0, [pc, #152]	; (d64f0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6458:	f001 fe4a 	bl	d80f0 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   d645c:	4927      	ldr	r1, [pc, #156]	; (d64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d645e:	4824      	ldr	r0, [pc, #144]	; (d64f0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6460:	f001 fe46 	bl	d80f0 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   d6464:	4629      	mov	r1, r5
   d6466:	4822      	ldr	r0, [pc, #136]	; (d64f0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6468:	f001 fe42 	bl	d80f0 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   d646c:	4924      	ldr	r1, [pc, #144]	; (d6500 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d646e:	4820      	ldr	r0, [pc, #128]	; (d64f0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6470:	f001 fe3e 	bl	d80f0 <_ZN5Print5printEPKc>
  if (_debug) {
   d6474:	7d23      	ldrb	r3, [r4, #20]
   d6476:	2b00      	cmp	r3, #0
   d6478:	d038      	beq.n	d64ec <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   d647a:	f002 ff3d 	bl	d92f8 <_Z16_fetch_usbserialv>
   d647e:	4921      	ldr	r1, [pc, #132]	; (d6504 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   d6480:	f001 fe49 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   d6484:	f002 ff38 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6488:	491f      	ldr	r1, [pc, #124]	; (d6508 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   d648a:	f001 fe44 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   d648e:	f002 ff33 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6492:	68a1      	ldr	r1, [r4, #8]
   d6494:	f001 fe2c 	bl	d80f0 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   d6498:	f002 ff2e 	bl	d92f8 <_Z16_fetch_usbserialv>
   d649c:	4915      	ldr	r1, [pc, #84]	; (d64f4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d649e:	f001 fe27 	bl	d80f0 <_ZN5Print5printEPKc>
    Serial.print(_token);
   d64a2:	f002 ff29 	bl	d92f8 <_Z16_fetch_usbserialv>
   d64a6:	68e1      	ldr	r1, [r4, #12]
   d64a8:	f001 fe22 	bl	d80f0 <_ZN5Print5printEPKc>
    Serial.print("|");
   d64ac:	f002 ff24 	bl	d92f8 <_Z16_fetch_usbserialv>
   d64b0:	4911      	ldr	r1, [pc, #68]	; (d64f8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d64b2:	f001 fe1d 	bl	d80f0 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   d64b6:	f002 ff1f 	bl	d92f8 <_Z16_fetch_usbserialv>
   d64ba:	4631      	mov	r1, r6
   d64bc:	f001 fe18 	bl	d80f0 <_ZN5Print5printEPKc>
    Serial.print(":");
   d64c0:	f002 ff1a 	bl	d92f8 <_Z16_fetch_usbserialv>
   d64c4:	490d      	ldr	r1, [pc, #52]	; (d64fc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d64c6:	f001 fe13 	bl	d80f0 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   d64ca:	f002 ff15 	bl	d92f8 <_Z16_fetch_usbserialv>
   d64ce:	4629      	mov	r1, r5
   d64d0:	f001 fe0e 	bl	d80f0 <_ZN5Print5printEPKc>
    Serial.print("|end");
   d64d4:	f002 ff10 	bl	d92f8 <_Z16_fetch_usbserialv>
   d64d8:	4909      	ldr	r1, [pc, #36]	; (d6500 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d64da:	f001 fe09 	bl	d80f0 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   d64de:	f002 ff0b 	bl	d92f8 <_Z16_fetch_usbserialv>
}
   d64e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   d64e6:	4909      	ldr	r1, [pc, #36]	; (d650c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   d64e8:	f001 be15 	b.w	d8116 <_ZN5Print7printlnEPKc>
}
   d64ec:	bd70      	pop	{r4, r5, r6, pc}
   d64ee:	bf00      	nop
   d64f0:	2003e5b4 	.word	0x2003e5b4
   d64f4:	000dcd4f 	.word	0x000dcd4f
   d64f8:	000dcd52 	.word	0x000dcd52
   d64fc:	000dccf8 	.word	0x000dccf8
   d6500:	000dcd22 	.word	0x000dcd22
   d6504:	000dcd6a 	.word	0x000dcd6a
   d6508:	000dcd54 	.word	0x000dcd54
   d650c:	000dcd69 	.word	0x000dcd69

000d6510 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   d6510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6512:	4f0e      	ldr	r7, [pc, #56]	; (d654c <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   d6514:	4604      	mov	r4, r0
  int timeout = 0;
   d6516:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6518:	4638      	mov	r0, r7
   d651a:	f002 f9f9 	bl	d8910 <_ZN9TCPClient9availableEv>
   d651e:	4605      	mov	r5, r0
   d6520:	b990      	cbnz	r0, d6548 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   d6522:	69a3      	ldr	r3, [r4, #24]
   d6524:	42b3      	cmp	r3, r6
   d6526:	dd0f      	ble.n	d6548 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   d6528:	2001      	movs	r0, #1
   d652a:	f000 fe43 	bl	d71b4 <delay>
    if (timeout > _timeout - 1) {
   d652e:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6530:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d6532:	42b3      	cmp	r3, r6
   d6534:	dcf0      	bgt.n	d6518 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
   d6536:	7d20      	ldrb	r0, [r4, #20]
   d6538:	b128      	cbz	r0, d6546 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d653a:	f002 fedd 	bl	d92f8 <_Z16_fetch_usbserialv>
   d653e:	4904      	ldr	r1, [pc, #16]	; (d6550 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d6540:	f001 fde9 	bl	d8116 <_ZN5Print7printlnEPKc>
   d6544:	4628      	mov	r0, r5
}
   d6546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6548:	2001      	movs	r0, #1
   d654a:	e7fc      	b.n	d6546 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   d654c:	2003e5b4 	.word	0x2003e5b4
   d6550:	000dca87 	.word	0x000dca87

000d6554 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   d6558:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d655a:	4606      	mov	r6, r0
   d655c:	4688      	mov	r8, r1
   d655e:	4614      	mov	r4, r2
  if (_debug) {
   d6560:	b14b      	cbz	r3, d6576 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d6562:	f002 fec9 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6566:	4927      	ldr	r1, [pc, #156]	; (d6604 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d6568:	f001 fdd5 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d656c:	f002 fec4 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6570:	4925      	ldr	r1, [pc, #148]	; (d6608 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d6572:	f001 fdd0 	bl	d8116 <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d6576:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d661c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d657a:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d657c:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d6580:	4648      	mov	r0, r9
   d6582:	f002 f9c5 	bl	d8910 <_ZN9TCPClient9availableEv>
   d6586:	b178      	cbz	r0, d65a8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   d6588:	4648      	mov	r0, r9
   d658a:	f002 f8fa 	bl	d8782 <_ZN9TCPClient4readEv>
    if (_debug) {
   d658e:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   d6590:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d6592:	b12b      	cbz	r3, d65a0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   d6594:	f002 feb0 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6598:	6803      	ldr	r3, [r0, #0]
   d659a:	4639      	mov	r1, r7
   d659c:	689b      	ldr	r3, [r3, #8]
   d659e:	4798      	blx	r3
    response[j] = c;
   d65a0:	5567      	strb	r7, [r4, r5]
    j++;
   d65a2:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d65a4:	4555      	cmp	r5, sl
   d65a6:	d1eb      	bne.n	d6580 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   d65a8:	7d33      	ldrb	r3, [r6, #20]
   d65aa:	b123      	cbz	r3, d65b6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   d65ac:	f002 fea4 	bl	d92f8 <_Z16_fetch_usbserialv>
   d65b0:	4916      	ldr	r1, [pc, #88]	; (d660c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d65b2:	f001 fdb0 	bl	d8116 <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d65b6:	2300      	movs	r3, #0
   d65b8:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   d65ba:	4915      	ldr	r1, [pc, #84]	; (d6610 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d65bc:	4640      	mov	r0, r8
   d65be:	f004 f940 	bl	da842 <strcmp>
   d65c2:	b968      	cbnz	r0, d65e0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   d65c4:	4913      	ldr	r1, [pc, #76]	; (d6614 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d65c6:	4620      	mov	r0, r4
   d65c8:	f004 f998 	bl	da8fc <strstr>
      result = 1;
   d65cc:	ed9f 0a12 	vldr	s0, [pc, #72]	; d6618 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d65d0:	2800      	cmp	r0, #0
   d65d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d65d6:	bf18      	it	ne
   d65d8:	eeb0 0a67 	vmovne.f32	s0, s15
}
   d65dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   d65e0:	217c      	movs	r1, #124	; 0x7c
   d65e2:	4620      	mov	r0, r4
   d65e4:	f004 f920 	bl	da828 <strchr>
  if (pch != NULL) {
   d65e8:	b148      	cbz	r0, d65fe <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   d65ea:	3001      	adds	r0, #1
   d65ec:	f004 f89e 	bl	da72c <atof>
   d65f0:	ec51 0b10 	vmov	r0, r1, d0
   d65f4:	f003 feb0 	bl	da358 <__aeabi_d2f>
   d65f8:	ee00 0a10 	vmov	s0, r0
   d65fc:	e7ee      	b.n	d65dc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   d65fe:	ed9f 0a06 	vldr	s0, [pc, #24]	; d6618 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6602:	e7eb      	b.n	d65dc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   d6604:	000dca7c 	.word	0x000dca7c
   d6608:	000dca68 	.word	0x000dca68
   d660c:	000dca7b 	.word	0x000dca7b
   d6610:	000dcd6f 	.word	0x000dcd6f
   d6614:	000dcd74 	.word	0x000dcd74
   d6618:	cda2425f 	.word	0xcda2425f
   d661c:	2003e5b4 	.word	0x2003e5b4

000d6620 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6620:	b570      	push	{r4, r5, r6, lr}
   d6622:	ed2d 8b02 	vpush	{d8}
   d6626:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6628:	6841      	ldr	r1, [r0, #4]
   d662a:	4822      	ldr	r0, [pc, #136]	; (d66b4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d662c:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6630:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6632:	2300      	movs	r3, #0
   d6634:	f002 fa3a 	bl	d8aac <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6638:	4620      	mov	r0, r4
   d663a:	6861      	ldr	r1, [r4, #4]
   d663c:	f242 3234 	movw	r2, #9012	; 0x2334
   d6640:	f7ff fea8 	bl	d6394 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6644:	481b      	ldr	r0, [pc, #108]	; (d66b4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6646:	f002 f800 	bl	d864a <_ZN9TCPClient9connectedEv>
   d664a:	b348      	cbz	r0, d66a0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    _client_tcp_ubi.print(payload);
   d664c:	4629      	mov	r1, r5
   d664e:	4819      	ldr	r0, [pc, #100]	; (d66b4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6650:	f001 fd4e 	bl	d80f0 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   d6654:	4620      	mov	r0, r4
   d6656:	f7ff ff5b 	bl	d6510 <_ZN6UbiTCP16waitServerAnswerEv>
   d665a:	4605      	mov	r5, r0
   d665c:	b938      	cbnz	r0, d666e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.stop();
   d665e:	4815      	ldr	r0, [pc, #84]	; (d66b4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6660:	f002 f9b0 	bl	d89c4 <_ZN9TCPClient4stopEv>
    return false;
   d6664:	2500      	movs	r5, #0
}
   d6666:	ecbd 8b02 	vpop	{d8}
   d666a:	4628      	mov	r0, r5
   d666c:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
   d666e:	2064      	movs	r0, #100	; 0x64
   d6670:	f000 fd60 	bl	d7134 <malloc>
  float value = parseTCPAnswer("POST", response);
   d6674:	4910      	ldr	r1, [pc, #64]	; (d66b8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d6676:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   d6678:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   d667a:	4620      	mov	r0, r4
   d667c:	f7ff ff6a 	bl	d6554 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d6680:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   d6682:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d6686:	f000 fd5d 	bl	d7144 <free>
  if (value != ERROR_VALUE) {
   d668a:	eddf 7a0c 	vldr	s15, [pc, #48]	; d66bc <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d668e:	eeb4 8a67 	vcmp.f32	s16, s15
   d6692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6696:	d0e2      	beq.n	d665e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d6698:	4806      	ldr	r0, [pc, #24]	; (d66b4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d669a:	f002 f993 	bl	d89c4 <_ZN9TCPClient4stopEv>
    return true;
   d669e:	e7e2      	b.n	d6666 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    if (_debug) {
   d66a0:	7d23      	ldrb	r3, [r4, #20]
   d66a2:	2b00      	cmp	r3, #0
   d66a4:	d0db      	beq.n	d665e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d66a6:	f002 fe27 	bl	d92f8 <_Z16_fetch_usbserialv>
   d66aa:	4905      	ldr	r1, [pc, #20]	; (d66c0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d66ac:	f001 fd33 	bl	d8116 <_ZN5Print7printlnEPKc>
   d66b0:	e7d5      	b.n	d665e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
   d66b2:	bf00      	nop
   d66b4:	2003e5b4 	.word	0x2003e5b4
   d66b8:	000dcd6f 	.word	0x000dcd6f
   d66bc:	cda2425f 	.word	0xcda2425f
   d66c0:	000dcd77 	.word	0x000dcd77

000d66c4 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d66c4:	b570      	push	{r4, r5, r6, lr}
   d66c6:	ed2d 8b02 	vpush	{d8}
   d66ca:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d66cc:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d66ce:	460d      	mov	r5, r1
   d66d0:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d66d2:	6841      	ldr	r1, [r0, #4]
   d66d4:	481e      	ldr	r0, [pc, #120]	; (d6750 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d66d6:	f242 3234 	movw	r2, #9012	; 0x2334
   d66da:	f002 f9e7 	bl	d8aac <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d66de:	4620      	mov	r0, r4
   d66e0:	6861      	ldr	r1, [r4, #4]
   d66e2:	f242 3234 	movw	r2, #9012	; 0x2334
   d66e6:	f7ff fe55 	bl	d6394 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d66ea:	4819      	ldr	r0, [pc, #100]	; (d6750 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d66ec:	f001 ffad 	bl	d864a <_ZN9TCPClient9connectedEv>
   d66f0:	b328      	cbz	r0, d673e <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   d66f2:	4620      	mov	r0, r4
   d66f4:	4632      	mov	r2, r6
   d66f6:	4629      	mov	r1, r5
   d66f8:	f7ff fe98 	bl	d642c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d66fc:	4620      	mov	r0, r4
   d66fe:	f7ff ff07 	bl	d6510 <_ZN6UbiTCP16waitServerAnswerEv>
   d6702:	b948      	cbnz	r0, d6718 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   d6704:	4812      	ldr	r0, [pc, #72]	; (d6750 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   d6706:	ed9f 8a13 	vldr	s16, [pc, #76]	; d6754 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   d670a:	f002 f95b 	bl	d89c4 <_ZN9TCPClient4stopEv>
}
   d670e:	eeb0 0a48 	vmov.f32	s0, s16
   d6712:	ecbd 8b02 	vpop	{d8}
   d6716:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6718:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d671c:	f000 fd0a 	bl	d7134 <malloc>
    float value = parseTCPAnswer("LV", response);
   d6720:	490d      	ldr	r1, [pc, #52]	; (d6758 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   d6722:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6724:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d6726:	4620      	mov	r0, r4
   d6728:	f7ff ff14 	bl	d6554 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d672c:	4808      	ldr	r0, [pc, #32]	; (d6750 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   d672e:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d6732:	f002 f947 	bl	d89c4 <_ZN9TCPClient4stopEv>
    free(response);
   d6736:	4628      	mov	r0, r5
   d6738:	f000 fd04 	bl	d7144 <free>
    return value;
   d673c:	e7e7      	b.n	d670e <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   d673e:	7d23      	ldrb	r3, [r4, #20]
   d6740:	2b00      	cmp	r3, #0
   d6742:	d0df      	beq.n	d6704 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   d6744:	f002 fdd8 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6748:	4904      	ldr	r1, [pc, #16]	; (d675c <_ZN6UbiTCP3getEPKcS1_+0x98>)
   d674a:	f001 fce4 	bl	d8116 <_ZN5Print7printlnEPKc>
   d674e:	e7d9      	b.n	d6704 <_ZN6UbiTCP3getEPKcS1_+0x40>
   d6750:	2003e5b4 	.word	0x2003e5b4
   d6754:	cda2425f 	.word	0xcda2425f
   d6758:	000dcd95 	.word	0x000dcd95
   d675c:	000dcd98 	.word	0x000dcd98

000d6760 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6764:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6766:	2018      	movs	r0, #24
   d6768:	4615      	mov	r5, r2
   d676a:	460f      	mov	r7, r1
   d676c:	f7fd fc93 	bl	d4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   d6770:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   d6774:	686b      	ldr	r3, [r5, #4]
   d6776:	f8d5 9000 	ldr.w	r9, [r5]
      _Link_type __x = _M_begin();
   d677a:	68ba      	ldr	r2, [r7, #8]
   d677c:	6143      	str	r3, [r0, #20]
   d677e:	4606      	mov	r6, r0
   d6780:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   d6784:	4655      	mov	r5, sl
      bool __comp = true;
   d6786:	2301      	movs	r3, #1
      while (__x != 0)
   d6788:	b152      	cbz	r2, d67a0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d678a:	6913      	ldr	r3, [r2, #16]
   d678c:	454b      	cmp	r3, r9
   d678e:	bfcc      	ite	gt
   d6790:	6891      	ldrgt	r1, [r2, #8]
   d6792:	68d1      	ldrle	r1, [r2, #12]
   d6794:	4615      	mov	r5, r2
   d6796:	bfcc      	ite	gt
   d6798:	2301      	movgt	r3, #1
   d679a:	2300      	movle	r3, #0
   d679c:	460a      	mov	r2, r1
   d679e:	e7f3      	b.n	d6788 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   d67a0:	b1a3      	cbz	r3, d67cc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6c>
	  if (__j == begin())
   d67a2:	68fb      	ldr	r3, [r7, #12]
   d67a4:	42ab      	cmp	r3, r5
   d67a6:	d023      	beq.n	d67f0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	_M_node = _Rb_tree_decrement(_M_node);
   d67a8:	4628      	mov	r0, r5
   d67aa:	f002 ffa4 	bl	d96f6 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d67ae:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d67b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   d67b4:	454b      	cmp	r3, r9
   d67b6:	db1b      	blt.n	d67f0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	::operator delete(__p);
   d67b8:	4630      	mov	r0, r6
   d67ba:	f7fd fc70 	bl	d409e <_ZdlPv>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d67be:	f8c4 8000 	str.w	r8, [r4]
   d67c2:	2300      	movs	r3, #0
   d67c4:	7123      	strb	r3, [r4, #4]
      }
   d67c6:	4620      	mov	r0, r4
   d67c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67cc:	46a8      	mov	r8, r5
   d67ce:	e7ef      	b.n	d67b0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   d67d0:	6928      	ldr	r0, [r5, #16]
   d67d2:	4581      	cmp	r9, r0
   d67d4:	bfac      	ite	ge
   d67d6:	2000      	movge	r0, #0
   d67d8:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d67da:	4653      	mov	r3, sl
   d67dc:	462a      	mov	r2, r5
   d67de:	4631      	mov	r1, r6
   d67e0:	f002 ff8b 	bl	d96fa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d67e4:	697b      	ldr	r3, [r7, #20]
   d67e6:	6026      	str	r6, [r4, #0]
   d67e8:	3301      	adds	r3, #1
   d67ea:	617b      	str	r3, [r7, #20]
   d67ec:	2301      	movs	r3, #1
   d67ee:	e7e9      	b.n	d67c4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x64>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d67f0:	45aa      	cmp	sl, r5
   d67f2:	d1ed      	bne.n	d67d0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x70>
			    || _M_impl._M_key_compare(_S_key(__z),
   d67f4:	2001      	movs	r0, #1
   d67f6:	e7f0      	b.n	d67da <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7a>

000d67f8 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   d67f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d67fc:	460d      	mov	r5, r1
   d67fe:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6800:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d6804:	f000 fc96 	bl	d7134 <malloc>
  if (_debug) {
   d6808:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d680a:	4607      	mov	r7, r0
  if (_debug) {
   d680c:	b14b      	cbz	r3, d6822 <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   d680e:	f002 fd73 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6812:	493a      	ldr	r1, [pc, #232]	; (d68fc <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   d6814:	f001 fc7f 	bl	d8116 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6818:	f002 fd6e 	bl	d92f8 <_Z16_fetch_usbserialv>
   d681c:	4938      	ldr	r1, [pc, #224]	; (d6900 <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   d681e:	f001 fc7a 	bl	d8116 <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d6822:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d6914 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   d6826:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6828:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d682c:	4648      	mov	r0, r9
   d682e:	f002 f86f 	bl	d8910 <_ZN9TCPClient9availableEv>
   d6832:	b188      	cbz	r0, d6858 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   d6834:	4648      	mov	r0, r9
   d6836:	f001 ffa4 	bl	d8782 <_ZN9TCPClient4readEv>
    if (_debug) {
   d683a:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   d683c:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   d6840:	b12b      	cbz	r3, d684e <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   d6842:	f002 fd59 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6846:	6803      	ldr	r3, [r0, #0]
   d6848:	4641      	mov	r1, r8
   d684a:	689b      	ldr	r3, [r3, #8]
   d684c:	4798      	blx	r3
    response[j] = c;
   d684e:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   d6852:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6854:	4556      	cmp	r6, sl
   d6856:	d1e9      	bne.n	d682c <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   d6858:	7d2b      	ldrb	r3, [r5, #20]
   d685a:	b123      	cbz	r3, d6866 <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   d685c:	f002 fd4c 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6860:	4928      	ldr	r1, [pc, #160]	; (d6904 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   d6862:	f001 fc58 	bl	d8116 <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d6866:	2500      	movs	r5, #0
	  : _Node_allocator()
   d6868:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   d686a:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   d686e:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   d6872:	4925      	ldr	r1, [pc, #148]	; (d6908 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   d6874:	7125      	strb	r5, [r4, #4]
   d6876:	4638      	mov	r0, r7
  response[j] = '\0';
   d6878:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   d687a:	f004 fe8b 	bl	db594 <strtok>
    if (strcmp(token, "OK") == 0) {
   d687e:	f8df 9098 	ldr.w	r9, [pc, #152]	; d6918 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   d6882:	f8df a098 	ldr.w	sl, [pc, #152]	; d691c <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   d6886:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6908 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   d688a:	4606      	mov	r6, r0
  while (token != NULL) {
   d688c:	b37e      	cbz	r6, d68ee <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   d688e:	4649      	mov	r1, r9
   d6890:	4630      	mov	r0, r6
   d6892:	f003 ffd6 	bl	da842 <strcmp>
   d6896:	bb00      	cbnz	r0, d68da <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   d6898:	4641      	mov	r1, r8
   d689a:	f004 fe7b 	bl	db594 <strtok>
      if (strcmp(token, "null") == 0) {
   d689e:	491b      	ldr	r1, [pc, #108]	; (d690c <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   d68a0:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   d68a2:	f003 ffce 	bl	da842 <strcmp>
   d68a6:	b918      	cbnz	r0, d68b0 <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d68a8:	4b19      	ldr	r3, [pc, #100]	; (d6910 <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   d68aa:	9500      	str	r5, [sp, #0]
   d68ac:	9301      	str	r3, [sp, #4]
   d68ae:	e008      	b.n	d68c2 <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   d68b0:	4630      	mov	r0, r6
   d68b2:	f003 ff3b 	bl	da72c <atof>
   d68b6:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d68ba:	9500      	str	r5, [sp, #0]
   d68bc:	f003 fd4c 	bl	da358 <__aeabi_d2f>
   d68c0:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   d68c2:	466a      	mov	r2, sp
   d68c4:	4621      	mov	r1, r4
   d68c6:	a802      	add	r0, sp, #8
   d68c8:	f7ff ff4a 	bl	d6760 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   d68cc:	4641      	mov	r1, r8
   d68ce:	2000      	movs	r0, #0
   d68d0:	f004 fe60 	bl	db594 <strtok>
    mapKey++;
   d68d4:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   d68d6:	4606      	mov	r6, r0
  while (token != NULL) {
   d68d8:	e7d8      	b.n	d688c <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   d68da:	4651      	mov	r1, sl
   d68dc:	4630      	mov	r0, r6
   d68de:	f003 ffb0 	bl	da842 <strcmp>
   d68e2:	2800      	cmp	r0, #0
   d68e4:	d1f2      	bne.n	d68cc <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   d68e6:	4641      	mov	r1, r8
   d68e8:	f004 fe54 	bl	db594 <strtok>
   d68ec:	e7dc      	b.n	d68a8 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   d68ee:	4638      	mov	r0, r7
   d68f0:	f000 fc28 	bl	d7144 <free>
}
   d68f4:	4620      	mov	r0, r4
   d68f6:	b004      	add	sp, #16
   d68f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68fc:	000dca7c 	.word	0x000dca7c
   d6900:	000dca68 	.word	0x000dca68
   d6904:	000dca7b 	.word	0x000dca7b
   d6908:	000dcd52 	.word	0x000dcd52
   d690c:	000dcdbe 	.word	0x000dcdbe
   d6910:	cda2425f 	.word	0xcda2425f
   d6914:	2003e5b4 	.word	0x2003e5b4
   d6918:	000dcd74 	.word	0x000dcd74
   d691c:	000dcdc3 	.word	0x000dcdc3

000d6920 <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d6920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   d6924:	1d07      	adds	r7, r0, #4
   d6926:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   d6928:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d692a:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   d692e:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   d6932:	7103      	strb	r3, [r0, #4]
   d6934:	460d      	mov	r5, r1
   d6936:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6938:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d693a:	4604      	mov	r4, r0
   d693c:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d693e:	482e      	ldr	r0, [pc, #184]	; (d69f8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d6940:	f242 3234 	movw	r2, #9012	; 0x2334
   d6944:	f002 f8b2 	bl	d8aac <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6948:	4628      	mov	r0, r5
   d694a:	6869      	ldr	r1, [r5, #4]
   d694c:	f242 3234 	movw	r2, #9012	; 0x2334
   d6950:	f7ff fd20 	bl	d6394 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6954:	4828      	ldr	r0, [pc, #160]	; (d69f8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d6956:	f001 fe78 	bl	d864a <_ZN9TCPClient9connectedEv>
   d695a:	b310      	cbz	r0, d69a2 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   d695c:	4631      	mov	r1, r6
   d695e:	4642      	mov	r2, r8
   d6960:	4628      	mov	r0, r5
   d6962:	f7ff fd63 	bl	d642c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d6966:	4628      	mov	r0, r5
   d6968:	f7ff fdd2 	bl	d6510 <_ZN6UbiTCP16waitServerAnswerEv>
   d696c:	4606      	mov	r6, r0
   d696e:	b9c0      	cbnz	r0, d69a2 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   d6970:	4821      	ldr	r0, [pc, #132]	; (d69f8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   d6972:	4f22      	ldr	r7, [pc, #136]	; (d69fc <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   d6974:	f002 f826 	bl	d89c4 <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   d6978:	4921      	ldr	r1, [pc, #132]	; (d6a00 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
   d697a:	4640      	mov	r0, r8
   d697c:	f004 fe0a 	bl	db594 <strtok>
      int mapKey = 0;
   d6980:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   d6982:	4e1f      	ldr	r6, [pc, #124]	; (d6a00 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
      while (token != NULL) {
   d6984:	2800      	cmp	r0, #0
   d6986:	d032      	beq.n	d69ee <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xce>
   d6988:	4621      	mov	r1, r4
   d698a:	a802      	add	r0, sp, #8
   d698c:	466a      	mov	r2, sp
   d698e:	9500      	str	r5, [sp, #0]
   d6990:	9701      	str	r7, [sp, #4]
   d6992:	f7ff fee5 	bl	d6760 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   d6996:	4631      	mov	r1, r6
   d6998:	2000      	movs	r0, #0
        mapKey++;
   d699a:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   d699c:	f004 fdfa 	bl	db594 <strtok>
      while (token != NULL) {
   d69a0:	e7f0      	b.n	d6984 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   d69a2:	4629      	mov	r1, r5
   d69a4:	a802      	add	r0, sp, #8
   d69a6:	f7ff ff27 	bl	d67f8 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   d69aa:	68a1      	ldr	r1, [r4, #8]
   d69ac:	4620      	mov	r0, r4
   d69ae:	f7ff fc9f 	bl	d62f0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
      if (__x._M_root() != nullptr)
   d69b2:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   d69b4:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d69b6:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   d69ba:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   d69be:	b17a      	cbz	r2, d69e0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xc0>
      _M_header._M_color = __from._M_header._M_color;
   d69c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d69c4:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   d69c6:	9905      	ldr	r1, [sp, #20]
   d69c8:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   d69ca:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   d69cc:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   d69ce:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   d69d0:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   d69d2:	9a07      	ldr	r2, [sp, #28]
   d69d4:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   d69d6:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   d69d8:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   d69dc:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   d69de:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   d69e0:	a802      	add	r0, sp, #8
   d69e2:	9904      	ldr	r1, [sp, #16]
   d69e4:	f7ff fc84 	bl	d62f0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
  _client_tcp_ubi.stop();
   d69e8:	4803      	ldr	r0, [pc, #12]	; (d69f8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d69ea:	f001 ffeb 	bl	d89c4 <_ZN9TCPClient4stopEv>
}
   d69ee:	4620      	mov	r0, r4
   d69f0:	b008      	add	sp, #32
   d69f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d69f6:	bf00      	nop
   d69f8:	2003e5b4 	.word	0x2003e5b4
   d69fc:	cda2425f 	.word	0xcda2425f
   d6a00:	000dccef 	.word	0x000dccef

000d6a04 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d6a04:	b510      	push	{r4, lr}
   d6a06:	4c05      	ldr	r4, [pc, #20]	; (d6a1c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x18>)
   d6a08:	4620      	mov	r0, r4
   d6a0a:	f002 f82b 	bl	d8a64 <_ZN9TCPClientC1Ev>
   d6a0e:	4620      	mov	r0, r4
   d6a10:	4a03      	ldr	r2, [pc, #12]	; (d6a20 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d6a12:	4904      	ldr	r1, [pc, #16]	; (d6a24 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d6a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6a18:	f002 be0e 	b.w	d9638 <__aeabi_atexit>
   d6a1c:	2003e5b4 	.word	0x2003e5b4
   d6a20:	2003e440 	.word	0x2003e440
   d6a24:	000d5349 	.word	0x000d5349

000d6a28 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   d6a28:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6a30 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d6a2c:	4770      	bx	lr
   d6a2e:	bf00      	nop
   d6a30:	cda2425f 	.word	0xcda2425f

000d6a34 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d6a34:	7501      	strb	r1, [r0, #20]
   d6a36:	4770      	bx	lr

000d6a38 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   d6a38:	2200      	movs	r2, #0
	  : _Node_allocator()
   d6a3a:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d6a3c:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d6a40:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d6a44:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   d6a46:	4770      	bx	lr

000d6a48 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d6a48:	b530      	push	{r4, r5, lr}
   d6a4a:	4d06      	ldr	r5, [pc, #24]	; (d6a64 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d6a4c:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d6a4e:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d6a52:	2500      	movs	r5, #0
  _token = token;
   d6a54:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d6a56:	7505      	strb	r5, [r0, #20]
   d6a58:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d6a5c:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d6a60:	6185      	str	r5, [r0, #24]
}
   d6a62:	bd30      	pop	{r4, r5, pc}
   d6a64:	000dce98 	.word	0x000dce98

000d6a68 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
}
   d6a68:	b510      	push	{r4, lr}
   d6a6a:	4c05      	ldr	r4, [pc, #20]	; (d6a80 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x18>)
   d6a6c:	4620      	mov	r0, r4
   d6a6e:	f002 fa15 	bl	d8e9c <_ZN3UDPC1Ev>
   d6a72:	4620      	mov	r0, r4
   d6a74:	4a03      	ldr	r2, [pc, #12]	; (d6a84 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d6a76:	4904      	ldr	r1, [pc, #16]	; (d6a88 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d6a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6a7c:	f002 bddc 	b.w	d9638 <__aeabi_atexit>
   d6a80:	2003e5d0 	.word	0x2003e5d0
   d6a84:	2003e440 	.word	0x2003e440
   d6a88:	000d5329 	.word	0x000d5329

000d6a8c <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   d6a8c:	b510      	push	{r4, lr}
   d6a8e:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   d6a90:	684a      	ldr	r2, [r1, #4]
   d6a92:	4902      	ldr	r1, [pc, #8]	; (d6a9c <_ZN6UbiUDP11getServerIpEv+0x10>)
   d6a94:	f001 fa8a 	bl	d7fac <_ZN5spark12NetworkClass7resolveEPKc>
}
   d6a98:	4620      	mov	r0, r4
   d6a9a:	bd10      	pop	{r4, pc}
   d6a9c:	2003e620 	.word	0x2003e620

000d6aa0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6aa2:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   d6aa4:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6aa6:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   d6aa8:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6aaa:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   d6aac:	f7ff ffee 	bl	d6a8c <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6ab0:	a802      	add	r0, sp, #8
   d6ab2:	f000 ff9b 	bl	d79ec <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   d6ab6:	b9a0      	cbnz	r0, d6ae2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d6ab8:	7d33      	ldrb	r3, [r6, #20]
   d6aba:	b123      	cbz	r3, d6ac6 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d6abc:	f002 fc1c 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6ac0:	4927      	ldr	r1, [pc, #156]	; (d6b60 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d6ac2:	f001 fb28 	bl	d8116 <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   d6ac6:	23f3      	movs	r3, #243	; 0xf3
   d6ac8:	9300      	str	r3, [sp, #0]
   d6aca:	2237      	movs	r2, #55	; 0x37
   d6acc:	233d      	movs	r3, #61	; 0x3d
   d6ace:	21a9      	movs	r1, #169	; 0xa9
   d6ad0:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   d6ad2:	ad09      	add	r5, sp, #36	; 0x24
   d6ad4:	f000 ffae 	bl	d7a34 <_ZN9IPAddressC1Ehhhh>
   d6ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ada:	ac03      	add	r4, sp, #12
   d6adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ade:	682b      	ldr	r3, [r5, #0]
   d6ae0:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d6ae2:	2200      	movs	r2, #0
   d6ae4:	f240 21bd 	movw	r1, #701	; 0x2bd
   d6ae8:	481e      	ldr	r0, [pc, #120]	; (d6b64 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6aea:	f002 fa09 	bl	d8f00 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d6aee:	2200      	movs	r2, #0
   d6af0:	f242 3134 	movw	r1, #9012	; 0x2334
   d6af4:	481b      	ldr	r0, [pc, #108]	; (d6b64 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6af6:	f002 f8ab 	bl	d8c50 <_ZN3UDP5beginEtm>
   d6afa:	ad03      	add	r5, sp, #12
   d6afc:	4b1a      	ldr	r3, [pc, #104]	; (d6b68 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   d6afe:	9308      	str	r3, [sp, #32]
   d6b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b02:	ac09      	add	r4, sp, #36	; 0x24
   d6b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b06:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d6b08:	4816      	ldr	r0, [pc, #88]	; (d6b64 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b0a:	7023      	strb	r3, [r4, #0]
   d6b0c:	f242 3234 	movw	r2, #9012	; 0x2334
   d6b10:	a908      	add	r1, sp, #32
   d6b12:	f002 fa11 	bl	d8f38 <_ZN3UDP11beginPacketE9IPAddresst>
   d6b16:	b958      	cbnz	r0, d6b30 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   d6b18:	7d33      	ldrb	r3, [r6, #20]
   d6b1a:	b123      	cbz	r3, d6b26 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   d6b1c:	f002 fbec 	bl	d92f8 <_Z16_fetch_usbserialv>
   d6b20:	4912      	ldr	r1, [pc, #72]	; (d6b6c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   d6b22:	f001 faf8 	bl	d8116 <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   d6b26:	480f      	ldr	r0, [pc, #60]	; (d6b64 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b28:	f002 f8de 	bl	d8ce8 <_ZN3UDP4stopEv>
    return false;
   d6b2c:	2000      	movs	r0, #0
   d6b2e:	e014      	b.n	d6b5a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   d6b30:	2f00      	cmp	r7, #0
   d6b32:	d0f1      	beq.n	d6b18 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   d6b34:	4638      	mov	r0, r7
   d6b36:	f003 feb4 	bl	da8a2 <strlen>
   d6b3a:	4639      	mov	r1, r7
   d6b3c:	4602      	mov	r2, r0
   d6b3e:	4809      	ldr	r0, [pc, #36]	; (d6b64 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b40:	f002 f8e0 	bl	d8d04 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d6b44:	2800      	cmp	r0, #0
   d6b46:	d0e7      	beq.n	d6b18 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   d6b48:	4806      	ldr	r0, [pc, #24]	; (d6b64 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b4a:	f002 f93b 	bl	d8dc4 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d6b4e:	2800      	cmp	r0, #0
   d6b50:	d0e2      	beq.n	d6b18 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   d6b52:	4804      	ldr	r0, [pc, #16]	; (d6b64 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b54:	f002 f8c8 	bl	d8ce8 <_ZN3UDP4stopEv>
  return true;
   d6b58:	2001      	movs	r0, #1
}
   d6b5a:	b00f      	add	sp, #60	; 0x3c
   d6b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b5e:	bf00      	nop
   d6b60:	000dcde4 	.word	0x000dcde4
   d6b64:	2003e5d0 	.word	0x2003e5d0
   d6b68:	000dcf90 	.word	0x000dcf90
   d6b6c:	000dce70 	.word	0x000dce70

000d6b70 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d6b70:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d6b72:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d6b74:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d6b76:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d6b78:	e9cd 2100 	strd	r2, r1, [sp]
   d6b7c:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d6b7e:	f000 fad9 	bl	d7134 <malloc>
   d6b82:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d6b84:	2014      	movs	r0, #20
   d6b86:	f7fd fa86 	bl	d4096 <_Znwj>
   d6b8a:	4605      	mov	r5, r0
   d6b8c:	b120      	cbz	r0, d6b98 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d6b8e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6b92:	4633      	mov	r3, r6
   d6b94:	f7ff fba4 	bl	d62e0 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d6b98:	6025      	str	r5, [r4, #0]
}
   d6b9a:	b002      	add	sp, #8
   d6b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6ba0 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   d6ba0:	b538      	push	{r3, r4, r5, lr}
   d6ba2:	2500      	movs	r5, #0
   d6ba4:	4604      	mov	r4, r0
   d6ba6:	4613      	mov	r3, r2
   d6ba8:	7245      	strb	r5, [r0, #9]
   d6baa:	7285      	strb	r5, [r0, #10]
   d6bac:	4a02      	ldr	r2, [pc, #8]	; (d6bb8 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d6bae:	f7ff ffdf 	bl	d6b70 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   d6bb2:	4620      	mov	r0, r4
   d6bb4:	bd38      	pop	{r3, r4, r5, pc}
   d6bb6:	bf00      	nop
   d6bb8:	000dcea8 	.word	0x000dcea8

000d6bbc <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d6bbc:	b538      	push	{r3, r4, r5, lr}
   d6bbe:	4604      	mov	r4, r0
  free(_context);
   d6bc0:	6840      	ldr	r0, [r0, #4]
   d6bc2:	f000 fabf 	bl	d7144 <free>
  delete _cloudProtocol;
   d6bc6:	6825      	ldr	r5, [r4, #0]
   d6bc8:	b135      	cbz	r5, d6bd8 <_ZN7UbidotsD1Ev+0x1c>
   d6bca:	4628      	mov	r0, r5
   d6bcc:	f7ff f90a 	bl	d5de4 <_ZN18UbiProtocolHandlerD1Ev>
   d6bd0:	2114      	movs	r1, #20
   d6bd2:	4628      	mov	r0, r5
   d6bd4:	f002 fd35 	bl	d9642 <_ZdlPvj>
}
   d6bd8:	4620      	mov	r0, r4
   d6bda:	bd38      	pop	{r3, r4, r5, pc}

000d6bdc <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   d6bdc:	6800      	ldr	r0, [r0, #0]
   d6bde:	f7ff b911 	b.w	d5e04 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d6be2 <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   d6be2:	b507      	push	{r0, r1, r2, lr}
   d6be4:	2300      	movs	r3, #0
   d6be6:	9300      	str	r3, [sp, #0]
   d6be8:	461a      	mov	r2, r3
   d6bea:	f7ff fff7 	bl	d6bdc <_ZN7Ubidots3addEPcfS0_mj>
   d6bee:	b003      	add	sp, #12
   d6bf0:	f85d fb04 	ldr.w	pc, [sp], #4

000d6bf4 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   d6bf4:	6800      	ldr	r0, [r0, #0]
   d6bf6:	f7ff bb21 	b.w	d623c <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
	...

000d6bfc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6bfc:	b508      	push	{r3, lr}
   d6bfe:	4b02      	ldr	r3, [pc, #8]	; (d6c08 <os_mutex_recursive_create+0xc>)
   d6c00:	681b      	ldr	r3, [r3, #0]
   d6c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6c04:	9301      	str	r3, [sp, #4]
   d6c06:	bd08      	pop	{r3, pc}
   d6c08:	00030248 	.word	0x00030248

000d6c0c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6c0c:	b508      	push	{r3, lr}
   d6c0e:	4b02      	ldr	r3, [pc, #8]	; (d6c18 <os_mutex_recursive_destroy+0xc>)
   d6c10:	681b      	ldr	r3, [r3, #0]
   d6c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6c14:	9301      	str	r3, [sp, #4]
   d6c16:	bd08      	pop	{r3, pc}
   d6c18:	00030248 	.word	0x00030248

000d6c1c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6c1c:	b508      	push	{r3, lr}
   d6c1e:	4b02      	ldr	r3, [pc, #8]	; (d6c28 <HAL_RNG_GetRandomNumber+0xc>)
   d6c20:	681b      	ldr	r3, [r3, #0]
   d6c22:	685b      	ldr	r3, [r3, #4]
   d6c24:	9301      	str	r3, [sp, #4]
   d6c26:	bd08      	pop	{r3, pc}
   d6c28:	00030218 	.word	0x00030218

000d6c2c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6c2c:	b508      	push	{r3, lr}
   d6c2e:	4b02      	ldr	r3, [pc, #8]	; (d6c38 <HAL_Delay_Microseconds+0xc>)
   d6c30:	681b      	ldr	r3, [r3, #0]
   d6c32:	68db      	ldr	r3, [r3, #12]
   d6c34:	9301      	str	r3, [sp, #4]
   d6c36:	bd08      	pop	{r3, pc}
   d6c38:	00030218 	.word	0x00030218

000d6c3c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6c3c:	b508      	push	{r3, lr}
   d6c3e:	4b02      	ldr	r3, [pc, #8]	; (d6c48 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6c40:	681b      	ldr	r3, [r3, #0]
   d6c42:	695b      	ldr	r3, [r3, #20]
   d6c44:	9301      	str	r3, [sp, #4]
   d6c46:	bd08      	pop	{r3, pc}
   d6c48:	00030218 	.word	0x00030218

000d6c4c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6c4c:	b508      	push	{r3, lr}
   d6c4e:	4b02      	ldr	r3, [pc, #8]	; (d6c58 <HAL_Pin_Map+0xc>)
   d6c50:	681b      	ldr	r3, [r3, #0]
   d6c52:	681b      	ldr	r3, [r3, #0]
   d6c54:	9301      	str	r3, [sp, #4]
   d6c56:	bd08      	pop	{r3, pc}
   d6c58:	0003022c 	.word	0x0003022c

000d6c5c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6c5c:	b508      	push	{r3, lr}
   d6c5e:	4b02      	ldr	r3, [pc, #8]	; (d6c68 <HAL_Pin_Mode+0xc>)
   d6c60:	681b      	ldr	r3, [r3, #0]
   d6c62:	689b      	ldr	r3, [r3, #8]
   d6c64:	9301      	str	r3, [sp, #4]
   d6c66:	bd08      	pop	{r3, pc}
   d6c68:	0003022c 	.word	0x0003022c

000d6c6c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6c6c:	b508      	push	{r3, lr}
   d6c6e:	4b02      	ldr	r3, [pc, #8]	; (d6c78 <HAL_Get_Pin_Mode+0xc>)
   d6c70:	681b      	ldr	r3, [r3, #0]
   d6c72:	68db      	ldr	r3, [r3, #12]
   d6c74:	9301      	str	r3, [sp, #4]
   d6c76:	bd08      	pop	{r3, pc}
   d6c78:	0003022c 	.word	0x0003022c

000d6c7c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6c7c:	b508      	push	{r3, lr}
   d6c7e:	4b02      	ldr	r3, [pc, #8]	; (d6c88 <HAL_GPIO_Write+0xc>)
   d6c80:	681b      	ldr	r3, [r3, #0]
   d6c82:	691b      	ldr	r3, [r3, #16]
   d6c84:	9301      	str	r3, [sp, #4]
   d6c86:	bd08      	pop	{r3, pc}
   d6c88:	0003022c 	.word	0x0003022c

000d6c8c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d6c8c:	b508      	push	{r3, lr}
   d6c8e:	4b02      	ldr	r3, [pc, #8]	; (d6c98 <HAL_Interrupts_Enable_All+0xc>)
   d6c90:	681b      	ldr	r3, [r3, #0]
   d6c92:	6a1b      	ldr	r3, [r3, #32]
   d6c94:	9301      	str	r3, [sp, #4]
   d6c96:	bd08      	pop	{r3, pc}
   d6c98:	0003022c 	.word	0x0003022c

000d6c9c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d6c9c:	b508      	push	{r3, lr}
   d6c9e:	4b02      	ldr	r3, [pc, #8]	; (d6ca8 <HAL_Interrupts_Disable_All+0xc>)
   d6ca0:	681b      	ldr	r3, [r3, #0]
   d6ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ca4:	9301      	str	r3, [sp, #4]
   d6ca6:	bd08      	pop	{r3, pc}
   d6ca8:	0003022c 	.word	0x0003022c

000d6cac <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6cac:	b508      	push	{r3, lr}
   d6cae:	4b02      	ldr	r3, [pc, #8]	; (d6cb8 <hal_i2c_begin+0xc>)
   d6cb0:	681b      	ldr	r3, [r3, #0]
   d6cb2:	68db      	ldr	r3, [r3, #12]
   d6cb4:	9301      	str	r3, [sp, #4]
   d6cb6:	bd08      	pop	{r3, pc}
   d6cb8:	00030228 	.word	0x00030228

000d6cbc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6cbc:	b508      	push	{r3, lr}
   d6cbe:	4b02      	ldr	r3, [pc, #8]	; (d6cc8 <hal_i2c_begin_transmission+0xc>)
   d6cc0:	681b      	ldr	r3, [r3, #0]
   d6cc2:	699b      	ldr	r3, [r3, #24]
   d6cc4:	9301      	str	r3, [sp, #4]
   d6cc6:	bd08      	pop	{r3, pc}
   d6cc8:	00030228 	.word	0x00030228

000d6ccc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6ccc:	b508      	push	{r3, lr}
   d6cce:	4b02      	ldr	r3, [pc, #8]	; (d6cd8 <hal_i2c_end_transmission+0xc>)
   d6cd0:	681b      	ldr	r3, [r3, #0]
   d6cd2:	69db      	ldr	r3, [r3, #28]
   d6cd4:	9301      	str	r3, [sp, #4]
   d6cd6:	bd08      	pop	{r3, pc}
   d6cd8:	00030228 	.word	0x00030228

000d6cdc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6cdc:	b508      	push	{r3, lr}
   d6cde:	4b02      	ldr	r3, [pc, #8]	; (d6ce8 <hal_i2c_write+0xc>)
   d6ce0:	681b      	ldr	r3, [r3, #0]
   d6ce2:	6a1b      	ldr	r3, [r3, #32]
   d6ce4:	9301      	str	r3, [sp, #4]
   d6ce6:	bd08      	pop	{r3, pc}
   d6ce8:	00030228 	.word	0x00030228

000d6cec <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6cec:	b508      	push	{r3, lr}
   d6cee:	4b02      	ldr	r3, [pc, #8]	; (d6cf8 <hal_i2c_available+0xc>)
   d6cf0:	681b      	ldr	r3, [r3, #0]
   d6cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6cf4:	9301      	str	r3, [sp, #4]
   d6cf6:	bd08      	pop	{r3, pc}
   d6cf8:	00030228 	.word	0x00030228

000d6cfc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6cfc:	b508      	push	{r3, lr}
   d6cfe:	4b02      	ldr	r3, [pc, #8]	; (d6d08 <hal_i2c_read+0xc>)
   d6d00:	681b      	ldr	r3, [r3, #0]
   d6d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d04:	9301      	str	r3, [sp, #4]
   d6d06:	bd08      	pop	{r3, pc}
   d6d08:	00030228 	.word	0x00030228

000d6d0c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6d0c:	b508      	push	{r3, lr}
   d6d0e:	4b02      	ldr	r3, [pc, #8]	; (d6d18 <hal_i2c_peek+0xc>)
   d6d10:	681b      	ldr	r3, [r3, #0]
   d6d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d14:	9301      	str	r3, [sp, #4]
   d6d16:	bd08      	pop	{r3, pc}
   d6d18:	00030228 	.word	0x00030228

000d6d1c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6d1c:	b508      	push	{r3, lr}
   d6d1e:	4b02      	ldr	r3, [pc, #8]	; (d6d28 <hal_i2c_flush+0xc>)
   d6d20:	681b      	ldr	r3, [r3, #0]
   d6d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d24:	9301      	str	r3, [sp, #4]
   d6d26:	bd08      	pop	{r3, pc}
   d6d28:	00030228 	.word	0x00030228

000d6d2c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6d2c:	b508      	push	{r3, lr}
   d6d2e:	4b02      	ldr	r3, [pc, #8]	; (d6d38 <hal_i2c_is_enabled+0xc>)
   d6d30:	681b      	ldr	r3, [r3, #0]
   d6d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d34:	9301      	str	r3, [sp, #4]
   d6d36:	bd08      	pop	{r3, pc}
   d6d38:	00030228 	.word	0x00030228

000d6d3c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6d3c:	b508      	push	{r3, lr}
   d6d3e:	4b02      	ldr	r3, [pc, #8]	; (d6d48 <hal_i2c_init+0xc>)
   d6d40:	681b      	ldr	r3, [r3, #0]
   d6d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6d44:	9301      	str	r3, [sp, #4]
   d6d46:	bd08      	pop	{r3, pc}
   d6d48:	00030228 	.word	0x00030228

000d6d4c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6d4c:	b508      	push	{r3, lr}
   d6d4e:	4b02      	ldr	r3, [pc, #8]	; (d6d58 <if_index_to_name+0xc>)
   d6d50:	681b      	ldr	r3, [r3, #0]
   d6d52:	695b      	ldr	r3, [r3, #20]
   d6d54:	9301      	str	r3, [sp, #4]
   d6d56:	bd08      	pop	{r3, pc}
   d6d58:	0003026c 	.word	0x0003026c

000d6d5c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6d5c:	b508      	push	{r3, lr}
   d6d5e:	4b02      	ldr	r3, [pc, #8]	; (d6d68 <inet_inet_ntop+0xc>)
   d6d60:	681b      	ldr	r3, [r3, #0]
   d6d62:	695b      	ldr	r3, [r3, #20]
   d6d64:	9301      	str	r3, [sp, #4]
   d6d66:	bd08      	pop	{r3, pc}
   d6d68:	00030264 	.word	0x00030264

000d6d6c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6d6c:	b508      	push	{r3, lr}
   d6d6e:	4b02      	ldr	r3, [pc, #8]	; (d6d78 <inet_htonl+0xc>)
   d6d70:	681b      	ldr	r3, [r3, #0]
   d6d72:	6a1b      	ldr	r3, [r3, #32]
   d6d74:	9301      	str	r3, [sp, #4]
   d6d76:	bd08      	pop	{r3, pc}
   d6d78:	00030264 	.word	0x00030264

000d6d7c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d6d7c:	b508      	push	{r3, lr}
   d6d7e:	4b02      	ldr	r3, [pc, #8]	; (d6d88 <inet_ntohs+0xc>)
   d6d80:	681b      	ldr	r3, [r3, #0]
   d6d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d84:	9301      	str	r3, [sp, #4]
   d6d86:	bd08      	pop	{r3, pc}
   d6d88:	00030264 	.word	0x00030264

000d6d8c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6d8c:	b508      	push	{r3, lr}
   d6d8e:	4b02      	ldr	r3, [pc, #8]	; (d6d98 <inet_htons+0xc>)
   d6d90:	681b      	ldr	r3, [r3, #0]
   d6d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d94:	9301      	str	r3, [sp, #4]
   d6d96:	bd08      	pop	{r3, pc}
   d6d98:	00030264 	.word	0x00030264

000d6d9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6d9c:	b508      	push	{r3, lr}
   d6d9e:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <netdb_freeaddrinfo+0xc>)
   d6da0:	681b      	ldr	r3, [r3, #0]
   d6da2:	689b      	ldr	r3, [r3, #8]
   d6da4:	9301      	str	r3, [sp, #4]
   d6da6:	bd08      	pop	{r3, pc}
   d6da8:	00030268 	.word	0x00030268

000d6dac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6dac:	b508      	push	{r3, lr}
   d6dae:	4b02      	ldr	r3, [pc, #8]	; (d6db8 <netdb_getaddrinfo+0xc>)
   d6db0:	681b      	ldr	r3, [r3, #0]
   d6db2:	68db      	ldr	r3, [r3, #12]
   d6db4:	9301      	str	r3, [sp, #4]
   d6db6:	bd08      	pop	{r3, pc}
   d6db8:	00030268 	.word	0x00030268

000d6dbc <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d6dbc:	b508      	push	{r3, lr}
   d6dbe:	4b02      	ldr	r3, [pc, #8]	; (d6dc8 <sock_bind+0xc>)
   d6dc0:	681b      	ldr	r3, [r3, #0]
   d6dc2:	685b      	ldr	r3, [r3, #4]
   d6dc4:	9301      	str	r3, [sp, #4]
   d6dc6:	bd08      	pop	{r3, pc}
   d6dc8:	00030238 	.word	0x00030238

000d6dcc <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6dcc:	b508      	push	{r3, lr}
   d6dce:	4b02      	ldr	r3, [pc, #8]	; (d6dd8 <sock_setsockopt+0xc>)
   d6dd0:	681b      	ldr	r3, [r3, #0]
   d6dd2:	699b      	ldr	r3, [r3, #24]
   d6dd4:	9301      	str	r3, [sp, #4]
   d6dd6:	bd08      	pop	{r3, pc}
   d6dd8:	00030238 	.word	0x00030238

000d6ddc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6ddc:	b508      	push	{r3, lr}
   d6dde:	4b02      	ldr	r3, [pc, #8]	; (d6de8 <sock_close+0xc>)
   d6de0:	681b      	ldr	r3, [r3, #0]
   d6de2:	69db      	ldr	r3, [r3, #28]
   d6de4:	9301      	str	r3, [sp, #4]
   d6de6:	bd08      	pop	{r3, pc}
   d6de8:	00030238 	.word	0x00030238

000d6dec <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6dec:	b508      	push	{r3, lr}
   d6dee:	4b02      	ldr	r3, [pc, #8]	; (d6df8 <sock_connect+0xc>)
   d6df0:	681b      	ldr	r3, [r3, #0]
   d6df2:	6a1b      	ldr	r3, [r3, #32]
   d6df4:	9301      	str	r3, [sp, #4]
   d6df6:	bd08      	pop	{r3, pc}
   d6df8:	00030238 	.word	0x00030238

000d6dfc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6dfc:	b508      	push	{r3, lr}
   d6dfe:	4b02      	ldr	r3, [pc, #8]	; (d6e08 <sock_recv+0xc>)
   d6e00:	681b      	ldr	r3, [r3, #0]
   d6e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e04:	9301      	str	r3, [sp, #4]
   d6e06:	bd08      	pop	{r3, pc}
   d6e08:	00030238 	.word	0x00030238

000d6e0c <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d6e0c:	b508      	push	{r3, lr}
   d6e0e:	4b02      	ldr	r3, [pc, #8]	; (d6e18 <sock_recvfrom+0xc>)
   d6e10:	681b      	ldr	r3, [r3, #0]
   d6e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e14:	9301      	str	r3, [sp, #4]
   d6e16:	bd08      	pop	{r3, pc}
   d6e18:	00030238 	.word	0x00030238

000d6e1c <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6e1c:	b508      	push	{r3, lr}
   d6e1e:	4b02      	ldr	r3, [pc, #8]	; (d6e28 <sock_send+0xc>)
   d6e20:	681b      	ldr	r3, [r3, #0]
   d6e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e24:	9301      	str	r3, [sp, #4]
   d6e26:	bd08      	pop	{r3, pc}
   d6e28:	00030238 	.word	0x00030238

000d6e2c <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d6e2c:	b508      	push	{r3, lr}
   d6e2e:	4b02      	ldr	r3, [pc, #8]	; (d6e38 <sock_sendto+0xc>)
   d6e30:	681b      	ldr	r3, [r3, #0]
   d6e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e34:	9301      	str	r3, [sp, #4]
   d6e36:	bd08      	pop	{r3, pc}
   d6e38:	00030238 	.word	0x00030238

000d6e3c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6e3c:	b508      	push	{r3, lr}
   d6e3e:	4b02      	ldr	r3, [pc, #8]	; (d6e48 <sock_socket+0xc>)
   d6e40:	681b      	ldr	r3, [r3, #0]
   d6e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6e44:	9301      	str	r3, [sp, #4]
   d6e46:	bd08      	pop	{r3, pc}
   d6e48:	00030238 	.word	0x00030238

000d6e4c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6e4c:	b508      	push	{r3, lr}
   d6e4e:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <hal_spi_init+0xc>)
   d6e50:	681b      	ldr	r3, [r3, #0]
   d6e52:	69db      	ldr	r3, [r3, #28]
   d6e54:	9301      	str	r3, [sp, #4]
   d6e56:	bd08      	pop	{r3, pc}
   d6e58:	00030230 	.word	0x00030230

000d6e5c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6e5c:	b508      	push	{r3, lr}
   d6e5e:	4b02      	ldr	r3, [pc, #8]	; (d6e68 <hal_spi_is_enabled+0xc>)
   d6e60:	681b      	ldr	r3, [r3, #0]
   d6e62:	6a1b      	ldr	r3, [r3, #32]
   d6e64:	9301      	str	r3, [sp, #4]
   d6e66:	bd08      	pop	{r3, pc}
   d6e68:	00030230 	.word	0x00030230

000d6e6c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	4b02      	ldr	r3, [pc, #8]	; (d6e78 <hal_usart_init+0xc>)
   d6e70:	681b      	ldr	r3, [r3, #0]
   d6e72:	681b      	ldr	r3, [r3, #0]
   d6e74:	9301      	str	r3, [sp, #4]
   d6e76:	bd08      	pop	{r3, pc}
   d6e78:	0003023c 	.word	0x0003023c

000d6e7c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b02      	ldr	r3, [pc, #8]	; (d6e88 <hal_usart_write+0xc>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	68db      	ldr	r3, [r3, #12]
   d6e84:	9301      	str	r3, [sp, #4]
   d6e86:	bd08      	pop	{r3, pc}
   d6e88:	0003023c 	.word	0x0003023c

000d6e8c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6e8c:	b508      	push	{r3, lr}
   d6e8e:	4b02      	ldr	r3, [pc, #8]	; (d6e98 <hal_usart_available+0xc>)
   d6e90:	681b      	ldr	r3, [r3, #0]
   d6e92:	691b      	ldr	r3, [r3, #16]
   d6e94:	9301      	str	r3, [sp, #4]
   d6e96:	bd08      	pop	{r3, pc}
   d6e98:	0003023c 	.word	0x0003023c

000d6e9c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6e9c:	b508      	push	{r3, lr}
   d6e9e:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <hal_usart_read+0xc>)
   d6ea0:	681b      	ldr	r3, [r3, #0]
   d6ea2:	695b      	ldr	r3, [r3, #20]
   d6ea4:	9301      	str	r3, [sp, #4]
   d6ea6:	bd08      	pop	{r3, pc}
   d6ea8:	0003023c 	.word	0x0003023c

000d6eac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6eac:	b508      	push	{r3, lr}
   d6eae:	4b02      	ldr	r3, [pc, #8]	; (d6eb8 <hal_usart_peek+0xc>)
   d6eb0:	681b      	ldr	r3, [r3, #0]
   d6eb2:	699b      	ldr	r3, [r3, #24]
   d6eb4:	9301      	str	r3, [sp, #4]
   d6eb6:	bd08      	pop	{r3, pc}
   d6eb8:	0003023c 	.word	0x0003023c

000d6ebc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6ebc:	b508      	push	{r3, lr}
   d6ebe:	4b02      	ldr	r3, [pc, #8]	; (d6ec8 <hal_usart_flush+0xc>)
   d6ec0:	681b      	ldr	r3, [r3, #0]
   d6ec2:	69db      	ldr	r3, [r3, #28]
   d6ec4:	9301      	str	r3, [sp, #4]
   d6ec6:	bd08      	pop	{r3, pc}
   d6ec8:	0003023c 	.word	0x0003023c

000d6ecc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6ecc:	b508      	push	{r3, lr}
   d6ece:	4b02      	ldr	r3, [pc, #8]	; (d6ed8 <hal_usart_is_enabled+0xc>)
   d6ed0:	681b      	ldr	r3, [r3, #0]
   d6ed2:	6a1b      	ldr	r3, [r3, #32]
   d6ed4:	9301      	str	r3, [sp, #4]
   d6ed6:	bd08      	pop	{r3, pc}
   d6ed8:	0003023c 	.word	0x0003023c

000d6edc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6edc:	b508      	push	{r3, lr}
   d6ede:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <hal_usart_available_data_for_write+0xc>)
   d6ee0:	681b      	ldr	r3, [r3, #0]
   d6ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	bd08      	pop	{r3, pc}
   d6ee8:	0003023c 	.word	0x0003023c

000d6eec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b02      	ldr	r3, [pc, #8]	; (d6ef8 <HAL_USB_USART_Init+0xc>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	681b      	ldr	r3, [r3, #0]
   d6ef4:	9301      	str	r3, [sp, #4]
   d6ef6:	bd08      	pop	{r3, pc}
   d6ef8:	0003024c 	.word	0x0003024c

000d6efc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6efc:	b508      	push	{r3, lr}
   d6efe:	4b02      	ldr	r3, [pc, #8]	; (d6f08 <HAL_USB_USART_Begin+0xc>)
   d6f00:	681b      	ldr	r3, [r3, #0]
   d6f02:	685b      	ldr	r3, [r3, #4]
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	bd08      	pop	{r3, pc}
   d6f08:	0003024c 	.word	0x0003024c

000d6f0c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <HAL_USB_USART_Available_Data+0xc>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	691b      	ldr	r3, [r3, #16]
   d6f14:	9301      	str	r3, [sp, #4]
   d6f16:	bd08      	pop	{r3, pc}
   d6f18:	0003024c 	.word	0x0003024c

000d6f1c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	695b      	ldr	r3, [r3, #20]
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	0003024c 	.word	0x0003024c

000d6f2c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <HAL_USB_USART_Receive_Data+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	699b      	ldr	r3, [r3, #24]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	0003024c 	.word	0x0003024c

000d6f3c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <HAL_USB_USART_Send_Data+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	69db      	ldr	r3, [r3, #28]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	0003024c 	.word	0x0003024c

000d6f4c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <HAL_USB_USART_Flush_Data+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	6a1b      	ldr	r3, [r3, #32]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	0003024c 	.word	0x0003024c

000d6f5c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <panic_+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	00030260 	.word	0x00030260

000d6f6c <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <jsmn_init+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	00030260 	.word	0x00030260

000d6f7c <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <jsmn_parse+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	00030260 	.word	0x00030260

000d6f8c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <log_message+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	00030260 	.word	0x00030260

000d6f9c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <log_message_v+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	00030260 	.word	0x00030260

000d6fac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <set_system_mode+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	685b      	ldr	r3, [r3, #4]
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	00030220 	.word	0x00030220

000d6fbc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <system_delay_ms+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	695b      	ldr	r3, [r3, #20]
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	00030220 	.word	0x00030220

000d6fcc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <application_thread_current+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	00030220 	.word	0x00030220

000d6fdc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <application_thread_invoke+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	00030220 	.word	0x00030220

000d6fec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b03      	ldr	r3, [pc, #12]	; (d6ffc <system_ctrl_set_app_request_handler+0x10>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6ff6:	9301      	str	r3, [sp, #4]
   d6ff8:	bd08      	pop	{r3, pc}
   d6ffa:	0000      	.short	0x0000
   d6ffc:	00030220 	.word	0x00030220

000d7000 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7000:	b508      	push	{r3, lr}
   d7002:	4b03      	ldr	r3, [pc, #12]	; (d7010 <system_ctrl_set_result+0x10>)
   d7004:	681b      	ldr	r3, [r3, #0]
   d7006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d700a:	9301      	str	r3, [sp, #4]
   d700c:	bd08      	pop	{r3, pc}
   d700e:	0000      	.short	0x0000
   d7010:	00030220 	.word	0x00030220

000d7014 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7014:	b508      	push	{r3, lr}
   d7016:	4b02      	ldr	r3, [pc, #8]	; (d7020 <spark_process+0xc>)
   d7018:	681b      	ldr	r3, [r3, #0]
   d701a:	689b      	ldr	r3, [r3, #8]
   d701c:	9301      	str	r3, [sp, #4]
   d701e:	bd08      	pop	{r3, pc}
   d7020:	00030244 	.word	0x00030244

000d7024 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7024:	b508      	push	{r3, lr}
   d7026:	4b02      	ldr	r3, [pc, #8]	; (d7030 <spark_cloud_flag_connected+0xc>)
   d7028:	681b      	ldr	r3, [r3, #0]
   d702a:	695b      	ldr	r3, [r3, #20]
   d702c:	9301      	str	r3, [sp, #4]
   d702e:	bd08      	pop	{r3, pc}
   d7030:	00030244 	.word	0x00030244

000d7034 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7034:	b508      	push	{r3, lr}
   d7036:	4b02      	ldr	r3, [pc, #8]	; (d7040 <spark_deviceID+0xc>)
   d7038:	681b      	ldr	r3, [r3, #0]
   d703a:	69db      	ldr	r3, [r3, #28]
   d703c:	9301      	str	r3, [sp, #4]
   d703e:	bd08      	pop	{r3, pc}
   d7040:	00030244 	.word	0x00030244

000d7044 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7044:	b508      	push	{r3, lr}
   d7046:	4b02      	ldr	r3, [pc, #8]	; (d7050 <spark_send_event+0xc>)
   d7048:	681b      	ldr	r3, [r3, #0]
   d704a:	6a1b      	ldr	r3, [r3, #32]
   d704c:	9301      	str	r3, [sp, #4]
   d704e:	bd08      	pop	{r3, pc}
   d7050:	00030244 	.word	0x00030244

000d7054 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7054:	b508      	push	{r3, lr}
   d7056:	4b02      	ldr	r3, [pc, #8]	; (d7060 <spark_subscribe+0xc>)
   d7058:	681b      	ldr	r3, [r3, #0]
   d705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d705c:	9301      	str	r3, [sp, #4]
   d705e:	bd08      	pop	{r3, pc}
   d7060:	00030244 	.word	0x00030244

000d7064 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7064:	b508      	push	{r3, lr}
   d7066:	4b02      	ldr	r3, [pc, #8]	; (d7070 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7068:	681b      	ldr	r3, [r3, #0]
   d706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d706c:	9301      	str	r3, [sp, #4]
   d706e:	bd08      	pop	{r3, pc}
   d7070:	00030244 	.word	0x00030244

000d7074 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7074:	b508      	push	{r3, lr}
   d7076:	4b02      	ldr	r3, [pc, #8]	; (d7080 <network_connect+0xc>)
   d7078:	681b      	ldr	r3, [r3, #0]
   d707a:	685b      	ldr	r3, [r3, #4]
   d707c:	9301      	str	r3, [sp, #4]
   d707e:	bd08      	pop	{r3, pc}
   d7080:	00030240 	.word	0x00030240

000d7084 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7084:	b508      	push	{r3, lr}
   d7086:	4b02      	ldr	r3, [pc, #8]	; (d7090 <network_connecting+0xc>)
   d7088:	681b      	ldr	r3, [r3, #0]
   d708a:	689b      	ldr	r3, [r3, #8]
   d708c:	9301      	str	r3, [sp, #4]
   d708e:	bd08      	pop	{r3, pc}
   d7090:	00030240 	.word	0x00030240

000d7094 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7094:	b508      	push	{r3, lr}
   d7096:	4b02      	ldr	r3, [pc, #8]	; (d70a0 <network_disconnect+0xc>)
   d7098:	681b      	ldr	r3, [r3, #0]
   d709a:	68db      	ldr	r3, [r3, #12]
   d709c:	9301      	str	r3, [sp, #4]
   d709e:	bd08      	pop	{r3, pc}
   d70a0:	00030240 	.word	0x00030240

000d70a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d70a4:	b508      	push	{r3, lr}
   d70a6:	4b02      	ldr	r3, [pc, #8]	; (d70b0 <network_ready+0xc>)
   d70a8:	681b      	ldr	r3, [r3, #0]
   d70aa:	691b      	ldr	r3, [r3, #16]
   d70ac:	9301      	str	r3, [sp, #4]
   d70ae:	bd08      	pop	{r3, pc}
   d70b0:	00030240 	.word	0x00030240

000d70b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d70b4:	b508      	push	{r3, lr}
   d70b6:	4b02      	ldr	r3, [pc, #8]	; (d70c0 <network_on+0xc>)
   d70b8:	681b      	ldr	r3, [r3, #0]
   d70ba:	695b      	ldr	r3, [r3, #20]
   d70bc:	9301      	str	r3, [sp, #4]
   d70be:	bd08      	pop	{r3, pc}
   d70c0:	00030240 	.word	0x00030240

000d70c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d70c4:	b508      	push	{r3, lr}
   d70c6:	4b02      	ldr	r3, [pc, #8]	; (d70d0 <network_off+0xc>)
   d70c8:	681b      	ldr	r3, [r3, #0]
   d70ca:	699b      	ldr	r3, [r3, #24]
   d70cc:	9301      	str	r3, [sp, #4]
   d70ce:	bd08      	pop	{r3, pc}
   d70d0:	00030240 	.word	0x00030240

000d70d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d70d4:	b508      	push	{r3, lr}
   d70d6:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <network_listen+0xc>)
   d70d8:	681b      	ldr	r3, [r3, #0]
   d70da:	69db      	ldr	r3, [r3, #28]
   d70dc:	9301      	str	r3, [sp, #4]
   d70de:	bd08      	pop	{r3, pc}
   d70e0:	00030240 	.word	0x00030240

000d70e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d70e4:	b508      	push	{r3, lr}
   d70e6:	4b02      	ldr	r3, [pc, #8]	; (d70f0 <network_listening+0xc>)
   d70e8:	681b      	ldr	r3, [r3, #0]
   d70ea:	6a1b      	ldr	r3, [r3, #32]
   d70ec:	9301      	str	r3, [sp, #4]
   d70ee:	bd08      	pop	{r3, pc}
   d70f0:	00030240 	.word	0x00030240

000d70f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d70f4:	b508      	push	{r3, lr}
   d70f6:	4b02      	ldr	r3, [pc, #8]	; (d7100 <network_set_listen_timeout+0xc>)
   d70f8:	681b      	ldr	r3, [r3, #0]
   d70fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d70fc:	9301      	str	r3, [sp, #4]
   d70fe:	bd08      	pop	{r3, pc}
   d7100:	00030240 	.word	0x00030240

000d7104 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7104:	b508      	push	{r3, lr}
   d7106:	4b02      	ldr	r3, [pc, #8]	; (d7110 <network_get_listen_timeout+0xc>)
   d7108:	681b      	ldr	r3, [r3, #0]
   d710a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d710c:	9301      	str	r3, [sp, #4]
   d710e:	bd08      	pop	{r3, pc}
   d7110:	00030240 	.word	0x00030240

000d7114 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7114:	b508      	push	{r3, lr}
   d7116:	4b02      	ldr	r3, [pc, #8]	; (d7120 <network_is_on+0xc>)
   d7118:	681b      	ldr	r3, [r3, #0]
   d711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d711c:	9301      	str	r3, [sp, #4]
   d711e:	bd08      	pop	{r3, pc}
   d7120:	00030240 	.word	0x00030240

000d7124 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7124:	b508      	push	{r3, lr}
   d7126:	4b02      	ldr	r3, [pc, #8]	; (d7130 <network_is_off+0xc>)
   d7128:	681b      	ldr	r3, [r3, #0]
   d712a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d712c:	9301      	str	r3, [sp, #4]
   d712e:	bd08      	pop	{r3, pc}
   d7130:	00030240 	.word	0x00030240

000d7134 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7134:	b508      	push	{r3, lr}
   d7136:	4b02      	ldr	r3, [pc, #8]	; (d7140 <malloc+0xc>)
   d7138:	681b      	ldr	r3, [r3, #0]
   d713a:	681b      	ldr	r3, [r3, #0]
   d713c:	9301      	str	r3, [sp, #4]
   d713e:	bd08      	pop	{r3, pc}
   d7140:	0003021c 	.word	0x0003021c

000d7144 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7144:	b508      	push	{r3, lr}
   d7146:	4b02      	ldr	r3, [pc, #8]	; (d7150 <free+0xc>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	685b      	ldr	r3, [r3, #4]
   d714c:	9301      	str	r3, [sp, #4]
   d714e:	bd08      	pop	{r3, pc}
   d7150:	0003021c 	.word	0x0003021c

000d7154 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7154:	b508      	push	{r3, lr}
   d7156:	4b02      	ldr	r3, [pc, #8]	; (d7160 <realloc+0xc>)
   d7158:	681b      	ldr	r3, [r3, #0]
   d715a:	689b      	ldr	r3, [r3, #8]
   d715c:	9301      	str	r3, [sp, #4]
   d715e:	bd08      	pop	{r3, pc}
   d7160:	0003021c 	.word	0x0003021c

000d7164 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7164:	b508      	push	{r3, lr}
   d7166:	4b02      	ldr	r3, [pc, #8]	; (d7170 <sprintf+0xc>)
   d7168:	681b      	ldr	r3, [r3, #0]
   d716a:	68db      	ldr	r3, [r3, #12]
   d716c:	9301      	str	r3, [sp, #4]
   d716e:	bd08      	pop	{r3, pc}
   d7170:	0003021c 	.word	0x0003021c

000d7174 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7174:	b508      	push	{r3, lr}
   d7176:	4b02      	ldr	r3, [pc, #8]	; (d7180 <abort+0xc>)
   d7178:	681b      	ldr	r3, [r3, #0]
   d717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	bd08      	pop	{r3, pc}
   d7180:	0003021c 	.word	0x0003021c

000d7184 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7184:	b508      	push	{r3, lr}
   d7186:	4b02      	ldr	r3, [pc, #8]	; (d7190 <_malloc_r+0xc>)
   d7188:	681b      	ldr	r3, [r3, #0]
   d718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d718c:	9301      	str	r3, [sp, #4]
   d718e:	bd08      	pop	{r3, pc}
   d7190:	0003021c 	.word	0x0003021c

000d7194 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7194:	b508      	push	{r3, lr}
   d7196:	4b02      	ldr	r3, [pc, #8]	; (d71a0 <__errno+0xc>)
   d7198:	681b      	ldr	r3, [r3, #0]
   d719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d719c:	9301      	str	r3, [sp, #4]
   d719e:	bd08      	pop	{r3, pc}
   d71a0:	0003021c 	.word	0x0003021c

000d71a4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d71a4:	b508      	push	{r3, lr}
   d71a6:	4b02      	ldr	r3, [pc, #8]	; (d71b0 <newlib_impure_ptr_callback+0xc>)
   d71a8:	681b      	ldr	r3, [r3, #0]
   d71aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d71ac:	9301      	str	r3, [sp, #4]
   d71ae:	bd08      	pop	{r3, pc}
   d71b0:	0003021c 	.word	0x0003021c

000d71b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d71b4:	2100      	movs	r1, #0
   d71b6:	f7ff bf01 	b.w	d6fbc <system_delay_ms>

000d71ba <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d71ba:	b510      	push	{r4, lr}
      if (_M_empty())
   d71bc:	6883      	ldr	r3, [r0, #8]
   d71be:	4604      	mov	r4, r0
   d71c0:	b90b      	cbnz	r3, d71c6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d71c2:	f002 faf6 	bl	d97b2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d71c6:	68c3      	ldr	r3, [r0, #12]
   d71c8:	4798      	blx	r3
      if (_M_manager)
   d71ca:	68a3      	ldr	r3, [r4, #8]
   d71cc:	b11b      	cbz	r3, d71d6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d71ce:	2203      	movs	r2, #3
   d71d0:	4621      	mov	r1, r4
   d71d2:	4620      	mov	r0, r4
   d71d4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d71d6:	4620      	mov	r0, r4
   d71d8:	2110      	movs	r1, #16
}
   d71da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d71de:	f002 ba30 	b.w	d9642 <_ZdlPvj>

000d71e2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d71e2:	b510      	push	{r4, lr}
   d71e4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d71e6:	6800      	ldr	r0, [r0, #0]
   d71e8:	b108      	cbz	r0, d71ee <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d71ea:	f7ff fd0f 	bl	d6c0c <os_mutex_recursive_destroy>
    }
   d71ee:	4620      	mov	r0, r4
   d71f0:	bd10      	pop	{r4, pc}

000d71f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d71f2:	b513      	push	{r0, r1, r4, lr}
   d71f4:	460b      	mov	r3, r1
   d71f6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71f8:	e9d0 0100 	ldrd	r0, r1, [r0]
   d71fc:	466c      	mov	r4, sp
   d71fe:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7202:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7206:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d720a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d720e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7212:	b002      	add	sp, #8
   d7214:	bd10      	pop	{r4, pc}
	...

000d7218 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7218:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d721a:	4c06      	ldr	r4, [pc, #24]	; (d7234 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d721c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d721e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7220:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7222:	f7ff fceb 	bl	d6bfc <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7226:	4620      	mov	r0, r4
   d7228:	4a03      	ldr	r2, [pc, #12]	; (d7238 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d722a:	4904      	ldr	r1, [pc, #16]	; (d723c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d722c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7230:	f002 ba02 	b.w	d9638 <__aeabi_atexit>
   d7234:	2003e61c 	.word	0x2003e61c
   d7238:	2003e440 	.word	0x2003e440
   d723c:	000d71e3 	.word	0x000d71e3

000d7240 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7240:	2200      	movs	r2, #0
   d7242:	6840      	ldr	r0, [r0, #4]
   d7244:	4611      	mov	r1, r2
   d7246:	f7ff bf2d 	b.w	d70a4 <network_ready>

000d724a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d724a:	2200      	movs	r2, #0
   d724c:	6840      	ldr	r0, [r0, #4]
   d724e:	4611      	mov	r1, r2
   d7250:	f7ff bf48 	b.w	d70e4 <network_listening>

000d7254 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7254:	2200      	movs	r2, #0
   d7256:	6840      	ldr	r0, [r0, #4]
   d7258:	4611      	mov	r1, r2
   d725a:	f7ff bf53 	b.w	d7104 <network_get_listen_timeout>

000d725e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d725e:	6840      	ldr	r0, [r0, #4]
   d7260:	2200      	movs	r2, #0
   d7262:	f7ff bf47 	b.w	d70f4 <network_set_listen_timeout>

000d7266 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7266:	6840      	ldr	r0, [r0, #4]
   d7268:	2200      	movs	r2, #0
   d726a:	f081 0101 	eor.w	r1, r1, #1
   d726e:	f7ff bf31 	b.w	d70d4 <network_listen>

000d7272 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7272:	2300      	movs	r3, #0
   d7274:	6840      	ldr	r0, [r0, #4]
   d7276:	461a      	mov	r2, r3
   d7278:	4619      	mov	r1, r3
   d727a:	f7ff bf23 	b.w	d70c4 <network_off>

000d727e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d727e:	2300      	movs	r3, #0
   d7280:	6840      	ldr	r0, [r0, #4]
   d7282:	461a      	mov	r2, r3
   d7284:	4619      	mov	r1, r3
   d7286:	f7ff bf15 	b.w	d70b4 <network_on>

000d728a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d728a:	2200      	movs	r2, #0
   d728c:	6840      	ldr	r0, [r0, #4]
   d728e:	4611      	mov	r1, r2
   d7290:	f7ff bef8 	b.w	d7084 <network_connecting>

000d7294 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7294:	6840      	ldr	r0, [r0, #4]
   d7296:	2200      	movs	r2, #0
   d7298:	2102      	movs	r1, #2
   d729a:	f7ff befb 	b.w	d7094 <network_disconnect>

000d729e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d729e:	2300      	movs	r3, #0
   d72a0:	6840      	ldr	r0, [r0, #4]
   d72a2:	461a      	mov	r2, r3
   d72a4:	f7ff bee6 	b.w	d7074 <network_connect>

000d72a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d72a8:	4b08      	ldr	r3, [pc, #32]	; (d72cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d72aa:	b510      	push	{r4, lr}
   d72ac:	2428      	movs	r4, #40	; 0x28
   d72ae:	4622      	mov	r2, r4
   d72b0:	4618      	mov	r0, r3
   d72b2:	2100      	movs	r1, #0
   d72b4:	f003 fa7c 	bl	da7b0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d72b8:	4b05      	ldr	r3, [pc, #20]	; (d72d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d72ba:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d72bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d72c0:	6042      	str	r2, [r0, #4]
   d72c2:	2204      	movs	r2, #4
   d72c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d72c6:	4a03      	ldr	r2, [pc, #12]	; (d72d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d72c8:	601a      	str	r2, [r3, #0]
   d72ca:	bd10      	pop	{r4, pc}
   d72cc:	2003e628 	.word	0x2003e628
   d72d0:	2003e620 	.word	0x2003e620
   d72d4:	000dced4 	.word	0x000dced4

000d72d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d72d8:	4770      	bx	lr

000d72da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d72da:	2000      	movs	r0, #0
   d72dc:	4770      	bx	lr

000d72de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d72de:	b510      	push	{r4, lr}
   d72e0:	2110      	movs	r1, #16
   d72e2:	4604      	mov	r4, r0
   d72e4:	f002 f9ad 	bl	d9642 <_ZdlPvj>
   d72e8:	4620      	mov	r0, r4
   d72ea:	bd10      	pop	{r4, pc}

000d72ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d72ec:	b508      	push	{r3, lr}
      { delete this; }
   d72ee:	f7ff fff6 	bl	d72de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d72f2:	bd08      	pop	{r3, pc}

000d72f4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d72f4:	b530      	push	{r4, r5, lr}
        type_(type) {
   d72f6:	2200      	movs	r2, #0
   d72f8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d72fc:	6002      	str	r2, [r0, #0]
   d72fe:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7300:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7302:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7304:	680c      	ldr	r4, [r1, #0]
   d7306:	8085      	strh	r5, [r0, #4]
   d7308:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d730a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d730c:	bd30      	pop	{r4, r5, pc}

000d730e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d730e:	b510      	push	{r4, lr}
   d7310:	4604      	mov	r4, r0
    free((void*)msg_);
   d7312:	6800      	ldr	r0, [r0, #0]
   d7314:	f7ff ff16 	bl	d7144 <free>
}
   d7318:	4620      	mov	r0, r4
   d731a:	bd10      	pop	{r4, pc}

000d731c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d731c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d731e:	68c4      	ldr	r4, [r0, #12]
   d7320:	b1f4      	cbz	r4, d7360 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7322:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7324:	2b02      	cmp	r3, #2
   d7326:	d103      	bne.n	d7330 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7328:	f104 000c 	add.w	r0, r4, #12
   d732c:	f7ff ffef 	bl	d730e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7330:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7332:	b135      	cbz	r5, d7342 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7334:	4628      	mov	r0, r5
   d7336:	f7fe f821 	bl	d537c <_ZNSt14_Function_baseD1Ev>
   d733a:	2110      	movs	r1, #16
   d733c:	4628      	mov	r0, r5
   d733e:	f002 f980 	bl	d9642 <_ZdlPvj>
   d7342:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7344:	b135      	cbz	r5, d7354 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7346:	4628      	mov	r0, r5
   d7348:	f7fe f818 	bl	d537c <_ZNSt14_Function_baseD1Ev>
   d734c:	2110      	movs	r1, #16
   d734e:	4628      	mov	r0, r5
   d7350:	f002 f977 	bl	d9642 <_ZdlPvj>
   d7354:	4620      	mov	r0, r4
   d7356:	2114      	movs	r1, #20
   d7358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d735c:	f002 b971 	b.w	d9642 <_ZdlPvj>
   d7360:	bd38      	pop	{r3, r4, r5, pc}

000d7362 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7362:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7364:	460e      	mov	r6, r1
   d7366:	4604      	mov	r4, r0
   d7368:	f856 3b04 	ldr.w	r3, [r6], #4
   d736c:	9300      	str	r3, [sp, #0]
   d736e:	460d      	mov	r5, r1
   d7370:	a801      	add	r0, sp, #4
   d7372:	4631      	mov	r1, r6
   d7374:	f7fd fa56 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7378:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d737a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d737c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d737e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7380:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7382:	2300      	movs	r3, #0
   d7384:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7386:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d7388:	f7fd f84a 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d738c:	4630      	mov	r0, r6
   d738e:	f7fd f847 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7392:	4628      	mov	r0, r5
   d7394:	2108      	movs	r1, #8
   d7396:	f002 f954 	bl	d9642 <_ZdlPvj>
        return p;
    }
   d739a:	4620      	mov	r0, r4
   d739c:	b002      	add	sp, #8
   d739e:	bd70      	pop	{r4, r5, r6, pc}

000d73a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d73a0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d73a2:	b510      	push	{r4, lr}
      if (_M_empty())
   d73a4:	b90a      	cbnz	r2, d73aa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d73a6:	f002 fa04 	bl	d97b2 <_ZSt25__throw_bad_function_callv>
    }
   d73aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73ae:	68c3      	ldr	r3, [r0, #12]
   d73b0:	4718      	bx	r3

000d73b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d73b2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d73b4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d73b6:	f100 0110 	add.w	r1, r0, #16
   d73ba:	f7ff fff1 	bl	d73a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d73be:	bd08      	pop	{r3, pc}

000d73c0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d73c0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d73c2:	b510      	push	{r4, lr}
      if (_M_empty())
   d73c4:	b90a      	cbnz	r2, d73ca <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d73c6:	f002 f9f4 	bl	d97b2 <_ZSt25__throw_bad_function_callv>
    }
   d73ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73ce:	68c3      	ldr	r3, [r0, #12]
   d73d0:	4718      	bx	r3

000d73d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d73d2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d73d4:	6800      	ldr	r0, [r0, #0]
   d73d6:	f100 0110 	add.w	r1, r0, #16
   d73da:	f7ff fff1 	bl	d73c0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d73de:	bd08      	pop	{r3, pc}

000d73e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d73e0:	b538      	push	{r3, r4, r5, lr}
   d73e2:	2300      	movs	r3, #0
   d73e4:	4604      	mov	r4, r0
   d73e6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d73e8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d73ea:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d73ec:	f7fc fe53 	bl	d4096 <_Znwj>
   d73f0:	b128      	cbz	r0, d73fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d73f2:	2301      	movs	r3, #1
   d73f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d73f8:	4b02      	ldr	r3, [pc, #8]	; (d7404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d73fa:	6003      	str	r3, [r0, #0]
   d73fc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d73fe:	6020      	str	r0, [r4, #0]
	}
   d7400:	4620      	mov	r0, r4
   d7402:	bd38      	pop	{r3, r4, r5, pc}
   d7404:	000dcf10 	.word	0x000dcf10

000d7408 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7408:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d740a:	2300      	movs	r3, #0
   d740c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d740e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7410:	4604      	mov	r4, r0
   d7412:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7414:	b12b      	cbz	r3, d7422 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7416:	2202      	movs	r2, #2
   d7418:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d741a:	68eb      	ldr	r3, [r5, #12]
   d741c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d741e:	68ab      	ldr	r3, [r5, #8]
   d7420:	60a3      	str	r3, [r4, #8]
    }
   d7422:	4620      	mov	r0, r4
   d7424:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7428 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7428:	b5f0      	push	{r4, r5, r6, r7, lr}
   d742a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d742c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d742e:	4668      	mov	r0, sp
   d7430:	f7ff ff60 	bl	d72f4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7434:	f04f 0302 	mov.w	r3, #2
   d7438:	e8d4 2f4f 	ldrexb	r2, [r4]
   d743c:	2a00      	cmp	r2, #0
   d743e:	d103      	bne.n	d7448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7440:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7444:	2900      	cmp	r1, #0
   d7446:	d1f7      	bne.n	d7438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7448:	d125      	bne.n	d7496 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d744a:	f104 050c 	add.w	r5, r4, #12
   d744e:	4669      	mov	r1, sp
   d7450:	4628      	mov	r0, r5
   d7452:	f7ff ff4f 	bl	d72f4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d7456:	f3bf 8f5b 	dmb	ish
   d745a:	2301      	movs	r3, #1
   d745c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d745e:	2000      	movs	r0, #0
   d7460:	f104 0308 	add.w	r3, r4, #8
   d7464:	f3bf 8f5b 	dmb	ish
   d7468:	e853 6f00 	ldrex	r6, [r3]
   d746c:	e843 0200 	strex	r2, r0, [r3]
   d7470:	2a00      	cmp	r2, #0
   d7472:	d1f9      	bne.n	d7468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7474:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7478:	b16e      	cbz	r6, d7496 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d747a:	f7ff fda7 	bl	d6fcc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d747e:	b178      	cbz	r0, d74a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7480:	4629      	mov	r1, r5
   d7482:	4630      	mov	r0, r6
   d7484:	f7ff ff8c 	bl	d73a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d7488:	4630      	mov	r0, r6
   d748a:	f7fd ff77 	bl	d537c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d748e:	2110      	movs	r1, #16
   d7490:	4630      	mov	r0, r6
   d7492:	f002 f8d6 	bl	d9642 <_ZdlPvj>
        p_->setError(std::move(error));
   d7496:	4668      	mov	r0, sp
   d7498:	f7ff ff39 	bl	d730e <_ZN8particle5ErrorD1Ev>
    }
   d749c:	b009      	add	sp, #36	; 0x24
   d749e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d74a0:	4631      	mov	r1, r6
   d74a2:	a802      	add	r0, sp, #8
   d74a4:	f7ff ffb0 	bl	d7408 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d74a8:	68e0      	ldr	r0, [r4, #12]
   d74aa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d74ae:	b108      	cbz	r0, d74b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d74b0:	f003 f9da 	bl	da868 <strdup>
        type_(type) {
   d74b4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d74b6:	2010      	movs	r0, #16
   d74b8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d74bc:	f7fc fdeb 	bl	d4096 <_Znwj>
   d74c0:	4605      	mov	r5, r0
   d74c2:	b1e8      	cbz	r0, d7500 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d74c4:	2700      	movs	r7, #0
   d74c6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74c8:	2018      	movs	r0, #24
   d74ca:	f7fc fde4 	bl	d4096 <_Znwj>
   d74ce:	4604      	mov	r4, r0
   d74d0:	b188      	cbz	r0, d74f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d74d2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d74d4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d74d6:	a802      	add	r0, sp, #8
   d74d8:	f7ff fe8b 	bl	d71f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74dc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d74de:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d74e0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d74e2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d74e4:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d74e6:	a906      	add	r1, sp, #24
   d74e8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d74ea:	60e3      	str	r3, [r4, #12]
   d74ec:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d74f0:	9205      	str	r2, [sp, #20]
   d74f2:	f7ff feff 	bl	d72f4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d74f6:	4b08      	ldr	r3, [pc, #32]	; (d7518 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d74f8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d74fa:	4b08      	ldr	r3, [pc, #32]	; (d751c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74fc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d74fe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7500:	a806      	add	r0, sp, #24
   d7502:	f7ff ff04 	bl	d730e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7506:	a802      	add	r0, sp, #8
   d7508:	f7fd ff38 	bl	d537c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d750c:	2200      	movs	r2, #0
   d750e:	4629      	mov	r1, r5
   d7510:	4803      	ldr	r0, [pc, #12]	; (d7520 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7512:	f7ff fd63 	bl	d6fdc <application_thread_invoke>
   d7516:	e7b7      	b.n	d7488 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7518:	000d73b3 	.word	0x000d73b3
   d751c:	000d7649 	.word	0x000d7649
   d7520:	000d71bb 	.word	0x000d71bb

000d7524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7528:	b08a      	sub	sp, #40	; 0x28
   d752a:	4605      	mov	r5, r0
   d752c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7530:	460c      	mov	r4, r1
   d7532:	4617      	mov	r7, r2
   d7534:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7536:	f7ff fd75 	bl	d7024 <spark_cloud_flag_connected>
   d753a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d753c:	4682      	mov	sl, r0
   d753e:	bb38      	cbnz	r0, d7590 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7540:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7544:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7546:	a905      	add	r1, sp, #20
   d7548:	4630      	mov	r0, r6
   d754a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d754e:	f7ff fed1 	bl	d72f4 <_ZN8particle5ErrorC1EOS0_>
   d7552:	2014      	movs	r0, #20
   d7554:	f7fc fd9f 	bl	d4096 <_Znwj>
   d7558:	4604      	mov	r4, r0
   d755a:	b148      	cbz	r0, d7570 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d755c:	2302      	movs	r3, #2
   d755e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7560:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7562:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7566:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d7568:	4631      	mov	r1, r6
   d756a:	300c      	adds	r0, #12
   d756c:	f7ff fec2 	bl	d72f4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7570:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7572:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7574:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d7578:	f7ff ff32 	bl	d73e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d757c:	4630      	mov	r0, r6
   d757e:	f7ff fec6 	bl	d730e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7582:	a805      	add	r0, sp, #20
   d7584:	f7ff fec3 	bl	d730e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d7588:	4628      	mov	r0, r5
   d758a:	b00a      	add	sp, #40	; 0x28
   d758c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7590:	230c      	movs	r3, #12
   d7592:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7596:	2014      	movs	r0, #20
   d7598:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d759c:	9307      	str	r3, [sp, #28]
   d759e:	f7fc fd7a 	bl	d4096 <_Znwj>
   d75a2:	4601      	mov	r1, r0
   d75a4:	b128      	cbz	r0, d75b2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d75a6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d75aa:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d75ae:	f880 a001 	strb.w	sl, [r0, #1]
   d75b2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d75b4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d75b6:	f7ff ff13 	bl	d73e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d75ba:	4b22      	ldr	r3, [pc, #136]	; (d7644 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d75bc:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d75be:	2008      	movs	r0, #8
   d75c0:	f7fc fd69 	bl	d4096 <_Znwj>
   d75c4:	4682      	mov	sl, r0
   d75c6:	b128      	cbz	r0, d75d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d75c8:	9b03      	ldr	r3, [sp, #12]
   d75ca:	f840 3b04 	str.w	r3, [r0], #4
   d75ce:	a904      	add	r1, sp, #16
   d75d0:	f7fd f928 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d75d4:	9600      	str	r6, [sp, #0]
   d75d6:	fa5f f389 	uxtb.w	r3, r9
   d75da:	4642      	mov	r2, r8
   d75dc:	4639      	mov	r1, r7
   d75de:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d75e0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d75e4:	f7ff fd2e 	bl	d7044 <spark_send_event>
   d75e8:	b9b8      	cbnz	r0, d761a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d75ea:	9b03      	ldr	r3, [sp, #12]
   d75ec:	785b      	ldrb	r3, [r3, #1]
   d75ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d75f2:	b993      	cbnz	r3, d761a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d75f4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d75f8:	a905      	add	r1, sp, #20
   d75fa:	a803      	add	r0, sp, #12
   d75fc:	9205      	str	r2, [sp, #20]
   d75fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7602:	f7ff ff11 	bl	d7428 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7606:	a805      	add	r0, sp, #20
   d7608:	f7ff fe81 	bl	d730e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d760c:	a805      	add	r0, sp, #20
   d760e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7610:	f7ff fea7 	bl	d7362 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7614:	a806      	add	r0, sp, #24
   d7616:	f7fc ff03 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d761a:	9b03      	ldr	r3, [sp, #12]
   d761c:	9305      	str	r3, [sp, #20]
   d761e:	a904      	add	r1, sp, #16
   d7620:	a806      	add	r0, sp, #24
   d7622:	f7fd f8ff 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7626:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7628:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d762a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d762c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d762e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d7630:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d7632:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7634:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d7636:	f7fc fef3 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d763a:	a804      	add	r0, sp, #16
   d763c:	f7fc fef0 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d7640:	e7a2      	b.n	d7588 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d7642:	bf00      	nop
   d7644:	000d770d 	.word	0x000d770d

000d7648 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d7648:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d764a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d764c:	4605      	mov	r5, r0
	  switch (__op)
   d764e:	d007      	beq.n	d7660 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d7650:	2a03      	cmp	r2, #3
   d7652:	d018      	beq.n	d7686 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d7654:	2a01      	cmp	r2, #1
   d7656:	d101      	bne.n	d765c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7658:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d765a:	6003      	str	r3, [r0, #0]
	}
   d765c:	2000      	movs	r0, #0
   d765e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7660:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7662:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7664:	f7fc fd17 	bl	d4096 <_Znwj>
   d7668:	4604      	mov	r4, r0
   d766a:	b150      	cbz	r0, d7682 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d766c:	4631      	mov	r1, r6
   d766e:	f7ff fecb 	bl	d7408 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7672:	6930      	ldr	r0, [r6, #16]
   d7674:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7678:	b108      	cbz	r0, d767e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d767a:	f003 f8f5 	bl	da868 <strdup>
        type_(type) {
   d767e:	6120      	str	r0, [r4, #16]
   d7680:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7682:	602c      	str	r4, [r5, #0]
	}
   d7684:	e7ea      	b.n	d765c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7686:	6804      	ldr	r4, [r0, #0]
   d7688:	2c00      	cmp	r4, #0
   d768a:	d0e7      	beq.n	d765c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d768c:	f104 0010 	add.w	r0, r4, #16
   d7690:	f7ff fe3d 	bl	d730e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7694:	4620      	mov	r0, r4
   d7696:	f7fd fe71 	bl	d537c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d769a:	2118      	movs	r1, #24
   d769c:	4620      	mov	r0, r4
   d769e:	f001 ffd0 	bl	d9642 <_ZdlPvj>
   d76a2:	e7db      	b.n	d765c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d76a4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d76a4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d76a6:	2300      	movs	r3, #0
   d76a8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d76aa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d76ac:	4604      	mov	r4, r0
   d76ae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d76b0:	b12b      	cbz	r3, d76be <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d76b2:	2202      	movs	r2, #2
   d76b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d76b6:	68eb      	ldr	r3, [r5, #12]
   d76b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d76ba:	68ab      	ldr	r3, [r5, #8]
   d76bc:	60a3      	str	r3, [r4, #8]
    }
   d76be:	4620      	mov	r0, r4
   d76c0:	bd38      	pop	{r3, r4, r5, pc}

000d76c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d76c2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d76c4:	b570      	push	{r4, r5, r6, lr}
   d76c6:	4604      	mov	r4, r0
	  switch (__op)
   d76c8:	d007      	beq.n	d76da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d76ca:	2a03      	cmp	r2, #3
   d76cc:	d012      	beq.n	d76f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d76ce:	2a01      	cmp	r2, #1
   d76d0:	d101      	bne.n	d76d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d76d2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d76d4:	6003      	str	r3, [r0, #0]
	}
   d76d6:	2000      	movs	r0, #0
   d76d8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d76da:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d76dc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d76de:	f7fc fcda 	bl	d4096 <_Znwj>
   d76e2:	4605      	mov	r5, r0
   d76e4:	b120      	cbz	r0, d76f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d76e6:	4631      	mov	r1, r6
   d76e8:	f7ff ffdc 	bl	d76a4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d76ec:	7c33      	ldrb	r3, [r6, #16]
   d76ee:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d76f0:	6025      	str	r5, [r4, #0]
	}
   d76f2:	e7f0      	b.n	d76d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d76f4:	6804      	ldr	r4, [r0, #0]
   d76f6:	2c00      	cmp	r4, #0
   d76f8:	d0ed      	beq.n	d76d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d76fa:	4620      	mov	r0, r4
   d76fc:	f7fd fe3e 	bl	d537c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7700:	2114      	movs	r1, #20
   d7702:	4620      	mov	r0, r4
   d7704:	f001 ff9d 	bl	d9642 <_ZdlPvj>
   d7708:	e7e5      	b.n	d76d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d770c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d770c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d770e:	b089      	sub	sp, #36	; 0x24
   d7710:	4604      	mov	r4, r0
   d7712:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7714:	a801      	add	r0, sp, #4
   d7716:	4611      	mov	r1, r2
   d7718:	f7ff fe23 	bl	d7362 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d771c:	b1a4      	cbz	r4, d7748 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d771e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7720:	b11d      	cbz	r5, d772a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7722:	4628      	mov	r0, r5
   d7724:	f003 f8a0 	bl	da868 <strdup>
   d7728:	4605      	mov	r5, r0
   d772a:	a801      	add	r0, sp, #4
   d772c:	a903      	add	r1, sp, #12
        type_(type) {
   d772e:	9503      	str	r5, [sp, #12]
   d7730:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7734:	f7ff fe78 	bl	d7428 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7738:	a803      	add	r0, sp, #12
   d773a:	f7ff fde8 	bl	d730e <_ZN8particle5ErrorD1Ev>
   d773e:	a802      	add	r0, sp, #8
   d7740:	f7fc fe6e 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7744:	b009      	add	sp, #36	; 0x24
   d7746:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7748:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d774a:	2301      	movs	r3, #1
   d774c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7750:	2a00      	cmp	r2, #0
   d7752:	d103      	bne.n	d775c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7754:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7758:	2900      	cmp	r1, #0
   d775a:	d1f7      	bne.n	d774c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d775c:	d1ef      	bne.n	d773e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d775e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7760:	f3bf 8f5b 	dmb	ish
   d7764:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7766:	1d2b      	adds	r3, r5, #4
   d7768:	f3bf 8f5b 	dmb	ish
   d776c:	e853 6f00 	ldrex	r6, [r3]
   d7770:	e843 4200 	strex	r2, r4, [r3]
   d7774:	2a00      	cmp	r2, #0
   d7776:	d1f9      	bne.n	d776c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d7778:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d777c:	2e00      	cmp	r6, #0
   d777e:	d0de      	beq.n	d773e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7780:	4620      	mov	r0, r4
   d7782:	f7ff fc23 	bl	d6fcc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7786:	4607      	mov	r7, r0
   d7788:	b160      	cbz	r0, d77a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d778a:	f105 010c 	add.w	r1, r5, #12
   d778e:	4630      	mov	r0, r6
   d7790:	f7ff fe16 	bl	d73c0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7794:	4630      	mov	r0, r6
   d7796:	f7fd fdf1 	bl	d537c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d779a:	2110      	movs	r1, #16
   d779c:	4630      	mov	r0, r6
   d779e:	f001 ff50 	bl	d9642 <_ZdlPvj>
   d77a2:	e7cc      	b.n	d773e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d77a4:	4631      	mov	r1, r6
   d77a6:	a803      	add	r0, sp, #12
   d77a8:	f7ff ff7c 	bl	d76a4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d77ac:	7b2b      	ldrb	r3, [r5, #12]
   d77ae:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d77b2:	2010      	movs	r0, #16
   d77b4:	f7fc fc6f 	bl	d4096 <_Znwj>
   d77b8:	4605      	mov	r5, r0
   d77ba:	b1d0      	cbz	r0, d77f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d77bc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d77be:	2014      	movs	r0, #20
   d77c0:	f7fc fc69 	bl	d4096 <_Znwj>
   d77c4:	4604      	mov	r4, r0
   d77c6:	b178      	cbz	r0, d77e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d77c8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d77ca:	4601      	mov	r1, r0
   d77cc:	a803      	add	r0, sp, #12
   d77ce:	f7ff fd10 	bl	d71f2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77d2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d77d4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d77d6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77d8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d77da:	9205      	str	r2, [sp, #20]
   d77dc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d77de:	60e3      	str	r3, [r4, #12]
   d77e0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d77e4:	9206      	str	r2, [sp, #24]
   d77e6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d77e8:	4b06      	ldr	r3, [pc, #24]	; (d7804 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d77ea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d77ec:	4b06      	ldr	r3, [pc, #24]	; (d7808 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d77ee:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d77f0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d77f2:	a803      	add	r0, sp, #12
   d77f4:	f7fd fdc2 	bl	d537c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d77f8:	2200      	movs	r2, #0
   d77fa:	4629      	mov	r1, r5
   d77fc:	4803      	ldr	r0, [pc, #12]	; (d780c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d77fe:	f7ff fbed 	bl	d6fdc <application_thread_invoke>
   d7802:	e7c7      	b.n	d7794 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7804:	000d73d3 	.word	0x000d73d3
   d7808:	000d76c3 	.word	0x000d76c3
   d780c:	000d71bb 	.word	0x000d71bb

000d7810 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7810:	2200      	movs	r2, #0
   d7812:	6840      	ldr	r0, [r0, #4]
   d7814:	4611      	mov	r1, r2
   d7816:	f7ff bc65 	b.w	d70e4 <network_listening>

000d781a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d781a:	2200      	movs	r2, #0
   d781c:	6840      	ldr	r0, [r0, #4]
   d781e:	4611      	mov	r1, r2
   d7820:	f7ff bc70 	b.w	d7104 <network_get_listen_timeout>

000d7824 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7824:	6840      	ldr	r0, [r0, #4]
   d7826:	2200      	movs	r2, #0
   d7828:	f7ff bc64 	b.w	d70f4 <network_set_listen_timeout>

000d782c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d782c:	6840      	ldr	r0, [r0, #4]
   d782e:	2200      	movs	r2, #0
   d7830:	f081 0101 	eor.w	r1, r1, #1
   d7834:	f7ff bc4e 	b.w	d70d4 <network_listen>

000d7838 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7838:	2300      	movs	r3, #0
   d783a:	6840      	ldr	r0, [r0, #4]
   d783c:	461a      	mov	r2, r3
   d783e:	4619      	mov	r1, r3
   d7840:	f7ff bc40 	b.w	d70c4 <network_off>

000d7844 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7844:	2300      	movs	r3, #0
   d7846:	6840      	ldr	r0, [r0, #4]
   d7848:	461a      	mov	r2, r3
   d784a:	4619      	mov	r1, r3
   d784c:	f7ff bc32 	b.w	d70b4 <network_on>

000d7850 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7850:	2200      	movs	r2, #0
   d7852:	6840      	ldr	r0, [r0, #4]
   d7854:	4611      	mov	r1, r2
   d7856:	f7ff bc25 	b.w	d70a4 <network_ready>

000d785a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d785a:	2200      	movs	r2, #0
   d785c:	6840      	ldr	r0, [r0, #4]
   d785e:	4611      	mov	r1, r2
   d7860:	f7ff bc10 	b.w	d7084 <network_connecting>

000d7864 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7864:	6840      	ldr	r0, [r0, #4]
   d7866:	2200      	movs	r2, #0
   d7868:	2102      	movs	r1, #2
   d786a:	f7ff bc13 	b.w	d7094 <network_disconnect>

000d786e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d786e:	2300      	movs	r3, #0
   d7870:	6840      	ldr	r0, [r0, #4]
   d7872:	461a      	mov	r2, r3
   d7874:	f7ff bbfe 	b.w	d7074 <network_connect>

000d7878 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7878:	4b02      	ldr	r3, [pc, #8]	; (d7884 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d787a:	2203      	movs	r2, #3
   d787c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d787e:	4a02      	ldr	r2, [pc, #8]	; (d7888 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7880:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7882:	4770      	bx	lr
   d7884:	2003e650 	.word	0x2003e650
   d7888:	000dcf2c 	.word	0x000dcf2c

000d788c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d788c:	4770      	bx	lr

000d788e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d788e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7890:	4606      	mov	r6, r0
   d7892:	4615      	mov	r5, r2
   d7894:	460c      	mov	r4, r1
   d7896:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7898:	42bc      	cmp	r4, r7
   d789a:	d006      	beq.n	d78aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d789c:	6833      	ldr	r3, [r6, #0]
   d789e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d78a2:	689b      	ldr	r3, [r3, #8]
   d78a4:	4630      	mov	r0, r6
   d78a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d78a8:	e7f6      	b.n	d7898 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d78aa:	4628      	mov	r0, r5
   d78ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d78ae:	7c00      	ldrb	r0, [r0, #16]
   d78b0:	2200      	movs	r2, #0
   d78b2:	f7ff ba13 	b.w	d6cdc <hal_i2c_write>

000d78b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d78b6:	7c00      	ldrb	r0, [r0, #16]
   d78b8:	2100      	movs	r1, #0
   d78ba:	f7ff ba17 	b.w	d6cec <hal_i2c_available>

000d78be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d78be:	7c00      	ldrb	r0, [r0, #16]
   d78c0:	2100      	movs	r1, #0
   d78c2:	f7ff ba1b 	b.w	d6cfc <hal_i2c_read>

000d78c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d78c6:	7c00      	ldrb	r0, [r0, #16]
   d78c8:	2100      	movs	r1, #0
   d78ca:	f7ff ba1f 	b.w	d6d0c <hal_i2c_peek>

000d78ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d78ce:	7c00      	ldrb	r0, [r0, #16]
   d78d0:	2100      	movs	r1, #0
   d78d2:	f7ff ba23 	b.w	d6d1c <hal_i2c_flush>

000d78d6 <_ZN7TwoWireD0Ev>:
   d78d6:	b510      	push	{r4, lr}
   d78d8:	2114      	movs	r1, #20
   d78da:	4604      	mov	r4, r0
   d78dc:	f001 feb1 	bl	d9642 <_ZdlPvj>
   d78e0:	4620      	mov	r0, r4
   d78e2:	bd10      	pop	{r4, pc}

000d78e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d78e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d78e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d78ea:	4604      	mov	r4, r0
   d78ec:	4608      	mov	r0, r1
   d78ee:	2100      	movs	r1, #0
   d78f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d78f4:	4b03      	ldr	r3, [pc, #12]	; (d7904 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d78f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d78f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d78fa:	4611      	mov	r1, r2
   d78fc:	f7ff fa1e 	bl	d6d3c <hal_i2c_init>
}
   d7900:	4620      	mov	r0, r4
   d7902:	bd10      	pop	{r4, pc}
   d7904:	000dcf68 	.word	0x000dcf68

000d7908 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7908:	2300      	movs	r3, #0
   d790a:	7c00      	ldrb	r0, [r0, #16]
   d790c:	461a      	mov	r2, r3
   d790e:	4619      	mov	r1, r3
   d7910:	f7ff b9cc 	b.w	d6cac <hal_i2c_begin>

000d7914 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7914:	7c00      	ldrb	r0, [r0, #16]
   d7916:	2200      	movs	r2, #0
   d7918:	f7ff b9d0 	b.w	d6cbc <hal_i2c_begin_transmission>

000d791c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d791c:	b2c9      	uxtb	r1, r1
   d791e:	f7ff bff9 	b.w	d7914 <_ZN7TwoWire17beginTransmissionEh>

000d7922 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7922:	7c00      	ldrb	r0, [r0, #16]
   d7924:	2200      	movs	r2, #0
   d7926:	f7ff b9d1 	b.w	d6ccc <hal_i2c_end_transmission>

000d792a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d792a:	2101      	movs	r1, #1
   d792c:	f7ff bff9 	b.w	d7922 <_ZN7TwoWire15endTransmissionEh>

000d7930 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d7930:	f7ff b9b4 	b.w	d6c9c <HAL_Interrupts_Disable_All>

000d7934 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d7934:	f7ff b9aa 	b.w	d6c8c <HAL_Interrupts_Enable_All>

000d7938 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7938:	4770      	bx	lr

000d793a <_ZN9IPAddressD0Ev>:
   d793a:	b510      	push	{r4, lr}
   d793c:	2118      	movs	r1, #24
   d793e:	4604      	mov	r4, r0
   d7940:	f001 fe7f 	bl	d9642 <_ZdlPvj>
   d7944:	4620      	mov	r0, r4
   d7946:	bd10      	pop	{r4, pc}

000d7948 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7948:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d794a:	7d03      	ldrb	r3, [r0, #20]
   d794c:	2b06      	cmp	r3, #6
{
   d794e:	b08d      	sub	sp, #52	; 0x34
   d7950:	460e      	mov	r6, r1
   d7952:	f100 0704 	add.w	r7, r0, #4
   d7956:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d795a:	d012      	beq.n	d7982 <_ZNK9IPAddress7printToER5Print+0x3a>
   d795c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7960:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7964:	220a      	movs	r2, #10
   d7966:	4630      	mov	r0, r6
   d7968:	f000 fbdf 	bl	d812a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d796c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d796e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7970:	d019      	beq.n	d79a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7972:	2c00      	cmp	r4, #0
   d7974:	d0f4      	beq.n	d7960 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7976:	212e      	movs	r1, #46	; 0x2e
   d7978:	4630      	mov	r0, r6
   d797a:	f000 fbbd 	bl	d80f8 <_ZN5Print5printEc>
   d797e:	4404      	add	r4, r0
   d7980:	e7ee      	b.n	d7960 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7982:	232f      	movs	r3, #47	; 0x2f
   d7984:	466a      	mov	r2, sp
   d7986:	4639      	mov	r1, r7
   d7988:	200a      	movs	r0, #10
		buf[0] = 0;
   d798a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d798e:	f7ff f9e5 	bl	d6d5c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7992:	4668      	mov	r0, sp
   d7994:	f002 ff85 	bl	da8a2 <strlen>
   d7998:	6833      	ldr	r3, [r6, #0]
   d799a:	4602      	mov	r2, r0
   d799c:	68db      	ldr	r3, [r3, #12]
   d799e:	4669      	mov	r1, sp
   d79a0:	4630      	mov	r0, r6
   d79a2:	4798      	blx	r3
   d79a4:	4604      	mov	r4, r0
    }
    return n;
}
   d79a6:	4620      	mov	r0, r4
   d79a8:	b00d      	add	sp, #52	; 0x34
   d79aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d79ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d79ac:	b510      	push	{r4, lr}
   d79ae:	4b05      	ldr	r3, [pc, #20]	; (d79c4 <_ZN9IPAddressC1Ev+0x18>)
   d79b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d79b2:	2211      	movs	r2, #17
   d79b4:	f840 3b04 	str.w	r3, [r0], #4
   d79b8:	2100      	movs	r1, #0
   d79ba:	f002 fef9 	bl	da7b0 <memset>
}
   d79be:	4620      	mov	r0, r4
   d79c0:	bd10      	pop	{r4, pc}
   d79c2:	bf00      	nop
   d79c4:	000dcf90 	.word	0x000dcf90

000d79c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d79c8:	4603      	mov	r3, r0
   d79ca:	4a07      	ldr	r2, [pc, #28]	; (d79e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d79cc:	b510      	push	{r4, lr}
   d79ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d79d2:	f101 0210 	add.w	r2, r1, #16
   d79d6:	f851 4b04 	ldr.w	r4, [r1], #4
   d79da:	f843 4b04 	str.w	r4, [r3], #4
   d79de:	4291      	cmp	r1, r2
   d79e0:	d1f9      	bne.n	d79d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d79e2:	780a      	ldrb	r2, [r1, #0]
   d79e4:	701a      	strb	r2, [r3, #0]
}
   d79e6:	bd10      	pop	{r4, pc}
   d79e8:	000dcf90 	.word	0x000dcf90

000d79ec <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d79ec:	7d03      	ldrb	r3, [r0, #20]
   d79ee:	2b04      	cmp	r3, #4
   d79f0:	d104      	bne.n	d79fc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d79f2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d79f4:	3800      	subs	r0, #0
   d79f6:	bf18      	it	ne
   d79f8:	2001      	movne	r0, #1
   d79fa:	4770      	bx	lr
    } else if (version() == 6) {
   d79fc:	2b06      	cmp	r3, #6
   d79fe:	d107      	bne.n	d7a10 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a00:	6843      	ldr	r3, [r0, #4]
   d7a02:	b93b      	cbnz	r3, d7a14 <_ZNK9IPAddresscvbEv+0x28>
   d7a04:	6883      	ldr	r3, [r0, #8]
   d7a06:	b92b      	cbnz	r3, d7a14 <_ZNK9IPAddresscvbEv+0x28>
   d7a08:	68c3      	ldr	r3, [r0, #12]
   d7a0a:	b91b      	cbnz	r3, d7a14 <_ZNK9IPAddresscvbEv+0x28>
   d7a0c:	6900      	ldr	r0, [r0, #16]
   d7a0e:	e7f1      	b.n	d79f4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7a10:	2000      	movs	r0, #0
   d7a12:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a14:	2001      	movs	r0, #1
}
   d7a16:	4770      	bx	lr

000d7a18 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7a18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7a26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7a2a:	2304      	movs	r3, #4
   d7a2c:	6041      	str	r1, [r0, #4]
   d7a2e:	7503      	strb	r3, [r0, #20]
}
   d7a30:	bd10      	pop	{r4, pc}
	...

000d7a34 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d7a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a36:	4d04      	ldr	r5, [pc, #16]	; (d7a48 <_ZN9IPAddressC1Ehhhh+0x14>)
   d7a38:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d7a3a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d7a3e:	9500      	str	r5, [sp, #0]
   d7a40:	f7ff ffea 	bl	d7a18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7a44:	b003      	add	sp, #12
   d7a46:	bd30      	pop	{r4, r5, pc}
   d7a48:	000dcf90 	.word	0x000dcf90

000d7a4c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7a4c:	b513      	push	{r0, r1, r4, lr}
   d7a4e:	4b05      	ldr	r3, [pc, #20]	; (d7a64 <_ZN9IPAddressC1EPKh+0x18>)
   d7a50:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7a52:	78cb      	ldrb	r3, [r1, #3]
   d7a54:	9300      	str	r3, [sp, #0]
   d7a56:	788b      	ldrb	r3, [r1, #2]
   d7a58:	784a      	ldrb	r2, [r1, #1]
   d7a5a:	7809      	ldrb	r1, [r1, #0]
   d7a5c:	f7ff ffdc 	bl	d7a18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7a60:	b002      	add	sp, #8
   d7a62:	bd10      	pop	{r4, pc}
   d7a64:	000dcf90 	.word	0x000dcf90

000d7a68 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d7a68:	f100 0310 	add.w	r3, r0, #16
   d7a6c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d7a6e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d7a72:	2901      	cmp	r1, #1
   d7a74:	4618      	mov	r0, r3
   d7a76:	d108      	bne.n	d7a8a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d7a78:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d7a7c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d7a80:	3a01      	subs	r2, #1
   d7a82:	f103 0310 	add.w	r3, r3, #16
   d7a86:	d1f2      	bne.n	d7a6e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d7a88:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d7a8a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d7a8c:	bf04      	itt	eq
   d7a8e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d7a92:	1852      	addeq	r2, r2, r1
   d7a94:	e7f4      	b.n	d7a80 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d7a96 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7a96:	4770      	bx	lr

000d7a98 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7a98:	2000      	movs	r0, #0
   d7a9a:	4770      	bx	lr

000d7a9c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7a9c:	b510      	push	{r4, lr}
   d7a9e:	2110      	movs	r1, #16
   d7aa0:	4604      	mov	r4, r0
   d7aa2:	f001 fdce 	bl	d9642 <_ZdlPvj>
   d7aa6:	4620      	mov	r0, r4
   d7aa8:	bd10      	pop	{r4, pc}

000d7aaa <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7aaa:	b508      	push	{r3, lr}
      { delete this; }
   d7aac:	f7ff fff6 	bl	d7a9c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7ab0:	bd08      	pop	{r3, pc}

000d7ab2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7ab2:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d7ab4:	68c4      	ldr	r4, [r0, #12]
   d7ab6:	b17c      	cbz	r4, d7ad8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d7ab8:	6820      	ldr	r0, [r4, #0]
   d7aba:	b108      	cbz	r0, d7ac0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d7abc:	f7fc faf1 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d7ac0:	7a23      	ldrb	r3, [r4, #8]
   d7ac2:	b11b      	cbz	r3, d7acc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d7ac4:	6860      	ldr	r0, [r4, #4]
   d7ac6:	b108      	cbz	r0, d7acc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d7ac8:	f7fc faeb 	bl	d40a2 <_ZdaPv>
   d7acc:	4620      	mov	r0, r4
   d7ace:	210c      	movs	r1, #12
   d7ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7ad4:	f001 bdb5 	b.w	d9642 <_ZdlPvj>
   d7ad8:	bd10      	pop	{r4, pc}

000d7ada <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7ada:	b510      	push	{r4, lr}
          _M_dispose();
   d7adc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7ade:	4604      	mov	r4, r0
          _M_dispose();
   d7ae0:	689b      	ldr	r3, [r3, #8]
   d7ae2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7ae4:	68a3      	ldr	r3, [r4, #8]
   d7ae6:	3b01      	subs	r3, #1
   d7ae8:	60a3      	str	r3, [r4, #8]
   d7aea:	b92b      	cbnz	r3, d7af8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d7aec:	6823      	ldr	r3, [r4, #0]
   d7aee:	4620      	mov	r0, r4
   d7af0:	68db      	ldr	r3, [r3, #12]
    }
   d7af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7af6:	4718      	bx	r3
    }
   d7af8:	bd10      	pop	{r4, pc}

000d7afa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d7afa:	b538      	push	{r3, r4, r5, lr}
   d7afc:	680b      	ldr	r3, [r1, #0]
   d7afe:	6003      	str	r3, [r0, #0]
   d7b00:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d7b02:	6843      	ldr	r3, [r0, #4]
   d7b04:	429d      	cmp	r5, r3
    class __shared_ptr
   d7b06:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d7b08:	d00c      	beq.n	d7b24 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d7b0a:	b115      	cbz	r5, d7b12 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d7b0c:	686b      	ldr	r3, [r5, #4]
   d7b0e:	3301      	adds	r3, #1
   d7b10:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d7b12:	6860      	ldr	r0, [r4, #4]
   d7b14:	b128      	cbz	r0, d7b22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d7b16:	6843      	ldr	r3, [r0, #4]
   d7b18:	3b01      	subs	r3, #1
   d7b1a:	6043      	str	r3, [r0, #4]
   d7b1c:	b90b      	cbnz	r3, d7b22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d7b1e:	f7ff ffdc 	bl	d7ada <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d7b22:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d7b24:	4620      	mov	r0, r4
   d7b26:	bd38      	pop	{r3, r4, r5, pc}

000d7b28 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7b28:	460b      	mov	r3, r1
   d7b2a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d7b2c:	2200      	movs	r2, #0
   d7b2e:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d7b30:	e9c0 2200 	strd	r2, r2, [r0]
   d7b34:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d7b36:	6083      	str	r3, [r0, #8]
    if (t) {
   d7b38:	b90b      	cbnz	r3, d7b3e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d7b3a:	4620      	mov	r0, r4
   d7b3c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d7b3e:	f7ff ffdc 	bl	d7afa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d7b42:	e7fa      	b.n	d7b3a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d7b44 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d7b44:	6883      	ldr	r3, [r0, #8]
   d7b46:	b1eb      	cbz	r3, d7b84 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d7b48:	781a      	ldrb	r2, [r3, #0]
   d7b4a:	2a03      	cmp	r2, #3
   d7b4c:	d81a      	bhi.n	d7b84 <_ZNK5spark9JSONValue4typeEv+0x40>
   d7b4e:	e8df f002 	tbb	[pc, r2]
   d7b52:	1704      	.short	0x1704
   d7b54:	1b02      	.short	0x1b02
   d7b56:	2005      	movs	r0, #5
   d7b58:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d7b5a:	6802      	ldr	r2, [r0, #0]
   d7b5c:	685b      	ldr	r3, [r3, #4]
   d7b5e:	6852      	ldr	r2, [r2, #4]
   d7b60:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d7b62:	282d      	cmp	r0, #45	; 0x2d
   d7b64:	d012      	beq.n	d7b8c <_ZNK5spark9JSONValue4typeEv+0x48>
   d7b66:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7b6a:	2b09      	cmp	r3, #9
   d7b6c:	d90e      	bls.n	d7b8c <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d7b6e:	2874      	cmp	r0, #116	; 0x74
   d7b70:	d00e      	beq.n	d7b90 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d7b72:	2866      	cmp	r0, #102	; 0x66
   d7b74:	d00c      	beq.n	d7b90 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d7b76:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d7b7a:	4258      	negs	r0, r3
   d7b7c:	4158      	adcs	r0, r3
   d7b7e:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d7b80:	2006      	movs	r0, #6
   d7b82:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d7b84:	2000      	movs	r0, #0
   d7b86:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d7b88:	2004      	movs	r0, #4
   d7b8a:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d7b8c:	2003      	movs	r0, #3
   d7b8e:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d7b90:	2002      	movs	r0, #2
    }
}
   d7b92:	4770      	bx	lr
   d7b94:	0000      	movs	r0, r0
	...

000d7b98 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   d7b98:	b510      	push	{r4, lr}
   d7b9a:	4604      	mov	r4, r0
    switch (type()) {
   d7b9c:	f7ff ffd2 	bl	d7b44 <_ZNK5spark9JSONValue4typeEv>
   d7ba0:	2802      	cmp	r0, #2
   d7ba2:	d00d      	beq.n	d7bc0 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   d7ba4:	1ec3      	subs	r3, r0, #3
   d7ba6:	b2db      	uxtb	r3, r3
   d7ba8:	2b01      	cmp	r3, #1
   d7baa:	d810      	bhi.n	d7bce <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   d7bac:	6822      	ldr	r2, [r4, #0]
   d7bae:	68a3      	ldr	r3, [r4, #8]
   d7bb0:	6850      	ldr	r0, [r2, #4]
   d7bb2:	685b      	ldr	r3, [r3, #4]
}
   d7bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   d7bb8:	2100      	movs	r1, #0
   d7bba:	4418      	add	r0, r3
   d7bbc:	f003 bcde 	b.w	db57c <strtod>
        const char* const s = d_->json + t_->start;
   d7bc0:	6822      	ldr	r2, [r4, #0]
   d7bc2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d7bc4:	6852      	ldr	r2, [r2, #4]
   d7bc6:	685b      	ldr	r3, [r3, #4]
   d7bc8:	5cd3      	ldrb	r3, [r2, r3]
   d7bca:	2b74      	cmp	r3, #116	; 0x74
   d7bcc:	d002      	beq.n	d7bd4 <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   d7bce:	ed9f 0b04 	vldr	d0, [pc, #16]	; d7be0 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   d7bd2:	bd10      	pop	{r4, pc}
        return *s == 't';
   d7bd4:	ed9f 0b04 	vldr	d0, [pc, #16]	; d7be8 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   d7bd8:	e7fb      	b.n	d7bd2 <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   d7bda:	bf00      	nop
   d7bdc:	f3af 8000 	nop.w
	...
   d7bec:	3ff00000 	.word	0x3ff00000

000d7bf0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d7bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7bf4:	b086      	sub	sp, #24
   d7bf6:	4607      	mov	r7, r0
   d7bf8:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   d7bfa:	a802      	add	r0, sp, #8
   d7bfc:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d7bfe:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d7c00:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d7c02:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d7c04:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d7c06:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d7c08:	f7ff f9b0 	bl	d6f6c <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d7c0c:	e9cd 4400 	strd	r4, r4, [sp]
   d7c10:	4623      	mov	r3, r4
   d7c12:	4642      	mov	r2, r8
   d7c14:	4639      	mov	r1, r7
   d7c16:	a802      	add	r0, sp, #8
   d7c18:	f7ff f9b0 	bl	d6f7c <jsmn_parse>
    if (n <= 0) {
   d7c1c:	1e06      	subs	r6, r0, #0
   d7c1e:	dd1e      	ble.n	d7c5e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d7c20:	4910      	ldr	r1, [pc, #64]	; (d7c64 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d7c22:	0130      	lsls	r0, r6, #4
   d7c24:	f001 fd11 	bl	d964a <_ZnajRKSt9nothrow_t>
    if (!t) {
   d7c28:	4605      	mov	r5, r0
   d7c2a:	b190      	cbz	r0, d7c52 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d7c2c:	4621      	mov	r1, r4
   d7c2e:	a802      	add	r0, sp, #8
   d7c30:	f7ff f99c 	bl	d6f6c <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d7c34:	e9cd 6400 	strd	r6, r4, [sp]
   d7c38:	462b      	mov	r3, r5
   d7c3a:	4642      	mov	r2, r8
   d7c3c:	4639      	mov	r1, r7
   d7c3e:	a802      	add	r0, sp, #8
   d7c40:	f7ff f99c 	bl	d6f7c <jsmn_parse>
   d7c44:	42a0      	cmp	r0, r4
   d7c46:	dd07      	ble.n	d7c58 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   d7c48:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   d7c4c:	2001      	movs	r0, #1
    *count = n;
   d7c4e:	f8c9 6000 	str.w	r6, [r9]
}
   d7c52:	b006      	add	sp, #24
   d7c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7c58:	4628      	mov	r0, r5
   d7c5a:	f7fc fa22 	bl	d40a2 <_ZdaPv>
      }
   d7c5e:	4620      	mov	r0, r4
   d7c60:	e7f7      	b.n	d7c52 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d7c62:	bf00      	nop
   d7c64:	000dd170 	.word	0x000dd170

000d7c68 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d7c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d7c6c:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d7c6e:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d7c70:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d7c72:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d7c74:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d7c76:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d7c78:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d7c7a:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d7c7c:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d7c80:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d7c84:	42b4      	cmp	r4, r6
   d7c86:	d063      	beq.n	d7d50 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d7c88:	4625      	mov	r5, r4
   d7c8a:	f815 2b01 	ldrb.w	r2, [r5], #1
   d7c8e:	2a5c      	cmp	r2, #92	; 0x5c
   d7c90:	d12b      	bne.n	d7cea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d7c92:	42a1      	cmp	r1, r4
   d7c94:	d007      	beq.n	d7ca6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d7c96:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d7c9a:	4618      	mov	r0, r3
   d7c9c:	465a      	mov	r2, fp
   d7c9e:	f002 fd6d 	bl	da77c <memmove>
   d7ca2:	4603      	mov	r3, r0
                str += n;
   d7ca4:	445b      	add	r3, fp
            if (s == end) {
   d7ca6:	42b5      	cmp	r5, r6
   d7ca8:	d039      	beq.n	d7d1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d7caa:	7862      	ldrb	r2, [r4, #1]
   d7cac:	2a75      	cmp	r2, #117	; 0x75
   d7cae:	d12a      	bne.n	d7d06 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d7cb0:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d7cb2:	1ab2      	subs	r2, r6, r2
   d7cb4:	2a03      	cmp	r2, #3
   d7cb6:	dd32      	ble.n	d7d1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d7cb8:	1da0      	adds	r0, r4, #6
   d7cba:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d7cbe:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d7cc2:	45ae      	cmp	lr, r5
   d7cc4:	d053      	beq.n	d7d6e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d7cc6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d7cca:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d7cce:	fa5f fb82 	uxtb.w	fp, r2
   d7cd2:	f1bb 0f09 	cmp.w	fp, #9
   d7cd6:	d905      	bls.n	d7ce4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d7cd8:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d7cdc:	2a05      	cmp	r2, #5
   d7cde:	d807      	bhi.n	d7cf0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d7ce0:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d7ce4:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d7ce8:	e7eb      	b.n	d7cc2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d7cea:	4628      	mov	r0, r5
   d7cec:	4604      	mov	r4, r0
   d7cee:	e7c9      	b.n	d7c84 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d7cf0:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d7cf4:	2a05      	cmp	r2, #5
   d7cf6:	d812      	bhi.n	d7d1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d7cf8:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d7cfc:	e7f2      	b.n	d7ce4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d7cfe:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d7d02:	4601      	mov	r1, r0
   d7d04:	e7f2      	b.n	d7cec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d7d06:	2a6e      	cmp	r2, #110	; 0x6e
   d7d08:	d01c      	beq.n	d7d44 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d7d0a:	d80e      	bhi.n	d7d2a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d7d0c:	2a62      	cmp	r2, #98	; 0x62
   d7d0e:	d013      	beq.n	d7d38 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d7d10:	d807      	bhi.n	d7d22 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d7d12:	2a2f      	cmp	r2, #47	; 0x2f
   d7d14:	d011      	beq.n	d7d3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d7d16:	2a5c      	cmp	r2, #92	; 0x5c
   d7d18:	d00f      	beq.n	d7d3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d7d1a:	2a22      	cmp	r2, #34	; 0x22
   d7d1c:	d00d      	beq.n	d7d3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d7d1e:	2000      	movs	r0, #0
   d7d20:	e023      	b.n	d7d6a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d7d22:	2a66      	cmp	r2, #102	; 0x66
   d7d24:	d1fb      	bne.n	d7d1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d7d26:	220c      	movs	r2, #12
   d7d28:	e007      	b.n	d7d3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d7d2a:	2a72      	cmp	r2, #114	; 0x72
   d7d2c:	d00d      	beq.n	d7d4a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d7d2e:	2a74      	cmp	r2, #116	; 0x74
   d7d30:	d1f5      	bne.n	d7d1e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d7d32:	f883 a000 	strb.w	sl, [r3]
                    break;
   d7d36:	e001      	b.n	d7d3c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d7d38:	2208      	movs	r2, #8
   d7d3a:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d7d3c:	1ca1      	adds	r1, r4, #2
                ++str;
   d7d3e:	3301      	adds	r3, #1
                ++s;
   d7d40:	4608      	mov	r0, r1
   d7d42:	e7d3      	b.n	d7cec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d7d44:	f04f 020a 	mov.w	r2, #10
   d7d48:	e7f7      	b.n	d7d3a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d7d4a:	f883 9000 	strb.w	r9, [r3]
                    break;
   d7d4e:	e7f5      	b.n	d7d3c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d7d50:	42a1      	cmp	r1, r4
   d7d52:	d006      	beq.n	d7d62 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d7d54:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d7d56:	4618      	mov	r0, r3
   d7d58:	4622      	mov	r2, r4
   d7d5a:	f002 fd0f 	bl	da77c <memmove>
   d7d5e:	4603      	mov	r3, r0
        str += n;
   d7d60:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d7d62:	eba3 0308 	sub.w	r3, r3, r8
   d7d66:	60bb      	str	r3, [r7, #8]
    return true;
   d7d68:	2001      	movs	r0, #1
}
   d7d6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d7d6e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d7d72:	d9c4      	bls.n	d7cfe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d7d74:	4621      	mov	r1, r4
   d7d76:	e7b9      	b.n	d7cec <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d7d78 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d7d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d7a:	4604      	mov	r4, r0
   d7d7c:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d7d7e:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d7d82:	2700      	movs	r7, #0
    while (t != end) {
   d7d84:	42b4      	cmp	r4, r6
   d7d86:	d010      	beq.n	d7daa <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d7d88:	7823      	ldrb	r3, [r4, #0]
   d7d8a:	2b03      	cmp	r3, #3
   d7d8c:	d108      	bne.n	d7da0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d7d8e:	4629      	mov	r1, r5
   d7d90:	4620      	mov	r0, r4
   d7d92:	f7ff ff69 	bl	d7c68 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d7d96:	b148      	cbz	r0, d7dac <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d7d98:	68a3      	ldr	r3, [r4, #8]
   d7d9a:	54ef      	strb	r7, [r5, r3]
        ++t;
   d7d9c:	3410      	adds	r4, #16
    while (t != end) {
   d7d9e:	e7f1      	b.n	d7d84 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d7da0:	2b00      	cmp	r3, #0
   d7da2:	d1fb      	bne.n	d7d9c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d7da4:	68a2      	ldr	r2, [r4, #8]
   d7da6:	54ab      	strb	r3, [r5, r2]
   d7da8:	e7f8      	b.n	d7d9c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d7daa:	2001      	movs	r0, #1
}
   d7dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d7db0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7db0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7db2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d7db4:	e9c0 3300 	strd	r3, r3, [r0]
   d7db8:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d7dba:	480e      	ldr	r0, [pc, #56]	; (d7df4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d7dbc:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d7dc0:	b1a9      	cbz	r1, d7dee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d7dc2:	780b      	ldrb	r3, [r1, #0]
   d7dc4:	2b03      	cmp	r3, #3
   d7dc6:	d006      	beq.n	d7dd6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d7dc8:	b98b      	cbnz	r3, d7dee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d7dca:	6813      	ldr	r3, [r2, #0]
   d7dcc:	6858      	ldr	r0, [r3, #4]
   d7dce:	684b      	ldr	r3, [r1, #4]
   d7dd0:	5cc3      	ldrb	r3, [r0, r3]
   d7dd2:	2b6e      	cmp	r3, #110	; 0x6e
   d7dd4:	d007      	beq.n	d7de6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d7dd6:	6813      	ldr	r3, [r2, #0]
   d7dd8:	684d      	ldr	r5, [r1, #4]
   d7dda:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d7ddc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d7dde:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d7de0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d7de2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d7de4:	60e3      	str	r3, [r4, #12]
   d7de6:	4611      	mov	r1, r2
   d7de8:	4620      	mov	r0, r4
   d7dea:	f7ff fe86 	bl	d7afa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d7dee:	4620      	mov	r0, r4
   d7df0:	bd38      	pop	{r3, r4, r5, pc}
   d7df2:	bf00      	nop
   d7df4:	000dcc04 	.word	0x000dcc04

000d7df8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7df8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7dfa:	2500      	movs	r5, #0
   d7dfc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d7dfe:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d7e02:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7e06:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d7e0a:	4604      	mov	r4, r0
   d7e0c:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d7e0e:	b14b      	cbz	r3, d7e24 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d7e10:	781a      	ldrb	r2, [r3, #0]
   d7e12:	2a01      	cmp	r2, #1
   d7e14:	d106      	bne.n	d7e24 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d7e16:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d7e1a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d7e1c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d7e1e:	6143      	str	r3, [r0, #20]
   d7e20:	f7ff fe6b 	bl	d7afa <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d7e24:	4620      	mov	r0, r4
   d7e26:	bd38      	pop	{r3, r4, r5, pc}

000d7e28 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d7e28:	b510      	push	{r4, lr}
    if (!n_) {
   d7e2a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d7e2c:	4604      	mov	r4, r0
    if (!n_) {
   d7e2e:	b163      	cbz	r3, d7e4a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d7e30:	6880      	ldr	r0, [r0, #8]
   d7e32:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d7e34:	3b01      	subs	r3, #1
    ++t_;
   d7e36:	3010      	adds	r0, #16
   d7e38:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d7e3a:	6120      	str	r0, [r4, #16]
    --n_;
   d7e3c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d7e3e:	b113      	cbz	r3, d7e46 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d7e40:	f7ff fe12 	bl	d7a68 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d7e44:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d7e46:	2001      	movs	r0, #1
   d7e48:	e000      	b.n	d7e4c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d7e4a:	4618      	mov	r0, r3
}
   d7e4c:	bd10      	pop	{r4, pc}
	...

000d7e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e50:	b538      	push	{r3, r4, r5, lr}
   d7e52:	2300      	movs	r3, #0
   d7e54:	4604      	mov	r4, r0
   d7e56:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e58:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e5a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e5c:	f7fc f91b 	bl	d4096 <_Znwj>
   d7e60:	b128      	cbz	r0, d7e6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7e62:	2301      	movs	r3, #1
   d7e64:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7e68:	4b02      	ldr	r3, [pc, #8]	; (d7e74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d7e6a:	6003      	str	r3, [r0, #0]
   d7e6c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e6e:	6020      	str	r0, [r4, #0]
	}
   d7e70:	4620      	mov	r0, r4
   d7e72:	bd38      	pop	{r3, r4, r5, pc}
   d7e74:	000dcfa4 	.word	0x000dcfa4

000d7e78 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d7e78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7e7a:	4604      	mov	r4, r0
   d7e7c:	b087      	sub	sp, #28
   d7e7e:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d7e80:	200c      	movs	r0, #12
   d7e82:	4927      	ldr	r1, [pc, #156]	; (d7f20 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d7e84:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d7e86:	f001 fbde 	bl	d9646 <_ZnwjRKSt9nothrow_t>
   d7e8a:	4601      	mov	r1, r0
   d7e8c:	b118      	cbz	r0, d7e96 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d7e8e:	2300      	movs	r3, #0
   d7e90:	e9c0 3300 	strd	r3, r3, [r0]
   d7e94:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d7e96:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7e98:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d7e9a:	f7ff ffd9 	bl	d7e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d7e9e:	9a02      	ldr	r2, [sp, #8]
   d7ea0:	b942      	cbnz	r2, d7eb4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d7ea2:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d7ea6:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d7ea8:	a803      	add	r0, sp, #12
   d7eaa:	f7fc fab9 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7eae:	4620      	mov	r0, r4
   d7eb0:	b007      	add	sp, #28
   d7eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d7eb4:	2300      	movs	r3, #0
   d7eb6:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d7eb8:	4629      	mov	r1, r5
   d7eba:	ab01      	add	r3, sp, #4
   d7ebc:	4630      	mov	r0, r6
   d7ebe:	f7ff fe97 	bl	d7bf0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d7ec2:	b918      	cbnz	r0, d7ecc <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d7ec4:	e9c4 0000 	strd	r0, r0, [r4]
   d7ec8:	60a0      	str	r0, [r4, #8]
}
   d7eca:	e7ed      	b.n	d7ea8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d7ecc:	4914      	ldr	r1, [pc, #80]	; (d7f20 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7ece:	9f02      	ldr	r7, [sp, #8]
   d7ed0:	1c68      	adds	r0, r5, #1
   d7ed2:	f001 fbba 	bl	d964a <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d7ed6:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d7ed8:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d7eda:	6858      	ldr	r0, [r3, #4]
   d7edc:	2800      	cmp	r0, #0
   d7ede:	d0f1      	beq.n	d7ec4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d7ee0:	462a      	mov	r2, r5
   d7ee2:	4631      	mov	r1, r6
   d7ee4:	f002 fc3c 	bl	da760 <memcpy>
   d7ee8:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d7eea:	9901      	ldr	r1, [sp, #4]
   d7eec:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d7eee:	2201      	movs	r2, #1
   d7ef0:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d7ef2:	685a      	ldr	r2, [r3, #4]
   d7ef4:	f7ff ff40 	bl	d7d78 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d7ef8:	2800      	cmp	r0, #0
   d7efa:	d0e3      	beq.n	d7ec4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d7efc:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d7efe:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7f00:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d7f02:	9b03      	ldr	r3, [sp, #12]
   d7f04:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d7f06:	b113      	cbz	r3, d7f0e <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d7f08:	685a      	ldr	r2, [r3, #4]
   d7f0a:	3201      	adds	r2, #1
   d7f0c:	605a      	str	r2, [r3, #4]
   d7f0e:	aa04      	add	r2, sp, #16
   d7f10:	4620      	mov	r0, r4
   d7f12:	f7ff fe09 	bl	d7b28 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7f16:	a805      	add	r0, sp, #20
   d7f18:	f7fc fa82 	bl	d4420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f1c:	e7c4      	b.n	d7ea8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d7f1e:	bf00      	nop
   d7f20:	000dd170 	.word	0x000dd170

000d7f24 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7f24:	4b01      	ldr	r3, [pc, #4]	; (d7f2c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7f26:	4a02      	ldr	r2, [pc, #8]	; (d7f30 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7f28:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7f2a:	4770      	bx	lr
   d7f2c:	2003e658 	.word	0x2003e658
   d7f30:	000dcfb8 	.word	0x000dcfb8

000d7f34 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7f34:	2300      	movs	r3, #0
   d7f36:	6840      	ldr	r0, [r0, #4]
   d7f38:	461a      	mov	r2, r3
   d7f3a:	f7ff b89b 	b.w	d7074 <network_connect>

000d7f3e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7f3e:	6840      	ldr	r0, [r0, #4]
   d7f40:	2200      	movs	r2, #0
   d7f42:	2102      	movs	r1, #2
   d7f44:	f7ff b8a6 	b.w	d7094 <network_disconnect>

000d7f48 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7f48:	2200      	movs	r2, #0
   d7f4a:	6840      	ldr	r0, [r0, #4]
   d7f4c:	4611      	mov	r1, r2
   d7f4e:	f7ff b899 	b.w	d7084 <network_connecting>

000d7f52 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7f52:	2200      	movs	r2, #0
   d7f54:	6840      	ldr	r0, [r0, #4]
   d7f56:	4611      	mov	r1, r2
   d7f58:	f7ff b8a4 	b.w	d70a4 <network_ready>

000d7f5c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7f5c:	2300      	movs	r3, #0
   d7f5e:	6840      	ldr	r0, [r0, #4]
   d7f60:	461a      	mov	r2, r3
   d7f62:	4619      	mov	r1, r3
   d7f64:	f7ff b8a6 	b.w	d70b4 <network_on>

000d7f68 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7f68:	2300      	movs	r3, #0
   d7f6a:	6840      	ldr	r0, [r0, #4]
   d7f6c:	461a      	mov	r2, r3
   d7f6e:	4619      	mov	r1, r3
   d7f70:	f7ff b8a8 	b.w	d70c4 <network_off>

000d7f74 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7f74:	6840      	ldr	r0, [r0, #4]
   d7f76:	2100      	movs	r1, #0
   d7f78:	f7ff b8cc 	b.w	d7114 <network_is_on>

000d7f7c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7f7c:	6840      	ldr	r0, [r0, #4]
   d7f7e:	2100      	movs	r1, #0
   d7f80:	f7ff b8d0 	b.w	d7124 <network_is_off>

000d7f84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7f84:	6840      	ldr	r0, [r0, #4]
   d7f86:	2200      	movs	r2, #0
   d7f88:	f081 0101 	eor.w	r1, r1, #1
   d7f8c:	f7ff b8a2 	b.w	d70d4 <network_listen>

000d7f90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7f90:	6840      	ldr	r0, [r0, #4]
   d7f92:	2200      	movs	r2, #0
   d7f94:	f7ff b8ae 	b.w	d70f4 <network_set_listen_timeout>

000d7f98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7f98:	2200      	movs	r2, #0
   d7f9a:	6840      	ldr	r0, [r0, #4]
   d7f9c:	4611      	mov	r1, r2
   d7f9e:	f7ff b8b1 	b.w	d7104 <network_get_listen_timeout>

000d7fa2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7fa2:	2200      	movs	r2, #0
   d7fa4:	6840      	ldr	r0, [r0, #4]
   d7fa6:	4611      	mov	r1, r2
   d7fa8:	f7ff b89c 	b.w	d70e4 <network_listening>

000d7fac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7fb0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7fb2:	b095      	sub	sp, #84	; 0x54
   d7fb4:	4616      	mov	r6, r2
   d7fb6:	460d      	mov	r5, r1
   d7fb8:	4607      	mov	r7, r0
    IPAddress addr;
   d7fba:	f7ff fcf7 	bl	d79ac <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7fbe:	4621      	mov	r1, r4
   d7fc0:	2218      	movs	r2, #24
   d7fc2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7fc4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7fc6:	f002 fbf3 	bl	da7b0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7fca:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7fcc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7fd0:	4621      	mov	r1, r4
   d7fd2:	466b      	mov	r3, sp
   d7fd4:	aa0c      	add	r2, sp, #48	; 0x30
   d7fd6:	4630      	mov	r0, r6
   d7fd8:	f7fe fee8 	bl	d6dac <netdb_getaddrinfo>
    if (!r) {
   d7fdc:	4604      	mov	r4, r0
   d7fde:	2800      	cmp	r0, #0
   d7fe0:	d14c      	bne.n	d807c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fe2:	4602      	mov	r2, r0
   d7fe4:	2101      	movs	r1, #1
   d7fe6:	6868      	ldr	r0, [r5, #4]
   d7fe8:	f7ff f85c 	bl	d70a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ff0:	4622      	mov	r2, r4
   d7ff2:	6868      	ldr	r0, [r5, #4]
   d7ff4:	f7ff f856 	bl	d70a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ff8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ffa:	4681      	mov	r9, r0
        bool ok = false;
   d7ffc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ffe:	2e00      	cmp	r6, #0
   d8000:	d03c      	beq.n	d807c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8002:	2900      	cmp	r1, #0
   d8004:	d13a      	bne.n	d807c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8006:	6873      	ldr	r3, [r6, #4]
   d8008:	2b02      	cmp	r3, #2
   d800a:	d003      	beq.n	d8014 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d800c:	2b0a      	cmp	r3, #10
   d800e:	d011      	beq.n	d8034 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8010:	69f6      	ldr	r6, [r6, #28]
   d8012:	e7f4      	b.n	d7ffe <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8014:	f1b8 0f00 	cmp.w	r8, #0
   d8018:	d00a      	beq.n	d8030 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d801a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d801c:	a806      	add	r0, sp, #24
   d801e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8020:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d8022:	f7ff fd13 	bl	d7a4c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8028:	1d3c      	adds	r4, r7, #4
   d802a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d802c:	682b      	ldr	r3, [r5, #0]
   d802e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d8030:	4641      	mov	r1, r8
   d8032:	e7ed      	b.n	d8010 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8034:	f1b9 0f00 	cmp.w	r9, #0
   d8038:	d101      	bne.n	d803e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d803a:	4649      	mov	r1, r9
   d803c:	e7e8      	b.n	d8010 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d803e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8040:	2210      	movs	r2, #16
   d8042:	a801      	add	r0, sp, #4
   d8044:	f002 fbb4 	bl	da7b0 <memset>
                    a.v = 6;
   d8048:	2306      	movs	r3, #6
   d804a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d804e:	ad01      	add	r5, sp, #4
   d8050:	f104 0308 	add.w	r3, r4, #8
   d8054:	3418      	adds	r4, #24
   d8056:	6818      	ldr	r0, [r3, #0]
   d8058:	6859      	ldr	r1, [r3, #4]
   d805a:	462a      	mov	r2, r5
   d805c:	c203      	stmia	r2!, {r0, r1}
   d805e:	3308      	adds	r3, #8
   d8060:	42a3      	cmp	r3, r4
   d8062:	4615      	mov	r5, r2
   d8064:	d1f7      	bne.n	d8056 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d8066:	a901      	add	r1, sp, #4
   d8068:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d806a:	ad07      	add	r5, sp, #28
   d806c:	f7ff fcac 	bl	d79c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8072:	1d3c      	adds	r4, r7, #4
   d8074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8076:	682b      	ldr	r3, [r5, #0]
   d8078:	7023      	strb	r3, [r4, #0]
   d807a:	e7de      	b.n	d803a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d807c:	9800      	ldr	r0, [sp, #0]
   d807e:	f7fe fe8d 	bl	d6d9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8082:	4638      	mov	r0, r7
   d8084:	b015      	add	sp, #84	; 0x54
   d8086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d808c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d808c:	4b02      	ldr	r3, [pc, #8]	; (d8098 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d808e:	4a03      	ldr	r2, [pc, #12]	; (d809c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8090:	601a      	str	r2, [r3, #0]
   d8092:	2200      	movs	r2, #0
   d8094:	605a      	str	r2, [r3, #4]

} // spark
   d8096:	4770      	bx	lr
   d8098:	2003e65c 	.word	0x2003e65c
   d809c:	000dcfc4 	.word	0x000dcfc4

000d80a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d80a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80a2:	4606      	mov	r6, r0
   d80a4:	460d      	mov	r5, r1
  size_t n = 0;
   d80a6:	188f      	adds	r7, r1, r2
   d80a8:	2400      	movs	r4, #0
  while (size--) {
   d80aa:	42bd      	cmp	r5, r7
   d80ac:	d00c      	beq.n	d80c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d80ae:	6833      	ldr	r3, [r6, #0]
   d80b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d80b4:	689b      	ldr	r3, [r3, #8]
   d80b6:	4630      	mov	r0, r6
   d80b8:	4798      	blx	r3
     if (chunk>=0)
   d80ba:	1e03      	subs	r3, r0, #0
   d80bc:	db01      	blt.n	d80c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d80be:	441c      	add	r4, r3
  while (size--) {
   d80c0:	e7f3      	b.n	d80aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d80c2:	2c00      	cmp	r4, #0
   d80c4:	bf08      	it	eq
   d80c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d80c8:	4620      	mov	r0, r4
   d80ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d80cc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d80cc:	b513      	push	{r0, r1, r4, lr}
   d80ce:	4604      	mov	r4, r0
    }
   d80d0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d80d2:	b159      	cbz	r1, d80ec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d80d4:	9101      	str	r1, [sp, #4]
   d80d6:	f002 fbe4 	bl	da8a2 <strlen>
   d80da:	6823      	ldr	r3, [r4, #0]
   d80dc:	9901      	ldr	r1, [sp, #4]
   d80de:	68db      	ldr	r3, [r3, #12]
   d80e0:	4602      	mov	r2, r0
   d80e2:	4620      	mov	r0, r4
    }
   d80e4:	b002      	add	sp, #8
   d80e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d80ea:	4718      	bx	r3
    }
   d80ec:	b002      	add	sp, #8
   d80ee:	bd10      	pop	{r4, pc}

000d80f0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d80f0:	b508      	push	{r3, lr}
  return write(str);
   d80f2:	f7ff ffeb 	bl	d80cc <_ZN5Print5writeEPKc>
}
   d80f6:	bd08      	pop	{r3, pc}

000d80f8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d80f8:	6803      	ldr	r3, [r0, #0]
   d80fa:	689b      	ldr	r3, [r3, #8]
   d80fc:	4718      	bx	r3

000d80fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d80fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8100:	210d      	movs	r1, #13
{
   d8102:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8104:	f7ff fff8 	bl	d80f8 <_ZN5Print5printEc>
  n += print('\n');
   d8108:	210a      	movs	r1, #10
  size_t n = print('\r');
   d810a:	4604      	mov	r4, r0
  n += print('\n');
   d810c:	4628      	mov	r0, r5
   d810e:	f7ff fff3 	bl	d80f8 <_ZN5Print5printEc>
  return n;
}
   d8112:	4420      	add	r0, r4
   d8114:	bd38      	pop	{r3, r4, r5, pc}

000d8116 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8116:	b538      	push	{r3, r4, r5, lr}
   d8118:	4605      	mov	r5, r0
  return write(str);
   d811a:	f7ff ffd7 	bl	d80cc <_ZN5Print5writeEPKc>
   d811e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8120:	4628      	mov	r0, r5
   d8122:	f7ff ffec 	bl	d80fe <_ZN5Print7printlnEv>
  return n;
}
   d8126:	4420      	add	r0, r4
   d8128:	bd38      	pop	{r3, r4, r5, pc}

000d812a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d812a:	b530      	push	{r4, r5, lr}
   d812c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d812e:	2300      	movs	r3, #0
   d8130:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8134:	2a01      	cmp	r2, #1
   d8136:	bf98      	it	ls
   d8138:	220a      	movls	r2, #10
   d813a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d813c:	460d      	mov	r5, r1
   d813e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8142:	fb01 5312 	mls	r3, r1, r2, r5
   d8146:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d814a:	2b09      	cmp	r3, #9
   d814c:	bf94      	ite	ls
   d814e:	3330      	addls	r3, #48	; 0x30
   d8150:	3337      	addhi	r3, #55	; 0x37
   d8152:	b2db      	uxtb	r3, r3
  } while(n);
   d8154:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8156:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d815a:	d9ef      	bls.n	d813c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d815c:	4621      	mov	r1, r4
   d815e:	f7ff ffb5 	bl	d80cc <_ZN5Print5writeEPKc>
}
   d8162:	b00b      	add	sp, #44	; 0x2c
   d8164:	bd30      	pop	{r4, r5, pc}
	...

000d8168 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d8168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d816c:	ec55 4b10 	vmov	r4, r5, d0
   d8170:	4606      	mov	r6, r0
   d8172:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d8174:	ee10 2a10 	vmov	r2, s0
   d8178:	ee10 0a10 	vmov	r0, s0
   d817c:	462b      	mov	r3, r5
   d817e:	4629      	mov	r1, r5
   d8180:	f002 f88c 	bl	da29c <__aeabi_dcmpun>
   d8184:	b140      	cbz	r0, d8198 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d8186:	4953      	ldr	r1, [pc, #332]	; (d82d4 <_ZN5Print10printFloatEdh+0x16c>)
   d8188:	4630      	mov	r0, r6
   d818a:	f7ff ff9f 	bl	d80cc <_ZN5Print5writeEPKc>
   d818e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d8190:	4650      	mov	r0, sl
   d8192:	b003      	add	sp, #12
   d8194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d8198:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d819c:	4b4e      	ldr	r3, [pc, #312]	; (d82d8 <_ZN5Print10printFloatEdh+0x170>)
   d819e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d81a2:	4620      	mov	r0, r4
   d81a4:	4649      	mov	r1, r9
   d81a6:	f002 f879 	bl	da29c <__aeabi_dcmpun>
   d81aa:	b948      	cbnz	r0, d81c0 <_ZN5Print10printFloatEdh+0x58>
   d81ac:	4b4a      	ldr	r3, [pc, #296]	; (d82d8 <_ZN5Print10printFloatEdh+0x170>)
   d81ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d81b2:	4620      	mov	r0, r4
   d81b4:	4649      	mov	r1, r9
   d81b6:	f002 f853 	bl	da260 <__aeabi_dcmple>
   d81ba:	b908      	cbnz	r0, d81c0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d81bc:	4947      	ldr	r1, [pc, #284]	; (d82dc <_ZN5Print10printFloatEdh+0x174>)
   d81be:	e7e3      	b.n	d8188 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d81c0:	4b47      	ldr	r3, [pc, #284]	; (d82e0 <_ZN5Print10printFloatEdh+0x178>)
   d81c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d81c6:	4620      	mov	r0, r4
   d81c8:	4629      	mov	r1, r5
   d81ca:	f002 f85d 	bl	da288 <__aeabi_dcmpgt>
   d81ce:	b108      	cbz	r0, d81d4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d81d0:	4944      	ldr	r1, [pc, #272]	; (d82e4 <_ZN5Print10printFloatEdh+0x17c>)
   d81d2:	e7d9      	b.n	d8188 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d81d4:	4b44      	ldr	r3, [pc, #272]	; (d82e8 <_ZN5Print10printFloatEdh+0x180>)
   d81d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d81da:	4620      	mov	r0, r4
   d81dc:	4629      	mov	r1, r5
   d81de:	f002 f835 	bl	da24c <__aeabi_dcmplt>
   d81e2:	2800      	cmp	r0, #0
   d81e4:	d1f4      	bne.n	d81d0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d81e6:	2200      	movs	r2, #0
   d81e8:	2300      	movs	r3, #0
   d81ea:	4620      	mov	r0, r4
   d81ec:	4629      	mov	r1, r5
   d81ee:	f002 f82d 	bl	da24c <__aeabi_dcmplt>
   d81f2:	b1d0      	cbz	r0, d822a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d81f4:	212d      	movs	r1, #45	; 0x2d
   d81f6:	4630      	mov	r0, r6
   d81f8:	f7ff ff7e 	bl	d80f8 <_ZN5Print5printEc>
     number = -number;
   d81fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8200:	4682      	mov	sl, r0
     number = -number;
   d8202:	461d      	mov	r5, r3
  double rounding = 0.5;
   d8204:	4939      	ldr	r1, [pc, #228]	; (d82ec <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d8206:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d82f4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d820a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d820e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8210:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d8214:	fa5f f38b 	uxtb.w	r3, fp
   d8218:	429f      	cmp	r7, r3
   d821a:	d908      	bls.n	d822e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d821c:	4642      	mov	r2, r8
   d821e:	464b      	mov	r3, r9
   d8220:	f001 fecc 	bl	d9fbc <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d8224:	f10b 0b01 	add.w	fp, fp, #1
   d8228:	e7f4      	b.n	d8214 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d822a:	4682      	mov	sl, r0
   d822c:	e7ea      	b.n	d8204 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d822e:	4622      	mov	r2, r4
   d8230:	462b      	mov	r3, r5
   d8232:	f001 fbe3 	bl	d99fc <__adddf3>
   d8236:	460d      	mov	r5, r1
   d8238:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d823a:	f002 f86d 	bl	da318 <__aeabi_d2uiz>
   d823e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d8240:	f001 fd18 	bl	d9c74 <__aeabi_ui2d>
   d8244:	4602      	mov	r2, r0
   d8246:	460b      	mov	r3, r1
   d8248:	4620      	mov	r0, r4
   d824a:	4629      	mov	r1, r5
   d824c:	f001 fbd4 	bl	d99f8 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d8250:	220a      	movs	r2, #10
   d8252:	4604      	mov	r4, r0
   d8254:	460d      	mov	r5, r1
   d8256:	4630      	mov	r0, r6
   d8258:	4641      	mov	r1, r8
   d825a:	f7ff ff66 	bl	d812a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d825e:	4482      	add	sl, r0
  if (digits > 0) {
   d8260:	b127      	cbz	r7, d826c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d8262:	4923      	ldr	r1, [pc, #140]	; (d82f0 <_ZN5Print10printFloatEdh+0x188>)
   d8264:	4630      	mov	r0, r6
   d8266:	f7ff ff31 	bl	d80cc <_ZN5Print5writeEPKc>
    n += print(".");
   d826a:	4482      	add	sl, r0
    remainder *= 10.0;
   d826c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d82f4 <_ZN5Print10printFloatEdh+0x18c>
   d8270:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d8274:	3f01      	subs	r7, #1
   d8276:	b2ff      	uxtb	r7, r7
   d8278:	2fff      	cmp	r7, #255	; 0xff
   d827a:	d089      	beq.n	d8190 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d827c:	4642      	mov	r2, r8
   d827e:	464b      	mov	r3, r9
   d8280:	4620      	mov	r0, r4
   d8282:	4629      	mov	r1, r5
   d8284:	f001 fd70 	bl	d9d68 <__aeabi_dmul>
   d8288:	4604      	mov	r4, r0
   d828a:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d828c:	f002 f81c 	bl	da2c8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d8290:	f1b0 0b00 	subs.w	fp, r0, #0
   d8294:	da1a      	bge.n	d82cc <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d8296:	212d      	movs	r1, #45	; 0x2d
   d8298:	4630      	mov	r0, r6
   d829a:	f7ff ff2d 	bl	d80f8 <_ZN5Print5printEc>
            val = -n;
   d829e:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d82a2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d82a4:	220a      	movs	r2, #10
   d82a6:	4630      	mov	r0, r6
   d82a8:	9301      	str	r3, [sp, #4]
   d82aa:	f7ff ff3e 	bl	d812a <_ZN5Print11printNumberEmh>
   d82ae:	9b01      	ldr	r3, [sp, #4]
   d82b0:	4418      	add	r0, r3
    n += print(toPrint);
   d82b2:	4482      	add	sl, r0
    remainder -= toPrint;
   d82b4:	4658      	mov	r0, fp
   d82b6:	f001 fced 	bl	d9c94 <__aeabi_i2d>
   d82ba:	4602      	mov	r2, r0
   d82bc:	460b      	mov	r3, r1
   d82be:	4620      	mov	r0, r4
   d82c0:	4629      	mov	r1, r5
   d82c2:	f001 fb99 	bl	d99f8 <__aeabi_dsub>
   d82c6:	4604      	mov	r4, r0
   d82c8:	460d      	mov	r5, r1
  while (digits-- > 0)
   d82ca:	e7d3      	b.n	d8274 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d82cc:	4659      	mov	r1, fp
        size_t t = 0;
   d82ce:	2300      	movs	r3, #0
   d82d0:	e7e8      	b.n	d82a4 <_ZN5Print10printFloatEdh+0x13c>
   d82d2:	bf00      	nop
   d82d4:	000dcff8 	.word	0x000dcff8
   d82d8:	7fefffff 	.word	0x7fefffff
   d82dc:	000dcffc 	.word	0x000dcffc
   d82e0:	41efffff 	.word	0x41efffff
   d82e4:	000dd000 	.word	0x000dd000
   d82e8:	c1efffff 	.word	0xc1efffff
   d82ec:	3fe00000 	.word	0x3fe00000
   d82f0:	000dcb7f 	.word	0x000dcb7f
   d82f4:	40240000 	.word	0x40240000

000d82f8 <_ZN5Print7printlnEdi>:
{
   d82f8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d82fa:	b2c9      	uxtb	r1, r1
{
   d82fc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d82fe:	f7ff ff33 	bl	d8168 <_ZN5Print10printFloatEdh>
   d8302:	4604      	mov	r4, r0
  n += println();
   d8304:	4628      	mov	r0, r5
   d8306:	f7ff fefa 	bl	d80fe <_ZN5Print7printlnEv>
}
   d830a:	4420      	add	r0, r4
   d830c:	bd38      	pop	{r3, r4, r5, pc}

000d830e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d830e:	b510      	push	{r4, lr}
   d8310:	4604      	mov	r4, r0
   d8312:	f7fd f833 	bl	d537c <_ZNSt14_Function_baseD1Ev>
   d8316:	4620      	mov	r0, r4
   d8318:	bd10      	pop	{r4, pc}
	...

000d831c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d831c:	4803      	ldr	r0, [pc, #12]	; (d832c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d831e:	4a04      	ldr	r2, [pc, #16]	; (d8330 <_GLOBAL__sub_I_RGB+0x14>)
   d8320:	4904      	ldr	r1, [pc, #16]	; (d8334 <_GLOBAL__sub_I_RGB+0x18>)
   d8322:	2300      	movs	r3, #0
   d8324:	6083      	str	r3, [r0, #8]
   d8326:	f001 b987 	b.w	d9638 <__aeabi_atexit>
   d832a:	bf00      	nop
   d832c:	2003e664 	.word	0x2003e664
   d8330:	2003e440 	.word	0x2003e440
   d8334:	000d830f 	.word	0x000d830f

000d8338 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8338:	b510      	push	{r4, lr}
   d833a:	4604      	mov	r4, r0
   d833c:	4608      	mov	r0, r1
{
    _spi = spi;
   d833e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d8340:	f7fe fd84 	bl	d6e4c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8344:	2300      	movs	r3, #0
   d8346:	6063      	str	r3, [r4, #4]
}
   d8348:	4620      	mov	r0, r4
   d834a:	bd10      	pop	{r4, pc}

000d834c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8350:	ec57 6b10 	vmov	r6, r7, d0
   d8354:	4680      	mov	r8, r0
   d8356:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d8358:	ee10 0a10 	vmov	r0, s0
   d835c:	2200      	movs	r2, #0
   d835e:	2300      	movs	r3, #0
   d8360:	4639      	mov	r1, r7
   d8362:	f001 ff73 	bl	da24c <__aeabi_dcmplt>
   d8366:	b128      	cbz	r0, d8374 <_Z4dtoadhPc+0x28>
        val = -val;
   d8368:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d836c:	461f      	mov	r7, r3
        *sout++ = '-';
   d836e:	232d      	movs	r3, #45	; 0x2d
   d8370:	f804 3b01 	strb.w	r3, [r4], #1
   d8374:	2300      	movs	r3, #0
    }
    long scale = 1;
   d8376:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d837a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d837c:	b2d9      	uxtb	r1, r3
   d837e:	4588      	cmp	r8, r1
   d8380:	d903      	bls.n	d838a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d8382:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d8386:	3301      	adds	r3, #1
   d8388:	e7f8      	b.n	d837c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d838a:	4648      	mov	r0, r9
   d838c:	f001 fc82 	bl	d9c94 <__aeabi_i2d>
   d8390:	4632      	mov	r2, r6
   d8392:	463b      	mov	r3, r7
   d8394:	f001 fce8 	bl	d9d68 <__aeabi_dmul>
   d8398:	4606      	mov	r6, r0
   d839a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d839c:	f002 f844 	bl	da428 <__aeabi_d2ulz>
   d83a0:	4605      	mov	r5, r0
   d83a2:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d83a4:	f001 fcaa 	bl	d9cfc <__aeabi_ul2d>
   d83a8:	4602      	mov	r2, r0
   d83aa:	460b      	mov	r3, r1
   d83ac:	4630      	mov	r0, r6
   d83ae:	4639      	mov	r1, r7
   d83b0:	f001 fb22 	bl	d99f8 <__aeabi_dsub>
   d83b4:	4b13      	ldr	r3, [pc, #76]	; (d8404 <_Z4dtoadhPc+0xb8>)
   d83b6:	2200      	movs	r2, #0
   d83b8:	f001 ff5c 	bl	da274 <__aeabi_dcmpge>
   d83bc:	b110      	cbz	r0, d83c4 <_Z4dtoadhPc+0x78>
        fixed++;
   d83be:	3501      	adds	r5, #1
   d83c0:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d83c4:	464a      	mov	r2, r9
   d83c6:	4628      	mov	r0, r5
   d83c8:	17d3      	asrs	r3, r2, #31
   d83ca:	4651      	mov	r1, sl
   d83cc:	f002 f814 	bl	da3f8 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d83d0:	2301      	movs	r3, #1
   d83d2:	4615      	mov	r5, r2
   d83d4:	4621      	mov	r1, r4
   d83d6:	220a      	movs	r2, #10
   d83d8:	f000 ffc9 	bl	d936e <ultoa>
    if (prec) {
   d83dc:	f1b8 0f00 	cmp.w	r8, #0
   d83e0:	d00d      	beq.n	d83fe <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d83e2:	4620      	mov	r0, r4
   d83e4:	f002 fa5d 	bl	da8a2 <strlen>
        *sout++ = '.';
   d83e8:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d83ea:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d83ec:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d83ee:	220a      	movs	r2, #10
   d83f0:	4643      	mov	r3, r8
   d83f2:	4628      	mov	r0, r5
   d83f4:	3101      	adds	r1, #1
    }
}
   d83f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d83fa:	f000 bfb8 	b.w	d936e <ultoa>
}
   d83fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8402:	bf00      	nop
   d8404:	3fe00000 	.word	0x3fe00000

000d8408 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8408:	b510      	push	{r4, lr}
   d840a:	4604      	mov	r4, r0
{
	free(buffer);
   d840c:	6800      	ldr	r0, [r0, #0]
   d840e:	f7fe fe99 	bl	d7144 <free>
}
   d8412:	4620      	mov	r0, r4
   d8414:	bd10      	pop	{r4, pc}

000d8416 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8416:	b510      	push	{r4, lr}
   d8418:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d841a:	6800      	ldr	r0, [r0, #0]
   d841c:	b108      	cbz	r0, d8422 <_ZN6String10invalidateEv+0xc>
   d841e:	f7fe fe91 	bl	d7144 <free>
	buffer = NULL;
   d8422:	2300      	movs	r3, #0
	capacity = len = 0;
   d8424:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8428:	6023      	str	r3, [r4, #0]
}
   d842a:	bd10      	pop	{r4, pc}

000d842c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d842c:	b538      	push	{r3, r4, r5, lr}
   d842e:	4604      	mov	r4, r0
   d8430:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8432:	6800      	ldr	r0, [r0, #0]
   d8434:	3101      	adds	r1, #1
   d8436:	f7fe fe8d 	bl	d7154 <realloc>
	if (newbuffer) {
   d843a:	b110      	cbz	r0, d8442 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d843c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d8440:	2001      	movs	r0, #1
	}
	return 0;
}
   d8442:	bd38      	pop	{r3, r4, r5, pc}

000d8444 <_ZN6String7reserveEj>:
{
   d8444:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8446:	6803      	ldr	r3, [r0, #0]
{
   d8448:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d844a:	b123      	cbz	r3, d8456 <_ZN6String7reserveEj+0x12>
   d844c:	6843      	ldr	r3, [r0, #4]
   d844e:	428b      	cmp	r3, r1
   d8450:	d301      	bcc.n	d8456 <_ZN6String7reserveEj+0x12>
   d8452:	2001      	movs	r0, #1
}
   d8454:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8456:	4620      	mov	r0, r4
   d8458:	f7ff ffe8 	bl	d842c <_ZN6String12changeBufferEj>
   d845c:	2800      	cmp	r0, #0
   d845e:	d0f9      	beq.n	d8454 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d8460:	68a3      	ldr	r3, [r4, #8]
   d8462:	2b00      	cmp	r3, #0
   d8464:	d1f5      	bne.n	d8452 <_ZN6String7reserveEj+0xe>
   d8466:	6822      	ldr	r2, [r4, #0]
   d8468:	7013      	strb	r3, [r2, #0]
   d846a:	e7f2      	b.n	d8452 <_ZN6String7reserveEj+0xe>

000d846c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d846c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d846e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d8470:	4611      	mov	r1, r2
   d8472:	9201      	str	r2, [sp, #4]
{
   d8474:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8476:	f7ff ffe5 	bl	d8444 <_ZN6String7reserveEj>
   d847a:	9a01      	ldr	r2, [sp, #4]
   d847c:	b928      	cbnz	r0, d848a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d847e:	4620      	mov	r0, r4
   d8480:	f7ff ffc9 	bl	d8416 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8484:	4620      	mov	r0, r4
   d8486:	b003      	add	sp, #12
   d8488:	bd30      	pop	{r4, r5, pc}
	len = length;
   d848a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d848c:	4629      	mov	r1, r5
   d848e:	6820      	ldr	r0, [r4, #0]
   d8490:	f002 f966 	bl	da760 <memcpy>
	buffer[len] = 0;
   d8494:	6822      	ldr	r2, [r4, #0]
   d8496:	68a3      	ldr	r3, [r4, #8]
   d8498:	2100      	movs	r1, #0
   d849a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d849c:	e7f2      	b.n	d8484 <_ZN6String4copyEPKcj+0x18>

000d849e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d849e:	4288      	cmp	r0, r1
{
   d84a0:	b510      	push	{r4, lr}
   d84a2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d84a4:	d005      	beq.n	d84b2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d84a6:	680b      	ldr	r3, [r1, #0]
   d84a8:	b12b      	cbz	r3, d84b6 <_ZN6StringaSERKS_+0x18>
   d84aa:	688a      	ldr	r2, [r1, #8]
   d84ac:	4619      	mov	r1, r3
   d84ae:	f7ff ffdd 	bl	d846c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d84b2:	4620      	mov	r0, r4
   d84b4:	bd10      	pop	{r4, pc}
	else invalidate();
   d84b6:	f7ff ffae 	bl	d8416 <_ZN6String10invalidateEv>
   d84ba:	e7fa      	b.n	d84b2 <_ZN6StringaSERKS_+0x14>

000d84bc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d84bc:	b510      	push	{r4, lr}
	buffer = NULL;
   d84be:	2300      	movs	r3, #0
String::String(const String &value)
   d84c0:	4604      	mov	r4, r0
	capacity = 0;
   d84c2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d84c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d84c8:	7303      	strb	r3, [r0, #12]
	*this = value;
   d84ca:	f7ff ffe8 	bl	d849e <_ZN6StringaSERKS_>
}
   d84ce:	4620      	mov	r0, r4
   d84d0:	bd10      	pop	{r4, pc}

000d84d2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d84d2:	b513      	push	{r0, r1, r4, lr}
   d84d4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d84d6:	b159      	cbz	r1, d84f0 <_ZN6StringaSEPKc+0x1e>
   d84d8:	4608      	mov	r0, r1
   d84da:	9101      	str	r1, [sp, #4]
   d84dc:	f002 f9e1 	bl	da8a2 <strlen>
   d84e0:	9901      	ldr	r1, [sp, #4]
   d84e2:	4602      	mov	r2, r0
   d84e4:	4620      	mov	r0, r4
   d84e6:	f7ff ffc1 	bl	d846c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d84ea:	4620      	mov	r0, r4
   d84ec:	b002      	add	sp, #8
   d84ee:	bd10      	pop	{r4, pc}
	else invalidate();
   d84f0:	f7ff ff91 	bl	d8416 <_ZN6String10invalidateEv>
   d84f4:	e7f9      	b.n	d84ea <_ZN6StringaSEPKc+0x18>

000d84f6 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d84f6:	b530      	push	{r4, r5, lr}
   d84f8:	4604      	mov	r4, r0
	buffer = NULL;
   d84fa:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d84fc:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d84fe:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d8502:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d8504:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d8506:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d850a:	b2cd      	uxtb	r5, r1
   d850c:	f001 fbd4 	bl	d9cb8 <__aeabi_f2d>
   d8510:	ec41 0b10 	vmov	d0, r0, r1
   d8514:	a901      	add	r1, sp, #4
   d8516:	4628      	mov	r0, r5
   d8518:	f7ff ff18 	bl	d834c <_Z4dtoadhPc>
        *this = buf;
   d851c:	a901      	add	r1, sp, #4
   d851e:	4620      	mov	r0, r4
   d8520:	f7ff ffd7 	bl	d84d2 <_ZN6StringaSEPKc>
}
   d8524:	4620      	mov	r0, r4
   d8526:	b00b      	add	sp, #44	; 0x2c
   d8528:	bd30      	pop	{r4, r5, pc}

000d852a <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d852a:	b510      	push	{r4, lr}
   d852c:	4604      	mov	r4, r0
   d852e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d8530:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d8532:	4608      	mov	r0, r1
	capacity = 0;
   d8534:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d8538:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d853a:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d853c:	a901      	add	r1, sp, #4
   d853e:	b2c0      	uxtb	r0, r0
   d8540:	f7ff ff04 	bl	d834c <_Z4dtoadhPc>
        *this = buf;
   d8544:	a901      	add	r1, sp, #4
   d8546:	4620      	mov	r0, r4
   d8548:	f7ff ffc3 	bl	d84d2 <_ZN6StringaSEPKc>
}
   d854c:	4620      	mov	r0, r4
   d854e:	b00a      	add	sp, #40	; 0x28
   d8550:	bd10      	pop	{r4, pc}

000d8552 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d8552:	b570      	push	{r4, r5, r6, lr}
   d8554:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d8556:	460e      	mov	r6, r1
   d8558:	b909      	cbnz	r1, d855e <_ZN6String6concatEPKcj+0xc>
   d855a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d855c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d855e:	b16a      	cbz	r2, d857c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d8560:	6884      	ldr	r4, [r0, #8]
   d8562:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d8564:	4621      	mov	r1, r4
   d8566:	f7ff ff6d 	bl	d8444 <_ZN6String7reserveEj>
   d856a:	2800      	cmp	r0, #0
   d856c:	d0f5      	beq.n	d855a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d856e:	6828      	ldr	r0, [r5, #0]
   d8570:	68ab      	ldr	r3, [r5, #8]
   d8572:	4631      	mov	r1, r6
   d8574:	4418      	add	r0, r3
   d8576:	f002 f96e 	bl	da856 <strcpy>
	len = newlen;
   d857a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d857c:	2001      	movs	r0, #1
   d857e:	e7ed      	b.n	d855c <_ZN6String6concatEPKcj+0xa>

000d8580 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d8580:	b513      	push	{r0, r1, r4, lr}
   d8582:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8584:	b929      	cbnz	r1, d8592 <_ZplRK15StringSumHelperPKc+0x12>
   d8586:	4620      	mov	r0, r4
   d8588:	f7ff ff45 	bl	d8416 <_ZN6String10invalidateEv>
	return a;
}
   d858c:	4620      	mov	r0, r4
   d858e:	b002      	add	sp, #8
   d8590:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8592:	4608      	mov	r0, r1
   d8594:	9101      	str	r1, [sp, #4]
   d8596:	f002 f984 	bl	da8a2 <strlen>
   d859a:	9901      	ldr	r1, [sp, #4]
   d859c:	4602      	mov	r2, r0
   d859e:	4620      	mov	r0, r4
   d85a0:	f7ff ffd7 	bl	d8552 <_ZN6String6concatEPKcj>
   d85a4:	2800      	cmp	r0, #0
   d85a6:	d0ee      	beq.n	d8586 <_ZplRK15StringSumHelperPKc+0x6>
   d85a8:	e7f0      	b.n	d858c <_ZplRK15StringSumHelperPKc+0xc>

000d85aa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d85aa:	b510      	push	{r4, lr}
   d85ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d85ae:	6800      	ldr	r0, [r0, #0]
   d85b0:	b118      	cbz	r0, d85ba <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d85b2:	f7fe fdc7 	bl	d7144 <free>
            wakeupSource_ = nullptr;
   d85b6:	2300      	movs	r3, #0
   d85b8:	6023      	str	r3, [r4, #0]
        }
    }
   d85ba:	bd10      	pop	{r4, pc}

000d85bc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d85bc:	b510      	push	{r4, lr}
   d85be:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d85c0:	f7ff fff3 	bl	d85aa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d85c4:	4620      	mov	r0, r4
   d85c6:	bd10      	pop	{r4, pc}

000d85c8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d85c8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d85ca:	4b09      	ldr	r3, [pc, #36]	; (d85f0 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d85cc:	4c09      	ldr	r4, [pc, #36]	; (d85f4 <_GLOBAL__sub_I_System+0x2c>)
   d85ce:	2202      	movs	r2, #2
   d85d0:	2000      	movs	r0, #0
   d85d2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d85d4:	4b08      	ldr	r3, [pc, #32]	; (d85f8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d85d6:	6020      	str	r0, [r4, #0]
   d85d8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d85da:	71a0      	strb	r0, [r4, #6]
   d85dc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d85de:	f7fe fce5 	bl	d6fac <set_system_mode>
SystemClass System;
   d85e2:	4620      	mov	r0, r4
   d85e4:	4a05      	ldr	r2, [pc, #20]	; (d85fc <_GLOBAL__sub_I_System+0x34>)
   d85e6:	4906      	ldr	r1, [pc, #24]	; (d8600 <_GLOBAL__sub_I_System+0x38>)
   d85e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d85ec:	f001 b824 	b.w	d9638 <__aeabi_atexit>
   d85f0:	2003e680 	.word	0x2003e680
   d85f4:	2003e674 	.word	0x2003e674
   d85f8:	ffff0000 	.word	0xffff0000
   d85fc:	2003e440 	.word	0x2003e440
   d8600:	000d85bd 	.word	0x000d85bd

000d8604 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8604:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8606:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d8608:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d860c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d860e:	2201      	movs	r2, #1
   d8610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8614:	f10d 0107 	add.w	r1, sp, #7
   d8618:	47a0      	blx	r4
}
   d861a:	b002      	add	sp, #8
   d861c:	bd10      	pop	{r4, pc}

000d861e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d861e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8620:	6803      	ldr	r3, [r0, #0]
   d8622:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8628:	46a4      	mov	ip, r4
}
   d862a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d862e:	4760      	bx	ip

000d8630 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8630:	b513      	push	{r0, r1, r4, lr}
   d8632:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d8634:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8636:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d863a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d863c:	f10d 0107 	add.w	r1, sp, #7
   d8640:	2201      	movs	r2, #1
   d8642:	47a0      	blx	r4
}
   d8644:	b002      	add	sp, #8
   d8646:	bd10      	pop	{r4, pc}

000d8648 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d8648:	4770      	bx	lr

000d864a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d864a:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d864c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d864e:	681a      	ldr	r2, [r3, #0]
   d8650:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d8652:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d8654:	da10      	bge.n	d8678 <_ZN9TCPClient9connectedEv+0x2e>
   d8656:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d865a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d865e:	429a      	cmp	r2, r3
   d8660:	d10a      	bne.n	d8678 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d8662:	6803      	ldr	r3, [r0, #0]
   d8664:	691b      	ldr	r3, [r3, #16]
   d8666:	4798      	blx	r3
        if (!rv) {
   d8668:	4604      	mov	r4, r0
   d866a:	b928      	cbnz	r0, d8678 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d866c:	682b      	ldr	r3, [r5, #0]
   d866e:	4628      	mov	r0, r5
   d8670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8672:	4798      	blx	r3
        rv = available();
   d8674:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d8676:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d8678:	2001      	movs	r0, #1
   d867a:	e7fc      	b.n	d8676 <_ZN9TCPClient9connectedEv+0x2c>

000d867c <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d867c:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d867e:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d8680:	43c0      	mvns	r0, r0
   d8682:	0fc0      	lsrs	r0, r0, #31
   d8684:	4770      	bx	lr

000d8686 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d8686:	4770      	bx	lr

000d8688 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d8688:	4b06      	ldr	r3, [pc, #24]	; (d86a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d868a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d868c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d868e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d8692:	d005      	beq.n	d86a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d8694:	4608      	mov	r0, r1
   d8696:	f001 f88f 	bl	d97b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d869a:	2800      	cmp	r0, #0
	return nullptr;
   d869c:	bf08      	it	eq
   d869e:	2400      	moveq	r4, #0
      }
   d86a0:	4620      	mov	r0, r4
   d86a2:	bd10      	pop	{r4, pc}
   d86a4:	000dcec4 	.word	0x000dcec4

000d86a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d86a8:	b510      	push	{r4, lr}
   d86aa:	21ac      	movs	r1, #172	; 0xac
   d86ac:	4604      	mov	r4, r0
   d86ae:	f000 ffc8 	bl	d9642 <_ZdlPvj>
   d86b2:	4620      	mov	r0, r4
   d86b4:	bd10      	pop	{r4, pc}

000d86b6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d86b6:	f7fb bcf2 	b.w	d409e <_ZdlPv>

000d86ba <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d86ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d86be:	f04f 0800 	mov.w	r8, #0
   d86c2:	b086      	sub	sp, #24
   d86c4:	461d      	mov	r5, r3
   d86c6:	f8c0 8004 	str.w	r8, [r0, #4]
   d86ca:	4604      	mov	r4, r0
   d86cc:	460e      	mov	r6, r1
   d86ce:	4617      	mov	r7, r2
    struct timeval tv = {};
   d86d0:	4641      	mov	r1, r8
   d86d2:	2210      	movs	r2, #16
   d86d4:	a802      	add	r0, sp, #8
   d86d6:	f002 f86b 	bl	da7b0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d86da:	1c6b      	adds	r3, r5, #1
   d86dc:	d009      	beq.n	d86f2 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d86de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d86e2:	fbb5 f3f0 	udiv	r3, r5, r0
   d86e6:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d86ea:	fb00 5313 	mls	r3, r0, r3, r5
   d86ee:	4358      	muls	r0, r3
   d86f0:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d86f2:	6960      	ldr	r0, [r4, #20]
   d86f4:	2310      	movs	r3, #16
   d86f6:	9300      	str	r3, [sp, #0]
   d86f8:	6800      	ldr	r0, [r0, #0]
   d86fa:	ab02      	add	r3, sp, #8
   d86fc:	f241 0205 	movw	r2, #4101	; 0x1005
   d8700:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8704:	f7fe fb62 	bl	d6dcc <sock_setsockopt>
    if (ret < 0) {
   d8708:	2800      	cmp	r0, #0
   d870a:	da07      	bge.n	d871c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d870c:	f7fe fd42 	bl	d7194 <__errno>
   d8710:	6803      	ldr	r3, [r0, #0]
   d8712:	6063      	str	r3, [r4, #4]
        return 0;
   d8714:	2000      	movs	r0, #0
}
   d8716:	b006      	add	sp, #24
   d8718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d871c:	6960      	ldr	r0, [r4, #20]
   d871e:	2300      	movs	r3, #0
   d8720:	6800      	ldr	r0, [r0, #0]
   d8722:	463a      	mov	r2, r7
   d8724:	4631      	mov	r1, r6
   d8726:	f7fe fb79 	bl	d6e1c <sock_send>
    if (ret < 0) {
   d872a:	1e03      	subs	r3, r0, #0
   d872c:	dbee      	blt.n	d870c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d872e:	4618      	mov	r0, r3
   d8730:	e7f1      	b.n	d8716 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d8734 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d8734:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8736:	694d      	ldr	r5, [r1, #20]
   d8738:	4b05      	ldr	r3, [pc, #20]	; (d8750 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d873a:	4604      	mov	r4, r0
   d873c:	358c      	adds	r5, #140	; 0x8c
   d873e:	f844 3b04 	str.w	r3, [r4], #4
   d8742:	4606      	mov	r6, r0
   d8744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8748:	682b      	ldr	r3, [r5, #0]
   d874a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d874c:	4630      	mov	r0, r6
   d874e:	bd70      	pop	{r4, r5, r6, pc}
   d8750:	000dcf90 	.word	0x000dcf90

000d8754 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d8754:	b510      	push	{r4, lr}
   d8756:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8758:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d875c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8760:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d8762:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8764:	d005      	beq.n	d8772 <_ZN9TCPClient4peekEv+0x1e>
   d8766:	6963      	ldr	r3, [r4, #20]
   d8768:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d876c:	4413      	add	r3, r2
   d876e:	7918      	ldrb	r0, [r3, #4]
}
   d8770:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8772:	6803      	ldr	r3, [r0, #0]
   d8774:	691b      	ldr	r3, [r3, #16]
   d8776:	4798      	blx	r3
   d8778:	2800      	cmp	r0, #0
   d877a:	d1f4      	bne.n	d8766 <_ZN9TCPClient4peekEv+0x12>
   d877c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8780:	e7f6      	b.n	d8770 <_ZN9TCPClient4peekEv+0x1c>

000d8782 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d8782:	b510      	push	{r4, lr}
   d8784:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8786:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d878a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d878e:	429a      	cmp	r2, r3
int TCPClient::read() {
   d8790:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8792:	d008      	beq.n	d87a6 <_ZN9TCPClient4readEv+0x24>
   d8794:	6963      	ldr	r3, [r4, #20]
   d8796:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d879a:	1c51      	adds	r1, r2, #1
   d879c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d87a0:	4413      	add	r3, r2
   d87a2:	7918      	ldrb	r0, [r3, #4]
}
   d87a4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d87a6:	6803      	ldr	r3, [r0, #0]
   d87a8:	691b      	ldr	r3, [r3, #16]
   d87aa:	4798      	blx	r3
   d87ac:	2800      	cmp	r0, #0
   d87ae:	d1f1      	bne.n	d8794 <_ZN9TCPClient4readEv+0x12>
   d87b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d87b4:	e7f6      	b.n	d87a4 <_ZN9TCPClient4readEv+0x22>

000d87b6 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d87b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d87b8:	6943      	ldr	r3, [r0, #20]
   d87ba:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d87bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d87c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d87c4:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d87c6:	4605      	mov	r5, r0
   d87c8:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d87ca:	d016      	beq.n	d87fa <_ZN9TCPClient4readEPhj+0x44>
   d87cc:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d87ce:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d87d2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d87d6:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d87d8:	42bc      	cmp	r4, r7
   d87da:	bf28      	it	cs
   d87dc:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d87de:	3304      	adds	r3, #4
   d87e0:	4622      	mov	r2, r4
   d87e2:	4419      	add	r1, r3
   d87e4:	4630      	mov	r0, r6
   d87e6:	f001 ffbb 	bl	da760 <memcpy>
   d87ea:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d87ec:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d87f0:	4423      	add	r3, r4
   d87f2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d87f6:	4620      	mov	r0, r4
   d87f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d87fa:	6803      	ldr	r3, [r0, #0]
   d87fc:	691b      	ldr	r3, [r3, #16]
   d87fe:	4798      	blx	r3
   d8800:	2800      	cmp	r0, #0
   d8802:	d1e3      	bne.n	d87cc <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d8804:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d8808:	e7f5      	b.n	d87f6 <_ZN9TCPClient4readEPhj+0x40>

000d880a <_ZN9TCPClient12flush_bufferEv>:
   d880a:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d880c:	2300      	movs	r3, #0
   d880e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8812:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d8814:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d8818:	4770      	bx	lr

000d881a <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d881a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d881e:	461f      	mov	r7, r3
    stop();
   d8820:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8822:	460c      	mov	r4, r1
    stop();
   d8824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8826:	b08a      	sub	sp, #40	; 0x28
   d8828:	4605      	mov	r5, r0
   d882a:	4616      	mov	r6, r2
    stop();
   d882c:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d882e:	7d23      	ldrb	r3, [r4, #20]
   d8830:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d8834:	2b04      	cmp	r3, #4
   d8836:	bf0c      	ite	eq
   d8838:	2002      	moveq	r0, #2
   d883a:	200a      	movne	r0, #10
   d883c:	2206      	movs	r2, #6
   d883e:	2101      	movs	r1, #1
   d8840:	f7fe fafc 	bl	d6e3c <sock_socket>
   d8844:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8848:	696b      	ldr	r3, [r5, #20]
   d884a:	681b      	ldr	r3, [r3, #0]
   d884c:	2b00      	cmp	r3, #0
   d884e:	da08      	bge.n	d8862 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d8850:	682b      	ldr	r3, [r5, #0]
   d8852:	4628      	mov	r0, r5
   d8854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8856:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d8858:	4798      	blx	r3
}
   d885a:	4620      	mov	r0, r4
   d885c:	b00a      	add	sp, #40	; 0x28
   d885e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d8862:	4628      	mov	r0, r5
   d8864:	f7ff ffd1 	bl	d880a <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d8868:	b1b7      	cbz	r7, d8898 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d886a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d886c:	a903      	add	r1, sp, #12
   d886e:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d8870:	9303      	str	r3, [sp, #12]
   d8872:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8876:	f7fe fa69 	bl	d6d4c <if_index_to_name>
   d887a:	2800      	cmp	r0, #0
   d887c:	d1e8      	bne.n	d8850 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d887e:	6968      	ldr	r0, [r5, #20]
   d8880:	2306      	movs	r3, #6
   d8882:	9300      	str	r3, [sp, #0]
   d8884:	6800      	ldr	r0, [r0, #0]
   d8886:	ab03      	add	r3, sp, #12
   d8888:	f241 020b 	movw	r2, #4107	; 0x100b
   d888c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8890:	f7fe fa9c 	bl	d6dcc <sock_setsockopt>
   d8894:	2800      	cmp	r0, #0
   d8896:	d1db      	bne.n	d8850 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d8898:	221c      	movs	r2, #28
   d889a:	2100      	movs	r1, #0
   d889c:	a803      	add	r0, sp, #12
   d889e:	f001 ff87 	bl	da7b0 <memset>
    if (ip.version() == 4) {
   d88a2:	7d23      	ldrb	r3, [r4, #20]
   d88a4:	2b04      	cmp	r3, #4
   d88a6:	d11d      	bne.n	d88e4 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d88a8:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d88ac:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d88ae:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d88b2:	f7fe fa6b 	bl	d6d8c <inet_htons>
   d88b6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d88ba:	6860      	ldr	r0, [r4, #4]
   d88bc:	f7fe fa56 	bl	d6d6c <inet_htonl>
   d88c0:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d88c2:	696b      	ldr	r3, [r5, #20]
   d88c4:	221c      	movs	r2, #28
   d88c6:	6818      	ldr	r0, [r3, #0]
   d88c8:	a903      	add	r1, sp, #12
   d88ca:	f7fe fa8f 	bl	d6dec <sock_connect>
   d88ce:	2800      	cmp	r0, #0
   d88d0:	d1be      	bne.n	d8850 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d88d2:	3404      	adds	r4, #4
   d88d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d88d6:	696d      	ldr	r5, [r5, #20]
   d88d8:	358c      	adds	r5, #140	; 0x8c
   d88da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d88dc:	6823      	ldr	r3, [r4, #0]
   d88de:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d88e0:	2401      	movs	r4, #1
   d88e2:	e7ba      	b.n	d885a <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d88e4:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d88e8:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d88ea:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d88ee:	f7fe fa4d 	bl	d6d8c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d88f2:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d88f4:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d88f8:	1d23      	adds	r3, r4, #4
   d88fa:	f104 0714 	add.w	r7, r4, #20
   d88fe:	6818      	ldr	r0, [r3, #0]
   d8900:	6859      	ldr	r1, [r3, #4]
   d8902:	4632      	mov	r2, r6
   d8904:	c203      	stmia	r2!, {r0, r1}
   d8906:	3308      	adds	r3, #8
   d8908:	42bb      	cmp	r3, r7
   d890a:	4616      	mov	r6, r2
   d890c:	d1f7      	bne.n	d88fe <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d890e:	e7d8      	b.n	d88c2 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d8910 <_ZN9TCPClient9availableEv>:
{
   d8910:	b530      	push	{r4, r5, lr}
   d8912:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d8914:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d8918:	b08b      	sub	sp, #44	; 0x2c
   d891a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d891c:	b12b      	cbz	r3, d892a <_ZN9TCPClient9availableEv+0x1a>
   d891e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8922:	429a      	cmp	r2, r3
   d8924:	d101      	bne.n	d892a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d8926:	f7ff ff70 	bl	d880a <_ZN9TCPClient12flush_bufferEv>
   d892a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d892c:	6808      	ldr	r0, [r1, #0]
   d892e:	2800      	cmp	r0, #0
   d8930:	db18      	blt.n	d8964 <_ZN9TCPClient9availableEv+0x54>
   d8932:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d8936:	2d7f      	cmp	r5, #127	; 0x7f
   d8938:	d814      	bhi.n	d8964 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d893a:	3104      	adds	r1, #4
   d893c:	2308      	movs	r3, #8
   d893e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8942:	4429      	add	r1, r5
   d8944:	f7fe fa5a 	bl	d6dfc <sock_recv>
            if (ret > 0) {
   d8948:	2800      	cmp	r0, #0
   d894a:	dd13      	ble.n	d8974 <_ZN9TCPClient9availableEv+0x64>
   d894c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d894e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8952:	b90a      	cbnz	r2, d8958 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d8954:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8958:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d895a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d895e:	4410      	add	r0, r2
   d8960:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d8964:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d8966:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d896a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d896e:	1ac0      	subs	r0, r0, r3
   d8970:	b00b      	add	sp, #44	; 0x2c
   d8972:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8974:	f7fe fc0e 	bl	d7194 <__errno>
   d8978:	6803      	ldr	r3, [r0, #0]
   d897a:	2b0b      	cmp	r3, #11
   d897c:	d0f2      	beq.n	d8964 <_ZN9TCPClient9availableEv+0x54>
   d897e:	f7fe fc09 	bl	d7194 <__errno>
   d8982:	6803      	ldr	r3, [r0, #0]
   d8984:	2b0b      	cmp	r3, #11
   d8986:	d0ed      	beq.n	d8964 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8988:	2320      	movs	r3, #32
   d898a:	2500      	movs	r5, #0
   d898c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d8990:	f7fe fc00 	bl	d7194 <__errno>
   d8994:	6803      	ldr	r3, [r0, #0]
   d8996:	9301      	str	r3, [sp, #4]
   d8998:	4b08      	ldr	r3, [pc, #32]	; (d89bc <_ZN9TCPClient9availableEv+0xac>)
   d899a:	4909      	ldr	r1, [pc, #36]	; (d89c0 <_ZN9TCPClient9availableEv+0xb0>)
   d899c:	9300      	str	r3, [sp, #0]
   d899e:	aa02      	add	r2, sp, #8
   d89a0:	462b      	mov	r3, r5
   d89a2:	2032      	movs	r0, #50	; 0x32
   d89a4:	f7fe faf2 	bl	d6f8c <log_message>
                    sock_close(d_->sock);
   d89a8:	6963      	ldr	r3, [r4, #20]
   d89aa:	6818      	ldr	r0, [r3, #0]
   d89ac:	f7fe fa16 	bl	d6ddc <sock_close>
   d89b0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d89b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d89b6:	601a      	str	r2, [r3, #0]
   d89b8:	e7d4      	b.n	d8964 <_ZN9TCPClient9availableEv+0x54>
   d89ba:	bf00      	nop
   d89bc:	000dd00b 	.word	0x000dd00b
   d89c0:	000dd004 	.word	0x000dd004

000d89c4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d89c4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d89c6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d89c8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d89ca:	6818      	ldr	r0, [r3, #0]
   d89cc:	2800      	cmp	r0, #0
   d89ce:	db01      	blt.n	d89d4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d89d0:	f7fe fa04 	bl	d6ddc <sock_close>
   d89d4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d89d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d89da:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d89dc:	6960      	ldr	r0, [r4, #20]
   d89de:	2211      	movs	r2, #17
   d89e0:	2100      	movs	r1, #0
   d89e2:	308c      	adds	r0, #140	; 0x8c
   d89e4:	f001 fee4 	bl	da7b0 <memset>
    flush_buffer();
   d89e8:	4620      	mov	r0, r4
}
   d89ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d89ee:	f7ff bf0c 	b.w	d880a <_ZN9TCPClient12flush_bufferEv>

000d89f2 <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   d89f2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d89f4:	6818      	ldr	r0, [r3, #0]
}
   d89f6:	43c0      	mvns	r0, r0
   d89f8:	0fc0      	lsrs	r0, r0, #31
   d89fa:	4770      	bx	lr

000d89fc <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d89fc:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d89fe:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d8a00:	4604      	mov	r4, r0
          total(0) {
   d8a02:	6001      	str	r1, [r0, #0]
   d8a04:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d8a08:	3088      	adds	r0, #136	; 0x88
   d8a0a:	f7fe ffcf 	bl	d79ac <_ZN9IPAddressC1Ev>
}
   d8a0e:	4620      	mov	r0, r4
   d8a10:	bd10      	pop	{r4, pc}
	...

000d8a14 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d8a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8a16:	2300      	movs	r3, #0
   d8a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8a1c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8a20:	4a0e      	ldr	r2, [pc, #56]	; (d8a5c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d8a22:	6103      	str	r3, [r0, #16]
   d8a24:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d8a26:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d8a28:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8a2a:	20ac      	movs	r0, #172	; 0xac
   d8a2c:	9101      	str	r1, [sp, #4]
   d8a2e:	f7fb fb32 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d8a32:	1e05      	subs	r5, r0, #0
   d8a34:	f105 060c 	add.w	r6, r5, #12
   d8a38:	d008      	beq.n	d8a4c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d8a3a:	2301      	movs	r3, #1
   d8a3c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8a40:	4b07      	ldr	r3, [pc, #28]	; (d8a60 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8a42:	9901      	ldr	r1, [sp, #4]
   d8a44:	602b      	str	r3, [r5, #0]
   d8a46:	4630      	mov	r0, r6
   d8a48:	f7ff ffd8 	bl	d89fc <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d8a4c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d8a4e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d8a52:	f7ff feda 	bl	d880a <_ZN9TCPClient12flush_bufferEv>
}
   d8a56:	b002      	add	sp, #8
   d8a58:	bd70      	pop	{r4, r5, r6, pc}
   d8a5a:	bf00      	nop
   d8a5c:	000dd040 	.word	0x000dd040
   d8a60:	000dd024 	.word	0x000dd024

000d8a64 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d8a64:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8a66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   d8a6a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8a6c:	f7ff ffd2 	bl	d8a14 <_ZN9TCPClientC1Ei>
}
   d8a70:	4620      	mov	r0, r4
   d8a72:	bd10      	pop	{r4, pc}

000d8a74 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8a74:	b510      	push	{r4, lr}
   d8a76:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8a78:	6800      	ldr	r0, [r0, #0]
   d8a7a:	2800      	cmp	r0, #0
   d8a7c:	db01      	blt.n	d8a82 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8a7e:	f7fe f9ad 	bl	d6ddc <sock_close>
    }
}
   d8a82:	4620      	mov	r0, r4
   d8a84:	bd10      	pop	{r4, pc}

000d8a86 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d8a86:	300c      	adds	r0, #12
   d8a88:	f7ff bff4 	b.w	d8a74 <_ZN9TCPClient4DataD1Ev>

000d8a8c <_ZN9IPAddressaSIPKhEERS_T_>:
    IPAddress& operator=(T address) {
   d8a8c:	b570      	push	{r4, r5, r6, lr}
   d8a8e:	b086      	sub	sp, #24
   d8a90:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d8a92:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d8a94:	4668      	mov	r0, sp
   d8a96:	f7fe ffd9 	bl	d7a4c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8a9c:	1d34      	adds	r4, r6, #4
   d8a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8aa0:	682b      	ldr	r3, [r5, #0]
   d8aa2:	7023      	strb	r3, [r4, #0]
    }
   d8aa4:	4630      	mov	r0, r6
   d8aa6:	b006      	add	sp, #24
   d8aa8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8aac <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8ab0:	4698      	mov	r8, r3
    stop();
   d8ab2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8ab4:	b093      	sub	sp, #76	; 0x4c
   d8ab6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8ab8:	2400      	movs	r4, #0
    stop();
   d8aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8abc:	4606      	mov	r6, r0
   d8abe:	4617      	mov	r7, r2
    stop();
   d8ac0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8ac2:	4628      	mov	r0, r5
   d8ac4:	466b      	mov	r3, sp
   d8ac6:	4622      	mov	r2, r4
   d8ac8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d8aca:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8acc:	f7fe f96e 	bl	d6dac <netdb_getaddrinfo>
   d8ad0:	4605      	mov	r5, r0
   d8ad2:	2800      	cmp	r0, #0
   d8ad4:	d163      	bne.n	d8b9e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d8ad6:	9b00      	ldr	r3, [sp, #0]
   d8ad8:	2b00      	cmp	r3, #0
   d8ada:	d04b      	beq.n	d8b74 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8adc:	695b      	ldr	r3, [r3, #20]
   d8ade:	2b00      	cmp	r3, #0
   d8ae0:	d048      	beq.n	d8b74 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d8ae2:	a806      	add	r0, sp, #24
   d8ae4:	f7fe ff62 	bl	d79ac <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8ae8:	9b00      	ldr	r3, [sp, #0]
   d8aea:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8aec:	7863      	ldrb	r3, [r4, #1]
   d8aee:	2b02      	cmp	r3, #2
   d8af0:	d104      	bne.n	d8afc <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8af2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8af4:	a806      	add	r0, sp, #24
   d8af6:	f7ff ffc9 	bl	d8a8c <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d8afa:	e026      	b.n	d8b4a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8afc:	2b0a      	cmp	r3, #10
   d8afe:	d124      	bne.n	d8b4a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8b00:	2211      	movs	r2, #17
   d8b02:	4629      	mov	r1, r5
   d8b04:	a801      	add	r0, sp, #4
   d8b06:	f001 fe53 	bl	da7b0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8b0a:	68a3      	ldr	r3, [r4, #8]
   d8b0c:	2b00      	cmp	r3, #0
   d8b0e:	d038      	beq.n	d8b82 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8b10:	f104 0308 	add.w	r3, r4, #8
   d8b14:	f10d 0c04 	add.w	ip, sp, #4
   d8b18:	3418      	adds	r4, #24
   d8b1a:	6818      	ldr	r0, [r3, #0]
   d8b1c:	6859      	ldr	r1, [r3, #4]
   d8b1e:	4662      	mov	r2, ip
   d8b20:	c203      	stmia	r2!, {r0, r1}
   d8b22:	3308      	adds	r3, #8
   d8b24:	42a3      	cmp	r3, r4
   d8b26:	4694      	mov	ip, r2
   d8b28:	d1f7      	bne.n	d8b1a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d8b2a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8b2c:	a901      	add	r1, sp, #4
   d8b2e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d8b30:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8b34:	f7fe ff48 	bl	d79c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d8b38:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d8b3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8b40:	ac07      	add	r4, sp, #28
   d8b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b44:	f8dc 3000 	ldr.w	r3, [ip]
   d8b48:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d8b4a:	a806      	add	r0, sp, #24
   d8b4c:	f7fe ff4e 	bl	d79ec <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8b50:	b180      	cbz	r0, d8b74 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d8b52:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8b54:	ad07      	add	r5, sp, #28
   d8b56:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8b5a:	4b12      	ldr	r3, [pc, #72]	; (d8ba4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d8b5c:	930c      	str	r3, [sp, #48]	; 0x30
   d8b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8b60:	ac0d      	add	r4, sp, #52	; 0x34
   d8b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b64:	682b      	ldr	r3, [r5, #0]
   d8b66:	7023      	strb	r3, [r4, #0]
   d8b68:	463a      	mov	r2, r7
   d8b6a:	4643      	mov	r3, r8
   d8b6c:	a90c      	add	r1, sp, #48	; 0x30
   d8b6e:	4630      	mov	r0, r6
   d8b70:	47c8      	blx	r9
   d8b72:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8b74:	9800      	ldr	r0, [sp, #0]
   d8b76:	f7fe f911 	bl	d6d9c <netdb_freeaddrinfo>
}
   d8b7a:	4628      	mov	r0, r5
   d8b7c:	b013      	add	sp, #76	; 0x4c
   d8b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8b82:	68e3      	ldr	r3, [r4, #12]
   d8b84:	2b00      	cmp	r3, #0
   d8b86:	d1c3      	bne.n	d8b10 <_ZN9TCPClient7connectEPKctm+0x64>
   d8b88:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8b8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8b90:	f7fe f8ec 	bl	d6d6c <inet_htonl>
   d8b94:	4581      	cmp	r9, r0
   d8b96:	d1bb      	bne.n	d8b10 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d8b98:	f104 0114 	add.w	r1, r4, #20
   d8b9c:	e7aa      	b.n	d8af4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8b9e:	4625      	mov	r5, r4
   d8ba0:	e7e8      	b.n	d8b74 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8ba2:	bf00      	nop
   d8ba4:	000dcf90 	.word	0x000dcf90

000d8ba8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8ba8:	4b02      	ldr	r3, [pc, #8]	; (d8bb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8baa:	681a      	ldr	r2, [r3, #0]
   d8bac:	4b02      	ldr	r3, [pc, #8]	; (d8bb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8bae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8bb0:	4770      	bx	lr
   d8bb2:	bf00      	nop
   d8bb4:	2003e268 	.word	0x2003e268
   d8bb8:	2003e684 	.word	0x2003e684

000d8bbc <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d8bbc:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d8bbe:	6804      	ldr	r4, [r0, #0]
   d8bc0:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d8bc2:	46a4      	mov	ip, r4
    }
   d8bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d8bc8:	4760      	bx	ip

000d8bca <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d8bca:	6803      	ldr	r3, [r0, #0]
   d8bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8bce:	4718      	bx	r3

000d8bd0 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d8bd0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d8bd2:	4770      	bx	lr

000d8bd4 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d8bd4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d8bd6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d8bd8:	1a10      	subs	r0, r2, r0
   d8bda:	4770      	bx	lr

000d8bdc <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d8bdc:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d8bde:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d8be0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d8be4:	68db      	ldr	r3, [r3, #12]
   d8be6:	2201      	movs	r2, #1
   d8be8:	f10d 0107 	add.w	r1, sp, #7
   d8bec:	4798      	blx	r3
}
   d8bee:	b003      	add	sp, #12
   d8bf0:	f85d fb04 	ldr.w	pc, [sp], #4

000d8bf4 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d8bf4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d8bf6:	6803      	ldr	r3, [r0, #0]
   d8bf8:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d8bfa:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d8bfc:	4798      	blx	r3
   d8bfe:	b128      	cbz	r0, d8c0c <_ZN3UDP4readEv+0x18>
   d8c00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8c02:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d8c04:	1c59      	adds	r1, r3, #1
   d8c06:	86e1      	strh	r1, [r4, #54]	; 0x36
   d8c08:	5cd0      	ldrb	r0, [r2, r3]
}
   d8c0a:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d8c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8c10:	e7fb      	b.n	d8c0a <_ZN3UDP4readEv+0x16>

000d8c12 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d8c12:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d8c14:	6803      	ldr	r3, [r0, #0]
   d8c16:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d8c18:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d8c1a:	4798      	blx	r3
   d8c1c:	b118      	cbz	r0, d8c26 <_ZN3UDP4peekEv+0x14>
   d8c1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8c20:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d8c22:	5cd0      	ldrb	r0, [r2, r3]
}
   d8c24:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d8c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8c2a:	e7fb      	b.n	d8c24 <_ZN3UDP4peekEv+0x12>

000d8c2c <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d8c2c:	4770      	bx	lr

000d8c2e <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d8c2e:	b410      	push	{r4}
   d8c30:	4603      	mov	r3, r0
   d8c32:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d8c34:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d8c36:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d8c38:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d8c3a:	6803      	ldr	r3, [r0, #0]
   d8c3c:	1a52      	subs	r2, r2, r1
   d8c3e:	68db      	ldr	r3, [r3, #12]
   d8c40:	4421      	add	r1, r4
}
   d8c42:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d8c46:	4718      	bx	r3

000d8c48 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d8c48:	f1a0 0010 	sub.w	r0, r0, #16
   d8c4c:	f7ff bfef 	b.w	d8c2e <_ZNK3UDP7printToER5Print>

000d8c50 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d8c50:	b570      	push	{r4, r5, r6, lr}
    stop();
   d8c52:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d8c54:	b08c      	sub	sp, #48	; 0x30
    stop();
   d8c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d8c58:	4604      	mov	r4, r0
   d8c5a:	460e      	mov	r6, r1
   d8c5c:	4615      	mov	r5, r2
    stop();
   d8c5e:	4798      	blx	r3
    const int one = 1;
   d8c60:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d8c62:	221c      	movs	r2, #28
   d8c64:	2100      	movs	r1, #0
   d8c66:	a805      	add	r0, sp, #20
    const int one = 1;
   d8c68:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d8c6a:	f001 fda1 	bl	da7b0 <memset>
    saddr.sin6_len = sizeof(saddr);
   d8c6e:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d8c72:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d8c74:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d8c78:	f7fe f888 	bl	d6d8c <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8c7c:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d8c7e:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8c82:	2102      	movs	r1, #2
   d8c84:	200a      	movs	r0, #10
   d8c86:	f7fe f8d9 	bl	d6e3c <sock_socket>
    if (_sock < 0) {
   d8c8a:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8c8c:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d8c8e:	db25      	blt.n	d8cdc <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d8c90:	2204      	movs	r2, #4
   d8c92:	9200      	str	r2, [sp, #0]
   d8c94:	ab02      	add	r3, sp, #8
   d8c96:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8c9a:	f7fe f897 	bl	d6dcc <sock_setsockopt>
   d8c9e:	b9e8      	cbnz	r0, d8cdc <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d8ca0:	b195      	cbz	r5, d8cc8 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d8ca2:	9003      	str	r0, [sp, #12]
   d8ca4:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d8ca8:	a903      	add	r1, sp, #12
   d8caa:	b2e8      	uxtb	r0, r5
   d8cac:	f7fe f84e 	bl	d6d4c <if_index_to_name>
   d8cb0:	b9a0      	cbnz	r0, d8cdc <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d8cb2:	2306      	movs	r3, #6
   d8cb4:	9300      	str	r3, [sp, #0]
   d8cb6:	6960      	ldr	r0, [r4, #20]
   d8cb8:	ab03      	add	r3, sp, #12
   d8cba:	f241 020b 	movw	r2, #4107	; 0x100b
   d8cbe:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8cc2:	f7fe f883 	bl	d6dcc <sock_setsockopt>
   d8cc6:	b948      	cbnz	r0, d8cdc <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d8cc8:	6960      	ldr	r0, [r4, #20]
   d8cca:	221c      	movs	r2, #28
   d8ccc:	a905      	add	r1, sp, #20
   d8cce:	f7fe f875 	bl	d6dbc <sock_bind>
   d8cd2:	b918      	cbnz	r0, d8cdc <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d8cd4:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d8cd6:	2001      	movs	r0, #1
}
   d8cd8:	b00c      	add	sp, #48	; 0x30
   d8cda:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d8cdc:	6823      	ldr	r3, [r4, #0]
   d8cde:	4620      	mov	r0, r4
   d8ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8ce2:	4798      	blx	r3
   d8ce4:	2000      	movs	r0, #0
   d8ce6:	e7f7      	b.n	d8cd8 <_ZN3UDP5beginEtm+0x88>

000d8ce8 <_ZN3UDP4stopEv>:
void UDP::stop() {
   d8ce8:	b510      	push	{r4, lr}
   d8cea:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d8cec:	6940      	ldr	r0, [r0, #20]
   d8cee:	2800      	cmp	r0, #0
   d8cf0:	db01      	blt.n	d8cf6 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d8cf2:	f7fe f873 	bl	d6ddc <sock_close>
    _sock = -1;
   d8cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8cfa:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d8cfc:	2300      	movs	r3, #0
   d8cfe:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d8d00:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d8d02:	bd10      	pop	{r4, pc}

000d8d04 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d8d04:	b570      	push	{r4, r5, r6, lr}
   d8d06:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d8d08:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8d0a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d8d0c:	b168      	cbz	r0, d8d2a <_ZN3UDP5writeEPKhj+0x26>
   d8d0e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d8d10:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d8d12:	4294      	cmp	r4, r2
   d8d14:	bf28      	it	cs
   d8d16:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d8d18:	4622      	mov	r2, r4
   d8d1a:	4430      	add	r0, r6
   d8d1c:	f001 fd20 	bl	da760 <memcpy>
    _offset += size;
   d8d20:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d8d22:	4423      	add	r3, r4
   d8d24:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d8d26:	4620      	mov	r0, r4
   d8d28:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d8d2a:	4604      	mov	r4, r0
   d8d2c:	e7f1      	b.n	d8d12 <_ZN3UDP5writeEPKhj+0xe>

000d8d2e <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d8d2e:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d8d30:	6803      	ldr	r3, [r0, #0]
   d8d32:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d8d34:	4604      	mov	r4, r0
   d8d36:	460f      	mov	r7, r1
   d8d38:	4616      	mov	r6, r2
    if (available()) {
   d8d3a:	4798      	blx	r3
   d8d3c:	b190      	cbz	r0, d8d64 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d8d3e:	6823      	ldr	r3, [r4, #0]
   d8d40:	4620      	mov	r0, r4
   d8d42:	691b      	ldr	r3, [r3, #16]
   d8d44:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d8d46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8d48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8d4a:	4286      	cmp	r6, r0
   d8d4c:	bfa8      	it	ge
   d8d4e:	4606      	movge	r6, r0
   d8d50:	4419      	add	r1, r3
   d8d52:	4632      	mov	r2, r6
   d8d54:	4638      	mov	r0, r7
   d8d56:	f001 fd03 	bl	da760 <memcpy>
        _offset += read;
   d8d5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8d5c:	4433      	add	r3, r6
   d8d5e:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d8d60:	4630      	mov	r0, r6
   d8d62:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d8d64:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   d8d68:	e7fa      	b.n	d8d60 <_ZN3UDP4readEPhj+0x32>
	...

000d8d6c <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d8d6c:	b570      	push	{r4, r5, r6, lr}
   d8d6e:	4604      	mov	r4, r0
   d8d70:	4b05      	ldr	r3, [pc, #20]	; (d8d88 <_ZN3UDP8remoteIPEv+0x1c>)
   d8d72:	f844 3b04 	str.w	r3, [r4], #4
   d8d76:	f101 0520 	add.w	r5, r1, #32
   d8d7a:	4606      	mov	r6, r0
   d8d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d80:	682b      	ldr	r3, [r5, #0]
   d8d82:	7023      	strb	r3, [r4, #0]
   d8d84:	4630      	mov	r0, r6
   d8d86:	bd70      	pop	{r4, r5, r6, pc}
   d8d88:	000dcf90 	.word	0x000dcf90

000d8d8c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8d8e:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8d90:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8d92:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8d94:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d8d96:	4a0a      	ldr	r2, [pc, #40]	; (d8dc0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d8d98:	9202      	str	r2, [sp, #8]
   d8d9a:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8d9c:	468c      	mov	ip, r1
   d8d9e:	4606      	mov	r6, r0
   d8da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8da2:	ad03      	add	r5, sp, #12
   d8da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8da6:	6823      	ldr	r3, [r4, #0]
   d8da8:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8daa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d8dae:	9300      	str	r3, [sp, #0]
   d8db0:	4672      	mov	r2, lr
   d8db2:	ab02      	add	r3, sp, #8
   d8db4:	4661      	mov	r1, ip
   d8db6:	4630      	mov	r0, r6
   d8db8:	47b8      	blx	r7
    }
   d8dba:	b009      	add	sp, #36	; 0x24
   d8dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8dbe:	bf00      	nop
   d8dc0:	000dcf90 	.word	0x000dcf90

000d8dc4 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d8dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8dc6:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d8dc8:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8dca:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d8dcc:	4b0c      	ldr	r3, [pc, #48]	; (d8e00 <_ZN3UDP9endPacketEv+0x3c>)
   d8dce:	9302      	str	r3, [sp, #8]
   d8dd0:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d8dd4:	4604      	mov	r4, r0
   d8dd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8dd8:	ad03      	add	r5, sp, #12
   d8dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8ddc:	6833      	ldr	r3, [r6, #0]
   d8dde:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8de0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d8de2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d8de4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8de6:	9300      	str	r3, [sp, #0]
   d8de8:	4620      	mov	r0, r4
   d8dea:	ab02      	add	r3, sp, #8
   d8dec:	47b8      	blx	r7
    flush(); // wait for send to complete
   d8dee:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8df0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d8df2:	69db      	ldr	r3, [r3, #28]
   d8df4:	4620      	mov	r0, r4
   d8df6:	4798      	blx	r3
}
   d8df8:	4628      	mov	r0, r5
   d8dfa:	b009      	add	sp, #36	; 0x24
   d8dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8dfe:	bf00      	nop
   d8e00:	000dcf90 	.word	0x000dcf90

000d8e04 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d8e04:	b538      	push	{r3, r4, r5, lr}
   d8e06:	4605      	mov	r5, r0
   d8e08:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d8e0a:	7d2b      	ldrb	r3, [r5, #20]
   d8e0c:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d8e0e:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d8e10:	d110      	bne.n	d8e34 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d8e12:	f640 231c 	movw	r3, #2588	; 0xa1c
   d8e16:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d8e18:	f7fd ffb8 	bl	d6d8c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8e1c:	3408      	adds	r4, #8
   d8e1e:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d8e20:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8e24:	3514      	adds	r5, #20
   d8e26:	f853 2b04 	ldr.w	r2, [r3], #4
   d8e2a:	f844 2b04 	str.w	r2, [r4], #4
   d8e2e:	42ab      	cmp	r3, r5
   d8e30:	d1f9      	bne.n	d8e26 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d8e32:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d8e34:	2b04      	cmp	r3, #4
   d8e36:	d1fc      	bne.n	d8e32 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d8e38:	f44f 7304 	mov.w	r3, #528	; 0x210
   d8e3c:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d8e3e:	f7fd ffa5 	bl	d6d8c <inet_htons>
   d8e42:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d8e44:	6868      	ldr	r0, [r5, #4]
   d8e46:	f7fd ff91 	bl	d6d6c <inet_htonl>
   d8e4a:	6060      	str	r0, [r4, #4]
}
   d8e4c:	e7f1      	b.n	d8e32 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d8e4e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8e4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8e52:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d8e54:	af03      	add	r7, sp, #12
   d8e56:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8e5a:	4698      	mov	r8, r3
   d8e5c:	4604      	mov	r4, r0
   d8e5e:	460d      	mov	r5, r1
   d8e60:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d8e62:	2100      	movs	r1, #0
   d8e64:	464a      	mov	r2, r9
   d8e66:	4638      	mov	r0, r7
   d8e68:	f001 fca2 	bl	da7b0 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d8e6c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d8e70:	463a      	mov	r2, r7
   d8e72:	4640      	mov	r0, r8
   d8e74:	f7ff ffc6 	bl	d8e04 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d8e78:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d8e7c:	b153      	cbz	r3, d8e94 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d8e7e:	e9cd 7900 	strd	r7, r9, [sp]
   d8e82:	6960      	ldr	r0, [r4, #20]
   d8e84:	2300      	movs	r3, #0
   d8e86:	4632      	mov	r2, r6
   d8e88:	4629      	mov	r1, r5
   d8e8a:	f7fd ffcf 	bl	d6e2c <sock_sendto>
}
   d8e8e:	b00b      	add	sp, #44	; 0x2c
   d8e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d8e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8e98:	e7f9      	b.n	d8e8e <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d8e9c <_ZN3UDPC1Ev>:
UDP::UDP()
   d8e9c:	b538      	push	{r3, r4, r5, lr}
   d8e9e:	2500      	movs	r5, #0
   d8ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8ea4:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d8ea8:	4b0b      	ldr	r3, [pc, #44]	; (d8ed8 <_ZN3UDPC1Ev+0x3c>)
   d8eaa:	f103 0208 	add.w	r2, r3, #8
   d8eae:	336c      	adds	r3, #108	; 0x6c
   d8eb0:	6103      	str	r3, [r0, #16]
   d8eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   d8eb6:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d8eb8:	6002      	str	r2, [r0, #0]
   d8eba:	6143      	str	r3, [r0, #20]
   d8ebc:	301c      	adds	r0, #28
   d8ebe:	f7fe fd75 	bl	d79ac <_ZN9IPAddressC1Ev>
   d8ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d8ec6:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d8eca:	86e5      	strh	r5, [r4, #54]	; 0x36
   d8ecc:	8725      	strh	r5, [r4, #56]	; 0x38
   d8ece:	63e5      	str	r5, [r4, #60]	; 0x3c
   d8ed0:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d8ed4:	4620      	mov	r0, r4
   d8ed6:	bd38      	pop	{r3, r4, r5, pc}
   d8ed8:	000dd0a0 	.word	0x000dd0a0

000d8edc <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d8edc:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d8ede:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d8ee2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d8ee4:	b123      	cbz	r3, d8ef0 <_ZN3UDP13releaseBufferEv+0x14>
   d8ee6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8ee8:	b110      	cbz	r0, d8ef0 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d8eea:	2101      	movs	r1, #1
   d8eec:	f000 fba9 	bl	d9642 <_ZdlPvj>
    _buffer = NULL;
   d8ef0:	2300      	movs	r3, #0
   d8ef2:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d8ef4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d8ef8:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d8efa:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d8efc:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d8efe:	bd10      	pop	{r4, pc}

000d8f00 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d8f00:	b570      	push	{r4, r5, r6, lr}
   d8f02:	4604      	mov	r4, r0
   d8f04:	4616      	mov	r6, r2
   d8f06:	460d      	mov	r5, r1
    releaseBuffer();
   d8f08:	f7ff ffe8 	bl	d8edc <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d8f0c:	2300      	movs	r3, #0
    _buffer = buffer;
   d8f0e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d8f10:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d8f12:	b12e      	cbz	r6, d8f20 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d8f14:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d8f16:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d8f18:	3800      	subs	r0, #0
   d8f1a:	bf18      	it	ne
   d8f1c:	2001      	movne	r0, #1
   d8f1e:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d8f20:	2d00      	cmp	r5, #0
   d8f22:	d0f8      	beq.n	d8f16 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d8f24:	4628      	mov	r0, r5
   d8f26:	f7fb f8b8 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d8f2a:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d8f2c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d8f2e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d8f32:	2800      	cmp	r0, #0
   d8f34:	d0ef      	beq.n	d8f16 <_ZN3UDP9setBufferEjPh+0x16>
   d8f36:	e7ed      	b.n	d8f14 <_ZN3UDP9setBufferEjPh+0x14>

000d8f38 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f3a:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d8f3c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8f3e:	4605      	mov	r5, r0
   d8f40:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d8f42:	b91a      	cbnz	r2, d8f4c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d8f44:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d8f46:	b109      	cbz	r1, d8f4c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d8f48:	f7ff ffda 	bl	d8f00 <_ZN3UDP9setBufferEjPh>
   d8f4c:	3404      	adds	r4, #4
   d8f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8f50:	f105 0620 	add.w	r6, r5, #32
   d8f54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d8f56:	6823      	ldr	r3, [r4, #0]
   d8f58:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d8f5a:	2300      	movs	r3, #0
}
   d8f5c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d8f5e:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d8f60:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d8f62:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d8f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8f66 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d8f66:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d8f68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d8f6a:	4604      	mov	r4, r0
   d8f6c:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d8f6e:	b92a      	cbnz	r2, d8f7c <_ZN3UDP11parsePacketEm+0x16>
   d8f70:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d8f72:	b119      	cbz	r1, d8f7c <_ZN3UDP11parsePacketEm+0x16>
   d8f74:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d8f76:	f7ff ffc3 	bl	d8f00 <_ZN3UDP9setBufferEjPh>
   d8f7a:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d8f7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d8f7e:	2200      	movs	r2, #0
   d8f80:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d8f82:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d8f84:	b141      	cbz	r1, d8f98 <_ZN3UDP11parsePacketEm+0x32>
   d8f86:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d8f88:	b132      	cbz	r2, d8f98 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d8f8a:	6820      	ldr	r0, [r4, #0]
   d8f8c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d8f8e:	4620      	mov	r0, r4
   d8f90:	47a8      	blx	r5
        if (result > 0) {
   d8f92:	2800      	cmp	r0, #0
            _total = result;
   d8f94:	bfc8      	it	gt
   d8f96:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d8f98:	6823      	ldr	r3, [r4, #0]
   d8f9a:	691b      	ldr	r3, [r3, #16]
   d8f9c:	4620      	mov	r0, r4
}
   d8f9e:	b003      	add	sp, #12
   d8fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d8fa4:	4718      	bx	r3

000d8fa6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d8fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d8fa8:	7843      	ldrb	r3, [r0, #1]
   d8faa:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d8fac:	b08d      	sub	sp, #52	; 0x34
   d8fae:	4605      	mov	r5, r0
   d8fb0:	460c      	mov	r4, r1
   d8fb2:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d8fb4:	d104      	bne.n	d8fc0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8fb6:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   d8fb8:	4620      	mov	r0, r4
   d8fba:	f7ff fd67 	bl	d8a8c <_ZN9IPAddressaSIPKhEERS_T_>
   d8fbe:	e022      	b.n	d9006 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d8fc0:	2b0a      	cmp	r3, #10
   d8fc2:	d125      	bne.n	d9010 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d8fc4:	2211      	movs	r2, #17
   d8fc6:	2100      	movs	r1, #0
   d8fc8:	a801      	add	r0, sp, #4
   d8fca:	f001 fbf1 	bl	da7b0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8fce:	68ab      	ldr	r3, [r5, #8]
   d8fd0:	b303      	cbz	r3, d9014 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8fd2:	f105 0308 	add.w	r3, r5, #8
   d8fd6:	ae01      	add	r6, sp, #4
   d8fd8:	f105 0c18 	add.w	ip, r5, #24
   d8fdc:	6818      	ldr	r0, [r3, #0]
   d8fde:	6859      	ldr	r1, [r3, #4]
   d8fe0:	4632      	mov	r2, r6
   d8fe2:	c203      	stmia	r2!, {r0, r1}
   d8fe4:	3308      	adds	r3, #8
   d8fe6:	4563      	cmp	r3, ip
   d8fe8:	4616      	mov	r6, r2
   d8fea:	d1f7      	bne.n	d8fdc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d8fec:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8fee:	a901      	add	r1, sp, #4
   d8ff0:	a806      	add	r0, sp, #24
   d8ff2:	ae07      	add	r6, sp, #28
            a.v = 6;
   d8ff4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8ff8:	f7fe fce6 	bl	d79c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8ffc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8ffe:	3404      	adds	r4, #4
   d9000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9002:	6833      	ldr	r3, [r6, #0]
   d9004:	7023      	strb	r3, [r4, #0]
        if (port) {
   d9006:	b11f      	cbz	r7, d9010 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d9008:	8868      	ldrh	r0, [r5, #2]
   d900a:	f7fd feb7 	bl	d6d7c <inet_ntohs>
   d900e:	8038      	strh	r0, [r7, #0]
}
   d9010:	b00d      	add	sp, #52	; 0x34
   d9012:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d9014:	68eb      	ldr	r3, [r5, #12]
   d9016:	2b00      	cmp	r3, #0
   d9018:	d1db      	bne.n	d8fd2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d901a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d901e:	692e      	ldr	r6, [r5, #16]
   d9020:	f7fd fea4 	bl	d6d6c <inet_htonl>
   d9024:	4286      	cmp	r6, r0
   d9026:	d1d4      	bne.n	d8fd2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d9028:	f105 0114 	add.w	r1, r5, #20
   d902c:	e7c4      	b.n	d8fb8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>
	...

000d9030 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d9030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9034:	4617      	mov	r7, r2
   d9036:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d9038:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d903a:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d903c:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d903e:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d9040:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d9042:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d9044:	f7fd feb2 	bl	d6dac <netdb_getaddrinfo>
   d9048:	1e04      	subs	r4, r0, #0
   d904a:	db20      	blt.n	d908e <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d904c:	9b01      	ldr	r3, [sp, #4]
   d904e:	b32b      	cbz	r3, d909c <_ZN3UDP11beginPacketEPKct+0x6c>
   d9050:	695b      	ldr	r3, [r3, #20]
   d9052:	b31b      	cbz	r3, d909c <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d9054:	a802      	add	r0, sp, #8
   d9056:	f7fe fca9 	bl	d79ac <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d905a:	9b01      	ldr	r3, [sp, #4]
   d905c:	2200      	movs	r2, #0
   d905e:	6958      	ldr	r0, [r3, #20]
   d9060:	a902      	add	r1, sp, #8
   d9062:	f7ff ffa0 	bl	d8fa6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   d9066:	a802      	add	r0, sp, #8
   d9068:	f7fe fcc0 	bl	d79ec <_ZNK9IPAddresscvbEv>
        if (addr) {
   d906c:	b1b0      	cbz	r0, d909c <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d906e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d9070:	ad03      	add	r5, sp, #12
   d9072:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d9076:	4b0b      	ldr	r3, [pc, #44]	; (d90a4 <_ZN3UDP11beginPacketEPKct+0x74>)
   d9078:	9308      	str	r3, [sp, #32]
   d907a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d907c:	ac09      	add	r4, sp, #36	; 0x24
   d907e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9080:	682b      	ldr	r3, [r5, #0]
   d9082:	7023      	strb	r3, [r4, #0]
   d9084:	463a      	mov	r2, r7
   d9086:	a908      	add	r1, sp, #32
   d9088:	4630      	mov	r0, r6
   d908a:	47c0      	blx	r8
   d908c:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d908e:	9801      	ldr	r0, [sp, #4]
   d9090:	f7fd fe84 	bl	d6d9c <netdb_freeaddrinfo>
}
   d9094:	4620      	mov	r0, r4
   d9096:	b00e      	add	sp, #56	; 0x38
   d9098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d909c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d90a0:	e7f5      	b.n	d908e <_ZN3UDP11beginPacketEPKct+0x5e>
   d90a2:	bf00      	nop
   d90a4:	000dcf90 	.word	0x000dcf90

000d90a8 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d90a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d90ac:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d90b0:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d90b4:	b090      	sub	sp, #64	; 0x40
   d90b6:	4605      	mov	r5, r0
   d90b8:	460e      	mov	r6, r1
   d90ba:	4690      	mov	r8, r2
   d90bc:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d90be:	db3c      	blt.n	d913a <_ZN3UDP13receivePacketEPhjm+0x92>
   d90c0:	2900      	cmp	r1, #0
   d90c2:	d03a      	beq.n	d913a <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d90c4:	f04f 0a1c 	mov.w	sl, #28
   d90c8:	af09      	add	r7, sp, #36	; 0x24
   d90ca:	4652      	mov	r2, sl
   d90cc:	2100      	movs	r1, #0
   d90ce:	4638      	mov	r0, r7
   d90d0:	f001 fb6e 	bl	da7b0 <memset>
        socklen_t slen = sizeof(saddr);
   d90d4:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d90d8:	b1dc      	cbz	r4, d9112 <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d90da:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d90dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d90e0:	fbb4 f3f0 	udiv	r3, r4, r0
   d90e4:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d90e8:	fb00 4313 	mls	r3, r0, r3, r4
   d90ec:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d90ee:	2310      	movs	r3, #16
            struct timeval tv = {};
   d90f0:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d90f2:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d90f4:	9300      	str	r3, [sp, #0]
   d90f6:	f241 0206 	movw	r2, #4102	; 0x1006
   d90fa:	446b      	add	r3, sp
   d90fc:	f640 71ff 	movw	r1, #4095	; 0xfff
   d9100:	4648      	mov	r0, r9
   d9102:	f7fd fe63 	bl	d6dcc <sock_setsockopt>
            if (ret) {
   d9106:	4604      	mov	r4, r0
   d9108:	b120      	cbz	r0, d9114 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d910a:	4620      	mov	r0, r4
   d910c:	b010      	add	sp, #64	; 0x40
   d910e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d9112:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d9114:	ab03      	add	r3, sp, #12
   d9116:	e9cd 7300 	strd	r7, r3, [sp]
   d911a:	6968      	ldr	r0, [r5, #20]
   d911c:	4623      	mov	r3, r4
   d911e:	4642      	mov	r2, r8
   d9120:	4631      	mov	r1, r6
   d9122:	f7fd fe73 	bl	d6e0c <sock_recvfrom>
        if (ret >= 0) {
   d9126:	1e04      	subs	r4, r0, #0
   d9128:	dbef      	blt.n	d910a <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d912a:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d912e:	f105 011c 	add.w	r1, r5, #28
   d9132:	4638      	mov	r0, r7
   d9134:	f7ff ff37 	bl	d8fa6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d9138:	e7e7      	b.n	d910a <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d913a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d913e:	e7e4      	b.n	d910a <_ZN3UDP13receivePacketEPhjm+0x62>

000d9140 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9140:	4770      	bx	lr

000d9142 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9142:	7441      	strb	r1, [r0, #17]
}
   d9144:	4770      	bx	lr

000d9146 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d9146:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9148:	7c00      	ldrb	r0, [r0, #16]
   d914a:	f7fd fec7 	bl	d6edc <hal_usart_available_data_for_write>
}
   d914e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9152:	bd08      	pop	{r3, pc}

000d9154 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9154:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9156:	7c00      	ldrb	r0, [r0, #16]
   d9158:	f7fd fe98 	bl	d6e8c <hal_usart_available>
}
   d915c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9160:	bd08      	pop	{r3, pc}

000d9162 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9162:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9164:	7c00      	ldrb	r0, [r0, #16]
   d9166:	f7fd fea1 	bl	d6eac <hal_usart_peek>
}
   d916a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d916e:	bd08      	pop	{r3, pc}

000d9170 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9170:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d9172:	7c00      	ldrb	r0, [r0, #16]
   d9174:	f7fd fe92 	bl	d6e9c <hal_usart_read>
}
   d9178:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d917c:	bd08      	pop	{r3, pc}

000d917e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d917e:	7c00      	ldrb	r0, [r0, #16]
   d9180:	f7fd be9c 	b.w	d6ebc <hal_usart_flush>

000d9184 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9184:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9186:	7c45      	ldrb	r5, [r0, #17]
{
   d9188:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d918a:	b12d      	cbz	r5, d9198 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d918c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d918e:	b003      	add	sp, #12
   d9190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d9194:	f7fd be72 	b.w	d6e7c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d9198:	7c00      	ldrb	r0, [r0, #16]
   d919a:	9101      	str	r1, [sp, #4]
   d919c:	f7fd fe9e 	bl	d6edc <hal_usart_available_data_for_write>
   d91a0:	2800      	cmp	r0, #0
   d91a2:	9901      	ldr	r1, [sp, #4]
   d91a4:	dcf2      	bgt.n	d918c <_ZN11USARTSerial5writeEh+0x8>
}
   d91a6:	4628      	mov	r0, r5
   d91a8:	b003      	add	sp, #12
   d91aa:	bd30      	pop	{r4, r5, pc}

000d91ac <_ZN11USARTSerialD0Ev>:
   d91ac:	b510      	push	{r4, lr}
   d91ae:	2114      	movs	r1, #20
   d91b0:	4604      	mov	r4, r0
   d91b2:	f000 fa46 	bl	d9642 <_ZdlPvj>
   d91b6:	4620      	mov	r0, r4
   d91b8:	bd10      	pop	{r4, pc}
	...

000d91bc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d91bc:	b510      	push	{r4, lr}
   d91be:	f04f 0c00 	mov.w	ip, #0
   d91c2:	4604      	mov	r4, r0
   d91c4:	4608      	mov	r0, r1
   d91c6:	4611      	mov	r1, r2
   d91c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d91cc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d91d0:	4a04      	ldr	r2, [pc, #16]	; (d91e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d91d2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d91d4:	2201      	movs	r2, #1
  _serial = serial;
   d91d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d91d8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d91da:	461a      	mov	r2, r3
   d91dc:	f7fd fe46 	bl	d6e6c <hal_usart_init>
}
   d91e0:	4620      	mov	r0, r4
   d91e2:	bd10      	pop	{r4, pc}
   d91e4:	000dd118 	.word	0x000dd118

000d91e8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d91e8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d91ea:	4c0e      	ldr	r4, [pc, #56]	; (d9224 <_Z22__fetch_global_Serial1v+0x3c>)
   d91ec:	7821      	ldrb	r1, [r4, #0]
   d91ee:	f3bf 8f5b 	dmb	ish
   d91f2:	f011 0101 	ands.w	r1, r1, #1
   d91f6:	d112      	bne.n	d921e <_Z22__fetch_global_Serial1v+0x36>
   d91f8:	4620      	mov	r0, r4
   d91fa:	9101      	str	r1, [sp, #4]
   d91fc:	f7fa ff53 	bl	d40a6 <__cxa_guard_acquire>
   d9200:	9901      	ldr	r1, [sp, #4]
   d9202:	b160      	cbz	r0, d921e <_Z22__fetch_global_Serial1v+0x36>
   d9204:	4a08      	ldr	r2, [pc, #32]	; (d9228 <_Z22__fetch_global_Serial1v+0x40>)
   d9206:	4b09      	ldr	r3, [pc, #36]	; (d922c <_Z22__fetch_global_Serial1v+0x44>)
   d9208:	4809      	ldr	r0, [pc, #36]	; (d9230 <_Z22__fetch_global_Serial1v+0x48>)
   d920a:	f7ff ffd7 	bl	d91bc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d920e:	4620      	mov	r0, r4
   d9210:	f7fa ff4e 	bl	d40b0 <__cxa_guard_release>
   d9214:	4a07      	ldr	r2, [pc, #28]	; (d9234 <_Z22__fetch_global_Serial1v+0x4c>)
   d9216:	4908      	ldr	r1, [pc, #32]	; (d9238 <_Z22__fetch_global_Serial1v+0x50>)
   d9218:	4805      	ldr	r0, [pc, #20]	; (d9230 <_Z22__fetch_global_Serial1v+0x48>)
   d921a:	f000 fa0d 	bl	d9638 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d921e:	4804      	ldr	r0, [pc, #16]	; (d9230 <_Z22__fetch_global_Serial1v+0x48>)
   d9220:	b002      	add	sp, #8
   d9222:	bd10      	pop	{r4, pc}
   d9224:	2003e688 	.word	0x2003e688
   d9228:	2003e68c 	.word	0x2003e68c
   d922c:	2003e710 	.word	0x2003e710
   d9230:	2003e794 	.word	0x2003e794
   d9234:	2003e440 	.word	0x2003e440
   d9238:	000d9141 	.word	0x000d9141

000d923c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d923c:	7441      	strb	r1, [r0, #17]
}
   d923e:	4770      	bx	lr

000d9240 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9240:	4770      	bx	lr

000d9242 <_ZN9USBSerial4readEv>:
{
   d9242:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9244:	2100      	movs	r1, #0
   d9246:	7c00      	ldrb	r0, [r0, #16]
   d9248:	f7fd fe70 	bl	d6f2c <HAL_USB_USART_Receive_Data>
}
   d924c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9250:	bd08      	pop	{r3, pc}

000d9252 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d9252:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9254:	2101      	movs	r1, #1
   d9256:	7c00      	ldrb	r0, [r0, #16]
   d9258:	f7fd fe68 	bl	d6f2c <HAL_USB_USART_Receive_Data>
}
   d925c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9260:	bd08      	pop	{r3, pc}

000d9262 <_ZN9USBSerial17availableForWriteEv>:
{
   d9262:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9264:	7c00      	ldrb	r0, [r0, #16]
   d9266:	f7fd fe59 	bl	d6f1c <HAL_USB_USART_Available_Data_For_Write>
}
   d926a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d926e:	bd08      	pop	{r3, pc}

000d9270 <_ZN9USBSerial9availableEv>:
{
   d9270:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9272:	7c00      	ldrb	r0, [r0, #16]
   d9274:	f7fd fe4a 	bl	d6f0c <HAL_USB_USART_Available_Data>
}
   d9278:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d927c:	bd08      	pop	{r3, pc}

000d927e <_ZN9USBSerial5writeEh>:
{
   d927e:	b513      	push	{r0, r1, r4, lr}
   d9280:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9282:	7c00      	ldrb	r0, [r0, #16]
{
   d9284:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9286:	f7fd fe49 	bl	d6f1c <HAL_USB_USART_Available_Data_For_Write>
   d928a:	2800      	cmp	r0, #0
   d928c:	9901      	ldr	r1, [sp, #4]
   d928e:	dc01      	bgt.n	d9294 <_ZN9USBSerial5writeEh+0x16>
   d9290:	7c60      	ldrb	r0, [r4, #17]
   d9292:	b120      	cbz	r0, d929e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9294:	7c20      	ldrb	r0, [r4, #16]
   d9296:	f7fd fe51 	bl	d6f3c <HAL_USB_USART_Send_Data>
   d929a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d929e:	b002      	add	sp, #8
   d92a0:	bd10      	pop	{r4, pc}

000d92a2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d92a2:	7c00      	ldrb	r0, [r0, #16]
   d92a4:	f7fd be52 	b.w	d6f4c <HAL_USB_USART_Flush_Data>

000d92a8 <_ZN9USBSerialD0Ev>:
   d92a8:	b510      	push	{r4, lr}
   d92aa:	2114      	movs	r1, #20
   d92ac:	4604      	mov	r4, r0
   d92ae:	f000 f9c8 	bl	d9642 <_ZdlPvj>
   d92b2:	4620      	mov	r0, r4
   d92b4:	bd10      	pop	{r4, pc}
	...

000d92b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d92b8:	b510      	push	{r4, lr}
   d92ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d92be:	4604      	mov	r4, r0
   d92c0:	4608      	mov	r0, r1
   d92c2:	2100      	movs	r1, #0
   d92c4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d92c8:	4b04      	ldr	r3, [pc, #16]	; (d92dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d92ca:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d92cc:	2301      	movs	r3, #1
  _serial = serial;
   d92ce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d92d0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d92d2:	4611      	mov	r1, r2
   d92d4:	f7fd fe0a 	bl	d6eec <HAL_USB_USART_Init>
}
   d92d8:	4620      	mov	r0, r4
   d92da:	bd10      	pop	{r4, pc}
   d92dc:	000dd148 	.word	0x000dd148

000d92e0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d92e0:	7c00      	ldrb	r0, [r0, #16]
   d92e2:	2200      	movs	r2, #0
   d92e4:	f7fd be0a 	b.w	d6efc <HAL_USB_USART_Begin>

000d92e8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d92e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d92ea:	2214      	movs	r2, #20
{
   d92ec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d92ee:	2100      	movs	r1, #0
   d92f0:	f001 fa5e 	bl	da7b0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d92f4:	4620      	mov	r0, r4
   d92f6:	bd10      	pop	{r4, pc}

000d92f8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d92f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d92fa:	4c10      	ldr	r4, [pc, #64]	; (d933c <_Z16_fetch_usbserialv+0x44>)
{
   d92fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d92fe:	a803      	add	r0, sp, #12
   d9300:	f7ff fff2 	bl	d92e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9304:	7821      	ldrb	r1, [r4, #0]
   d9306:	f3bf 8f5b 	dmb	ish
   d930a:	f011 0101 	ands.w	r1, r1, #1
   d930e:	d111      	bne.n	d9334 <_Z16_fetch_usbserialv+0x3c>
   d9310:	4620      	mov	r0, r4
   d9312:	9101      	str	r1, [sp, #4]
   d9314:	f7fa fec7 	bl	d40a6 <__cxa_guard_acquire>
   d9318:	9901      	ldr	r1, [sp, #4]
   d931a:	b158      	cbz	r0, d9334 <_Z16_fetch_usbserialv+0x3c>
   d931c:	aa03      	add	r2, sp, #12
   d931e:	4808      	ldr	r0, [pc, #32]	; (d9340 <_Z16_fetch_usbserialv+0x48>)
   d9320:	f7ff ffca 	bl	d92b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9324:	4620      	mov	r0, r4
   d9326:	f7fa fec3 	bl	d40b0 <__cxa_guard_release>
   d932a:	4a06      	ldr	r2, [pc, #24]	; (d9344 <_Z16_fetch_usbserialv+0x4c>)
   d932c:	4906      	ldr	r1, [pc, #24]	; (d9348 <_Z16_fetch_usbserialv+0x50>)
   d932e:	4804      	ldr	r0, [pc, #16]	; (d9340 <_Z16_fetch_usbserialv+0x48>)
   d9330:	f000 f982 	bl	d9638 <__aeabi_atexit>
	return _usbserial;
}
   d9334:	4802      	ldr	r0, [pc, #8]	; (d9340 <_Z16_fetch_usbserialv+0x48>)
   d9336:	b008      	add	sp, #32
   d9338:	bd10      	pop	{r4, pc}
   d933a:	bf00      	nop
   d933c:	2003e7a8 	.word	0x2003e7a8
   d9340:	2003e7ac 	.word	0x2003e7ac
   d9344:	2003e440 	.word	0x2003e440
   d9348:	000d9241 	.word	0x000d9241

000d934c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d934c:	b510      	push	{r4, lr}
   d934e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9350:	f001 faa7 	bl	da8a2 <strlen>
   d9354:	3801      	subs	r0, #1
   d9356:	1823      	adds	r3, r4, r0
   d9358:	4620      	mov	r0, r4
	while(i<j){
   d935a:	4283      	cmp	r3, r0
   d935c:	d906      	bls.n	d936c <_Z11str_reversePc+0x20>
		c = *i;
   d935e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9360:	7819      	ldrb	r1, [r3, #0]
   d9362:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9366:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d936a:	e7f6      	b.n	d935a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d936c:	bd10      	pop	{r4, pc}

000d936e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d936e:	b570      	push	{r4, r5, r6, lr}
   d9370:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d9372:	1e91      	subs	r1, r2, #2
   d9374:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9376:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d9378:	d822      	bhi.n	d93c0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d937a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d937c:	b16d      	cbz	r5, d939a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d937e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d9382:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d9386:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d9388:	2d09      	cmp	r5, #9
                *ptr += '0';
   d938a:	bf94      	ite	ls
   d938c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d938e:	3157      	addhi	r1, #87	; 0x57
   d9390:	b2c9      	uxtb	r1, r1
   d9392:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d9396:	4635      	mov	r5, r6
	while(a){
   d9398:	e7f0      	b.n	d937c <ultoa+0xe>
   d939a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d939c:	4423      	add	r3, r4
            *ptr++ = '0';
   d939e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d93a0:	4293      	cmp	r3, r2
   d93a2:	d902      	bls.n	d93aa <ultoa+0x3c>
            *ptr++ = '0';
   d93a4:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d93a8:	e7fa      	b.n	d93a0 <ultoa+0x32>
   d93aa:	1a1a      	subs	r2, r3, r0
   d93ac:	4283      	cmp	r3, r0
   d93ae:	bf38      	it	cc
   d93b0:	2200      	movcc	r2, #0

	*ptr = '\0';
   d93b2:	2300      	movs	r3, #0
   d93b4:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d93b6:	4620      	mov	r0, r4
   d93b8:	f7ff ffc8 	bl	d934c <_Z11str_reversePc>
	return buffer;
   d93bc:	4620      	mov	r0, r4
}
   d93be:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d93c0:	2000      	movs	r0, #0
   d93c2:	e7fc      	b.n	d93be <ultoa+0x50>

000d93c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d93c4:	4b01      	ldr	r3, [pc, #4]	; (d93cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d93c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d93c8:	4770      	bx	lr
   d93ca:	bf00      	nop
   d93cc:	2003e26c 	.word	0x2003e26c

000d93d0 <serialEventRun>:
{
   d93d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d93d2:	4b0b      	ldr	r3, [pc, #44]	; (d9400 <serialEventRun+0x30>)
   d93d4:	b143      	cbz	r3, d93e8 <serialEventRun+0x18>
   d93d6:	f7ff ff8f 	bl	d92f8 <_Z16_fetch_usbserialv>
   d93da:	6803      	ldr	r3, [r0, #0]
   d93dc:	691b      	ldr	r3, [r3, #16]
   d93de:	4798      	blx	r3
   d93e0:	2800      	cmp	r0, #0
   d93e2:	dd01      	ble.n	d93e8 <serialEventRun+0x18>
        serialEvent();
   d93e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d93e8:	4b06      	ldr	r3, [pc, #24]	; (d9404 <serialEventRun+0x34>)
   d93ea:	b143      	cbz	r3, d93fe <serialEventRun+0x2e>
   d93ec:	f7ff fefc 	bl	d91e8 <_Z22__fetch_global_Serial1v>
   d93f0:	6803      	ldr	r3, [r0, #0]
   d93f2:	691b      	ldr	r3, [r3, #16]
   d93f4:	4798      	blx	r3
   d93f6:	2800      	cmp	r0, #0
   d93f8:	dd01      	ble.n	d93fe <serialEventRun+0x2e>
        serialEvent1();
   d93fa:	f3af 8000 	nop.w
}
   d93fe:	bd08      	pop	{r3, pc}
	...

000d9408 <_post_loop>:
{
   d9408:	b508      	push	{r3, lr}
	serialEventRun();
   d940a:	f7ff ffe1 	bl	d93d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d940e:	f7fd fc15 	bl	d6c3c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9412:	4b01      	ldr	r3, [pc, #4]	; (d9418 <_post_loop+0x10>)
   d9414:	6018      	str	r0, [r3, #0]
}
   d9416:	bd08      	pop	{r3, pc}
   d9418:	2003e7d4 	.word	0x2003e7d4

000d941c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d941c:	4802      	ldr	r0, [pc, #8]	; (d9428 <_Z33system_initialize_user_backup_ramv+0xc>)
   d941e:	4a03      	ldr	r2, [pc, #12]	; (d942c <_Z33system_initialize_user_backup_ramv+0x10>)
   d9420:	4903      	ldr	r1, [pc, #12]	; (d9430 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9422:	1a12      	subs	r2, r2, r0
   d9424:	f001 b99c 	b.w	da760 <memcpy>
   d9428:	2003f400 	.word	0x2003f400
   d942c:	2003f404 	.word	0x2003f404
   d9430:	000dd518 	.word	0x000dd518

000d9434 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9434:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9436:	2300      	movs	r3, #0
   d9438:	9300      	str	r3, [sp, #0]
   d943a:	461a      	mov	r2, r3
   d943c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9440:	f7fd fdde 	bl	d7000 <system_ctrl_set_result>
}
   d9444:	b003      	add	sp, #12
   d9446:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d944c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d944c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d944e:	8843      	ldrh	r3, [r0, #2]
   d9450:	2b0a      	cmp	r3, #10
   d9452:	d008      	beq.n	d9466 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9454:	2b50      	cmp	r3, #80	; 0x50
   d9456:	d10b      	bne.n	d9470 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9458:	4b09      	ldr	r3, [pc, #36]	; (d9480 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d945a:	681b      	ldr	r3, [r3, #0]
   d945c:	b14b      	cbz	r3, d9472 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d945e:	b003      	add	sp, #12
   d9460:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9464:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9466:	f7ff ffe5 	bl	d9434 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d946a:	b003      	add	sp, #12
   d946c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9470:	2300      	movs	r3, #0
   d9472:	9300      	str	r3, [sp, #0]
   d9474:	461a      	mov	r2, r3
   d9476:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d947a:	f7fd fdc1 	bl	d7000 <system_ctrl_set_result>
}
   d947e:	e7f4      	b.n	d946a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d9480:	2003e7c4 	.word	0x2003e7c4

000d9484 <module_user_init_hook>:
{
   d9484:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9486:	4c12      	ldr	r4, [pc, #72]	; (d94d0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9488:	4812      	ldr	r0, [pc, #72]	; (d94d4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d948a:	4d13      	ldr	r5, [pc, #76]	; (d94d8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d948c:	2100      	movs	r1, #0
   d948e:	f7fd fe89 	bl	d71a4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9492:	6823      	ldr	r3, [r4, #0]
   d9494:	42ab      	cmp	r3, r5
   d9496:	4b11      	ldr	r3, [pc, #68]	; (d94dc <module_user_init_hook+0x58>)
   d9498:	bf0c      	ite	eq
   d949a:	2201      	moveq	r2, #1
   d949c:	2200      	movne	r2, #0
   d949e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d94a0:	d002      	beq.n	d94a8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d94a2:	f7ff ffbb 	bl	d941c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d94a6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d94a8:	f7fd fbb8 	bl	d6c1c <HAL_RNG_GetRandomNumber>
   d94ac:	4604      	mov	r4, r0
    srand(seed);
   d94ae:	f001 f997 	bl	da7e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d94b2:	4b0b      	ldr	r3, [pc, #44]	; (d94e0 <module_user_init_hook+0x5c>)
   d94b4:	b113      	cbz	r3, d94bc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d94b6:	4620      	mov	r0, r4
   d94b8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d94bc:	2100      	movs	r1, #0
   d94be:	4808      	ldr	r0, [pc, #32]	; (d94e0 <module_user_init_hook+0x5c>)
   d94c0:	f7fd fdd0 	bl	d7064 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d94c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d94c8:	4806      	ldr	r0, [pc, #24]	; (d94e4 <module_user_init_hook+0x60>)
   d94ca:	2100      	movs	r1, #0
   d94cc:	f7fd bd8e 	b.w	d6fec <system_ctrl_set_app_request_handler>
   d94d0:	2003f400 	.word	0x2003f400
   d94d4:	000d93c5 	.word	0x000d93c5
   d94d8:	9a271c1e 	.word	0x9a271c1e
   d94dc:	2003e7c0 	.word	0x2003e7c0
   d94e0:	00000000 	.word	0x00000000
   d94e4:	000d944d 	.word	0x000d944d

000d94e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d94e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d94ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d94ec:	d902      	bls.n	d94f4 <pinAvailable+0xc>
    return false;
   d94ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d94f0:	b002      	add	sp, #8
   d94f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d94f4:	f1a0 030b 	sub.w	r3, r0, #11
   d94f8:	2b02      	cmp	r3, #2
   d94fa:	d81a      	bhi.n	d9532 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d94fc:	4c17      	ldr	r4, [pc, #92]	; (d955c <pinAvailable+0x74>)
   d94fe:	7821      	ldrb	r1, [r4, #0]
   d9500:	f3bf 8f5b 	dmb	ish
   d9504:	f011 0101 	ands.w	r1, r1, #1
   d9508:	d10b      	bne.n	d9522 <pinAvailable+0x3a>
   d950a:	4620      	mov	r0, r4
   d950c:	9101      	str	r1, [sp, #4]
   d950e:	f7fa fdca 	bl	d40a6 <__cxa_guard_acquire>
   d9512:	9901      	ldr	r1, [sp, #4]
   d9514:	b128      	cbz	r0, d9522 <pinAvailable+0x3a>
   d9516:	4812      	ldr	r0, [pc, #72]	; (d9560 <pinAvailable+0x78>)
   d9518:	f7fe ff0e 	bl	d8338 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d951c:	4620      	mov	r0, r4
   d951e:	f7fa fdc7 	bl	d40b0 <__cxa_guard_release>
   d9522:	4b0f      	ldr	r3, [pc, #60]	; (d9560 <pinAvailable+0x78>)
   d9524:	7818      	ldrb	r0, [r3, #0]
   d9526:	f7fd fc99 	bl	d6e5c <hal_spi_is_enabled>
   d952a:	2800      	cmp	r0, #0
   d952c:	d1df      	bne.n	d94ee <pinAvailable+0x6>
  return true; // 'pin' is available
   d952e:	2001      	movs	r0, #1
   d9530:	e7de      	b.n	d94f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9532:	2801      	cmp	r0, #1
   d9534:	d809      	bhi.n	d954a <pinAvailable+0x62>
   d9536:	f000 f857 	bl	d95e8 <_Z19__fetch_global_Wirev>
   d953a:	2100      	movs	r1, #0
   d953c:	7c00      	ldrb	r0, [r0, #16]
   d953e:	f7fd fbf5 	bl	d6d2c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9542:	f080 0001 	eor.w	r0, r0, #1
   d9546:	b2c0      	uxtb	r0, r0
   d9548:	e7d2      	b.n	d94f0 <pinAvailable+0x8>
   d954a:	3809      	subs	r0, #9
   d954c:	2801      	cmp	r0, #1
   d954e:	d8ee      	bhi.n	d952e <pinAvailable+0x46>
   d9550:	f7ff fe4a 	bl	d91e8 <_Z22__fetch_global_Serial1v>
   d9554:	7c00      	ldrb	r0, [r0, #16]
   d9556:	f7fd fcb9 	bl	d6ecc <hal_usart_is_enabled>
   d955a:	e7f2      	b.n	d9542 <pinAvailable+0x5a>
   d955c:	2003e7c8 	.word	0x2003e7c8
   d9560:	2003e7cc 	.word	0x2003e7cc

000d9564 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9564:	2823      	cmp	r0, #35	; 0x23
{
   d9566:	b538      	push	{r3, r4, r5, lr}
   d9568:	4604      	mov	r4, r0
   d956a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d956c:	d80a      	bhi.n	d9584 <pinMode+0x20>
   d956e:	29ff      	cmp	r1, #255	; 0xff
   d9570:	d008      	beq.n	d9584 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d9572:	f7ff ffb9 	bl	d94e8 <pinAvailable>
   d9576:	b128      	cbz	r0, d9584 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9578:	4629      	mov	r1, r5
   d957a:	4620      	mov	r0, r4
}
   d957c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d9580:	f7fd bb6c 	b.w	d6c5c <HAL_Pin_Mode>
}
   d9584:	bd38      	pop	{r3, r4, r5, pc}

000d9586 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9586:	b538      	push	{r3, r4, r5, lr}
   d9588:	4604      	mov	r4, r0
   d958a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d958c:	f7fd fb6e 	bl	d6c6c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9590:	28ff      	cmp	r0, #255	; 0xff
   d9592:	d010      	beq.n	d95b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9594:	2806      	cmp	r0, #6
   d9596:	d804      	bhi.n	d95a2 <digitalWrite+0x1c>
   d9598:	234d      	movs	r3, #77	; 0x4d
   d959a:	fa23 f000 	lsr.w	r0, r3, r0
   d959e:	07c3      	lsls	r3, r0, #31
   d95a0:	d409      	bmi.n	d95b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d95a2:	4620      	mov	r0, r4
   d95a4:	f7ff ffa0 	bl	d94e8 <pinAvailable>
   d95a8:	b128      	cbz	r0, d95b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d95aa:	4629      	mov	r1, r5
   d95ac:	4620      	mov	r0, r4
}
   d95ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d95b2:	f7fd bb63 	b.w	d6c7c <HAL_GPIO_Write>
}
   d95b6:	bd38      	pop	{r3, r4, r5, pc}

000d95b8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d95b8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d95ba:	2300      	movs	r3, #0
   d95bc:	2520      	movs	r5, #32
   d95be:	8043      	strh	r3, [r0, #2]
   d95c0:	2314      	movs	r3, #20
{
   d95c2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d95c4:	8003      	strh	r3, [r0, #0]
   d95c6:	6085      	str	r5, [r0, #8]
   d95c8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d95ca:	4906      	ldr	r1, [pc, #24]	; (d95e4 <_Z17acquireWireBufferv+0x2c>)
   d95cc:	4628      	mov	r0, r5
   d95ce:	f000 f83c 	bl	d964a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d95d2:	4904      	ldr	r1, [pc, #16]	; (d95e4 <_Z17acquireWireBufferv+0x2c>)
	};
   d95d4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d95d6:	4628      	mov	r0, r5
   d95d8:	f000 f837 	bl	d964a <_ZnajRKSt9nothrow_t>
	};
   d95dc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d95de:	4620      	mov	r0, r4
   d95e0:	bd38      	pop	{r3, r4, r5, pc}
   d95e2:	bf00      	nop
   d95e4:	000dd170 	.word	0x000dd170

000d95e8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d95e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d95ea:	4d0f      	ldr	r5, [pc, #60]	; (d9628 <_Z19__fetch_global_Wirev+0x40>)
   d95ec:	7829      	ldrb	r1, [r5, #0]
   d95ee:	f3bf 8f5b 	dmb	ish
   d95f2:	f011 0401 	ands.w	r4, r1, #1
{
   d95f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d95f8:	d113      	bne.n	d9622 <_Z19__fetch_global_Wirev+0x3a>
   d95fa:	4628      	mov	r0, r5
   d95fc:	f7fa fd53 	bl	d40a6 <__cxa_guard_acquire>
   d9600:	b178      	cbz	r0, d9622 <_Z19__fetch_global_Wirev+0x3a>
   d9602:	a801      	add	r0, sp, #4
   d9604:	f7ff ffd8 	bl	d95b8 <_Z17acquireWireBufferv>
   d9608:	aa01      	add	r2, sp, #4
   d960a:	4621      	mov	r1, r4
   d960c:	4807      	ldr	r0, [pc, #28]	; (d962c <_Z19__fetch_global_Wirev+0x44>)
   d960e:	f7fe f969 	bl	d78e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9612:	4628      	mov	r0, r5
   d9614:	f7fa fd4c 	bl	d40b0 <__cxa_guard_release>
   d9618:	4a05      	ldr	r2, [pc, #20]	; (d9630 <_Z19__fetch_global_Wirev+0x48>)
   d961a:	4906      	ldr	r1, [pc, #24]	; (d9634 <_Z19__fetch_global_Wirev+0x4c>)
   d961c:	4803      	ldr	r0, [pc, #12]	; (d962c <_Z19__fetch_global_Wirev+0x44>)
   d961e:	f000 f80b 	bl	d9638 <__aeabi_atexit>
	return wire;
}
   d9622:	4802      	ldr	r0, [pc, #8]	; (d962c <_Z19__fetch_global_Wirev+0x44>)
   d9624:	b007      	add	sp, #28
   d9626:	bd30      	pop	{r4, r5, pc}
   d9628:	2003e7d8 	.word	0x2003e7d8
   d962c:	2003e7dc 	.word	0x2003e7dc
   d9630:	2003e440 	.word	0x2003e440
   d9634:	000d788d 	.word	0x000d788d

000d9638 <__aeabi_atexit>:
   d9638:	460b      	mov	r3, r1
   d963a:	4601      	mov	r1, r0
   d963c:	4618      	mov	r0, r3
   d963e:	f001 b881 	b.w	da744 <__cxa_atexit>

000d9642 <_ZdlPvj>:
   d9642:	f7fa bd2c 	b.w	d409e <_ZdlPv>

000d9646 <_ZnwjRKSt9nothrow_t>:
   d9646:	f7fa bd26 	b.w	d4096 <_Znwj>

000d964a <_ZnajRKSt9nothrow_t>:
   d964a:	f7fa bd26 	b.w	d409a <_Znaj>

000d964e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d964e:	68c3      	ldr	r3, [r0, #12]
   d9650:	689a      	ldr	r2, [r3, #8]
   d9652:	60c2      	str	r2, [r0, #12]
   d9654:	b510      	push	{r4, lr}
   d9656:	b102      	cbz	r2, d965a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   d9658:	6050      	str	r0, [r2, #4]
   d965a:	6842      	ldr	r2, [r0, #4]
   d965c:	605a      	str	r2, [r3, #4]
   d965e:	680c      	ldr	r4, [r1, #0]
   d9660:	4284      	cmp	r4, r0
   d9662:	d103      	bne.n	d966c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   d9664:	600b      	str	r3, [r1, #0]
   d9666:	6098      	str	r0, [r3, #8]
   d9668:	6043      	str	r3, [r0, #4]
   d966a:	bd10      	pop	{r4, pc}
   d966c:	6891      	ldr	r1, [r2, #8]
   d966e:	4281      	cmp	r1, r0
   d9670:	bf0c      	ite	eq
   d9672:	6093      	streq	r3, [r2, #8]
   d9674:	60d3      	strne	r3, [r2, #12]
   d9676:	e7f6      	b.n	d9666 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000d9678 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d9678:	6883      	ldr	r3, [r0, #8]
   d967a:	68da      	ldr	r2, [r3, #12]
   d967c:	6082      	str	r2, [r0, #8]
   d967e:	b510      	push	{r4, lr}
   d9680:	b102      	cbz	r2, d9684 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   d9682:	6050      	str	r0, [r2, #4]
   d9684:	6842      	ldr	r2, [r0, #4]
   d9686:	605a      	str	r2, [r3, #4]
   d9688:	680c      	ldr	r4, [r1, #0]
   d968a:	4284      	cmp	r4, r0
   d968c:	d103      	bne.n	d9696 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   d968e:	600b      	str	r3, [r1, #0]
   d9690:	60d8      	str	r0, [r3, #12]
   d9692:	6043      	str	r3, [r0, #4]
   d9694:	bd10      	pop	{r4, pc}
   d9696:	68d1      	ldr	r1, [r2, #12]
   d9698:	4281      	cmp	r1, r0
   d969a:	bf0c      	ite	eq
   d969c:	60d3      	streq	r3, [r2, #12]
   d969e:	6093      	strne	r3, [r2, #8]
   d96a0:	e7f6      	b.n	d9690 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000d96a2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d96a2:	7803      	ldrb	r3, [r0, #0]
   d96a4:	b933      	cbnz	r3, d96b4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d96a6:	6843      	ldr	r3, [r0, #4]
   d96a8:	685b      	ldr	r3, [r3, #4]
   d96aa:	4283      	cmp	r3, r0
   d96ac:	d102      	bne.n	d96b4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d96ae:	68db      	ldr	r3, [r3, #12]
   d96b0:	4618      	mov	r0, r3
   d96b2:	4770      	bx	lr
   d96b4:	6882      	ldr	r2, [r0, #8]
   d96b6:	b122      	cbz	r2, d96c2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   d96b8:	4613      	mov	r3, r2
   d96ba:	68d2      	ldr	r2, [r2, #12]
   d96bc:	2a00      	cmp	r2, #0
   d96be:	d1fb      	bne.n	d96b8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   d96c0:	e7f6      	b.n	d96b0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d96c2:	6843      	ldr	r3, [r0, #4]
   d96c4:	689a      	ldr	r2, [r3, #8]
   d96c6:	4282      	cmp	r2, r0
   d96c8:	d1f2      	bne.n	d96b0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d96ca:	4618      	mov	r0, r3
   d96cc:	685b      	ldr	r3, [r3, #4]
   d96ce:	e7f9      	b.n	d96c4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000d96d0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   d96d0:	68c3      	ldr	r3, [r0, #12]
   d96d2:	b123      	cbz	r3, d96de <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   d96d4:	4618      	mov	r0, r3
   d96d6:	689b      	ldr	r3, [r3, #8]
   d96d8:	2b00      	cmp	r3, #0
   d96da:	d1fb      	bne.n	d96d4 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   d96dc:	4770      	bx	lr
   d96de:	6843      	ldr	r3, [r0, #4]
   d96e0:	68da      	ldr	r2, [r3, #12]
   d96e2:	4282      	cmp	r2, r0
   d96e4:	d102      	bne.n	d96ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   d96e6:	4618      	mov	r0, r3
   d96e8:	685b      	ldr	r3, [r3, #4]
   d96ea:	e7f9      	b.n	d96e0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   d96ec:	68c2      	ldr	r2, [r0, #12]
   d96ee:	4293      	cmp	r3, r2
   d96f0:	bf18      	it	ne
   d96f2:	4618      	movne	r0, r3
   d96f4:	4770      	bx	lr

000d96f6 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d96f6:	f7ff bfd4 	b.w	d96a2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000d96fa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   d96fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d96fe:	461e      	mov	r6, r3
   d9700:	f103 0804 	add.w	r8, r3, #4
   d9704:	2300      	movs	r3, #0
   d9706:	e9c1 3302 	strd	r3, r3, [r1, #8]
   d970a:	460c      	mov	r4, r1
   d970c:	604a      	str	r2, [r1, #4]
   d970e:	700b      	strb	r3, [r1, #0]
   d9710:	b300      	cbz	r0, d9754 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   d9712:	4296      	cmp	r6, r2
   d9714:	6091      	str	r1, [r2, #8]
   d9716:	d118      	bne.n	d974a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   d9718:	6071      	str	r1, [r6, #4]
   d971a:	60f4      	str	r4, [r6, #12]
   d971c:	2701      	movs	r7, #1
   d971e:	f04f 0900 	mov.w	r9, #0
   d9722:	6873      	ldr	r3, [r6, #4]
   d9724:	42a3      	cmp	r3, r4
   d9726:	d03f      	beq.n	d97a8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   d9728:	6860      	ldr	r0, [r4, #4]
   d972a:	7802      	ldrb	r2, [r0, #0]
   d972c:	2a00      	cmp	r2, #0
   d972e:	d13c      	bne.n	d97aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   d9730:	6845      	ldr	r5, [r0, #4]
   d9732:	68ab      	ldr	r3, [r5, #8]
   d9734:	4298      	cmp	r0, r3
   d9736:	d123      	bne.n	d9780 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   d9738:	68eb      	ldr	r3, [r5, #12]
   d973a:	b183      	cbz	r3, d975e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d973c:	781a      	ldrb	r2, [r3, #0]
   d973e:	b972      	cbnz	r2, d975e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d9740:	7007      	strb	r7, [r0, #0]
   d9742:	701f      	strb	r7, [r3, #0]
   d9744:	702a      	strb	r2, [r5, #0]
   d9746:	462c      	mov	r4, r5
   d9748:	e7eb      	b.n	d9722 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   d974a:	68b3      	ldr	r3, [r6, #8]
   d974c:	4293      	cmp	r3, r2
   d974e:	d1e5      	bne.n	d971c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d9750:	60b1      	str	r1, [r6, #8]
   d9752:	e7e3      	b.n	d971c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d9754:	60d1      	str	r1, [r2, #12]
   d9756:	68f3      	ldr	r3, [r6, #12]
   d9758:	4293      	cmp	r3, r2
   d975a:	d1df      	bne.n	d971c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d975c:	e7dd      	b.n	d971a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   d975e:	68c3      	ldr	r3, [r0, #12]
   d9760:	42a3      	cmp	r3, r4
   d9762:	d103      	bne.n	d976c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   d9764:	4641      	mov	r1, r8
   d9766:	f7ff ff72 	bl	d964e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d976a:	4604      	mov	r4, r0
   d976c:	6863      	ldr	r3, [r4, #4]
   d976e:	4641      	mov	r1, r8
   d9770:	701f      	strb	r7, [r3, #0]
   d9772:	4628      	mov	r0, r5
   d9774:	f885 9000 	strb.w	r9, [r5]
   d9778:	f7ff ff7e 	bl	d9678 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d977c:	4625      	mov	r5, r4
   d977e:	e7e2      	b.n	d9746 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   d9780:	b113      	cbz	r3, d9788 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   d9782:	781a      	ldrb	r2, [r3, #0]
   d9784:	2a00      	cmp	r2, #0
   d9786:	d0db      	beq.n	d9740 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   d9788:	6883      	ldr	r3, [r0, #8]
   d978a:	42a3      	cmp	r3, r4
   d978c:	d103      	bne.n	d9796 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   d978e:	4641      	mov	r1, r8
   d9790:	f7ff ff72 	bl	d9678 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d9794:	4604      	mov	r4, r0
   d9796:	6863      	ldr	r3, [r4, #4]
   d9798:	4641      	mov	r1, r8
   d979a:	701f      	strb	r7, [r3, #0]
   d979c:	4628      	mov	r0, r5
   d979e:	f885 9000 	strb.w	r9, [r5]
   d97a2:	f7ff ff54 	bl	d964e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d97a6:	e7e9      	b.n	d977c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   d97a8:	4623      	mov	r3, r4
   d97aa:	2201      	movs	r2, #1
   d97ac:	701a      	strb	r2, [r3, #0]
   d97ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d97b2 <_ZSt25__throw_bad_function_callv>:
   d97b2:	b508      	push	{r3, lr}
   d97b4:	f7fd fcde 	bl	d7174 <abort>

000d97b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d97b8:	4901      	ldr	r1, [pc, #4]	; (d97c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d97ba:	f000 b8f9 	b.w	d99b0 <_ZNKSt9type_infoeqERKS_>
   d97be:	bf00      	nop
   d97c0:	000dd18c 	.word	0x000dd18c

000d97c4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d97c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d97c6:	2400      	movs	r4, #0
   d97c8:	2310      	movs	r3, #16
   d97ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d97ce:	6803      	ldr	r3, [r0, #0]
   d97d0:	9400      	str	r4, [sp, #0]
   d97d2:	699e      	ldr	r6, [r3, #24]
   d97d4:	f88d 4004 	strb.w	r4, [sp, #4]
   d97d8:	4615      	mov	r5, r2
   d97da:	466b      	mov	r3, sp
   d97dc:	6812      	ldr	r2, [r2, #0]
   d97de:	47b0      	blx	r6
   d97e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d97e4:	f003 0306 	and.w	r3, r3, #6
   d97e8:	2b06      	cmp	r3, #6
   d97ea:	bf03      	ittte	eq
   d97ec:	9b00      	ldreq	r3, [sp, #0]
   d97ee:	602b      	streq	r3, [r5, #0]
   d97f0:	2001      	moveq	r0, #1
   d97f2:	4620      	movne	r0, r4
   d97f4:	b004      	add	sp, #16
   d97f6:	bd70      	pop	{r4, r5, r6, pc}

000d97f8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d97f8:	9800      	ldr	r0, [sp, #0]
   d97fa:	4290      	cmp	r0, r2
   d97fc:	bf14      	ite	ne
   d97fe:	2001      	movne	r0, #1
   d9800:	2006      	moveq	r0, #6
   d9802:	4770      	bx	lr

000d9804 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d9804:	b510      	push	{r4, lr}
   d9806:	4b03      	ldr	r3, [pc, #12]	; (d9814 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d9808:	6003      	str	r3, [r0, #0]
   d980a:	4604      	mov	r4, r0
   d980c:	f000 f8cd 	bl	d99aa <_ZNSt9type_infoD1Ev>
   d9810:	4620      	mov	r0, r4
   d9812:	bd10      	pop	{r4, pc}
   d9814:	000dd1cc 	.word	0x000dd1cc

000d9818 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d9818:	b510      	push	{r4, lr}
   d981a:	4604      	mov	r4, r0
   d981c:	f7ff fff2 	bl	d9804 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d9820:	4620      	mov	r0, r4
   d9822:	2108      	movs	r1, #8
   d9824:	f7ff ff0d 	bl	d9642 <_ZdlPvj>
   d9828:	4620      	mov	r0, r4
   d982a:	bd10      	pop	{r4, pc}

000d982c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9830:	461f      	mov	r7, r3
   d9832:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d9836:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d983a:	4598      	cmp	r8, r3
   d983c:	4606      	mov	r6, r0
   d983e:	4615      	mov	r5, r2
   d9840:	d107      	bne.n	d9852 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d9842:	9907      	ldr	r1, [sp, #28]
   d9844:	f000 f8b4 	bl	d99b0 <_ZNKSt9type_infoeqERKS_>
   d9848:	b118      	cbz	r0, d9852 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d984a:	7165      	strb	r5, [r4, #5]
   d984c:	2000      	movs	r0, #0
   d984e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9852:	4639      	mov	r1, r7
   d9854:	4630      	mov	r0, r6
   d9856:	f000 f8ab 	bl	d99b0 <_ZNKSt9type_infoeqERKS_>
   d985a:	2800      	cmp	r0, #0
   d985c:	d0f6      	beq.n	d984c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d985e:	2301      	movs	r3, #1
   d9860:	f8c4 8000 	str.w	r8, [r4]
   d9864:	7125      	strb	r5, [r4, #4]
   d9866:	71a3      	strb	r3, [r4, #6]
   d9868:	e7f0      	b.n	d984c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d986a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d986a:	b538      	push	{r3, r4, r5, lr}
   d986c:	4615      	mov	r5, r2
   d986e:	461c      	mov	r4, r3
   d9870:	f000 f89e 	bl	d99b0 <_ZNKSt9type_infoeqERKS_>
   d9874:	b120      	cbz	r0, d9880 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d9876:	2308      	movs	r3, #8
   d9878:	60e3      	str	r3, [r4, #12]
   d987a:	2306      	movs	r3, #6
   d987c:	6025      	str	r5, [r4, #0]
   d987e:	7123      	strb	r3, [r4, #4]
   d9880:	bd38      	pop	{r3, r4, r5, pc}

000d9882 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d9882:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9884:	4605      	mov	r5, r0
   d9886:	460c      	mov	r4, r1
   d9888:	9201      	str	r2, [sp, #4]
   d988a:	461e      	mov	r6, r3
   d988c:	f000 f890 	bl	d99b0 <_ZNKSt9type_infoeqERKS_>
   d9890:	b950      	cbnz	r0, d98a8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d9892:	2e03      	cmp	r6, #3
   d9894:	d808      	bhi.n	d98a8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d9896:	6823      	ldr	r3, [r4, #0]
   d9898:	9a01      	ldr	r2, [sp, #4]
   d989a:	695b      	ldr	r3, [r3, #20]
   d989c:	4629      	mov	r1, r5
   d989e:	4620      	mov	r0, r4
   d98a0:	b002      	add	sp, #8
   d98a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d98a6:	4718      	bx	r3
   d98a8:	b002      	add	sp, #8
   d98aa:	bd70      	pop	{r4, r5, r6, pc}

000d98ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d98ac:	b510      	push	{r4, lr}
   d98ae:	4b03      	ldr	r3, [pc, #12]	; (d98bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d98b0:	6003      	str	r3, [r0, #0]
   d98b2:	4604      	mov	r4, r0
   d98b4:	f7ff ffa6 	bl	d9804 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d98b8:	4620      	mov	r0, r4
   d98ba:	bd10      	pop	{r4, pc}
   d98bc:	000dd22c 	.word	0x000dd22c

000d98c0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d98c0:	b510      	push	{r4, lr}
   d98c2:	4604      	mov	r4, r0
   d98c4:	f7ff fff2 	bl	d98ac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d98c8:	4620      	mov	r0, r4
   d98ca:	210c      	movs	r1, #12
   d98cc:	f7ff feb9 	bl	d9642 <_ZdlPvj>
   d98d0:	4620      	mov	r0, r4
   d98d2:	bd10      	pop	{r4, pc}

000d98d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d98d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d98d6:	9f08      	ldr	r7, [sp, #32]
   d98d8:	4297      	cmp	r7, r2
   d98da:	4605      	mov	r5, r0
   d98dc:	460e      	mov	r6, r1
   d98de:	4614      	mov	r4, r2
   d98e0:	d00a      	beq.n	d98f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d98e2:	68a8      	ldr	r0, [r5, #8]
   d98e4:	6802      	ldr	r2, [r0, #0]
   d98e6:	9708      	str	r7, [sp, #32]
   d98e8:	6a15      	ldr	r5, [r2, #32]
   d98ea:	4631      	mov	r1, r6
   d98ec:	4622      	mov	r2, r4
   d98ee:	46ac      	mov	ip, r5
   d98f0:	b003      	add	sp, #12
   d98f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d98f6:	4760      	bx	ip
   d98f8:	4619      	mov	r1, r3
   d98fa:	9301      	str	r3, [sp, #4]
   d98fc:	f000 f858 	bl	d99b0 <_ZNKSt9type_infoeqERKS_>
   d9900:	9b01      	ldr	r3, [sp, #4]
   d9902:	2800      	cmp	r0, #0
   d9904:	d0ed      	beq.n	d98e2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d9906:	2006      	movs	r0, #6
   d9908:	b003      	add	sp, #12
   d990a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d990c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d990c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9910:	460d      	mov	r5, r1
   d9912:	4619      	mov	r1, r3
   d9914:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d9918:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d991c:	4681      	mov	r9, r0
   d991e:	4617      	mov	r7, r2
   d9920:	4698      	mov	r8, r3
   d9922:	f000 f845 	bl	d99b0 <_ZNKSt9type_infoeqERKS_>
   d9926:	b190      	cbz	r0, d994e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d9928:	2d00      	cmp	r5, #0
   d992a:	6034      	str	r4, [r6, #0]
   d992c:	7137      	strb	r7, [r6, #4]
   d992e:	db09      	blt.n	d9944 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d9930:	1961      	adds	r1, r4, r5
   d9932:	458a      	cmp	sl, r1
   d9934:	bf0c      	ite	eq
   d9936:	2106      	moveq	r1, #6
   d9938:	2101      	movne	r1, #1
   d993a:	71b1      	strb	r1, [r6, #6]
   d993c:	2000      	movs	r0, #0
   d993e:	b001      	add	sp, #4
   d9940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9944:	3502      	adds	r5, #2
   d9946:	d1f9      	bne.n	d993c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9948:	2301      	movs	r3, #1
   d994a:	71b3      	strb	r3, [r6, #6]
   d994c:	e7f6      	b.n	d993c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d994e:	4554      	cmp	r4, sl
   d9950:	d106      	bne.n	d9960 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d9952:	4659      	mov	r1, fp
   d9954:	4648      	mov	r0, r9
   d9956:	f000 f82b 	bl	d99b0 <_ZNKSt9type_infoeqERKS_>
   d995a:	b108      	cbz	r0, d9960 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d995c:	7177      	strb	r7, [r6, #5]
   d995e:	e7ed      	b.n	d993c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9960:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d9964:	6803      	ldr	r3, [r0, #0]
   d9966:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d996a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d996e:	69dc      	ldr	r4, [r3, #28]
   d9970:	463a      	mov	r2, r7
   d9972:	4643      	mov	r3, r8
   d9974:	4629      	mov	r1, r5
   d9976:	46a4      	mov	ip, r4
   d9978:	b001      	add	sp, #4
   d997a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d997e:	4760      	bx	ip

000d9980 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d9980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9984:	4607      	mov	r7, r0
   d9986:	460c      	mov	r4, r1
   d9988:	4615      	mov	r5, r2
   d998a:	461e      	mov	r6, r3
   d998c:	f7ff ff6d 	bl	d986a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d9990:	b948      	cbnz	r0, d99a6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d9992:	68b8      	ldr	r0, [r7, #8]
   d9994:	6803      	ldr	r3, [r0, #0]
   d9996:	699f      	ldr	r7, [r3, #24]
   d9998:	462a      	mov	r2, r5
   d999a:	4633      	mov	r3, r6
   d999c:	4621      	mov	r1, r4
   d999e:	46bc      	mov	ip, r7
   d99a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d99a4:	4760      	bx	ip
   d99a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d99aa <_ZNSt9type_infoD1Ev>:
   d99aa:	4770      	bx	lr

000d99ac <_ZNKSt9type_info14__is_pointer_pEv>:
   d99ac:	2000      	movs	r0, #0
   d99ae:	4770      	bx	lr

000d99b0 <_ZNKSt9type_infoeqERKS_>:
   d99b0:	4281      	cmp	r1, r0
   d99b2:	b508      	push	{r3, lr}
   d99b4:	d00e      	beq.n	d99d4 <_ZNKSt9type_infoeqERKS_+0x24>
   d99b6:	6840      	ldr	r0, [r0, #4]
   d99b8:	7803      	ldrb	r3, [r0, #0]
   d99ba:	2b2a      	cmp	r3, #42	; 0x2a
   d99bc:	d00c      	beq.n	d99d8 <_ZNKSt9type_infoeqERKS_+0x28>
   d99be:	6849      	ldr	r1, [r1, #4]
   d99c0:	780b      	ldrb	r3, [r1, #0]
   d99c2:	2b2a      	cmp	r3, #42	; 0x2a
   d99c4:	bf08      	it	eq
   d99c6:	3101      	addeq	r1, #1
   d99c8:	f000 ff3b 	bl	da842 <strcmp>
   d99cc:	fab0 f080 	clz	r0, r0
   d99d0:	0940      	lsrs	r0, r0, #5
   d99d2:	bd08      	pop	{r3, pc}
   d99d4:	2001      	movs	r0, #1
   d99d6:	e7fc      	b.n	d99d2 <_ZNKSt9type_infoeqERKS_+0x22>
   d99d8:	2000      	movs	r0, #0
   d99da:	e7fa      	b.n	d99d2 <_ZNKSt9type_infoeqERKS_+0x22>
   d99dc:	0000      	movs	r0, r0
	...

000d99e0 <nan>:
   d99e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d99e8 <nan+0x8>
   d99e4:	4770      	bx	lr
   d99e6:	bf00      	nop
   d99e8:	00000000 	.word	0x00000000
   d99ec:	7ff80000 	.word	0x7ff80000

000d99f0 <__aeabi_drsub>:
   d99f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d99f4:	e002      	b.n	d99fc <__adddf3>
   d99f6:	bf00      	nop

000d99f8 <__aeabi_dsub>:
   d99f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d99fc <__adddf3>:
   d99fc:	b530      	push	{r4, r5, lr}
   d99fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9a02:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9a06:	ea94 0f05 	teq	r4, r5
   d9a0a:	bf08      	it	eq
   d9a0c:	ea90 0f02 	teqeq	r0, r2
   d9a10:	bf1f      	itttt	ne
   d9a12:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9a16:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9a1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9a1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9a22:	f000 80e2 	beq.w	d9bea <__adddf3+0x1ee>
   d9a26:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9a2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9a2e:	bfb8      	it	lt
   d9a30:	426d      	neglt	r5, r5
   d9a32:	dd0c      	ble.n	d9a4e <__adddf3+0x52>
   d9a34:	442c      	add	r4, r5
   d9a36:	ea80 0202 	eor.w	r2, r0, r2
   d9a3a:	ea81 0303 	eor.w	r3, r1, r3
   d9a3e:	ea82 0000 	eor.w	r0, r2, r0
   d9a42:	ea83 0101 	eor.w	r1, r3, r1
   d9a46:	ea80 0202 	eor.w	r2, r0, r2
   d9a4a:	ea81 0303 	eor.w	r3, r1, r3
   d9a4e:	2d36      	cmp	r5, #54	; 0x36
   d9a50:	bf88      	it	hi
   d9a52:	bd30      	pophi	{r4, r5, pc}
   d9a54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9a58:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9a5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9a60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9a64:	d002      	beq.n	d9a6c <__adddf3+0x70>
   d9a66:	4240      	negs	r0, r0
   d9a68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9a6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9a70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9a74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9a78:	d002      	beq.n	d9a80 <__adddf3+0x84>
   d9a7a:	4252      	negs	r2, r2
   d9a7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9a80:	ea94 0f05 	teq	r4, r5
   d9a84:	f000 80a7 	beq.w	d9bd6 <__adddf3+0x1da>
   d9a88:	f1a4 0401 	sub.w	r4, r4, #1
   d9a8c:	f1d5 0e20 	rsbs	lr, r5, #32
   d9a90:	db0d      	blt.n	d9aae <__adddf3+0xb2>
   d9a92:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9a96:	fa22 f205 	lsr.w	r2, r2, r5
   d9a9a:	1880      	adds	r0, r0, r2
   d9a9c:	f141 0100 	adc.w	r1, r1, #0
   d9aa0:	fa03 f20e 	lsl.w	r2, r3, lr
   d9aa4:	1880      	adds	r0, r0, r2
   d9aa6:	fa43 f305 	asr.w	r3, r3, r5
   d9aaa:	4159      	adcs	r1, r3
   d9aac:	e00e      	b.n	d9acc <__adddf3+0xd0>
   d9aae:	f1a5 0520 	sub.w	r5, r5, #32
   d9ab2:	f10e 0e20 	add.w	lr, lr, #32
   d9ab6:	2a01      	cmp	r2, #1
   d9ab8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9abc:	bf28      	it	cs
   d9abe:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9ac2:	fa43 f305 	asr.w	r3, r3, r5
   d9ac6:	18c0      	adds	r0, r0, r3
   d9ac8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9acc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9ad0:	d507      	bpl.n	d9ae2 <__adddf3+0xe6>
   d9ad2:	f04f 0e00 	mov.w	lr, #0
   d9ad6:	f1dc 0c00 	rsbs	ip, ip, #0
   d9ada:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9ade:	eb6e 0101 	sbc.w	r1, lr, r1
   d9ae2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9ae6:	d31b      	bcc.n	d9b20 <__adddf3+0x124>
   d9ae8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9aec:	d30c      	bcc.n	d9b08 <__adddf3+0x10c>
   d9aee:	0849      	lsrs	r1, r1, #1
   d9af0:	ea5f 0030 	movs.w	r0, r0, rrx
   d9af4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9af8:	f104 0401 	add.w	r4, r4, #1
   d9afc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9b00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9b04:	f080 809a 	bcs.w	d9c3c <__adddf3+0x240>
   d9b08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9b0c:	bf08      	it	eq
   d9b0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9b12:	f150 0000 	adcs.w	r0, r0, #0
   d9b16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9b1a:	ea41 0105 	orr.w	r1, r1, r5
   d9b1e:	bd30      	pop	{r4, r5, pc}
   d9b20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9b24:	4140      	adcs	r0, r0
   d9b26:	eb41 0101 	adc.w	r1, r1, r1
   d9b2a:	3c01      	subs	r4, #1
   d9b2c:	bf28      	it	cs
   d9b2e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d9b32:	d2e9      	bcs.n	d9b08 <__adddf3+0x10c>
   d9b34:	f091 0f00 	teq	r1, #0
   d9b38:	bf04      	itt	eq
   d9b3a:	4601      	moveq	r1, r0
   d9b3c:	2000      	moveq	r0, #0
   d9b3e:	fab1 f381 	clz	r3, r1
   d9b42:	bf08      	it	eq
   d9b44:	3320      	addeq	r3, #32
   d9b46:	f1a3 030b 	sub.w	r3, r3, #11
   d9b4a:	f1b3 0220 	subs.w	r2, r3, #32
   d9b4e:	da0c      	bge.n	d9b6a <__adddf3+0x16e>
   d9b50:	320c      	adds	r2, #12
   d9b52:	dd08      	ble.n	d9b66 <__adddf3+0x16a>
   d9b54:	f102 0c14 	add.w	ip, r2, #20
   d9b58:	f1c2 020c 	rsb	r2, r2, #12
   d9b5c:	fa01 f00c 	lsl.w	r0, r1, ip
   d9b60:	fa21 f102 	lsr.w	r1, r1, r2
   d9b64:	e00c      	b.n	d9b80 <__adddf3+0x184>
   d9b66:	f102 0214 	add.w	r2, r2, #20
   d9b6a:	bfd8      	it	le
   d9b6c:	f1c2 0c20 	rsble	ip, r2, #32
   d9b70:	fa01 f102 	lsl.w	r1, r1, r2
   d9b74:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9b78:	bfdc      	itt	le
   d9b7a:	ea41 010c 	orrle.w	r1, r1, ip
   d9b7e:	4090      	lslle	r0, r2
   d9b80:	1ae4      	subs	r4, r4, r3
   d9b82:	bfa2      	ittt	ge
   d9b84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9b88:	4329      	orrge	r1, r5
   d9b8a:	bd30      	popge	{r4, r5, pc}
   d9b8c:	ea6f 0404 	mvn.w	r4, r4
   d9b90:	3c1f      	subs	r4, #31
   d9b92:	da1c      	bge.n	d9bce <__adddf3+0x1d2>
   d9b94:	340c      	adds	r4, #12
   d9b96:	dc0e      	bgt.n	d9bb6 <__adddf3+0x1ba>
   d9b98:	f104 0414 	add.w	r4, r4, #20
   d9b9c:	f1c4 0220 	rsb	r2, r4, #32
   d9ba0:	fa20 f004 	lsr.w	r0, r0, r4
   d9ba4:	fa01 f302 	lsl.w	r3, r1, r2
   d9ba8:	ea40 0003 	orr.w	r0, r0, r3
   d9bac:	fa21 f304 	lsr.w	r3, r1, r4
   d9bb0:	ea45 0103 	orr.w	r1, r5, r3
   d9bb4:	bd30      	pop	{r4, r5, pc}
   d9bb6:	f1c4 040c 	rsb	r4, r4, #12
   d9bba:	f1c4 0220 	rsb	r2, r4, #32
   d9bbe:	fa20 f002 	lsr.w	r0, r0, r2
   d9bc2:	fa01 f304 	lsl.w	r3, r1, r4
   d9bc6:	ea40 0003 	orr.w	r0, r0, r3
   d9bca:	4629      	mov	r1, r5
   d9bcc:	bd30      	pop	{r4, r5, pc}
   d9bce:	fa21 f004 	lsr.w	r0, r1, r4
   d9bd2:	4629      	mov	r1, r5
   d9bd4:	bd30      	pop	{r4, r5, pc}
   d9bd6:	f094 0f00 	teq	r4, #0
   d9bda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9bde:	bf06      	itte	eq
   d9be0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9be4:	3401      	addeq	r4, #1
   d9be6:	3d01      	subne	r5, #1
   d9be8:	e74e      	b.n	d9a88 <__adddf3+0x8c>
   d9bea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9bee:	bf18      	it	ne
   d9bf0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9bf4:	d029      	beq.n	d9c4a <__adddf3+0x24e>
   d9bf6:	ea94 0f05 	teq	r4, r5
   d9bfa:	bf08      	it	eq
   d9bfc:	ea90 0f02 	teqeq	r0, r2
   d9c00:	d005      	beq.n	d9c0e <__adddf3+0x212>
   d9c02:	ea54 0c00 	orrs.w	ip, r4, r0
   d9c06:	bf04      	itt	eq
   d9c08:	4619      	moveq	r1, r3
   d9c0a:	4610      	moveq	r0, r2
   d9c0c:	bd30      	pop	{r4, r5, pc}
   d9c0e:	ea91 0f03 	teq	r1, r3
   d9c12:	bf1e      	ittt	ne
   d9c14:	2100      	movne	r1, #0
   d9c16:	2000      	movne	r0, #0
   d9c18:	bd30      	popne	{r4, r5, pc}
   d9c1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9c1e:	d105      	bne.n	d9c2c <__adddf3+0x230>
   d9c20:	0040      	lsls	r0, r0, #1
   d9c22:	4149      	adcs	r1, r1
   d9c24:	bf28      	it	cs
   d9c26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9c2a:	bd30      	pop	{r4, r5, pc}
   d9c2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9c30:	bf3c      	itt	cc
   d9c32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9c36:	bd30      	popcc	{r4, r5, pc}
   d9c38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9c3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9c40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9c44:	f04f 0000 	mov.w	r0, #0
   d9c48:	bd30      	pop	{r4, r5, pc}
   d9c4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9c4e:	bf1a      	itte	ne
   d9c50:	4619      	movne	r1, r3
   d9c52:	4610      	movne	r0, r2
   d9c54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9c58:	bf1c      	itt	ne
   d9c5a:	460b      	movne	r3, r1
   d9c5c:	4602      	movne	r2, r0
   d9c5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9c62:	bf06      	itte	eq
   d9c64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9c68:	ea91 0f03 	teqeq	r1, r3
   d9c6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9c70:	bd30      	pop	{r4, r5, pc}
   d9c72:	bf00      	nop

000d9c74 <__aeabi_ui2d>:
   d9c74:	f090 0f00 	teq	r0, #0
   d9c78:	bf04      	itt	eq
   d9c7a:	2100      	moveq	r1, #0
   d9c7c:	4770      	bxeq	lr
   d9c7e:	b530      	push	{r4, r5, lr}
   d9c80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9c84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9c88:	f04f 0500 	mov.w	r5, #0
   d9c8c:	f04f 0100 	mov.w	r1, #0
   d9c90:	e750      	b.n	d9b34 <__adddf3+0x138>
   d9c92:	bf00      	nop

000d9c94 <__aeabi_i2d>:
   d9c94:	f090 0f00 	teq	r0, #0
   d9c98:	bf04      	itt	eq
   d9c9a:	2100      	moveq	r1, #0
   d9c9c:	4770      	bxeq	lr
   d9c9e:	b530      	push	{r4, r5, lr}
   d9ca0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9ca4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9ca8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9cac:	bf48      	it	mi
   d9cae:	4240      	negmi	r0, r0
   d9cb0:	f04f 0100 	mov.w	r1, #0
   d9cb4:	e73e      	b.n	d9b34 <__adddf3+0x138>
   d9cb6:	bf00      	nop

000d9cb8 <__aeabi_f2d>:
   d9cb8:	0042      	lsls	r2, r0, #1
   d9cba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9cbe:	ea4f 0131 	mov.w	r1, r1, rrx
   d9cc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9cc6:	bf1f      	itttt	ne
   d9cc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9ccc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9cd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9cd4:	4770      	bxne	lr
   d9cd6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9cda:	bf08      	it	eq
   d9cdc:	4770      	bxeq	lr
   d9cde:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9ce2:	bf04      	itt	eq
   d9ce4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9ce8:	4770      	bxeq	lr
   d9cea:	b530      	push	{r4, r5, lr}
   d9cec:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9cf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9cf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9cf8:	e71c      	b.n	d9b34 <__adddf3+0x138>
   d9cfa:	bf00      	nop

000d9cfc <__aeabi_ul2d>:
   d9cfc:	ea50 0201 	orrs.w	r2, r0, r1
   d9d00:	bf08      	it	eq
   d9d02:	4770      	bxeq	lr
   d9d04:	b530      	push	{r4, r5, lr}
   d9d06:	f04f 0500 	mov.w	r5, #0
   d9d0a:	e00a      	b.n	d9d22 <__aeabi_l2d+0x16>

000d9d0c <__aeabi_l2d>:
   d9d0c:	ea50 0201 	orrs.w	r2, r0, r1
   d9d10:	bf08      	it	eq
   d9d12:	4770      	bxeq	lr
   d9d14:	b530      	push	{r4, r5, lr}
   d9d16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9d1a:	d502      	bpl.n	d9d22 <__aeabi_l2d+0x16>
   d9d1c:	4240      	negs	r0, r0
   d9d1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9d22:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9d26:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9d2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9d2e:	f43f aed8 	beq.w	d9ae2 <__adddf3+0xe6>
   d9d32:	f04f 0203 	mov.w	r2, #3
   d9d36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d3a:	bf18      	it	ne
   d9d3c:	3203      	addne	r2, #3
   d9d3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d42:	bf18      	it	ne
   d9d44:	3203      	addne	r2, #3
   d9d46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9d4a:	f1c2 0320 	rsb	r3, r2, #32
   d9d4e:	fa00 fc03 	lsl.w	ip, r0, r3
   d9d52:	fa20 f002 	lsr.w	r0, r0, r2
   d9d56:	fa01 fe03 	lsl.w	lr, r1, r3
   d9d5a:	ea40 000e 	orr.w	r0, r0, lr
   d9d5e:	fa21 f102 	lsr.w	r1, r1, r2
   d9d62:	4414      	add	r4, r2
   d9d64:	e6bd      	b.n	d9ae2 <__adddf3+0xe6>
   d9d66:	bf00      	nop

000d9d68 <__aeabi_dmul>:
   d9d68:	b570      	push	{r4, r5, r6, lr}
   d9d6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9d6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9d72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9d76:	bf1d      	ittte	ne
   d9d78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9d7c:	ea94 0f0c 	teqne	r4, ip
   d9d80:	ea95 0f0c 	teqne	r5, ip
   d9d84:	f000 f8de 	bleq	d9f44 <__aeabi_dmul+0x1dc>
   d9d88:	442c      	add	r4, r5
   d9d8a:	ea81 0603 	eor.w	r6, r1, r3
   d9d8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9d92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9d96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9d9a:	bf18      	it	ne
   d9d9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9da0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9da8:	d038      	beq.n	d9e1c <__aeabi_dmul+0xb4>
   d9daa:	fba0 ce02 	umull	ip, lr, r0, r2
   d9dae:	f04f 0500 	mov.w	r5, #0
   d9db2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9db6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9dba:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9dbe:	f04f 0600 	mov.w	r6, #0
   d9dc2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9dc6:	f09c 0f00 	teq	ip, #0
   d9dca:	bf18      	it	ne
   d9dcc:	f04e 0e01 	orrne.w	lr, lr, #1
   d9dd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9dd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9dd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9ddc:	d204      	bcs.n	d9de8 <__aeabi_dmul+0x80>
   d9dde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9de2:	416d      	adcs	r5, r5
   d9de4:	eb46 0606 	adc.w	r6, r6, r6
   d9de8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9dec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9df0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9df4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9df8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9dfc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9e00:	bf88      	it	hi
   d9e02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9e06:	d81e      	bhi.n	d9e46 <__aeabi_dmul+0xde>
   d9e08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9e0c:	bf08      	it	eq
   d9e0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9e12:	f150 0000 	adcs.w	r0, r0, #0
   d9e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9e1a:	bd70      	pop	{r4, r5, r6, pc}
   d9e1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9e20:	ea46 0101 	orr.w	r1, r6, r1
   d9e24:	ea40 0002 	orr.w	r0, r0, r2
   d9e28:	ea81 0103 	eor.w	r1, r1, r3
   d9e2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9e30:	bfc2      	ittt	gt
   d9e32:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9e36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9e3a:	bd70      	popgt	{r4, r5, r6, pc}
   d9e3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9e40:	f04f 0e00 	mov.w	lr, #0
   d9e44:	3c01      	subs	r4, #1
   d9e46:	f300 80ab 	bgt.w	d9fa0 <__aeabi_dmul+0x238>
   d9e4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9e4e:	bfde      	ittt	le
   d9e50:	2000      	movle	r0, #0
   d9e52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9e56:	bd70      	pople	{r4, r5, r6, pc}
   d9e58:	f1c4 0400 	rsb	r4, r4, #0
   d9e5c:	3c20      	subs	r4, #32
   d9e5e:	da35      	bge.n	d9ecc <__aeabi_dmul+0x164>
   d9e60:	340c      	adds	r4, #12
   d9e62:	dc1b      	bgt.n	d9e9c <__aeabi_dmul+0x134>
   d9e64:	f104 0414 	add.w	r4, r4, #20
   d9e68:	f1c4 0520 	rsb	r5, r4, #32
   d9e6c:	fa00 f305 	lsl.w	r3, r0, r5
   d9e70:	fa20 f004 	lsr.w	r0, r0, r4
   d9e74:	fa01 f205 	lsl.w	r2, r1, r5
   d9e78:	ea40 0002 	orr.w	r0, r0, r2
   d9e7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9e80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9e84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9e88:	fa21 f604 	lsr.w	r6, r1, r4
   d9e8c:	eb42 0106 	adc.w	r1, r2, r6
   d9e90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9e94:	bf08      	it	eq
   d9e96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9e9a:	bd70      	pop	{r4, r5, r6, pc}
   d9e9c:	f1c4 040c 	rsb	r4, r4, #12
   d9ea0:	f1c4 0520 	rsb	r5, r4, #32
   d9ea4:	fa00 f304 	lsl.w	r3, r0, r4
   d9ea8:	fa20 f005 	lsr.w	r0, r0, r5
   d9eac:	fa01 f204 	lsl.w	r2, r1, r4
   d9eb0:	ea40 0002 	orr.w	r0, r0, r2
   d9eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9eb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9ebc:	f141 0100 	adc.w	r1, r1, #0
   d9ec0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ec4:	bf08      	it	eq
   d9ec6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9eca:	bd70      	pop	{r4, r5, r6, pc}
   d9ecc:	f1c4 0520 	rsb	r5, r4, #32
   d9ed0:	fa00 f205 	lsl.w	r2, r0, r5
   d9ed4:	ea4e 0e02 	orr.w	lr, lr, r2
   d9ed8:	fa20 f304 	lsr.w	r3, r0, r4
   d9edc:	fa01 f205 	lsl.w	r2, r1, r5
   d9ee0:	ea43 0302 	orr.w	r3, r3, r2
   d9ee4:	fa21 f004 	lsr.w	r0, r1, r4
   d9ee8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9eec:	fa21 f204 	lsr.w	r2, r1, r4
   d9ef0:	ea20 0002 	bic.w	r0, r0, r2
   d9ef4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9ef8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9efc:	bf08      	it	eq
   d9efe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9f02:	bd70      	pop	{r4, r5, r6, pc}
   d9f04:	f094 0f00 	teq	r4, #0
   d9f08:	d10f      	bne.n	d9f2a <__aeabi_dmul+0x1c2>
   d9f0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9f0e:	0040      	lsls	r0, r0, #1
   d9f10:	eb41 0101 	adc.w	r1, r1, r1
   d9f14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9f18:	bf08      	it	eq
   d9f1a:	3c01      	subeq	r4, #1
   d9f1c:	d0f7      	beq.n	d9f0e <__aeabi_dmul+0x1a6>
   d9f1e:	ea41 0106 	orr.w	r1, r1, r6
   d9f22:	f095 0f00 	teq	r5, #0
   d9f26:	bf18      	it	ne
   d9f28:	4770      	bxne	lr
   d9f2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9f2e:	0052      	lsls	r2, r2, #1
   d9f30:	eb43 0303 	adc.w	r3, r3, r3
   d9f34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9f38:	bf08      	it	eq
   d9f3a:	3d01      	subeq	r5, #1
   d9f3c:	d0f7      	beq.n	d9f2e <__aeabi_dmul+0x1c6>
   d9f3e:	ea43 0306 	orr.w	r3, r3, r6
   d9f42:	4770      	bx	lr
   d9f44:	ea94 0f0c 	teq	r4, ip
   d9f48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9f4c:	bf18      	it	ne
   d9f4e:	ea95 0f0c 	teqne	r5, ip
   d9f52:	d00c      	beq.n	d9f6e <__aeabi_dmul+0x206>
   d9f54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f58:	bf18      	it	ne
   d9f5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f5e:	d1d1      	bne.n	d9f04 <__aeabi_dmul+0x19c>
   d9f60:	ea81 0103 	eor.w	r1, r1, r3
   d9f64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9f68:	f04f 0000 	mov.w	r0, #0
   d9f6c:	bd70      	pop	{r4, r5, r6, pc}
   d9f6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f72:	bf06      	itte	eq
   d9f74:	4610      	moveq	r0, r2
   d9f76:	4619      	moveq	r1, r3
   d9f78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f7c:	d019      	beq.n	d9fb2 <__aeabi_dmul+0x24a>
   d9f7e:	ea94 0f0c 	teq	r4, ip
   d9f82:	d102      	bne.n	d9f8a <__aeabi_dmul+0x222>
   d9f84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9f88:	d113      	bne.n	d9fb2 <__aeabi_dmul+0x24a>
   d9f8a:	ea95 0f0c 	teq	r5, ip
   d9f8e:	d105      	bne.n	d9f9c <__aeabi_dmul+0x234>
   d9f90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9f94:	bf1c      	itt	ne
   d9f96:	4610      	movne	r0, r2
   d9f98:	4619      	movne	r1, r3
   d9f9a:	d10a      	bne.n	d9fb2 <__aeabi_dmul+0x24a>
   d9f9c:	ea81 0103 	eor.w	r1, r1, r3
   d9fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9fa4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9fa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9fac:	f04f 0000 	mov.w	r0, #0
   d9fb0:	bd70      	pop	{r4, r5, r6, pc}
   d9fb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9fb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9fba:	bd70      	pop	{r4, r5, r6, pc}

000d9fbc <__aeabi_ddiv>:
   d9fbc:	b570      	push	{r4, r5, r6, lr}
   d9fbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9fc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9fc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9fca:	bf1d      	ittte	ne
   d9fcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9fd0:	ea94 0f0c 	teqne	r4, ip
   d9fd4:	ea95 0f0c 	teqne	r5, ip
   d9fd8:	f000 f8a7 	bleq	da12a <__aeabi_ddiv+0x16e>
   d9fdc:	eba4 0405 	sub.w	r4, r4, r5
   d9fe0:	ea81 0e03 	eor.w	lr, r1, r3
   d9fe4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9fe8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9fec:	f000 8088 	beq.w	da100 <__aeabi_ddiv+0x144>
   d9ff0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9ff4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9ff8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9ffc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da000:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da004:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da008:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da00c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da010:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da014:	429d      	cmp	r5, r3
   da016:	bf08      	it	eq
   da018:	4296      	cmpeq	r6, r2
   da01a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da01e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da022:	d202      	bcs.n	da02a <__aeabi_ddiv+0x6e>
   da024:	085b      	lsrs	r3, r3, #1
   da026:	ea4f 0232 	mov.w	r2, r2, rrx
   da02a:	1ab6      	subs	r6, r6, r2
   da02c:	eb65 0503 	sbc.w	r5, r5, r3
   da030:	085b      	lsrs	r3, r3, #1
   da032:	ea4f 0232 	mov.w	r2, r2, rrx
   da036:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da03a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da03e:	ebb6 0e02 	subs.w	lr, r6, r2
   da042:	eb75 0e03 	sbcs.w	lr, r5, r3
   da046:	bf22      	ittt	cs
   da048:	1ab6      	subcs	r6, r6, r2
   da04a:	4675      	movcs	r5, lr
   da04c:	ea40 000c 	orrcs.w	r0, r0, ip
   da050:	085b      	lsrs	r3, r3, #1
   da052:	ea4f 0232 	mov.w	r2, r2, rrx
   da056:	ebb6 0e02 	subs.w	lr, r6, r2
   da05a:	eb75 0e03 	sbcs.w	lr, r5, r3
   da05e:	bf22      	ittt	cs
   da060:	1ab6      	subcs	r6, r6, r2
   da062:	4675      	movcs	r5, lr
   da064:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da068:	085b      	lsrs	r3, r3, #1
   da06a:	ea4f 0232 	mov.w	r2, r2, rrx
   da06e:	ebb6 0e02 	subs.w	lr, r6, r2
   da072:	eb75 0e03 	sbcs.w	lr, r5, r3
   da076:	bf22      	ittt	cs
   da078:	1ab6      	subcs	r6, r6, r2
   da07a:	4675      	movcs	r5, lr
   da07c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da080:	085b      	lsrs	r3, r3, #1
   da082:	ea4f 0232 	mov.w	r2, r2, rrx
   da086:	ebb6 0e02 	subs.w	lr, r6, r2
   da08a:	eb75 0e03 	sbcs.w	lr, r5, r3
   da08e:	bf22      	ittt	cs
   da090:	1ab6      	subcs	r6, r6, r2
   da092:	4675      	movcs	r5, lr
   da094:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da098:	ea55 0e06 	orrs.w	lr, r5, r6
   da09c:	d018      	beq.n	da0d0 <__aeabi_ddiv+0x114>
   da09e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da0a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da0a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da0aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da0ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da0b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da0b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da0ba:	d1c0      	bne.n	da03e <__aeabi_ddiv+0x82>
   da0bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da0c0:	d10b      	bne.n	da0da <__aeabi_ddiv+0x11e>
   da0c2:	ea41 0100 	orr.w	r1, r1, r0
   da0c6:	f04f 0000 	mov.w	r0, #0
   da0ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da0ce:	e7b6      	b.n	da03e <__aeabi_ddiv+0x82>
   da0d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da0d4:	bf04      	itt	eq
   da0d6:	4301      	orreq	r1, r0
   da0d8:	2000      	moveq	r0, #0
   da0da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da0de:	bf88      	it	hi
   da0e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da0e4:	f63f aeaf 	bhi.w	d9e46 <__aeabi_dmul+0xde>
   da0e8:	ebb5 0c03 	subs.w	ip, r5, r3
   da0ec:	bf04      	itt	eq
   da0ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   da0f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da0f6:	f150 0000 	adcs.w	r0, r0, #0
   da0fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da0fe:	bd70      	pop	{r4, r5, r6, pc}
   da100:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da104:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da108:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da10c:	bfc2      	ittt	gt
   da10e:	ebd4 050c 	rsbsgt	r5, r4, ip
   da112:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da116:	bd70      	popgt	{r4, r5, r6, pc}
   da118:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da11c:	f04f 0e00 	mov.w	lr, #0
   da120:	3c01      	subs	r4, #1
   da122:	e690      	b.n	d9e46 <__aeabi_dmul+0xde>
   da124:	ea45 0e06 	orr.w	lr, r5, r6
   da128:	e68d      	b.n	d9e46 <__aeabi_dmul+0xde>
   da12a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da12e:	ea94 0f0c 	teq	r4, ip
   da132:	bf08      	it	eq
   da134:	ea95 0f0c 	teqeq	r5, ip
   da138:	f43f af3b 	beq.w	d9fb2 <__aeabi_dmul+0x24a>
   da13c:	ea94 0f0c 	teq	r4, ip
   da140:	d10a      	bne.n	da158 <__aeabi_ddiv+0x19c>
   da142:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da146:	f47f af34 	bne.w	d9fb2 <__aeabi_dmul+0x24a>
   da14a:	ea95 0f0c 	teq	r5, ip
   da14e:	f47f af25 	bne.w	d9f9c <__aeabi_dmul+0x234>
   da152:	4610      	mov	r0, r2
   da154:	4619      	mov	r1, r3
   da156:	e72c      	b.n	d9fb2 <__aeabi_dmul+0x24a>
   da158:	ea95 0f0c 	teq	r5, ip
   da15c:	d106      	bne.n	da16c <__aeabi_ddiv+0x1b0>
   da15e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da162:	f43f aefd 	beq.w	d9f60 <__aeabi_dmul+0x1f8>
   da166:	4610      	mov	r0, r2
   da168:	4619      	mov	r1, r3
   da16a:	e722      	b.n	d9fb2 <__aeabi_dmul+0x24a>
   da16c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da170:	bf18      	it	ne
   da172:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da176:	f47f aec5 	bne.w	d9f04 <__aeabi_dmul+0x19c>
   da17a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da17e:	f47f af0d 	bne.w	d9f9c <__aeabi_dmul+0x234>
   da182:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da186:	f47f aeeb 	bne.w	d9f60 <__aeabi_dmul+0x1f8>
   da18a:	e712      	b.n	d9fb2 <__aeabi_dmul+0x24a>

000da18c <__gedf2>:
   da18c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da190:	e006      	b.n	da1a0 <__cmpdf2+0x4>
   da192:	bf00      	nop

000da194 <__ledf2>:
   da194:	f04f 0c01 	mov.w	ip, #1
   da198:	e002      	b.n	da1a0 <__cmpdf2+0x4>
   da19a:	bf00      	nop

000da19c <__cmpdf2>:
   da19c:	f04f 0c01 	mov.w	ip, #1
   da1a0:	f84d cd04 	str.w	ip, [sp, #-4]!
   da1a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da1a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da1b0:	bf18      	it	ne
   da1b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da1b6:	d01b      	beq.n	da1f0 <__cmpdf2+0x54>
   da1b8:	b001      	add	sp, #4
   da1ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da1be:	bf0c      	ite	eq
   da1c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da1c4:	ea91 0f03 	teqne	r1, r3
   da1c8:	bf02      	ittt	eq
   da1ca:	ea90 0f02 	teqeq	r0, r2
   da1ce:	2000      	moveq	r0, #0
   da1d0:	4770      	bxeq	lr
   da1d2:	f110 0f00 	cmn.w	r0, #0
   da1d6:	ea91 0f03 	teq	r1, r3
   da1da:	bf58      	it	pl
   da1dc:	4299      	cmppl	r1, r3
   da1de:	bf08      	it	eq
   da1e0:	4290      	cmpeq	r0, r2
   da1e2:	bf2c      	ite	cs
   da1e4:	17d8      	asrcs	r0, r3, #31
   da1e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da1ea:	f040 0001 	orr.w	r0, r0, #1
   da1ee:	4770      	bx	lr
   da1f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da1f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1f8:	d102      	bne.n	da200 <__cmpdf2+0x64>
   da1fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da1fe:	d107      	bne.n	da210 <__cmpdf2+0x74>
   da200:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da204:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da208:	d1d6      	bne.n	da1b8 <__cmpdf2+0x1c>
   da20a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da20e:	d0d3      	beq.n	da1b8 <__cmpdf2+0x1c>
   da210:	f85d 0b04 	ldr.w	r0, [sp], #4
   da214:	4770      	bx	lr
   da216:	bf00      	nop

000da218 <__aeabi_cdrcmple>:
   da218:	4684      	mov	ip, r0
   da21a:	4610      	mov	r0, r2
   da21c:	4662      	mov	r2, ip
   da21e:	468c      	mov	ip, r1
   da220:	4619      	mov	r1, r3
   da222:	4663      	mov	r3, ip
   da224:	e000      	b.n	da228 <__aeabi_cdcmpeq>
   da226:	bf00      	nop

000da228 <__aeabi_cdcmpeq>:
   da228:	b501      	push	{r0, lr}
   da22a:	f7ff ffb7 	bl	da19c <__cmpdf2>
   da22e:	2800      	cmp	r0, #0
   da230:	bf48      	it	mi
   da232:	f110 0f00 	cmnmi.w	r0, #0
   da236:	bd01      	pop	{r0, pc}

000da238 <__aeabi_dcmpeq>:
   da238:	f84d ed08 	str.w	lr, [sp, #-8]!
   da23c:	f7ff fff4 	bl	da228 <__aeabi_cdcmpeq>
   da240:	bf0c      	ite	eq
   da242:	2001      	moveq	r0, #1
   da244:	2000      	movne	r0, #0
   da246:	f85d fb08 	ldr.w	pc, [sp], #8
   da24a:	bf00      	nop

000da24c <__aeabi_dcmplt>:
   da24c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da250:	f7ff ffea 	bl	da228 <__aeabi_cdcmpeq>
   da254:	bf34      	ite	cc
   da256:	2001      	movcc	r0, #1
   da258:	2000      	movcs	r0, #0
   da25a:	f85d fb08 	ldr.w	pc, [sp], #8
   da25e:	bf00      	nop

000da260 <__aeabi_dcmple>:
   da260:	f84d ed08 	str.w	lr, [sp, #-8]!
   da264:	f7ff ffe0 	bl	da228 <__aeabi_cdcmpeq>
   da268:	bf94      	ite	ls
   da26a:	2001      	movls	r0, #1
   da26c:	2000      	movhi	r0, #0
   da26e:	f85d fb08 	ldr.w	pc, [sp], #8
   da272:	bf00      	nop

000da274 <__aeabi_dcmpge>:
   da274:	f84d ed08 	str.w	lr, [sp, #-8]!
   da278:	f7ff ffce 	bl	da218 <__aeabi_cdrcmple>
   da27c:	bf94      	ite	ls
   da27e:	2001      	movls	r0, #1
   da280:	2000      	movhi	r0, #0
   da282:	f85d fb08 	ldr.w	pc, [sp], #8
   da286:	bf00      	nop

000da288 <__aeabi_dcmpgt>:
   da288:	f84d ed08 	str.w	lr, [sp, #-8]!
   da28c:	f7ff ffc4 	bl	da218 <__aeabi_cdrcmple>
   da290:	bf34      	ite	cc
   da292:	2001      	movcc	r0, #1
   da294:	2000      	movcs	r0, #0
   da296:	f85d fb08 	ldr.w	pc, [sp], #8
   da29a:	bf00      	nop

000da29c <__aeabi_dcmpun>:
   da29c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da2a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da2a4:	d102      	bne.n	da2ac <__aeabi_dcmpun+0x10>
   da2a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da2aa:	d10a      	bne.n	da2c2 <__aeabi_dcmpun+0x26>
   da2ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da2b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da2b4:	d102      	bne.n	da2bc <__aeabi_dcmpun+0x20>
   da2b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da2ba:	d102      	bne.n	da2c2 <__aeabi_dcmpun+0x26>
   da2bc:	f04f 0000 	mov.w	r0, #0
   da2c0:	4770      	bx	lr
   da2c2:	f04f 0001 	mov.w	r0, #1
   da2c6:	4770      	bx	lr

000da2c8 <__aeabi_d2iz>:
   da2c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da2cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da2d0:	d215      	bcs.n	da2fe <__aeabi_d2iz+0x36>
   da2d2:	d511      	bpl.n	da2f8 <__aeabi_d2iz+0x30>
   da2d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da2d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da2dc:	d912      	bls.n	da304 <__aeabi_d2iz+0x3c>
   da2de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da2e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da2e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da2ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da2ee:	fa23 f002 	lsr.w	r0, r3, r2
   da2f2:	bf18      	it	ne
   da2f4:	4240      	negne	r0, r0
   da2f6:	4770      	bx	lr
   da2f8:	f04f 0000 	mov.w	r0, #0
   da2fc:	4770      	bx	lr
   da2fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da302:	d105      	bne.n	da310 <__aeabi_d2iz+0x48>
   da304:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da308:	bf08      	it	eq
   da30a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da30e:	4770      	bx	lr
   da310:	f04f 0000 	mov.w	r0, #0
   da314:	4770      	bx	lr
   da316:	bf00      	nop

000da318 <__aeabi_d2uiz>:
   da318:	004a      	lsls	r2, r1, #1
   da31a:	d211      	bcs.n	da340 <__aeabi_d2uiz+0x28>
   da31c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da320:	d211      	bcs.n	da346 <__aeabi_d2uiz+0x2e>
   da322:	d50d      	bpl.n	da340 <__aeabi_d2uiz+0x28>
   da324:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da328:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da32c:	d40e      	bmi.n	da34c <__aeabi_d2uiz+0x34>
   da32e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da336:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da33a:	fa23 f002 	lsr.w	r0, r3, r2
   da33e:	4770      	bx	lr
   da340:	f04f 0000 	mov.w	r0, #0
   da344:	4770      	bx	lr
   da346:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da34a:	d102      	bne.n	da352 <__aeabi_d2uiz+0x3a>
   da34c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da350:	4770      	bx	lr
   da352:	f04f 0000 	mov.w	r0, #0
   da356:	4770      	bx	lr

000da358 <__aeabi_d2f>:
   da358:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da35c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da360:	bf24      	itt	cs
   da362:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da366:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da36a:	d90d      	bls.n	da388 <__aeabi_d2f+0x30>
   da36c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da370:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da374:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da378:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da37c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da380:	bf08      	it	eq
   da382:	f020 0001 	biceq.w	r0, r0, #1
   da386:	4770      	bx	lr
   da388:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da38c:	d121      	bne.n	da3d2 <__aeabi_d2f+0x7a>
   da38e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da392:	bfbc      	itt	lt
   da394:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da398:	4770      	bxlt	lr
   da39a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da39e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da3a2:	f1c2 0218 	rsb	r2, r2, #24
   da3a6:	f1c2 0c20 	rsb	ip, r2, #32
   da3aa:	fa10 f30c 	lsls.w	r3, r0, ip
   da3ae:	fa20 f002 	lsr.w	r0, r0, r2
   da3b2:	bf18      	it	ne
   da3b4:	f040 0001 	orrne.w	r0, r0, #1
   da3b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da3bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da3c0:	fa03 fc0c 	lsl.w	ip, r3, ip
   da3c4:	ea40 000c 	orr.w	r0, r0, ip
   da3c8:	fa23 f302 	lsr.w	r3, r3, r2
   da3cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da3d0:	e7cc      	b.n	da36c <__aeabi_d2f+0x14>
   da3d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da3d6:	d107      	bne.n	da3e8 <__aeabi_d2f+0x90>
   da3d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da3dc:	bf1e      	ittt	ne
   da3de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da3e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da3e6:	4770      	bxne	lr
   da3e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da3ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da3f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da3f4:	4770      	bx	lr
   da3f6:	bf00      	nop

000da3f8 <__aeabi_uldivmod>:
   da3f8:	b953      	cbnz	r3, da410 <__aeabi_uldivmod+0x18>
   da3fa:	b94a      	cbnz	r2, da410 <__aeabi_uldivmod+0x18>
   da3fc:	2900      	cmp	r1, #0
   da3fe:	bf08      	it	eq
   da400:	2800      	cmpeq	r0, #0
   da402:	bf1c      	itt	ne
   da404:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   da408:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   da40c:	f000 b98c 	b.w	da728 <__aeabi_idiv0>
   da410:	f1ad 0c08 	sub.w	ip, sp, #8
   da414:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da418:	f000 f824 	bl	da464 <__udivmoddi4>
   da41c:	f8dd e004 	ldr.w	lr, [sp, #4]
   da420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da424:	b004      	add	sp, #16
   da426:	4770      	bx	lr

000da428 <__aeabi_d2ulz>:
   da428:	b5d0      	push	{r4, r6, r7, lr}
   da42a:	4b0c      	ldr	r3, [pc, #48]	; (da45c <__aeabi_d2ulz+0x34>)
   da42c:	2200      	movs	r2, #0
   da42e:	4606      	mov	r6, r0
   da430:	460f      	mov	r7, r1
   da432:	f7ff fc99 	bl	d9d68 <__aeabi_dmul>
   da436:	f7ff ff6f 	bl	da318 <__aeabi_d2uiz>
   da43a:	4604      	mov	r4, r0
   da43c:	f7ff fc1a 	bl	d9c74 <__aeabi_ui2d>
   da440:	4b07      	ldr	r3, [pc, #28]	; (da460 <__aeabi_d2ulz+0x38>)
   da442:	2200      	movs	r2, #0
   da444:	f7ff fc90 	bl	d9d68 <__aeabi_dmul>
   da448:	4602      	mov	r2, r0
   da44a:	460b      	mov	r3, r1
   da44c:	4630      	mov	r0, r6
   da44e:	4639      	mov	r1, r7
   da450:	f7ff fad2 	bl	d99f8 <__aeabi_dsub>
   da454:	f7ff ff60 	bl	da318 <__aeabi_d2uiz>
   da458:	4621      	mov	r1, r4
   da45a:	bdd0      	pop	{r4, r6, r7, pc}
   da45c:	3df00000 	.word	0x3df00000
   da460:	41f00000 	.word	0x41f00000

000da464 <__udivmoddi4>:
   da464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da468:	9d08      	ldr	r5, [sp, #32]
   da46a:	4604      	mov	r4, r0
   da46c:	468c      	mov	ip, r1
   da46e:	2b00      	cmp	r3, #0
   da470:	f040 8083 	bne.w	da57a <__udivmoddi4+0x116>
   da474:	428a      	cmp	r2, r1
   da476:	4617      	mov	r7, r2
   da478:	d947      	bls.n	da50a <__udivmoddi4+0xa6>
   da47a:	fab2 f282 	clz	r2, r2
   da47e:	b142      	cbz	r2, da492 <__udivmoddi4+0x2e>
   da480:	f1c2 0020 	rsb	r0, r2, #32
   da484:	fa24 f000 	lsr.w	r0, r4, r0
   da488:	4091      	lsls	r1, r2
   da48a:	4097      	lsls	r7, r2
   da48c:	ea40 0c01 	orr.w	ip, r0, r1
   da490:	4094      	lsls	r4, r2
   da492:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da496:	0c23      	lsrs	r3, r4, #16
   da498:	fbbc f6f8 	udiv	r6, ip, r8
   da49c:	fa1f fe87 	uxth.w	lr, r7
   da4a0:	fb08 c116 	mls	r1, r8, r6, ip
   da4a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da4a8:	fb06 f10e 	mul.w	r1, r6, lr
   da4ac:	4299      	cmp	r1, r3
   da4ae:	d909      	bls.n	da4c4 <__udivmoddi4+0x60>
   da4b0:	18fb      	adds	r3, r7, r3
   da4b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   da4b6:	f080 8119 	bcs.w	da6ec <__udivmoddi4+0x288>
   da4ba:	4299      	cmp	r1, r3
   da4bc:	f240 8116 	bls.w	da6ec <__udivmoddi4+0x288>
   da4c0:	3e02      	subs	r6, #2
   da4c2:	443b      	add	r3, r7
   da4c4:	1a5b      	subs	r3, r3, r1
   da4c6:	b2a4      	uxth	r4, r4
   da4c8:	fbb3 f0f8 	udiv	r0, r3, r8
   da4cc:	fb08 3310 	mls	r3, r8, r0, r3
   da4d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   da4d4:	fb00 fe0e 	mul.w	lr, r0, lr
   da4d8:	45a6      	cmp	lr, r4
   da4da:	d909      	bls.n	da4f0 <__udivmoddi4+0x8c>
   da4dc:	193c      	adds	r4, r7, r4
   da4de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da4e2:	f080 8105 	bcs.w	da6f0 <__udivmoddi4+0x28c>
   da4e6:	45a6      	cmp	lr, r4
   da4e8:	f240 8102 	bls.w	da6f0 <__udivmoddi4+0x28c>
   da4ec:	3802      	subs	r0, #2
   da4ee:	443c      	add	r4, r7
   da4f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   da4f4:	eba4 040e 	sub.w	r4, r4, lr
   da4f8:	2600      	movs	r6, #0
   da4fa:	b11d      	cbz	r5, da504 <__udivmoddi4+0xa0>
   da4fc:	40d4      	lsrs	r4, r2
   da4fe:	2300      	movs	r3, #0
   da500:	e9c5 4300 	strd	r4, r3, [r5]
   da504:	4631      	mov	r1, r6
   da506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da50a:	b902      	cbnz	r2, da50e <__udivmoddi4+0xaa>
   da50c:	deff      	udf	#255	; 0xff
   da50e:	fab2 f282 	clz	r2, r2
   da512:	2a00      	cmp	r2, #0
   da514:	d150      	bne.n	da5b8 <__udivmoddi4+0x154>
   da516:	1bcb      	subs	r3, r1, r7
   da518:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da51c:	fa1f f887 	uxth.w	r8, r7
   da520:	2601      	movs	r6, #1
   da522:	fbb3 fcfe 	udiv	ip, r3, lr
   da526:	0c21      	lsrs	r1, r4, #16
   da528:	fb0e 331c 	mls	r3, lr, ip, r3
   da52c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da530:	fb08 f30c 	mul.w	r3, r8, ip
   da534:	428b      	cmp	r3, r1
   da536:	d907      	bls.n	da548 <__udivmoddi4+0xe4>
   da538:	1879      	adds	r1, r7, r1
   da53a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   da53e:	d202      	bcs.n	da546 <__udivmoddi4+0xe2>
   da540:	428b      	cmp	r3, r1
   da542:	f200 80e9 	bhi.w	da718 <__udivmoddi4+0x2b4>
   da546:	4684      	mov	ip, r0
   da548:	1ac9      	subs	r1, r1, r3
   da54a:	b2a3      	uxth	r3, r4
   da54c:	fbb1 f0fe 	udiv	r0, r1, lr
   da550:	fb0e 1110 	mls	r1, lr, r0, r1
   da554:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   da558:	fb08 f800 	mul.w	r8, r8, r0
   da55c:	45a0      	cmp	r8, r4
   da55e:	d907      	bls.n	da570 <__udivmoddi4+0x10c>
   da560:	193c      	adds	r4, r7, r4
   da562:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da566:	d202      	bcs.n	da56e <__udivmoddi4+0x10a>
   da568:	45a0      	cmp	r8, r4
   da56a:	f200 80d9 	bhi.w	da720 <__udivmoddi4+0x2bc>
   da56e:	4618      	mov	r0, r3
   da570:	eba4 0408 	sub.w	r4, r4, r8
   da574:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   da578:	e7bf      	b.n	da4fa <__udivmoddi4+0x96>
   da57a:	428b      	cmp	r3, r1
   da57c:	d909      	bls.n	da592 <__udivmoddi4+0x12e>
   da57e:	2d00      	cmp	r5, #0
   da580:	f000 80b1 	beq.w	da6e6 <__udivmoddi4+0x282>
   da584:	2600      	movs	r6, #0
   da586:	e9c5 0100 	strd	r0, r1, [r5]
   da58a:	4630      	mov	r0, r6
   da58c:	4631      	mov	r1, r6
   da58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da592:	fab3 f683 	clz	r6, r3
   da596:	2e00      	cmp	r6, #0
   da598:	d14a      	bne.n	da630 <__udivmoddi4+0x1cc>
   da59a:	428b      	cmp	r3, r1
   da59c:	d302      	bcc.n	da5a4 <__udivmoddi4+0x140>
   da59e:	4282      	cmp	r2, r0
   da5a0:	f200 80b8 	bhi.w	da714 <__udivmoddi4+0x2b0>
   da5a4:	1a84      	subs	r4, r0, r2
   da5a6:	eb61 0103 	sbc.w	r1, r1, r3
   da5aa:	2001      	movs	r0, #1
   da5ac:	468c      	mov	ip, r1
   da5ae:	2d00      	cmp	r5, #0
   da5b0:	d0a8      	beq.n	da504 <__udivmoddi4+0xa0>
   da5b2:	e9c5 4c00 	strd	r4, ip, [r5]
   da5b6:	e7a5      	b.n	da504 <__udivmoddi4+0xa0>
   da5b8:	f1c2 0320 	rsb	r3, r2, #32
   da5bc:	fa20 f603 	lsr.w	r6, r0, r3
   da5c0:	4097      	lsls	r7, r2
   da5c2:	fa01 f002 	lsl.w	r0, r1, r2
   da5c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da5ca:	40d9      	lsrs	r1, r3
   da5cc:	4330      	orrs	r0, r6
   da5ce:	0c03      	lsrs	r3, r0, #16
   da5d0:	fbb1 f6fe 	udiv	r6, r1, lr
   da5d4:	fa1f f887 	uxth.w	r8, r7
   da5d8:	fb0e 1116 	mls	r1, lr, r6, r1
   da5dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da5e0:	fb06 f108 	mul.w	r1, r6, r8
   da5e4:	4299      	cmp	r1, r3
   da5e6:	fa04 f402 	lsl.w	r4, r4, r2
   da5ea:	d909      	bls.n	da600 <__udivmoddi4+0x19c>
   da5ec:	18fb      	adds	r3, r7, r3
   da5ee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   da5f2:	f080 808d 	bcs.w	da710 <__udivmoddi4+0x2ac>
   da5f6:	4299      	cmp	r1, r3
   da5f8:	f240 808a 	bls.w	da710 <__udivmoddi4+0x2ac>
   da5fc:	3e02      	subs	r6, #2
   da5fe:	443b      	add	r3, r7
   da600:	1a5b      	subs	r3, r3, r1
   da602:	b281      	uxth	r1, r0
   da604:	fbb3 f0fe 	udiv	r0, r3, lr
   da608:	fb0e 3310 	mls	r3, lr, r0, r3
   da60c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da610:	fb00 f308 	mul.w	r3, r0, r8
   da614:	428b      	cmp	r3, r1
   da616:	d907      	bls.n	da628 <__udivmoddi4+0x1c4>
   da618:	1879      	adds	r1, r7, r1
   da61a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   da61e:	d273      	bcs.n	da708 <__udivmoddi4+0x2a4>
   da620:	428b      	cmp	r3, r1
   da622:	d971      	bls.n	da708 <__udivmoddi4+0x2a4>
   da624:	3802      	subs	r0, #2
   da626:	4439      	add	r1, r7
   da628:	1acb      	subs	r3, r1, r3
   da62a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da62e:	e778      	b.n	da522 <__udivmoddi4+0xbe>
   da630:	f1c6 0c20 	rsb	ip, r6, #32
   da634:	fa03 f406 	lsl.w	r4, r3, r6
   da638:	fa22 f30c 	lsr.w	r3, r2, ip
   da63c:	431c      	orrs	r4, r3
   da63e:	fa20 f70c 	lsr.w	r7, r0, ip
   da642:	fa01 f306 	lsl.w	r3, r1, r6
   da646:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da64a:	fa21 f10c 	lsr.w	r1, r1, ip
   da64e:	431f      	orrs	r7, r3
   da650:	0c3b      	lsrs	r3, r7, #16
   da652:	fbb1 f9fe 	udiv	r9, r1, lr
   da656:	fa1f f884 	uxth.w	r8, r4
   da65a:	fb0e 1119 	mls	r1, lr, r9, r1
   da65e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da662:	fb09 fa08 	mul.w	sl, r9, r8
   da666:	458a      	cmp	sl, r1
   da668:	fa02 f206 	lsl.w	r2, r2, r6
   da66c:	fa00 f306 	lsl.w	r3, r0, r6
   da670:	d908      	bls.n	da684 <__udivmoddi4+0x220>
   da672:	1861      	adds	r1, r4, r1
   da674:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   da678:	d248      	bcs.n	da70c <__udivmoddi4+0x2a8>
   da67a:	458a      	cmp	sl, r1
   da67c:	d946      	bls.n	da70c <__udivmoddi4+0x2a8>
   da67e:	f1a9 0902 	sub.w	r9, r9, #2
   da682:	4421      	add	r1, r4
   da684:	eba1 010a 	sub.w	r1, r1, sl
   da688:	b2bf      	uxth	r7, r7
   da68a:	fbb1 f0fe 	udiv	r0, r1, lr
   da68e:	fb0e 1110 	mls	r1, lr, r0, r1
   da692:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da696:	fb00 f808 	mul.w	r8, r0, r8
   da69a:	45b8      	cmp	r8, r7
   da69c:	d907      	bls.n	da6ae <__udivmoddi4+0x24a>
   da69e:	19e7      	adds	r7, r4, r7
   da6a0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   da6a4:	d22e      	bcs.n	da704 <__udivmoddi4+0x2a0>
   da6a6:	45b8      	cmp	r8, r7
   da6a8:	d92c      	bls.n	da704 <__udivmoddi4+0x2a0>
   da6aa:	3802      	subs	r0, #2
   da6ac:	4427      	add	r7, r4
   da6ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da6b2:	eba7 0708 	sub.w	r7, r7, r8
   da6b6:	fba0 8902 	umull	r8, r9, r0, r2
   da6ba:	454f      	cmp	r7, r9
   da6bc:	46c6      	mov	lr, r8
   da6be:	4649      	mov	r1, r9
   da6c0:	d31a      	bcc.n	da6f8 <__udivmoddi4+0x294>
   da6c2:	d017      	beq.n	da6f4 <__udivmoddi4+0x290>
   da6c4:	b15d      	cbz	r5, da6de <__udivmoddi4+0x27a>
   da6c6:	ebb3 020e 	subs.w	r2, r3, lr
   da6ca:	eb67 0701 	sbc.w	r7, r7, r1
   da6ce:	fa07 fc0c 	lsl.w	ip, r7, ip
   da6d2:	40f2      	lsrs	r2, r6
   da6d4:	ea4c 0202 	orr.w	r2, ip, r2
   da6d8:	40f7      	lsrs	r7, r6
   da6da:	e9c5 2700 	strd	r2, r7, [r5]
   da6de:	2600      	movs	r6, #0
   da6e0:	4631      	mov	r1, r6
   da6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da6e6:	462e      	mov	r6, r5
   da6e8:	4628      	mov	r0, r5
   da6ea:	e70b      	b.n	da504 <__udivmoddi4+0xa0>
   da6ec:	4606      	mov	r6, r0
   da6ee:	e6e9      	b.n	da4c4 <__udivmoddi4+0x60>
   da6f0:	4618      	mov	r0, r3
   da6f2:	e6fd      	b.n	da4f0 <__udivmoddi4+0x8c>
   da6f4:	4543      	cmp	r3, r8
   da6f6:	d2e5      	bcs.n	da6c4 <__udivmoddi4+0x260>
   da6f8:	ebb8 0e02 	subs.w	lr, r8, r2
   da6fc:	eb69 0104 	sbc.w	r1, r9, r4
   da700:	3801      	subs	r0, #1
   da702:	e7df      	b.n	da6c4 <__udivmoddi4+0x260>
   da704:	4608      	mov	r0, r1
   da706:	e7d2      	b.n	da6ae <__udivmoddi4+0x24a>
   da708:	4660      	mov	r0, ip
   da70a:	e78d      	b.n	da628 <__udivmoddi4+0x1c4>
   da70c:	4681      	mov	r9, r0
   da70e:	e7b9      	b.n	da684 <__udivmoddi4+0x220>
   da710:	4666      	mov	r6, ip
   da712:	e775      	b.n	da600 <__udivmoddi4+0x19c>
   da714:	4630      	mov	r0, r6
   da716:	e74a      	b.n	da5ae <__udivmoddi4+0x14a>
   da718:	f1ac 0c02 	sub.w	ip, ip, #2
   da71c:	4439      	add	r1, r7
   da71e:	e713      	b.n	da548 <__udivmoddi4+0xe4>
   da720:	3802      	subs	r0, #2
   da722:	443c      	add	r4, r7
   da724:	e724      	b.n	da570 <__udivmoddi4+0x10c>
   da726:	bf00      	nop

000da728 <__aeabi_idiv0>:
   da728:	4770      	bx	lr
   da72a:	bf00      	nop

000da72c <atof>:
   da72c:	2100      	movs	r1, #0
   da72e:	f000 bf25 	b.w	db57c <strtod>
	...

000da734 <calloc>:
   da734:	4b02      	ldr	r3, [pc, #8]	; (da740 <calloc+0xc>)
   da736:	460a      	mov	r2, r1
   da738:	4601      	mov	r1, r0
   da73a:	6818      	ldr	r0, [r3, #0]
   da73c:	f000 b840 	b.w	da7c0 <_calloc_r>
   da740:	2003e26c 	.word	0x2003e26c

000da744 <__cxa_atexit>:
   da744:	b510      	push	{r4, lr}
   da746:	4c05      	ldr	r4, [pc, #20]	; (da75c <__cxa_atexit+0x18>)
   da748:	4613      	mov	r3, r2
   da74a:	b12c      	cbz	r4, da758 <__cxa_atexit+0x14>
   da74c:	460a      	mov	r2, r1
   da74e:	4601      	mov	r1, r0
   da750:	2002      	movs	r0, #2
   da752:	f3af 8000 	nop.w
   da756:	bd10      	pop	{r4, pc}
   da758:	4620      	mov	r0, r4
   da75a:	e7fc      	b.n	da756 <__cxa_atexit+0x12>
   da75c:	00000000 	.word	0x00000000

000da760 <memcpy>:
   da760:	440a      	add	r2, r1
   da762:	4291      	cmp	r1, r2
   da764:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da768:	d100      	bne.n	da76c <memcpy+0xc>
   da76a:	4770      	bx	lr
   da76c:	b510      	push	{r4, lr}
   da76e:	f811 4b01 	ldrb.w	r4, [r1], #1
   da772:	f803 4f01 	strb.w	r4, [r3, #1]!
   da776:	4291      	cmp	r1, r2
   da778:	d1f9      	bne.n	da76e <memcpy+0xe>
   da77a:	bd10      	pop	{r4, pc}

000da77c <memmove>:
   da77c:	4288      	cmp	r0, r1
   da77e:	b510      	push	{r4, lr}
   da780:	eb01 0402 	add.w	r4, r1, r2
   da784:	d902      	bls.n	da78c <memmove+0x10>
   da786:	4284      	cmp	r4, r0
   da788:	4623      	mov	r3, r4
   da78a:	d807      	bhi.n	da79c <memmove+0x20>
   da78c:	1e43      	subs	r3, r0, #1
   da78e:	42a1      	cmp	r1, r4
   da790:	d008      	beq.n	da7a4 <memmove+0x28>
   da792:	f811 2b01 	ldrb.w	r2, [r1], #1
   da796:	f803 2f01 	strb.w	r2, [r3, #1]!
   da79a:	e7f8      	b.n	da78e <memmove+0x12>
   da79c:	4402      	add	r2, r0
   da79e:	4601      	mov	r1, r0
   da7a0:	428a      	cmp	r2, r1
   da7a2:	d100      	bne.n	da7a6 <memmove+0x2a>
   da7a4:	bd10      	pop	{r4, pc}
   da7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da7aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   da7ae:	e7f7      	b.n	da7a0 <memmove+0x24>

000da7b0 <memset>:
   da7b0:	4402      	add	r2, r0
   da7b2:	4603      	mov	r3, r0
   da7b4:	4293      	cmp	r3, r2
   da7b6:	d100      	bne.n	da7ba <memset+0xa>
   da7b8:	4770      	bx	lr
   da7ba:	f803 1b01 	strb.w	r1, [r3], #1
   da7be:	e7f9      	b.n	da7b4 <memset+0x4>

000da7c0 <_calloc_r>:
   da7c0:	b513      	push	{r0, r1, r4, lr}
   da7c2:	434a      	muls	r2, r1
   da7c4:	4611      	mov	r1, r2
   da7c6:	9201      	str	r2, [sp, #4]
   da7c8:	f7fc fcdc 	bl	d7184 <_malloc_r>
   da7cc:	4604      	mov	r4, r0
   da7ce:	b118      	cbz	r0, da7d8 <_calloc_r+0x18>
   da7d0:	9a01      	ldr	r2, [sp, #4]
   da7d2:	2100      	movs	r1, #0
   da7d4:	f7ff ffec 	bl	da7b0 <memset>
   da7d8:	4620      	mov	r0, r4
   da7da:	b002      	add	sp, #8
   da7dc:	bd10      	pop	{r4, pc}
	...

000da7e0 <srand>:
   da7e0:	b538      	push	{r3, r4, r5, lr}
   da7e2:	4b0d      	ldr	r3, [pc, #52]	; (da818 <srand+0x38>)
   da7e4:	681d      	ldr	r5, [r3, #0]
   da7e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da7e8:	4604      	mov	r4, r0
   da7ea:	b97b      	cbnz	r3, da80c <srand+0x2c>
   da7ec:	2018      	movs	r0, #24
   da7ee:	f7fc fca1 	bl	d7134 <malloc>
   da7f2:	4a0a      	ldr	r2, [pc, #40]	; (da81c <srand+0x3c>)
   da7f4:	4b0a      	ldr	r3, [pc, #40]	; (da820 <srand+0x40>)
   da7f6:	63a8      	str	r0, [r5, #56]	; 0x38
   da7f8:	e9c0 2300 	strd	r2, r3, [r0]
   da7fc:	4b09      	ldr	r3, [pc, #36]	; (da824 <srand+0x44>)
   da7fe:	6083      	str	r3, [r0, #8]
   da800:	230b      	movs	r3, #11
   da802:	8183      	strh	r3, [r0, #12]
   da804:	2201      	movs	r2, #1
   da806:	2300      	movs	r3, #0
   da808:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da80c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da80e:	2200      	movs	r2, #0
   da810:	611c      	str	r4, [r3, #16]
   da812:	615a      	str	r2, [r3, #20]
   da814:	bd38      	pop	{r3, r4, r5, pc}
   da816:	bf00      	nop
   da818:	2003e26c 	.word	0x2003e26c
   da81c:	abcd330e 	.word	0xabcd330e
   da820:	e66d1234 	.word	0xe66d1234
   da824:	0005deec 	.word	0x0005deec

000da828 <strchr>:
   da828:	b2c9      	uxtb	r1, r1
   da82a:	4603      	mov	r3, r0
   da82c:	f810 2b01 	ldrb.w	r2, [r0], #1
   da830:	b11a      	cbz	r2, da83a <strchr+0x12>
   da832:	428a      	cmp	r2, r1
   da834:	d1f9      	bne.n	da82a <strchr+0x2>
   da836:	4618      	mov	r0, r3
   da838:	4770      	bx	lr
   da83a:	2900      	cmp	r1, #0
   da83c:	bf18      	it	ne
   da83e:	2300      	movne	r3, #0
   da840:	e7f9      	b.n	da836 <strchr+0xe>

000da842 <strcmp>:
   da842:	f810 2b01 	ldrb.w	r2, [r0], #1
   da846:	f811 3b01 	ldrb.w	r3, [r1], #1
   da84a:	2a01      	cmp	r2, #1
   da84c:	bf28      	it	cs
   da84e:	429a      	cmpcs	r2, r3
   da850:	d0f7      	beq.n	da842 <strcmp>
   da852:	1ad0      	subs	r0, r2, r3
   da854:	4770      	bx	lr

000da856 <strcpy>:
   da856:	4603      	mov	r3, r0
   da858:	f811 2b01 	ldrb.w	r2, [r1], #1
   da85c:	f803 2b01 	strb.w	r2, [r3], #1
   da860:	2a00      	cmp	r2, #0
   da862:	d1f9      	bne.n	da858 <strcpy+0x2>
   da864:	4770      	bx	lr
	...

000da868 <strdup>:
   da868:	4b02      	ldr	r3, [pc, #8]	; (da874 <strdup+0xc>)
   da86a:	4601      	mov	r1, r0
   da86c:	6818      	ldr	r0, [r3, #0]
   da86e:	f000 b803 	b.w	da878 <_strdup_r>
   da872:	bf00      	nop
   da874:	2003e26c 	.word	0x2003e26c

000da878 <_strdup_r>:
   da878:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da87a:	4604      	mov	r4, r0
   da87c:	4608      	mov	r0, r1
   da87e:	460d      	mov	r5, r1
   da880:	f000 f80f 	bl	da8a2 <strlen>
   da884:	1c42      	adds	r2, r0, #1
   da886:	4611      	mov	r1, r2
   da888:	4620      	mov	r0, r4
   da88a:	9201      	str	r2, [sp, #4]
   da88c:	f7fc fc7a 	bl	d7184 <_malloc_r>
   da890:	4604      	mov	r4, r0
   da892:	b118      	cbz	r0, da89c <_strdup_r+0x24>
   da894:	9a01      	ldr	r2, [sp, #4]
   da896:	4629      	mov	r1, r5
   da898:	f7ff ff62 	bl	da760 <memcpy>
   da89c:	4620      	mov	r0, r4
   da89e:	b003      	add	sp, #12
   da8a0:	bd30      	pop	{r4, r5, pc}

000da8a2 <strlen>:
   da8a2:	4603      	mov	r3, r0
   da8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
   da8a8:	2a00      	cmp	r2, #0
   da8aa:	d1fb      	bne.n	da8a4 <strlen+0x2>
   da8ac:	1a18      	subs	r0, r3, r0
   da8ae:	3801      	subs	r0, #1
   da8b0:	4770      	bx	lr

000da8b2 <strncmp>:
   da8b2:	b510      	push	{r4, lr}
   da8b4:	b16a      	cbz	r2, da8d2 <strncmp+0x20>
   da8b6:	3901      	subs	r1, #1
   da8b8:	1884      	adds	r4, r0, r2
   da8ba:	f810 3b01 	ldrb.w	r3, [r0], #1
   da8be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   da8c2:	4293      	cmp	r3, r2
   da8c4:	d103      	bne.n	da8ce <strncmp+0x1c>
   da8c6:	42a0      	cmp	r0, r4
   da8c8:	d001      	beq.n	da8ce <strncmp+0x1c>
   da8ca:	2b00      	cmp	r3, #0
   da8cc:	d1f5      	bne.n	da8ba <strncmp+0x8>
   da8ce:	1a98      	subs	r0, r3, r2
   da8d0:	bd10      	pop	{r4, pc}
   da8d2:	4610      	mov	r0, r2
   da8d4:	e7fc      	b.n	da8d0 <strncmp+0x1e>

000da8d6 <strncpy>:
   da8d6:	b510      	push	{r4, lr}
   da8d8:	3901      	subs	r1, #1
   da8da:	4603      	mov	r3, r0
   da8dc:	b132      	cbz	r2, da8ec <strncpy+0x16>
   da8de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da8e2:	f803 4b01 	strb.w	r4, [r3], #1
   da8e6:	3a01      	subs	r2, #1
   da8e8:	2c00      	cmp	r4, #0
   da8ea:	d1f7      	bne.n	da8dc <strncpy+0x6>
   da8ec:	441a      	add	r2, r3
   da8ee:	2100      	movs	r1, #0
   da8f0:	4293      	cmp	r3, r2
   da8f2:	d100      	bne.n	da8f6 <strncpy+0x20>
   da8f4:	bd10      	pop	{r4, pc}
   da8f6:	f803 1b01 	strb.w	r1, [r3], #1
   da8fa:	e7f9      	b.n	da8f0 <strncpy+0x1a>

000da8fc <strstr>:
   da8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   da8fe:	780c      	ldrb	r4, [r1, #0]
   da900:	b164      	cbz	r4, da91c <strstr+0x20>
   da902:	4603      	mov	r3, r0
   da904:	781a      	ldrb	r2, [r3, #0]
   da906:	4618      	mov	r0, r3
   da908:	1c5e      	adds	r6, r3, #1
   da90a:	b90a      	cbnz	r2, da910 <strstr+0x14>
   da90c:	4610      	mov	r0, r2
   da90e:	e005      	b.n	da91c <strstr+0x20>
   da910:	4294      	cmp	r4, r2
   da912:	d108      	bne.n	da926 <strstr+0x2a>
   da914:	460d      	mov	r5, r1
   da916:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   da91a:	b902      	cbnz	r2, da91e <strstr+0x22>
   da91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da91e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   da922:	4297      	cmp	r7, r2
   da924:	d0f7      	beq.n	da916 <strstr+0x1a>
   da926:	4633      	mov	r3, r6
   da928:	e7ec      	b.n	da904 <strstr+0x8>

000da92a <sulp>:
   da92a:	b570      	push	{r4, r5, r6, lr}
   da92c:	4604      	mov	r4, r0
   da92e:	460d      	mov	r5, r1
   da930:	ec45 4b10 	vmov	d0, r4, r5
   da934:	4616      	mov	r6, r2
   da936:	f001 fceb 	bl	dc310 <__ulp>
   da93a:	ec51 0b10 	vmov	r0, r1, d0
   da93e:	b17e      	cbz	r6, da960 <sulp+0x36>
   da940:	f3c5 530a 	ubfx	r3, r5, #20, #11
   da944:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da948:	2b00      	cmp	r3, #0
   da94a:	dd09      	ble.n	da960 <sulp+0x36>
   da94c:	051b      	lsls	r3, r3, #20
   da94e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   da952:	2400      	movs	r4, #0
   da954:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   da958:	4622      	mov	r2, r4
   da95a:	462b      	mov	r3, r5
   da95c:	f7ff fa04 	bl	d9d68 <__aeabi_dmul>
   da960:	bd70      	pop	{r4, r5, r6, pc}
   da962:	0000      	movs	r0, r0
   da964:	0000      	movs	r0, r0
	...

000da968 <_strtod_l>:
   da968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da96c:	b0a3      	sub	sp, #140	; 0x8c
   da96e:	461f      	mov	r7, r3
   da970:	2300      	movs	r3, #0
   da972:	931e      	str	r3, [sp, #120]	; 0x78
   da974:	4ba4      	ldr	r3, [pc, #656]	; (dac08 <_strtod_l+0x2a0>)
   da976:	9219      	str	r2, [sp, #100]	; 0x64
   da978:	681b      	ldr	r3, [r3, #0]
   da97a:	9307      	str	r3, [sp, #28]
   da97c:	4604      	mov	r4, r0
   da97e:	4618      	mov	r0, r3
   da980:	4688      	mov	r8, r1
   da982:	f7ff ff8e 	bl	da8a2 <strlen>
   da986:	f04f 0a00 	mov.w	sl, #0
   da98a:	4605      	mov	r5, r0
   da98c:	f04f 0b00 	mov.w	fp, #0
   da990:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   da994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da996:	781a      	ldrb	r2, [r3, #0]
   da998:	2a2b      	cmp	r2, #43	; 0x2b
   da99a:	d04c      	beq.n	daa36 <_strtod_l+0xce>
   da99c:	d839      	bhi.n	daa12 <_strtod_l+0xaa>
   da99e:	2a0d      	cmp	r2, #13
   da9a0:	d832      	bhi.n	daa08 <_strtod_l+0xa0>
   da9a2:	2a08      	cmp	r2, #8
   da9a4:	d832      	bhi.n	daa0c <_strtod_l+0xa4>
   da9a6:	2a00      	cmp	r2, #0
   da9a8:	d03c      	beq.n	daa24 <_strtod_l+0xbc>
   da9aa:	2300      	movs	r3, #0
   da9ac:	930e      	str	r3, [sp, #56]	; 0x38
   da9ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   da9b0:	7833      	ldrb	r3, [r6, #0]
   da9b2:	2b30      	cmp	r3, #48	; 0x30
   da9b4:	f040 80b4 	bne.w	dab20 <_strtod_l+0x1b8>
   da9b8:	7873      	ldrb	r3, [r6, #1]
   da9ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da9be:	2b58      	cmp	r3, #88	; 0x58
   da9c0:	d16c      	bne.n	daa9c <_strtod_l+0x134>
   da9c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da9c4:	9301      	str	r3, [sp, #4]
   da9c6:	ab1e      	add	r3, sp, #120	; 0x78
   da9c8:	9702      	str	r7, [sp, #8]
   da9ca:	9300      	str	r3, [sp, #0]
   da9cc:	4a8f      	ldr	r2, [pc, #572]	; (dac0c <_strtod_l+0x2a4>)
   da9ce:	ab1f      	add	r3, sp, #124	; 0x7c
   da9d0:	a91d      	add	r1, sp, #116	; 0x74
   da9d2:	4620      	mov	r0, r4
   da9d4:	f000 fe98 	bl	db708 <__gethex>
   da9d8:	f010 0707 	ands.w	r7, r0, #7
   da9dc:	4605      	mov	r5, r0
   da9de:	d005      	beq.n	da9ec <_strtod_l+0x84>
   da9e0:	2f06      	cmp	r7, #6
   da9e2:	d12a      	bne.n	daa3a <_strtod_l+0xd2>
   da9e4:	3601      	adds	r6, #1
   da9e6:	2300      	movs	r3, #0
   da9e8:	961d      	str	r6, [sp, #116]	; 0x74
   da9ea:	930e      	str	r3, [sp, #56]	; 0x38
   da9ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   da9ee:	2b00      	cmp	r3, #0
   da9f0:	f040 8596 	bne.w	db520 <_strtod_l+0xbb8>
   da9f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da9f6:	b1db      	cbz	r3, daa30 <_strtod_l+0xc8>
   da9f8:	4652      	mov	r2, sl
   da9fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da9fe:	ec43 2b10 	vmov	d0, r2, r3
   daa02:	b023      	add	sp, #140	; 0x8c
   daa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daa08:	2a20      	cmp	r2, #32
   daa0a:	d1ce      	bne.n	da9aa <_strtod_l+0x42>
   daa0c:	3301      	adds	r3, #1
   daa0e:	931d      	str	r3, [sp, #116]	; 0x74
   daa10:	e7c0      	b.n	da994 <_strtod_l+0x2c>
   daa12:	2a2d      	cmp	r2, #45	; 0x2d
   daa14:	d1c9      	bne.n	da9aa <_strtod_l+0x42>
   daa16:	2201      	movs	r2, #1
   daa18:	920e      	str	r2, [sp, #56]	; 0x38
   daa1a:	1c5a      	adds	r2, r3, #1
   daa1c:	921d      	str	r2, [sp, #116]	; 0x74
   daa1e:	785b      	ldrb	r3, [r3, #1]
   daa20:	2b00      	cmp	r3, #0
   daa22:	d1c4      	bne.n	da9ae <_strtod_l+0x46>
   daa24:	9b19      	ldr	r3, [sp, #100]	; 0x64
   daa26:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   daa2a:	2b00      	cmp	r3, #0
   daa2c:	f040 8576 	bne.w	db51c <_strtod_l+0xbb4>
   daa30:	4652      	mov	r2, sl
   daa32:	465b      	mov	r3, fp
   daa34:	e7e3      	b.n	da9fe <_strtod_l+0x96>
   daa36:	2200      	movs	r2, #0
   daa38:	e7ee      	b.n	daa18 <_strtod_l+0xb0>
   daa3a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   daa3c:	b13a      	cbz	r2, daa4e <_strtod_l+0xe6>
   daa3e:	2135      	movs	r1, #53	; 0x35
   daa40:	a820      	add	r0, sp, #128	; 0x80
   daa42:	f001 fd64 	bl	dc50e <__copybits>
   daa46:	991e      	ldr	r1, [sp, #120]	; 0x78
   daa48:	4620      	mov	r0, r4
   daa4a:	f001 f999 	bl	dbd80 <_Bfree>
   daa4e:	3f01      	subs	r7, #1
   daa50:	2f05      	cmp	r7, #5
   daa52:	d807      	bhi.n	daa64 <_strtod_l+0xfc>
   daa54:	e8df f007 	tbb	[pc, r7]
   daa58:	1d180b0e 	.word	0x1d180b0e
   daa5c:	030e      	.short	0x030e
   daa5e:	f04f 0b00 	mov.w	fp, #0
   daa62:	46da      	mov	sl, fp
   daa64:	0728      	lsls	r0, r5, #28
   daa66:	d5c1      	bpl.n	da9ec <_strtod_l+0x84>
   daa68:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   daa6c:	e7be      	b.n	da9ec <_strtod_l+0x84>
   daa6e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   daa72:	e7f7      	b.n	daa64 <_strtod_l+0xfc>
   daa74:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   daa78:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   daa7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   daa7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   daa82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   daa86:	e7ed      	b.n	daa64 <_strtod_l+0xfc>
   daa88:	f8df b184 	ldr.w	fp, [pc, #388]	; dac10 <_strtod_l+0x2a8>
   daa8c:	f04f 0a00 	mov.w	sl, #0
   daa90:	e7e8      	b.n	daa64 <_strtod_l+0xfc>
   daa92:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   daa96:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   daa9a:	e7e3      	b.n	daa64 <_strtod_l+0xfc>
   daa9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daa9e:	1c5a      	adds	r2, r3, #1
   daaa0:	921d      	str	r2, [sp, #116]	; 0x74
   daaa2:	785b      	ldrb	r3, [r3, #1]
   daaa4:	2b30      	cmp	r3, #48	; 0x30
   daaa6:	d0f9      	beq.n	daa9c <_strtod_l+0x134>
   daaa8:	2b00      	cmp	r3, #0
   daaaa:	d09f      	beq.n	da9ec <_strtod_l+0x84>
   daaac:	2301      	movs	r3, #1
   daaae:	f04f 0900 	mov.w	r9, #0
   daab2:	9304      	str	r3, [sp, #16]
   daab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daab6:	930a      	str	r3, [sp, #40]	; 0x28
   daab8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   daabc:	464f      	mov	r7, r9
   daabe:	220a      	movs	r2, #10
   daac0:	981d      	ldr	r0, [sp, #116]	; 0x74
   daac2:	7806      	ldrb	r6, [r0, #0]
   daac4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   daac8:	b2d9      	uxtb	r1, r3
   daaca:	2909      	cmp	r1, #9
   daacc:	d92a      	bls.n	dab24 <_strtod_l+0x1bc>
   daace:	9907      	ldr	r1, [sp, #28]
   daad0:	462a      	mov	r2, r5
   daad2:	f7ff feee 	bl	da8b2 <strncmp>
   daad6:	b398      	cbz	r0, dab40 <_strtod_l+0x1d8>
   daad8:	2000      	movs	r0, #0
   daada:	4633      	mov	r3, r6
   daadc:	463d      	mov	r5, r7
   daade:	9007      	str	r0, [sp, #28]
   daae0:	4602      	mov	r2, r0
   daae2:	2b65      	cmp	r3, #101	; 0x65
   daae4:	d001      	beq.n	daaea <_strtod_l+0x182>
   daae6:	2b45      	cmp	r3, #69	; 0x45
   daae8:	d118      	bne.n	dab1c <_strtod_l+0x1b4>
   daaea:	b91d      	cbnz	r5, daaf4 <_strtod_l+0x18c>
   daaec:	9b04      	ldr	r3, [sp, #16]
   daaee:	4303      	orrs	r3, r0
   daaf0:	d098      	beq.n	daa24 <_strtod_l+0xbc>
   daaf2:	2500      	movs	r5, #0
   daaf4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   daaf8:	f108 0301 	add.w	r3, r8, #1
   daafc:	931d      	str	r3, [sp, #116]	; 0x74
   daafe:	f898 3001 	ldrb.w	r3, [r8, #1]
   dab02:	2b2b      	cmp	r3, #43	; 0x2b
   dab04:	d075      	beq.n	dabf2 <_strtod_l+0x28a>
   dab06:	2b2d      	cmp	r3, #45	; 0x2d
   dab08:	d07b      	beq.n	dac02 <_strtod_l+0x29a>
   dab0a:	f04f 0c00 	mov.w	ip, #0
   dab0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dab12:	2909      	cmp	r1, #9
   dab14:	f240 8082 	bls.w	dac1c <_strtod_l+0x2b4>
   dab18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dab1c:	2600      	movs	r6, #0
   dab1e:	e09d      	b.n	dac5c <_strtod_l+0x2f4>
   dab20:	2300      	movs	r3, #0
   dab22:	e7c4      	b.n	daaae <_strtod_l+0x146>
   dab24:	2f08      	cmp	r7, #8
   dab26:	bfd8      	it	le
   dab28:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dab2a:	f100 0001 	add.w	r0, r0, #1
   dab2e:	bfda      	itte	le
   dab30:	fb02 3301 	mlale	r3, r2, r1, r3
   dab34:	9309      	strle	r3, [sp, #36]	; 0x24
   dab36:	fb02 3909 	mlagt	r9, r2, r9, r3
   dab3a:	3701      	adds	r7, #1
   dab3c:	901d      	str	r0, [sp, #116]	; 0x74
   dab3e:	e7bf      	b.n	daac0 <_strtod_l+0x158>
   dab40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dab42:	195a      	adds	r2, r3, r5
   dab44:	921d      	str	r2, [sp, #116]	; 0x74
   dab46:	5d5b      	ldrb	r3, [r3, r5]
   dab48:	2f00      	cmp	r7, #0
   dab4a:	d037      	beq.n	dabbc <_strtod_l+0x254>
   dab4c:	9007      	str	r0, [sp, #28]
   dab4e:	463d      	mov	r5, r7
   dab50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dab54:	2a09      	cmp	r2, #9
   dab56:	d912      	bls.n	dab7e <_strtod_l+0x216>
   dab58:	2201      	movs	r2, #1
   dab5a:	e7c2      	b.n	daae2 <_strtod_l+0x17a>
   dab5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dab5e:	1c5a      	adds	r2, r3, #1
   dab60:	921d      	str	r2, [sp, #116]	; 0x74
   dab62:	785b      	ldrb	r3, [r3, #1]
   dab64:	3001      	adds	r0, #1
   dab66:	2b30      	cmp	r3, #48	; 0x30
   dab68:	d0f8      	beq.n	dab5c <_strtod_l+0x1f4>
   dab6a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dab6e:	2a08      	cmp	r2, #8
   dab70:	f200 84db 	bhi.w	db52a <_strtod_l+0xbc2>
   dab74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dab76:	9007      	str	r0, [sp, #28]
   dab78:	2000      	movs	r0, #0
   dab7a:	920a      	str	r2, [sp, #40]	; 0x28
   dab7c:	4605      	mov	r5, r0
   dab7e:	3b30      	subs	r3, #48	; 0x30
   dab80:	f100 0201 	add.w	r2, r0, #1
   dab84:	d014      	beq.n	dabb0 <_strtod_l+0x248>
   dab86:	9907      	ldr	r1, [sp, #28]
   dab88:	4411      	add	r1, r2
   dab8a:	9107      	str	r1, [sp, #28]
   dab8c:	462a      	mov	r2, r5
   dab8e:	eb00 0e05 	add.w	lr, r0, r5
   dab92:	210a      	movs	r1, #10
   dab94:	4572      	cmp	r2, lr
   dab96:	d113      	bne.n	dabc0 <_strtod_l+0x258>
   dab98:	182a      	adds	r2, r5, r0
   dab9a:	2a08      	cmp	r2, #8
   dab9c:	f105 0501 	add.w	r5, r5, #1
   daba0:	4405      	add	r5, r0
   daba2:	dc1c      	bgt.n	dabde <_strtod_l+0x276>
   daba4:	9909      	ldr	r1, [sp, #36]	; 0x24
   daba6:	220a      	movs	r2, #10
   daba8:	fb02 3301 	mla	r3, r2, r1, r3
   dabac:	9309      	str	r3, [sp, #36]	; 0x24
   dabae:	2200      	movs	r2, #0
   dabb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dabb2:	1c59      	adds	r1, r3, #1
   dabb4:	911d      	str	r1, [sp, #116]	; 0x74
   dabb6:	785b      	ldrb	r3, [r3, #1]
   dabb8:	4610      	mov	r0, r2
   dabba:	e7c9      	b.n	dab50 <_strtod_l+0x1e8>
   dabbc:	4638      	mov	r0, r7
   dabbe:	e7d2      	b.n	dab66 <_strtod_l+0x1fe>
   dabc0:	2a08      	cmp	r2, #8
   dabc2:	dc04      	bgt.n	dabce <_strtod_l+0x266>
   dabc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dabc6:	434e      	muls	r6, r1
   dabc8:	9609      	str	r6, [sp, #36]	; 0x24
   dabca:	3201      	adds	r2, #1
   dabcc:	e7e2      	b.n	dab94 <_strtod_l+0x22c>
   dabce:	f102 0c01 	add.w	ip, r2, #1
   dabd2:	f1bc 0f10 	cmp.w	ip, #16
   dabd6:	bfd8      	it	le
   dabd8:	fb01 f909 	mulle.w	r9, r1, r9
   dabdc:	e7f5      	b.n	dabca <_strtod_l+0x262>
   dabde:	2d10      	cmp	r5, #16
   dabe0:	bfdc      	itt	le
   dabe2:	220a      	movle	r2, #10
   dabe4:	fb02 3909 	mlale	r9, r2, r9, r3
   dabe8:	e7e1      	b.n	dabae <_strtod_l+0x246>
   dabea:	2300      	movs	r3, #0
   dabec:	9307      	str	r3, [sp, #28]
   dabee:	2201      	movs	r2, #1
   dabf0:	e77c      	b.n	daaec <_strtod_l+0x184>
   dabf2:	f04f 0c00 	mov.w	ip, #0
   dabf6:	f108 0302 	add.w	r3, r8, #2
   dabfa:	931d      	str	r3, [sp, #116]	; 0x74
   dabfc:	f898 3002 	ldrb.w	r3, [r8, #2]
   dac00:	e785      	b.n	dab0e <_strtod_l+0x1a6>
   dac02:	f04f 0c01 	mov.w	ip, #1
   dac06:	e7f6      	b.n	dabf6 <_strtod_l+0x28e>
   dac08:	000dd3c4 	.word	0x000dd3c4
   dac0c:	000dd26c 	.word	0x000dd26c
   dac10:	7ff00000 	.word	0x7ff00000
   dac14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dac16:	1c59      	adds	r1, r3, #1
   dac18:	911d      	str	r1, [sp, #116]	; 0x74
   dac1a:	785b      	ldrb	r3, [r3, #1]
   dac1c:	2b30      	cmp	r3, #48	; 0x30
   dac1e:	d0f9      	beq.n	dac14 <_strtod_l+0x2ac>
   dac20:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dac24:	2908      	cmp	r1, #8
   dac26:	f63f af79 	bhi.w	dab1c <_strtod_l+0x1b4>
   dac2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dac2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dac30:	9308      	str	r3, [sp, #32]
   dac32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dac34:	1c59      	adds	r1, r3, #1
   dac36:	911d      	str	r1, [sp, #116]	; 0x74
   dac38:	785b      	ldrb	r3, [r3, #1]
   dac3a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dac3e:	2e09      	cmp	r6, #9
   dac40:	d937      	bls.n	dacb2 <_strtod_l+0x34a>
   dac42:	9e08      	ldr	r6, [sp, #32]
   dac44:	1b89      	subs	r1, r1, r6
   dac46:	2908      	cmp	r1, #8
   dac48:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dac4c:	dc02      	bgt.n	dac54 <_strtod_l+0x2ec>
   dac4e:	4576      	cmp	r6, lr
   dac50:	bfa8      	it	ge
   dac52:	4676      	movge	r6, lr
   dac54:	f1bc 0f00 	cmp.w	ip, #0
   dac58:	d000      	beq.n	dac5c <_strtod_l+0x2f4>
   dac5a:	4276      	negs	r6, r6
   dac5c:	2d00      	cmp	r5, #0
   dac5e:	d14f      	bne.n	dad00 <_strtod_l+0x398>
   dac60:	9904      	ldr	r1, [sp, #16]
   dac62:	4301      	orrs	r1, r0
   dac64:	f47f aec2 	bne.w	da9ec <_strtod_l+0x84>
   dac68:	2a00      	cmp	r2, #0
   dac6a:	f47f aedb 	bne.w	daa24 <_strtod_l+0xbc>
   dac6e:	2b69      	cmp	r3, #105	; 0x69
   dac70:	d027      	beq.n	dacc2 <_strtod_l+0x35a>
   dac72:	dc24      	bgt.n	dacbe <_strtod_l+0x356>
   dac74:	2b49      	cmp	r3, #73	; 0x49
   dac76:	d024      	beq.n	dacc2 <_strtod_l+0x35a>
   dac78:	2b4e      	cmp	r3, #78	; 0x4e
   dac7a:	f47f aed3 	bne.w	daa24 <_strtod_l+0xbc>
   dac7e:	499e      	ldr	r1, [pc, #632]	; (daef8 <_strtod_l+0x590>)
   dac80:	a81d      	add	r0, sp, #116	; 0x74
   dac82:	f000 ff87 	bl	dbb94 <__match>
   dac86:	2800      	cmp	r0, #0
   dac88:	f43f aecc 	beq.w	daa24 <_strtod_l+0xbc>
   dac8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dac8e:	781b      	ldrb	r3, [r3, #0]
   dac90:	2b28      	cmp	r3, #40	; 0x28
   dac92:	d12d      	bne.n	dacf0 <_strtod_l+0x388>
   dac94:	4999      	ldr	r1, [pc, #612]	; (daefc <_strtod_l+0x594>)
   dac96:	aa20      	add	r2, sp, #128	; 0x80
   dac98:	a81d      	add	r0, sp, #116	; 0x74
   dac9a:	f000 ff8f 	bl	dbbbc <__hexnan>
   dac9e:	2805      	cmp	r0, #5
   daca0:	d126      	bne.n	dacf0 <_strtod_l+0x388>
   daca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   daca4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   daca8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dacac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dacb0:	e69c      	b.n	da9ec <_strtod_l+0x84>
   dacb2:	210a      	movs	r1, #10
   dacb4:	fb01 3e0e 	mla	lr, r1, lr, r3
   dacb8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dacbc:	e7b9      	b.n	dac32 <_strtod_l+0x2ca>
   dacbe:	2b6e      	cmp	r3, #110	; 0x6e
   dacc0:	e7db      	b.n	dac7a <_strtod_l+0x312>
   dacc2:	498f      	ldr	r1, [pc, #572]	; (daf00 <_strtod_l+0x598>)
   dacc4:	a81d      	add	r0, sp, #116	; 0x74
   dacc6:	f000 ff65 	bl	dbb94 <__match>
   dacca:	2800      	cmp	r0, #0
   daccc:	f43f aeaa 	beq.w	daa24 <_strtod_l+0xbc>
   dacd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dacd2:	498c      	ldr	r1, [pc, #560]	; (daf04 <_strtod_l+0x59c>)
   dacd4:	3b01      	subs	r3, #1
   dacd6:	a81d      	add	r0, sp, #116	; 0x74
   dacd8:	931d      	str	r3, [sp, #116]	; 0x74
   dacda:	f000 ff5b 	bl	dbb94 <__match>
   dacde:	b910      	cbnz	r0, dace6 <_strtod_l+0x37e>
   dace0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dace2:	3301      	adds	r3, #1
   dace4:	931d      	str	r3, [sp, #116]	; 0x74
   dace6:	f8df b22c 	ldr.w	fp, [pc, #556]	; daf14 <_strtod_l+0x5ac>
   dacea:	f04f 0a00 	mov.w	sl, #0
   dacee:	e67d      	b.n	da9ec <_strtod_l+0x84>
   dacf0:	4885      	ldr	r0, [pc, #532]	; (daf08 <_strtod_l+0x5a0>)
   dacf2:	f7fe fe75 	bl	d99e0 <nan>
   dacf6:	ed8d 0b04 	vstr	d0, [sp, #16]
   dacfa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dacfe:	e675      	b.n	da9ec <_strtod_l+0x84>
   dad00:	9b07      	ldr	r3, [sp, #28]
   dad02:	9809      	ldr	r0, [sp, #36]	; 0x24
   dad04:	1af3      	subs	r3, r6, r3
   dad06:	2f00      	cmp	r7, #0
   dad08:	bf08      	it	eq
   dad0a:	462f      	moveq	r7, r5
   dad0c:	2d10      	cmp	r5, #16
   dad0e:	9308      	str	r3, [sp, #32]
   dad10:	46a8      	mov	r8, r5
   dad12:	bfa8      	it	ge
   dad14:	f04f 0810 	movge.w	r8, #16
   dad18:	f7fe ffac 	bl	d9c74 <__aeabi_ui2d>
   dad1c:	2d09      	cmp	r5, #9
   dad1e:	4682      	mov	sl, r0
   dad20:	468b      	mov	fp, r1
   dad22:	dd13      	ble.n	dad4c <_strtod_l+0x3e4>
   dad24:	4b79      	ldr	r3, [pc, #484]	; (daf0c <_strtod_l+0x5a4>)
   dad26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dad2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dad2e:	f7ff f81b 	bl	d9d68 <__aeabi_dmul>
   dad32:	4682      	mov	sl, r0
   dad34:	4648      	mov	r0, r9
   dad36:	468b      	mov	fp, r1
   dad38:	f7fe ff9c 	bl	d9c74 <__aeabi_ui2d>
   dad3c:	4602      	mov	r2, r0
   dad3e:	460b      	mov	r3, r1
   dad40:	4650      	mov	r0, sl
   dad42:	4659      	mov	r1, fp
   dad44:	f7fe fe5a 	bl	d99fc <__adddf3>
   dad48:	4682      	mov	sl, r0
   dad4a:	468b      	mov	fp, r1
   dad4c:	2d0f      	cmp	r5, #15
   dad4e:	dc38      	bgt.n	dadc2 <_strtod_l+0x45a>
   dad50:	9b08      	ldr	r3, [sp, #32]
   dad52:	2b00      	cmp	r3, #0
   dad54:	f43f ae4a 	beq.w	da9ec <_strtod_l+0x84>
   dad58:	dd24      	ble.n	dada4 <_strtod_l+0x43c>
   dad5a:	2b16      	cmp	r3, #22
   dad5c:	dc0b      	bgt.n	dad76 <_strtod_l+0x40e>
   dad5e:	4d6b      	ldr	r5, [pc, #428]	; (daf0c <_strtod_l+0x5a4>)
   dad60:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dad64:	e9d5 0100 	ldrd	r0, r1, [r5]
   dad68:	4652      	mov	r2, sl
   dad6a:	465b      	mov	r3, fp
   dad6c:	f7fe fffc 	bl	d9d68 <__aeabi_dmul>
   dad70:	4682      	mov	sl, r0
   dad72:	468b      	mov	fp, r1
   dad74:	e63a      	b.n	da9ec <_strtod_l+0x84>
   dad76:	9a08      	ldr	r2, [sp, #32]
   dad78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dad7c:	4293      	cmp	r3, r2
   dad7e:	db20      	blt.n	dadc2 <_strtod_l+0x45a>
   dad80:	4c62      	ldr	r4, [pc, #392]	; (daf0c <_strtod_l+0x5a4>)
   dad82:	f1c5 050f 	rsb	r5, r5, #15
   dad86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dad8a:	4652      	mov	r2, sl
   dad8c:	465b      	mov	r3, fp
   dad8e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dad92:	f7fe ffe9 	bl	d9d68 <__aeabi_dmul>
   dad96:	9b08      	ldr	r3, [sp, #32]
   dad98:	1b5d      	subs	r5, r3, r5
   dad9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dad9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   dada2:	e7e3      	b.n	dad6c <_strtod_l+0x404>
   dada4:	9b08      	ldr	r3, [sp, #32]
   dada6:	3316      	adds	r3, #22
   dada8:	db0b      	blt.n	dadc2 <_strtod_l+0x45a>
   dadaa:	9b07      	ldr	r3, [sp, #28]
   dadac:	4a57      	ldr	r2, [pc, #348]	; (daf0c <_strtod_l+0x5a4>)
   dadae:	1b9e      	subs	r6, r3, r6
   dadb0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dadb4:	e9d6 2300 	ldrd	r2, r3, [r6]
   dadb8:	4650      	mov	r0, sl
   dadba:	4659      	mov	r1, fp
   dadbc:	f7ff f8fe 	bl	d9fbc <__aeabi_ddiv>
   dadc0:	e7d6      	b.n	dad70 <_strtod_l+0x408>
   dadc2:	9b08      	ldr	r3, [sp, #32]
   dadc4:	eba5 0808 	sub.w	r8, r5, r8
   dadc8:	4498      	add	r8, r3
   dadca:	f1b8 0f00 	cmp.w	r8, #0
   dadce:	dd71      	ble.n	daeb4 <_strtod_l+0x54c>
   dadd0:	f018 030f 	ands.w	r3, r8, #15
   dadd4:	d00a      	beq.n	dadec <_strtod_l+0x484>
   dadd6:	494d      	ldr	r1, [pc, #308]	; (daf0c <_strtod_l+0x5a4>)
   dadd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   daddc:	4652      	mov	r2, sl
   dadde:	465b      	mov	r3, fp
   dade0:	e9d1 0100 	ldrd	r0, r1, [r1]
   dade4:	f7fe ffc0 	bl	d9d68 <__aeabi_dmul>
   dade8:	4682      	mov	sl, r0
   dadea:	468b      	mov	fp, r1
   dadec:	f038 080f 	bics.w	r8, r8, #15
   dadf0:	d04d      	beq.n	dae8e <_strtod_l+0x526>
   dadf2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dadf6:	dd22      	ble.n	dae3e <_strtod_l+0x4d6>
   dadf8:	2500      	movs	r5, #0
   dadfa:	462e      	mov	r6, r5
   dadfc:	9509      	str	r5, [sp, #36]	; 0x24
   dadfe:	9507      	str	r5, [sp, #28]
   dae00:	2322      	movs	r3, #34	; 0x22
   dae02:	f8df b110 	ldr.w	fp, [pc, #272]	; daf14 <_strtod_l+0x5ac>
   dae06:	6023      	str	r3, [r4, #0]
   dae08:	f04f 0a00 	mov.w	sl, #0
   dae0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dae0e:	2b00      	cmp	r3, #0
   dae10:	f43f adec 	beq.w	da9ec <_strtod_l+0x84>
   dae14:	991e      	ldr	r1, [sp, #120]	; 0x78
   dae16:	4620      	mov	r0, r4
   dae18:	f000 ffb2 	bl	dbd80 <_Bfree>
   dae1c:	9907      	ldr	r1, [sp, #28]
   dae1e:	4620      	mov	r0, r4
   dae20:	f000 ffae 	bl	dbd80 <_Bfree>
   dae24:	4631      	mov	r1, r6
   dae26:	4620      	mov	r0, r4
   dae28:	f000 ffaa 	bl	dbd80 <_Bfree>
   dae2c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dae2e:	4620      	mov	r0, r4
   dae30:	f000 ffa6 	bl	dbd80 <_Bfree>
   dae34:	4629      	mov	r1, r5
   dae36:	4620      	mov	r0, r4
   dae38:	f000 ffa2 	bl	dbd80 <_Bfree>
   dae3c:	e5d6      	b.n	da9ec <_strtod_l+0x84>
   dae3e:	2300      	movs	r3, #0
   dae40:	ea4f 1828 	mov.w	r8, r8, asr #4
   dae44:	4650      	mov	r0, sl
   dae46:	4659      	mov	r1, fp
   dae48:	4699      	mov	r9, r3
   dae4a:	f1b8 0f01 	cmp.w	r8, #1
   dae4e:	dc21      	bgt.n	dae94 <_strtod_l+0x52c>
   dae50:	b10b      	cbz	r3, dae56 <_strtod_l+0x4ee>
   dae52:	4682      	mov	sl, r0
   dae54:	468b      	mov	fp, r1
   dae56:	4b2e      	ldr	r3, [pc, #184]	; (daf10 <_strtod_l+0x5a8>)
   dae58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dae5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dae60:	4652      	mov	r2, sl
   dae62:	465b      	mov	r3, fp
   dae64:	e9d9 0100 	ldrd	r0, r1, [r9]
   dae68:	f7fe ff7e 	bl	d9d68 <__aeabi_dmul>
   dae6c:	4b29      	ldr	r3, [pc, #164]	; (daf14 <_strtod_l+0x5ac>)
   dae6e:	460a      	mov	r2, r1
   dae70:	400b      	ands	r3, r1
   dae72:	4929      	ldr	r1, [pc, #164]	; (daf18 <_strtod_l+0x5b0>)
   dae74:	428b      	cmp	r3, r1
   dae76:	4682      	mov	sl, r0
   dae78:	d8be      	bhi.n	dadf8 <_strtod_l+0x490>
   dae7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dae7e:	428b      	cmp	r3, r1
   dae80:	bf86      	itte	hi
   dae82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; daf1c <_strtod_l+0x5b4>
   dae86:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dae8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dae8e:	2300      	movs	r3, #0
   dae90:	9304      	str	r3, [sp, #16]
   dae92:	e081      	b.n	daf98 <_strtod_l+0x630>
   dae94:	f018 0f01 	tst.w	r8, #1
   dae98:	d007      	beq.n	daeaa <_strtod_l+0x542>
   dae9a:	4b1d      	ldr	r3, [pc, #116]	; (daf10 <_strtod_l+0x5a8>)
   dae9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   daea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   daea4:	f7fe ff60 	bl	d9d68 <__aeabi_dmul>
   daea8:	2301      	movs	r3, #1
   daeaa:	f109 0901 	add.w	r9, r9, #1
   daeae:	ea4f 0868 	mov.w	r8, r8, asr #1
   daeb2:	e7ca      	b.n	dae4a <_strtod_l+0x4e2>
   daeb4:	d0eb      	beq.n	dae8e <_strtod_l+0x526>
   daeb6:	f1c8 0800 	rsb	r8, r8, #0
   daeba:	f018 020f 	ands.w	r2, r8, #15
   daebe:	d00a      	beq.n	daed6 <_strtod_l+0x56e>
   daec0:	4b12      	ldr	r3, [pc, #72]	; (daf0c <_strtod_l+0x5a4>)
   daec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   daec6:	4650      	mov	r0, sl
   daec8:	4659      	mov	r1, fp
   daeca:	e9d3 2300 	ldrd	r2, r3, [r3]
   daece:	f7ff f875 	bl	d9fbc <__aeabi_ddiv>
   daed2:	4682      	mov	sl, r0
   daed4:	468b      	mov	fp, r1
   daed6:	ea5f 1828 	movs.w	r8, r8, asr #4
   daeda:	d0d8      	beq.n	dae8e <_strtod_l+0x526>
   daedc:	f1b8 0f1f 	cmp.w	r8, #31
   daee0:	dd1e      	ble.n	daf20 <_strtod_l+0x5b8>
   daee2:	2500      	movs	r5, #0
   daee4:	462e      	mov	r6, r5
   daee6:	9509      	str	r5, [sp, #36]	; 0x24
   daee8:	9507      	str	r5, [sp, #28]
   daeea:	2322      	movs	r3, #34	; 0x22
   daeec:	f04f 0a00 	mov.w	sl, #0
   daef0:	f04f 0b00 	mov.w	fp, #0
   daef4:	6023      	str	r3, [r4, #0]
   daef6:	e789      	b.n	dae0c <_strtod_l+0x4a4>
   daef8:	000dcff9 	.word	0x000dcff9
   daefc:	000dd280 	.word	0x000dd280
   daf00:	000dcffd 	.word	0x000dcffd
   daf04:	000dd265 	.word	0x000dd265
   daf08:	000dcc04 	.word	0x000dcc04
   daf0c:	000dd400 	.word	0x000dd400
   daf10:	000dd3d8 	.word	0x000dd3d8
   daf14:	7ff00000 	.word	0x7ff00000
   daf18:	7ca00000 	.word	0x7ca00000
   daf1c:	7fefffff 	.word	0x7fefffff
   daf20:	f018 0310 	ands.w	r3, r8, #16
   daf24:	bf18      	it	ne
   daf26:	236a      	movne	r3, #106	; 0x6a
   daf28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; db2e0 <_strtod_l+0x978>
   daf2c:	9304      	str	r3, [sp, #16]
   daf2e:	4650      	mov	r0, sl
   daf30:	4659      	mov	r1, fp
   daf32:	2300      	movs	r3, #0
   daf34:	f018 0f01 	tst.w	r8, #1
   daf38:	d004      	beq.n	daf44 <_strtod_l+0x5dc>
   daf3a:	e9d9 2300 	ldrd	r2, r3, [r9]
   daf3e:	f7fe ff13 	bl	d9d68 <__aeabi_dmul>
   daf42:	2301      	movs	r3, #1
   daf44:	ea5f 0868 	movs.w	r8, r8, asr #1
   daf48:	f109 0908 	add.w	r9, r9, #8
   daf4c:	d1f2      	bne.n	daf34 <_strtod_l+0x5cc>
   daf4e:	b10b      	cbz	r3, daf54 <_strtod_l+0x5ec>
   daf50:	4682      	mov	sl, r0
   daf52:	468b      	mov	fp, r1
   daf54:	9b04      	ldr	r3, [sp, #16]
   daf56:	b1bb      	cbz	r3, daf88 <_strtod_l+0x620>
   daf58:	f3cb 530a 	ubfx	r3, fp, #20, #11
   daf5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   daf60:	2b00      	cmp	r3, #0
   daf62:	4659      	mov	r1, fp
   daf64:	dd10      	ble.n	daf88 <_strtod_l+0x620>
   daf66:	2b1f      	cmp	r3, #31
   daf68:	f340 8128 	ble.w	db1bc <_strtod_l+0x854>
   daf6c:	2b34      	cmp	r3, #52	; 0x34
   daf6e:	bfde      	ittt	le
   daf70:	3b20      	suble	r3, #32
   daf72:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   daf76:	fa02 f303 	lslle.w	r3, r2, r3
   daf7a:	f04f 0a00 	mov.w	sl, #0
   daf7e:	bfcc      	ite	gt
   daf80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   daf84:	ea03 0b01 	andle.w	fp, r3, r1
   daf88:	2200      	movs	r2, #0
   daf8a:	2300      	movs	r3, #0
   daf8c:	4650      	mov	r0, sl
   daf8e:	4659      	mov	r1, fp
   daf90:	f7ff f952 	bl	da238 <__aeabi_dcmpeq>
   daf94:	2800      	cmp	r0, #0
   daf96:	d1a4      	bne.n	daee2 <_strtod_l+0x57a>
   daf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daf9a:	9300      	str	r3, [sp, #0]
   daf9c:	990a      	ldr	r1, [sp, #40]	; 0x28
   daf9e:	462b      	mov	r3, r5
   dafa0:	463a      	mov	r2, r7
   dafa2:	4620      	mov	r0, r4
   dafa4:	f000 ff41 	bl	dbe2a <__s2b>
   dafa8:	9009      	str	r0, [sp, #36]	; 0x24
   dafaa:	2800      	cmp	r0, #0
   dafac:	f43f af24 	beq.w	dadf8 <_strtod_l+0x490>
   dafb0:	9b07      	ldr	r3, [sp, #28]
   dafb2:	1b9e      	subs	r6, r3, r6
   dafb4:	9b08      	ldr	r3, [sp, #32]
   dafb6:	2b00      	cmp	r3, #0
   dafb8:	bfb4      	ite	lt
   dafba:	4633      	movlt	r3, r6
   dafbc:	2300      	movge	r3, #0
   dafbe:	9310      	str	r3, [sp, #64]	; 0x40
   dafc0:	9b08      	ldr	r3, [sp, #32]
   dafc2:	2500      	movs	r5, #0
   dafc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dafc8:	9318      	str	r3, [sp, #96]	; 0x60
   dafca:	462e      	mov	r6, r5
   dafcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dafce:	4620      	mov	r0, r4
   dafd0:	6859      	ldr	r1, [r3, #4]
   dafd2:	f000 fea1 	bl	dbd18 <_Balloc>
   dafd6:	9007      	str	r0, [sp, #28]
   dafd8:	2800      	cmp	r0, #0
   dafda:	f43f af11 	beq.w	dae00 <_strtod_l+0x498>
   dafde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dafe0:	691a      	ldr	r2, [r3, #16]
   dafe2:	3202      	adds	r2, #2
   dafe4:	f103 010c 	add.w	r1, r3, #12
   dafe8:	0092      	lsls	r2, r2, #2
   dafea:	300c      	adds	r0, #12
   dafec:	f7ff fbb8 	bl	da760 <memcpy>
   daff0:	ec4b ab10 	vmov	d0, sl, fp
   daff4:	aa20      	add	r2, sp, #128	; 0x80
   daff6:	a91f      	add	r1, sp, #124	; 0x7c
   daff8:	4620      	mov	r0, r4
   daffa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   daffe:	f001 fa03 	bl	dc408 <__d2b>
   db002:	901e      	str	r0, [sp, #120]	; 0x78
   db004:	2800      	cmp	r0, #0
   db006:	f43f aefb 	beq.w	dae00 <_strtod_l+0x498>
   db00a:	2101      	movs	r1, #1
   db00c:	4620      	mov	r0, r4
   db00e:	f000 ff9a 	bl	dbf46 <__i2b>
   db012:	4606      	mov	r6, r0
   db014:	2800      	cmp	r0, #0
   db016:	f43f aef3 	beq.w	dae00 <_strtod_l+0x498>
   db01a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   db01c:	9904      	ldr	r1, [sp, #16]
   db01e:	2b00      	cmp	r3, #0
   db020:	bfab      	itete	ge
   db022:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   db024:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   db026:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   db028:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   db02c:	bfac      	ite	ge
   db02e:	eb03 0902 	addge.w	r9, r3, r2
   db032:	1ad7      	sublt	r7, r2, r3
   db034:	9a20      	ldr	r2, [sp, #128]	; 0x80
   db036:	eba3 0801 	sub.w	r8, r3, r1
   db03a:	4490      	add	r8, r2
   db03c:	4ba3      	ldr	r3, [pc, #652]	; (db2cc <_strtod_l+0x964>)
   db03e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db042:	4598      	cmp	r8, r3
   db044:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   db048:	f280 80cc 	bge.w	db1e4 <_strtod_l+0x87c>
   db04c:	eba3 0308 	sub.w	r3, r3, r8
   db050:	2b1f      	cmp	r3, #31
   db052:	eba2 0203 	sub.w	r2, r2, r3
   db056:	f04f 0101 	mov.w	r1, #1
   db05a:	f300 80b6 	bgt.w	db1ca <_strtod_l+0x862>
   db05e:	fa01 f303 	lsl.w	r3, r1, r3
   db062:	9311      	str	r3, [sp, #68]	; 0x44
   db064:	2300      	movs	r3, #0
   db066:	930c      	str	r3, [sp, #48]	; 0x30
   db068:	eb09 0802 	add.w	r8, r9, r2
   db06c:	9b04      	ldr	r3, [sp, #16]
   db06e:	45c1      	cmp	r9, r8
   db070:	4417      	add	r7, r2
   db072:	441f      	add	r7, r3
   db074:	464b      	mov	r3, r9
   db076:	bfa8      	it	ge
   db078:	4643      	movge	r3, r8
   db07a:	42bb      	cmp	r3, r7
   db07c:	bfa8      	it	ge
   db07e:	463b      	movge	r3, r7
   db080:	2b00      	cmp	r3, #0
   db082:	bfc2      	ittt	gt
   db084:	eba8 0803 	subgt.w	r8, r8, r3
   db088:	1aff      	subgt	r7, r7, r3
   db08a:	eba9 0903 	subgt.w	r9, r9, r3
   db08e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db090:	2b00      	cmp	r3, #0
   db092:	dd17      	ble.n	db0c4 <_strtod_l+0x75c>
   db094:	4631      	mov	r1, r6
   db096:	461a      	mov	r2, r3
   db098:	4620      	mov	r0, r4
   db09a:	f000 fff9 	bl	dc090 <__pow5mult>
   db09e:	4606      	mov	r6, r0
   db0a0:	2800      	cmp	r0, #0
   db0a2:	f43f aead 	beq.w	dae00 <_strtod_l+0x498>
   db0a6:	4601      	mov	r1, r0
   db0a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db0aa:	4620      	mov	r0, r4
   db0ac:	f000 ff54 	bl	dbf58 <__multiply>
   db0b0:	900f      	str	r0, [sp, #60]	; 0x3c
   db0b2:	2800      	cmp	r0, #0
   db0b4:	f43f aea4 	beq.w	dae00 <_strtod_l+0x498>
   db0b8:	991e      	ldr	r1, [sp, #120]	; 0x78
   db0ba:	4620      	mov	r0, r4
   db0bc:	f000 fe60 	bl	dbd80 <_Bfree>
   db0c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db0c2:	931e      	str	r3, [sp, #120]	; 0x78
   db0c4:	f1b8 0f00 	cmp.w	r8, #0
   db0c8:	f300 8091 	bgt.w	db1ee <_strtod_l+0x886>
   db0cc:	9b08      	ldr	r3, [sp, #32]
   db0ce:	2b00      	cmp	r3, #0
   db0d0:	dd08      	ble.n	db0e4 <_strtod_l+0x77c>
   db0d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db0d4:	9907      	ldr	r1, [sp, #28]
   db0d6:	4620      	mov	r0, r4
   db0d8:	f000 ffda 	bl	dc090 <__pow5mult>
   db0dc:	9007      	str	r0, [sp, #28]
   db0de:	2800      	cmp	r0, #0
   db0e0:	f43f ae8e 	beq.w	dae00 <_strtod_l+0x498>
   db0e4:	2f00      	cmp	r7, #0
   db0e6:	dd08      	ble.n	db0fa <_strtod_l+0x792>
   db0e8:	9907      	ldr	r1, [sp, #28]
   db0ea:	463a      	mov	r2, r7
   db0ec:	4620      	mov	r0, r4
   db0ee:	f001 f81d 	bl	dc12c <__lshift>
   db0f2:	9007      	str	r0, [sp, #28]
   db0f4:	2800      	cmp	r0, #0
   db0f6:	f43f ae83 	beq.w	dae00 <_strtod_l+0x498>
   db0fa:	f1b9 0f00 	cmp.w	r9, #0
   db0fe:	dd08      	ble.n	db112 <_strtod_l+0x7aa>
   db100:	4631      	mov	r1, r6
   db102:	464a      	mov	r2, r9
   db104:	4620      	mov	r0, r4
   db106:	f001 f811 	bl	dc12c <__lshift>
   db10a:	4606      	mov	r6, r0
   db10c:	2800      	cmp	r0, #0
   db10e:	f43f ae77 	beq.w	dae00 <_strtod_l+0x498>
   db112:	9a07      	ldr	r2, [sp, #28]
   db114:	991e      	ldr	r1, [sp, #120]	; 0x78
   db116:	4620      	mov	r0, r4
   db118:	f001 f883 	bl	dc222 <__mdiff>
   db11c:	4605      	mov	r5, r0
   db11e:	2800      	cmp	r0, #0
   db120:	f43f ae6e 	beq.w	dae00 <_strtod_l+0x498>
   db124:	68c3      	ldr	r3, [r0, #12]
   db126:	930f      	str	r3, [sp, #60]	; 0x3c
   db128:	2300      	movs	r3, #0
   db12a:	60c3      	str	r3, [r0, #12]
   db12c:	4631      	mov	r1, r6
   db12e:	f001 f85c 	bl	dc1ea <__mcmp>
   db132:	2800      	cmp	r0, #0
   db134:	da65      	bge.n	db202 <_strtod_l+0x89a>
   db136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db138:	ea53 030a 	orrs.w	r3, r3, sl
   db13c:	f040 8087 	bne.w	db24e <_strtod_l+0x8e6>
   db140:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db144:	2b00      	cmp	r3, #0
   db146:	f040 8082 	bne.w	db24e <_strtod_l+0x8e6>
   db14a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db14e:	0d1b      	lsrs	r3, r3, #20
   db150:	051b      	lsls	r3, r3, #20
   db152:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db156:	d97a      	bls.n	db24e <_strtod_l+0x8e6>
   db158:	696b      	ldr	r3, [r5, #20]
   db15a:	b913      	cbnz	r3, db162 <_strtod_l+0x7fa>
   db15c:	692b      	ldr	r3, [r5, #16]
   db15e:	2b01      	cmp	r3, #1
   db160:	dd75      	ble.n	db24e <_strtod_l+0x8e6>
   db162:	4629      	mov	r1, r5
   db164:	2201      	movs	r2, #1
   db166:	4620      	mov	r0, r4
   db168:	f000 ffe0 	bl	dc12c <__lshift>
   db16c:	4631      	mov	r1, r6
   db16e:	4605      	mov	r5, r0
   db170:	f001 f83b 	bl	dc1ea <__mcmp>
   db174:	2800      	cmp	r0, #0
   db176:	dd6a      	ble.n	db24e <_strtod_l+0x8e6>
   db178:	9904      	ldr	r1, [sp, #16]
   db17a:	4a55      	ldr	r2, [pc, #340]	; (db2d0 <_strtod_l+0x968>)
   db17c:	465b      	mov	r3, fp
   db17e:	2900      	cmp	r1, #0
   db180:	f000 8085 	beq.w	db28e <_strtod_l+0x926>
   db184:	ea02 010b 	and.w	r1, r2, fp
   db188:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   db18c:	dc7f      	bgt.n	db28e <_strtod_l+0x926>
   db18e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   db192:	f77f aeaa 	ble.w	daeea <_strtod_l+0x582>
   db196:	4a4f      	ldr	r2, [pc, #316]	; (db2d4 <_strtod_l+0x96c>)
   db198:	2300      	movs	r3, #0
   db19a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   db19e:	4650      	mov	r0, sl
   db1a0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   db1a4:	4659      	mov	r1, fp
   db1a6:	f7fe fddf 	bl	d9d68 <__aeabi_dmul>
   db1aa:	460b      	mov	r3, r1
   db1ac:	4303      	orrs	r3, r0
   db1ae:	bf08      	it	eq
   db1b0:	2322      	moveq	r3, #34	; 0x22
   db1b2:	4682      	mov	sl, r0
   db1b4:	468b      	mov	fp, r1
   db1b6:	bf08      	it	eq
   db1b8:	6023      	streq	r3, [r4, #0]
   db1ba:	e62b      	b.n	dae14 <_strtod_l+0x4ac>
   db1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db1c0:	fa02 f303 	lsl.w	r3, r2, r3
   db1c4:	ea03 0a0a 	and.w	sl, r3, sl
   db1c8:	e6de      	b.n	daf88 <_strtod_l+0x620>
   db1ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   db1ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   db1d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   db1d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   db1da:	fa01 f308 	lsl.w	r3, r1, r8
   db1de:	930c      	str	r3, [sp, #48]	; 0x30
   db1e0:	9111      	str	r1, [sp, #68]	; 0x44
   db1e2:	e741      	b.n	db068 <_strtod_l+0x700>
   db1e4:	2300      	movs	r3, #0
   db1e6:	930c      	str	r3, [sp, #48]	; 0x30
   db1e8:	2301      	movs	r3, #1
   db1ea:	9311      	str	r3, [sp, #68]	; 0x44
   db1ec:	e73c      	b.n	db068 <_strtod_l+0x700>
   db1ee:	991e      	ldr	r1, [sp, #120]	; 0x78
   db1f0:	4642      	mov	r2, r8
   db1f2:	4620      	mov	r0, r4
   db1f4:	f000 ff9a 	bl	dc12c <__lshift>
   db1f8:	901e      	str	r0, [sp, #120]	; 0x78
   db1fa:	2800      	cmp	r0, #0
   db1fc:	f47f af66 	bne.w	db0cc <_strtod_l+0x764>
   db200:	e5fe      	b.n	dae00 <_strtod_l+0x498>
   db202:	465f      	mov	r7, fp
   db204:	d16e      	bne.n	db2e4 <_strtod_l+0x97c>
   db206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db208:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db20c:	b342      	cbz	r2, db260 <_strtod_l+0x8f8>
   db20e:	4a32      	ldr	r2, [pc, #200]	; (db2d8 <_strtod_l+0x970>)
   db210:	4293      	cmp	r3, r2
   db212:	d128      	bne.n	db266 <_strtod_l+0x8fe>
   db214:	9b04      	ldr	r3, [sp, #16]
   db216:	4650      	mov	r0, sl
   db218:	b1eb      	cbz	r3, db256 <_strtod_l+0x8ee>
   db21a:	4a2d      	ldr	r2, [pc, #180]	; (db2d0 <_strtod_l+0x968>)
   db21c:	403a      	ands	r2, r7
   db21e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   db222:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   db226:	d819      	bhi.n	db25c <_strtod_l+0x8f4>
   db228:	0d12      	lsrs	r2, r2, #20
   db22a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   db22e:	fa01 f303 	lsl.w	r3, r1, r3
   db232:	4298      	cmp	r0, r3
   db234:	d117      	bne.n	db266 <_strtod_l+0x8fe>
   db236:	4b29      	ldr	r3, [pc, #164]	; (db2dc <_strtod_l+0x974>)
   db238:	429f      	cmp	r7, r3
   db23a:	d102      	bne.n	db242 <_strtod_l+0x8da>
   db23c:	3001      	adds	r0, #1
   db23e:	f43f addf 	beq.w	dae00 <_strtod_l+0x498>
   db242:	4b23      	ldr	r3, [pc, #140]	; (db2d0 <_strtod_l+0x968>)
   db244:	403b      	ands	r3, r7
   db246:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db24a:	f04f 0a00 	mov.w	sl, #0
   db24e:	9b04      	ldr	r3, [sp, #16]
   db250:	2b00      	cmp	r3, #0
   db252:	d1a0      	bne.n	db196 <_strtod_l+0x82e>
   db254:	e5de      	b.n	dae14 <_strtod_l+0x4ac>
   db256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db25a:	e7ea      	b.n	db232 <_strtod_l+0x8ca>
   db25c:	460b      	mov	r3, r1
   db25e:	e7e8      	b.n	db232 <_strtod_l+0x8ca>
   db260:	ea53 030a 	orrs.w	r3, r3, sl
   db264:	d088      	beq.n	db178 <_strtod_l+0x810>
   db266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db268:	b1db      	cbz	r3, db2a2 <_strtod_l+0x93a>
   db26a:	423b      	tst	r3, r7
   db26c:	d0ef      	beq.n	db24e <_strtod_l+0x8e6>
   db26e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db270:	9a04      	ldr	r2, [sp, #16]
   db272:	4650      	mov	r0, sl
   db274:	4659      	mov	r1, fp
   db276:	b1c3      	cbz	r3, db2aa <_strtod_l+0x942>
   db278:	f7ff fb57 	bl	da92a <sulp>
   db27c:	4602      	mov	r2, r0
   db27e:	460b      	mov	r3, r1
   db280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db284:	f7fe fbba 	bl	d99fc <__adddf3>
   db288:	4682      	mov	sl, r0
   db28a:	468b      	mov	fp, r1
   db28c:	e7df      	b.n	db24e <_strtod_l+0x8e6>
   db28e:	4013      	ands	r3, r2
   db290:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db294:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db298:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db29c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db2a0:	e7d5      	b.n	db24e <_strtod_l+0x8e6>
   db2a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db2a4:	ea13 0f0a 	tst.w	r3, sl
   db2a8:	e7e0      	b.n	db26c <_strtod_l+0x904>
   db2aa:	f7ff fb3e 	bl	da92a <sulp>
   db2ae:	4602      	mov	r2, r0
   db2b0:	460b      	mov	r3, r1
   db2b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db2b6:	f7fe fb9f 	bl	d99f8 <__aeabi_dsub>
   db2ba:	2200      	movs	r2, #0
   db2bc:	2300      	movs	r3, #0
   db2be:	4682      	mov	sl, r0
   db2c0:	468b      	mov	fp, r1
   db2c2:	f7fe ffb9 	bl	da238 <__aeabi_dcmpeq>
   db2c6:	2800      	cmp	r0, #0
   db2c8:	d0c1      	beq.n	db24e <_strtod_l+0x8e6>
   db2ca:	e60e      	b.n	daeea <_strtod_l+0x582>
   db2cc:	fffffc02 	.word	0xfffffc02
   db2d0:	7ff00000 	.word	0x7ff00000
   db2d4:	39500000 	.word	0x39500000
   db2d8:	000fffff 	.word	0x000fffff
   db2dc:	7fefffff 	.word	0x7fefffff
   db2e0:	000dd298 	.word	0x000dd298
   db2e4:	4631      	mov	r1, r6
   db2e6:	4628      	mov	r0, r5
   db2e8:	f001 f8de 	bl	dc4a8 <__ratio>
   db2ec:	ec59 8b10 	vmov	r8, r9, d0
   db2f0:	ee10 0a10 	vmov	r0, s0
   db2f4:	2200      	movs	r2, #0
   db2f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db2fa:	4649      	mov	r1, r9
   db2fc:	f7fe ffb0 	bl	da260 <__aeabi_dcmple>
   db300:	2800      	cmp	r0, #0
   db302:	d07c      	beq.n	db3fe <_strtod_l+0xa96>
   db304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db306:	2b00      	cmp	r3, #0
   db308:	d04c      	beq.n	db3a4 <_strtod_l+0xa3c>
   db30a:	4b95      	ldr	r3, [pc, #596]	; (db560 <_strtod_l+0xbf8>)
   db30c:	2200      	movs	r2, #0
   db30e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db312:	f8df 924c 	ldr.w	r9, [pc, #588]	; db560 <_strtod_l+0xbf8>
   db316:	f04f 0800 	mov.w	r8, #0
   db31a:	4b92      	ldr	r3, [pc, #584]	; (db564 <_strtod_l+0xbfc>)
   db31c:	403b      	ands	r3, r7
   db31e:	9311      	str	r3, [sp, #68]	; 0x44
   db320:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db322:	4b91      	ldr	r3, [pc, #580]	; (db568 <_strtod_l+0xc00>)
   db324:	429a      	cmp	r2, r3
   db326:	f040 80b2 	bne.w	db48e <_strtod_l+0xb26>
   db32a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db32e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db332:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   db336:	ec4b ab10 	vmov	d0, sl, fp
   db33a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   db33e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db342:	f000 ffe5 	bl	dc310 <__ulp>
   db346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db34a:	ec53 2b10 	vmov	r2, r3, d0
   db34e:	f7fe fd0b 	bl	d9d68 <__aeabi_dmul>
   db352:	4652      	mov	r2, sl
   db354:	465b      	mov	r3, fp
   db356:	f7fe fb51 	bl	d99fc <__adddf3>
   db35a:	460b      	mov	r3, r1
   db35c:	4981      	ldr	r1, [pc, #516]	; (db564 <_strtod_l+0xbfc>)
   db35e:	4a83      	ldr	r2, [pc, #524]	; (db56c <_strtod_l+0xc04>)
   db360:	4019      	ands	r1, r3
   db362:	4291      	cmp	r1, r2
   db364:	4682      	mov	sl, r0
   db366:	d95e      	bls.n	db426 <_strtod_l+0xabe>
   db368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   db36a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   db36e:	4293      	cmp	r3, r2
   db370:	d103      	bne.n	db37a <_strtod_l+0xa12>
   db372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db374:	3301      	adds	r3, #1
   db376:	f43f ad43 	beq.w	dae00 <_strtod_l+0x498>
   db37a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; db578 <_strtod_l+0xc10>
   db37e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db382:	991e      	ldr	r1, [sp, #120]	; 0x78
   db384:	4620      	mov	r0, r4
   db386:	f000 fcfb 	bl	dbd80 <_Bfree>
   db38a:	9907      	ldr	r1, [sp, #28]
   db38c:	4620      	mov	r0, r4
   db38e:	f000 fcf7 	bl	dbd80 <_Bfree>
   db392:	4631      	mov	r1, r6
   db394:	4620      	mov	r0, r4
   db396:	f000 fcf3 	bl	dbd80 <_Bfree>
   db39a:	4629      	mov	r1, r5
   db39c:	4620      	mov	r0, r4
   db39e:	f000 fcef 	bl	dbd80 <_Bfree>
   db3a2:	e613      	b.n	dafcc <_strtod_l+0x664>
   db3a4:	f1ba 0f00 	cmp.w	sl, #0
   db3a8:	d11b      	bne.n	db3e2 <_strtod_l+0xa7a>
   db3aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db3ae:	b9f3      	cbnz	r3, db3ee <_strtod_l+0xa86>
   db3b0:	4b6b      	ldr	r3, [pc, #428]	; (db560 <_strtod_l+0xbf8>)
   db3b2:	2200      	movs	r2, #0
   db3b4:	4640      	mov	r0, r8
   db3b6:	4649      	mov	r1, r9
   db3b8:	f7fe ff48 	bl	da24c <__aeabi_dcmplt>
   db3bc:	b9d0      	cbnz	r0, db3f4 <_strtod_l+0xa8c>
   db3be:	4640      	mov	r0, r8
   db3c0:	4649      	mov	r1, r9
   db3c2:	4b6b      	ldr	r3, [pc, #428]	; (db570 <_strtod_l+0xc08>)
   db3c4:	2200      	movs	r2, #0
   db3c6:	f7fe fccf 	bl	d9d68 <__aeabi_dmul>
   db3ca:	4680      	mov	r8, r0
   db3cc:	4689      	mov	r9, r1
   db3ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   db3d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   db3d6:	931b      	str	r3, [sp, #108]	; 0x6c
   db3d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   db3dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db3e0:	e79b      	b.n	db31a <_strtod_l+0x9b2>
   db3e2:	f1ba 0f01 	cmp.w	sl, #1
   db3e6:	d102      	bne.n	db3ee <_strtod_l+0xa86>
   db3e8:	2f00      	cmp	r7, #0
   db3ea:	f43f ad7e 	beq.w	daeea <_strtod_l+0x582>
   db3ee:	4b61      	ldr	r3, [pc, #388]	; (db574 <_strtod_l+0xc0c>)
   db3f0:	2200      	movs	r2, #0
   db3f2:	e78c      	b.n	db30e <_strtod_l+0x9a6>
   db3f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; db570 <_strtod_l+0xc08>
   db3f8:	f04f 0800 	mov.w	r8, #0
   db3fc:	e7e7      	b.n	db3ce <_strtod_l+0xa66>
   db3fe:	4b5c      	ldr	r3, [pc, #368]	; (db570 <_strtod_l+0xc08>)
   db400:	4640      	mov	r0, r8
   db402:	4649      	mov	r1, r9
   db404:	2200      	movs	r2, #0
   db406:	f7fe fcaf 	bl	d9d68 <__aeabi_dmul>
   db40a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db40c:	4680      	mov	r8, r0
   db40e:	4689      	mov	r9, r1
   db410:	b933      	cbnz	r3, db420 <_strtod_l+0xab8>
   db412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db416:	9012      	str	r0, [sp, #72]	; 0x48
   db418:	9313      	str	r3, [sp, #76]	; 0x4c
   db41a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   db41e:	e7dd      	b.n	db3dc <_strtod_l+0xa74>
   db420:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   db424:	e7f9      	b.n	db41a <_strtod_l+0xab2>
   db426:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   db42a:	9b04      	ldr	r3, [sp, #16]
   db42c:	2b00      	cmp	r3, #0
   db42e:	d1a8      	bne.n	db382 <_strtod_l+0xa1a>
   db430:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db434:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db436:	0d1b      	lsrs	r3, r3, #20
   db438:	051b      	lsls	r3, r3, #20
   db43a:	429a      	cmp	r2, r3
   db43c:	d1a1      	bne.n	db382 <_strtod_l+0xa1a>
   db43e:	4640      	mov	r0, r8
   db440:	4649      	mov	r1, r9
   db442:	f001 f8b5 	bl	dc5b0 <__aeabi_d2lz>
   db446:	f7fe fc61 	bl	d9d0c <__aeabi_l2d>
   db44a:	4602      	mov	r2, r0
   db44c:	460b      	mov	r3, r1
   db44e:	4640      	mov	r0, r8
   db450:	4649      	mov	r1, r9
   db452:	f7fe fad1 	bl	d99f8 <__aeabi_dsub>
   db456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db458:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db45c:	ea43 030a 	orr.w	r3, r3, sl
   db460:	4313      	orrs	r3, r2
   db462:	4680      	mov	r8, r0
   db464:	4689      	mov	r9, r1
   db466:	d053      	beq.n	db510 <_strtod_l+0xba8>
   db468:	a335      	add	r3, pc, #212	; (adr r3, db540 <_strtod_l+0xbd8>)
   db46a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db46e:	f7fe feed 	bl	da24c <__aeabi_dcmplt>
   db472:	2800      	cmp	r0, #0
   db474:	f47f acce 	bne.w	dae14 <_strtod_l+0x4ac>
   db478:	a333      	add	r3, pc, #204	; (adr r3, db548 <_strtod_l+0xbe0>)
   db47a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db47e:	4640      	mov	r0, r8
   db480:	4649      	mov	r1, r9
   db482:	f7fe ff01 	bl	da288 <__aeabi_dcmpgt>
   db486:	2800      	cmp	r0, #0
   db488:	f43f af7b 	beq.w	db382 <_strtod_l+0xa1a>
   db48c:	e4c2      	b.n	dae14 <_strtod_l+0x4ac>
   db48e:	9b04      	ldr	r3, [sp, #16]
   db490:	b333      	cbz	r3, db4e0 <_strtod_l+0xb78>
   db492:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db494:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db498:	d822      	bhi.n	db4e0 <_strtod_l+0xb78>
   db49a:	a32d      	add	r3, pc, #180	; (adr r3, db550 <_strtod_l+0xbe8>)
   db49c:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4a0:	4640      	mov	r0, r8
   db4a2:	4649      	mov	r1, r9
   db4a4:	f7fe fedc 	bl	da260 <__aeabi_dcmple>
   db4a8:	b1a0      	cbz	r0, db4d4 <_strtod_l+0xb6c>
   db4aa:	4649      	mov	r1, r9
   db4ac:	4640      	mov	r0, r8
   db4ae:	f7fe ff33 	bl	da318 <__aeabi_d2uiz>
   db4b2:	2801      	cmp	r0, #1
   db4b4:	bf38      	it	cc
   db4b6:	2001      	movcc	r0, #1
   db4b8:	f7fe fbdc 	bl	d9c74 <__aeabi_ui2d>
   db4bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db4be:	4680      	mov	r8, r0
   db4c0:	4689      	mov	r9, r1
   db4c2:	bb13      	cbnz	r3, db50a <_strtod_l+0xba2>
   db4c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db4c8:	9014      	str	r0, [sp, #80]	; 0x50
   db4ca:	9315      	str	r3, [sp, #84]	; 0x54
   db4cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   db4d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db4d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db4d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db4d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   db4dc:	1a9b      	subs	r3, r3, r2
   db4de:	930d      	str	r3, [sp, #52]	; 0x34
   db4e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db4e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   db4e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db4ec:	f000 ff10 	bl	dc310 <__ulp>
   db4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db4f4:	ec53 2b10 	vmov	r2, r3, d0
   db4f8:	f7fe fc36 	bl	d9d68 <__aeabi_dmul>
   db4fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db500:	f7fe fa7c 	bl	d99fc <__adddf3>
   db504:	4682      	mov	sl, r0
   db506:	468b      	mov	fp, r1
   db508:	e78f      	b.n	db42a <_strtod_l+0xac2>
   db50a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   db50e:	e7dd      	b.n	db4cc <_strtod_l+0xb64>
   db510:	a311      	add	r3, pc, #68	; (adr r3, db558 <_strtod_l+0xbf0>)
   db512:	e9d3 2300 	ldrd	r2, r3, [r3]
   db516:	f7fe fe99 	bl	da24c <__aeabi_dcmplt>
   db51a:	e7b4      	b.n	db486 <_strtod_l+0xb1e>
   db51c:	2300      	movs	r3, #0
   db51e:	930e      	str	r3, [sp, #56]	; 0x38
   db520:	9a19      	ldr	r2, [sp, #100]	; 0x64
   db522:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db524:	6013      	str	r3, [r2, #0]
   db526:	f7ff ba65 	b.w	da9f4 <_strtod_l+0x8c>
   db52a:	2b65      	cmp	r3, #101	; 0x65
   db52c:	f43f ab5d 	beq.w	dabea <_strtod_l+0x282>
   db530:	2b45      	cmp	r3, #69	; 0x45
   db532:	f43f ab5a 	beq.w	dabea <_strtod_l+0x282>
   db536:	2201      	movs	r2, #1
   db538:	f7ff bb92 	b.w	dac60 <_strtod_l+0x2f8>
   db53c:	f3af 8000 	nop.w
   db540:	94a03595 	.word	0x94a03595
   db544:	3fdfffff 	.word	0x3fdfffff
   db548:	35afe535 	.word	0x35afe535
   db54c:	3fe00000 	.word	0x3fe00000
   db550:	ffc00000 	.word	0xffc00000
   db554:	41dfffff 	.word	0x41dfffff
   db558:	94a03595 	.word	0x94a03595
   db55c:	3fcfffff 	.word	0x3fcfffff
   db560:	3ff00000 	.word	0x3ff00000
   db564:	7ff00000 	.word	0x7ff00000
   db568:	7fe00000 	.word	0x7fe00000
   db56c:	7c9fffff 	.word	0x7c9fffff
   db570:	3fe00000 	.word	0x3fe00000
   db574:	bff00000 	.word	0xbff00000
   db578:	7fefffff 	.word	0x7fefffff

000db57c <strtod>:
   db57c:	460a      	mov	r2, r1
   db57e:	4601      	mov	r1, r0
   db580:	4802      	ldr	r0, [pc, #8]	; (db58c <strtod+0x10>)
   db582:	4b03      	ldr	r3, [pc, #12]	; (db590 <strtod+0x14>)
   db584:	6800      	ldr	r0, [r0, #0]
   db586:	f7ff b9ef 	b.w	da968 <_strtod_l>
   db58a:	bf00      	nop
   db58c:	2003e26c 	.word	0x2003e26c
   db590:	2003e2d4 	.word	0x2003e2d4

000db594 <strtok>:
   db594:	4b13      	ldr	r3, [pc, #76]	; (db5e4 <strtok+0x50>)
   db596:	b573      	push	{r0, r1, r4, r5, r6, lr}
   db598:	681e      	ldr	r6, [r3, #0]
   db59a:	6db4      	ldr	r4, [r6, #88]	; 0x58
   db59c:	4605      	mov	r5, r0
   db59e:	b9c4      	cbnz	r4, db5d2 <strtok+0x3e>
   db5a0:	2050      	movs	r0, #80	; 0x50
   db5a2:	9101      	str	r1, [sp, #4]
   db5a4:	f7fb fdc6 	bl	d7134 <malloc>
   db5a8:	65b0      	str	r0, [r6, #88]	; 0x58
   db5aa:	e9c0 4400 	strd	r4, r4, [r0]
   db5ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
   db5b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
   db5b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   db5ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   db5be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   db5c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   db5c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   db5ca:	9901      	ldr	r1, [sp, #4]
   db5cc:	6184      	str	r4, [r0, #24]
   db5ce:	7704      	strb	r4, [r0, #28]
   db5d0:	6244      	str	r4, [r0, #36]	; 0x24
   db5d2:	6db2      	ldr	r2, [r6, #88]	; 0x58
   db5d4:	2301      	movs	r3, #1
   db5d6:	4628      	mov	r0, r5
   db5d8:	b002      	add	sp, #8
   db5da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db5de:	f000 b803 	b.w	db5e8 <__strtok_r>
   db5e2:	bf00      	nop
   db5e4:	2003e26c 	.word	0x2003e26c

000db5e8 <__strtok_r>:
   db5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   db5ea:	b908      	cbnz	r0, db5f0 <__strtok_r+0x8>
   db5ec:	6810      	ldr	r0, [r2, #0]
   db5ee:	b188      	cbz	r0, db614 <__strtok_r+0x2c>
   db5f0:	4604      	mov	r4, r0
   db5f2:	4620      	mov	r0, r4
   db5f4:	f814 5b01 	ldrb.w	r5, [r4], #1
   db5f8:	460f      	mov	r7, r1
   db5fa:	f817 6b01 	ldrb.w	r6, [r7], #1
   db5fe:	b91e      	cbnz	r6, db608 <__strtok_r+0x20>
   db600:	b965      	cbnz	r5, db61c <__strtok_r+0x34>
   db602:	6015      	str	r5, [r2, #0]
   db604:	4628      	mov	r0, r5
   db606:	e005      	b.n	db614 <__strtok_r+0x2c>
   db608:	42b5      	cmp	r5, r6
   db60a:	d1f6      	bne.n	db5fa <__strtok_r+0x12>
   db60c:	2b00      	cmp	r3, #0
   db60e:	d1f0      	bne.n	db5f2 <__strtok_r+0xa>
   db610:	6014      	str	r4, [r2, #0]
   db612:	7003      	strb	r3, [r0, #0]
   db614:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db616:	461c      	mov	r4, r3
   db618:	e00c      	b.n	db634 <__strtok_r+0x4c>
   db61a:	b915      	cbnz	r5, db622 <__strtok_r+0x3a>
   db61c:	f814 3b01 	ldrb.w	r3, [r4], #1
   db620:	460e      	mov	r6, r1
   db622:	f816 5b01 	ldrb.w	r5, [r6], #1
   db626:	42ab      	cmp	r3, r5
   db628:	d1f7      	bne.n	db61a <__strtok_r+0x32>
   db62a:	2b00      	cmp	r3, #0
   db62c:	d0f3      	beq.n	db616 <__strtok_r+0x2e>
   db62e:	2300      	movs	r3, #0
   db630:	f804 3c01 	strb.w	r3, [r4, #-1]
   db634:	6014      	str	r4, [r2, #0]
   db636:	e7ed      	b.n	db614 <__strtok_r+0x2c>

000db638 <rshift>:
   db638:	6903      	ldr	r3, [r0, #16]
   db63a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   db63e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db642:	ea4f 1261 	mov.w	r2, r1, asr #5
   db646:	f100 0414 	add.w	r4, r0, #20
   db64a:	dd45      	ble.n	db6d8 <rshift+0xa0>
   db64c:	f011 011f 	ands.w	r1, r1, #31
   db650:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   db654:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   db658:	d10c      	bne.n	db674 <rshift+0x3c>
   db65a:	f100 0710 	add.w	r7, r0, #16
   db65e:	4629      	mov	r1, r5
   db660:	42b1      	cmp	r1, r6
   db662:	d334      	bcc.n	db6ce <rshift+0x96>
   db664:	1a9b      	subs	r3, r3, r2
   db666:	009b      	lsls	r3, r3, #2
   db668:	1eea      	subs	r2, r5, #3
   db66a:	4296      	cmp	r6, r2
   db66c:	bf38      	it	cc
   db66e:	2300      	movcc	r3, #0
   db670:	4423      	add	r3, r4
   db672:	e015      	b.n	db6a0 <rshift+0x68>
   db674:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   db678:	f1c1 0820 	rsb	r8, r1, #32
   db67c:	40cf      	lsrs	r7, r1
   db67e:	f105 0e04 	add.w	lr, r5, #4
   db682:	46a1      	mov	r9, r4
   db684:	4576      	cmp	r6, lr
   db686:	46f4      	mov	ip, lr
   db688:	d815      	bhi.n	db6b6 <rshift+0x7e>
   db68a:	1a9b      	subs	r3, r3, r2
   db68c:	009a      	lsls	r2, r3, #2
   db68e:	3a04      	subs	r2, #4
   db690:	3501      	adds	r5, #1
   db692:	42ae      	cmp	r6, r5
   db694:	bf38      	it	cc
   db696:	2200      	movcc	r2, #0
   db698:	18a3      	adds	r3, r4, r2
   db69a:	50a7      	str	r7, [r4, r2]
   db69c:	b107      	cbz	r7, db6a0 <rshift+0x68>
   db69e:	3304      	adds	r3, #4
   db6a0:	1b1a      	subs	r2, r3, r4
   db6a2:	42a3      	cmp	r3, r4
   db6a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   db6a8:	bf08      	it	eq
   db6aa:	2300      	moveq	r3, #0
   db6ac:	6102      	str	r2, [r0, #16]
   db6ae:	bf08      	it	eq
   db6b0:	6143      	streq	r3, [r0, #20]
   db6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db6b6:	f8dc c000 	ldr.w	ip, [ip]
   db6ba:	fa0c fc08 	lsl.w	ip, ip, r8
   db6be:	ea4c 0707 	orr.w	r7, ip, r7
   db6c2:	f849 7b04 	str.w	r7, [r9], #4
   db6c6:	f85e 7b04 	ldr.w	r7, [lr], #4
   db6ca:	40cf      	lsrs	r7, r1
   db6cc:	e7da      	b.n	db684 <rshift+0x4c>
   db6ce:	f851 cb04 	ldr.w	ip, [r1], #4
   db6d2:	f847 cf04 	str.w	ip, [r7, #4]!
   db6d6:	e7c3      	b.n	db660 <rshift+0x28>
   db6d8:	4623      	mov	r3, r4
   db6da:	e7e1      	b.n	db6a0 <rshift+0x68>

000db6dc <__hexdig_fun>:
   db6dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   db6e0:	2b09      	cmp	r3, #9
   db6e2:	d802      	bhi.n	db6ea <__hexdig_fun+0xe>
   db6e4:	3820      	subs	r0, #32
   db6e6:	b2c0      	uxtb	r0, r0
   db6e8:	4770      	bx	lr
   db6ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   db6ee:	2b05      	cmp	r3, #5
   db6f0:	d801      	bhi.n	db6f6 <__hexdig_fun+0x1a>
   db6f2:	3847      	subs	r0, #71	; 0x47
   db6f4:	e7f7      	b.n	db6e6 <__hexdig_fun+0xa>
   db6f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   db6fa:	2b05      	cmp	r3, #5
   db6fc:	d801      	bhi.n	db702 <__hexdig_fun+0x26>
   db6fe:	3827      	subs	r0, #39	; 0x27
   db700:	e7f1      	b.n	db6e6 <__hexdig_fun+0xa>
   db702:	2000      	movs	r0, #0
   db704:	4770      	bx	lr
	...

000db708 <__gethex>:
   db708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db70c:	ed2d 8b02 	vpush	{d8}
   db710:	b089      	sub	sp, #36	; 0x24
   db712:	ee08 0a10 	vmov	s16, r0
   db716:	9304      	str	r3, [sp, #16]
   db718:	4bbc      	ldr	r3, [pc, #752]	; (dba0c <__gethex+0x304>)
   db71a:	681b      	ldr	r3, [r3, #0]
   db71c:	9301      	str	r3, [sp, #4]
   db71e:	4618      	mov	r0, r3
   db720:	468b      	mov	fp, r1
   db722:	4690      	mov	r8, r2
   db724:	f7ff f8bd 	bl	da8a2 <strlen>
   db728:	9b01      	ldr	r3, [sp, #4]
   db72a:	f8db 2000 	ldr.w	r2, [fp]
   db72e:	4403      	add	r3, r0
   db730:	4682      	mov	sl, r0
   db732:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   db736:	9305      	str	r3, [sp, #20]
   db738:	1c93      	adds	r3, r2, #2
   db73a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   db73e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   db742:	32fe      	adds	r2, #254	; 0xfe
   db744:	18d1      	adds	r1, r2, r3
   db746:	461f      	mov	r7, r3
   db748:	f813 0b01 	ldrb.w	r0, [r3], #1
   db74c:	9100      	str	r1, [sp, #0]
   db74e:	2830      	cmp	r0, #48	; 0x30
   db750:	d0f8      	beq.n	db744 <__gethex+0x3c>
   db752:	f7ff ffc3 	bl	db6dc <__hexdig_fun>
   db756:	4604      	mov	r4, r0
   db758:	2800      	cmp	r0, #0
   db75a:	d13a      	bne.n	db7d2 <__gethex+0xca>
   db75c:	9901      	ldr	r1, [sp, #4]
   db75e:	4652      	mov	r2, sl
   db760:	4638      	mov	r0, r7
   db762:	f7ff f8a6 	bl	da8b2 <strncmp>
   db766:	4605      	mov	r5, r0
   db768:	2800      	cmp	r0, #0
   db76a:	d168      	bne.n	db83e <__gethex+0x136>
   db76c:	f817 000a 	ldrb.w	r0, [r7, sl]
   db770:	eb07 060a 	add.w	r6, r7, sl
   db774:	f7ff ffb2 	bl	db6dc <__hexdig_fun>
   db778:	2800      	cmp	r0, #0
   db77a:	d062      	beq.n	db842 <__gethex+0x13a>
   db77c:	4633      	mov	r3, r6
   db77e:	7818      	ldrb	r0, [r3, #0]
   db780:	2830      	cmp	r0, #48	; 0x30
   db782:	461f      	mov	r7, r3
   db784:	f103 0301 	add.w	r3, r3, #1
   db788:	d0f9      	beq.n	db77e <__gethex+0x76>
   db78a:	f7ff ffa7 	bl	db6dc <__hexdig_fun>
   db78e:	2301      	movs	r3, #1
   db790:	fab0 f480 	clz	r4, r0
   db794:	0964      	lsrs	r4, r4, #5
   db796:	4635      	mov	r5, r6
   db798:	9300      	str	r3, [sp, #0]
   db79a:	463a      	mov	r2, r7
   db79c:	4616      	mov	r6, r2
   db79e:	3201      	adds	r2, #1
   db7a0:	7830      	ldrb	r0, [r6, #0]
   db7a2:	f7ff ff9b 	bl	db6dc <__hexdig_fun>
   db7a6:	2800      	cmp	r0, #0
   db7a8:	d1f8      	bne.n	db79c <__gethex+0x94>
   db7aa:	9901      	ldr	r1, [sp, #4]
   db7ac:	4652      	mov	r2, sl
   db7ae:	4630      	mov	r0, r6
   db7b0:	f7ff f87f 	bl	da8b2 <strncmp>
   db7b4:	b980      	cbnz	r0, db7d8 <__gethex+0xd0>
   db7b6:	b94d      	cbnz	r5, db7cc <__gethex+0xc4>
   db7b8:	eb06 050a 	add.w	r5, r6, sl
   db7bc:	462a      	mov	r2, r5
   db7be:	4616      	mov	r6, r2
   db7c0:	3201      	adds	r2, #1
   db7c2:	7830      	ldrb	r0, [r6, #0]
   db7c4:	f7ff ff8a 	bl	db6dc <__hexdig_fun>
   db7c8:	2800      	cmp	r0, #0
   db7ca:	d1f8      	bne.n	db7be <__gethex+0xb6>
   db7cc:	1bad      	subs	r5, r5, r6
   db7ce:	00ad      	lsls	r5, r5, #2
   db7d0:	e004      	b.n	db7dc <__gethex+0xd4>
   db7d2:	2400      	movs	r4, #0
   db7d4:	4625      	mov	r5, r4
   db7d6:	e7e0      	b.n	db79a <__gethex+0x92>
   db7d8:	2d00      	cmp	r5, #0
   db7da:	d1f7      	bne.n	db7cc <__gethex+0xc4>
   db7dc:	7833      	ldrb	r3, [r6, #0]
   db7de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db7e2:	2b50      	cmp	r3, #80	; 0x50
   db7e4:	d13b      	bne.n	db85e <__gethex+0x156>
   db7e6:	7873      	ldrb	r3, [r6, #1]
   db7e8:	2b2b      	cmp	r3, #43	; 0x2b
   db7ea:	d02c      	beq.n	db846 <__gethex+0x13e>
   db7ec:	2b2d      	cmp	r3, #45	; 0x2d
   db7ee:	d02e      	beq.n	db84e <__gethex+0x146>
   db7f0:	1c71      	adds	r1, r6, #1
   db7f2:	f04f 0900 	mov.w	r9, #0
   db7f6:	7808      	ldrb	r0, [r1, #0]
   db7f8:	f7ff ff70 	bl	db6dc <__hexdig_fun>
   db7fc:	1e43      	subs	r3, r0, #1
   db7fe:	b2db      	uxtb	r3, r3
   db800:	2b18      	cmp	r3, #24
   db802:	d82c      	bhi.n	db85e <__gethex+0x156>
   db804:	f1a0 0210 	sub.w	r2, r0, #16
   db808:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   db80c:	f7ff ff66 	bl	db6dc <__hexdig_fun>
   db810:	1e43      	subs	r3, r0, #1
   db812:	b2db      	uxtb	r3, r3
   db814:	2b18      	cmp	r3, #24
   db816:	d91d      	bls.n	db854 <__gethex+0x14c>
   db818:	f1b9 0f00 	cmp.w	r9, #0
   db81c:	d000      	beq.n	db820 <__gethex+0x118>
   db81e:	4252      	negs	r2, r2
   db820:	4415      	add	r5, r2
   db822:	f8cb 1000 	str.w	r1, [fp]
   db826:	b1e4      	cbz	r4, db862 <__gethex+0x15a>
   db828:	9b00      	ldr	r3, [sp, #0]
   db82a:	2b00      	cmp	r3, #0
   db82c:	bf14      	ite	ne
   db82e:	2700      	movne	r7, #0
   db830:	2706      	moveq	r7, #6
   db832:	4638      	mov	r0, r7
   db834:	b009      	add	sp, #36	; 0x24
   db836:	ecbd 8b02 	vpop	{d8}
   db83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db83e:	463e      	mov	r6, r7
   db840:	4625      	mov	r5, r4
   db842:	2401      	movs	r4, #1
   db844:	e7ca      	b.n	db7dc <__gethex+0xd4>
   db846:	f04f 0900 	mov.w	r9, #0
   db84a:	1cb1      	adds	r1, r6, #2
   db84c:	e7d3      	b.n	db7f6 <__gethex+0xee>
   db84e:	f04f 0901 	mov.w	r9, #1
   db852:	e7fa      	b.n	db84a <__gethex+0x142>
   db854:	230a      	movs	r3, #10
   db856:	fb03 0202 	mla	r2, r3, r2, r0
   db85a:	3a10      	subs	r2, #16
   db85c:	e7d4      	b.n	db808 <__gethex+0x100>
   db85e:	4631      	mov	r1, r6
   db860:	e7df      	b.n	db822 <__gethex+0x11a>
   db862:	1bf3      	subs	r3, r6, r7
   db864:	3b01      	subs	r3, #1
   db866:	4621      	mov	r1, r4
   db868:	2b07      	cmp	r3, #7
   db86a:	dc52      	bgt.n	db912 <__gethex+0x20a>
   db86c:	ee18 0a10 	vmov	r0, s16
   db870:	f000 fa52 	bl	dbd18 <_Balloc>
   db874:	f04f 0b00 	mov.w	fp, #0
   db878:	f100 0914 	add.w	r9, r0, #20
   db87c:	f1ca 0301 	rsb	r3, sl, #1
   db880:	4604      	mov	r4, r0
   db882:	f8cd 9008 	str.w	r9, [sp, #8]
   db886:	f8cd b000 	str.w	fp, [sp]
   db88a:	9306      	str	r3, [sp, #24]
   db88c:	42b7      	cmp	r7, r6
   db88e:	d343      	bcc.n	db918 <__gethex+0x210>
   db890:	9802      	ldr	r0, [sp, #8]
   db892:	9b00      	ldr	r3, [sp, #0]
   db894:	f840 3b04 	str.w	r3, [r0], #4
   db898:	eba0 0009 	sub.w	r0, r0, r9
   db89c:	1080      	asrs	r0, r0, #2
   db89e:	0146      	lsls	r6, r0, #5
   db8a0:	6120      	str	r0, [r4, #16]
   db8a2:	4618      	mov	r0, r3
   db8a4:	f000 faff 	bl	dbea6 <__hi0bits>
   db8a8:	1a30      	subs	r0, r6, r0
   db8aa:	f8d8 6000 	ldr.w	r6, [r8]
   db8ae:	42b0      	cmp	r0, r6
   db8b0:	dd66      	ble.n	db980 <__gethex+0x278>
   db8b2:	1b87      	subs	r7, r0, r6
   db8b4:	4639      	mov	r1, r7
   db8b6:	4620      	mov	r0, r4
   db8b8:	f000 fe4c 	bl	dc554 <__any_on>
   db8bc:	4682      	mov	sl, r0
   db8be:	b1a8      	cbz	r0, db8ec <__gethex+0x1e4>
   db8c0:	1e7b      	subs	r3, r7, #1
   db8c2:	1159      	asrs	r1, r3, #5
   db8c4:	f003 021f 	and.w	r2, r3, #31
   db8c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   db8cc:	f04f 0a01 	mov.w	sl, #1
   db8d0:	fa0a f202 	lsl.w	r2, sl, r2
   db8d4:	420a      	tst	r2, r1
   db8d6:	d009      	beq.n	db8ec <__gethex+0x1e4>
   db8d8:	4553      	cmp	r3, sl
   db8da:	dd05      	ble.n	db8e8 <__gethex+0x1e0>
   db8dc:	1eb9      	subs	r1, r7, #2
   db8de:	4620      	mov	r0, r4
   db8e0:	f000 fe38 	bl	dc554 <__any_on>
   db8e4:	2800      	cmp	r0, #0
   db8e6:	d148      	bne.n	db97a <__gethex+0x272>
   db8e8:	f04f 0a02 	mov.w	sl, #2
   db8ec:	4639      	mov	r1, r7
   db8ee:	4620      	mov	r0, r4
   db8f0:	f7ff fea2 	bl	db638 <rshift>
   db8f4:	443d      	add	r5, r7
   db8f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db8fa:	42ab      	cmp	r3, r5
   db8fc:	da4f      	bge.n	db99e <__gethex+0x296>
   db8fe:	ee18 0a10 	vmov	r0, s16
   db902:	4621      	mov	r1, r4
   db904:	f000 fa3c 	bl	dbd80 <_Bfree>
   db908:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db90a:	2300      	movs	r3, #0
   db90c:	6013      	str	r3, [r2, #0]
   db90e:	27a3      	movs	r7, #163	; 0xa3
   db910:	e78f      	b.n	db832 <__gethex+0x12a>
   db912:	3101      	adds	r1, #1
   db914:	105b      	asrs	r3, r3, #1
   db916:	e7a7      	b.n	db868 <__gethex+0x160>
   db918:	1e73      	subs	r3, r6, #1
   db91a:	9a05      	ldr	r2, [sp, #20]
   db91c:	9303      	str	r3, [sp, #12]
   db91e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   db922:	4293      	cmp	r3, r2
   db924:	d019      	beq.n	db95a <__gethex+0x252>
   db926:	f1bb 0f20 	cmp.w	fp, #32
   db92a:	d107      	bne.n	db93c <__gethex+0x234>
   db92c:	9b02      	ldr	r3, [sp, #8]
   db92e:	9a00      	ldr	r2, [sp, #0]
   db930:	f843 2b04 	str.w	r2, [r3], #4
   db934:	9302      	str	r3, [sp, #8]
   db936:	2300      	movs	r3, #0
   db938:	9300      	str	r3, [sp, #0]
   db93a:	469b      	mov	fp, r3
   db93c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   db940:	f7ff fecc 	bl	db6dc <__hexdig_fun>
   db944:	9b00      	ldr	r3, [sp, #0]
   db946:	f000 000f 	and.w	r0, r0, #15
   db94a:	fa00 f00b 	lsl.w	r0, r0, fp
   db94e:	4303      	orrs	r3, r0
   db950:	9300      	str	r3, [sp, #0]
   db952:	f10b 0b04 	add.w	fp, fp, #4
   db956:	9b03      	ldr	r3, [sp, #12]
   db958:	e00d      	b.n	db976 <__gethex+0x26e>
   db95a:	9b03      	ldr	r3, [sp, #12]
   db95c:	9a06      	ldr	r2, [sp, #24]
   db95e:	4413      	add	r3, r2
   db960:	42bb      	cmp	r3, r7
   db962:	d3e0      	bcc.n	db926 <__gethex+0x21e>
   db964:	4618      	mov	r0, r3
   db966:	9901      	ldr	r1, [sp, #4]
   db968:	9307      	str	r3, [sp, #28]
   db96a:	4652      	mov	r2, sl
   db96c:	f7fe ffa1 	bl	da8b2 <strncmp>
   db970:	9b07      	ldr	r3, [sp, #28]
   db972:	2800      	cmp	r0, #0
   db974:	d1d7      	bne.n	db926 <__gethex+0x21e>
   db976:	461e      	mov	r6, r3
   db978:	e788      	b.n	db88c <__gethex+0x184>
   db97a:	f04f 0a03 	mov.w	sl, #3
   db97e:	e7b5      	b.n	db8ec <__gethex+0x1e4>
   db980:	da0a      	bge.n	db998 <__gethex+0x290>
   db982:	1a37      	subs	r7, r6, r0
   db984:	4621      	mov	r1, r4
   db986:	ee18 0a10 	vmov	r0, s16
   db98a:	463a      	mov	r2, r7
   db98c:	f000 fbce 	bl	dc12c <__lshift>
   db990:	1bed      	subs	r5, r5, r7
   db992:	4604      	mov	r4, r0
   db994:	f100 0914 	add.w	r9, r0, #20
   db998:	f04f 0a00 	mov.w	sl, #0
   db99c:	e7ab      	b.n	db8f6 <__gethex+0x1ee>
   db99e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   db9a2:	42a8      	cmp	r0, r5
   db9a4:	dd6d      	ble.n	dba82 <__gethex+0x37a>
   db9a6:	1b45      	subs	r5, r0, r5
   db9a8:	42ae      	cmp	r6, r5
   db9aa:	dc31      	bgt.n	dba10 <__gethex+0x308>
   db9ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
   db9b0:	2b02      	cmp	r3, #2
   db9b2:	d023      	beq.n	db9fc <__gethex+0x2f4>
   db9b4:	2b03      	cmp	r3, #3
   db9b6:	d025      	beq.n	dba04 <__gethex+0x2fc>
   db9b8:	2b01      	cmp	r3, #1
   db9ba:	d115      	bne.n	db9e8 <__gethex+0x2e0>
   db9bc:	42ae      	cmp	r6, r5
   db9be:	d113      	bne.n	db9e8 <__gethex+0x2e0>
   db9c0:	2e01      	cmp	r6, #1
   db9c2:	d10b      	bne.n	db9dc <__gethex+0x2d4>
   db9c4:	9a04      	ldr	r2, [sp, #16]
   db9c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   db9ca:	6013      	str	r3, [r2, #0]
   db9cc:	2301      	movs	r3, #1
   db9ce:	6123      	str	r3, [r4, #16]
   db9d0:	f8c9 3000 	str.w	r3, [r9]
   db9d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   db9d6:	2762      	movs	r7, #98	; 0x62
   db9d8:	601c      	str	r4, [r3, #0]
   db9da:	e72a      	b.n	db832 <__gethex+0x12a>
   db9dc:	1e71      	subs	r1, r6, #1
   db9de:	4620      	mov	r0, r4
   db9e0:	f000 fdb8 	bl	dc554 <__any_on>
   db9e4:	2800      	cmp	r0, #0
   db9e6:	d1ed      	bne.n	db9c4 <__gethex+0x2bc>
   db9e8:	ee18 0a10 	vmov	r0, s16
   db9ec:	4621      	mov	r1, r4
   db9ee:	f000 f9c7 	bl	dbd80 <_Bfree>
   db9f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db9f4:	2300      	movs	r3, #0
   db9f6:	6013      	str	r3, [r2, #0]
   db9f8:	2750      	movs	r7, #80	; 0x50
   db9fa:	e71a      	b.n	db832 <__gethex+0x12a>
   db9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   db9fe:	2b00      	cmp	r3, #0
   dba00:	d1f2      	bne.n	db9e8 <__gethex+0x2e0>
   dba02:	e7df      	b.n	db9c4 <__gethex+0x2bc>
   dba04:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dba06:	2b00      	cmp	r3, #0
   dba08:	d1dc      	bne.n	db9c4 <__gethex+0x2bc>
   dba0a:	e7ed      	b.n	db9e8 <__gethex+0x2e0>
   dba0c:	000dd3c4 	.word	0x000dd3c4
   dba10:	1e6f      	subs	r7, r5, #1
   dba12:	f1ba 0f00 	cmp.w	sl, #0
   dba16:	d131      	bne.n	dba7c <__gethex+0x374>
   dba18:	b127      	cbz	r7, dba24 <__gethex+0x31c>
   dba1a:	4639      	mov	r1, r7
   dba1c:	4620      	mov	r0, r4
   dba1e:	f000 fd99 	bl	dc554 <__any_on>
   dba22:	4682      	mov	sl, r0
   dba24:	117b      	asrs	r3, r7, #5
   dba26:	2101      	movs	r1, #1
   dba28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dba2c:	f007 071f 	and.w	r7, r7, #31
   dba30:	fa01 f707 	lsl.w	r7, r1, r7
   dba34:	421f      	tst	r7, r3
   dba36:	4629      	mov	r1, r5
   dba38:	4620      	mov	r0, r4
   dba3a:	bf18      	it	ne
   dba3c:	f04a 0a02 	orrne.w	sl, sl, #2
   dba40:	1b76      	subs	r6, r6, r5
   dba42:	f7ff fdf9 	bl	db638 <rshift>
   dba46:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dba4a:	2702      	movs	r7, #2
   dba4c:	f1ba 0f00 	cmp.w	sl, #0
   dba50:	d048      	beq.n	dbae4 <__gethex+0x3dc>
   dba52:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dba56:	2b02      	cmp	r3, #2
   dba58:	d015      	beq.n	dba86 <__gethex+0x37e>
   dba5a:	2b03      	cmp	r3, #3
   dba5c:	d017      	beq.n	dba8e <__gethex+0x386>
   dba5e:	2b01      	cmp	r3, #1
   dba60:	d109      	bne.n	dba76 <__gethex+0x36e>
   dba62:	f01a 0f02 	tst.w	sl, #2
   dba66:	d006      	beq.n	dba76 <__gethex+0x36e>
   dba68:	f8d9 0000 	ldr.w	r0, [r9]
   dba6c:	ea4a 0a00 	orr.w	sl, sl, r0
   dba70:	f01a 0f01 	tst.w	sl, #1
   dba74:	d10e      	bne.n	dba94 <__gethex+0x38c>
   dba76:	f047 0710 	orr.w	r7, r7, #16
   dba7a:	e033      	b.n	dbae4 <__gethex+0x3dc>
   dba7c:	f04f 0a01 	mov.w	sl, #1
   dba80:	e7d0      	b.n	dba24 <__gethex+0x31c>
   dba82:	2701      	movs	r7, #1
   dba84:	e7e2      	b.n	dba4c <__gethex+0x344>
   dba86:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dba88:	f1c3 0301 	rsb	r3, r3, #1
   dba8c:	9315      	str	r3, [sp, #84]	; 0x54
   dba8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dba90:	2b00      	cmp	r3, #0
   dba92:	d0f0      	beq.n	dba76 <__gethex+0x36e>
   dba94:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dba98:	f104 0314 	add.w	r3, r4, #20
   dba9c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dbaa0:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dbaa4:	f04f 0c00 	mov.w	ip, #0
   dbaa8:	4618      	mov	r0, r3
   dbaaa:	f853 2b04 	ldr.w	r2, [r3], #4
   dbaae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dbab2:	d01c      	beq.n	dbaee <__gethex+0x3e6>
   dbab4:	3201      	adds	r2, #1
   dbab6:	6002      	str	r2, [r0, #0]
   dbab8:	2f02      	cmp	r7, #2
   dbaba:	f104 0314 	add.w	r3, r4, #20
   dbabe:	d13a      	bne.n	dbb36 <__gethex+0x42e>
   dbac0:	f8d8 2000 	ldr.w	r2, [r8]
   dbac4:	3a01      	subs	r2, #1
   dbac6:	42b2      	cmp	r2, r6
   dbac8:	d10a      	bne.n	dbae0 <__gethex+0x3d8>
   dbaca:	1171      	asrs	r1, r6, #5
   dbacc:	2201      	movs	r2, #1
   dbace:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dbad2:	f006 061f 	and.w	r6, r6, #31
   dbad6:	fa02 f606 	lsl.w	r6, r2, r6
   dbada:	421e      	tst	r6, r3
   dbadc:	bf18      	it	ne
   dbade:	4617      	movne	r7, r2
   dbae0:	f047 0720 	orr.w	r7, r7, #32
   dbae4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dbae6:	601c      	str	r4, [r3, #0]
   dbae8:	9b04      	ldr	r3, [sp, #16]
   dbaea:	601d      	str	r5, [r3, #0]
   dbaec:	e6a1      	b.n	db832 <__gethex+0x12a>
   dbaee:	4299      	cmp	r1, r3
   dbaf0:	f843 cc04 	str.w	ip, [r3, #-4]
   dbaf4:	d8d8      	bhi.n	dbaa8 <__gethex+0x3a0>
   dbaf6:	68a3      	ldr	r3, [r4, #8]
   dbaf8:	4599      	cmp	r9, r3
   dbafa:	db14      	blt.n	dbb26 <__gethex+0x41e>
   dbafc:	6861      	ldr	r1, [r4, #4]
   dbafe:	ee18 0a10 	vmov	r0, s16
   dbb02:	3101      	adds	r1, #1
   dbb04:	f000 f908 	bl	dbd18 <_Balloc>
   dbb08:	6922      	ldr	r2, [r4, #16]
   dbb0a:	3202      	adds	r2, #2
   dbb0c:	f104 010c 	add.w	r1, r4, #12
   dbb10:	4682      	mov	sl, r0
   dbb12:	0092      	lsls	r2, r2, #2
   dbb14:	300c      	adds	r0, #12
   dbb16:	f7fe fe23 	bl	da760 <memcpy>
   dbb1a:	4621      	mov	r1, r4
   dbb1c:	ee18 0a10 	vmov	r0, s16
   dbb20:	f000 f92e 	bl	dbd80 <_Bfree>
   dbb24:	4654      	mov	r4, sl
   dbb26:	6923      	ldr	r3, [r4, #16]
   dbb28:	1c5a      	adds	r2, r3, #1
   dbb2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dbb2e:	6122      	str	r2, [r4, #16]
   dbb30:	2201      	movs	r2, #1
   dbb32:	615a      	str	r2, [r3, #20]
   dbb34:	e7c0      	b.n	dbab8 <__gethex+0x3b0>
   dbb36:	6922      	ldr	r2, [r4, #16]
   dbb38:	454a      	cmp	r2, r9
   dbb3a:	dd0b      	ble.n	dbb54 <__gethex+0x44c>
   dbb3c:	2101      	movs	r1, #1
   dbb3e:	4620      	mov	r0, r4
   dbb40:	f7ff fd7a 	bl	db638 <rshift>
   dbb44:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dbb48:	3501      	adds	r5, #1
   dbb4a:	42ab      	cmp	r3, r5
   dbb4c:	f6ff aed7 	blt.w	db8fe <__gethex+0x1f6>
   dbb50:	2701      	movs	r7, #1
   dbb52:	e7c5      	b.n	dbae0 <__gethex+0x3d8>
   dbb54:	f016 061f 	ands.w	r6, r6, #31
   dbb58:	d0fa      	beq.n	dbb50 <__gethex+0x448>
   dbb5a:	449b      	add	fp, r3
   dbb5c:	f1c6 0620 	rsb	r6, r6, #32
   dbb60:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dbb64:	f000 f99f 	bl	dbea6 <__hi0bits>
   dbb68:	42b0      	cmp	r0, r6
   dbb6a:	dbe7      	blt.n	dbb3c <__gethex+0x434>
   dbb6c:	e7f0      	b.n	dbb50 <__gethex+0x448>
   dbb6e:	bf00      	nop

000dbb70 <L_shift>:
   dbb70:	f1c2 0208 	rsb	r2, r2, #8
   dbb74:	0092      	lsls	r2, r2, #2
   dbb76:	b570      	push	{r4, r5, r6, lr}
   dbb78:	f1c2 0620 	rsb	r6, r2, #32
   dbb7c:	6843      	ldr	r3, [r0, #4]
   dbb7e:	6804      	ldr	r4, [r0, #0]
   dbb80:	fa03 f506 	lsl.w	r5, r3, r6
   dbb84:	432c      	orrs	r4, r5
   dbb86:	40d3      	lsrs	r3, r2
   dbb88:	6004      	str	r4, [r0, #0]
   dbb8a:	f840 3f04 	str.w	r3, [r0, #4]!
   dbb8e:	4288      	cmp	r0, r1
   dbb90:	d3f4      	bcc.n	dbb7c <L_shift+0xc>
   dbb92:	bd70      	pop	{r4, r5, r6, pc}

000dbb94 <__match>:
   dbb94:	b530      	push	{r4, r5, lr}
   dbb96:	6803      	ldr	r3, [r0, #0]
   dbb98:	3301      	adds	r3, #1
   dbb9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbb9e:	b914      	cbnz	r4, dbba6 <__match+0x12>
   dbba0:	6003      	str	r3, [r0, #0]
   dbba2:	2001      	movs	r0, #1
   dbba4:	bd30      	pop	{r4, r5, pc}
   dbba6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbbaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dbbae:	2d19      	cmp	r5, #25
   dbbb0:	bf98      	it	ls
   dbbb2:	3220      	addls	r2, #32
   dbbb4:	42a2      	cmp	r2, r4
   dbbb6:	d0f0      	beq.n	dbb9a <__match+0x6>
   dbbb8:	2000      	movs	r0, #0
   dbbba:	e7f3      	b.n	dbba4 <__match+0x10>

000dbbbc <__hexnan>:
   dbbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbbc0:	680b      	ldr	r3, [r1, #0]
   dbbc2:	6801      	ldr	r1, [r0, #0]
   dbbc4:	115e      	asrs	r6, r3, #5
   dbbc6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dbbca:	f013 031f 	ands.w	r3, r3, #31
   dbbce:	b087      	sub	sp, #28
   dbbd0:	bf18      	it	ne
   dbbd2:	3604      	addne	r6, #4
   dbbd4:	2500      	movs	r5, #0
   dbbd6:	1f37      	subs	r7, r6, #4
   dbbd8:	4682      	mov	sl, r0
   dbbda:	4690      	mov	r8, r2
   dbbdc:	9301      	str	r3, [sp, #4]
   dbbde:	f846 5c04 	str.w	r5, [r6, #-4]
   dbbe2:	46b9      	mov	r9, r7
   dbbe4:	463c      	mov	r4, r7
   dbbe6:	9502      	str	r5, [sp, #8]
   dbbe8:	46ab      	mov	fp, r5
   dbbea:	784a      	ldrb	r2, [r1, #1]
   dbbec:	1c4b      	adds	r3, r1, #1
   dbbee:	9303      	str	r3, [sp, #12]
   dbbf0:	b342      	cbz	r2, dbc44 <__hexnan+0x88>
   dbbf2:	4610      	mov	r0, r2
   dbbf4:	9105      	str	r1, [sp, #20]
   dbbf6:	9204      	str	r2, [sp, #16]
   dbbf8:	f7ff fd70 	bl	db6dc <__hexdig_fun>
   dbbfc:	2800      	cmp	r0, #0
   dbbfe:	d14f      	bne.n	dbca0 <__hexnan+0xe4>
   dbc00:	9a04      	ldr	r2, [sp, #16]
   dbc02:	9905      	ldr	r1, [sp, #20]
   dbc04:	2a20      	cmp	r2, #32
   dbc06:	d818      	bhi.n	dbc3a <__hexnan+0x7e>
   dbc08:	9b02      	ldr	r3, [sp, #8]
   dbc0a:	459b      	cmp	fp, r3
   dbc0c:	dd13      	ble.n	dbc36 <__hexnan+0x7a>
   dbc0e:	454c      	cmp	r4, r9
   dbc10:	d206      	bcs.n	dbc20 <__hexnan+0x64>
   dbc12:	2d07      	cmp	r5, #7
   dbc14:	dc04      	bgt.n	dbc20 <__hexnan+0x64>
   dbc16:	462a      	mov	r2, r5
   dbc18:	4649      	mov	r1, r9
   dbc1a:	4620      	mov	r0, r4
   dbc1c:	f7ff ffa8 	bl	dbb70 <L_shift>
   dbc20:	4544      	cmp	r4, r8
   dbc22:	d950      	bls.n	dbcc6 <__hexnan+0x10a>
   dbc24:	2300      	movs	r3, #0
   dbc26:	f1a4 0904 	sub.w	r9, r4, #4
   dbc2a:	f844 3c04 	str.w	r3, [r4, #-4]
   dbc2e:	f8cd b008 	str.w	fp, [sp, #8]
   dbc32:	464c      	mov	r4, r9
   dbc34:	461d      	mov	r5, r3
   dbc36:	9903      	ldr	r1, [sp, #12]
   dbc38:	e7d7      	b.n	dbbea <__hexnan+0x2e>
   dbc3a:	2a29      	cmp	r2, #41	; 0x29
   dbc3c:	d156      	bne.n	dbcec <__hexnan+0x130>
   dbc3e:	3102      	adds	r1, #2
   dbc40:	f8ca 1000 	str.w	r1, [sl]
   dbc44:	f1bb 0f00 	cmp.w	fp, #0
   dbc48:	d050      	beq.n	dbcec <__hexnan+0x130>
   dbc4a:	454c      	cmp	r4, r9
   dbc4c:	d206      	bcs.n	dbc5c <__hexnan+0xa0>
   dbc4e:	2d07      	cmp	r5, #7
   dbc50:	dc04      	bgt.n	dbc5c <__hexnan+0xa0>
   dbc52:	462a      	mov	r2, r5
   dbc54:	4649      	mov	r1, r9
   dbc56:	4620      	mov	r0, r4
   dbc58:	f7ff ff8a 	bl	dbb70 <L_shift>
   dbc5c:	4544      	cmp	r4, r8
   dbc5e:	d934      	bls.n	dbcca <__hexnan+0x10e>
   dbc60:	f1a8 0204 	sub.w	r2, r8, #4
   dbc64:	4623      	mov	r3, r4
   dbc66:	f853 1b04 	ldr.w	r1, [r3], #4
   dbc6a:	f842 1f04 	str.w	r1, [r2, #4]!
   dbc6e:	429f      	cmp	r7, r3
   dbc70:	d2f9      	bcs.n	dbc66 <__hexnan+0xaa>
   dbc72:	1b3b      	subs	r3, r7, r4
   dbc74:	f023 0303 	bic.w	r3, r3, #3
   dbc78:	3304      	adds	r3, #4
   dbc7a:	3401      	adds	r4, #1
   dbc7c:	3e03      	subs	r6, #3
   dbc7e:	42b4      	cmp	r4, r6
   dbc80:	bf88      	it	hi
   dbc82:	2304      	movhi	r3, #4
   dbc84:	4443      	add	r3, r8
   dbc86:	2200      	movs	r2, #0
   dbc88:	f843 2b04 	str.w	r2, [r3], #4
   dbc8c:	429f      	cmp	r7, r3
   dbc8e:	d2fb      	bcs.n	dbc88 <__hexnan+0xcc>
   dbc90:	683b      	ldr	r3, [r7, #0]
   dbc92:	b91b      	cbnz	r3, dbc9c <__hexnan+0xe0>
   dbc94:	4547      	cmp	r7, r8
   dbc96:	d127      	bne.n	dbce8 <__hexnan+0x12c>
   dbc98:	2301      	movs	r3, #1
   dbc9a:	603b      	str	r3, [r7, #0]
   dbc9c:	2005      	movs	r0, #5
   dbc9e:	e026      	b.n	dbcee <__hexnan+0x132>
   dbca0:	3501      	adds	r5, #1
   dbca2:	2d08      	cmp	r5, #8
   dbca4:	f10b 0b01 	add.w	fp, fp, #1
   dbca8:	dd06      	ble.n	dbcb8 <__hexnan+0xfc>
   dbcaa:	4544      	cmp	r4, r8
   dbcac:	d9c3      	bls.n	dbc36 <__hexnan+0x7a>
   dbcae:	2300      	movs	r3, #0
   dbcb0:	f844 3c04 	str.w	r3, [r4, #-4]
   dbcb4:	2501      	movs	r5, #1
   dbcb6:	3c04      	subs	r4, #4
   dbcb8:	6822      	ldr	r2, [r4, #0]
   dbcba:	f000 000f 	and.w	r0, r0, #15
   dbcbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dbcc2:	6022      	str	r2, [r4, #0]
   dbcc4:	e7b7      	b.n	dbc36 <__hexnan+0x7a>
   dbcc6:	2508      	movs	r5, #8
   dbcc8:	e7b5      	b.n	dbc36 <__hexnan+0x7a>
   dbcca:	9b01      	ldr	r3, [sp, #4]
   dbccc:	2b00      	cmp	r3, #0
   dbcce:	d0df      	beq.n	dbc90 <__hexnan+0xd4>
   dbcd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dbcd4:	f1c3 0320 	rsb	r3, r3, #32
   dbcd8:	fa22 f303 	lsr.w	r3, r2, r3
   dbcdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dbce0:	401a      	ands	r2, r3
   dbce2:	f846 2c04 	str.w	r2, [r6, #-4]
   dbce6:	e7d3      	b.n	dbc90 <__hexnan+0xd4>
   dbce8:	3f04      	subs	r7, #4
   dbcea:	e7d1      	b.n	dbc90 <__hexnan+0xd4>
   dbcec:	2004      	movs	r0, #4
   dbcee:	b007      	add	sp, #28
   dbcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dbcf4 <__ascii_mbtowc>:
   dbcf4:	b082      	sub	sp, #8
   dbcf6:	b901      	cbnz	r1, dbcfa <__ascii_mbtowc+0x6>
   dbcf8:	a901      	add	r1, sp, #4
   dbcfa:	b142      	cbz	r2, dbd0e <__ascii_mbtowc+0x1a>
   dbcfc:	b14b      	cbz	r3, dbd12 <__ascii_mbtowc+0x1e>
   dbcfe:	7813      	ldrb	r3, [r2, #0]
   dbd00:	600b      	str	r3, [r1, #0]
   dbd02:	7812      	ldrb	r2, [r2, #0]
   dbd04:	1e10      	subs	r0, r2, #0
   dbd06:	bf18      	it	ne
   dbd08:	2001      	movne	r0, #1
   dbd0a:	b002      	add	sp, #8
   dbd0c:	4770      	bx	lr
   dbd0e:	4610      	mov	r0, r2
   dbd10:	e7fb      	b.n	dbd0a <__ascii_mbtowc+0x16>
   dbd12:	f06f 0001 	mvn.w	r0, #1
   dbd16:	e7f8      	b.n	dbd0a <__ascii_mbtowc+0x16>

000dbd18 <_Balloc>:
   dbd18:	b570      	push	{r4, r5, r6, lr}
   dbd1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dbd1c:	4604      	mov	r4, r0
   dbd1e:	460d      	mov	r5, r1
   dbd20:	b93e      	cbnz	r6, dbd32 <_Balloc+0x1a>
   dbd22:	2010      	movs	r0, #16
   dbd24:	f7fb fa06 	bl	d7134 <malloc>
   dbd28:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dbd2c:	6260      	str	r0, [r4, #36]	; 0x24
   dbd2e:	6006      	str	r6, [r0, #0]
   dbd30:	60c6      	str	r6, [r0, #12]
   dbd32:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dbd34:	68f3      	ldr	r3, [r6, #12]
   dbd36:	b183      	cbz	r3, dbd5a <_Balloc+0x42>
   dbd38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dbd3a:	68db      	ldr	r3, [r3, #12]
   dbd3c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dbd40:	b9b8      	cbnz	r0, dbd72 <_Balloc+0x5a>
   dbd42:	2101      	movs	r1, #1
   dbd44:	fa01 f605 	lsl.w	r6, r1, r5
   dbd48:	1d72      	adds	r2, r6, #5
   dbd4a:	0092      	lsls	r2, r2, #2
   dbd4c:	4620      	mov	r0, r4
   dbd4e:	f7fe fd37 	bl	da7c0 <_calloc_r>
   dbd52:	b160      	cbz	r0, dbd6e <_Balloc+0x56>
   dbd54:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dbd58:	e00e      	b.n	dbd78 <_Balloc+0x60>
   dbd5a:	2221      	movs	r2, #33	; 0x21
   dbd5c:	2104      	movs	r1, #4
   dbd5e:	4620      	mov	r0, r4
   dbd60:	f7fe fd2e 	bl	da7c0 <_calloc_r>
   dbd64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dbd66:	60f0      	str	r0, [r6, #12]
   dbd68:	68db      	ldr	r3, [r3, #12]
   dbd6a:	2b00      	cmp	r3, #0
   dbd6c:	d1e4      	bne.n	dbd38 <_Balloc+0x20>
   dbd6e:	2000      	movs	r0, #0
   dbd70:	bd70      	pop	{r4, r5, r6, pc}
   dbd72:	6802      	ldr	r2, [r0, #0]
   dbd74:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dbd78:	2300      	movs	r3, #0
   dbd7a:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dbd7e:	e7f7      	b.n	dbd70 <_Balloc+0x58>

000dbd80 <_Bfree>:
   dbd80:	b570      	push	{r4, r5, r6, lr}
   dbd82:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dbd84:	4605      	mov	r5, r0
   dbd86:	460c      	mov	r4, r1
   dbd88:	b93e      	cbnz	r6, dbd9a <_Bfree+0x1a>
   dbd8a:	2010      	movs	r0, #16
   dbd8c:	f7fb f9d2 	bl	d7134 <malloc>
   dbd90:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dbd94:	6268      	str	r0, [r5, #36]	; 0x24
   dbd96:	6006      	str	r6, [r0, #0]
   dbd98:	60c6      	str	r6, [r0, #12]
   dbd9a:	b13c      	cbz	r4, dbdac <_Bfree+0x2c>
   dbd9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dbd9e:	6862      	ldr	r2, [r4, #4]
   dbda0:	68db      	ldr	r3, [r3, #12]
   dbda2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dbda6:	6021      	str	r1, [r4, #0]
   dbda8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dbdac:	bd70      	pop	{r4, r5, r6, pc}

000dbdae <__multadd>:
   dbdae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbdb2:	690e      	ldr	r6, [r1, #16]
   dbdb4:	4607      	mov	r7, r0
   dbdb6:	4698      	mov	r8, r3
   dbdb8:	460c      	mov	r4, r1
   dbdba:	f101 0014 	add.w	r0, r1, #20
   dbdbe:	2300      	movs	r3, #0
   dbdc0:	6805      	ldr	r5, [r0, #0]
   dbdc2:	b2a9      	uxth	r1, r5
   dbdc4:	fb02 8101 	mla	r1, r2, r1, r8
   dbdc8:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dbdcc:	0c2d      	lsrs	r5, r5, #16
   dbdce:	fb02 c505 	mla	r5, r2, r5, ip
   dbdd2:	b289      	uxth	r1, r1
   dbdd4:	3301      	adds	r3, #1
   dbdd6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dbdda:	429e      	cmp	r6, r3
   dbddc:	f840 1b04 	str.w	r1, [r0], #4
   dbde0:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dbde4:	dcec      	bgt.n	dbdc0 <__multadd+0x12>
   dbde6:	f1b8 0f00 	cmp.w	r8, #0
   dbdea:	d01b      	beq.n	dbe24 <__multadd+0x76>
   dbdec:	68a3      	ldr	r3, [r4, #8]
   dbdee:	42b3      	cmp	r3, r6
   dbdf0:	dc12      	bgt.n	dbe18 <__multadd+0x6a>
   dbdf2:	6861      	ldr	r1, [r4, #4]
   dbdf4:	4638      	mov	r0, r7
   dbdf6:	3101      	adds	r1, #1
   dbdf8:	f7ff ff8e 	bl	dbd18 <_Balloc>
   dbdfc:	6922      	ldr	r2, [r4, #16]
   dbdfe:	3202      	adds	r2, #2
   dbe00:	f104 010c 	add.w	r1, r4, #12
   dbe04:	4605      	mov	r5, r0
   dbe06:	0092      	lsls	r2, r2, #2
   dbe08:	300c      	adds	r0, #12
   dbe0a:	f7fe fca9 	bl	da760 <memcpy>
   dbe0e:	4621      	mov	r1, r4
   dbe10:	4638      	mov	r0, r7
   dbe12:	f7ff ffb5 	bl	dbd80 <_Bfree>
   dbe16:	462c      	mov	r4, r5
   dbe18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dbe1c:	3601      	adds	r6, #1
   dbe1e:	f8c3 8014 	str.w	r8, [r3, #20]
   dbe22:	6126      	str	r6, [r4, #16]
   dbe24:	4620      	mov	r0, r4
   dbe26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dbe2a <__s2b>:
   dbe2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbe2e:	460c      	mov	r4, r1
   dbe30:	4615      	mov	r5, r2
   dbe32:	461f      	mov	r7, r3
   dbe34:	2209      	movs	r2, #9
   dbe36:	3308      	adds	r3, #8
   dbe38:	4606      	mov	r6, r0
   dbe3a:	fb93 f3f2 	sdiv	r3, r3, r2
   dbe3e:	2100      	movs	r1, #0
   dbe40:	2201      	movs	r2, #1
   dbe42:	429a      	cmp	r2, r3
   dbe44:	db20      	blt.n	dbe88 <__s2b+0x5e>
   dbe46:	4630      	mov	r0, r6
   dbe48:	f7ff ff66 	bl	dbd18 <_Balloc>
   dbe4c:	9b08      	ldr	r3, [sp, #32]
   dbe4e:	6143      	str	r3, [r0, #20]
   dbe50:	2d09      	cmp	r5, #9
   dbe52:	f04f 0301 	mov.w	r3, #1
   dbe56:	6103      	str	r3, [r0, #16]
   dbe58:	dd19      	ble.n	dbe8e <__s2b+0x64>
   dbe5a:	f104 0909 	add.w	r9, r4, #9
   dbe5e:	46c8      	mov	r8, r9
   dbe60:	442c      	add	r4, r5
   dbe62:	f818 3b01 	ldrb.w	r3, [r8], #1
   dbe66:	4601      	mov	r1, r0
   dbe68:	3b30      	subs	r3, #48	; 0x30
   dbe6a:	220a      	movs	r2, #10
   dbe6c:	4630      	mov	r0, r6
   dbe6e:	f7ff ff9e 	bl	dbdae <__multadd>
   dbe72:	45a0      	cmp	r8, r4
   dbe74:	d1f5      	bne.n	dbe62 <__s2b+0x38>
   dbe76:	f1a5 0408 	sub.w	r4, r5, #8
   dbe7a:	444c      	add	r4, r9
   dbe7c:	1b2d      	subs	r5, r5, r4
   dbe7e:	1963      	adds	r3, r4, r5
   dbe80:	42bb      	cmp	r3, r7
   dbe82:	db07      	blt.n	dbe94 <__s2b+0x6a>
   dbe84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbe88:	0052      	lsls	r2, r2, #1
   dbe8a:	3101      	adds	r1, #1
   dbe8c:	e7d9      	b.n	dbe42 <__s2b+0x18>
   dbe8e:	340a      	adds	r4, #10
   dbe90:	2509      	movs	r5, #9
   dbe92:	e7f3      	b.n	dbe7c <__s2b+0x52>
   dbe94:	f814 3b01 	ldrb.w	r3, [r4], #1
   dbe98:	4601      	mov	r1, r0
   dbe9a:	3b30      	subs	r3, #48	; 0x30
   dbe9c:	220a      	movs	r2, #10
   dbe9e:	4630      	mov	r0, r6
   dbea0:	f7ff ff85 	bl	dbdae <__multadd>
   dbea4:	e7eb      	b.n	dbe7e <__s2b+0x54>

000dbea6 <__hi0bits>:
   dbea6:	0c03      	lsrs	r3, r0, #16
   dbea8:	041b      	lsls	r3, r3, #16
   dbeaa:	b9d3      	cbnz	r3, dbee2 <__hi0bits+0x3c>
   dbeac:	0400      	lsls	r0, r0, #16
   dbeae:	2310      	movs	r3, #16
   dbeb0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dbeb4:	bf04      	itt	eq
   dbeb6:	0200      	lsleq	r0, r0, #8
   dbeb8:	3308      	addeq	r3, #8
   dbeba:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dbebe:	bf04      	itt	eq
   dbec0:	0100      	lsleq	r0, r0, #4
   dbec2:	3304      	addeq	r3, #4
   dbec4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dbec8:	bf04      	itt	eq
   dbeca:	0080      	lsleq	r0, r0, #2
   dbecc:	3302      	addeq	r3, #2
   dbece:	2800      	cmp	r0, #0
   dbed0:	db05      	blt.n	dbede <__hi0bits+0x38>
   dbed2:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dbed6:	f103 0301 	add.w	r3, r3, #1
   dbeda:	bf08      	it	eq
   dbedc:	2320      	moveq	r3, #32
   dbede:	4618      	mov	r0, r3
   dbee0:	4770      	bx	lr
   dbee2:	2300      	movs	r3, #0
   dbee4:	e7e4      	b.n	dbeb0 <__hi0bits+0xa>

000dbee6 <__lo0bits>:
   dbee6:	6803      	ldr	r3, [r0, #0]
   dbee8:	f013 0207 	ands.w	r2, r3, #7
   dbeec:	4601      	mov	r1, r0
   dbeee:	d00b      	beq.n	dbf08 <__lo0bits+0x22>
   dbef0:	07da      	lsls	r2, r3, #31
   dbef2:	d424      	bmi.n	dbf3e <__lo0bits+0x58>
   dbef4:	0798      	lsls	r0, r3, #30
   dbef6:	bf49      	itett	mi
   dbef8:	085b      	lsrmi	r3, r3, #1
   dbefa:	089b      	lsrpl	r3, r3, #2
   dbefc:	2001      	movmi	r0, #1
   dbefe:	600b      	strmi	r3, [r1, #0]
   dbf00:	bf5c      	itt	pl
   dbf02:	600b      	strpl	r3, [r1, #0]
   dbf04:	2002      	movpl	r0, #2
   dbf06:	4770      	bx	lr
   dbf08:	b298      	uxth	r0, r3
   dbf0a:	b9b0      	cbnz	r0, dbf3a <__lo0bits+0x54>
   dbf0c:	0c1b      	lsrs	r3, r3, #16
   dbf0e:	2010      	movs	r0, #16
   dbf10:	f013 0fff 	tst.w	r3, #255	; 0xff
   dbf14:	bf04      	itt	eq
   dbf16:	0a1b      	lsreq	r3, r3, #8
   dbf18:	3008      	addeq	r0, #8
   dbf1a:	071a      	lsls	r2, r3, #28
   dbf1c:	bf04      	itt	eq
   dbf1e:	091b      	lsreq	r3, r3, #4
   dbf20:	3004      	addeq	r0, #4
   dbf22:	079a      	lsls	r2, r3, #30
   dbf24:	bf04      	itt	eq
   dbf26:	089b      	lsreq	r3, r3, #2
   dbf28:	3002      	addeq	r0, #2
   dbf2a:	07da      	lsls	r2, r3, #31
   dbf2c:	d403      	bmi.n	dbf36 <__lo0bits+0x50>
   dbf2e:	085b      	lsrs	r3, r3, #1
   dbf30:	f100 0001 	add.w	r0, r0, #1
   dbf34:	d005      	beq.n	dbf42 <__lo0bits+0x5c>
   dbf36:	600b      	str	r3, [r1, #0]
   dbf38:	4770      	bx	lr
   dbf3a:	4610      	mov	r0, r2
   dbf3c:	e7e8      	b.n	dbf10 <__lo0bits+0x2a>
   dbf3e:	2000      	movs	r0, #0
   dbf40:	4770      	bx	lr
   dbf42:	2020      	movs	r0, #32
   dbf44:	4770      	bx	lr

000dbf46 <__i2b>:
   dbf46:	b510      	push	{r4, lr}
   dbf48:	460c      	mov	r4, r1
   dbf4a:	2101      	movs	r1, #1
   dbf4c:	f7ff fee4 	bl	dbd18 <_Balloc>
   dbf50:	2201      	movs	r2, #1
   dbf52:	6144      	str	r4, [r0, #20]
   dbf54:	6102      	str	r2, [r0, #16]
   dbf56:	bd10      	pop	{r4, pc}

000dbf58 <__multiply>:
   dbf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbf5c:	4615      	mov	r5, r2
   dbf5e:	690a      	ldr	r2, [r1, #16]
   dbf60:	692b      	ldr	r3, [r5, #16]
   dbf62:	429a      	cmp	r2, r3
   dbf64:	bfb8      	it	lt
   dbf66:	460b      	movlt	r3, r1
   dbf68:	460c      	mov	r4, r1
   dbf6a:	bfbc      	itt	lt
   dbf6c:	462c      	movlt	r4, r5
   dbf6e:	461d      	movlt	r5, r3
   dbf70:	6927      	ldr	r7, [r4, #16]
   dbf72:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dbf76:	68a3      	ldr	r3, [r4, #8]
   dbf78:	6861      	ldr	r1, [r4, #4]
   dbf7a:	eb07 0609 	add.w	r6, r7, r9
   dbf7e:	42b3      	cmp	r3, r6
   dbf80:	bfb8      	it	lt
   dbf82:	3101      	addlt	r1, #1
   dbf84:	b085      	sub	sp, #20
   dbf86:	f7ff fec7 	bl	dbd18 <_Balloc>
   dbf8a:	f100 0114 	add.w	r1, r0, #20
   dbf8e:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dbf92:	460b      	mov	r3, r1
   dbf94:	2200      	movs	r2, #0
   dbf96:	4543      	cmp	r3, r8
   dbf98:	d31d      	bcc.n	dbfd6 <__multiply+0x7e>
   dbf9a:	f104 0314 	add.w	r3, r4, #20
   dbf9e:	f105 0214 	add.w	r2, r5, #20
   dbfa2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dbfa6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dbfaa:	9302      	str	r3, [sp, #8]
   dbfac:	1b3b      	subs	r3, r7, r4
   dbfae:	3b15      	subs	r3, #21
   dbfb0:	f023 0303 	bic.w	r3, r3, #3
   dbfb4:	3304      	adds	r3, #4
   dbfb6:	f104 0515 	add.w	r5, r4, #21
   dbfba:	42af      	cmp	r7, r5
   dbfbc:	bf38      	it	cc
   dbfbe:	2304      	movcc	r3, #4
   dbfc0:	9301      	str	r3, [sp, #4]
   dbfc2:	9b02      	ldr	r3, [sp, #8]
   dbfc4:	9203      	str	r2, [sp, #12]
   dbfc6:	4293      	cmp	r3, r2
   dbfc8:	d808      	bhi.n	dbfdc <__multiply+0x84>
   dbfca:	2e00      	cmp	r6, #0
   dbfcc:	dc5a      	bgt.n	dc084 <__multiply+0x12c>
   dbfce:	6106      	str	r6, [r0, #16]
   dbfd0:	b005      	add	sp, #20
   dbfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbfd6:	f843 2b04 	str.w	r2, [r3], #4
   dbfda:	e7dc      	b.n	dbf96 <__multiply+0x3e>
   dbfdc:	f8b2 a000 	ldrh.w	sl, [r2]
   dbfe0:	f1ba 0f00 	cmp.w	sl, #0
   dbfe4:	d024      	beq.n	dc030 <__multiply+0xd8>
   dbfe6:	f104 0e14 	add.w	lr, r4, #20
   dbfea:	4689      	mov	r9, r1
   dbfec:	f04f 0c00 	mov.w	ip, #0
   dbff0:	f85e 5b04 	ldr.w	r5, [lr], #4
   dbff4:	f8d9 b000 	ldr.w	fp, [r9]
   dbff8:	b2ab      	uxth	r3, r5
   dbffa:	fa1f fb8b 	uxth.w	fp, fp
   dbffe:	fb0a b303 	mla	r3, sl, r3, fp
   dc002:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dc006:	f8d9 5000 	ldr.w	r5, [r9]
   dc00a:	4463      	add	r3, ip
   dc00c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc010:	fb0a c50b 	mla	r5, sl, fp, ip
   dc014:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dc018:	b29b      	uxth	r3, r3
   dc01a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dc01e:	4577      	cmp	r7, lr
   dc020:	f849 3b04 	str.w	r3, [r9], #4
   dc024:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc028:	d8e2      	bhi.n	dbff0 <__multiply+0x98>
   dc02a:	9b01      	ldr	r3, [sp, #4]
   dc02c:	f841 c003 	str.w	ip, [r1, r3]
   dc030:	9b03      	ldr	r3, [sp, #12]
   dc032:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dc036:	3204      	adds	r2, #4
   dc038:	f1b9 0f00 	cmp.w	r9, #0
   dc03c:	d020      	beq.n	dc080 <__multiply+0x128>
   dc03e:	680b      	ldr	r3, [r1, #0]
   dc040:	f104 0c14 	add.w	ip, r4, #20
   dc044:	468e      	mov	lr, r1
   dc046:	f04f 0a00 	mov.w	sl, #0
   dc04a:	f8bc 5000 	ldrh.w	r5, [ip]
   dc04e:	f8be b002 	ldrh.w	fp, [lr, #2]
   dc052:	fb09 b505 	mla	r5, r9, r5, fp
   dc056:	44aa      	add	sl, r5
   dc058:	b29b      	uxth	r3, r3
   dc05a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dc05e:	f84e 3b04 	str.w	r3, [lr], #4
   dc062:	f85c 3b04 	ldr.w	r3, [ip], #4
   dc066:	f8be 5000 	ldrh.w	r5, [lr]
   dc06a:	0c1b      	lsrs	r3, r3, #16
   dc06c:	fb09 5303 	mla	r3, r9, r3, r5
   dc070:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dc074:	4567      	cmp	r7, ip
   dc076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dc07a:	d8e6      	bhi.n	dc04a <__multiply+0xf2>
   dc07c:	9d01      	ldr	r5, [sp, #4]
   dc07e:	514b      	str	r3, [r1, r5]
   dc080:	3104      	adds	r1, #4
   dc082:	e79e      	b.n	dbfc2 <__multiply+0x6a>
   dc084:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dc088:	2b00      	cmp	r3, #0
   dc08a:	d1a0      	bne.n	dbfce <__multiply+0x76>
   dc08c:	3e01      	subs	r6, #1
   dc08e:	e79c      	b.n	dbfca <__multiply+0x72>

000dc090 <__pow5mult>:
   dc090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc094:	4615      	mov	r5, r2
   dc096:	f012 0203 	ands.w	r2, r2, #3
   dc09a:	4606      	mov	r6, r0
   dc09c:	460f      	mov	r7, r1
   dc09e:	d007      	beq.n	dc0b0 <__pow5mult+0x20>
   dc0a0:	4c21      	ldr	r4, [pc, #132]	; (dc128 <__pow5mult+0x98>)
   dc0a2:	3a01      	subs	r2, #1
   dc0a4:	2300      	movs	r3, #0
   dc0a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dc0aa:	f7ff fe80 	bl	dbdae <__multadd>
   dc0ae:	4607      	mov	r7, r0
   dc0b0:	10ad      	asrs	r5, r5, #2
   dc0b2:	d035      	beq.n	dc120 <__pow5mult+0x90>
   dc0b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dc0b6:	b93c      	cbnz	r4, dc0c8 <__pow5mult+0x38>
   dc0b8:	2010      	movs	r0, #16
   dc0ba:	f7fb f83b 	bl	d7134 <malloc>
   dc0be:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dc0c2:	6270      	str	r0, [r6, #36]	; 0x24
   dc0c4:	6004      	str	r4, [r0, #0]
   dc0c6:	60c4      	str	r4, [r0, #12]
   dc0c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dc0cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dc0d0:	b94c      	cbnz	r4, dc0e6 <__pow5mult+0x56>
   dc0d2:	f240 2171 	movw	r1, #625	; 0x271
   dc0d6:	4630      	mov	r0, r6
   dc0d8:	f7ff ff35 	bl	dbf46 <__i2b>
   dc0dc:	2300      	movs	r3, #0
   dc0de:	f8c8 0008 	str.w	r0, [r8, #8]
   dc0e2:	4604      	mov	r4, r0
   dc0e4:	6003      	str	r3, [r0, #0]
   dc0e6:	f04f 0900 	mov.w	r9, #0
   dc0ea:	07eb      	lsls	r3, r5, #31
   dc0ec:	d50a      	bpl.n	dc104 <__pow5mult+0x74>
   dc0ee:	4639      	mov	r1, r7
   dc0f0:	4622      	mov	r2, r4
   dc0f2:	4630      	mov	r0, r6
   dc0f4:	f7ff ff30 	bl	dbf58 <__multiply>
   dc0f8:	4639      	mov	r1, r7
   dc0fa:	4680      	mov	r8, r0
   dc0fc:	4630      	mov	r0, r6
   dc0fe:	f7ff fe3f 	bl	dbd80 <_Bfree>
   dc102:	4647      	mov	r7, r8
   dc104:	106d      	asrs	r5, r5, #1
   dc106:	d00b      	beq.n	dc120 <__pow5mult+0x90>
   dc108:	6820      	ldr	r0, [r4, #0]
   dc10a:	b938      	cbnz	r0, dc11c <__pow5mult+0x8c>
   dc10c:	4622      	mov	r2, r4
   dc10e:	4621      	mov	r1, r4
   dc110:	4630      	mov	r0, r6
   dc112:	f7ff ff21 	bl	dbf58 <__multiply>
   dc116:	6020      	str	r0, [r4, #0]
   dc118:	f8c0 9000 	str.w	r9, [r0]
   dc11c:	4604      	mov	r4, r0
   dc11e:	e7e4      	b.n	dc0ea <__pow5mult+0x5a>
   dc120:	4638      	mov	r0, r7
   dc122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc126:	bf00      	nop
   dc128:	000dd4c8 	.word	0x000dd4c8

000dc12c <__lshift>:
   dc12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc130:	460c      	mov	r4, r1
   dc132:	6849      	ldr	r1, [r1, #4]
   dc134:	6923      	ldr	r3, [r4, #16]
   dc136:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dc13a:	68a3      	ldr	r3, [r4, #8]
   dc13c:	4607      	mov	r7, r0
   dc13e:	4691      	mov	r9, r2
   dc140:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dc144:	f108 0601 	add.w	r6, r8, #1
   dc148:	42b3      	cmp	r3, r6
   dc14a:	db3f      	blt.n	dc1cc <__lshift+0xa0>
   dc14c:	4638      	mov	r0, r7
   dc14e:	f7ff fde3 	bl	dbd18 <_Balloc>
   dc152:	2300      	movs	r3, #0
   dc154:	4605      	mov	r5, r0
   dc156:	f100 0114 	add.w	r1, r0, #20
   dc15a:	f100 0210 	add.w	r2, r0, #16
   dc15e:	4618      	mov	r0, r3
   dc160:	4553      	cmp	r3, sl
   dc162:	db36      	blt.n	dc1d2 <__lshift+0xa6>
   dc164:	6920      	ldr	r0, [r4, #16]
   dc166:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dc16a:	f104 0314 	add.w	r3, r4, #20
   dc16e:	f019 091f 	ands.w	r9, r9, #31
   dc172:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dc176:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dc17a:	d02e      	beq.n	dc1da <__lshift+0xae>
   dc17c:	f1c9 0e20 	rsb	lr, r9, #32
   dc180:	468a      	mov	sl, r1
   dc182:	2200      	movs	r2, #0
   dc184:	6818      	ldr	r0, [r3, #0]
   dc186:	fa00 f009 	lsl.w	r0, r0, r9
   dc18a:	4302      	orrs	r2, r0
   dc18c:	f84a 2b04 	str.w	r2, [sl], #4
   dc190:	f853 2b04 	ldr.w	r2, [r3], #4
   dc194:	459c      	cmp	ip, r3
   dc196:	fa22 f20e 	lsr.w	r2, r2, lr
   dc19a:	d8f3      	bhi.n	dc184 <__lshift+0x58>
   dc19c:	ebac 0304 	sub.w	r3, ip, r4
   dc1a0:	3b15      	subs	r3, #21
   dc1a2:	f023 0303 	bic.w	r3, r3, #3
   dc1a6:	3304      	adds	r3, #4
   dc1a8:	f104 0015 	add.w	r0, r4, #21
   dc1ac:	4560      	cmp	r0, ip
   dc1ae:	bf88      	it	hi
   dc1b0:	2304      	movhi	r3, #4
   dc1b2:	50ca      	str	r2, [r1, r3]
   dc1b4:	b10a      	cbz	r2, dc1ba <__lshift+0x8e>
   dc1b6:	f108 0602 	add.w	r6, r8, #2
   dc1ba:	3e01      	subs	r6, #1
   dc1bc:	4638      	mov	r0, r7
   dc1be:	612e      	str	r6, [r5, #16]
   dc1c0:	4621      	mov	r1, r4
   dc1c2:	f7ff fddd 	bl	dbd80 <_Bfree>
   dc1c6:	4628      	mov	r0, r5
   dc1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc1cc:	3101      	adds	r1, #1
   dc1ce:	005b      	lsls	r3, r3, #1
   dc1d0:	e7ba      	b.n	dc148 <__lshift+0x1c>
   dc1d2:	f842 0f04 	str.w	r0, [r2, #4]!
   dc1d6:	3301      	adds	r3, #1
   dc1d8:	e7c2      	b.n	dc160 <__lshift+0x34>
   dc1da:	3904      	subs	r1, #4
   dc1dc:	f853 2b04 	ldr.w	r2, [r3], #4
   dc1e0:	f841 2f04 	str.w	r2, [r1, #4]!
   dc1e4:	459c      	cmp	ip, r3
   dc1e6:	d8f9      	bhi.n	dc1dc <__lshift+0xb0>
   dc1e8:	e7e7      	b.n	dc1ba <__lshift+0x8e>

000dc1ea <__mcmp>:
   dc1ea:	b530      	push	{r4, r5, lr}
   dc1ec:	6902      	ldr	r2, [r0, #16]
   dc1ee:	690c      	ldr	r4, [r1, #16]
   dc1f0:	1b12      	subs	r2, r2, r4
   dc1f2:	d10e      	bne.n	dc212 <__mcmp+0x28>
   dc1f4:	f100 0314 	add.w	r3, r0, #20
   dc1f8:	3114      	adds	r1, #20
   dc1fa:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dc1fe:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dc202:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dc206:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dc20a:	42a5      	cmp	r5, r4
   dc20c:	d003      	beq.n	dc216 <__mcmp+0x2c>
   dc20e:	d305      	bcc.n	dc21c <__mcmp+0x32>
   dc210:	2201      	movs	r2, #1
   dc212:	4610      	mov	r0, r2
   dc214:	bd30      	pop	{r4, r5, pc}
   dc216:	4283      	cmp	r3, r0
   dc218:	d3f3      	bcc.n	dc202 <__mcmp+0x18>
   dc21a:	e7fa      	b.n	dc212 <__mcmp+0x28>
   dc21c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc220:	e7f7      	b.n	dc212 <__mcmp+0x28>

000dc222 <__mdiff>:
   dc222:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc226:	460c      	mov	r4, r1
   dc228:	4606      	mov	r6, r0
   dc22a:	4611      	mov	r1, r2
   dc22c:	4620      	mov	r0, r4
   dc22e:	4617      	mov	r7, r2
   dc230:	f7ff ffdb 	bl	dc1ea <__mcmp>
   dc234:	1e05      	subs	r5, r0, #0
   dc236:	d108      	bne.n	dc24a <__mdiff+0x28>
   dc238:	4629      	mov	r1, r5
   dc23a:	4630      	mov	r0, r6
   dc23c:	f7ff fd6c 	bl	dbd18 <_Balloc>
   dc240:	2301      	movs	r3, #1
   dc242:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dc246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc24a:	bfa4      	itt	ge
   dc24c:	463b      	movge	r3, r7
   dc24e:	4627      	movge	r7, r4
   dc250:	4630      	mov	r0, r6
   dc252:	6879      	ldr	r1, [r7, #4]
   dc254:	bfa6      	itte	ge
   dc256:	461c      	movge	r4, r3
   dc258:	2500      	movge	r5, #0
   dc25a:	2501      	movlt	r5, #1
   dc25c:	f7ff fd5c 	bl	dbd18 <_Balloc>
   dc260:	693e      	ldr	r6, [r7, #16]
   dc262:	60c5      	str	r5, [r0, #12]
   dc264:	6925      	ldr	r5, [r4, #16]
   dc266:	f107 0114 	add.w	r1, r7, #20
   dc26a:	f104 0914 	add.w	r9, r4, #20
   dc26e:	f100 0e14 	add.w	lr, r0, #20
   dc272:	f107 0210 	add.w	r2, r7, #16
   dc276:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dc27a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dc27e:	46f2      	mov	sl, lr
   dc280:	2700      	movs	r7, #0
   dc282:	f859 3b04 	ldr.w	r3, [r9], #4
   dc286:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dc28a:	fa1f f883 	uxth.w	r8, r3
   dc28e:	fa17 f78b 	uxtah	r7, r7, fp
   dc292:	0c1b      	lsrs	r3, r3, #16
   dc294:	eba7 0808 	sub.w	r8, r7, r8
   dc298:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dc29c:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dc2a0:	fa1f f888 	uxth.w	r8, r8
   dc2a4:	141f      	asrs	r7, r3, #16
   dc2a6:	454d      	cmp	r5, r9
   dc2a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dc2ac:	f84a 3b04 	str.w	r3, [sl], #4
   dc2b0:	d8e7      	bhi.n	dc282 <__mdiff+0x60>
   dc2b2:	1b2b      	subs	r3, r5, r4
   dc2b4:	3b15      	subs	r3, #21
   dc2b6:	f023 0303 	bic.w	r3, r3, #3
   dc2ba:	3304      	adds	r3, #4
   dc2bc:	3415      	adds	r4, #21
   dc2be:	42a5      	cmp	r5, r4
   dc2c0:	bf38      	it	cc
   dc2c2:	2304      	movcc	r3, #4
   dc2c4:	4419      	add	r1, r3
   dc2c6:	4473      	add	r3, lr
   dc2c8:	469e      	mov	lr, r3
   dc2ca:	460d      	mov	r5, r1
   dc2cc:	4565      	cmp	r5, ip
   dc2ce:	d30e      	bcc.n	dc2ee <__mdiff+0xcc>
   dc2d0:	f10c 0203 	add.w	r2, ip, #3
   dc2d4:	1a52      	subs	r2, r2, r1
   dc2d6:	f022 0203 	bic.w	r2, r2, #3
   dc2da:	3903      	subs	r1, #3
   dc2dc:	458c      	cmp	ip, r1
   dc2de:	bf38      	it	cc
   dc2e0:	2200      	movcc	r2, #0
   dc2e2:	441a      	add	r2, r3
   dc2e4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dc2e8:	b17b      	cbz	r3, dc30a <__mdiff+0xe8>
   dc2ea:	6106      	str	r6, [r0, #16]
   dc2ec:	e7ab      	b.n	dc246 <__mdiff+0x24>
   dc2ee:	f855 8b04 	ldr.w	r8, [r5], #4
   dc2f2:	fa17 f488 	uxtah	r4, r7, r8
   dc2f6:	1422      	asrs	r2, r4, #16
   dc2f8:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dc2fc:	b2a4      	uxth	r4, r4
   dc2fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dc302:	f84e 4b04 	str.w	r4, [lr], #4
   dc306:	1417      	asrs	r7, r2, #16
   dc308:	e7e0      	b.n	dc2cc <__mdiff+0xaa>
   dc30a:	3e01      	subs	r6, #1
   dc30c:	e7ea      	b.n	dc2e4 <__mdiff+0xc2>
	...

000dc310 <__ulp>:
   dc310:	b082      	sub	sp, #8
   dc312:	ed8d 0b00 	vstr	d0, [sp]
   dc316:	9b01      	ldr	r3, [sp, #4]
   dc318:	4912      	ldr	r1, [pc, #72]	; (dc364 <__ulp+0x54>)
   dc31a:	4019      	ands	r1, r3
   dc31c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dc320:	2900      	cmp	r1, #0
   dc322:	dd05      	ble.n	dc330 <__ulp+0x20>
   dc324:	2200      	movs	r2, #0
   dc326:	460b      	mov	r3, r1
   dc328:	ec43 2b10 	vmov	d0, r2, r3
   dc32c:	b002      	add	sp, #8
   dc32e:	4770      	bx	lr
   dc330:	4249      	negs	r1, r1
   dc332:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dc336:	ea4f 5021 	mov.w	r0, r1, asr #20
   dc33a:	f04f 0200 	mov.w	r2, #0
   dc33e:	f04f 0300 	mov.w	r3, #0
   dc342:	da04      	bge.n	dc34e <__ulp+0x3e>
   dc344:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dc348:	fa41 f300 	asr.w	r3, r1, r0
   dc34c:	e7ec      	b.n	dc328 <__ulp+0x18>
   dc34e:	f1a0 0114 	sub.w	r1, r0, #20
   dc352:	291e      	cmp	r1, #30
   dc354:	bfda      	itte	le
   dc356:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dc35a:	fa20 f101 	lsrle.w	r1, r0, r1
   dc35e:	2101      	movgt	r1, #1
   dc360:	460a      	mov	r2, r1
   dc362:	e7e1      	b.n	dc328 <__ulp+0x18>
   dc364:	7ff00000 	.word	0x7ff00000

000dc368 <__b2d>:
   dc368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc36a:	6905      	ldr	r5, [r0, #16]
   dc36c:	f100 0714 	add.w	r7, r0, #20
   dc370:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dc374:	1f2e      	subs	r6, r5, #4
   dc376:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dc37a:	4620      	mov	r0, r4
   dc37c:	f7ff fd93 	bl	dbea6 <__hi0bits>
   dc380:	f1c0 0320 	rsb	r3, r0, #32
   dc384:	280a      	cmp	r0, #10
   dc386:	f8df c07c 	ldr.w	ip, [pc, #124]	; dc404 <__b2d+0x9c>
   dc38a:	600b      	str	r3, [r1, #0]
   dc38c:	dc14      	bgt.n	dc3b8 <__b2d+0x50>
   dc38e:	f1c0 0e0b 	rsb	lr, r0, #11
   dc392:	fa24 f10e 	lsr.w	r1, r4, lr
   dc396:	42b7      	cmp	r7, r6
   dc398:	ea41 030c 	orr.w	r3, r1, ip
   dc39c:	bf34      	ite	cc
   dc39e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc3a2:	2100      	movcs	r1, #0
   dc3a4:	3015      	adds	r0, #21
   dc3a6:	fa04 f000 	lsl.w	r0, r4, r0
   dc3aa:	fa21 f10e 	lsr.w	r1, r1, lr
   dc3ae:	ea40 0201 	orr.w	r2, r0, r1
   dc3b2:	ec43 2b10 	vmov	d0, r2, r3
   dc3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc3b8:	42b7      	cmp	r7, r6
   dc3ba:	bf3a      	itte	cc
   dc3bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc3c0:	f1a5 0608 	subcc.w	r6, r5, #8
   dc3c4:	2100      	movcs	r1, #0
   dc3c6:	380b      	subs	r0, #11
   dc3c8:	d017      	beq.n	dc3fa <__b2d+0x92>
   dc3ca:	f1c0 0c20 	rsb	ip, r0, #32
   dc3ce:	fa04 f500 	lsl.w	r5, r4, r0
   dc3d2:	42be      	cmp	r6, r7
   dc3d4:	fa21 f40c 	lsr.w	r4, r1, ip
   dc3d8:	ea45 0504 	orr.w	r5, r5, r4
   dc3dc:	bf8c      	ite	hi
   dc3de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dc3e2:	2400      	movls	r4, #0
   dc3e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dc3e8:	fa01 f000 	lsl.w	r0, r1, r0
   dc3ec:	fa24 f40c 	lsr.w	r4, r4, ip
   dc3f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dc3f4:	ea40 0204 	orr.w	r2, r0, r4
   dc3f8:	e7db      	b.n	dc3b2 <__b2d+0x4a>
   dc3fa:	ea44 030c 	orr.w	r3, r4, ip
   dc3fe:	460a      	mov	r2, r1
   dc400:	e7d7      	b.n	dc3b2 <__b2d+0x4a>
   dc402:	bf00      	nop
   dc404:	3ff00000 	.word	0x3ff00000

000dc408 <__d2b>:
   dc408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dc40c:	4689      	mov	r9, r1
   dc40e:	2101      	movs	r1, #1
   dc410:	ec57 6b10 	vmov	r6, r7, d0
   dc414:	4690      	mov	r8, r2
   dc416:	f7ff fc7f 	bl	dbd18 <_Balloc>
   dc41a:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dc41e:	4604      	mov	r4, r0
   dc420:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dc424:	bb35      	cbnz	r5, dc474 <__d2b+0x6c>
   dc426:	2e00      	cmp	r6, #0
   dc428:	9301      	str	r3, [sp, #4]
   dc42a:	d028      	beq.n	dc47e <__d2b+0x76>
   dc42c:	4668      	mov	r0, sp
   dc42e:	9600      	str	r6, [sp, #0]
   dc430:	f7ff fd59 	bl	dbee6 <__lo0bits>
   dc434:	9900      	ldr	r1, [sp, #0]
   dc436:	b300      	cbz	r0, dc47a <__d2b+0x72>
   dc438:	9a01      	ldr	r2, [sp, #4]
   dc43a:	f1c0 0320 	rsb	r3, r0, #32
   dc43e:	fa02 f303 	lsl.w	r3, r2, r3
   dc442:	430b      	orrs	r3, r1
   dc444:	40c2      	lsrs	r2, r0
   dc446:	6163      	str	r3, [r4, #20]
   dc448:	9201      	str	r2, [sp, #4]
   dc44a:	9b01      	ldr	r3, [sp, #4]
   dc44c:	61a3      	str	r3, [r4, #24]
   dc44e:	2b00      	cmp	r3, #0
   dc450:	bf14      	ite	ne
   dc452:	2202      	movne	r2, #2
   dc454:	2201      	moveq	r2, #1
   dc456:	6122      	str	r2, [r4, #16]
   dc458:	b1d5      	cbz	r5, dc490 <__d2b+0x88>
   dc45a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dc45e:	4405      	add	r5, r0
   dc460:	f8c9 5000 	str.w	r5, [r9]
   dc464:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dc468:	f8c8 0000 	str.w	r0, [r8]
   dc46c:	4620      	mov	r0, r4
   dc46e:	b003      	add	sp, #12
   dc470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc478:	e7d5      	b.n	dc426 <__d2b+0x1e>
   dc47a:	6161      	str	r1, [r4, #20]
   dc47c:	e7e5      	b.n	dc44a <__d2b+0x42>
   dc47e:	a801      	add	r0, sp, #4
   dc480:	f7ff fd31 	bl	dbee6 <__lo0bits>
   dc484:	9b01      	ldr	r3, [sp, #4]
   dc486:	6163      	str	r3, [r4, #20]
   dc488:	2201      	movs	r2, #1
   dc48a:	6122      	str	r2, [r4, #16]
   dc48c:	3020      	adds	r0, #32
   dc48e:	e7e3      	b.n	dc458 <__d2b+0x50>
   dc490:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dc494:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dc498:	f8c9 0000 	str.w	r0, [r9]
   dc49c:	6918      	ldr	r0, [r3, #16]
   dc49e:	f7ff fd02 	bl	dbea6 <__hi0bits>
   dc4a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dc4a6:	e7df      	b.n	dc468 <__d2b+0x60>

000dc4a8 <__ratio>:
   dc4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc4ac:	4688      	mov	r8, r1
   dc4ae:	4669      	mov	r1, sp
   dc4b0:	4681      	mov	r9, r0
   dc4b2:	f7ff ff59 	bl	dc368 <__b2d>
   dc4b6:	a901      	add	r1, sp, #4
   dc4b8:	4640      	mov	r0, r8
   dc4ba:	ec55 4b10 	vmov	r4, r5, d0
   dc4be:	f7ff ff53 	bl	dc368 <__b2d>
   dc4c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dc4c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dc4ca:	eba3 0c02 	sub.w	ip, r3, r2
   dc4ce:	e9dd 3200 	ldrd	r3, r2, [sp]
   dc4d2:	1a9b      	subs	r3, r3, r2
   dc4d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dc4d8:	ec51 0b10 	vmov	r0, r1, d0
   dc4dc:	2b00      	cmp	r3, #0
   dc4de:	bfd6      	itet	le
   dc4e0:	460a      	movle	r2, r1
   dc4e2:	462a      	movgt	r2, r5
   dc4e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dc4e8:	468b      	mov	fp, r1
   dc4ea:	462f      	mov	r7, r5
   dc4ec:	bfd4      	ite	le
   dc4ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dc4f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dc4f6:	4620      	mov	r0, r4
   dc4f8:	ee10 2a10 	vmov	r2, s0
   dc4fc:	465b      	mov	r3, fp
   dc4fe:	4639      	mov	r1, r7
   dc500:	f7fd fd5c 	bl	d9fbc <__aeabi_ddiv>
   dc504:	ec41 0b10 	vmov	d0, r0, r1
   dc508:	b003      	add	sp, #12
   dc50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc50e <__copybits>:
   dc50e:	3901      	subs	r1, #1
   dc510:	b570      	push	{r4, r5, r6, lr}
   dc512:	1149      	asrs	r1, r1, #5
   dc514:	6914      	ldr	r4, [r2, #16]
   dc516:	3101      	adds	r1, #1
   dc518:	f102 0314 	add.w	r3, r2, #20
   dc51c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dc520:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dc524:	1f05      	subs	r5, r0, #4
   dc526:	42a3      	cmp	r3, r4
   dc528:	d30c      	bcc.n	dc544 <__copybits+0x36>
   dc52a:	1aa3      	subs	r3, r4, r2
   dc52c:	3b11      	subs	r3, #17
   dc52e:	f023 0303 	bic.w	r3, r3, #3
   dc532:	3211      	adds	r2, #17
   dc534:	42a2      	cmp	r2, r4
   dc536:	bf88      	it	hi
   dc538:	2300      	movhi	r3, #0
   dc53a:	4418      	add	r0, r3
   dc53c:	2300      	movs	r3, #0
   dc53e:	4288      	cmp	r0, r1
   dc540:	d305      	bcc.n	dc54e <__copybits+0x40>
   dc542:	bd70      	pop	{r4, r5, r6, pc}
   dc544:	f853 6b04 	ldr.w	r6, [r3], #4
   dc548:	f845 6f04 	str.w	r6, [r5, #4]!
   dc54c:	e7eb      	b.n	dc526 <__copybits+0x18>
   dc54e:	f840 3b04 	str.w	r3, [r0], #4
   dc552:	e7f4      	b.n	dc53e <__copybits+0x30>

000dc554 <__any_on>:
   dc554:	f100 0214 	add.w	r2, r0, #20
   dc558:	6900      	ldr	r0, [r0, #16]
   dc55a:	114b      	asrs	r3, r1, #5
   dc55c:	4298      	cmp	r0, r3
   dc55e:	b510      	push	{r4, lr}
   dc560:	db11      	blt.n	dc586 <__any_on+0x32>
   dc562:	dd0a      	ble.n	dc57a <__any_on+0x26>
   dc564:	f011 011f 	ands.w	r1, r1, #31
   dc568:	d007      	beq.n	dc57a <__any_on+0x26>
   dc56a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dc56e:	fa24 f001 	lsr.w	r0, r4, r1
   dc572:	fa00 f101 	lsl.w	r1, r0, r1
   dc576:	428c      	cmp	r4, r1
   dc578:	d10b      	bne.n	dc592 <__any_on+0x3e>
   dc57a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dc57e:	4293      	cmp	r3, r2
   dc580:	d803      	bhi.n	dc58a <__any_on+0x36>
   dc582:	2000      	movs	r0, #0
   dc584:	bd10      	pop	{r4, pc}
   dc586:	4603      	mov	r3, r0
   dc588:	e7f7      	b.n	dc57a <__any_on+0x26>
   dc58a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dc58e:	2900      	cmp	r1, #0
   dc590:	d0f5      	beq.n	dc57e <__any_on+0x2a>
   dc592:	2001      	movs	r0, #1
   dc594:	e7f6      	b.n	dc584 <__any_on+0x30>

000dc596 <__ascii_wctomb>:
   dc596:	b149      	cbz	r1, dc5ac <__ascii_wctomb+0x16>
   dc598:	2aff      	cmp	r2, #255	; 0xff
   dc59a:	bf85      	ittet	hi
   dc59c:	238a      	movhi	r3, #138	; 0x8a
   dc59e:	6003      	strhi	r3, [r0, #0]
   dc5a0:	700a      	strbls	r2, [r1, #0]
   dc5a2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dc5a6:	bf98      	it	ls
   dc5a8:	2001      	movls	r0, #1
   dc5aa:	4770      	bx	lr
   dc5ac:	4608      	mov	r0, r1
   dc5ae:	4770      	bx	lr

000dc5b0 <__aeabi_d2lz>:
   dc5b0:	b538      	push	{r3, r4, r5, lr}
   dc5b2:	2200      	movs	r2, #0
   dc5b4:	2300      	movs	r3, #0
   dc5b6:	4604      	mov	r4, r0
   dc5b8:	460d      	mov	r5, r1
   dc5ba:	f7fd fe47 	bl	da24c <__aeabi_dcmplt>
   dc5be:	b928      	cbnz	r0, dc5cc <__aeabi_d2lz+0x1c>
   dc5c0:	4620      	mov	r0, r4
   dc5c2:	4629      	mov	r1, r5
   dc5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc5c8:	f7fd bf2e 	b.w	da428 <__aeabi_d2ulz>
   dc5cc:	4620      	mov	r0, r4
   dc5ce:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dc5d2:	f7fd ff29 	bl	da428 <__aeabi_d2ulz>
   dc5d6:	4240      	negs	r0, r0
   dc5d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc5dc:	bd38      	pop	{r3, r4, r5, pc}
   dc5de:	bf00      	nop

000dc5e0 <dynalib_user>:
   dc5e0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dc5f0:	0000 0000 6341 6974 6576 5720 6165 2072     ....Active Wear 
   dc600:	7453 7461 6f69 006e 6341 6974 6576 5700     Station.Active.W
   dc610:	6165 0072 7553 6767 7365 6974 6e6f 2f00     ear.Suggestion./
   dc620:	6547 5774 6165 6874 7265 6f46 6572 6163     GetWeatherForeca
   dc630:	7473 002f 6548 7461 4920 646e 7865 7365     st/.Heat Indexes
   dc640:	4900 206e 6e49 6564 3a78 4600 4f00 7475     .In Index:.F.Out
   dc650:	4920 646e 7865 003a 6146 6c69 6465 7420      Index:.Failed t
   dc660:	206f 6572 6461 6620 6f72 206d 4844 2054     o read from DHT 
   dc670:	6573 736e 726f 4700 7465 6557 7461 6568     sensor.GetWeathe
   dc680:	4672 726f 6365 7361 0074 6e49 6f64 726f     rForecast.Indoor
   dc690:	5420 6d65 0070 6e49 6f64 726f 4820 6d75      Temp.Indoor Hum
   dc6a0:	6469 7469 0079 754f 6474 6f6f 2072 6554     idity.Outdoor Te
   dc6b0:	706d 4f00 7475 6f64 726f 4820 6d75 6469     mp.Outdoor Humid
   dc6c0:	7469 0079 6e49 6f64 726f 4820 6165 2074     ity.Indoor Heat 
   dc6d0:	6e49 6564 0078 754f 6474 6f6f 2072 6548     Index.Outdoor He
   dc6e0:	7461 4920 646e 7865 7300 6275 6373 6972     at Index.subscri
   dc6f0:	7470 6f69 486e 6e61 6c64 7265 2520 0073     ptionHandler %s.
   dc700:	6574 706d 6800 6d75 7700 6265 6f68 6b6f     temp.hum.webhook
   dc710:	5500 6962 6f64 7374                          .Ubidots.

000dc719 <_ZL9BasicFont>:
	...
   dc721:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   dc731:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   dc741:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   dc751:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   dc761:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   dc771:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   dc781:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   dc791:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   dc7a1:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   dc7b1:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   dc7c1:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   dc7d1:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   dc7e1:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   dc7f1:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   dc801:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   dc811:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   dc821:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   dc831:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   dc841:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   dc851:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   dc861:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   dc871:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   dc881:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   dc891:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   dc8a1:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   dc8b1:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   dc8c1:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   dc8d1:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   dc8e1:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   dc8f1:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   dc901:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   dc911:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   dc921:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   dc931:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   dc941:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   dc951:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   dc961:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   dc971:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   dc981:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   dc991:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   dc9a1:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   dc9b1:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   dc9c1:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   dc9d1:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   dc9e1:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   dc9f1:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   dca01:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   dca11:	0200 0505 0002 0000 6255 6469 746f 5073     ........UbidotsP
   dca21:	7261 6974 6c63 2f65 2e33 0032 7254 6979     article/3.2.Tryi
   dca31:	676e 7420 206f 6f63 6e6e 6365 2074 6f74     ng to connect to
   dca41:	0020 2c20 6120 7474 6d65 7470 6e20 6d75      . , attempt num
   dca51:	6562 3a72 0020 7441 6574 706d 2074 6966     ber: .Attempt fi
   dca61:	696e 6873 6465 5300 7265 6576 2772 2073     nished.Server's 
   dca71:	6572 7073 6e6f 6573 003a 2d0a 2d2d 2d2d     response:..-----
   dca81:	2d2d 2d2d 002d 6974 656d 756f 2c74 6320     -----.timeout, c
   dca91:	756f 646c 6e20 746f 7220 6165 2064 6e61     ould not read an
   dcaa1:	2079 6572 7073 6e6f 6573 6620 6f72 206d     y response from 
   dcab1:	6874 2065 6f68 7473 5000 534f 2054 612f     the host.POST /a
   dcac1:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   dcad1:	2000 5448 5054 312f 312e 0a0d 4800 736f     . HTTP/1.1...Hos
   dcae1:	3a74 0020 7355 7265 412d 6567 746e 203a     t: .User-Agent: 
   dcaf1:	5800 412d 7475 2d68 6f54 656b 3a6e 0020     .X-Auth-Token: .
   dcb01:	6f43 6e6e 6365 6974 6e6f 203a 6c63 736f     Connection: clos
   dcb11:	0d65 000a 6f43 746e 6e65 2d74 7954 6570     e...Content-Type
   dcb21:	203a 7061 6c70 6369 7461 6f69 2f6e 736a     : application/js
   dcb31:	6e6f 0a0d 4300 6e6f 6574 746e 4c2d 6e65     on...Content-Len
   dcb41:	7467 3a68 0020 614d 696b 676e 7220 7165     gth: .Making req
   dcb51:	6575 7473 7420 206f 6255 6469 746f 3a73     uest to Ubidots:
   dcb61:	000a 6177 7469 6e69 2067 6f66 2072 6573     ..waiting for se
   dcb71:	7672 7265 6120 736e 6577 2072 2e2e 002e     rver answer ....
   dcb81:	550a 6962 6f64 7374 2027 6553 7672 7265     .Ubidots' Server
   dcb91:	7220 7365 6f70 736e 3a65 000a 6f43 6c75      response:..Coul
   dcba1:	2064 6f6e 2074 6573 646e 6420 7461 2061     d not send data 
   dcbb1:	6f74 7520 6962 6f64 7374 7520 6973 676e     to ubidots using
   dcbc1:	4820 5454 0050 4547 2054 612f 6970 762f      HTTP.GET /api/v
   dcbd1:	2e31 2f36 6564 6976 6563 2f73 2f00 766c     1.6/devices/./lv
   dcbe1:	4300 6e6f 6574 746e 542d 7079 3a65 6120     .Content-Type: a
   dcbf1:	7070 696c 6163 6974 6e6f 6a2f 6f73 0d6e     pplication/json.
   dcc01:	0d0a 000a 6f43 6e6e 6365 6974 6e6f 4620     ....Connection F
   dcc11:	6961 656c 2064 6275 6469 746f 2073 202d     ailed ubidots - 
   dcc21:	7254 2079 6741 6961 006e                     Try Again..

000dcc2c <_ZTV7UbiHTTP>:
	...
   dcc34:	5901 000d 5b31 000d 56ad 000d 56b1 000d     .Y..1[...V...V..

000dcc44 <_ZTV11UbiParticle>:
	...
   dcc4c:	5d51 000d 5d31 000d 5d3d 000d 5d41 000d     Q]..1]..=]..A]..
   dcc5c:	6f59 2075 7261 2065 6573 646e 6e69 2067     You are sending 
   dcc6c:	6f6d 6572 7420 6168 206e 6874 2065 616d     more than the ma
   dcc7c:	6978 756d 206d 666f 6320 6e6f 6573 7563     ximum of consecu
   dcc8c:	6974 6576 7620 7261 6169 6c62 7365 2500     tive variables.%
   dcc9c:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   dccac:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   dccbc:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   dcccc:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   dccdc:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   dccec:	2500 2c73 7000 7961 6f6c 6461 003a 7325     .%s,.payload:.%s
   dccfc:	507c 534f 7c54 7325 007c 7325 7325 253a     |POST|%s|.%s%s:%
   dcd0c:	0073 7325 3e3d 2500 2473 7325 2500 4073     s.%s=>.%s$%s.%s@
   dcd1c:	6c25 0075 7325 657c 646e 5300 6e65 6964     %lu.%s|end.Sendi
   dcd2c:	676e 6420 7461 2e61 2e2e 4100 7474 6d65     ng data....Attem
   dcd3c:	7470 6e69 2067 6f74 7220 6365 6e6f 656e     pting to reconne
   dcd4c:	7463 7c00 564c 007c 6150 6c79 616f 2064     ct.|LV|.Payload 
   dcd5c:	6f66 2072 6572 7571 7365 3a74 0a00 2d2d     for request:..--
   dcd6c:	2d2d 5000 534f 0054 4b4f 4300 756f 646c     --.POST.OK.Could
   dcd7c:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   dcd8c:	6874 2065 6f68 7473 4c00 0056 5245 4f52     the host.LV.ERRO
   dcd9c:	2052 6f63 6c75 2064 6f6e 2074 6f63 6e6e     R could not conn
   dcdac:	6365 2074 6f74 7420 6568 7320 7265 6576     ect to the serve
   dcdbc:	0072 756e 6c6c 4500 5252 524f 0000 0000     r.null.ERROR....

000dcdcc <_ZTV6UbiTCP>:
	...
   dcdd4:	6621 000d 66c5 000d 6371 000d 6921 000d     !f...f..qc..!i..
   dcde4:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   dcdf4:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   dce04:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   dce14:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   dce24:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   dce34:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   dce44:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   dce54:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   dce64:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   dce74:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   dce84:	7720 7469 2068 4455 0050 0000                with UDP...

000dce90 <_ZTV6UbiUDP>:
	...
   dce98:	6aa1 000d 6a29 000d 6a35 000d 6a39 000d     .j..)j..5j..9j..
   dcea8:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   dceb8:	6962 6f64 7374 632e 6d6f 0000               bidots.com..

000dcec4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000dcecc <_ZTVN5spark13CellularClassE>:
	...
   dced4:	729f 000d 7295 000d 728b 000d 7241 000d     .r...r...r..Ar..
   dcee4:	727f 000d 7273 000d 7f75 000d 7f7d 000d     .r..sr..u...}...
   dcef4:	7267 000d 725f 000d 7255 000d 724b 000d     gr.._r..Ur..Kr..
   dcf04:	7fad 000d                                   ....

000dcf08 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcf10:	72d9 000d 72df 000d 731d 000d 72ed 000d     .r...r...s...r..
   dcf20:	72db 000d                                   .r..

000dcf24 <_ZTVN5spark13EthernetClassE>:
	...
   dcf2c:	786f 000d 7865 000d 785b 000d 7851 000d     ox..ex..[x..Qx..
   dcf3c:	7845 000d 7839 000d 7f75 000d 7f7d 000d     Ex..9x..u...}...
   dcf4c:	782d 000d 7825 000d 781b 000d 7811 000d     -x..%x...x...x..
   dcf5c:	7fad 000d                                   ....

000dcf60 <_ZTV7TwoWire>:
	...
   dcf68:	788d 000d 78d7 000d 78af 000d 788f 000d     .x...x...x...x..
   dcf78:	78b7 000d 78bf 000d 78c7 000d 78cf 000d     .x...x...x...x..

000dcf88 <_ZTV9IPAddress>:
	...
   dcf90:	7949 000d 7939 000d 793b 000d               Iy..9y..;y..

000dcf9c <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcfa4:	7a97 000d 7a9d 000d 7ab3 000d 7aab 000d     .z...z...z...z..
   dcfb4:	7a99 000d 7061 0070                         .z..app.

000dcfbc <_ZTVN5spark12NetworkClassE>:
	...
   dcfc4:	7f35 000d 7f3f 000d 7f49 000d 7f53 000d     5...?...I...S...
   dcfd4:	7f5d 000d 7f69 000d 7f75 000d 7f7d 000d     ]...i...u...}...
   dcfe4:	7f85 000d 7f91 000d 7f99 000d 7fa3 000d     ................
   dcff4:	7fad 000d 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.
   dd004:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   dd014:	2072 203d 6425 0000                         r = %d..

000dd01c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd024:	8687 000d 86a9 000d 8a87 000d 86b7 000d     ................
   dd034:	8689 000d                                   ....

000dd038 <_ZTV9TCPClient>:
	...
   dd040:	5349 000d 53d9 000d 8605 000d 861f 000d     IS...S..........
   dd050:	8911 000d 8783 000d 8755 000d 8649 000d     ........U...I...
   dd060:	881b 000d 8aad 000d 87b7 000d 89c5 000d     ................
   dd070:	864b 000d 867d 000d 8631 000d 86bb 000d     K...}...1.......
   dd080:	8735 000d 5925 252d 2d6d 6425 2554 3a48     5...%Y-%m-%dT%H:
   dd090:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000dd0a0 <_ZTV3UDP>:
	...
   dd0a8:	5329 000d 53ed 000d 8bdd 000d 8d05 000d     )S...S..........
   dd0b8:	8bd5 000d 8bf5 000d 8c13 000d 8c2d 000d     ............-...
   dd0c8:	8c51 000d 8ce9 000d 8e4f 000d 8d8d 000d     Q.......O.......
   dd0d8:	90a9 000d 8bbd 000d 8f39 000d 9031 000d     ........9...1...
   dd0e8:	8dc5 000d 8f67 000d 8d2f 000d 8bcb 000d     ....g.../.......
   dd0f8:	8d6d 000d 8bd1 000d 8c2f 000d fff0 ffff     m......./.......
   dd108:	0000 0000 8c49 000d                         ....I...

000dd110 <_ZTV11USARTSerial>:
	...
   dd118:	9141 000d 91ad 000d 9185 000d 80a1 000d     A...............
   dd128:	9155 000d 9171 000d 9163 000d 917f 000d     U...q...c.......
   dd138:	9143 000d 9147 000d                         C...G...

000dd140 <_ZTV9USBSerial>:
	...
   dd148:	9241 000d 92a9 000d 927f 000d 80a1 000d     A...............
   dd158:	9271 000d 9243 000d 9253 000d 92a3 000d     q...C...S.......
   dd168:	9263 000d 923d 000d                         c...=...

000dd170 <_ZSt7nothrow>:
	...

000dd171 <_ZTSSt19_Sp_make_shared_tag>:
   dd171:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   dd181:	6572 5f64 6174 0067 0000                     red_tag....

000dd18c <_ZTISt19_Sp_make_shared_tag>:
   dd18c:	d1cc 000d d171 000d                         ....q...

000dd194 <_ZTIN10__cxxabiv117__class_type_infoE>:
   dd194:	d22c 000d d1a0 000d d250 000d               ,.......P...

000dd1a0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   dd1a0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   dd1b0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   dd1c0:	0045 0000                                   E...

000dd1c4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   dd1c4:	0000 0000 d194 000d 9805 000d 9819 000d     ................
   dd1d4:	99ad 000d 99ad 000d 9883 000d 97c5 000d     ................
   dd1e4:	986b 000d 982d 000d 97f9 000d               k...-.......

000dd1f0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   dd1f0:	d22c 000d d1fc 000d d194 000d               ,...........

000dd1fc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dd1fc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   dd20c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   dd21c:	666e 456f 0000 0000                         nfoE....

000dd224 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dd224:	0000 0000 d1f0 000d 98ad 000d 98c1 000d     ................
   dd234:	99ad 000d 99ad 000d 9883 000d 97c5 000d     ................
   dd244:	9981 000d 990d 000d 98d5 000d               ............

000dd250 <_ZTISt9type_info>:
   dd250:	d1cc 000d d258 000d                         ....X...

000dd258 <_ZTSSt9type_info>:
   dd258:	7453 7439 7079 5f65 6e69 6f66 6900 696e     St9type_info.ini
   dd268:	7974 0000                                   ty..

000dd26c <fpi.7566>:
   dd26c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dd27c:	0000 0000                                   ....

000dd280 <fpinan.7602>:
   dd280:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dd298 <tinytens>:
   dd298:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dd2a8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dd2b8:	6f43 64ac 0628 1168                         Co.d(.h.

000dd2c0 <_ctype_>:
   dd2c0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd2d0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd2e0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd2f0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd300:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd310:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd320:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd330:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd340:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd3c4 <_C_numeric_locale>:
   dd3c4:	cb7f 000d cc04 000d e2d0 2003 0043 4f50     ........... C.PO
   dd3d4:	4953 0058                                   SIX.

000dd3d8 <__mprec_bigtens>:
   dd3d8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dd3e8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dd3f8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dd400 <__mprec_tens>:
   dd400:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dd410:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dd420:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dd430:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dd440:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dd450:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dd460:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dd470:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dd480:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dd490:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dd4a0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dd4b0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dd4c0:	9db4 79d9 7843 44ea                         ...yCx.D

000dd4c8 <p05.7490>:
   dd4c8:	0005 0000 0019 0000 007d 0000               ........}...

000dd4d4 <link_const_variable_data_end>:
   dd4d4:	000d4979 	.word	0x000d4979
   dd4d8:	000d5659 	.word	0x000d5659
   dd4dc:	000d5d0d 	.word	0x000d5d0d
   dd4e0:	000d6311 	.word	0x000d6311
   dd4e4:	000d6a05 	.word	0x000d6a05
   dd4e8:	000d6a69 	.word	0x000d6a69
   dd4ec:	000d7219 	.word	0x000d7219
   dd4f0:	000d72a9 	.word	0x000d72a9
   dd4f4:	000d7879 	.word	0x000d7879
   dd4f8:	000d7f25 	.word	0x000d7f25
   dd4fc:	000d808d 	.word	0x000d808d
   dd500:	000d831d 	.word	0x000d831d
   dd504:	000d85c9 	.word	0x000d85c9
   dd508:	000d8ba9 	.word	0x000d8ba9

000dd50c <link_constructors_end>:
   dd50c:	00000000 	.word	0x00000000
