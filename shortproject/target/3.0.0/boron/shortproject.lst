
/Users/talalagedeon/Desktop/particlePDP/shortproject/target/3.0.0/boron/shortproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c80  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9ca0  000d9ca0  00009ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9ca8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  2003e408  000d9cac  0001e408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  2003e5ec  2003e5ec  0002e5ec  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d9e90  000d9e90  00029e90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d9eb8  000d9eb8  00029eb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001b099a  00000000  00000000  00029ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001a06d  00000000  00000000  001da856  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003b0c9  00000000  00000000  001f48c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002e60  00000000  00000000  0022f98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009b78  00000000  00000000  002327ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b33f  00000000  00000000  0023c364  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004431e  00000000  00000000  002776a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012c33e  00000000  00000000  002bb9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008b24  00000000  00000000  003e7d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fb6b 	bl	d770c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fb8d 	bl	d775c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e408 	.word	0x2003e408
   d404c:	000d9cac 	.word	0x000d9cac
   d4050:	2003e5ec 	.word	0x2003e5ec
   d4054:	2003e5ec 	.word	0x2003e5ec
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fbeb 	bl	d683c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9c7c 	.word	0x000d9c7c
   d4080:	000d9ca0 	.word	0x000d9ca0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82e 	b.w	d40e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f90f 	bl	d42ac <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bb95 	b.w	d67c0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 b8d3 	b.w	d5240 <malloc>

000d409a <_Znaj>:
   d409a:	f001 b8d1 	b.w	d5240 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 b8d7 	b.w	d5250 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 b8d5 	b.w	d5250 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40b6:	b40e      	push	{r1, r2, r3}
   d40b8:	b510      	push	{r4, lr}
   d40ba:	b08d      	sub	sp, #52	; 0x34
   d40bc:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d40be:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d40c0:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d40c4:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40c6:	2300      	movs	r3, #0
   d40c8:	2020      	movs	r0, #32
   d40ca:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40ce:	e9cd 4200 	strd	r4, r2, [sp]
   d40d2:	201e      	movs	r0, #30
   d40d4:	aa04      	add	r2, sp, #16
   d40d6:	f000 ffef 	bl	d50b8 <log_message_v>
}
   d40da:	b00d      	add	sp, #52	; 0x34
   d40dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40e0:	b003      	add	sp, #12
   d40e2:	4770      	bx	lr

000d40e4 <setup>:

float tempOutdoor = -100;
float humidityOutdoor = -1; 


void setup() {
   d40e4:	b510      	push	{r4, lr}
   d40e6:	b08a      	sub	sp, #40	; 0x28
  Serial.begin(9600);
   d40e8:	f002 fae2 	bl	d66b0 <_Z16_fetch_usbserialv>
   d40ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40f0:	f002 fad2 	bl	d6698 <_ZN9USBSerial5beginEl>
  Serial.println("DHT11 test");
   d40f4:	f002 fadc 	bl	d66b0 <_Z16_fetch_usbserialv>
   d40f8:	4927      	ldr	r1, [pc, #156]	; (d4198 <setup+0xb4>)
  
  dht.begin();
  leds.init();

  Wire.begin();
  SeeedOled.init();
   d40fa:	4c28      	ldr	r4, [pc, #160]	; (d419c <setup+0xb8>)
  Serial.println("DHT11 test");
   d40fc:	f002 f863 	bl	d61c6 <_ZN5Print7printlnEPKc>
  dht.begin();
   d4100:	4827      	ldr	r0, [pc, #156]	; (d41a0 <setup+0xbc>)
   d4102:	f000 fa95 	bl	d4630 <_ZN3DHT5beginEv>
  leds.init();
   d4106:	4827      	ldr	r0, [pc, #156]	; (d41a4 <setup+0xc0>)
   d4108:	f000 fd76 	bl	d4bf8 <_ZN12ChainableLED4initEv>
  Wire.begin();
   d410c:	f002 fc48 	bl	d69a0 <_Z19__fetch_global_Wirev>
   d4110:	f001 fc78 	bl	d5a04 <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   d4114:	4620      	mov	r0, r4
   d4116:	f000 fda5 	bl	d4c64 <_ZN9SeeedOLED4initEv>

  SeeedOled.clearDisplay();
   d411a:	4620      	mov	r0, r4
   d411c:	f000 fe04 	bl	d4d28 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d4120:	4620      	mov	r0, r4
   d4122:	f000 fe66 	bl	d4df2 <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d4126:	4620      	mov	r0, r4
   d4128:	f000 fdae 	bl	d4c88 <_ZN9SeeedOLED11setPageModeEv>

  SeeedOled.setTextXY(2, 0);
   d412c:	2200      	movs	r2, #0
   d412e:	4620      	mov	r0, r4
   d4130:	2102      	movs	r1, #2
   d4132:	f000 fdb4 	bl	d4c9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Particle");
   d4136:	4620      	mov	r0, r4
   d4138:	491b      	ldr	r1, [pc, #108]	; (d41a8 <setup+0xc4>)
   d413a:	f000 fe16 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d413e:	2200      	movs	r2, #0
   d4140:	4620      	mov	r0, r4
   d4142:	2103      	movs	r1, #3
   d4144:	f000 fdab 	bl	d4c9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Weather");
   d4148:	4620      	mov	r0, r4
   d414a:	4918      	ldr	r1, [pc, #96]	; (d41ac <setup+0xc8>)
   d414c:	f000 fe0d 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4150:	2200      	movs	r2, #0
   d4152:	4620      	mov	r0, r4
   d4154:	2104      	movs	r1, #4
   d4156:	f000 fda2 	bl	d4c9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Station");
   d415a:	4915      	ldr	r1, [pc, #84]	; (d41b0 <setup+0xcc>)
   d415c:	4620      	mov	r0, r4
   d415e:	f000 fe04 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4162:	a802      	add	r0, sp, #8
   d4164:	f000 ffec 	bl	d5140 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4168:	a902      	add	r1, sp, #8
   d416a:	a806      	add	r0, sp, #24
   d416c:	f002 f92a 	bl	d63c4 <_ZN6StringC1ERKS_>

  Particle.subscribe(System.deviceID() + "/GetWeatherForecast/", setCurrentWeather, MY_DEVICES);
   d4170:	4910      	ldr	r1, [pc, #64]	; (d41b4 <setup+0xd0>)
   d4172:	a806      	add	r0, sp, #24
   d4174:	f002 f974 	bl	d6460 <_ZplRK15StringSumHelperPKc>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4178:	2300      	movs	r3, #0
   d417a:	e9cd 3300 	strd	r3, r3, [sp]
   d417e:	490e      	ldr	r1, [pc, #56]	; (d41b8 <setup+0xd4>)
   d4180:	6800      	ldr	r0, [r0, #0]
   d4182:	461a      	mov	r2, r3
   d4184:	f000 ffec 	bl	d5160 <spark_subscribe>
class StringSumHelper : public String
   d4188:	a806      	add	r0, sp, #24
   d418a:	f002 f8c1 	bl	d6310 <_ZN6StringD1Ev>
   d418e:	a802      	add	r0, sp, #8
   d4190:	f002 f8be 	bl	d6310 <_ZN6StringD1Ev>
}
   d4194:	b00a      	add	sp, #40	; 0x28
   d4196:	bd10      	pop	{r4, pc}
   d4198:	000d9488 	.word	0x000d9488
   d419c:	2003e618 	.word	0x2003e618
   d41a0:	2003e5f4 	.word	0x2003e5f4
   d41a4:	2003e608 	.word	0x2003e608
   d41a8:	000d9493 	.word	0x000d9493
   d41ac:	000d949c 	.word	0x000d949c
   d41b0:	000d94a4 	.word	0x000d94a4
   d41b4:	000d94ac 	.word	0x000d94ac
   d41b8:	000d4429 	.word	0x000d4429

000d41bc <_Z13updateDisplayiiii>:
        }
    }}


void updateDisplay (int temp, int humidity, int tempOutdoor , int humidityOutdoor)
{
   d41bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SeeedOled.clearDisplay(), 
   d41c0:	4c28      	ldr	r4, [pc, #160]	; (d4264 <_Z13updateDisplayiiii+0xa8>)
{
   d41c2:	4680      	mov	r8, r0
  SeeedOled.clearDisplay(), 
   d41c4:	4620      	mov	r0, r4
{
   d41c6:	461d      	mov	r5, r3
   d41c8:	460f      	mov	r7, r1
   d41ca:	4616      	mov	r6, r2
  SeeedOled.clearDisplay(), 
   d41cc:	f000 fdac 	bl	d4d28 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setTextXY(1, 0);
   d41d0:	2200      	movs	r2, #0
   d41d2:	4620      	mov	r0, r4
   d41d4:	2101      	movs	r1, #1
   d41d6:	f000 fd62 	bl	d4c9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Indoor Temp: ");
   d41da:	4620      	mov	r0, r4
   d41dc:	4922      	ldr	r1, [pc, #136]	; (d4268 <_Z13updateDisplayiiii+0xac>)
   d41de:	f000 fdc4 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(temp);
   d41e2:	4641      	mov	r1, r8
  SeeedOled.putString("F");
   d41e4:	f8df 8094 	ldr.w	r8, [pc, #148]	; d427c <_Z13updateDisplayiiii+0xc0>
  SeeedOled.putNumber(temp);
   d41e8:	4620      	mov	r0, r4
   d41ea:	f000 fdcb 	bl	d4d84 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("F");
   d41ee:	4641      	mov	r1, r8
   d41f0:	4620      	mov	r0, r4
   d41f2:	f000 fdba 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(2, 0);
   d41f6:	2200      	movs	r2, #0
   d41f8:	4620      	mov	r0, r4
   d41fa:	2102      	movs	r1, #2
   d41fc:	f000 fd4f 	bl	d4c9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Indoor Humd: ");
   d4200:	4620      	mov	r0, r4
   d4202:	491a      	ldr	r1, [pc, #104]	; (d426c <_Z13updateDisplayiiii+0xb0>)
   d4204:	f000 fdb1 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidity);
   d4208:	4639      	mov	r1, r7
  SeeedOled.putString("%");
   d420a:	4f19      	ldr	r7, [pc, #100]	; (d4270 <_Z13updateDisplayiiii+0xb4>)
  SeeedOled.putNumber(humidity);
   d420c:	4620      	mov	r0, r4
   d420e:	f000 fdb9 	bl	d4d84 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
   d4212:	4639      	mov	r1, r7
   d4214:	4620      	mov	r0, r4
   d4216:	f000 fda8 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(4, 0);
   d421a:	2200      	movs	r2, #0
   d421c:	4620      	mov	r0, r4
   d421e:	2104      	movs	r1, #4
   d4220:	f000 fd3d 	bl	d4c9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Otdoor Temp: ");
   d4224:	4620      	mov	r0, r4
   d4226:	4913      	ldr	r1, [pc, #76]	; (d4274 <_Z13updateDisplayiiii+0xb8>)
   d4228:	f000 fd9f 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(tempOutdoor);
   d422c:	4631      	mov	r1, r6
   d422e:	4620      	mov	r0, r4
   d4230:	f000 fda8 	bl	d4d84 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("F");
   d4234:	4641      	mov	r1, r8
   d4236:	4620      	mov	r0, r4
   d4238:	f000 fd97 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(5, 0);
   d423c:	2200      	movs	r2, #0
   d423e:	4620      	mov	r0, r4
   d4240:	2105      	movs	r1, #5
   d4242:	f000 fd2c 	bl	d4c9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Otdoor Humd: ");
   d4246:	4620      	mov	r0, r4
   d4248:	490b      	ldr	r1, [pc, #44]	; (d4278 <_Z13updateDisplayiiii+0xbc>)
   d424a:	f000 fd8e 	bl	d4d6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidityOutdoor);
   d424e:	4629      	mov	r1, r5
   d4250:	4620      	mov	r0, r4
   d4252:	f000 fd97 	bl	d4d84 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
   d4256:	4639      	mov	r1, r7
   d4258:	4620      	mov	r0, r4

   d425a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SeeedOled.putString("%");
   d425e:	f000 bd84 	b.w	d4d6a <_ZN9SeeedOLED9putStringEPKc>
   d4262:	bf00      	nop
   d4264:	2003e618 	.word	0x2003e618
   d4268:	000d94c1 	.word	0x000d94c1
   d426c:	000d94cf 	.word	0x000d94cf
   d4270:	000d94dd 	.word	0x000d94dd
   d4274:	000d94df 	.word	0x000d94df
   d4278:	000d94ed 	.word	0x000d94ed
   d427c:	000d9531 	.word	0x000d9531

000d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4280:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4282:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4284:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4286:	b17c      	cbz	r4, d42a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4288:	6863      	ldr	r3, [r4, #4]
   d428a:	3b01      	subs	r3, #1
   d428c:	6063      	str	r3, [r4, #4]
   d428e:	b95b      	cbnz	r3, d42a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4290:	6823      	ldr	r3, [r4, #0]
   d4292:	4620      	mov	r0, r4
   d4294:	689b      	ldr	r3, [r3, #8]
   d4296:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4298:	68a3      	ldr	r3, [r4, #8]
   d429a:	3b01      	subs	r3, #1
   d429c:	60a3      	str	r3, [r4, #8]
   d429e:	b91b      	cbnz	r3, d42a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42a0:	6823      	ldr	r3, [r4, #0]
   d42a2:	4620      	mov	r0, r4
   d42a4:	68db      	ldr	r3, [r3, #12]
   d42a6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d42a8:	4628      	mov	r0, r5
   d42aa:	bd38      	pop	{r3, r4, r5, pc}

000d42ac <loop>:
void loop() {
   d42ac:	b510      	push	{r4, lr}
   d42ae:	ed2d 8b02 	vpush	{d8}
  delay(50000);
   d42b2:	f24c 3050 	movw	r0, #50000	; 0xc350
void loop() {
   d42b6:	b088      	sub	sp, #32
  delay(50000);
   d42b8:	f000 fff2 	bl	d52a0 <delay>
  float humidity = dht.getHumidity();
   d42bc:	484a      	ldr	r0, [pc, #296]	; (d43e8 <loop+0x13c>)
  if (millis() - lastPublish >= publishPeriod) {
   d42be:	4c4b      	ldr	r4, [pc, #300]	; (d43ec <loop+0x140>)
  float humidity = dht.getHumidity();
   d42c0:	f000 fbe6 	bl	d4a90 <_ZN3DHT11getHumidityEv>
  float temp = dht.getTempFarenheit();
   d42c4:	4848      	ldr	r0, [pc, #288]	; (d43e8 <loop+0x13c>)
  float humidity = dht.getHumidity();
   d42c6:	eef0 8a40 	vmov.f32	s17, s0
  float temp = dht.getTempFarenheit();
   d42ca:	f000 fba3 	bl	d4a14 <_ZN3DHT16getTempFarenheitEv>
   d42ce:	eeb0 8a40 	vmov.f32	s16, s0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42d2:	f000 fdb1 	bl	d4e38 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastPublish >= publishPeriod) {
   d42d6:	6823      	ldr	r3, [r4, #0]
   d42d8:	1ac0      	subs	r0, r0, r3
   d42da:	4b45      	ldr	r3, [pc, #276]	; (d43f0 <loop+0x144>)
   d42dc:	4298      	cmp	r0, r3
   d42de:	d90f      	bls.n	d4300 <loop+0x54>
   d42e0:	f000 fdaa 	bl	d4e38 <HAL_Timer_Get_Milli_Seconds>
   d42e4:	4b43      	ldr	r3, [pc, #268]	; (d43f4 <loop+0x148>)
    lastPublish = millis();
   d42e6:	6020      	str	r0, [r4, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d42e8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42ea:	f88d 3000 	strb.w	r3, [sp]
   d42ee:	a804      	add	r0, sp, #16
   d42f0:	4941      	ldr	r1, [pc, #260]	; (d43f8 <loop+0x14c>)
   d42f2:	233c      	movs	r3, #60	; 0x3c
   d42f4:	2200      	movs	r2, #0
   d42f6:	f001 f993 	bl	d5620 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42fa:	a805      	add	r0, sp, #20
   d42fc:	f7ff ffc0 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (isnan(humidity) || isnan(temp)){
   d4300:	eef4 8a68 	vcmp.f32	s17, s17
   d4304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4308:	d604      	bvs.n	d4314 <loop+0x68>
   d430a:	eeb4 8a48 	vcmp.f32	s16, s16
   d430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4312:	d708      	bvc.n	d4326 <loop+0x7a>
    Serial.println("Failed to read from DHT sensor");
   d4314:	f002 f9cc 	bl	d66b0 <_Z16_fetch_usbserialv>
   d4318:	4938      	ldr	r1, [pc, #224]	; (d43fc <loop+0x150>)
   d431a:	f001 ff54 	bl	d61c6 <_ZN5Print7printlnEPKc>
}
   d431e:	b008      	add	sp, #32
   d4320:	ecbd 8b02 	vpop	{d8}
   d4324:	bd10      	pop	{r4, pc}
  if (temp > tempOutdoor){
   d4326:	4c36      	ldr	r4, [pc, #216]	; (d4400 <loop+0x154>)
   d4328:	edd4 7a00 	vldr	s15, [r4]
   d432c:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4334:	d506      	bpl.n	d4344 <loop+0x98>
  leds.setColorRGB(0,255,0,0);
   d4336:	2300      	movs	r3, #0
   d4338:	4832      	ldr	r0, [pc, #200]	; (d4404 <loop+0x158>)
   d433a:	9300      	str	r3, [sp, #0]
   d433c:	22ff      	movs	r2, #255	; 0xff
   d433e:	4619      	mov	r1, r3
   d4340:	f000 fc12 	bl	d4b68 <_ZN12ChainableLED11setColorRGBEhhhh>
  if (temp < tempOutdoor){
   d4344:	edd4 7a00 	vldr	s15, [r4]
   d4348:	eef4 7ac8 	vcmpe.f32	s15, s16
   d434c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4350:	dd07      	ble.n	d4362 <loop+0xb6>
    leds.setColorRGB(0,0,0,255);
   d4352:	23ff      	movs	r3, #255	; 0xff
   d4354:	9300      	str	r3, [sp, #0]
   d4356:	2300      	movs	r3, #0
   d4358:	482a      	ldr	r0, [pc, #168]	; (d4404 <loop+0x158>)
   d435a:	461a      	mov	r2, r3
   d435c:	4619      	mov	r1, r3
   d435e:	f000 fc03 	bl	d4b68 <_ZN12ChainableLED11setColorRGBEhhhh>
  updateDisplay(temp, humidity, tempOutdoor, humidityOutdoor);
   d4362:	edd4 7a00 	vldr	s15, [r4]
   d4366:	4b28      	ldr	r3, [pc, #160]	; (d4408 <loop+0x15c>)
   d4368:	4c28      	ldr	r4, [pc, #160]	; (d440c <loop+0x160>)
   d436a:	ed93 7a00 	vldr	s14, [r3]
   d436e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4372:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   d4376:	ee17 2a90 	vmov	r2, s15
   d437a:	eefd 7ae8 	vcvt.s32.f32	s15, s17
   d437e:	ee17 3a10 	vmov	r3, s14
   d4382:	ee17 1a90 	vmov	r1, s15
   d4386:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d438a:	ee17 0a90 	vmov	r0, s15
   d438e:	f7ff ff15 	bl	d41bc <_Z13updateDisplayiiii>
  Particle.publish("tempF",String (temp));
   d4392:	eeb0 0a48 	vmov.f32	s0, s16
   d4396:	2106      	movs	r1, #6
   d4398:	a804      	add	r0, sp, #16
   d439a:	f002 f830 	bl	d63fe <_ZN6StringC1Efi>
   d439e:	7823      	ldrb	r3, [r4, #0]
   d43a0:	9a04      	ldr	r2, [sp, #16]
   d43a2:	491b      	ldr	r1, [pc, #108]	; (d4410 <loop+0x164>)
   d43a4:	f88d 3000 	strb.w	r3, [sp]
   d43a8:	a802      	add	r0, sp, #8
   d43aa:	233c      	movs	r3, #60	; 0x3c
   d43ac:	f001 f938 	bl	d5620 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43b0:	a803      	add	r0, sp, #12
   d43b2:	f7ff ff65 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43b6:	a804      	add	r0, sp, #16
   d43b8:	f001 ffaa 	bl	d6310 <_ZN6StringD1Ev>
  Particle.publish("humid", String (humidity));
   d43bc:	eeb0 0a68 	vmov.f32	s0, s17
   d43c0:	2106      	movs	r1, #6
   d43c2:	a804      	add	r0, sp, #16
   d43c4:	f002 f81b 	bl	d63fe <_ZN6StringC1Efi>
   d43c8:	7823      	ldrb	r3, [r4, #0]
   d43ca:	9a04      	ldr	r2, [sp, #16]
   d43cc:	4911      	ldr	r1, [pc, #68]	; (d4414 <loop+0x168>)
   d43ce:	f88d 3000 	strb.w	r3, [sp]
   d43d2:	a802      	add	r0, sp, #8
   d43d4:	233c      	movs	r3, #60	; 0x3c
   d43d6:	f001 f923 	bl	d5620 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43da:	a803      	add	r0, sp, #12
   d43dc:	f7ff ff50 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43e0:	a804      	add	r0, sp, #16
   d43e2:	f001 ff95 	bl	d6310 <_ZN6StringD1Ev>
   d43e6:	e79a      	b.n	d431e <loop+0x72>
   d43e8:	2003e5f4 	.word	0x2003e5f4
   d43ec:	2003e408 	.word	0x2003e408
   d43f0:	000dbb9f 	.word	0x000dbb9f
   d43f4:	2003e5f1 	.word	0x2003e5f1
   d43f8:	000d94fb 	.word	0x000d94fb
   d43fc:	000d950e 	.word	0x000d950e
   d4400:	2003e410 	.word	0x2003e410
   d4404:	2003e608 	.word	0x2003e608
   d4408:	2003e40c 	.word	0x2003e40c
   d440c:	2003e5f0 	.word	0x2003e5f0
   d4410:	000d952d 	.word	0x000d952d
   d4414:	000d9533 	.word	0x000d9533

000d4418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4418:	680b      	ldr	r3, [r1, #0]
   d441a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d441c:	b113      	cbz	r3, d4424 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d441e:	685a      	ldr	r2, [r3, #4]
   d4420:	3201      	adds	r2, #1
   d4422:	605a      	str	r2, [r3, #4]
      }
   d4424:	4770      	bx	lr
	...

000d4428 <_Z17setCurrentWeatherPKcS0_>:
void setCurrentWeather(const char *event, const char *data) {
   d4428:	b5f0      	push	{r4, r5, r6, r7, lr}
    Log.info("subscriptionHandler %s", data);
   d442a:	460a      	mov	r2, r1
void setCurrentWeather(const char *event, const char *data) {
   d442c:	b091      	sub	sp, #68	; 0x44
   d442e:	460c      	mov	r4, r1
    Log.info("subscriptionHandler %s", data);
   d4430:	4848      	ldr	r0, [pc, #288]	; (d4554 <_Z17setCurrentWeatherPKcS0_+0x12c>)
   d4432:	4949      	ldr	r1, [pc, #292]	; (d4558 <_Z17setCurrentWeatherPKcS0_+0x130>)
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
   d4434:	4d49      	ldr	r5, [pc, #292]	; (d455c <_Z17setCurrentWeatherPKcS0_+0x134>)
            tempOutdoor = iter.value().toDouble();
   d4436:	4e4a      	ldr	r6, [pc, #296]	; (d4560 <_Z17setCurrentWeatherPKcS0_+0x138>)
    Log.info("subscriptionHandler %s", data);
   d4438:	f7ff fe3d 	bl	d40b6 <_ZNK5spark6Logger4infoEPKcz>
    return parseCopy(json, strlen(json));
   d443c:	4620      	mov	r0, r4
   d443e:	f003 f9f8 	bl	d7832 <strlen>
   d4442:	4621      	mov	r1, r4
   d4444:	4602      	mov	r2, r0
   d4446:	a803      	add	r0, sp, #12
   d4448:	f001 fd72 	bl	d5f30 <_ZN5spark9JSONValue9parseCopyEPKcj>
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
   d444c:	9c05      	ldr	r4, [sp, #20]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d444e:	9b03      	ldr	r3, [sp, #12]
   d4450:	9306      	str	r3, [sp, #24]
   d4452:	a904      	add	r1, sp, #16
   d4454:	a807      	add	r0, sp, #28
   d4456:	f7ff ffdf 	bl	d4418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d445a:	aa06      	add	r2, sp, #24
   d445c:	4621      	mov	r1, r4
   d445e:	a80a      	add	r0, sp, #40	; 0x28
   d4460:	f001 fd26 	bl	d5eb0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4464:	a807      	add	r0, sp, #28
   d4466:	f7ff ff0b 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d446a:	4f3e      	ldr	r7, [pc, #248]	; (d4564 <_Z17setCurrentWeatherPKcS0_+0x13c>)
    while (iter.next()) {
   d446c:	a80a      	add	r0, sp, #40	; 0x28
   d446e:	f001 fd37 	bl	d5ee0 <_ZN5spark18JSONObjectIterator4nextEv>
   d4472:	2800      	cmp	r0, #0
   d4474:	d066      	beq.n	d4544 <_Z17setCurrentWeatherPKcS0_+0x11c>
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
   d4476:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d447a:	9301      	str	r3, [sp, #4]
   d447c:	a90b      	add	r1, sp, #44	; 0x2c
   d447e:	a802      	add	r0, sp, #8
   d4480:	f7ff ffca 	bl	d4418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4484:	4621      	mov	r1, r4
   d4486:	aa01      	add	r2, sp, #4
   d4488:	a806      	add	r0, sp, #24
   d448a:	f001 fced 	bl	d5e68 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d448e:	a802      	add	r0, sp, #8
   d4490:	f7ff fef6 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4494:	9808      	ldr	r0, [sp, #32]
   d4496:	4629      	mov	r1, r5
   d4498:	f003 f99c 	bl	d77d4 <strcmp>
   d449c:	4604      	mov	r4, r0
   d449e:	a807      	add	r0, sp, #28
   d44a0:	f7ff feee 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "temp") {
   d44a4:	b9cc      	cbnz	r4, d44da <_Z17setCurrentWeatherPKcS0_+0xb2>
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   d44a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d44a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d44aa:	9301      	str	r3, [sp, #4]
   d44ac:	a90b      	add	r1, sp, #44	; 0x2c
   d44ae:	a802      	add	r0, sp, #8
   d44b0:	f7ff ffb2 	bl	d4418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d44b4:	aa01      	add	r2, sp, #4
   d44b6:	4621      	mov	r1, r4
   d44b8:	a806      	add	r0, sp, #24
   d44ba:	f001 fb91 	bl	d5be0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d44be:	a802      	add	r0, sp, #8
   d44c0:	f7ff fede 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            tempOutdoor = iter.value().toDouble();
   d44c4:	a806      	add	r0, sp, #24
   d44c6:	f001 fbc3 	bl	d5c50 <_ZNK5spark9JSONValue8toDoubleEv>
   d44ca:	ec51 0b10 	vmov	r0, r1, d0
   d44ce:	f002 ff1d 	bl	d730c <__aeabi_d2f>
   d44d2:	6030      	str	r0, [r6, #0]
   d44d4:	a807      	add	r0, sp, #28
   d44d6:	f7ff fed3 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(k_, d_);
   d44da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d44dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d44de:	9301      	str	r3, [sp, #4]
   d44e0:	a90b      	add	r1, sp, #44	; 0x2c
   d44e2:	a802      	add	r0, sp, #8
   d44e4:	f7ff ff98 	bl	d4418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d44e8:	4621      	mov	r1, r4
   d44ea:	aa01      	add	r2, sp, #4
   d44ec:	a806      	add	r0, sp, #24
   d44ee:	f001 fcbb 	bl	d5e68 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d44f2:	a802      	add	r0, sp, #8
   d44f4:	f7ff fec4 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d44f8:	9808      	ldr	r0, [sp, #32]
   d44fa:	4639      	mov	r1, r7
   d44fc:	f003 f96a 	bl	d77d4 <strcmp>
   d4500:	4604      	mov	r4, r0
   d4502:	a807      	add	r0, sp, #28
   d4504:	f7ff febc 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "hum") {
   d4508:	2c00      	cmp	r4, #0
   d450a:	d1af      	bne.n	d446c <_Z17setCurrentWeatherPKcS0_+0x44>
    return JSONValue(v_, d_);
   d450c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d450e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	a90b      	add	r1, sp, #44	; 0x2c
   d4514:	a802      	add	r0, sp, #8
   d4516:	f7ff ff7f 	bl	d4418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d451a:	aa01      	add	r2, sp, #4
   d451c:	4621      	mov	r1, r4
   d451e:	a806      	add	r0, sp, #24
   d4520:	f001 fb5e 	bl	d5be0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4524:	a802      	add	r0, sp, #8
   d4526:	f7ff feab 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            humidityOutdoor = iter.value().toDouble();
   d452a:	a806      	add	r0, sp, #24
   d452c:	f001 fb90 	bl	d5c50 <_ZNK5spark9JSONValue8toDoubleEv>
   d4530:	ec51 0b10 	vmov	r0, r1, d0
   d4534:	f002 feea 	bl	d730c <__aeabi_d2f>
   d4538:	4b0b      	ldr	r3, [pc, #44]	; (d4568 <_Z17setCurrentWeatherPKcS0_+0x140>)
   d453a:	6018      	str	r0, [r3, #0]
   d453c:	a807      	add	r0, sp, #28
   d453e:	f7ff fe9f 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4542:	e792      	b.n	d446a <_Z17setCurrentWeatherPKcS0_+0x42>
   d4544:	a80b      	add	r0, sp, #44	; 0x2c
   d4546:	f7ff fe9b 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d454a:	a804      	add	r0, sp, #16
   d454c:	f7ff fe98 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }}
   d4550:	b011      	add	sp, #68	; 0x44
   d4552:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4554:	2003e658 	.word	0x2003e658
   d4558:	000d9539 	.word	0x000d9539
   d455c:	000d9550 	.word	0x000d9550
   d4560:	2003e410 	.word	0x2003e410
   d4564:	000d9555 	.word	0x000d9555
   d4568:	2003e40c 	.word	0x2003e40c

000d456c <_GLOBAL__sub_I_dht>:
   d456c:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   d456e:	4b0d      	ldr	r3, [pc, #52]	; (d45a4 <_GLOBAL__sub_I_dht+0x38>)
ChainableLED leds (RX, TX, 1);
   d4570:	4c0d      	ldr	r4, [pc, #52]	; (d45a8 <_GLOBAL__sub_I_dht+0x3c>)
DHT dht(DHTPIN, DHTTYPE);
   d4572:	480e      	ldr	r0, [pc, #56]	; (d45ac <_GLOBAL__sub_I_dht+0x40>)
   d4574:	2200      	movs	r2, #0
   d4576:	701a      	strb	r2, [r3, #0]
   d4578:	4b0d      	ldr	r3, [pc, #52]	; (d45b0 <_GLOBAL__sub_I_dht+0x44>)
   d457a:	2501      	movs	r5, #1
   d457c:	701d      	strb	r5, [r3, #0]
   d457e:	220b      	movs	r2, #11
   d4580:	2306      	movs	r3, #6
   d4582:	2113      	movs	r1, #19
   d4584:	f000 f84d 	bl	d4622 <_ZN3DHTC1Ehhh>
ChainableLED leds (RX, TX, 1);
   d4588:	462b      	mov	r3, r5
   d458a:	2209      	movs	r2, #9
   d458c:	210a      	movs	r1, #10
   d458e:	4620      	mov	r0, r4
   d4590:	f000 fa80 	bl	d4a94 <_ZN12ChainableLEDC1Ehhh>
   d4594:	4620      	mov	r0, r4
   d4596:	4a07      	ldr	r2, [pc, #28]	; (d45b4 <_GLOBAL__sub_I_dht+0x48>)
   d4598:	4907      	ldr	r1, [pc, #28]	; (d45b8 <_GLOBAL__sub_I_dht+0x4c>)
   d459a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
ChainableLED leds (RX, TX, 1);
   d459e:	f002 ba27 	b.w	d69f0 <__aeabi_atexit>
   d45a2:	bf00      	nop
   d45a4:	2003e5f0 	.word	0x2003e5f0
   d45a8:	2003e608 	.word	0x2003e608
   d45ac:	2003e5f4 	.word	0x2003e5f4
   d45b0:	2003e5f1 	.word	0x2003e5f1
   d45b4:	2003e5ec 	.word	0x2003e5ec
   d45b8:	000d4aaf 	.word	0x000d4aaf

000d45bc <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d45bc:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45be:	6803      	ldr	r3, [r0, #0]
   d45c0:	2b2f      	cmp	r3, #47	; 0x2f
{
   d45c2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d45c4:	d904      	bls.n	d45d0 <nrf_gpio_pin_port_decode+0x14>
   d45c6:	4a07      	ldr	r2, [pc, #28]	; (d45e4 <nrf_gpio_pin_port_decode+0x28>)
   d45c8:	2100      	movs	r1, #0
   d45ca:	200a      	movs	r0, #10
   d45cc:	f000 fd5c 	bl	d5088 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d45d0:	6823      	ldr	r3, [r4, #0]
   d45d2:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d45d4:	bf83      	ittte	hi
   d45d6:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d45da:	4803      	ldrhi	r0, [pc, #12]	; (d45e8 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d45dc:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d45de:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d45e2:	bd10      	pop	{r4, pc}
   d45e4:	000d4e29 	.word	0x000d4e29
   d45e8:	50000300 	.word	0x50000300

000d45ec <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d45ec:	b507      	push	{r0, r1, r2, lr}
   d45ee:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45f0:	a801      	add	r0, sp, #4
   d45f2:	f7ff ffe3 	bl	d45bc <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d45f6:	9a01      	ldr	r2, [sp, #4]
   d45f8:	2301      	movs	r3, #1
   d45fa:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d45fc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4600:	b003      	add	sp, #12
   d4602:	f85d fb04 	ldr.w	pc, [sp], #4

000d4606 <nrf_gpio_pin_read>:
{
   d4606:	b507      	push	{r0, r1, r2, lr}
   d4608:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d460a:	a801      	add	r0, sp, #4
   d460c:	f7ff ffd6 	bl	d45bc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4610:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4612:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4616:	40d8      	lsrs	r0, r3
}
   d4618:	f000 0001 	and.w	r0, r0, #1
   d461c:	b003      	add	sp, #12
   d461e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4622 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4622:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4624:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4626:	2301      	movs	r3, #1
	_pin = pin;
   d4628:	7181      	strb	r1, [r0, #6]
	_type = type;
   d462a:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d462c:	7403      	strb	r3, [r0, #16]
}
   d462e:	bd10      	pop	{r4, pc}

000d4630 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4634:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4636:	4c1e      	ldr	r4, [pc, #120]	; (d46b0 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4638:	7980      	ldrb	r0, [r0, #6]
   d463a:	f8df 8078 	ldr.w	r8, [pc, #120]	; d46b4 <_ZN3DHT5beginEv+0x84>
   d463e:	2100      	movs	r1, #0
   d4640:	f002 f96c 	bl	d691c <pinMode>
	pinSetFast(_pin);
   d4644:	79ae      	ldrb	r6, [r5, #6]
   d4646:	7823      	ldrb	r3, [r4, #0]
   d4648:	f3bf 8f5b 	dmb	ish
   d464c:	f013 0f01 	tst.w	r3, #1
   d4650:	d10a      	bne.n	d4668 <_ZN3DHT5beginEv+0x38>
   d4652:	4620      	mov	r0, r4
   d4654:	f7ff fd27 	bl	d40a6 <__cxa_guard_acquire>
   d4658:	b130      	cbz	r0, d4668 <_ZN3DHT5beginEv+0x38>
   d465a:	f000 fbf5 	bl	d4e48 <HAL_Pin_Map>
   d465e:	f8c8 0000 	str.w	r0, [r8]
   d4662:	4620      	mov	r0, r4
   d4664:	f7ff fd24 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4668:	f8d8 3000 	ldr.w	r3, [r8]
   d466c:	0136      	lsls	r6, r6, #4
   d466e:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4670:	7823      	ldrb	r3, [r4, #0]
   d4672:	f3bf 8f5b 	dmb	ish
   d4676:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4678:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d467c:	d40a      	bmi.n	d4694 <_ZN3DHT5beginEv+0x64>
   d467e:	480c      	ldr	r0, [pc, #48]	; (d46b0 <_ZN3DHT5beginEv+0x80>)
   d4680:	f7ff fd11 	bl	d40a6 <__cxa_guard_acquire>
   d4684:	b130      	cbz	r0, d4694 <_ZN3DHT5beginEv+0x64>
   d4686:	f000 fbdf 	bl	d4e48 <HAL_Pin_Map>
   d468a:	f8c8 0000 	str.w	r0, [r8]
   d468e:	4808      	ldr	r0, [pc, #32]	; (d46b0 <_ZN3DHT5beginEv+0x80>)
   d4690:	f7ff fd0e 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4694:	f8d8 3000 	ldr.w	r3, [r8]
   d4698:	4433      	add	r3, r6
   d469a:	785b      	ldrb	r3, [r3, #1]
   d469c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d46a0:	ea43 0007 	orr.w	r0, r3, r7
   d46a4:	f7ff ffa2 	bl	d45ec <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d46a8:	2300      	movs	r3, #0
   d46aa:	60eb      	str	r3, [r5, #12]
}
   d46ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d46b0:	2003e610 	.word	0x2003e610
   d46b4:	2003e614 	.word	0x2003e614

000d46b8 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d46b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46bc:	4604      	mov	r4, r0
   d46be:	b085      	sub	sp, #20
   d46c0:	f000 fbba 	bl	d4e38 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d46c4:	68e3      	ldr	r3, [r4, #12]
   d46c6:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d46c8:	bf84      	itt	hi
   d46ca:	2300      	movhi	r3, #0
   d46cc:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d46ce:	7c23      	ldrb	r3, [r4, #16]
   d46d0:	b92b      	cbnz	r3, d46de <_ZN3DHT4readEv+0x26>
   d46d2:	68e3      	ldr	r3, [r4, #12]
   d46d4:	1ac0      	subs	r0, r0, r3
   d46d6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d46da:	f0c0 8160 	bcc.w	d499e <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d46de:	2500      	movs	r5, #0
   d46e0:	7425      	strb	r5, [r4, #16]
   d46e2:	f000 fba9 	bl	d4e38 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46e6:	4eb0      	ldr	r6, [pc, #704]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d46e8:	6025      	str	r5, [r4, #0]
   d46ea:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d46ec:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d46ee:	79a7      	ldrb	r7, [r4, #6]
   d46f0:	7833      	ldrb	r3, [r6, #0]
   d46f2:	4dae      	ldr	r5, [pc, #696]	; (d49ac <_ZN3DHT4readEv+0x2f4>)
   d46f4:	f3bf 8f5b 	dmb	ish
   d46f8:	f013 0f01 	tst.w	r3, #1
   d46fc:	d109      	bne.n	d4712 <_ZN3DHT4readEv+0x5a>
   d46fe:	4630      	mov	r0, r6
   d4700:	f7ff fcd1 	bl	d40a6 <__cxa_guard_acquire>
   d4704:	b128      	cbz	r0, d4712 <_ZN3DHT4readEv+0x5a>
   d4706:	f000 fb9f 	bl	d4e48 <HAL_Pin_Map>
   d470a:	6028      	str	r0, [r5, #0]
   d470c:	4630      	mov	r0, r6
   d470e:	f7ff fccf 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4712:	682b      	ldr	r3, [r5, #0]
   d4714:	013f      	lsls	r7, r7, #4
   d4716:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d471a:	7833      	ldrb	r3, [r6, #0]
   d471c:	f3bf 8f5b 	dmb	ish
   d4720:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4722:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4726:	d409      	bmi.n	d473c <_ZN3DHT4readEv+0x84>
   d4728:	489f      	ldr	r0, [pc, #636]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d472a:	f7ff fcbc 	bl	d40a6 <__cxa_guard_acquire>
   d472e:	b128      	cbz	r0, d473c <_ZN3DHT4readEv+0x84>
   d4730:	f000 fb8a 	bl	d4e48 <HAL_Pin_Map>
   d4734:	6028      	str	r0, [r5, #0]
   d4736:	489c      	ldr	r0, [pc, #624]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d4738:	f7ff fcba 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d473c:	682b      	ldr	r3, [r5, #0]
   d473e:	441f      	add	r7, r3
   d4740:	7878      	ldrb	r0, [r7, #1]
   d4742:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4746:	ea40 0008 	orr.w	r0, r0, r8
   d474a:	f7ff ff4f 	bl	d45ec <nrf_gpio_pin_set>
	delay(250);
   d474e:	20fa      	movs	r0, #250	; 0xfa
   d4750:	f000 fda6 	bl	d52a0 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4754:	79a0      	ldrb	r0, [r4, #6]
   d4756:	2101      	movs	r1, #1
   d4758:	f002 f8e0 	bl	d691c <pinMode>
	pinResetFast(_pin);
   d475c:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d475e:	7833      	ldrb	r3, [r6, #0]
   d4760:	f3bf 8f5b 	dmb	ish
   d4764:	07da      	lsls	r2, r3, #31
   d4766:	d409      	bmi.n	d477c <_ZN3DHT4readEv+0xc4>
   d4768:	488f      	ldr	r0, [pc, #572]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d476a:	f7ff fc9c 	bl	d40a6 <__cxa_guard_acquire>
   d476e:	b128      	cbz	r0, d477c <_ZN3DHT4readEv+0xc4>
   d4770:	f000 fb6a 	bl	d4e48 <HAL_Pin_Map>
   d4774:	6028      	str	r0, [r5, #0]
   d4776:	488c      	ldr	r0, [pc, #560]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d4778:	f7ff fc9a 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d477c:	682b      	ldr	r3, [r5, #0]
   d477e:	013f      	lsls	r7, r7, #4
   d4780:	5ddb      	ldrb	r3, [r3, r7]
   d4782:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4786:	7833      	ldrb	r3, [r6, #0]
   d4788:	f3bf 8f5b 	dmb	ish
   d478c:	07db      	lsls	r3, r3, #31
   d478e:	d409      	bmi.n	d47a4 <_ZN3DHT4readEv+0xec>
   d4790:	4885      	ldr	r0, [pc, #532]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d4792:	f7ff fc88 	bl	d40a6 <__cxa_guard_acquire>
   d4796:	b128      	cbz	r0, d47a4 <_ZN3DHT4readEv+0xec>
   d4798:	f000 fb56 	bl	d4e48 <HAL_Pin_Map>
   d479c:	6028      	str	r0, [r5, #0]
   d479e:	4882      	ldr	r0, [pc, #520]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d47a0:	f7ff fc86 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47a4:	682b      	ldr	r3, [r5, #0]
   d47a6:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d47a8:	a803      	add	r0, sp, #12
   d47aa:	787b      	ldrb	r3, [r7, #1]
   d47ac:	f003 031f 	and.w	r3, r3, #31
   d47b0:	ea43 0308 	orr.w	r3, r3, r8
   d47b4:	9303      	str	r3, [sp, #12]
   d47b6:	f7ff ff01 	bl	d45bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d47ba:	9a03      	ldr	r2, [sp, #12]
   d47bc:	2301      	movs	r3, #1
   d47be:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d47c0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d47c4:	2014      	movs	r0, #20
   d47c6:	f000 fd6b 	bl	d52a0 <delay>
	noInterrupts();
   d47ca:	f001 f92f 	bl	d5a2c <_Z12noInterruptsv>
	pinSetFast(_pin);
   d47ce:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d47d0:	7833      	ldrb	r3, [r6, #0]
   d47d2:	f3bf 8f5b 	dmb	ish
   d47d6:	07d8      	lsls	r0, r3, #31
   d47d8:	d409      	bmi.n	d47ee <_ZN3DHT4readEv+0x136>
   d47da:	4873      	ldr	r0, [pc, #460]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d47dc:	f7ff fc63 	bl	d40a6 <__cxa_guard_acquire>
   d47e0:	b128      	cbz	r0, d47ee <_ZN3DHT4readEv+0x136>
   d47e2:	f000 fb31 	bl	d4e48 <HAL_Pin_Map>
   d47e6:	6028      	str	r0, [r5, #0]
   d47e8:	486f      	ldr	r0, [pc, #444]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d47ea:	f7ff fc61 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47ee:	682b      	ldr	r3, [r5, #0]
   d47f0:	013f      	lsls	r7, r7, #4
   d47f2:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d47f6:	7833      	ldrb	r3, [r6, #0]
   d47f8:	f3bf 8f5b 	dmb	ish
   d47fc:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d47fe:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4802:	d409      	bmi.n	d4818 <_ZN3DHT4readEv+0x160>
   d4804:	4868      	ldr	r0, [pc, #416]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d4806:	f7ff fc4e 	bl	d40a6 <__cxa_guard_acquire>
   d480a:	b128      	cbz	r0, d4818 <_ZN3DHT4readEv+0x160>
   d480c:	f000 fb1c 	bl	d4e48 <HAL_Pin_Map>
   d4810:	6028      	str	r0, [r5, #0]
   d4812:	4865      	ldr	r0, [pc, #404]	; (d49a8 <_ZN3DHT4readEv+0x2f0>)
   d4814:	f7ff fc4c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4818:	682b      	ldr	r3, [r5, #0]
   d481a:	441f      	add	r7, r3
   d481c:	7878      	ldrb	r0, [r7, #1]
   d481e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4822:	ea40 0008 	orr.w	r0, r0, r8
   d4826:	f7ff fee1 	bl	d45ec <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d482a:	2028      	movs	r0, #40	; 0x28
   d482c:	f000 fafc 	bl	d4e28 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4830:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4832:	f8df 8174 	ldr.w	r8, [pc, #372]	; d49a8 <_ZN3DHT4readEv+0x2f0>
   d4836:	2100      	movs	r1, #0
   d4838:	f002 f870 	bl	d691c <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d483c:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d483e:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4840:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4842:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4844:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4848:	f894 b006 	ldrb.w	fp, [r4, #6]
   d484c:	7833      	ldrb	r3, [r6, #0]
   d484e:	f3bf 8f5b 	dmb	ish
   d4852:	07da      	lsls	r2, r3, #31
   d4854:	d409      	bmi.n	d486a <_ZN3DHT4readEv+0x1b2>
   d4856:	4640      	mov	r0, r8
   d4858:	f7ff fc25 	bl	d40a6 <__cxa_guard_acquire>
   d485c:	b128      	cbz	r0, d486a <_ZN3DHT4readEv+0x1b2>
   d485e:	f000 faf3 	bl	d4e48 <HAL_Pin_Map>
   d4862:	6028      	str	r0, [r5, #0]
   d4864:	4640      	mov	r0, r8
   d4866:	f7ff fc23 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d486a:	682b      	ldr	r3, [r5, #0]
   d486c:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4870:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4874:	015b      	lsls	r3, r3, #5
   d4876:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4878:	7833      	ldrb	r3, [r6, #0]
   d487a:	f3bf 8f5b 	dmb	ish
   d487e:	07db      	lsls	r3, r3, #31
   d4880:	d409      	bmi.n	d4896 <_ZN3DHT4readEv+0x1de>
   d4882:	4640      	mov	r0, r8
   d4884:	f7ff fc0f 	bl	d40a6 <__cxa_guard_acquire>
   d4888:	b128      	cbz	r0, d4896 <_ZN3DHT4readEv+0x1de>
   d488a:	f000 fadd 	bl	d4e48 <HAL_Pin_Map>
   d488e:	6028      	str	r0, [r5, #0]
   d4890:	4640      	mov	r0, r8
   d4892:	f7ff fc0d 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4896:	682b      	ldr	r3, [r5, #0]
   d4898:	445b      	add	r3, fp
   d489a:	f893 b001 	ldrb.w	fp, [r3, #1]
   d489e:	9b01      	ldr	r3, [sp, #4]
   d48a0:	f00b 0b1f 	and.w	fp, fp, #31
   d48a4:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d48a8:	4658      	mov	r0, fp
   d48aa:	f7ff feac 	bl	d4606 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d48ae:	4658      	mov	r0, fp
   d48b0:	f7ff fea9 	bl	d4606 <nrf_gpio_pin_read>
   d48b4:	9b00      	ldr	r3, [sp, #0]
   d48b6:	4283      	cmp	r3, r0
   d48b8:	d109      	bne.n	d48ce <_ZN3DHT4readEv+0x216>
			counter++;
   d48ba:	f109 0901 	add.w	r9, r9, #1
   d48be:	fa5f f989 	uxtb.w	r9, r9
   d48c2:	2001      	movs	r0, #1
   d48c4:	f000 fab0 	bl	d4e28 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d48c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d48cc:	d1bc      	bne.n	d4848 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d48ce:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d48d2:	7833      	ldrb	r3, [r6, #0]
   d48d4:	f3bf 8f5b 	dmb	ish
   d48d8:	07d8      	lsls	r0, r3, #31
   d48da:	d409      	bmi.n	d48f0 <_ZN3DHT4readEv+0x238>
   d48dc:	4640      	mov	r0, r8
   d48de:	f7ff fbe2 	bl	d40a6 <__cxa_guard_acquire>
   d48e2:	b128      	cbz	r0, d48f0 <_ZN3DHT4readEv+0x238>
   d48e4:	f000 fab0 	bl	d4e48 <HAL_Pin_Map>
   d48e8:	6028      	str	r0, [r5, #0]
   d48ea:	4640      	mov	r0, r8
   d48ec:	f7ff fbe0 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d48f0:	682b      	ldr	r3, [r5, #0]
   d48f2:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d48f6:	f813 300b 	ldrb.w	r3, [r3, fp]
   d48fa:	015b      	lsls	r3, r3, #5
   d48fc:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d48fe:	7833      	ldrb	r3, [r6, #0]
   d4900:	f3bf 8f5b 	dmb	ish
   d4904:	07d9      	lsls	r1, r3, #31
   d4906:	d409      	bmi.n	d491c <_ZN3DHT4readEv+0x264>
   d4908:	4640      	mov	r0, r8
   d490a:	f7ff fbcc 	bl	d40a6 <__cxa_guard_acquire>
   d490e:	b128      	cbz	r0, d491c <_ZN3DHT4readEv+0x264>
   d4910:	f000 fa9a 	bl	d4e48 <HAL_Pin_Map>
   d4914:	6028      	str	r0, [r5, #0]
   d4916:	4640      	mov	r0, r8
   d4918:	f7ff fbca 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d491c:	682b      	ldr	r3, [r5, #0]
   d491e:	445b      	add	r3, fp
   d4920:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4924:	9b00      	ldr	r3, [sp, #0]
   d4926:	f00b 0b1f 	and.w	fp, fp, #31
   d492a:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d492e:	4658      	mov	r0, fp
   d4930:	f7ff fe69 	bl	d4606 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4934:	4658      	mov	r0, fp
   d4936:	f7ff fe66 	bl	d4606 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d493a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d493e:	b2c3      	uxtb	r3, r0
   d4940:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4942:	d018      	beq.n	d4976 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4944:	2f03      	cmp	r7, #3
   d4946:	d911      	bls.n	d496c <_ZN3DHT4readEv+0x2b4>
   d4948:	07fa      	lsls	r2, r7, #31
   d494a:	d40f      	bmi.n	d496c <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d494c:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4950:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d4954:	5ca3      	ldrb	r3, [r4, r2]
   d4956:	005b      	lsls	r3, r3, #1
   d4958:	b2db      	uxtb	r3, r3
   d495a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d495c:	7a21      	ldrb	r1, [r4, #8]
   d495e:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4960:	bf3c      	itt	cc
   d4962:	f043 0301 	orrcc.w	r3, r3, #1
   d4966:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4968:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d496c:	3701      	adds	r7, #1
   d496e:	b2ff      	uxtb	r7, r7
   d4970:	2f55      	cmp	r7, #85	; 0x55
   d4972:	f47f af67 	bne.w	d4844 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d4976:	f001 f85b 	bl	d5a30 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d497a:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d497e:	d910      	bls.n	d49a2 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4980:	7863      	ldrb	r3, [r4, #1]
   d4982:	7820      	ldrb	r0, [r4, #0]
   d4984:	4418      	add	r0, r3
   d4986:	78a3      	ldrb	r3, [r4, #2]
   d4988:	4418      	add	r0, r3
   d498a:	78e3      	ldrb	r3, [r4, #3]
   d498c:	4418      	add	r0, r3
   d498e:	7923      	ldrb	r3, [r4, #4]
   d4990:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d4992:	1ac3      	subs	r3, r0, r3
   d4994:	4258      	negs	r0, r3
   d4996:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d4998:	b005      	add	sp, #20
   d499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d499e:	2001      	movs	r0, #1
   d49a0:	e7fa      	b.n	d4998 <_ZN3DHT4readEv+0x2e0>
	return false;
   d49a2:	2000      	movs	r0, #0
   d49a4:	e7f8      	b.n	d4998 <_ZN3DHT4readEv+0x2e0>
   d49a6:	bf00      	nop
   d49a8:	2003e610 	.word	0x2003e610
   d49ac:	2003e614 	.word	0x2003e614

000d49b0 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d49b0:	b510      	push	{r4, lr}
   d49b2:	4604      	mov	r4, r0
	if (read()) {
   d49b4:	f7ff fe80 	bl	d46b8 <_ZN3DHT4readEv>
   d49b8:	b320      	cbz	r0, d4a04 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d49ba:	79e3      	ldrb	r3, [r4, #7]
   d49bc:	2b0b      	cmp	r3, #11
   d49be:	d01b      	beq.n	d49f8 <_ZN3DHT15readTemperatureEv+0x48>
   d49c0:	3b15      	subs	r3, #21
   d49c2:	2b01      	cmp	r3, #1
   d49c4:	d81e      	bhi.n	d4a04 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d49c6:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d49c8:	eddf 6a10 	vldr	s13, [pc, #64]	; d4a0c <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d49cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d49d0:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d49d4:	78e2      	ldrb	r2, [r4, #3]
   d49d6:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d49da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d49de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d49e2:	061b      	lsls	r3, r3, #24
				f += data[3];
   d49e4:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d49e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d49ec:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d49f0:	d507      	bpl.n	d4a02 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d49f2:	eeb1 0a40 	vneg.f32	s0, s0
   d49f6:	e004      	b.n	d4a02 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d49f8:	78a3      	ldrb	r3, [r4, #2]
   d49fa:	ee00 3a10 	vmov	s0, r3
   d49fe:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4a02:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4a04:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4a10 <_ZN3DHT15readTemperatureEv+0x60>
   d4a08:	e7fb      	b.n	d4a02 <_ZN3DHT15readTemperatureEv+0x52>
   d4a0a:	bf00      	nop
   d4a0c:	43800000 	.word	0x43800000
   d4a10:	7fc00000 	.word	0x7fc00000

000d4a14 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d4a14:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4a16:	f7ff ffcb 	bl	d49b0 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d4a1a:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4a1e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4a22:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4a26:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d4a2a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4a34 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4a2e:	ee37 0a00 	vadd.f32	s0, s14, s0
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	42000000 	.word	0x42000000

000d4a38 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4a38:	b510      	push	{r4, lr}
   d4a3a:	4604      	mov	r4, r0
	if (read()) {
   d4a3c:	f7ff fe3c 	bl	d46b8 <_ZN3DHT4readEv>
   d4a40:	b1f0      	cbz	r0, d4a80 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d4a42:	79e3      	ldrb	r3, [r4, #7]
   d4a44:	2b0b      	cmp	r3, #11
   d4a46:	d015      	beq.n	d4a74 <_ZN3DHT12readHumidityEv+0x3c>
   d4a48:	3b15      	subs	r3, #21
   d4a4a:	2b01      	cmp	r3, #1
   d4a4c:	d818      	bhi.n	d4a80 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4a4e:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4a50:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4a88 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4a54:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4a58:	7863      	ldrb	r3, [r4, #1]
   d4a5a:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4a5e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d4a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4a66:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4a6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4a6e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4a72:	bd10      	pop	{r4, pc}
				f = data[0];
   d4a74:	7823      	ldrb	r3, [r4, #0]
   d4a76:	ee00 3a10 	vmov	s0, r3
   d4a7a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4a7e:	e7f8      	b.n	d4a72 <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4a80:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4a8c <_ZN3DHT12readHumidityEv+0x54>
   d4a84:	e7f5      	b.n	d4a72 <_ZN3DHT12readHumidityEv+0x3a>
   d4a86:	bf00      	nop
   d4a88:	43800000 	.word	0x43800000
   d4a8c:	7fc00000 	.word	0x7fc00000

000d4a90 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4a90:	f7ff bfd2 	b.w	d4a38 <_ZN3DHT12readHumidityEv>

000d4a94 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d4a94:	b510      	push	{r4, lr}
   d4a96:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d4a98:	7001      	strb	r1, [r0, #0]
   d4a9a:	7042      	strb	r2, [r0, #1]
   d4a9c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d4a9e:	2101      	movs	r1, #1
   d4aa0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d4aa4:	f002 fe1c 	bl	d76e0 <calloc>
   d4aa8:	6060      	str	r0, [r4, #4]
}
   d4aaa:	4620      	mov	r0, r4
   d4aac:	bd10      	pop	{r4, pc}

000d4aae <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d4aae:	b510      	push	{r4, lr}
   d4ab0:	4604      	mov	r4, r0
{
    free(_led_state);
   d4ab2:	6840      	ldr	r0, [r0, #4]
   d4ab4:	f000 fbcc 	bl	d5250 <free>
}
   d4ab8:	4620      	mov	r0, r4
   d4aba:	bd10      	pop	{r4, pc}

000d4abc <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4abc:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d4abe:	2100      	movs	r1, #0
{
   d4ac0:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d4ac2:	7800      	ldrb	r0, [r0, #0]
   d4ac4:	f001 ff3b 	bl	d693e <digitalWrite>
   d4ac8:	2014      	movs	r0, #20
   d4aca:	f000 f9ad 	bl	d4e28 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d4ace:	7820      	ldrb	r0, [r4, #0]
   d4ad0:	2101      	movs	r1, #1
   d4ad2:	f001 ff34 	bl	d693e <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d4ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4ada:	2014      	movs	r0, #20
   d4adc:	f000 b9a4 	b.w	d4e28 <HAL_Delay_Microseconds>

000d4ae0 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d4ae0:	b570      	push	{r4, r5, r6, lr}
   d4ae2:	4606      	mov	r6, r0
   d4ae4:	460c      	mov	r4, r1
   d4ae6:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d4ae8:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   d4aea:	bf4c      	ite	mi
   d4aec:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d4aee:	2100      	movpl	r1, #0
   d4af0:	7870      	ldrb	r0, [r6, #1]
   d4af2:	f001 ff24 	bl	d693e <digitalWrite>
        clk();
   d4af6:	3d01      	subs	r5, #1
   d4af8:	4630      	mov	r0, r6
   d4afa:	f7ff ffdf 	bl	d4abc <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d4afe:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   d4b00:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   d4b04:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   d4b06:	d1ef      	bne.n	d4ae8 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   d4b08:	bd70      	pop	{r4, r5, r6, pc}

000d4b0a <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4b0c:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   d4b10:	461e      	mov	r6, r3
   d4b12:	460c      	mov	r4, r1
   d4b14:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4b16:	bf14      	ite	ne
   d4b18:	21c0      	movne	r1, #192	; 0xc0
   d4b1a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4b1c:	0673      	lsls	r3, r6, #25
   d4b1e:	bf58      	it	pl
   d4b20:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4b24:	062a      	lsls	r2, r5, #24
   d4b26:	bf58      	it	pl
   d4b28:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d4b2c:	066b      	lsls	r3, r5, #25
   d4b2e:	bf58      	it	pl
   d4b30:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4b34:	0622      	lsls	r2, r4, #24
   d4b36:	bf58      	it	pl
   d4b38:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d4b3c:	0663      	lsls	r3, r4, #25
   d4b3e:	bf58      	it	pl
   d4b40:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d4b44:	9001      	str	r0, [sp, #4]
   d4b46:	f7ff ffcb 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d4b4a:	9801      	ldr	r0, [sp, #4]
   d4b4c:	4631      	mov	r1, r6
   d4b4e:	f7ff ffc7 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d4b52:	9801      	ldr	r0, [sp, #4]
   d4b54:	4629      	mov	r1, r5
   d4b56:	f7ff ffc3 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d4b5a:	9801      	ldr	r0, [sp, #4]
   d4b5c:	4621      	mov	r1, r4
}
   d4b5e:	b002      	add	sp, #8
   d4b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   d4b64:	f7ff bfbc 	b.w	d4ae0 <_ZN12ChainableLED8sendByteEh>

000d4b68 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d4b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4b6c:	4604      	mov	r4, r0
   d4b6e:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d4b70:	2100      	movs	r1, #0
{
   d4b72:	4690      	mov	r8, r2
   d4b74:	4699      	mov	r9, r3
   d4b76:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   d4b7a:	f7ff ffb1 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4b7e:	2100      	movs	r1, #0
   d4b80:	4620      	mov	r0, r4
   d4b82:	f7ff ffad 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4b86:	2100      	movs	r1, #0
   d4b88:	4620      	mov	r0, r4
   d4b8a:	f7ff ffa9 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4b8e:	2100      	movs	r1, #0
   d4b90:	4620      	mov	r0, r4
   d4b92:	f7ff ffa5 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>
   d4b96:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4b98:	78a3      	ldrb	r3, [r4, #2]
   d4b9a:	b2f5      	uxtb	r5, r6
   d4b9c:	42ab      	cmp	r3, r5
   d4b9e:	d919      	bls.n	d4bd4 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
   d4ba0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   d4ba4:	42af      	cmp	r7, r5
   d4ba6:	f100 0201 	add.w	r2, r0, #1
   d4baa:	f100 0302 	add.w	r3, r0, #2
   d4bae:	d108      	bne.n	d4bc2 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
        {
            _led_state[i*3 + _CL_RED] = red;
   d4bb0:	6861      	ldr	r1, [r4, #4]
   d4bb2:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   d4bb6:	6861      	ldr	r1, [r4, #4]
   d4bb8:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   d4bbc:	6861      	ldr	r1, [r4, #4]
   d4bbe:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d4bc2:	6861      	ldr	r1, [r4, #4]
   d4bc4:	5ccb      	ldrb	r3, [r1, r3]
   d4bc6:	5c8a      	ldrb	r2, [r1, r2]
   d4bc8:	5c09      	ldrb	r1, [r1, r0]
   d4bca:	4620      	mov	r0, r4
   d4bcc:	f7ff ff9d 	bl	d4b0a <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   d4bd0:	3601      	adds	r6, #1
   d4bd2:	e7e1      	b.n	d4b98 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	2100      	movs	r1, #0
   d4bd8:	f7ff ff82 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4bdc:	4620      	mov	r0, r4
   d4bde:	2100      	movs	r1, #0
   d4be0:	f7ff ff7e 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4be4:	4620      	mov	r0, r4
   d4be6:	2100      	movs	r1, #0
   d4be8:	f7ff ff7a 	bl	d4ae0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4bec:	4620      	mov	r0, r4
   d4bee:	2100      	movs	r1, #0
}
   d4bf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   d4bf4:	f7ff bf74 	b.w	d4ae0 <_ZN12ChainableLED8sendByteEh>

000d4bf8 <_ZN12ChainableLED4initEv>:
{
   d4bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4bfa:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d4bfc:	2101      	movs	r1, #1
   d4bfe:	7800      	ldrb	r0, [r0, #0]
   d4c00:	f001 fe8c 	bl	d691c <pinMode>
    pinMode(_data_pin, OUTPUT);
   d4c04:	7860      	ldrb	r0, [r4, #1]
   d4c06:	2101      	movs	r1, #1
   d4c08:	f001 fe88 	bl	d691c <pinMode>
   d4c0c:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   d4c0e:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   d4c10:	78a3      	ldrb	r3, [r4, #2]
   d4c12:	b2e9      	uxtb	r1, r5
   d4c14:	428b      	cmp	r3, r1
   d4c16:	d907      	bls.n	d4c28 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   d4c18:	2300      	movs	r3, #0
   d4c1a:	9600      	str	r6, [sp, #0]
   d4c1c:	461a      	mov	r2, r3
   d4c1e:	4620      	mov	r0, r4
   d4c20:	f7ff ffa2 	bl	d4b68 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   d4c24:	3501      	adds	r5, #1
   d4c26:	e7f3      	b.n	d4c10 <_ZN12ChainableLED4initEv+0x18>
}
   d4c28:	b002      	add	sp, #8
   d4c2a:	bd70      	pop	{r4, r5, r6, pc}

000d4c2c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4c2c:	6803      	ldr	r3, [r0, #0]
   d4c2e:	b2c9      	uxtb	r1, r1
   d4c30:	689b      	ldr	r3, [r3, #8]
   d4c32:	4718      	bx	r3

000d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
    delay(5);
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   d4c34:	b510      	push	{r4, lr}
   d4c36:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4c38:	f001 feb2 	bl	d69a0 <_Z19__fetch_global_Wirev>
   d4c3c:	213c      	movs	r1, #60	; 0x3c
   d4c3e:	f000 feeb 	bl	d5a18 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
  Wire.write(SeeedOLED_Command_Mode);	     // Set OLED Command mode
   d4c42:	f001 fead 	bl	d69a0 <_Z19__fetch_global_Wirev>
   d4c46:	2180      	movs	r1, #128	; 0x80
   d4c48:	f7ff fff0 	bl	d4c2c <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d4c4c:	f001 fea8 	bl	d69a0 <_Z19__fetch_global_Wirev>
   d4c50:	6803      	ldr	r3, [r0, #0]
   d4c52:	4621      	mov	r1, r4
   d4c54:	689b      	ldr	r3, [r3, #8]
   d4c56:	4798      	blx	r3
#else
  Wire.send(SeeedOLED_Command_Mode);	     // Set OLED Command mode
  Wire.send(command);
#endif
  Wire.endTransmission();    		     // End I2C communication
   d4c58:	f001 fea2 	bl	d69a0 <_Z19__fetch_global_Wirev>
}
   d4c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission();    		     // End I2C communication
   d4c60:	f000 bee1 	b.w	d5a26 <_ZN7TwoWire15endTransmissionEv>

000d4c64 <_ZN9SeeedOLED4initEv>:
{
   d4c64:	b508      	push	{r3, lr}
    sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d4c66:	20ae      	movs	r0, #174	; 0xae
   d4c68:	f7ff ffe4 	bl	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d4c6c:	2005      	movs	r0, #5
   d4c6e:	f000 fb17 	bl	d52a0 <delay>
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d4c72:	20af      	movs	r0, #175	; 0xaf
   d4c74:	f7ff ffde 	bl	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d4c78:	2005      	movs	r0, #5
   d4c7a:	f000 fb11 	bl	d52a0 <delay>
}
   d4c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
   d4c82:	20a6      	movs	r0, #166	; 0xa6
   d4c84:	f7ff bfd6 	b.w	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4c88 <_ZN9SeeedOLED11setPageModeEv>:
    sendCommand(0x20); 			//set addressing mode
    sendCommand(0x00); 			//set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d4c88:	b508      	push	{r3, lr}
    addressingMode = PAGE_MODE;
   d4c8a:	2301      	movs	r3, #1
   d4c8c:	7003      	strb	r3, [r0, #0]
    sendCommand(0x20); 			//set addressing mode
   d4c8e:	2020      	movs	r0, #32
   d4c90:	f7ff ffd0 	bl	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x02); 			//set page addressing mode
}
   d4c94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(0x02); 			//set page addressing mode
   d4c98:	2002      	movs	r0, #2
   d4c9a:	f7ff bfcb 	b.w	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4c9e <_ZN9SeeedOLED9setTextXYEhh>:


void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4c9e:	b510      	push	{r4, lr}
    sendCommand(0xB0 + Row); 			//set page address
   d4ca0:	3950      	subs	r1, #80	; 0x50
{
   d4ca2:	4614      	mov	r4, r2
    sendCommand(0xB0 + Row); 			//set page address
   d4ca4:	b2c8      	uxtb	r0, r1
   d4ca6:	f7ff ffc5 	bl	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x00 + (8*Column & 0x0F)); 	//set column lower address
   d4caa:	00e0      	lsls	r0, r4, #3
   d4cac:	f000 0008 	and.w	r0, r0, #8
   d4cb0:	f7ff ffc0 	bl	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4cb4:	f3c4 0043 	ubfx	r0, r4, #1, #4
   d4cb8:	3010      	adds	r0, #16
}
   d4cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4cbe:	f7ff bfb9 	b.w	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4cc2 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
  setTextXY(0,0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d4cc2:	b510      	push	{r4, lr}
   d4cc4:	460c      	mov	r4, r1
     Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d4cc6:	f001 fe6b 	bl	d69a0 <_Z19__fetch_global_Wirev>
   d4cca:	213c      	movs	r1, #60	; 0x3c
   d4ccc:	f000 fea4 	bl	d5a18 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
     Wire.write(SeeedOLED_Data_Mode);            // data mode
   d4cd0:	f001 fe66 	bl	d69a0 <_Z19__fetch_global_Wirev>
   d4cd4:	2140      	movs	r1, #64	; 0x40
   d4cd6:	f7ff ffa9 	bl	d4c2c <_ZN7TwoWire5writeEi>
     Wire.write(Data);
   d4cda:	f001 fe61 	bl	d69a0 <_Z19__fetch_global_Wirev>
   d4cde:	6803      	ldr	r3, [r0, #0]
   d4ce0:	4621      	mov	r1, r4
   d4ce2:	689b      	ldr	r3, [r3, #8]
   d4ce4:	4798      	blx	r3
#else
     Wire.send(SeeedOLED_Data_Mode);            // data mode
     Wire.send(Data);
#endif
     Wire.endTransmission();                    // stop I2C transmission
   d4ce6:	f001 fe5b 	bl	d69a0 <_Z19__fetch_global_Wirev>
}
   d4cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     Wire.endTransmission();                    // stop I2C transmission
   d4cee:	f000 be9a 	b.w	d5a26 <_ZN7TwoWire15endTransmissionEv>
	...

000d4cf4 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
    if(C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d4cf4:	f1a1 0320 	sub.w	r3, r1, #32
    {
    C=' '; //Space
   d4cf8:	2b5f      	cmp	r3, #95	; 0x5f
   d4cfa:	bf88      	it	hi
   d4cfc:	2120      	movhi	r1, #32
{
   d4cfe:	b570      	push	{r4, r5, r6, lr}
   d4d00:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   d4d04:	4d07      	ldr	r5, [pc, #28]	; (d4d24 <_ZN9SeeedOLED7putCharEh+0x30>)
   d4d06:	3920      	subs	r1, #32
   d4d08:	4606      	mov	r6, r0
    }
    unsigned char i=0;
    for(i=0;i<8;i++)
   d4d0a:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C=' '; //Space
   d4d0e:	2408      	movs	r4, #8
    {
       //read bytes from code memory
       sendData(pgm_read_byte(&BasicFont[C-32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d4d10:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d14:	4630      	mov	r0, r6
   d4d16:	3c01      	subs	r4, #1
   d4d18:	f7ff ffd3 	bl	d4cc2 <_ZN9SeeedOLED8sendDataEh>
    for(i=0;i<8;i++)
   d4d1c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4d20:	d1f6      	bne.n	d4d10 <_ZN9SeeedOLED7putCharEh+0x1c>
    }
}
   d4d22:	bd70      	pop	{r4, r5, r6, pc}
   d4d24:	000d9559 	.word	0x000d9559

000d4d28 <_ZN9SeeedOLED12clearDisplayEv>:
{
   d4d28:	b570      	push	{r4, r5, r6, lr}
   d4d2a:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d4d2c:	20ae      	movs	r0, #174	; 0xae
   d4d2e:	f7ff ff81 	bl	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   d4d32:	2600      	movs	r6, #0
    setTextXY(j,0);
   d4d34:	2200      	movs	r2, #0
   d4d36:	b2f1      	uxtb	r1, r6
   d4d38:	4628      	mov	r0, r5
   d4d3a:	f7ff ffb0 	bl	d4c9e <_ZN9SeeedOLED9setTextXYEhh>
   d4d3e:	2410      	movs	r4, #16
        putChar(' ');
   d4d40:	2120      	movs	r1, #32
   d4d42:	4628      	mov	r0, r5
   d4d44:	3c01      	subs	r4, #1
   d4d46:	f7ff ffd5 	bl	d4cf4 <_ZN9SeeedOLED7putCharEh>
      for(i=0;i<16;i++)  //clear all columns
   d4d4a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4d4e:	d1f7      	bne.n	d4d40 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for(j=0;j<8;j++)
   d4d50:	3601      	adds	r6, #1
   d4d52:	2e08      	cmp	r6, #8
   d4d54:	d1ee      	bne.n	d4d34 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d4d56:	20af      	movs	r0, #175	; 0xaf
   d4d58:	f7ff ff6c 	bl	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0,0);
   d4d5c:	4622      	mov	r2, r4
   d4d5e:	4621      	mov	r1, r4
   d4d60:	4628      	mov	r0, r5
}
   d4d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0,0);
   d4d66:	f7ff bf9a 	b.w	d4c9e <_ZN9SeeedOLED9setTextXYEhh>

000d4d6a <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   d4d6a:	b570      	push	{r4, r5, r6, lr}
   d4d6c:	4606      	mov	r6, r0
   d4d6e:	460d      	mov	r5, r1
   d4d70:	2400      	movs	r4, #0
    unsigned char i=0;
    while(String[i])
   d4d72:	b2e3      	uxtb	r3, r4
   d4d74:	3401      	adds	r4, #1
   d4d76:	5ce9      	ldrb	r1, [r5, r3]
   d4d78:	b119      	cbz	r1, d4d82 <_ZN9SeeedOLED9putStringEPKc+0x18>
    {
        putChar(String[i]);
   d4d7a:	4630      	mov	r0, r6
   d4d7c:	f7ff ffba 	bl	d4cf4 <_ZN9SeeedOLED7putCharEh>
    while(String[i])
   d4d80:	e7f7      	b.n	d4d72 <_ZN9SeeedOLED9putStringEPKc+0x8>
        i++;
    }
}
   d4d82:	bd70      	pop	{r4, r5, r6, pc}

000d4d84 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   d4d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d86:	b085      	sub	sp, #20
  unsigned char char_buffer[10]="";
   d4d88:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d4d8a:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10]="";
   d4d8c:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   d4d90:	4606      	mov	r6, r0
  unsigned char char_buffer[10]="";
   d4d92:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   d4d96:	da24      	bge.n	d4de2 <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f=1;
    putChar('-');
   d4d98:	212d      	movs	r1, #45	; 0x2d
   d4d9a:	f7ff ffab 	bl	d4cf4 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d4d9e:	4264      	negs	r4, r4
    f=1;
   d4da0:	2301      	movs	r3, #1
  unsigned char f = 0;
   d4da2:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d4da4:	200a      	movs	r0, #10
   d4da6:	462a      	mov	r2, r5
   d4da8:	a904      	add	r1, sp, #16
   d4daa:	440a      	add	r2, r1
   d4dac:	3501      	adds	r5, #1
   d4dae:	fbb4 f1f0 	udiv	r1, r4, r0
   d4db2:	fb00 4411 	mls	r4, r0, r1, r4
   d4db6:	f802 4c0c 	strb.w	r4, [r2, #-12]
   d4dba:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   d4dbc:	460c      	mov	r4, r1
   d4dbe:	2900      	cmp	r1, #0
   d4dc0:	d1f1      	bne.n	d4da6 <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f=f+i;
   d4dc2:	442b      	add	r3, r5
   d4dc4:	b2dc      	uxtb	r4, r3
   d4dc6:	ab04      	add	r3, sp, #16
   d4dc8:	195f      	adds	r7, r3, r5
   d4dca:	3f0d      	subs	r7, #13
  for(; i > 0; i--)
   d4dcc:	b175      	cbz	r5, d4dec <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0'+ char_buffer[i - 1]);
   d4dce:	f817 1901 	ldrb.w	r1, [r7], #-1
   d4dd2:	3130      	adds	r1, #48	; 0x30
   d4dd4:	b2c9      	uxtb	r1, r1
   d4dd6:	4630      	mov	r0, r6
  for(; i > 0; i--)
   d4dd8:	3d01      	subs	r5, #1
    putChar('0'+ char_buffer[i - 1]);
   d4dda:	f7ff ff8b 	bl	d4cf4 <_ZN9SeeedOLED7putCharEh>
  for(; i > 0; i--)
   d4dde:	b2ed      	uxtb	r5, r5
   d4de0:	e7f4      	b.n	d4dcc <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   d4de2:	d1de      	bne.n	d4da2 <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   d4de4:	2130      	movs	r1, #48	; 0x30
   d4de6:	f7ff ff85 	bl	d4cf4 <_ZN9SeeedOLED7putCharEh>
    return f;
   d4dea:	2401      	movs	r4, #1
  }
  return f;

}
   d4dec:	4620      	mov	r0, r4
   d4dee:	b005      	add	sp, #20
   d4df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4df2 <_ZN9SeeedOLED16setNormalDisplayEv>:
    sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
    sendCommand(SeeedOLED_Normal_Display_Cmd);
   d4df2:	20a6      	movs	r0, #166	; 0xa6
   d4df4:	f7ff bf1e 	b.w	d4c34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4df8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <os_mutex_recursive_create+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	00030248 	.word	0x00030248

000d4e08 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <os_mutex_recursive_destroy+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	00030248 	.word	0x00030248

000d4e18 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <HAL_RNG_GetRandomNumber+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	685b      	ldr	r3, [r3, #4]
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	00030218 	.word	0x00030218

000d4e28 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <HAL_Delay_Microseconds+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	68db      	ldr	r3, [r3, #12]
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	00030218 	.word	0x00030218

000d4e38 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	695b      	ldr	r3, [r3, #20]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	00030218 	.word	0x00030218

000d4e48 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <HAL_Pin_Map+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	681b      	ldr	r3, [r3, #0]
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	0003022c 	.word	0x0003022c

000d4e58 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <HAL_Pin_Mode+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	689b      	ldr	r3, [r3, #8]
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	0003022c 	.word	0x0003022c

000d4e68 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <HAL_Get_Pin_Mode+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	68db      	ldr	r3, [r3, #12]
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	0003022c 	.word	0x0003022c

000d4e78 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <HAL_GPIO_Write+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	691b      	ldr	r3, [r3, #16]
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	0003022c 	.word	0x0003022c

000d4e88 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <HAL_Interrupts_Enable_All+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6a1b      	ldr	r3, [r3, #32]
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	0003022c 	.word	0x0003022c

000d4e98 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <HAL_Interrupts_Disable_All+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	0003022c 	.word	0x0003022c

000d4ea8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <hal_i2c_begin+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	68db      	ldr	r3, [r3, #12]
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	00030228 	.word	0x00030228

000d4eb8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <hal_i2c_begin_transmission+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	699b      	ldr	r3, [r3, #24]
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	00030228 	.word	0x00030228

000d4ec8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <hal_i2c_end_transmission+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	69db      	ldr	r3, [r3, #28]
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	00030228 	.word	0x00030228

000d4ed8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <hal_i2c_write+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	6a1b      	ldr	r3, [r3, #32]
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	00030228 	.word	0x00030228

000d4ee8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <hal_i2c_available+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	00030228 	.word	0x00030228

000d4ef8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <hal_i2c_read+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	00030228 	.word	0x00030228

000d4f08 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <hal_i2c_peek+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	00030228 	.word	0x00030228

000d4f18 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <hal_i2c_flush+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	00030228 	.word	0x00030228

000d4f28 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <hal_i2c_is_enabled+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	00030228 	.word	0x00030228

000d4f38 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <hal_i2c_init+0xc>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f40:	9301      	str	r3, [sp, #4]
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	00030228 	.word	0x00030228

000d4f48 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <inet_inet_ntop+0xc>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	695b      	ldr	r3, [r3, #20]
   d4f50:	9301      	str	r3, [sp, #4]
   d4f52:	bd08      	pop	{r3, pc}
   d4f54:	00030264 	.word	0x00030264

000d4f58 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f58:	b508      	push	{r3, lr}
   d4f5a:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <netdb_freeaddrinfo+0xc>)
   d4f5c:	681b      	ldr	r3, [r3, #0]
   d4f5e:	689b      	ldr	r3, [r3, #8]
   d4f60:	9301      	str	r3, [sp, #4]
   d4f62:	bd08      	pop	{r3, pc}
   d4f64:	00030268 	.word	0x00030268

000d4f68 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b02      	ldr	r3, [pc, #8]	; (d4f74 <netdb_getaddrinfo+0xc>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	68db      	ldr	r3, [r3, #12]
   d4f70:	9301      	str	r3, [sp, #4]
   d4f72:	bd08      	pop	{r3, pc}
   d4f74:	00030268 	.word	0x00030268

000d4f78 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4f78:	b508      	push	{r3, lr}
   d4f7a:	4b02      	ldr	r3, [pc, #8]	; (d4f84 <hal_spi_init+0xc>)
   d4f7c:	681b      	ldr	r3, [r3, #0]
   d4f7e:	69db      	ldr	r3, [r3, #28]
   d4f80:	9301      	str	r3, [sp, #4]
   d4f82:	bd08      	pop	{r3, pc}
   d4f84:	00030230 	.word	0x00030230

000d4f88 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4f88:	b508      	push	{r3, lr}
   d4f8a:	4b02      	ldr	r3, [pc, #8]	; (d4f94 <hal_spi_is_enabled+0xc>)
   d4f8c:	681b      	ldr	r3, [r3, #0]
   d4f8e:	6a1b      	ldr	r3, [r3, #32]
   d4f90:	9301      	str	r3, [sp, #4]
   d4f92:	bd08      	pop	{r3, pc}
   d4f94:	00030230 	.word	0x00030230

000d4f98 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4f98:	b508      	push	{r3, lr}
   d4f9a:	4b02      	ldr	r3, [pc, #8]	; (d4fa4 <hal_usart_init+0xc>)
   d4f9c:	681b      	ldr	r3, [r3, #0]
   d4f9e:	681b      	ldr	r3, [r3, #0]
   d4fa0:	9301      	str	r3, [sp, #4]
   d4fa2:	bd08      	pop	{r3, pc}
   d4fa4:	0003023c 	.word	0x0003023c

000d4fa8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4fa8:	b508      	push	{r3, lr}
   d4faa:	4b02      	ldr	r3, [pc, #8]	; (d4fb4 <hal_usart_write+0xc>)
   d4fac:	681b      	ldr	r3, [r3, #0]
   d4fae:	68db      	ldr	r3, [r3, #12]
   d4fb0:	9301      	str	r3, [sp, #4]
   d4fb2:	bd08      	pop	{r3, pc}
   d4fb4:	0003023c 	.word	0x0003023c

000d4fb8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4fb8:	b508      	push	{r3, lr}
   d4fba:	4b02      	ldr	r3, [pc, #8]	; (d4fc4 <hal_usart_available+0xc>)
   d4fbc:	681b      	ldr	r3, [r3, #0]
   d4fbe:	691b      	ldr	r3, [r3, #16]
   d4fc0:	9301      	str	r3, [sp, #4]
   d4fc2:	bd08      	pop	{r3, pc}
   d4fc4:	0003023c 	.word	0x0003023c

000d4fc8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4fc8:	b508      	push	{r3, lr}
   d4fca:	4b02      	ldr	r3, [pc, #8]	; (d4fd4 <hal_usart_read+0xc>)
   d4fcc:	681b      	ldr	r3, [r3, #0]
   d4fce:	695b      	ldr	r3, [r3, #20]
   d4fd0:	9301      	str	r3, [sp, #4]
   d4fd2:	bd08      	pop	{r3, pc}
   d4fd4:	0003023c 	.word	0x0003023c

000d4fd8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4fd8:	b508      	push	{r3, lr}
   d4fda:	4b02      	ldr	r3, [pc, #8]	; (d4fe4 <hal_usart_peek+0xc>)
   d4fdc:	681b      	ldr	r3, [r3, #0]
   d4fde:	699b      	ldr	r3, [r3, #24]
   d4fe0:	9301      	str	r3, [sp, #4]
   d4fe2:	bd08      	pop	{r3, pc}
   d4fe4:	0003023c 	.word	0x0003023c

000d4fe8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4fe8:	b508      	push	{r3, lr}
   d4fea:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <hal_usart_flush+0xc>)
   d4fec:	681b      	ldr	r3, [r3, #0]
   d4fee:	69db      	ldr	r3, [r3, #28]
   d4ff0:	9301      	str	r3, [sp, #4]
   d4ff2:	bd08      	pop	{r3, pc}
   d4ff4:	0003023c 	.word	0x0003023c

000d4ff8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4ff8:	b508      	push	{r3, lr}
   d4ffa:	4b02      	ldr	r3, [pc, #8]	; (d5004 <hal_usart_is_enabled+0xc>)
   d4ffc:	681b      	ldr	r3, [r3, #0]
   d4ffe:	6a1b      	ldr	r3, [r3, #32]
   d5000:	9301      	str	r3, [sp, #4]
   d5002:	bd08      	pop	{r3, pc}
   d5004:	0003023c 	.word	0x0003023c

000d5008 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5008:	b508      	push	{r3, lr}
   d500a:	4b02      	ldr	r3, [pc, #8]	; (d5014 <hal_usart_available_data_for_write+0xc>)
   d500c:	681b      	ldr	r3, [r3, #0]
   d500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5010:	9301      	str	r3, [sp, #4]
   d5012:	bd08      	pop	{r3, pc}
   d5014:	0003023c 	.word	0x0003023c

000d5018 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5018:	b508      	push	{r3, lr}
   d501a:	4b02      	ldr	r3, [pc, #8]	; (d5024 <HAL_USB_USART_Init+0xc>)
   d501c:	681b      	ldr	r3, [r3, #0]
   d501e:	681b      	ldr	r3, [r3, #0]
   d5020:	9301      	str	r3, [sp, #4]
   d5022:	bd08      	pop	{r3, pc}
   d5024:	0003024c 	.word	0x0003024c

000d5028 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5028:	b508      	push	{r3, lr}
   d502a:	4b02      	ldr	r3, [pc, #8]	; (d5034 <HAL_USB_USART_Begin+0xc>)
   d502c:	681b      	ldr	r3, [r3, #0]
   d502e:	685b      	ldr	r3, [r3, #4]
   d5030:	9301      	str	r3, [sp, #4]
   d5032:	bd08      	pop	{r3, pc}
   d5034:	0003024c 	.word	0x0003024c

000d5038 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5038:	b508      	push	{r3, lr}
   d503a:	4b02      	ldr	r3, [pc, #8]	; (d5044 <HAL_USB_USART_Available_Data+0xc>)
   d503c:	681b      	ldr	r3, [r3, #0]
   d503e:	691b      	ldr	r3, [r3, #16]
   d5040:	9301      	str	r3, [sp, #4]
   d5042:	bd08      	pop	{r3, pc}
   d5044:	0003024c 	.word	0x0003024c

000d5048 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5048:	b508      	push	{r3, lr}
   d504a:	4b02      	ldr	r3, [pc, #8]	; (d5054 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d504c:	681b      	ldr	r3, [r3, #0]
   d504e:	695b      	ldr	r3, [r3, #20]
   d5050:	9301      	str	r3, [sp, #4]
   d5052:	bd08      	pop	{r3, pc}
   d5054:	0003024c 	.word	0x0003024c

000d5058 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b02      	ldr	r3, [pc, #8]	; (d5064 <HAL_USB_USART_Receive_Data+0xc>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	699b      	ldr	r3, [r3, #24]
   d5060:	9301      	str	r3, [sp, #4]
   d5062:	bd08      	pop	{r3, pc}
   d5064:	0003024c 	.word	0x0003024c

000d5068 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5068:	b508      	push	{r3, lr}
   d506a:	4b02      	ldr	r3, [pc, #8]	; (d5074 <HAL_USB_USART_Send_Data+0xc>)
   d506c:	681b      	ldr	r3, [r3, #0]
   d506e:	69db      	ldr	r3, [r3, #28]
   d5070:	9301      	str	r3, [sp, #4]
   d5072:	bd08      	pop	{r3, pc}
   d5074:	0003024c 	.word	0x0003024c

000d5078 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5078:	b508      	push	{r3, lr}
   d507a:	4b02      	ldr	r3, [pc, #8]	; (d5084 <HAL_USB_USART_Flush_Data+0xc>)
   d507c:	681b      	ldr	r3, [r3, #0]
   d507e:	6a1b      	ldr	r3, [r3, #32]
   d5080:	9301      	str	r3, [sp, #4]
   d5082:	bd08      	pop	{r3, pc}
   d5084:	0003024c 	.word	0x0003024c

000d5088 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b02      	ldr	r3, [pc, #8]	; (d5094 <panic_+0xc>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5090:	9301      	str	r3, [sp, #4]
   d5092:	bd08      	pop	{r3, pc}
   d5094:	00030260 	.word	0x00030260

000d5098 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d5098:	b508      	push	{r3, lr}
   d509a:	4b02      	ldr	r3, [pc, #8]	; (d50a4 <jsmn_init+0xc>)
   d509c:	681b      	ldr	r3, [r3, #0]
   d509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d50a0:	9301      	str	r3, [sp, #4]
   d50a2:	bd08      	pop	{r3, pc}
   d50a4:	00030260 	.word	0x00030260

000d50a8 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b02      	ldr	r3, [pc, #8]	; (d50b4 <jsmn_parse+0xc>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d50b0:	9301      	str	r3, [sp, #4]
   d50b2:	bd08      	pop	{r3, pc}
   d50b4:	00030260 	.word	0x00030260

000d50b8 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d50b8:	b508      	push	{r3, lr}
   d50ba:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <log_message_v+0xc>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d50c0:	9301      	str	r3, [sp, #4]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	00030260 	.word	0x00030260

000d50c8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d50c8:	b508      	push	{r3, lr}
   d50ca:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <set_system_mode+0xc>)
   d50cc:	681b      	ldr	r3, [r3, #0]
   d50ce:	685b      	ldr	r3, [r3, #4]
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	bd08      	pop	{r3, pc}
   d50d4:	00030220 	.word	0x00030220

000d50d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <system_delay_ms+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	695b      	ldr	r3, [r3, #20]
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	00030220 	.word	0x00030220

000d50e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <application_thread_current+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	00030220 	.word	0x00030220

000d50f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b02      	ldr	r3, [pc, #8]	; (d5104 <application_thread_invoke+0xc>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5100:	9301      	str	r3, [sp, #4]
   d5102:	bd08      	pop	{r3, pc}
   d5104:	00030220 	.word	0x00030220

000d5108 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b03      	ldr	r3, [pc, #12]	; (d5118 <system_ctrl_set_app_request_handler+0x10>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5112:	9301      	str	r3, [sp, #4]
   d5114:	bd08      	pop	{r3, pc}
   d5116:	0000      	.short	0x0000
   d5118:	00030220 	.word	0x00030220

000d511c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b03      	ldr	r3, [pc, #12]	; (d512c <system_ctrl_set_result+0x10>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5126:	9301      	str	r3, [sp, #4]
   d5128:	bd08      	pop	{r3, pc}
   d512a:	0000      	.short	0x0000
   d512c:	00030220 	.word	0x00030220

000d5130 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <spark_cloud_flag_connected+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	695b      	ldr	r3, [r3, #20]
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030244 	.word	0x00030244

000d5140 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <spark_deviceID+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	69db      	ldr	r3, [r3, #28]
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	00030244 	.word	0x00030244

000d5150 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <spark_send_event+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	6a1b      	ldr	r3, [r3, #32]
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	00030244 	.word	0x00030244

000d5160 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b02      	ldr	r3, [pc, #8]	; (d516c <spark_subscribe+0xc>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5168:	9301      	str	r3, [sp, #4]
   d516a:	bd08      	pop	{r3, pc}
   d516c:	00030244 	.word	0x00030244

000d5170 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5170:	b508      	push	{r3, lr}
   d5172:	4b02      	ldr	r3, [pc, #8]	; (d517c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5174:	681b      	ldr	r3, [r3, #0]
   d5176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5178:	9301      	str	r3, [sp, #4]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	00030244 	.word	0x00030244

000d5180 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5180:	b508      	push	{r3, lr}
   d5182:	4b02      	ldr	r3, [pc, #8]	; (d518c <network_connect+0xc>)
   d5184:	681b      	ldr	r3, [r3, #0]
   d5186:	685b      	ldr	r3, [r3, #4]
   d5188:	9301      	str	r3, [sp, #4]
   d518a:	bd08      	pop	{r3, pc}
   d518c:	00030240 	.word	0x00030240

000d5190 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5190:	b508      	push	{r3, lr}
   d5192:	4b02      	ldr	r3, [pc, #8]	; (d519c <network_connecting+0xc>)
   d5194:	681b      	ldr	r3, [r3, #0]
   d5196:	689b      	ldr	r3, [r3, #8]
   d5198:	9301      	str	r3, [sp, #4]
   d519a:	bd08      	pop	{r3, pc}
   d519c:	00030240 	.word	0x00030240

000d51a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <network_disconnect+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	68db      	ldr	r3, [r3, #12]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	00030240 	.word	0x00030240

000d51b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <network_ready+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	691b      	ldr	r3, [r3, #16]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	00030240 	.word	0x00030240

000d51c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <network_on+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	695b      	ldr	r3, [r3, #20]
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	00030240 	.word	0x00030240

000d51d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <network_off+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	699b      	ldr	r3, [r3, #24]
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	00030240 	.word	0x00030240

000d51e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <network_listen+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	69db      	ldr	r3, [r3, #28]
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	00030240 	.word	0x00030240

000d51f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <network_listening+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	6a1b      	ldr	r3, [r3, #32]
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	00030240 	.word	0x00030240

000d5200 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <network_set_listen_timeout+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	00030240 	.word	0x00030240

000d5210 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <network_get_listen_timeout+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030240 	.word	0x00030240

000d5220 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <network_is_on+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030240 	.word	0x00030240

000d5230 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <network_is_off+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030240 	.word	0x00030240

000d5240 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <malloc+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	681b      	ldr	r3, [r3, #0]
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	0003021c 	.word	0x0003021c

000d5250 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <free+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	685b      	ldr	r3, [r3, #4]
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	0003021c 	.word	0x0003021c

000d5260 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <realloc+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	689b      	ldr	r3, [r3, #8]
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	0003021c 	.word	0x0003021c

000d5270 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <abort+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	0003021c 	.word	0x0003021c

000d5280 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <_malloc_r+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	0003021c 	.word	0x0003021c

000d5290 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <newlib_impure_ptr_callback+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	0003021c 	.word	0x0003021c

000d52a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d52a0:	2100      	movs	r1, #0
   d52a2:	f7ff bf19 	b.w	d50d8 <system_delay_ms>

000d52a6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d52a6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d52a8:	6883      	ldr	r3, [r0, #8]
   d52aa:	4604      	mov	r4, r0
   d52ac:	b90b      	cbnz	r3, d52b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d52ae:	f001 fbaa 	bl	d6a06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52b2:	68c3      	ldr	r3, [r0, #12]
   d52b4:	4798      	blx	r3
      if (_M_manager)
   d52b6:	68a3      	ldr	r3, [r4, #8]
   d52b8:	b11b      	cbz	r3, d52c2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52ba:	2203      	movs	r2, #3
   d52bc:	4621      	mov	r1, r4
   d52be:	4620      	mov	r0, r4
   d52c0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d52c2:	4620      	mov	r0, r4
   d52c4:	2110      	movs	r1, #16
}
   d52c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d52ca:	f001 bb96 	b.w	d69fa <_ZdlPvj>

000d52ce <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d52ce:	b510      	push	{r4, lr}
   d52d0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d52d2:	6800      	ldr	r0, [r0, #0]
   d52d4:	b108      	cbz	r0, d52da <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d52d6:	f7ff fd97 	bl	d4e08 <os_mutex_recursive_destroy>
    }
   d52da:	4620      	mov	r0, r4
   d52dc:	bd10      	pop	{r4, pc}

000d52de <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d52de:	b510      	push	{r4, lr}
      if (_M_manager)
   d52e0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d52e2:	4604      	mov	r4, r0
      if (_M_manager)
   d52e4:	b113      	cbz	r3, d52ec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52e6:	2203      	movs	r2, #3
   d52e8:	4601      	mov	r1, r0
   d52ea:	4798      	blx	r3
    }
   d52ec:	4620      	mov	r0, r4
   d52ee:	bd10      	pop	{r4, pc}

000d52f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d52f0:	b513      	push	{r0, r1, r4, lr}
   d52f2:	460b      	mov	r3, r1
   d52f4:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52f6:	e9d0 0100 	ldrd	r0, r1, [r0]
   d52fa:	466c      	mov	r4, sp
   d52fc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5300:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5304:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5308:	e894 0003 	ldmia.w	r4, {r0, r1}
   d530c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5310:	b002      	add	sp, #8
   d5312:	bd10      	pop	{r4, pc}

000d5314 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5314:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5316:	4c06      	ldr	r4, [pc, #24]	; (d5330 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5318:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d531a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d531c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d531e:	f7ff fd6b 	bl	d4df8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5322:	4620      	mov	r0, r4
   d5324:	4a03      	ldr	r2, [pc, #12]	; (d5334 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5326:	4904      	ldr	r1, [pc, #16]	; (d5338 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d532c:	f001 bb60 	b.w	d69f0 <__aeabi_atexit>
   d5330:	2003e61c 	.word	0x2003e61c
   d5334:	2003e5ec 	.word	0x2003e5ec
   d5338:	000d52cf 	.word	0x000d52cf

000d533c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d533c:	2200      	movs	r2, #0
   d533e:	6840      	ldr	r0, [r0, #4]
   d5340:	4611      	mov	r1, r2
   d5342:	f7ff bf35 	b.w	d51b0 <network_ready>

000d5346 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5346:	2200      	movs	r2, #0
   d5348:	6840      	ldr	r0, [r0, #4]
   d534a:	4611      	mov	r1, r2
   d534c:	f7ff bf50 	b.w	d51f0 <network_listening>

000d5350 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5350:	2200      	movs	r2, #0
   d5352:	6840      	ldr	r0, [r0, #4]
   d5354:	4611      	mov	r1, r2
   d5356:	f7ff bf5b 	b.w	d5210 <network_get_listen_timeout>

000d535a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d535a:	6840      	ldr	r0, [r0, #4]
   d535c:	2200      	movs	r2, #0
   d535e:	f7ff bf4f 	b.w	d5200 <network_set_listen_timeout>

000d5362 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5362:	6840      	ldr	r0, [r0, #4]
   d5364:	2200      	movs	r2, #0
   d5366:	f081 0101 	eor.w	r1, r1, #1
   d536a:	f7ff bf39 	b.w	d51e0 <network_listen>

000d536e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d536e:	2300      	movs	r3, #0
   d5370:	6840      	ldr	r0, [r0, #4]
   d5372:	461a      	mov	r2, r3
   d5374:	4619      	mov	r1, r3
   d5376:	f7ff bf2b 	b.w	d51d0 <network_off>

000d537a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d537a:	2300      	movs	r3, #0
   d537c:	6840      	ldr	r0, [r0, #4]
   d537e:	461a      	mov	r2, r3
   d5380:	4619      	mov	r1, r3
   d5382:	f7ff bf1d 	b.w	d51c0 <network_on>

000d5386 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5386:	2200      	movs	r2, #0
   d5388:	6840      	ldr	r0, [r0, #4]
   d538a:	4611      	mov	r1, r2
   d538c:	f7ff bf00 	b.w	d5190 <network_connecting>

000d5390 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5390:	6840      	ldr	r0, [r0, #4]
   d5392:	2200      	movs	r2, #0
   d5394:	2102      	movs	r1, #2
   d5396:	f7ff bf03 	b.w	d51a0 <network_disconnect>

000d539a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d539a:	2300      	movs	r3, #0
   d539c:	6840      	ldr	r0, [r0, #4]
   d539e:	461a      	mov	r2, r3
   d53a0:	f7ff beee 	b.w	d5180 <network_connect>

000d53a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d53a4:	4b08      	ldr	r3, [pc, #32]	; (d53c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d53a6:	b510      	push	{r4, lr}
   d53a8:	2428      	movs	r4, #40	; 0x28
   d53aa:	4622      	mov	r2, r4
   d53ac:	4618      	mov	r0, r3
   d53ae:	2100      	movs	r1, #0
   d53b0:	f002 f9d4 	bl	d775c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d53b4:	4b05      	ldr	r3, [pc, #20]	; (d53cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d53b6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d53b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d53bc:	6042      	str	r2, [r0, #4]
   d53be:	2204      	movs	r2, #4
   d53c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d53c2:	4a03      	ldr	r2, [pc, #12]	; (d53d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d53c4:	601a      	str	r2, [r3, #0]
   d53c6:	bd10      	pop	{r4, pc}
   d53c8:	2003e628 	.word	0x2003e628
   d53cc:	2003e620 	.word	0x2003e620
   d53d0:	000d9864 	.word	0x000d9864

000d53d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d53d4:	4770      	bx	lr

000d53d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d53d6:	2000      	movs	r0, #0
   d53d8:	4770      	bx	lr

000d53da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d53da:	b510      	push	{r4, lr}
   d53dc:	2110      	movs	r1, #16
   d53de:	4604      	mov	r4, r0
   d53e0:	f001 fb0b 	bl	d69fa <_ZdlPvj>
   d53e4:	4620      	mov	r0, r4
   d53e6:	bd10      	pop	{r4, pc}

000d53e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d53e8:	b508      	push	{r3, lr}
      { delete this; }
   d53ea:	f7ff fff6 	bl	d53da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d53ee:	bd08      	pop	{r3, pc}

000d53f0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d53f0:	b530      	push	{r4, r5, lr}
        type_(type) {
   d53f2:	2200      	movs	r2, #0
   d53f4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d53f8:	6002      	str	r2, [r0, #0]
   d53fa:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d53fc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d53fe:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5400:	680c      	ldr	r4, [r1, #0]
   d5402:	8085      	strh	r5, [r0, #4]
   d5404:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5406:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5408:	bd30      	pop	{r4, r5, pc}

000d540a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d540a:	b510      	push	{r4, lr}
   d540c:	4604      	mov	r4, r0
    free((void*)msg_);
   d540e:	6800      	ldr	r0, [r0, #0]
   d5410:	f7ff ff1e 	bl	d5250 <free>
}
   d5414:	4620      	mov	r0, r4
   d5416:	bd10      	pop	{r4, pc}

000d5418 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5418:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d541a:	68c4      	ldr	r4, [r0, #12]
   d541c:	b1f4      	cbz	r4, d545c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d541e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5420:	2b02      	cmp	r3, #2
   d5422:	d103      	bne.n	d542c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5424:	f104 000c 	add.w	r0, r4, #12
   d5428:	f7ff ffef 	bl	d540a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d542c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d542e:	b135      	cbz	r5, d543e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5430:	4628      	mov	r0, r5
   d5432:	f7ff ff54 	bl	d52de <_ZNSt14_Function_baseD1Ev>
   d5436:	2110      	movs	r1, #16
   d5438:	4628      	mov	r0, r5
   d543a:	f001 fade 	bl	d69fa <_ZdlPvj>
   d543e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5440:	b135      	cbz	r5, d5450 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5442:	4628      	mov	r0, r5
   d5444:	f7ff ff4b 	bl	d52de <_ZNSt14_Function_baseD1Ev>
   d5448:	2110      	movs	r1, #16
   d544a:	4628      	mov	r0, r5
   d544c:	f001 fad5 	bl	d69fa <_ZdlPvj>
   d5450:	4620      	mov	r0, r4
   d5452:	2114      	movs	r1, #20
   d5454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5458:	f001 bacf 	b.w	d69fa <_ZdlPvj>
   d545c:	bd38      	pop	{r3, r4, r5, pc}

000d545e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d545e:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5460:	460e      	mov	r6, r1
   d5462:	4604      	mov	r4, r0
   d5464:	f856 3b04 	ldr.w	r3, [r6], #4
   d5468:	9300      	str	r3, [sp, #0]
   d546a:	460d      	mov	r5, r1
   d546c:	a801      	add	r0, sp, #4
   d546e:	4631      	mov	r1, r6
   d5470:	f7fe ffd2 	bl	d4418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5474:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5476:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5478:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d547a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d547c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d547e:	2300      	movs	r3, #0
   d5480:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5482:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5484:	f7fe fefc 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5488:	4630      	mov	r0, r6
   d548a:	f7fe fef9 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d548e:	4628      	mov	r0, r5
   d5490:	2108      	movs	r1, #8
   d5492:	f001 fab2 	bl	d69fa <_ZdlPvj>
        return p;
    }
   d5496:	4620      	mov	r0, r4
   d5498:	b002      	add	sp, #8
   d549a:	bd70      	pop	{r4, r5, r6, pc}

000d549c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d549c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d549e:	b510      	push	{r4, lr}
      if (_M_empty())
   d54a0:	b90a      	cbnz	r2, d54a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d54a2:	f001 fab0 	bl	d6a06 <_ZSt25__throw_bad_function_callv>
    }
   d54a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54aa:	68c3      	ldr	r3, [r0, #12]
   d54ac:	4718      	bx	r3

000d54ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d54ae:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d54b0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d54b2:	f100 0110 	add.w	r1, r0, #16
   d54b6:	f7ff fff1 	bl	d549c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d54ba:	bd08      	pop	{r3, pc}

000d54bc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d54bc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d54be:	b510      	push	{r4, lr}
      if (_M_empty())
   d54c0:	b90a      	cbnz	r2, d54c6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d54c2:	f001 faa0 	bl	d6a06 <_ZSt25__throw_bad_function_callv>
    }
   d54c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54ca:	68c3      	ldr	r3, [r0, #12]
   d54cc:	4718      	bx	r3

000d54ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d54ce:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d54d0:	6800      	ldr	r0, [r0, #0]
   d54d2:	f100 0110 	add.w	r1, r0, #16
   d54d6:	f7ff fff1 	bl	d54bc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d54da:	bd08      	pop	{r3, pc}

000d54dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d54dc:	b538      	push	{r3, r4, r5, lr}
   d54de:	2300      	movs	r3, #0
   d54e0:	4604      	mov	r4, r0
   d54e2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d54e4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d54e6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d54e8:	f7fe fdd5 	bl	d4096 <_Znwj>
   d54ec:	b128      	cbz	r0, d54fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d54ee:	2301      	movs	r3, #1
   d54f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d54f4:	4b02      	ldr	r3, [pc, #8]	; (d5500 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d54f6:	6003      	str	r3, [r0, #0]
   d54f8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d54fa:	6020      	str	r0, [r4, #0]
	}
   d54fc:	4620      	mov	r0, r4
   d54fe:	bd38      	pop	{r3, r4, r5, pc}
   d5500:	000d98a0 	.word	0x000d98a0

000d5504 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5504:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5506:	2300      	movs	r3, #0
   d5508:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d550a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d550c:	4604      	mov	r4, r0
   d550e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5510:	b12b      	cbz	r3, d551e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5512:	2202      	movs	r2, #2
   d5514:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5516:	68eb      	ldr	r3, [r5, #12]
   d5518:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d551a:	68ab      	ldr	r3, [r5, #8]
   d551c:	60a3      	str	r3, [r4, #8]
    }
   d551e:	4620      	mov	r0, r4
   d5520:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5524 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5524:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5526:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5528:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d552a:	4668      	mov	r0, sp
   d552c:	f7ff ff60 	bl	d53f0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5530:	f04f 0302 	mov.w	r3, #2
   d5534:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5538:	2a00      	cmp	r2, #0
   d553a:	d103      	bne.n	d5544 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d553c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5540:	2900      	cmp	r1, #0
   d5542:	d1f7      	bne.n	d5534 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5544:	d125      	bne.n	d5592 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5546:	f104 050c 	add.w	r5, r4, #12
   d554a:	4669      	mov	r1, sp
   d554c:	4628      	mov	r0, r5
   d554e:	f7ff ff4f 	bl	d53f0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5552:	f3bf 8f5b 	dmb	ish
   d5556:	2301      	movs	r3, #1
   d5558:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d555a:	2000      	movs	r0, #0
   d555c:	f104 0308 	add.w	r3, r4, #8
   d5560:	f3bf 8f5b 	dmb	ish
   d5564:	e853 6f00 	ldrex	r6, [r3]
   d5568:	e843 0200 	strex	r2, r0, [r3]
   d556c:	2a00      	cmp	r2, #0
   d556e:	d1f9      	bne.n	d5564 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5570:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5574:	b16e      	cbz	r6, d5592 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5576:	f7ff fdb7 	bl	d50e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d557a:	b178      	cbz	r0, d559c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d557c:	4629      	mov	r1, r5
   d557e:	4630      	mov	r0, r6
   d5580:	f7ff ff8c 	bl	d549c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5584:	4630      	mov	r0, r6
   d5586:	f7ff feaa 	bl	d52de <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d558a:	2110      	movs	r1, #16
   d558c:	4630      	mov	r0, r6
   d558e:	f001 fa34 	bl	d69fa <_ZdlPvj>
        p_->setError(std::move(error));
   d5592:	4668      	mov	r0, sp
   d5594:	f7ff ff39 	bl	d540a <_ZN8particle5ErrorD1Ev>
    }
   d5598:	b009      	add	sp, #36	; 0x24
   d559a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d559c:	4631      	mov	r1, r6
   d559e:	a802      	add	r0, sp, #8
   d55a0:	f7ff ffb0 	bl	d5504 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d55a4:	68e0      	ldr	r0, [r4, #12]
   d55a6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d55aa:	b108      	cbz	r0, d55b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d55ac:	f002 f924 	bl	d77f8 <strdup>
        type_(type) {
   d55b0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d55b2:	2010      	movs	r0, #16
   d55b4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d55b8:	f7fe fd6d 	bl	d4096 <_Znwj>
   d55bc:	4605      	mov	r5, r0
   d55be:	b1e8      	cbz	r0, d55fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d55c0:	2700      	movs	r7, #0
   d55c2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55c4:	2018      	movs	r0, #24
   d55c6:	f7fe fd66 	bl	d4096 <_Znwj>
   d55ca:	4604      	mov	r4, r0
   d55cc:	b188      	cbz	r0, d55f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d55ce:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d55d0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d55d2:	a802      	add	r0, sp, #8
   d55d4:	f7ff fe8c 	bl	d52f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55d8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d55da:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d55dc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55de:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d55e0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d55e2:	a906      	add	r1, sp, #24
   d55e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d55e6:	60e3      	str	r3, [r4, #12]
   d55e8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d55ec:	9205      	str	r2, [sp, #20]
   d55ee:	f7ff feff 	bl	d53f0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d55f2:	4b08      	ldr	r3, [pc, #32]	; (d5614 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d55f4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55f6:	4b08      	ldr	r3, [pc, #32]	; (d5618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55f8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d55fa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d55fc:	a806      	add	r0, sp, #24
   d55fe:	f7ff ff04 	bl	d540a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5602:	a802      	add	r0, sp, #8
   d5604:	f7ff fe6b 	bl	d52de <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5608:	2200      	movs	r2, #0
   d560a:	4629      	mov	r1, r5
   d560c:	4803      	ldr	r0, [pc, #12]	; (d561c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d560e:	f7ff fd73 	bl	d50f8 <application_thread_invoke>
   d5612:	e7b7      	b.n	d5584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5614:	000d54af 	.word	0x000d54af
   d5618:	000d5745 	.word	0x000d5745
   d561c:	000d52a7 	.word	0x000d52a7

000d5620 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5624:	b08a      	sub	sp, #40	; 0x28
   d5626:	4605      	mov	r5, r0
   d5628:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d562c:	460c      	mov	r4, r1
   d562e:	4617      	mov	r7, r2
   d5630:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5632:	f7ff fd7d 	bl	d5130 <spark_cloud_flag_connected>
   d5636:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5638:	4682      	mov	sl, r0
   d563a:	bb38      	cbnz	r0, d568c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d563c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5640:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5642:	a905      	add	r1, sp, #20
   d5644:	4630      	mov	r0, r6
   d5646:	f8ad 3018 	strh.w	r3, [sp, #24]
   d564a:	f7ff fed1 	bl	d53f0 <_ZN8particle5ErrorC1EOS0_>
   d564e:	2014      	movs	r0, #20
   d5650:	f7fe fd21 	bl	d4096 <_Znwj>
   d5654:	4604      	mov	r4, r0
   d5656:	b148      	cbz	r0, d566c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5658:	2302      	movs	r3, #2
   d565a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d565c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d565e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5662:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5664:	4631      	mov	r1, r6
   d5666:	300c      	adds	r0, #12
   d5668:	f7ff fec2 	bl	d53f0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d566c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d566e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5670:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5674:	f7ff ff32 	bl	d54dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5678:	4630      	mov	r0, r6
   d567a:	f7ff fec6 	bl	d540a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d567e:	a805      	add	r0, sp, #20
   d5680:	f7ff fec3 	bl	d540a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5684:	4628      	mov	r0, r5
   d5686:	b00a      	add	sp, #40	; 0x28
   d5688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d568c:	230c      	movs	r3, #12
   d568e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5692:	2014      	movs	r0, #20
   d5694:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5698:	9307      	str	r3, [sp, #28]
   d569a:	f7fe fcfc 	bl	d4096 <_Znwj>
   d569e:	4601      	mov	r1, r0
   d56a0:	b128      	cbz	r0, d56ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d56a2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d56a6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d56aa:	f880 a001 	strb.w	sl, [r0, #1]
   d56ae:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d56b0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d56b2:	f7ff ff13 	bl	d54dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d56b6:	4b22      	ldr	r3, [pc, #136]	; (d5740 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d56b8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d56ba:	2008      	movs	r0, #8
   d56bc:	f7fe fceb 	bl	d4096 <_Znwj>
   d56c0:	4682      	mov	sl, r0
   d56c2:	b128      	cbz	r0, d56d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56c4:	9b03      	ldr	r3, [sp, #12]
   d56c6:	f840 3b04 	str.w	r3, [r0], #4
   d56ca:	a904      	add	r1, sp, #16
   d56cc:	f7fe fea4 	bl	d4418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d56d0:	9600      	str	r6, [sp, #0]
   d56d2:	fa5f f389 	uxtb.w	r3, r9
   d56d6:	4642      	mov	r2, r8
   d56d8:	4639      	mov	r1, r7
   d56da:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d56dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d56e0:	f7ff fd36 	bl	d5150 <spark_send_event>
   d56e4:	b9b8      	cbnz	r0, d5716 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d56e6:	9b03      	ldr	r3, [sp, #12]
   d56e8:	785b      	ldrb	r3, [r3, #1]
   d56ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d56ee:	b993      	cbnz	r3, d5716 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d56f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d56f4:	a905      	add	r1, sp, #20
   d56f6:	a803      	add	r0, sp, #12
   d56f8:	9205      	str	r2, [sp, #20]
   d56fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d56fe:	f7ff ff11 	bl	d5524 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5702:	a805      	add	r0, sp, #20
   d5704:	f7ff fe81 	bl	d540a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5708:	a805      	add	r0, sp, #20
   d570a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d570c:	f7ff fea7 	bl	d545e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5710:	a806      	add	r0, sp, #24
   d5712:	f7fe fdb5 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5716:	9b03      	ldr	r3, [sp, #12]
   d5718:	9305      	str	r3, [sp, #20]
   d571a:	a904      	add	r1, sp, #16
   d571c:	a806      	add	r0, sp, #24
   d571e:	f7fe fe7b 	bl	d4418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5722:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5724:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5726:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5728:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d572a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d572c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d572e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5730:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5732:	f7fe fda5 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5736:	a804      	add	r0, sp, #16
   d5738:	f7fe fda2 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d573c:	e7a2      	b.n	d5684 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d573e:	bf00      	nop
   d5740:	000d5809 	.word	0x000d5809

000d5744 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5744:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5748:	4605      	mov	r5, r0
	  switch (__op)
   d574a:	d007      	beq.n	d575c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d574c:	2a03      	cmp	r2, #3
   d574e:	d018      	beq.n	d5782 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5750:	2a01      	cmp	r2, #1
   d5752:	d101      	bne.n	d5758 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5754:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5756:	6003      	str	r3, [r0, #0]
	}
   d5758:	2000      	movs	r0, #0
   d575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d575c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d575e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5760:	f7fe fc99 	bl	d4096 <_Znwj>
   d5764:	4604      	mov	r4, r0
   d5766:	b150      	cbz	r0, d577e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5768:	4631      	mov	r1, r6
   d576a:	f7ff fecb 	bl	d5504 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d576e:	6930      	ldr	r0, [r6, #16]
   d5770:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5774:	b108      	cbz	r0, d577a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5776:	f002 f83f 	bl	d77f8 <strdup>
        type_(type) {
   d577a:	6120      	str	r0, [r4, #16]
   d577c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d577e:	602c      	str	r4, [r5, #0]
	}
   d5780:	e7ea      	b.n	d5758 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5782:	6804      	ldr	r4, [r0, #0]
   d5784:	2c00      	cmp	r4, #0
   d5786:	d0e7      	beq.n	d5758 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5788:	f104 0010 	add.w	r0, r4, #16
   d578c:	f7ff fe3d 	bl	d540a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5790:	4620      	mov	r0, r4
   d5792:	f7ff fda4 	bl	d52de <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5796:	2118      	movs	r1, #24
   d5798:	4620      	mov	r0, r4
   d579a:	f001 f92e 	bl	d69fa <_ZdlPvj>
   d579e:	e7db      	b.n	d5758 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d57a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d57a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d57a2:	2300      	movs	r3, #0
   d57a4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d57a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d57a8:	4604      	mov	r4, r0
   d57aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d57ac:	b12b      	cbz	r3, d57ba <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d57ae:	2202      	movs	r2, #2
   d57b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d57b2:	68eb      	ldr	r3, [r5, #12]
   d57b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d57b6:	68ab      	ldr	r3, [r5, #8]
   d57b8:	60a3      	str	r3, [r4, #8]
    }
   d57ba:	4620      	mov	r0, r4
   d57bc:	bd38      	pop	{r3, r4, r5, pc}

000d57be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d57be:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d57c0:	b570      	push	{r4, r5, r6, lr}
   d57c2:	4604      	mov	r4, r0
	  switch (__op)
   d57c4:	d007      	beq.n	d57d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d57c6:	2a03      	cmp	r2, #3
   d57c8:	d012      	beq.n	d57f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d57ca:	2a01      	cmp	r2, #1
   d57cc:	d101      	bne.n	d57d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d57ce:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d57d0:	6003      	str	r3, [r0, #0]
	}
   d57d2:	2000      	movs	r0, #0
   d57d4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d57d6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d57d8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d57da:	f7fe fc5c 	bl	d4096 <_Znwj>
   d57de:	4605      	mov	r5, r0
   d57e0:	b120      	cbz	r0, d57ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d57e2:	4631      	mov	r1, r6
   d57e4:	f7ff ffdc 	bl	d57a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d57e8:	7c33      	ldrb	r3, [r6, #16]
   d57ea:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d57ec:	6025      	str	r5, [r4, #0]
	}
   d57ee:	e7f0      	b.n	d57d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d57f0:	6804      	ldr	r4, [r0, #0]
   d57f2:	2c00      	cmp	r4, #0
   d57f4:	d0ed      	beq.n	d57d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d57f6:	4620      	mov	r0, r4
   d57f8:	f7ff fd71 	bl	d52de <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d57fc:	2114      	movs	r1, #20
   d57fe:	4620      	mov	r0, r4
   d5800:	f001 f8fb 	bl	d69fa <_ZdlPvj>
   d5804:	e7e5      	b.n	d57d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5808 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5808:	b5f0      	push	{r4, r5, r6, r7, lr}
   d580a:	b089      	sub	sp, #36	; 0x24
   d580c:	4604      	mov	r4, r0
   d580e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5810:	a801      	add	r0, sp, #4
   d5812:	4611      	mov	r1, r2
   d5814:	f7ff fe23 	bl	d545e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5818:	b1a4      	cbz	r4, d5844 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d581a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d581c:	b11d      	cbz	r5, d5826 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d581e:	4628      	mov	r0, r5
   d5820:	f001 ffea 	bl	d77f8 <strdup>
   d5824:	4605      	mov	r5, r0
   d5826:	a801      	add	r0, sp, #4
   d5828:	a903      	add	r1, sp, #12
        type_(type) {
   d582a:	9503      	str	r5, [sp, #12]
   d582c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5830:	f7ff fe78 	bl	d5524 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5834:	a803      	add	r0, sp, #12
   d5836:	f7ff fde8 	bl	d540a <_ZN8particle5ErrorD1Ev>
   d583a:	a802      	add	r0, sp, #8
   d583c:	f7fe fd20 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5840:	b009      	add	sp, #36	; 0x24
   d5842:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5844:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5846:	2301      	movs	r3, #1
   d5848:	e8d5 2f4f 	ldrexb	r2, [r5]
   d584c:	2a00      	cmp	r2, #0
   d584e:	d103      	bne.n	d5858 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5850:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5854:	2900      	cmp	r1, #0
   d5856:	d1f7      	bne.n	d5848 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5858:	d1ef      	bne.n	d583a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d585a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d585c:	f3bf 8f5b 	dmb	ish
   d5860:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5862:	1d2b      	adds	r3, r5, #4
   d5864:	f3bf 8f5b 	dmb	ish
   d5868:	e853 6f00 	ldrex	r6, [r3]
   d586c:	e843 4200 	strex	r2, r4, [r3]
   d5870:	2a00      	cmp	r2, #0
   d5872:	d1f9      	bne.n	d5868 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5874:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5878:	2e00      	cmp	r6, #0
   d587a:	d0de      	beq.n	d583a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d587c:	4620      	mov	r0, r4
   d587e:	f7ff fc33 	bl	d50e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5882:	4607      	mov	r7, r0
   d5884:	b160      	cbz	r0, d58a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5886:	f105 010c 	add.w	r1, r5, #12
   d588a:	4630      	mov	r0, r6
   d588c:	f7ff fe16 	bl	d54bc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5890:	4630      	mov	r0, r6
   d5892:	f7ff fd24 	bl	d52de <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5896:	2110      	movs	r1, #16
   d5898:	4630      	mov	r0, r6
   d589a:	f001 f8ae 	bl	d69fa <_ZdlPvj>
   d589e:	e7cc      	b.n	d583a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d58a0:	4631      	mov	r1, r6
   d58a2:	a803      	add	r0, sp, #12
   d58a4:	f7ff ff7c 	bl	d57a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d58a8:	7b2b      	ldrb	r3, [r5, #12]
   d58aa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d58ae:	2010      	movs	r0, #16
   d58b0:	f7fe fbf1 	bl	d4096 <_Znwj>
   d58b4:	4605      	mov	r5, r0
   d58b6:	b1d0      	cbz	r0, d58ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d58b8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d58ba:	2014      	movs	r0, #20
   d58bc:	f7fe fbeb 	bl	d4096 <_Znwj>
   d58c0:	4604      	mov	r4, r0
   d58c2:	b178      	cbz	r0, d58e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d58c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d58c6:	4601      	mov	r1, r0
   d58c8:	a803      	add	r0, sp, #12
   d58ca:	f7ff fd11 	bl	d52f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d58d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d58d2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d58d4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d58d6:	9205      	str	r2, [sp, #20]
   d58d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d58da:	60e3      	str	r3, [r4, #12]
   d58dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d58e0:	9206      	str	r2, [sp, #24]
   d58e2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d58e4:	4b06      	ldr	r3, [pc, #24]	; (d5900 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d58e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d58e8:	4b06      	ldr	r3, [pc, #24]	; (d5904 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d58ea:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d58ec:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d58ee:	a803      	add	r0, sp, #12
   d58f0:	f7ff fcf5 	bl	d52de <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d58f4:	2200      	movs	r2, #0
   d58f6:	4629      	mov	r1, r5
   d58f8:	4803      	ldr	r0, [pc, #12]	; (d5908 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d58fa:	f7ff fbfd 	bl	d50f8 <application_thread_invoke>
   d58fe:	e7c7      	b.n	d5890 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5900:	000d54cf 	.word	0x000d54cf
   d5904:	000d57bf 	.word	0x000d57bf
   d5908:	000d52a7 	.word	0x000d52a7

000d590c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d590c:	2200      	movs	r2, #0
   d590e:	6840      	ldr	r0, [r0, #4]
   d5910:	4611      	mov	r1, r2
   d5912:	f7ff bc6d 	b.w	d51f0 <network_listening>

000d5916 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5916:	2200      	movs	r2, #0
   d5918:	6840      	ldr	r0, [r0, #4]
   d591a:	4611      	mov	r1, r2
   d591c:	f7ff bc78 	b.w	d5210 <network_get_listen_timeout>

000d5920 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5920:	6840      	ldr	r0, [r0, #4]
   d5922:	2200      	movs	r2, #0
   d5924:	f7ff bc6c 	b.w	d5200 <network_set_listen_timeout>

000d5928 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5928:	6840      	ldr	r0, [r0, #4]
   d592a:	2200      	movs	r2, #0
   d592c:	f081 0101 	eor.w	r1, r1, #1
   d5930:	f7ff bc56 	b.w	d51e0 <network_listen>

000d5934 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5934:	2300      	movs	r3, #0
   d5936:	6840      	ldr	r0, [r0, #4]
   d5938:	461a      	mov	r2, r3
   d593a:	4619      	mov	r1, r3
   d593c:	f7ff bc48 	b.w	d51d0 <network_off>

000d5940 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5940:	2300      	movs	r3, #0
   d5942:	6840      	ldr	r0, [r0, #4]
   d5944:	461a      	mov	r2, r3
   d5946:	4619      	mov	r1, r3
   d5948:	f7ff bc3a 	b.w	d51c0 <network_on>

000d594c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d594c:	2200      	movs	r2, #0
   d594e:	6840      	ldr	r0, [r0, #4]
   d5950:	4611      	mov	r1, r2
   d5952:	f7ff bc2d 	b.w	d51b0 <network_ready>

000d5956 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5956:	2200      	movs	r2, #0
   d5958:	6840      	ldr	r0, [r0, #4]
   d595a:	4611      	mov	r1, r2
   d595c:	f7ff bc18 	b.w	d5190 <network_connecting>

000d5960 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5960:	6840      	ldr	r0, [r0, #4]
   d5962:	2200      	movs	r2, #0
   d5964:	2102      	movs	r1, #2
   d5966:	f7ff bc1b 	b.w	d51a0 <network_disconnect>

000d596a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d596a:	2300      	movs	r3, #0
   d596c:	6840      	ldr	r0, [r0, #4]
   d596e:	461a      	mov	r2, r3
   d5970:	f7ff bc06 	b.w	d5180 <network_connect>

000d5974 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5974:	4b02      	ldr	r3, [pc, #8]	; (d5980 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5976:	2203      	movs	r2, #3
   d5978:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d597a:	4a02      	ldr	r2, [pc, #8]	; (d5984 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d597c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d597e:	4770      	bx	lr
   d5980:	2003e650 	.word	0x2003e650
   d5984:	000d98bc 	.word	0x000d98bc

000d5988 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5988:	4770      	bx	lr

000d598a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d598c:	4606      	mov	r6, r0
   d598e:	4615      	mov	r5, r2
   d5990:	460c      	mov	r4, r1
   d5992:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5994:	42bc      	cmp	r4, r7
   d5996:	d006      	beq.n	d59a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5998:	6833      	ldr	r3, [r6, #0]
   d599a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d599e:	689b      	ldr	r3, [r3, #8]
   d59a0:	4630      	mov	r0, r6
   d59a2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d59a4:	e7f6      	b.n	d5994 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d59a6:	4628      	mov	r0, r5
   d59a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59aa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d59aa:	7c00      	ldrb	r0, [r0, #16]
   d59ac:	2200      	movs	r2, #0
   d59ae:	f7ff ba93 	b.w	d4ed8 <hal_i2c_write>

000d59b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d59b2:	7c00      	ldrb	r0, [r0, #16]
   d59b4:	2100      	movs	r1, #0
   d59b6:	f7ff ba97 	b.w	d4ee8 <hal_i2c_available>

000d59ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d59ba:	7c00      	ldrb	r0, [r0, #16]
   d59bc:	2100      	movs	r1, #0
   d59be:	f7ff ba9b 	b.w	d4ef8 <hal_i2c_read>

000d59c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d59c2:	7c00      	ldrb	r0, [r0, #16]
   d59c4:	2100      	movs	r1, #0
   d59c6:	f7ff ba9f 	b.w	d4f08 <hal_i2c_peek>

000d59ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d59ca:	7c00      	ldrb	r0, [r0, #16]
   d59cc:	2100      	movs	r1, #0
   d59ce:	f7ff baa3 	b.w	d4f18 <hal_i2c_flush>

000d59d2 <_ZN7TwoWireD0Ev>:
   d59d2:	b510      	push	{r4, lr}
   d59d4:	2114      	movs	r1, #20
   d59d6:	4604      	mov	r4, r0
   d59d8:	f001 f80f 	bl	d69fa <_ZdlPvj>
   d59dc:	4620      	mov	r0, r4
   d59de:	bd10      	pop	{r4, pc}

000d59e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d59e0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d59e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d59e6:	4604      	mov	r4, r0
   d59e8:	4608      	mov	r0, r1
   d59ea:	2100      	movs	r1, #0
   d59ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d59f0:	4b03      	ldr	r3, [pc, #12]	; (d5a00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d59f2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d59f4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d59f6:	4611      	mov	r1, r2
   d59f8:	f7ff fa9e 	bl	d4f38 <hal_i2c_init>
}
   d59fc:	4620      	mov	r0, r4
   d59fe:	bd10      	pop	{r4, pc}
   d5a00:	000d98f8 	.word	0x000d98f8

000d5a04 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5a04:	2300      	movs	r3, #0
   d5a06:	7c00      	ldrb	r0, [r0, #16]
   d5a08:	461a      	mov	r2, r3
   d5a0a:	4619      	mov	r1, r3
   d5a0c:	f7ff ba4c 	b.w	d4ea8 <hal_i2c_begin>

000d5a10 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5a10:	7c00      	ldrb	r0, [r0, #16]
   d5a12:	2200      	movs	r2, #0
   d5a14:	f7ff ba50 	b.w	d4eb8 <hal_i2c_begin_transmission>

000d5a18 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5a18:	b2c9      	uxtb	r1, r1
   d5a1a:	f7ff bff9 	b.w	d5a10 <_ZN7TwoWire17beginTransmissionEh>

000d5a1e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5a1e:	7c00      	ldrb	r0, [r0, #16]
   d5a20:	2200      	movs	r2, #0
   d5a22:	f7ff ba51 	b.w	d4ec8 <hal_i2c_end_transmission>

000d5a26 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5a26:	2101      	movs	r1, #1
   d5a28:	f7ff bff9 	b.w	d5a1e <_ZN7TwoWire15endTransmissionEh>

000d5a2c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5a2c:	f7ff ba34 	b.w	d4e98 <HAL_Interrupts_Disable_All>

000d5a30 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5a30:	f7ff ba2a 	b.w	d4e88 <HAL_Interrupts_Enable_All>

000d5a34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5a34:	4770      	bx	lr

000d5a36 <_ZN9IPAddressD0Ev>:
   d5a36:	b510      	push	{r4, lr}
   d5a38:	2118      	movs	r1, #24
   d5a3a:	4604      	mov	r4, r0
   d5a3c:	f000 ffdd 	bl	d69fa <_ZdlPvj>
   d5a40:	4620      	mov	r0, r4
   d5a42:	bd10      	pop	{r4, pc}

000d5a44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5a44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5a46:	7d03      	ldrb	r3, [r0, #20]
   d5a48:	2b06      	cmp	r3, #6
{
   d5a4a:	b08d      	sub	sp, #52	; 0x34
   d5a4c:	460e      	mov	r6, r1
   d5a4e:	f100 0704 	add.w	r7, r0, #4
   d5a52:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5a56:	d012      	beq.n	d5a7e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5a58:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5a5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5a60:	220a      	movs	r2, #10
   d5a62:	4630      	mov	r0, r6
   d5a64:	f000 fbb9 	bl	d61da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5a68:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5a6a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5a6c:	d019      	beq.n	d5aa2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5a6e:	2c00      	cmp	r4, #0
   d5a70:	d0f4      	beq.n	d5a5c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5a72:	212e      	movs	r1, #46	; 0x2e
   d5a74:	4630      	mov	r0, r6
   d5a76:	f000 fb97 	bl	d61a8 <_ZN5Print5printEc>
   d5a7a:	4404      	add	r4, r0
   d5a7c:	e7ee      	b.n	d5a5c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a7e:	232f      	movs	r3, #47	; 0x2f
   d5a80:	466a      	mov	r2, sp
   d5a82:	4639      	mov	r1, r7
   d5a84:	200a      	movs	r0, #10
		buf[0] = 0;
   d5a86:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5a8a:	f7ff fa5d 	bl	d4f48 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5a8e:	4668      	mov	r0, sp
   d5a90:	f001 fecf 	bl	d7832 <strlen>
   d5a94:	6833      	ldr	r3, [r6, #0]
   d5a96:	4602      	mov	r2, r0
   d5a98:	68db      	ldr	r3, [r3, #12]
   d5a9a:	4669      	mov	r1, sp
   d5a9c:	4630      	mov	r0, r6
   d5a9e:	4798      	blx	r3
   d5aa0:	4604      	mov	r4, r0
    }
    return n;
}
   d5aa2:	4620      	mov	r0, r4
   d5aa4:	b00d      	add	sp, #52	; 0x34
   d5aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5aa8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5aa8:	b510      	push	{r4, lr}
   d5aaa:	4b05      	ldr	r3, [pc, #20]	; (d5ac0 <_ZN9IPAddressC1Ev+0x18>)
   d5aac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5aae:	2211      	movs	r2, #17
   d5ab0:	f840 3b04 	str.w	r3, [r0], #4
   d5ab4:	2100      	movs	r1, #0
   d5ab6:	f001 fe51 	bl	d775c <memset>
}
   d5aba:	4620      	mov	r0, r4
   d5abc:	bd10      	pop	{r4, pc}
   d5abe:	bf00      	nop
   d5ac0:	000d9920 	.word	0x000d9920

000d5ac4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5ac4:	4603      	mov	r3, r0
   d5ac6:	4a07      	ldr	r2, [pc, #28]	; (d5ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5ac8:	b510      	push	{r4, lr}
   d5aca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5ace:	f101 0210 	add.w	r2, r1, #16
   d5ad2:	f851 4b04 	ldr.w	r4, [r1], #4
   d5ad6:	f843 4b04 	str.w	r4, [r3], #4
   d5ada:	4291      	cmp	r1, r2
   d5adc:	d1f9      	bne.n	d5ad2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5ade:	780a      	ldrb	r2, [r1, #0]
   d5ae0:	701a      	strb	r2, [r3, #0]
}
   d5ae2:	bd10      	pop	{r4, pc}
   d5ae4:	000d9920 	.word	0x000d9920

000d5ae8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5ae8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5aea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5aee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5af2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5af6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5afa:	2304      	movs	r3, #4
   d5afc:	6041      	str	r1, [r0, #4]
   d5afe:	7503      	strb	r3, [r0, #20]
}
   d5b00:	bd10      	pop	{r4, pc}
	...

000d5b04 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5b04:	b513      	push	{r0, r1, r4, lr}
   d5b06:	4b05      	ldr	r3, [pc, #20]	; (d5b1c <_ZN9IPAddressC1EPKh+0x18>)
   d5b08:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5b0a:	78cb      	ldrb	r3, [r1, #3]
   d5b0c:	9300      	str	r3, [sp, #0]
   d5b0e:	788b      	ldrb	r3, [r1, #2]
   d5b10:	784a      	ldrb	r2, [r1, #1]
   d5b12:	7809      	ldrb	r1, [r1, #0]
   d5b14:	f7ff ffe8 	bl	d5ae8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5b18:	b002      	add	sp, #8
   d5b1a:	bd10      	pop	{r4, pc}
   d5b1c:	000d9920 	.word	0x000d9920

000d5b20 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d5b20:	f100 0310 	add.w	r3, r0, #16
   d5b24:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d5b26:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d5b2a:	2901      	cmp	r1, #1
   d5b2c:	4618      	mov	r0, r3
   d5b2e:	d108      	bne.n	d5b42 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d5b30:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d5b34:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d5b38:	3a01      	subs	r2, #1
   d5b3a:	f103 0310 	add.w	r3, r3, #16
   d5b3e:	d1f2      	bne.n	d5b26 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d5b40:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d5b42:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d5b44:	bf04      	itt	eq
   d5b46:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d5b4a:	1852      	addeq	r2, r2, r1
   d5b4c:	e7f4      	b.n	d5b38 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d5b4e <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5b4e:	4770      	bx	lr

000d5b50 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5b50:	2000      	movs	r0, #0
   d5b52:	4770      	bx	lr

000d5b54 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5b54:	b510      	push	{r4, lr}
   d5b56:	2110      	movs	r1, #16
   d5b58:	4604      	mov	r4, r0
   d5b5a:	f000 ff4e 	bl	d69fa <_ZdlPvj>
   d5b5e:	4620      	mov	r0, r4
   d5b60:	bd10      	pop	{r4, pc}

000d5b62 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5b62:	b508      	push	{r3, lr}
      { delete this; }
   d5b64:	f7ff fff6 	bl	d5b54 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5b68:	bd08      	pop	{r3, pc}

000d5b6a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5b6a:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d5b6c:	68c4      	ldr	r4, [r0, #12]
   d5b6e:	b17c      	cbz	r4, d5b90 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d5b70:	6820      	ldr	r0, [r4, #0]
   d5b72:	b108      	cbz	r0, d5b78 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d5b74:	f7fe fa95 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d5b78:	7a23      	ldrb	r3, [r4, #8]
   d5b7a:	b11b      	cbz	r3, d5b84 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d5b7c:	6860      	ldr	r0, [r4, #4]
   d5b7e:	b108      	cbz	r0, d5b84 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d5b80:	f7fe fa8f 	bl	d40a2 <_ZdaPv>
   d5b84:	4620      	mov	r0, r4
   d5b86:	210c      	movs	r1, #12
   d5b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5b8c:	f000 bf35 	b.w	d69fa <_ZdlPvj>
   d5b90:	bd10      	pop	{r4, pc}

000d5b92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5b92:	b510      	push	{r4, lr}
          _M_dispose();
   d5b94:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5b96:	4604      	mov	r4, r0
          _M_dispose();
   d5b98:	689b      	ldr	r3, [r3, #8]
   d5b9a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5b9c:	68a3      	ldr	r3, [r4, #8]
   d5b9e:	3b01      	subs	r3, #1
   d5ba0:	60a3      	str	r3, [r4, #8]
   d5ba2:	b92b      	cbnz	r3, d5bb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5ba4:	6823      	ldr	r3, [r4, #0]
   d5ba6:	4620      	mov	r0, r4
   d5ba8:	68db      	ldr	r3, [r3, #12]
    }
   d5baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5bae:	4718      	bx	r3
    }
   d5bb0:	bd10      	pop	{r4, pc}

000d5bb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5bb2:	b538      	push	{r3, r4, r5, lr}
   d5bb4:	680b      	ldr	r3, [r1, #0]
   d5bb6:	6003      	str	r3, [r0, #0]
   d5bb8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5bba:	6843      	ldr	r3, [r0, #4]
   d5bbc:	429d      	cmp	r5, r3
    class __shared_ptr
   d5bbe:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5bc0:	d00c      	beq.n	d5bdc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5bc2:	b115      	cbz	r5, d5bca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5bc4:	686b      	ldr	r3, [r5, #4]
   d5bc6:	3301      	adds	r3, #1
   d5bc8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5bca:	6860      	ldr	r0, [r4, #4]
   d5bcc:	b128      	cbz	r0, d5bda <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d5bce:	6843      	ldr	r3, [r0, #4]
   d5bd0:	3b01      	subs	r3, #1
   d5bd2:	6043      	str	r3, [r0, #4]
   d5bd4:	b90b      	cbnz	r3, d5bda <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5bd6:	f7ff ffdc 	bl	d5b92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5bda:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5bdc:	4620      	mov	r0, r4
   d5bde:	bd38      	pop	{r3, r4, r5, pc}

000d5be0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5be0:	460b      	mov	r3, r1
   d5be2:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d5be4:	2200      	movs	r2, #0
   d5be6:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5be8:	e9c0 2200 	strd	r2, r2, [r0]
   d5bec:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d5bee:	6083      	str	r3, [r0, #8]
    if (t) {
   d5bf0:	b90b      	cbnz	r3, d5bf6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d5bf2:	4620      	mov	r0, r4
   d5bf4:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d5bf6:	f7ff ffdc 	bl	d5bb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5bfa:	e7fa      	b.n	d5bf2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5bfc <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d5bfc:	6883      	ldr	r3, [r0, #8]
   d5bfe:	b1eb      	cbz	r3, d5c3c <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d5c00:	781a      	ldrb	r2, [r3, #0]
   d5c02:	2a03      	cmp	r2, #3
   d5c04:	d81a      	bhi.n	d5c3c <_ZNK5spark9JSONValue4typeEv+0x40>
   d5c06:	e8df f002 	tbb	[pc, r2]
   d5c0a:	1704      	.short	0x1704
   d5c0c:	1b02      	.short	0x1b02
   d5c0e:	2005      	movs	r0, #5
   d5c10:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d5c12:	6802      	ldr	r2, [r0, #0]
   d5c14:	685b      	ldr	r3, [r3, #4]
   d5c16:	6852      	ldr	r2, [r2, #4]
   d5c18:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d5c1a:	282d      	cmp	r0, #45	; 0x2d
   d5c1c:	d012      	beq.n	d5c44 <_ZNK5spark9JSONValue4typeEv+0x48>
   d5c1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5c22:	2b09      	cmp	r3, #9
   d5c24:	d90e      	bls.n	d5c44 <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d5c26:	2874      	cmp	r0, #116	; 0x74
   d5c28:	d00e      	beq.n	d5c48 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d5c2a:	2866      	cmp	r0, #102	; 0x66
   d5c2c:	d00c      	beq.n	d5c48 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d5c2e:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d5c32:	4258      	negs	r0, r3
   d5c34:	4158      	adcs	r0, r3
   d5c36:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d5c38:	2006      	movs	r0, #6
   d5c3a:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d5c3c:	2000      	movs	r0, #0
   d5c3e:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d5c40:	2004      	movs	r0, #4
   d5c42:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d5c44:	2003      	movs	r0, #3
   d5c46:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d5c48:	2002      	movs	r0, #2
    }
}
   d5c4a:	4770      	bx	lr
   d5c4c:	0000      	movs	r0, r0
	...

000d5c50 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   d5c50:	b510      	push	{r4, lr}
   d5c52:	4604      	mov	r4, r0
    switch (type()) {
   d5c54:	f7ff ffd2 	bl	d5bfc <_ZNK5spark9JSONValue4typeEv>
   d5c58:	2802      	cmp	r0, #2
   d5c5a:	d00d      	beq.n	d5c78 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   d5c5c:	1ec3      	subs	r3, r0, #3
   d5c5e:	b2db      	uxtb	r3, r3
   d5c60:	2b01      	cmp	r3, #1
   d5c62:	d810      	bhi.n	d5c86 <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   d5c64:	6822      	ldr	r2, [r4, #0]
   d5c66:	68a3      	ldr	r3, [r4, #8]
   d5c68:	6850      	ldr	r0, [r2, #4]
   d5c6a:	685b      	ldr	r3, [r3, #4]
}
   d5c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   d5c70:	2100      	movs	r1, #0
   d5c72:	4418      	add	r0, r3
   d5c74:	f002 bc1e 	b.w	d84b4 <strtod>
        const char* const s = d_->json + t_->start;
   d5c78:	6822      	ldr	r2, [r4, #0]
   d5c7a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d5c7c:	6852      	ldr	r2, [r2, #4]
   d5c7e:	685b      	ldr	r3, [r3, #4]
   d5c80:	5cd3      	ldrb	r3, [r2, r3]
   d5c82:	2b74      	cmp	r3, #116	; 0x74
   d5c84:	d002      	beq.n	d5c8c <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   d5c86:	ed9f 0b04 	vldr	d0, [pc, #16]	; d5c98 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   d5c8a:	bd10      	pop	{r4, pc}
        return *s == 't';
   d5c8c:	ed9f 0b04 	vldr	d0, [pc, #16]	; d5ca0 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   d5c90:	e7fb      	b.n	d5c8a <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   d5c92:	bf00      	nop
   d5c94:	f3af 8000 	nop.w
	...
   d5ca4:	3ff00000 	.word	0x3ff00000

000d5ca8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5cac:	b086      	sub	sp, #24
   d5cae:	4607      	mov	r7, r0
   d5cb0:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   d5cb2:	a802      	add	r0, sp, #8
   d5cb4:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d5cb6:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5cb8:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d5cba:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d5cbc:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d5cbe:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d5cc0:	f7ff f9ea 	bl	d5098 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d5cc4:	e9cd 4400 	strd	r4, r4, [sp]
   d5cc8:	4623      	mov	r3, r4
   d5cca:	4642      	mov	r2, r8
   d5ccc:	4639      	mov	r1, r7
   d5cce:	a802      	add	r0, sp, #8
   d5cd0:	f7ff f9ea 	bl	d50a8 <jsmn_parse>
    if (n <= 0) {
   d5cd4:	1e06      	subs	r6, r0, #0
   d5cd6:	dd1e      	ble.n	d5d16 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d5cd8:	4910      	ldr	r1, [pc, #64]	; (d5d1c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d5cda:	0130      	lsls	r0, r6, #4
   d5cdc:	f000 fe91 	bl	d6a02 <_ZnajRKSt9nothrow_t>
    if (!t) {
   d5ce0:	4605      	mov	r5, r0
   d5ce2:	b190      	cbz	r0, d5d0a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d5ce4:	4621      	mov	r1, r4
   d5ce6:	a802      	add	r0, sp, #8
   d5ce8:	f7ff f9d6 	bl	d5098 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5cec:	e9cd 6400 	strd	r6, r4, [sp]
   d5cf0:	462b      	mov	r3, r5
   d5cf2:	4642      	mov	r2, r8
   d5cf4:	4639      	mov	r1, r7
   d5cf6:	a802      	add	r0, sp, #8
   d5cf8:	f7ff f9d6 	bl	d50a8 <jsmn_parse>
   d5cfc:	42a0      	cmp	r0, r4
   d5cfe:	dd07      	ble.n	d5d10 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   d5d00:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   d5d04:	2001      	movs	r0, #1
    *count = n;
   d5d06:	f8c9 6000 	str.w	r6, [r9]
}
   d5d0a:	b006      	add	sp, #24
   d5d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d10:	4628      	mov	r0, r5
   d5d12:	f7fe f9c6 	bl	d40a2 <_ZdaPv>
      }
   d5d16:	4620      	mov	r0, r4
   d5d18:	e7f7      	b.n	d5d0a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d5d1a:	bf00      	nop
   d5d1c:	000d9a04 	.word	0x000d9a04

000d5d20 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d5d24:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d5d26:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d5d28:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5d2a:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d5d2c:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5d2e:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d5d30:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d5d32:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d5d34:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d5d38:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d5d3c:	42b4      	cmp	r4, r6
   d5d3e:	d063      	beq.n	d5e08 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d5d40:	4625      	mov	r5, r4
   d5d42:	f815 2b01 	ldrb.w	r2, [r5], #1
   d5d46:	2a5c      	cmp	r2, #92	; 0x5c
   d5d48:	d12b      	bne.n	d5da2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d5d4a:	42a1      	cmp	r1, r4
   d5d4c:	d007      	beq.n	d5d5e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d5d4e:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d5d52:	4618      	mov	r0, r3
   d5d54:	465a      	mov	r2, fp
   d5d56:	f001 fce7 	bl	d7728 <memmove>
   d5d5a:	4603      	mov	r3, r0
                str += n;
   d5d5c:	445b      	add	r3, fp
            if (s == end) {
   d5d5e:	42b5      	cmp	r5, r6
   d5d60:	d039      	beq.n	d5dd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d5d62:	7862      	ldrb	r2, [r4, #1]
   d5d64:	2a75      	cmp	r2, #117	; 0x75
   d5d66:	d12a      	bne.n	d5dbe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d5d68:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d5d6a:	1ab2      	subs	r2, r6, r2
   d5d6c:	2a03      	cmp	r2, #3
   d5d6e:	dd32      	ble.n	d5dd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d5d70:	1da0      	adds	r0, r4, #6
   d5d72:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d5d76:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d5d7a:	45ae      	cmp	lr, r5
   d5d7c:	d053      	beq.n	d5e26 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d5d7e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d5d82:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d5d86:	fa5f fb82 	uxtb.w	fp, r2
   d5d8a:	f1bb 0f09 	cmp.w	fp, #9
   d5d8e:	d905      	bls.n	d5d9c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d5d90:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d5d94:	2a05      	cmp	r2, #5
   d5d96:	d807      	bhi.n	d5da8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d5d98:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d5d9c:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d5da0:	e7eb      	b.n	d5d7a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d5da2:	4628      	mov	r0, r5
   d5da4:	4604      	mov	r4, r0
   d5da6:	e7c9      	b.n	d5d3c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d5da8:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d5dac:	2a05      	cmp	r2, #5
   d5dae:	d812      	bhi.n	d5dd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d5db0:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d5db4:	e7f2      	b.n	d5d9c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d5db6:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d5dba:	4601      	mov	r1, r0
   d5dbc:	e7f2      	b.n	d5da4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d5dbe:	2a6e      	cmp	r2, #110	; 0x6e
   d5dc0:	d01c      	beq.n	d5dfc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d5dc2:	d80e      	bhi.n	d5de2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d5dc4:	2a62      	cmp	r2, #98	; 0x62
   d5dc6:	d013      	beq.n	d5df0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d5dc8:	d807      	bhi.n	d5dda <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d5dca:	2a2f      	cmp	r2, #47	; 0x2f
   d5dcc:	d011      	beq.n	d5df2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5dce:	2a5c      	cmp	r2, #92	; 0x5c
   d5dd0:	d00f      	beq.n	d5df2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5dd2:	2a22      	cmp	r2, #34	; 0x22
   d5dd4:	d00d      	beq.n	d5df2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d5dd6:	2000      	movs	r0, #0
   d5dd8:	e023      	b.n	d5e22 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d5dda:	2a66      	cmp	r2, #102	; 0x66
   d5ddc:	d1fb      	bne.n	d5dd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d5dde:	220c      	movs	r2, #12
   d5de0:	e007      	b.n	d5df2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d5de2:	2a72      	cmp	r2, #114	; 0x72
   d5de4:	d00d      	beq.n	d5e02 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d5de6:	2a74      	cmp	r2, #116	; 0x74
   d5de8:	d1f5      	bne.n	d5dd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d5dea:	f883 a000 	strb.w	sl, [r3]
                    break;
   d5dee:	e001      	b.n	d5df4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d5df0:	2208      	movs	r2, #8
   d5df2:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d5df4:	1ca1      	adds	r1, r4, #2
                ++str;
   d5df6:	3301      	adds	r3, #1
                ++s;
   d5df8:	4608      	mov	r0, r1
   d5dfa:	e7d3      	b.n	d5da4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d5dfc:	f04f 020a 	mov.w	r2, #10
   d5e00:	e7f7      	b.n	d5df2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d5e02:	f883 9000 	strb.w	r9, [r3]
                    break;
   d5e06:	e7f5      	b.n	d5df4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d5e08:	42a1      	cmp	r1, r4
   d5e0a:	d006      	beq.n	d5e1a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d5e0c:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d5e0e:	4618      	mov	r0, r3
   d5e10:	4622      	mov	r2, r4
   d5e12:	f001 fc89 	bl	d7728 <memmove>
   d5e16:	4603      	mov	r3, r0
        str += n;
   d5e18:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d5e1a:	eba3 0308 	sub.w	r3, r3, r8
   d5e1e:	60bb      	str	r3, [r7, #8]
    return true;
   d5e20:	2001      	movs	r0, #1
}
   d5e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d5e26:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d5e2a:	d9c4      	bls.n	d5db6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d5e2c:	4621      	mov	r1, r4
   d5e2e:	e7b9      	b.n	d5da4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d5e30 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d5e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e32:	4604      	mov	r4, r0
   d5e34:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d5e36:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d5e3a:	2700      	movs	r7, #0
    while (t != end) {
   d5e3c:	42b4      	cmp	r4, r6
   d5e3e:	d010      	beq.n	d5e62 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d5e40:	7823      	ldrb	r3, [r4, #0]
   d5e42:	2b03      	cmp	r3, #3
   d5e44:	d108      	bne.n	d5e58 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d5e46:	4629      	mov	r1, r5
   d5e48:	4620      	mov	r0, r4
   d5e4a:	f7ff ff69 	bl	d5d20 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d5e4e:	b148      	cbz	r0, d5e64 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d5e50:	68a3      	ldr	r3, [r4, #8]
   d5e52:	54ef      	strb	r7, [r5, r3]
        ++t;
   d5e54:	3410      	adds	r4, #16
    while (t != end) {
   d5e56:	e7f1      	b.n	d5e3c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d5e58:	2b00      	cmp	r3, #0
   d5e5a:	d1fb      	bne.n	d5e54 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d5e5c:	68a2      	ldr	r2, [r4, #8]
   d5e5e:	54ab      	strb	r3, [r5, r2]
   d5e60:	e7f8      	b.n	d5e54 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d5e62:	2001      	movs	r0, #1
}
   d5e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5e68 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5e68:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5e6a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5e6c:	e9c0 3300 	strd	r3, r3, [r0]
   d5e70:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5e72:	480e      	ldr	r0, [pc, #56]	; (d5eac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d5e74:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5e78:	b1a9      	cbz	r1, d5ea6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d5e7a:	780b      	ldrb	r3, [r1, #0]
   d5e7c:	2b03      	cmp	r3, #3
   d5e7e:	d006      	beq.n	d5e8e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5e80:	b98b      	cbnz	r3, d5ea6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5e82:	6813      	ldr	r3, [r2, #0]
   d5e84:	6858      	ldr	r0, [r3, #4]
   d5e86:	684b      	ldr	r3, [r1, #4]
   d5e88:	5cc3      	ldrb	r3, [r0, r3]
   d5e8a:	2b6e      	cmp	r3, #110	; 0x6e
   d5e8c:	d007      	beq.n	d5e9e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5e8e:	6813      	ldr	r3, [r2, #0]
   d5e90:	684d      	ldr	r5, [r1, #4]
   d5e92:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5e94:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d5e96:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d5e98:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d5e9a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5e9c:	60e3      	str	r3, [r4, #12]
   d5e9e:	4611      	mov	r1, r2
   d5ea0:	4620      	mov	r0, r4
   d5ea2:	f7ff fe86 	bl	d5bb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	bd38      	pop	{r3, r4, r5, pc}
   d5eaa:	bf00      	nop
   d5eac:	000d94dc 	.word	0x000d94dc

000d5eb0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5eb0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5eb2:	2500      	movs	r5, #0
   d5eb4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5eb6:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5eba:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5ebe:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5ec2:	4604      	mov	r4, r0
   d5ec4:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5ec6:	b14b      	cbz	r3, d5edc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5ec8:	781a      	ldrb	r2, [r3, #0]
   d5eca:	2a01      	cmp	r2, #1
   d5ecc:	d106      	bne.n	d5edc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5ece:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5ed2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5ed4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5ed6:	6143      	str	r3, [r0, #20]
   d5ed8:	f7ff fe6b 	bl	d5bb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5edc:	4620      	mov	r0, r4
   d5ede:	bd38      	pop	{r3, r4, r5, pc}

000d5ee0 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d5ee0:	b510      	push	{r4, lr}
    if (!n_) {
   d5ee2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d5ee4:	4604      	mov	r4, r0
    if (!n_) {
   d5ee6:	b163      	cbz	r3, d5f02 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d5ee8:	6880      	ldr	r0, [r0, #8]
   d5eea:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5eec:	3b01      	subs	r3, #1
    ++t_;
   d5eee:	3010      	adds	r0, #16
   d5ef0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5ef2:	6120      	str	r0, [r4, #16]
    --n_;
   d5ef4:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5ef6:	b113      	cbz	r3, d5efe <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d5ef8:	f7ff fe12 	bl	d5b20 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5efc:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d5efe:	2001      	movs	r0, #1
   d5f00:	e000      	b.n	d5f04 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d5f02:	4618      	mov	r0, r3
}
   d5f04:	bd10      	pop	{r4, pc}
	...

000d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5f08:	b538      	push	{r3, r4, r5, lr}
   d5f0a:	2300      	movs	r3, #0
   d5f0c:	4604      	mov	r4, r0
   d5f0e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f10:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5f12:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f14:	f7fe f8bf 	bl	d4096 <_Znwj>
   d5f18:	b128      	cbz	r0, d5f26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5f1a:	2301      	movs	r3, #1
   d5f1c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5f20:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5f22:	6003      	str	r3, [r0, #0]
   d5f24:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5f26:	6020      	str	r0, [r4, #0]
	}
   d5f28:	4620      	mov	r0, r4
   d5f2a:	bd38      	pop	{r3, r4, r5, pc}
   d5f2c:	000d9934 	.word	0x000d9934

000d5f30 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f32:	4604      	mov	r4, r0
   d5f34:	b087      	sub	sp, #28
   d5f36:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5f38:	200c      	movs	r0, #12
   d5f3a:	4927      	ldr	r1, [pc, #156]	; (d5fd8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5f3c:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5f3e:	f000 fd5e 	bl	d69fe <_ZnwjRKSt9nothrow_t>
   d5f42:	4601      	mov	r1, r0
   d5f44:	b118      	cbz	r0, d5f4e <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5f46:	2300      	movs	r3, #0
   d5f48:	e9c0 3300 	strd	r3, r3, [r0]
   d5f4c:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5f4e:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5f50:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5f52:	f7ff ffd9 	bl	d5f08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5f56:	9a02      	ldr	r2, [sp, #8]
   d5f58:	b942      	cbnz	r2, d5f6c <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5f5a:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5f5e:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5f60:	a803      	add	r0, sp, #12
   d5f62:	f7fe f98d 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5f66:	4620      	mov	r0, r4
   d5f68:	b007      	add	sp, #28
   d5f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5f6c:	2300      	movs	r3, #0
   d5f6e:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5f70:	4629      	mov	r1, r5
   d5f72:	ab01      	add	r3, sp, #4
   d5f74:	4630      	mov	r0, r6
   d5f76:	f7ff fe97 	bl	d5ca8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5f7a:	b918      	cbnz	r0, d5f84 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5f7c:	e9c4 0000 	strd	r0, r0, [r4]
   d5f80:	60a0      	str	r0, [r4, #8]
}
   d5f82:	e7ed      	b.n	d5f60 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5f84:	4914      	ldr	r1, [pc, #80]	; (d5fd8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5f86:	9f02      	ldr	r7, [sp, #8]
   d5f88:	1c68      	adds	r0, r5, #1
   d5f8a:	f000 fd3a 	bl	d6a02 <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5f8e:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5f90:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5f92:	6858      	ldr	r0, [r3, #4]
   d5f94:	2800      	cmp	r0, #0
   d5f96:	d0f1      	beq.n	d5f7c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5f98:	462a      	mov	r2, r5
   d5f9a:	4631      	mov	r1, r6
   d5f9c:	f001 fbb6 	bl	d770c <memcpy>
   d5fa0:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5fa2:	9901      	ldr	r1, [sp, #4]
   d5fa4:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5fa6:	2201      	movs	r2, #1
   d5fa8:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5faa:	685a      	ldr	r2, [r3, #4]
   d5fac:	f7ff ff40 	bl	d5e30 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5fb0:	2800      	cmp	r0, #0
   d5fb2:	d0e3      	beq.n	d5f7c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5fb4:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5fb6:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5fb8:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5fba:	9b03      	ldr	r3, [sp, #12]
   d5fbc:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5fbe:	b113      	cbz	r3, d5fc6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5fc0:	685a      	ldr	r2, [r3, #4]
   d5fc2:	3201      	adds	r2, #1
   d5fc4:	605a      	str	r2, [r3, #4]
   d5fc6:	aa04      	add	r2, sp, #16
   d5fc8:	4620      	mov	r0, r4
   d5fca:	f7ff fe09 	bl	d5be0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5fce:	a805      	add	r0, sp, #20
   d5fd0:	f7fe f956 	bl	d4280 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fd4:	e7c4      	b.n	d5f60 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5fd6:	bf00      	nop
   d5fd8:	000d9a04 	.word	0x000d9a04

000d5fdc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5fdc:	4b01      	ldr	r3, [pc, #4]	; (d5fe4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5fde:	4a02      	ldr	r2, [pc, #8]	; (d5fe8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5fe0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5fe2:	4770      	bx	lr
   d5fe4:	2003e658 	.word	0x2003e658
   d5fe8:	000d9948 	.word	0x000d9948

000d5fec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5fec:	2300      	movs	r3, #0
   d5fee:	6840      	ldr	r0, [r0, #4]
   d5ff0:	461a      	mov	r2, r3
   d5ff2:	f7ff b8c5 	b.w	d5180 <network_connect>

000d5ff6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ff6:	6840      	ldr	r0, [r0, #4]
   d5ff8:	2200      	movs	r2, #0
   d5ffa:	2102      	movs	r1, #2
   d5ffc:	f7ff b8d0 	b.w	d51a0 <network_disconnect>

000d6000 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6000:	2200      	movs	r2, #0
   d6002:	6840      	ldr	r0, [r0, #4]
   d6004:	4611      	mov	r1, r2
   d6006:	f7ff b8c3 	b.w	d5190 <network_connecting>

000d600a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d600a:	2200      	movs	r2, #0
   d600c:	6840      	ldr	r0, [r0, #4]
   d600e:	4611      	mov	r1, r2
   d6010:	f7ff b8ce 	b.w	d51b0 <network_ready>

000d6014 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6014:	2300      	movs	r3, #0
   d6016:	6840      	ldr	r0, [r0, #4]
   d6018:	461a      	mov	r2, r3
   d601a:	4619      	mov	r1, r3
   d601c:	f7ff b8d0 	b.w	d51c0 <network_on>

000d6020 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6020:	2300      	movs	r3, #0
   d6022:	6840      	ldr	r0, [r0, #4]
   d6024:	461a      	mov	r2, r3
   d6026:	4619      	mov	r1, r3
   d6028:	f7ff b8d2 	b.w	d51d0 <network_off>

000d602c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d602c:	6840      	ldr	r0, [r0, #4]
   d602e:	2100      	movs	r1, #0
   d6030:	f7ff b8f6 	b.w	d5220 <network_is_on>

000d6034 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6034:	6840      	ldr	r0, [r0, #4]
   d6036:	2100      	movs	r1, #0
   d6038:	f7ff b8fa 	b.w	d5230 <network_is_off>

000d603c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d603c:	6840      	ldr	r0, [r0, #4]
   d603e:	2200      	movs	r2, #0
   d6040:	f081 0101 	eor.w	r1, r1, #1
   d6044:	f7ff b8cc 	b.w	d51e0 <network_listen>

000d6048 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6048:	6840      	ldr	r0, [r0, #4]
   d604a:	2200      	movs	r2, #0
   d604c:	f7ff b8d8 	b.w	d5200 <network_set_listen_timeout>

000d6050 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6050:	2200      	movs	r2, #0
   d6052:	6840      	ldr	r0, [r0, #4]
   d6054:	4611      	mov	r1, r2
   d6056:	f7ff b8db 	b.w	d5210 <network_get_listen_timeout>

000d605a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d605a:	2200      	movs	r2, #0
   d605c:	6840      	ldr	r0, [r0, #4]
   d605e:	4611      	mov	r1, r2
   d6060:	f7ff b8c6 	b.w	d51f0 <network_listening>

000d6064 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6068:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d606a:	b095      	sub	sp, #84	; 0x54
   d606c:	4616      	mov	r6, r2
   d606e:	460d      	mov	r5, r1
   d6070:	4607      	mov	r7, r0
    IPAddress addr;
   d6072:	f7ff fd19 	bl	d5aa8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6076:	4621      	mov	r1, r4
   d6078:	2218      	movs	r2, #24
   d607a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d607c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d607e:	f001 fb6d 	bl	d775c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6082:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6084:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6088:	4621      	mov	r1, r4
   d608a:	466b      	mov	r3, sp
   d608c:	aa0c      	add	r2, sp, #48	; 0x30
   d608e:	4630      	mov	r0, r6
   d6090:	f7fe ff6a 	bl	d4f68 <netdb_getaddrinfo>
    if (!r) {
   d6094:	4604      	mov	r4, r0
   d6096:	2800      	cmp	r0, #0
   d6098:	d14c      	bne.n	d6134 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d609a:	4602      	mov	r2, r0
   d609c:	2101      	movs	r1, #1
   d609e:	6868      	ldr	r0, [r5, #4]
   d60a0:	f7ff f886 	bl	d51b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d60a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60a8:	4622      	mov	r2, r4
   d60aa:	6868      	ldr	r0, [r5, #4]
   d60ac:	f7ff f880 	bl	d51b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60b2:	4681      	mov	r9, r0
        bool ok = false;
   d60b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60b6:	2e00      	cmp	r6, #0
   d60b8:	d03c      	beq.n	d6134 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d60ba:	2900      	cmp	r1, #0
   d60bc:	d13a      	bne.n	d6134 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d60be:	6873      	ldr	r3, [r6, #4]
   d60c0:	2b02      	cmp	r3, #2
   d60c2:	d003      	beq.n	d60cc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d60c4:	2b0a      	cmp	r3, #10
   d60c6:	d011      	beq.n	d60ec <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60c8:	69f6      	ldr	r6, [r6, #28]
   d60ca:	e7f4      	b.n	d60b6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d60cc:	f1b8 0f00 	cmp.w	r8, #0
   d60d0:	d00a      	beq.n	d60e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d60d2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d60d4:	a806      	add	r0, sp, #24
   d60d6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d60d8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d60da:	f7ff fd13 	bl	d5b04 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d60de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60e0:	1d3c      	adds	r4, r7, #4
   d60e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60e4:	682b      	ldr	r3, [r5, #0]
   d60e6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d60e8:	4641      	mov	r1, r8
   d60ea:	e7ed      	b.n	d60c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d60ec:	f1b9 0f00 	cmp.w	r9, #0
   d60f0:	d101      	bne.n	d60f6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d60f2:	4649      	mov	r1, r9
   d60f4:	e7e8      	b.n	d60c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d60f6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d60f8:	2210      	movs	r2, #16
   d60fa:	a801      	add	r0, sp, #4
   d60fc:	f001 fb2e 	bl	d775c <memset>
                    a.v = 6;
   d6100:	2306      	movs	r3, #6
   d6102:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6106:	ad01      	add	r5, sp, #4
   d6108:	f104 0308 	add.w	r3, r4, #8
   d610c:	3418      	adds	r4, #24
   d610e:	6818      	ldr	r0, [r3, #0]
   d6110:	6859      	ldr	r1, [r3, #4]
   d6112:	462a      	mov	r2, r5
   d6114:	c203      	stmia	r2!, {r0, r1}
   d6116:	3308      	adds	r3, #8
   d6118:	42a3      	cmp	r3, r4
   d611a:	4615      	mov	r5, r2
   d611c:	d1f7      	bne.n	d610e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d611e:	a901      	add	r1, sp, #4
   d6120:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6122:	ad07      	add	r5, sp, #28
   d6124:	f7ff fcce 	bl	d5ac4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d612a:	1d3c      	adds	r4, r7, #4
   d612c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d612e:	682b      	ldr	r3, [r5, #0]
   d6130:	7023      	strb	r3, [r4, #0]
   d6132:	e7de      	b.n	d60f2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6134:	9800      	ldr	r0, [sp, #0]
   d6136:	f7fe ff0f 	bl	d4f58 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d613a:	4638      	mov	r0, r7
   d613c:	b015      	add	sp, #84	; 0x54
   d613e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6144 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6144:	4b02      	ldr	r3, [pc, #8]	; (d6150 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6146:	4a03      	ldr	r2, [pc, #12]	; (d6154 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6148:	601a      	str	r2, [r3, #0]
   d614a:	2200      	movs	r2, #0
   d614c:	605a      	str	r2, [r3, #4]

} // spark
   d614e:	4770      	bx	lr
   d6150:	2003e65c 	.word	0x2003e65c
   d6154:	000d9954 	.word	0x000d9954

000d6158 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d615a:	4606      	mov	r6, r0
   d615c:	460d      	mov	r5, r1
  size_t n = 0;
   d615e:	188f      	adds	r7, r1, r2
   d6160:	2400      	movs	r4, #0
  while (size--) {
   d6162:	42bd      	cmp	r5, r7
   d6164:	d00c      	beq.n	d6180 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6166:	6833      	ldr	r3, [r6, #0]
   d6168:	f815 1b01 	ldrb.w	r1, [r5], #1
   d616c:	689b      	ldr	r3, [r3, #8]
   d616e:	4630      	mov	r0, r6
   d6170:	4798      	blx	r3
     if (chunk>=0)
   d6172:	1e03      	subs	r3, r0, #0
   d6174:	db01      	blt.n	d617a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6176:	441c      	add	r4, r3
  while (size--) {
   d6178:	e7f3      	b.n	d6162 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d617a:	2c00      	cmp	r4, #0
   d617c:	bf08      	it	eq
   d617e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6180:	4620      	mov	r0, r4
   d6182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6184 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6184:	b513      	push	{r0, r1, r4, lr}
   d6186:	4604      	mov	r4, r0
    }
   d6188:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d618a:	b159      	cbz	r1, d61a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d618c:	9101      	str	r1, [sp, #4]
   d618e:	f001 fb50 	bl	d7832 <strlen>
   d6192:	6823      	ldr	r3, [r4, #0]
   d6194:	9901      	ldr	r1, [sp, #4]
   d6196:	68db      	ldr	r3, [r3, #12]
   d6198:	4602      	mov	r2, r0
   d619a:	4620      	mov	r0, r4
    }
   d619c:	b002      	add	sp, #8
   d619e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d61a2:	4718      	bx	r3
    }
   d61a4:	b002      	add	sp, #8
   d61a6:	bd10      	pop	{r4, pc}

000d61a8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d61a8:	6803      	ldr	r3, [r0, #0]
   d61aa:	689b      	ldr	r3, [r3, #8]
   d61ac:	4718      	bx	r3

000d61ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d61ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d61b0:	210d      	movs	r1, #13
{
   d61b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d61b4:	f7ff fff8 	bl	d61a8 <_ZN5Print5printEc>
  n += print('\n');
   d61b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d61ba:	4604      	mov	r4, r0
  n += print('\n');
   d61bc:	4628      	mov	r0, r5
   d61be:	f7ff fff3 	bl	d61a8 <_ZN5Print5printEc>
  return n;
}
   d61c2:	4420      	add	r0, r4
   d61c4:	bd38      	pop	{r3, r4, r5, pc}

000d61c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d61c6:	b538      	push	{r3, r4, r5, lr}
   d61c8:	4605      	mov	r5, r0
  return write(str);
   d61ca:	f7ff ffdb 	bl	d6184 <_ZN5Print5writeEPKc>
   d61ce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d61d0:	4628      	mov	r0, r5
   d61d2:	f7ff ffec 	bl	d61ae <_ZN5Print7printlnEv>
  return n;
}
   d61d6:	4420      	add	r0, r4
   d61d8:	bd38      	pop	{r3, r4, r5, pc}

000d61da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d61da:	b530      	push	{r4, r5, lr}
   d61dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d61de:	2300      	movs	r3, #0
   d61e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d61e4:	2a01      	cmp	r2, #1
   d61e6:	bf98      	it	ls
   d61e8:	220a      	movls	r2, #10
   d61ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d61ec:	460d      	mov	r5, r1
   d61ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d61f2:	fb01 5312 	mls	r3, r1, r2, r5
   d61f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61fa:	2b09      	cmp	r3, #9
   d61fc:	bf94      	ite	ls
   d61fe:	3330      	addls	r3, #48	; 0x30
   d6200:	3337      	addhi	r3, #55	; 0x37
   d6202:	b2db      	uxtb	r3, r3
  } while(n);
   d6204:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6206:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d620a:	d9ef      	bls.n	d61ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d620c:	4621      	mov	r1, r4
   d620e:	f7ff ffb9 	bl	d6184 <_ZN5Print5writeEPKc>
}
   d6212:	b00b      	add	sp, #44	; 0x2c
   d6214:	bd30      	pop	{r4, r5, pc}

000d6216 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6216:	b510      	push	{r4, lr}
   d6218:	4604      	mov	r4, r0
   d621a:	f7ff f860 	bl	d52de <_ZNSt14_Function_baseD1Ev>
   d621e:	4620      	mov	r0, r4
   d6220:	bd10      	pop	{r4, pc}
	...

000d6224 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6224:	4803      	ldr	r0, [pc, #12]	; (d6234 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6226:	4a04      	ldr	r2, [pc, #16]	; (d6238 <_GLOBAL__sub_I_RGB+0x14>)
   d6228:	4904      	ldr	r1, [pc, #16]	; (d623c <_GLOBAL__sub_I_RGB+0x18>)
   d622a:	2300      	movs	r3, #0
   d622c:	6083      	str	r3, [r0, #8]
   d622e:	f000 bbdf 	b.w	d69f0 <__aeabi_atexit>
   d6232:	bf00      	nop
   d6234:	2003e664 	.word	0x2003e664
   d6238:	2003e5ec 	.word	0x2003e5ec
   d623c:	000d6217 	.word	0x000d6217

000d6240 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6240:	b510      	push	{r4, lr}
   d6242:	4604      	mov	r4, r0
   d6244:	4608      	mov	r0, r1
{
    _spi = spi;
   d6246:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6248:	f7fe fe96 	bl	d4f78 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d624c:	2300      	movs	r3, #0
   d624e:	6063      	str	r3, [r4, #4]
}
   d6250:	4620      	mov	r0, r4
   d6252:	bd10      	pop	{r4, pc}

000d6254 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6258:	ec57 6b10 	vmov	r6, r7, d0
   d625c:	4680      	mov	r8, r0
   d625e:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d6260:	ee10 0a10 	vmov	r0, s0
   d6264:	2200      	movs	r2, #0
   d6266:	2300      	movs	r3, #0
   d6268:	4639      	mov	r1, r7
   d626a:	f001 f807 	bl	d727c <__aeabi_dcmplt>
   d626e:	b128      	cbz	r0, d627c <_Z4dtoadhPc+0x28>
        val = -val;
   d6270:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d6274:	461f      	mov	r7, r3
        *sout++ = '-';
   d6276:	232d      	movs	r3, #45	; 0x2d
   d6278:	f804 3b01 	strb.w	r3, [r4], #1
   d627c:	2300      	movs	r3, #0
    }
    long scale = 1;
   d627e:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6282:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d6284:	b2d9      	uxtb	r1, r3
   d6286:	4588      	cmp	r8, r1
   d6288:	d903      	bls.n	d6292 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d628a:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d628e:	3301      	adds	r3, #1
   d6290:	e7f8      	b.n	d6284 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d6292:	4648      	mov	r0, r9
   d6294:	f000 fd16 	bl	d6cc4 <__aeabi_i2d>
   d6298:	4632      	mov	r2, r6
   d629a:	463b      	mov	r3, r7
   d629c:	f000 fd7c 	bl	d6d98 <__aeabi_dmul>
   d62a0:	4606      	mov	r6, r0
   d62a2:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d62a4:	f001 f89a 	bl	d73dc <__aeabi_d2ulz>
   d62a8:	4605      	mov	r5, r0
   d62aa:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d62ac:	f000 fd3e 	bl	d6d2c <__aeabi_ul2d>
   d62b0:	4602      	mov	r2, r0
   d62b2:	460b      	mov	r3, r1
   d62b4:	4630      	mov	r0, r6
   d62b6:	4639      	mov	r1, r7
   d62b8:	f000 fbb6 	bl	d6a28 <__aeabi_dsub>
   d62bc:	4b13      	ldr	r3, [pc, #76]	; (d630c <_Z4dtoadhPc+0xb8>)
   d62be:	2200      	movs	r2, #0
   d62c0:	f000 fff0 	bl	d72a4 <__aeabi_dcmpge>
   d62c4:	b110      	cbz	r0, d62cc <_Z4dtoadhPc+0x78>
        fixed++;
   d62c6:	3501      	adds	r5, #1
   d62c8:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d62cc:	464a      	mov	r2, r9
   d62ce:	4628      	mov	r0, r5
   d62d0:	17d3      	asrs	r3, r2, #31
   d62d2:	4651      	mov	r1, sl
   d62d4:	f001 f86a 	bl	d73ac <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d62d8:	2301      	movs	r3, #1
   d62da:	4615      	mov	r5, r2
   d62dc:	4621      	mov	r1, r4
   d62de:	220a      	movs	r2, #10
   d62e0:	f000 fa21 	bl	d6726 <ultoa>
    if (prec) {
   d62e4:	f1b8 0f00 	cmp.w	r8, #0
   d62e8:	d00d      	beq.n	d6306 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d62ea:	4620      	mov	r0, r4
   d62ec:	f001 faa1 	bl	d7832 <strlen>
        *sout++ = '.';
   d62f0:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d62f2:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d62f4:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d62f6:	220a      	movs	r2, #10
   d62f8:	4643      	mov	r3, r8
   d62fa:	4628      	mov	r0, r5
   d62fc:	3101      	adds	r1, #1
    }
}
   d62fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d6302:	f000 ba10 	b.w	d6726 <ultoa>
}
   d6306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d630a:	bf00      	nop
   d630c:	3fe00000 	.word	0x3fe00000

000d6310 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6310:	b510      	push	{r4, lr}
   d6312:	4604      	mov	r4, r0
{
	free(buffer);
   d6314:	6800      	ldr	r0, [r0, #0]
   d6316:	f7fe ff9b 	bl	d5250 <free>
}
   d631a:	4620      	mov	r0, r4
   d631c:	bd10      	pop	{r4, pc}

000d631e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d631e:	b510      	push	{r4, lr}
   d6320:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6322:	6800      	ldr	r0, [r0, #0]
   d6324:	b108      	cbz	r0, d632a <_ZN6String10invalidateEv+0xc>
   d6326:	f7fe ff93 	bl	d5250 <free>
	buffer = NULL;
   d632a:	2300      	movs	r3, #0
	capacity = len = 0;
   d632c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6330:	6023      	str	r3, [r4, #0]
}
   d6332:	bd10      	pop	{r4, pc}

000d6334 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6334:	b538      	push	{r3, r4, r5, lr}
   d6336:	4604      	mov	r4, r0
   d6338:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d633a:	6800      	ldr	r0, [r0, #0]
   d633c:	3101      	adds	r1, #1
   d633e:	f7fe ff8f 	bl	d5260 <realloc>
	if (newbuffer) {
   d6342:	b110      	cbz	r0, d634a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6344:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6348:	2001      	movs	r0, #1
	}
	return 0;
}
   d634a:	bd38      	pop	{r3, r4, r5, pc}

000d634c <_ZN6String7reserveEj>:
{
   d634c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d634e:	6803      	ldr	r3, [r0, #0]
{
   d6350:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6352:	b123      	cbz	r3, d635e <_ZN6String7reserveEj+0x12>
   d6354:	6843      	ldr	r3, [r0, #4]
   d6356:	428b      	cmp	r3, r1
   d6358:	d301      	bcc.n	d635e <_ZN6String7reserveEj+0x12>
   d635a:	2001      	movs	r0, #1
}
   d635c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d635e:	4620      	mov	r0, r4
   d6360:	f7ff ffe8 	bl	d6334 <_ZN6String12changeBufferEj>
   d6364:	2800      	cmp	r0, #0
   d6366:	d0f9      	beq.n	d635c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6368:	68a3      	ldr	r3, [r4, #8]
   d636a:	2b00      	cmp	r3, #0
   d636c:	d1f5      	bne.n	d635a <_ZN6String7reserveEj+0xe>
   d636e:	6822      	ldr	r2, [r4, #0]
   d6370:	7013      	strb	r3, [r2, #0]
   d6372:	e7f2      	b.n	d635a <_ZN6String7reserveEj+0xe>

000d6374 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6374:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6376:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6378:	4611      	mov	r1, r2
   d637a:	9201      	str	r2, [sp, #4]
{
   d637c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d637e:	f7ff ffe5 	bl	d634c <_ZN6String7reserveEj>
   d6382:	9a01      	ldr	r2, [sp, #4]
   d6384:	b928      	cbnz	r0, d6392 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6386:	4620      	mov	r0, r4
   d6388:	f7ff ffc9 	bl	d631e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d638c:	4620      	mov	r0, r4
   d638e:	b003      	add	sp, #12
   d6390:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6392:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6394:	4629      	mov	r1, r5
   d6396:	6820      	ldr	r0, [r4, #0]
   d6398:	f001 f9b8 	bl	d770c <memcpy>
	buffer[len] = 0;
   d639c:	6822      	ldr	r2, [r4, #0]
   d639e:	68a3      	ldr	r3, [r4, #8]
   d63a0:	2100      	movs	r1, #0
   d63a2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d63a4:	e7f2      	b.n	d638c <_ZN6String4copyEPKcj+0x18>

000d63a6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d63a6:	4288      	cmp	r0, r1
{
   d63a8:	b510      	push	{r4, lr}
   d63aa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d63ac:	d005      	beq.n	d63ba <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d63ae:	680b      	ldr	r3, [r1, #0]
   d63b0:	b12b      	cbz	r3, d63be <_ZN6StringaSERKS_+0x18>
   d63b2:	688a      	ldr	r2, [r1, #8]
   d63b4:	4619      	mov	r1, r3
   d63b6:	f7ff ffdd 	bl	d6374 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d63ba:	4620      	mov	r0, r4
   d63bc:	bd10      	pop	{r4, pc}
	else invalidate();
   d63be:	f7ff ffae 	bl	d631e <_ZN6String10invalidateEv>
   d63c2:	e7fa      	b.n	d63ba <_ZN6StringaSERKS_+0x14>

000d63c4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d63c4:	b510      	push	{r4, lr}
	buffer = NULL;
   d63c6:	2300      	movs	r3, #0
String::String(const String &value)
   d63c8:	4604      	mov	r4, r0
	capacity = 0;
   d63ca:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d63ce:	6083      	str	r3, [r0, #8]
	flags = 0;
   d63d0:	7303      	strb	r3, [r0, #12]
	*this = value;
   d63d2:	f7ff ffe8 	bl	d63a6 <_ZN6StringaSERKS_>
}
   d63d6:	4620      	mov	r0, r4
   d63d8:	bd10      	pop	{r4, pc}

000d63da <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d63da:	b513      	push	{r0, r1, r4, lr}
   d63dc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d63de:	b159      	cbz	r1, d63f8 <_ZN6StringaSEPKc+0x1e>
   d63e0:	4608      	mov	r0, r1
   d63e2:	9101      	str	r1, [sp, #4]
   d63e4:	f001 fa25 	bl	d7832 <strlen>
   d63e8:	9901      	ldr	r1, [sp, #4]
   d63ea:	4602      	mov	r2, r0
   d63ec:	4620      	mov	r0, r4
   d63ee:	f7ff ffc1 	bl	d6374 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d63f2:	4620      	mov	r0, r4
   d63f4:	b002      	add	sp, #8
   d63f6:	bd10      	pop	{r4, pc}
	else invalidate();
   d63f8:	f7ff ff91 	bl	d631e <_ZN6String10invalidateEv>
   d63fc:	e7f9      	b.n	d63f2 <_ZN6StringaSEPKc+0x18>

000d63fe <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d63fe:	b530      	push	{r4, r5, lr}
   d6400:	4604      	mov	r4, r0
	buffer = NULL;
   d6402:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d6404:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d6406:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d640a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d640c:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d640e:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d6412:	b2cd      	uxtb	r5, r1
   d6414:	f000 fc68 	bl	d6ce8 <__aeabi_f2d>
   d6418:	ec41 0b10 	vmov	d0, r0, r1
   d641c:	a901      	add	r1, sp, #4
   d641e:	4628      	mov	r0, r5
   d6420:	f7ff ff18 	bl	d6254 <_Z4dtoadhPc>
        *this = buf;
   d6424:	a901      	add	r1, sp, #4
   d6426:	4620      	mov	r0, r4
   d6428:	f7ff ffd7 	bl	d63da <_ZN6StringaSEPKc>
}
   d642c:	4620      	mov	r0, r4
   d642e:	b00b      	add	sp, #44	; 0x2c
   d6430:	bd30      	pop	{r4, r5, pc}

000d6432 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6432:	b570      	push	{r4, r5, r6, lr}
   d6434:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6436:	460e      	mov	r6, r1
   d6438:	b909      	cbnz	r1, d643e <_ZN6String6concatEPKcj+0xc>
   d643a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d643c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d643e:	b16a      	cbz	r2, d645c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6440:	6884      	ldr	r4, [r0, #8]
   d6442:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6444:	4621      	mov	r1, r4
   d6446:	f7ff ff81 	bl	d634c <_ZN6String7reserveEj>
   d644a:	2800      	cmp	r0, #0
   d644c:	d0f5      	beq.n	d643a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d644e:	6828      	ldr	r0, [r5, #0]
   d6450:	68ab      	ldr	r3, [r5, #8]
   d6452:	4631      	mov	r1, r6
   d6454:	4418      	add	r0, r3
   d6456:	f001 f9c7 	bl	d77e8 <strcpy>
	len = newlen;
   d645a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d645c:	2001      	movs	r0, #1
   d645e:	e7ed      	b.n	d643c <_ZN6String6concatEPKcj+0xa>

000d6460 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6460:	b513      	push	{r0, r1, r4, lr}
   d6462:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6464:	b929      	cbnz	r1, d6472 <_ZplRK15StringSumHelperPKc+0x12>
   d6466:	4620      	mov	r0, r4
   d6468:	f7ff ff59 	bl	d631e <_ZN6String10invalidateEv>
	return a;
}
   d646c:	4620      	mov	r0, r4
   d646e:	b002      	add	sp, #8
   d6470:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6472:	4608      	mov	r0, r1
   d6474:	9101      	str	r1, [sp, #4]
   d6476:	f001 f9dc 	bl	d7832 <strlen>
   d647a:	9901      	ldr	r1, [sp, #4]
   d647c:	4602      	mov	r2, r0
   d647e:	4620      	mov	r0, r4
   d6480:	f7ff ffd7 	bl	d6432 <_ZN6String6concatEPKcj>
   d6484:	2800      	cmp	r0, #0
   d6486:	d0ee      	beq.n	d6466 <_ZplRK15StringSumHelperPKc+0x6>
   d6488:	e7f0      	b.n	d646c <_ZplRK15StringSumHelperPKc+0xc>

000d648a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d648a:	b510      	push	{r4, lr}
   d648c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d648e:	6800      	ldr	r0, [r0, #0]
   d6490:	b118      	cbz	r0, d649a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6492:	f7fe fedd 	bl	d5250 <free>
            wakeupSource_ = nullptr;
   d6496:	2300      	movs	r3, #0
   d6498:	6023      	str	r3, [r4, #0]
        }
    }
   d649a:	bd10      	pop	{r4, pc}

000d649c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d649c:	b510      	push	{r4, lr}
   d649e:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d64a0:	f7ff fff3 	bl	d648a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d64a4:	4620      	mov	r0, r4
   d64a6:	bd10      	pop	{r4, pc}

000d64a8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d64a8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d64aa:	4b09      	ldr	r3, [pc, #36]	; (d64d0 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d64ac:	4c09      	ldr	r4, [pc, #36]	; (d64d4 <_GLOBAL__sub_I_System+0x2c>)
   d64ae:	2202      	movs	r2, #2
   d64b0:	2000      	movs	r0, #0
   d64b2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d64b4:	4b08      	ldr	r3, [pc, #32]	; (d64d8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d64b6:	6020      	str	r0, [r4, #0]
   d64b8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d64ba:	71a0      	strb	r0, [r4, #6]
   d64bc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d64be:	f7fe fe03 	bl	d50c8 <set_system_mode>
SystemClass System;
   d64c2:	4620      	mov	r0, r4
   d64c4:	4a05      	ldr	r2, [pc, #20]	; (d64dc <_GLOBAL__sub_I_System+0x34>)
   d64c6:	4906      	ldr	r1, [pc, #24]	; (d64e0 <_GLOBAL__sub_I_System+0x38>)
   d64c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d64cc:	f000 ba90 	b.w	d69f0 <__aeabi_atexit>
   d64d0:	2003e680 	.word	0x2003e680
   d64d4:	2003e674 	.word	0x2003e674
   d64d8:	ffff0000 	.word	0xffff0000
   d64dc:	2003e5ec 	.word	0x2003e5ec
   d64e0:	000d649d 	.word	0x000d649d

000d64e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d64e4:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	4b02      	ldr	r3, [pc, #8]	; (d64f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d64ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d64ec:	4770      	bx	lr
   d64ee:	bf00      	nop
   d64f0:	2003e414 	.word	0x2003e414
   d64f4:	2003e684 	.word	0x2003e684

000d64f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d64f8:	4770      	bx	lr

000d64fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64fa:	7441      	strb	r1, [r0, #17]
}
   d64fc:	4770      	bx	lr

000d64fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d64fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6500:	7c00      	ldrb	r0, [r0, #16]
   d6502:	f7fe fd81 	bl	d5008 <hal_usart_available_data_for_write>
}
   d6506:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d650a:	bd08      	pop	{r3, pc}

000d650c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d650c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d650e:	7c00      	ldrb	r0, [r0, #16]
   d6510:	f7fe fd52 	bl	d4fb8 <hal_usart_available>
}
   d6514:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6518:	bd08      	pop	{r3, pc}

000d651a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d651a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d651c:	7c00      	ldrb	r0, [r0, #16]
   d651e:	f7fe fd5b 	bl	d4fd8 <hal_usart_peek>
}
   d6522:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6526:	bd08      	pop	{r3, pc}

000d6528 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6528:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d652a:	7c00      	ldrb	r0, [r0, #16]
   d652c:	f7fe fd4c 	bl	d4fc8 <hal_usart_read>
}
   d6530:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6534:	bd08      	pop	{r3, pc}

000d6536 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6536:	7c00      	ldrb	r0, [r0, #16]
   d6538:	f7fe bd56 	b.w	d4fe8 <hal_usart_flush>

000d653c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d653c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d653e:	7c45      	ldrb	r5, [r0, #17]
{
   d6540:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6542:	b12d      	cbz	r5, d6550 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6544:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6546:	b003      	add	sp, #12
   d6548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d654c:	f7fe bd2c 	b.w	d4fa8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6550:	7c00      	ldrb	r0, [r0, #16]
   d6552:	9101      	str	r1, [sp, #4]
   d6554:	f7fe fd58 	bl	d5008 <hal_usart_available_data_for_write>
   d6558:	2800      	cmp	r0, #0
   d655a:	9901      	ldr	r1, [sp, #4]
   d655c:	dcf2      	bgt.n	d6544 <_ZN11USARTSerial5writeEh+0x8>
}
   d655e:	4628      	mov	r0, r5
   d6560:	b003      	add	sp, #12
   d6562:	bd30      	pop	{r4, r5, pc}

000d6564 <_ZN11USARTSerialD0Ev>:
   d6564:	b510      	push	{r4, lr}
   d6566:	2114      	movs	r1, #20
   d6568:	4604      	mov	r4, r0
   d656a:	f000 fa46 	bl	d69fa <_ZdlPvj>
   d656e:	4620      	mov	r0, r4
   d6570:	bd10      	pop	{r4, pc}
	...

000d6574 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6574:	b510      	push	{r4, lr}
   d6576:	f04f 0c00 	mov.w	ip, #0
   d657a:	4604      	mov	r4, r0
   d657c:	4608      	mov	r0, r1
   d657e:	4611      	mov	r1, r2
   d6580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6584:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6588:	4a04      	ldr	r2, [pc, #16]	; (d659c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d658a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d658c:	2201      	movs	r2, #1
  _serial = serial;
   d658e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6590:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6592:	461a      	mov	r2, r3
   d6594:	f7fe fd00 	bl	d4f98 <hal_usart_init>
}
   d6598:	4620      	mov	r0, r4
   d659a:	bd10      	pop	{r4, pc}
   d659c:	000d99ac 	.word	0x000d99ac

000d65a0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d65a0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d65a2:	4c0e      	ldr	r4, [pc, #56]	; (d65dc <_Z22__fetch_global_Serial1v+0x3c>)
   d65a4:	7821      	ldrb	r1, [r4, #0]
   d65a6:	f3bf 8f5b 	dmb	ish
   d65aa:	f011 0101 	ands.w	r1, r1, #1
   d65ae:	d112      	bne.n	d65d6 <_Z22__fetch_global_Serial1v+0x36>
   d65b0:	4620      	mov	r0, r4
   d65b2:	9101      	str	r1, [sp, #4]
   d65b4:	f7fd fd77 	bl	d40a6 <__cxa_guard_acquire>
   d65b8:	9901      	ldr	r1, [sp, #4]
   d65ba:	b160      	cbz	r0, d65d6 <_Z22__fetch_global_Serial1v+0x36>
   d65bc:	4a08      	ldr	r2, [pc, #32]	; (d65e0 <_Z22__fetch_global_Serial1v+0x40>)
   d65be:	4b09      	ldr	r3, [pc, #36]	; (d65e4 <_Z22__fetch_global_Serial1v+0x44>)
   d65c0:	4809      	ldr	r0, [pc, #36]	; (d65e8 <_Z22__fetch_global_Serial1v+0x48>)
   d65c2:	f7ff ffd7 	bl	d6574 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d65c6:	4620      	mov	r0, r4
   d65c8:	f7fd fd72 	bl	d40b0 <__cxa_guard_release>
   d65cc:	4a07      	ldr	r2, [pc, #28]	; (d65ec <_Z22__fetch_global_Serial1v+0x4c>)
   d65ce:	4908      	ldr	r1, [pc, #32]	; (d65f0 <_Z22__fetch_global_Serial1v+0x50>)
   d65d0:	4805      	ldr	r0, [pc, #20]	; (d65e8 <_Z22__fetch_global_Serial1v+0x48>)
   d65d2:	f000 fa0d 	bl	d69f0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d65d6:	4804      	ldr	r0, [pc, #16]	; (d65e8 <_Z22__fetch_global_Serial1v+0x48>)
   d65d8:	b002      	add	sp, #8
   d65da:	bd10      	pop	{r4, pc}
   d65dc:	2003e688 	.word	0x2003e688
   d65e0:	2003e68c 	.word	0x2003e68c
   d65e4:	2003e710 	.word	0x2003e710
   d65e8:	2003e794 	.word	0x2003e794
   d65ec:	2003e5ec 	.word	0x2003e5ec
   d65f0:	000d64f9 	.word	0x000d64f9

000d65f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65f4:	7441      	strb	r1, [r0, #17]
}
   d65f6:	4770      	bx	lr

000d65f8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d65f8:	4770      	bx	lr

000d65fa <_ZN9USBSerial4readEv>:
{
   d65fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d65fc:	2100      	movs	r1, #0
   d65fe:	7c00      	ldrb	r0, [r0, #16]
   d6600:	f7fe fd2a 	bl	d5058 <HAL_USB_USART_Receive_Data>
}
   d6604:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6608:	bd08      	pop	{r3, pc}

000d660a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d660a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d660c:	2101      	movs	r1, #1
   d660e:	7c00      	ldrb	r0, [r0, #16]
   d6610:	f7fe fd22 	bl	d5058 <HAL_USB_USART_Receive_Data>
}
   d6614:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6618:	bd08      	pop	{r3, pc}

000d661a <_ZN9USBSerial17availableForWriteEv>:
{
   d661a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d661c:	7c00      	ldrb	r0, [r0, #16]
   d661e:	f7fe fd13 	bl	d5048 <HAL_USB_USART_Available_Data_For_Write>
}
   d6622:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6626:	bd08      	pop	{r3, pc}

000d6628 <_ZN9USBSerial9availableEv>:
{
   d6628:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d662a:	7c00      	ldrb	r0, [r0, #16]
   d662c:	f7fe fd04 	bl	d5038 <HAL_USB_USART_Available_Data>
}
   d6630:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6634:	bd08      	pop	{r3, pc}

000d6636 <_ZN9USBSerial5writeEh>:
{
   d6636:	b513      	push	{r0, r1, r4, lr}
   d6638:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d663a:	7c00      	ldrb	r0, [r0, #16]
{
   d663c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d663e:	f7fe fd03 	bl	d5048 <HAL_USB_USART_Available_Data_For_Write>
   d6642:	2800      	cmp	r0, #0
   d6644:	9901      	ldr	r1, [sp, #4]
   d6646:	dc01      	bgt.n	d664c <_ZN9USBSerial5writeEh+0x16>
   d6648:	7c60      	ldrb	r0, [r4, #17]
   d664a:	b120      	cbz	r0, d6656 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d664c:	7c20      	ldrb	r0, [r4, #16]
   d664e:	f7fe fd0b 	bl	d5068 <HAL_USB_USART_Send_Data>
   d6652:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6656:	b002      	add	sp, #8
   d6658:	bd10      	pop	{r4, pc}

000d665a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d665a:	7c00      	ldrb	r0, [r0, #16]
   d665c:	f7fe bd0c 	b.w	d5078 <HAL_USB_USART_Flush_Data>

000d6660 <_ZN9USBSerialD0Ev>:
   d6660:	b510      	push	{r4, lr}
   d6662:	2114      	movs	r1, #20
   d6664:	4604      	mov	r4, r0
   d6666:	f000 f9c8 	bl	d69fa <_ZdlPvj>
   d666a:	4620      	mov	r0, r4
   d666c:	bd10      	pop	{r4, pc}
	...

000d6670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6670:	b510      	push	{r4, lr}
   d6672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6676:	4604      	mov	r4, r0
   d6678:	4608      	mov	r0, r1
   d667a:	2100      	movs	r1, #0
   d667c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6680:	4b04      	ldr	r3, [pc, #16]	; (d6694 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6682:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6684:	2301      	movs	r3, #1
  _serial = serial;
   d6686:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6688:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d668a:	4611      	mov	r1, r2
   d668c:	f7fe fcc4 	bl	d5018 <HAL_USB_USART_Init>
}
   d6690:	4620      	mov	r0, r4
   d6692:	bd10      	pop	{r4, pc}
   d6694:	000d99dc 	.word	0x000d99dc

000d6698 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6698:	7c00      	ldrb	r0, [r0, #16]
   d669a:	2200      	movs	r2, #0
   d669c:	f7fe bcc4 	b.w	d5028 <HAL_USB_USART_Begin>

000d66a0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d66a2:	2214      	movs	r2, #20
{
   d66a4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d66a6:	2100      	movs	r1, #0
   d66a8:	f001 f858 	bl	d775c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d66ac:	4620      	mov	r0, r4
   d66ae:	bd10      	pop	{r4, pc}

000d66b0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d66b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66b2:	4c10      	ldr	r4, [pc, #64]	; (d66f4 <_Z16_fetch_usbserialv+0x44>)
{
   d66b4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d66b6:	a803      	add	r0, sp, #12
   d66b8:	f7ff fff2 	bl	d66a0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66bc:	7821      	ldrb	r1, [r4, #0]
   d66be:	f3bf 8f5b 	dmb	ish
   d66c2:	f011 0101 	ands.w	r1, r1, #1
   d66c6:	d111      	bne.n	d66ec <_Z16_fetch_usbserialv+0x3c>
   d66c8:	4620      	mov	r0, r4
   d66ca:	9101      	str	r1, [sp, #4]
   d66cc:	f7fd fceb 	bl	d40a6 <__cxa_guard_acquire>
   d66d0:	9901      	ldr	r1, [sp, #4]
   d66d2:	b158      	cbz	r0, d66ec <_Z16_fetch_usbserialv+0x3c>
   d66d4:	aa03      	add	r2, sp, #12
   d66d6:	4808      	ldr	r0, [pc, #32]	; (d66f8 <_Z16_fetch_usbserialv+0x48>)
   d66d8:	f7ff ffca 	bl	d6670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66dc:	4620      	mov	r0, r4
   d66de:	f7fd fce7 	bl	d40b0 <__cxa_guard_release>
   d66e2:	4a06      	ldr	r2, [pc, #24]	; (d66fc <_Z16_fetch_usbserialv+0x4c>)
   d66e4:	4906      	ldr	r1, [pc, #24]	; (d6700 <_Z16_fetch_usbserialv+0x50>)
   d66e6:	4804      	ldr	r0, [pc, #16]	; (d66f8 <_Z16_fetch_usbserialv+0x48>)
   d66e8:	f000 f982 	bl	d69f0 <__aeabi_atexit>
	return _usbserial;
}
   d66ec:	4802      	ldr	r0, [pc, #8]	; (d66f8 <_Z16_fetch_usbserialv+0x48>)
   d66ee:	b008      	add	sp, #32
   d66f0:	bd10      	pop	{r4, pc}
   d66f2:	bf00      	nop
   d66f4:	2003e7a8 	.word	0x2003e7a8
   d66f8:	2003e7ac 	.word	0x2003e7ac
   d66fc:	2003e5ec 	.word	0x2003e5ec
   d6700:	000d65f9 	.word	0x000d65f9

000d6704 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6704:	b510      	push	{r4, lr}
   d6706:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6708:	f001 f893 	bl	d7832 <strlen>
   d670c:	3801      	subs	r0, #1
   d670e:	1823      	adds	r3, r4, r0
   d6710:	4620      	mov	r0, r4
	while(i<j){
   d6712:	4283      	cmp	r3, r0
   d6714:	d906      	bls.n	d6724 <_Z11str_reversePc+0x20>
		c = *i;
   d6716:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6718:	7819      	ldrb	r1, [r3, #0]
   d671a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d671e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6722:	e7f6      	b.n	d6712 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6724:	bd10      	pop	{r4, pc}

000d6726 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6726:	b570      	push	{r4, r5, r6, lr}
   d6728:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d672a:	1e91      	subs	r1, r2, #2
   d672c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d672e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6730:	d822      	bhi.n	d6778 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6732:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6734:	b16d      	cbz	r5, d6752 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6736:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d673a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d673e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6740:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6742:	bf94      	ite	ls
   d6744:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6746:	3157      	addhi	r1, #87	; 0x57
   d6748:	b2c9      	uxtb	r1, r1
   d674a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d674e:	4635      	mov	r5, r6
	while(a){
   d6750:	e7f0      	b.n	d6734 <ultoa+0xe>
   d6752:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6754:	4423      	add	r3, r4
            *ptr++ = '0';
   d6756:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6758:	4293      	cmp	r3, r2
   d675a:	d902      	bls.n	d6762 <ultoa+0x3c>
            *ptr++ = '0';
   d675c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6760:	e7fa      	b.n	d6758 <ultoa+0x32>
   d6762:	1a1a      	subs	r2, r3, r0
   d6764:	4283      	cmp	r3, r0
   d6766:	bf38      	it	cc
   d6768:	2200      	movcc	r2, #0

	*ptr = '\0';
   d676a:	2300      	movs	r3, #0
   d676c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d676e:	4620      	mov	r0, r4
   d6770:	f7ff ffc8 	bl	d6704 <_Z11str_reversePc>
	return buffer;
   d6774:	4620      	mov	r0, r4
}
   d6776:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6778:	2000      	movs	r0, #0
   d677a:	e7fc      	b.n	d6776 <ultoa+0x50>

000d677c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d677c:	4b01      	ldr	r3, [pc, #4]	; (d6784 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d677e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6780:	4770      	bx	lr
   d6782:	bf00      	nop
   d6784:	2003e418 	.word	0x2003e418

000d6788 <serialEventRun>:
{
   d6788:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d678a:	4b0b      	ldr	r3, [pc, #44]	; (d67b8 <serialEventRun+0x30>)
   d678c:	b143      	cbz	r3, d67a0 <serialEventRun+0x18>
   d678e:	f7ff ff8f 	bl	d66b0 <_Z16_fetch_usbserialv>
   d6792:	6803      	ldr	r3, [r0, #0]
   d6794:	691b      	ldr	r3, [r3, #16]
   d6796:	4798      	blx	r3
   d6798:	2800      	cmp	r0, #0
   d679a:	dd01      	ble.n	d67a0 <serialEventRun+0x18>
        serialEvent();
   d679c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d67a0:	4b06      	ldr	r3, [pc, #24]	; (d67bc <serialEventRun+0x34>)
   d67a2:	b143      	cbz	r3, d67b6 <serialEventRun+0x2e>
   d67a4:	f7ff fefc 	bl	d65a0 <_Z22__fetch_global_Serial1v>
   d67a8:	6803      	ldr	r3, [r0, #0]
   d67aa:	691b      	ldr	r3, [r3, #16]
   d67ac:	4798      	blx	r3
   d67ae:	2800      	cmp	r0, #0
   d67b0:	dd01      	ble.n	d67b6 <serialEventRun+0x2e>
        serialEvent1();
   d67b2:	f3af 8000 	nop.w
}
   d67b6:	bd08      	pop	{r3, pc}
	...

000d67c0 <_post_loop>:
{
   d67c0:	b508      	push	{r3, lr}
	serialEventRun();
   d67c2:	f7ff ffe1 	bl	d6788 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d67c6:	f7fe fb37 	bl	d4e38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d67ca:	4b01      	ldr	r3, [pc, #4]	; (d67d0 <_post_loop+0x10>)
   d67cc:	6018      	str	r0, [r3, #0]
}
   d67ce:	bd08      	pop	{r3, pc}
   d67d0:	2003e7d4 	.word	0x2003e7d4

000d67d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d67d4:	4802      	ldr	r0, [pc, #8]	; (d67e0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d67d6:	4a03      	ldr	r2, [pc, #12]	; (d67e4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d67d8:	4903      	ldr	r1, [pc, #12]	; (d67e8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d67da:	1a12      	subs	r2, r2, r0
   d67dc:	f000 bf96 	b.w	d770c <memcpy>
   d67e0:	2003f400 	.word	0x2003f400
   d67e4:	2003f404 	.word	0x2003f404
   d67e8:	000d9ca8 	.word	0x000d9ca8

000d67ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d67ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d67ee:	2300      	movs	r3, #0
   d67f0:	9300      	str	r3, [sp, #0]
   d67f2:	461a      	mov	r2, r3
   d67f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d67f8:	f7fe fc90 	bl	d511c <system_ctrl_set_result>
}
   d67fc:	b003      	add	sp, #12
   d67fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6804 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6804:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6806:	8843      	ldrh	r3, [r0, #2]
   d6808:	2b0a      	cmp	r3, #10
   d680a:	d008      	beq.n	d681e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d680c:	2b50      	cmp	r3, #80	; 0x50
   d680e:	d10b      	bne.n	d6828 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6810:	4b09      	ldr	r3, [pc, #36]	; (d6838 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6812:	681b      	ldr	r3, [r3, #0]
   d6814:	b14b      	cbz	r3, d682a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6816:	b003      	add	sp, #12
   d6818:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d681c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d681e:	f7ff ffe5 	bl	d67ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6822:	b003      	add	sp, #12
   d6824:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6828:	2300      	movs	r3, #0
   d682a:	9300      	str	r3, [sp, #0]
   d682c:	461a      	mov	r2, r3
   d682e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6832:	f7fe fc73 	bl	d511c <system_ctrl_set_result>
}
   d6836:	e7f4      	b.n	d6822 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6838:	2003e7c4 	.word	0x2003e7c4

000d683c <module_user_init_hook>:
{
   d683c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d683e:	4c12      	ldr	r4, [pc, #72]	; (d6888 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6840:	4812      	ldr	r0, [pc, #72]	; (d688c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6842:	4d13      	ldr	r5, [pc, #76]	; (d6890 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6844:	2100      	movs	r1, #0
   d6846:	f7fe fd23 	bl	d5290 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d684a:	6823      	ldr	r3, [r4, #0]
   d684c:	42ab      	cmp	r3, r5
   d684e:	4b11      	ldr	r3, [pc, #68]	; (d6894 <module_user_init_hook+0x58>)
   d6850:	bf0c      	ite	eq
   d6852:	2201      	moveq	r2, #1
   d6854:	2200      	movne	r2, #0
   d6856:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6858:	d002      	beq.n	d6860 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d685a:	f7ff ffbb 	bl	d67d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d685e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6860:	f7fe fada 	bl	d4e18 <HAL_RNG_GetRandomNumber>
   d6864:	4604      	mov	r4, r0
    srand(seed);
   d6866:	f000 ff91 	bl	d778c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d686a:	4b0b      	ldr	r3, [pc, #44]	; (d6898 <module_user_init_hook+0x5c>)
   d686c:	b113      	cbz	r3, d6874 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d686e:	4620      	mov	r0, r4
   d6870:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6874:	2100      	movs	r1, #0
   d6876:	4808      	ldr	r0, [pc, #32]	; (d6898 <module_user_init_hook+0x5c>)
   d6878:	f7fe fc7a 	bl	d5170 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d687c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6880:	4806      	ldr	r0, [pc, #24]	; (d689c <module_user_init_hook+0x60>)
   d6882:	2100      	movs	r1, #0
   d6884:	f7fe bc40 	b.w	d5108 <system_ctrl_set_app_request_handler>
   d6888:	2003f400 	.word	0x2003f400
   d688c:	000d677d 	.word	0x000d677d
   d6890:	9a271c1e 	.word	0x9a271c1e
   d6894:	2003e7c0 	.word	0x2003e7c0
   d6898:	00000000 	.word	0x00000000
   d689c:	000d6805 	.word	0x000d6805

000d68a0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d68a0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d68a2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d68a4:	d902      	bls.n	d68ac <pinAvailable+0xc>
    return false;
   d68a6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d68a8:	b002      	add	sp, #8
   d68aa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d68ac:	f1a0 030b 	sub.w	r3, r0, #11
   d68b0:	2b02      	cmp	r3, #2
   d68b2:	d81a      	bhi.n	d68ea <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d68b4:	4c17      	ldr	r4, [pc, #92]	; (d6914 <pinAvailable+0x74>)
   d68b6:	7821      	ldrb	r1, [r4, #0]
   d68b8:	f3bf 8f5b 	dmb	ish
   d68bc:	f011 0101 	ands.w	r1, r1, #1
   d68c0:	d10b      	bne.n	d68da <pinAvailable+0x3a>
   d68c2:	4620      	mov	r0, r4
   d68c4:	9101      	str	r1, [sp, #4]
   d68c6:	f7fd fbee 	bl	d40a6 <__cxa_guard_acquire>
   d68ca:	9901      	ldr	r1, [sp, #4]
   d68cc:	b128      	cbz	r0, d68da <pinAvailable+0x3a>
   d68ce:	4812      	ldr	r0, [pc, #72]	; (d6918 <pinAvailable+0x78>)
   d68d0:	f7ff fcb6 	bl	d6240 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d68d4:	4620      	mov	r0, r4
   d68d6:	f7fd fbeb 	bl	d40b0 <__cxa_guard_release>
   d68da:	4b0f      	ldr	r3, [pc, #60]	; (d6918 <pinAvailable+0x78>)
   d68dc:	7818      	ldrb	r0, [r3, #0]
   d68de:	f7fe fb53 	bl	d4f88 <hal_spi_is_enabled>
   d68e2:	2800      	cmp	r0, #0
   d68e4:	d1df      	bne.n	d68a6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d68e6:	2001      	movs	r0, #1
   d68e8:	e7de      	b.n	d68a8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d68ea:	2801      	cmp	r0, #1
   d68ec:	d809      	bhi.n	d6902 <pinAvailable+0x62>
   d68ee:	f000 f857 	bl	d69a0 <_Z19__fetch_global_Wirev>
   d68f2:	2100      	movs	r1, #0
   d68f4:	7c00      	ldrb	r0, [r0, #16]
   d68f6:	f7fe fb17 	bl	d4f28 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d68fa:	f080 0001 	eor.w	r0, r0, #1
   d68fe:	b2c0      	uxtb	r0, r0
   d6900:	e7d2      	b.n	d68a8 <pinAvailable+0x8>
   d6902:	3809      	subs	r0, #9
   d6904:	2801      	cmp	r0, #1
   d6906:	d8ee      	bhi.n	d68e6 <pinAvailable+0x46>
   d6908:	f7ff fe4a 	bl	d65a0 <_Z22__fetch_global_Serial1v>
   d690c:	7c00      	ldrb	r0, [r0, #16]
   d690e:	f7fe fb73 	bl	d4ff8 <hal_usart_is_enabled>
   d6912:	e7f2      	b.n	d68fa <pinAvailable+0x5a>
   d6914:	2003e7c8 	.word	0x2003e7c8
   d6918:	2003e7cc 	.word	0x2003e7cc

000d691c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d691c:	2823      	cmp	r0, #35	; 0x23
{
   d691e:	b538      	push	{r3, r4, r5, lr}
   d6920:	4604      	mov	r4, r0
   d6922:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6924:	d80a      	bhi.n	d693c <pinMode+0x20>
   d6926:	29ff      	cmp	r1, #255	; 0xff
   d6928:	d008      	beq.n	d693c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d692a:	f7ff ffb9 	bl	d68a0 <pinAvailable>
   d692e:	b128      	cbz	r0, d693c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6930:	4629      	mov	r1, r5
   d6932:	4620      	mov	r0, r4
}
   d6934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6938:	f7fe ba8e 	b.w	d4e58 <HAL_Pin_Mode>
}
   d693c:	bd38      	pop	{r3, r4, r5, pc}

000d693e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d693e:	b538      	push	{r3, r4, r5, lr}
   d6940:	4604      	mov	r4, r0
   d6942:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6944:	f7fe fa90 	bl	d4e68 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6948:	28ff      	cmp	r0, #255	; 0xff
   d694a:	d010      	beq.n	d696e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d694c:	2806      	cmp	r0, #6
   d694e:	d804      	bhi.n	d695a <digitalWrite+0x1c>
   d6950:	234d      	movs	r3, #77	; 0x4d
   d6952:	fa23 f000 	lsr.w	r0, r3, r0
   d6956:	07c3      	lsls	r3, r0, #31
   d6958:	d409      	bmi.n	d696e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d695a:	4620      	mov	r0, r4
   d695c:	f7ff ffa0 	bl	d68a0 <pinAvailable>
   d6960:	b128      	cbz	r0, d696e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6962:	4629      	mov	r1, r5
   d6964:	4620      	mov	r0, r4
}
   d6966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d696a:	f7fe ba85 	b.w	d4e78 <HAL_GPIO_Write>
}
   d696e:	bd38      	pop	{r3, r4, r5, pc}

000d6970 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6970:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6972:	2300      	movs	r3, #0
   d6974:	2520      	movs	r5, #32
   d6976:	8043      	strh	r3, [r0, #2]
   d6978:	2314      	movs	r3, #20
{
   d697a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d697c:	8003      	strh	r3, [r0, #0]
   d697e:	6085      	str	r5, [r0, #8]
   d6980:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6982:	4906      	ldr	r1, [pc, #24]	; (d699c <_Z17acquireWireBufferv+0x2c>)
   d6984:	4628      	mov	r0, r5
   d6986:	f000 f83c 	bl	d6a02 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d698a:	4904      	ldr	r1, [pc, #16]	; (d699c <_Z17acquireWireBufferv+0x2c>)
	};
   d698c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d698e:	4628      	mov	r0, r5
   d6990:	f000 f837 	bl	d6a02 <_ZnajRKSt9nothrow_t>
	};
   d6994:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6996:	4620      	mov	r0, r4
   d6998:	bd38      	pop	{r3, r4, r5, pc}
   d699a:	bf00      	nop
   d699c:	000d9a04 	.word	0x000d9a04

000d69a0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d69a0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d69a2:	4d0f      	ldr	r5, [pc, #60]	; (d69e0 <_Z19__fetch_global_Wirev+0x40>)
   d69a4:	7829      	ldrb	r1, [r5, #0]
   d69a6:	f3bf 8f5b 	dmb	ish
   d69aa:	f011 0401 	ands.w	r4, r1, #1
{
   d69ae:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d69b0:	d113      	bne.n	d69da <_Z19__fetch_global_Wirev+0x3a>
   d69b2:	4628      	mov	r0, r5
   d69b4:	f7fd fb77 	bl	d40a6 <__cxa_guard_acquire>
   d69b8:	b178      	cbz	r0, d69da <_Z19__fetch_global_Wirev+0x3a>
   d69ba:	a801      	add	r0, sp, #4
   d69bc:	f7ff ffd8 	bl	d6970 <_Z17acquireWireBufferv>
   d69c0:	aa01      	add	r2, sp, #4
   d69c2:	4621      	mov	r1, r4
   d69c4:	4807      	ldr	r0, [pc, #28]	; (d69e4 <_Z19__fetch_global_Wirev+0x44>)
   d69c6:	f7ff f80b 	bl	d59e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d69ca:	4628      	mov	r0, r5
   d69cc:	f7fd fb70 	bl	d40b0 <__cxa_guard_release>
   d69d0:	4a05      	ldr	r2, [pc, #20]	; (d69e8 <_Z19__fetch_global_Wirev+0x48>)
   d69d2:	4906      	ldr	r1, [pc, #24]	; (d69ec <_Z19__fetch_global_Wirev+0x4c>)
   d69d4:	4803      	ldr	r0, [pc, #12]	; (d69e4 <_Z19__fetch_global_Wirev+0x44>)
   d69d6:	f000 f80b 	bl	d69f0 <__aeabi_atexit>
	return wire;
}
   d69da:	4802      	ldr	r0, [pc, #8]	; (d69e4 <_Z19__fetch_global_Wirev+0x44>)
   d69dc:	b007      	add	sp, #28
   d69de:	bd30      	pop	{r4, r5, pc}
   d69e0:	2003e7d8 	.word	0x2003e7d8
   d69e4:	2003e7dc 	.word	0x2003e7dc
   d69e8:	2003e5ec 	.word	0x2003e5ec
   d69ec:	000d5989 	.word	0x000d5989

000d69f0 <__aeabi_atexit>:
   d69f0:	460b      	mov	r3, r1
   d69f2:	4601      	mov	r1, r0
   d69f4:	4618      	mov	r0, r3
   d69f6:	f000 be7b 	b.w	d76f0 <__cxa_atexit>

000d69fa <_ZdlPvj>:
   d69fa:	f7fd bb50 	b.w	d409e <_ZdlPv>

000d69fe <_ZnwjRKSt9nothrow_t>:
   d69fe:	f7fd bb4a 	b.w	d4096 <_Znwj>

000d6a02 <_ZnajRKSt9nothrow_t>:
   d6a02:	f7fd bb4a 	b.w	d409a <_Znaj>

000d6a06 <_ZSt25__throw_bad_function_callv>:
   d6a06:	b508      	push	{r3, lr}
   d6a08:	f7fe fc32 	bl	d5270 <abort>
   d6a0c:	0000      	movs	r0, r0
	...

000d6a10 <nan>:
   d6a10:	ed9f 0b01 	vldr	d0, [pc, #4]	; d6a18 <nan+0x8>
   d6a14:	4770      	bx	lr
   d6a16:	bf00      	nop
   d6a18:	00000000 	.word	0x00000000
   d6a1c:	7ff80000 	.word	0x7ff80000

000d6a20 <__aeabi_drsub>:
   d6a20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6a24:	e002      	b.n	d6a2c <__adddf3>
   d6a26:	bf00      	nop

000d6a28 <__aeabi_dsub>:
   d6a28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6a2c <__adddf3>:
   d6a2c:	b530      	push	{r4, r5, lr}
   d6a2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6a32:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6a36:	ea94 0f05 	teq	r4, r5
   d6a3a:	bf08      	it	eq
   d6a3c:	ea90 0f02 	teqeq	r0, r2
   d6a40:	bf1f      	itttt	ne
   d6a42:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6a46:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6a4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6a4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6a52:	f000 80e2 	beq.w	d6c1a <__adddf3+0x1ee>
   d6a56:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6a5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6a5e:	bfb8      	it	lt
   d6a60:	426d      	neglt	r5, r5
   d6a62:	dd0c      	ble.n	d6a7e <__adddf3+0x52>
   d6a64:	442c      	add	r4, r5
   d6a66:	ea80 0202 	eor.w	r2, r0, r2
   d6a6a:	ea81 0303 	eor.w	r3, r1, r3
   d6a6e:	ea82 0000 	eor.w	r0, r2, r0
   d6a72:	ea83 0101 	eor.w	r1, r3, r1
   d6a76:	ea80 0202 	eor.w	r2, r0, r2
   d6a7a:	ea81 0303 	eor.w	r3, r1, r3
   d6a7e:	2d36      	cmp	r5, #54	; 0x36
   d6a80:	bf88      	it	hi
   d6a82:	bd30      	pophi	{r4, r5, pc}
   d6a84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6a88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6a8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6a90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6a94:	d002      	beq.n	d6a9c <__adddf3+0x70>
   d6a96:	4240      	negs	r0, r0
   d6a98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6a9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6aa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6aa4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6aa8:	d002      	beq.n	d6ab0 <__adddf3+0x84>
   d6aaa:	4252      	negs	r2, r2
   d6aac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6ab0:	ea94 0f05 	teq	r4, r5
   d6ab4:	f000 80a7 	beq.w	d6c06 <__adddf3+0x1da>
   d6ab8:	f1a4 0401 	sub.w	r4, r4, #1
   d6abc:	f1d5 0e20 	rsbs	lr, r5, #32
   d6ac0:	db0d      	blt.n	d6ade <__adddf3+0xb2>
   d6ac2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6ac6:	fa22 f205 	lsr.w	r2, r2, r5
   d6aca:	1880      	adds	r0, r0, r2
   d6acc:	f141 0100 	adc.w	r1, r1, #0
   d6ad0:	fa03 f20e 	lsl.w	r2, r3, lr
   d6ad4:	1880      	adds	r0, r0, r2
   d6ad6:	fa43 f305 	asr.w	r3, r3, r5
   d6ada:	4159      	adcs	r1, r3
   d6adc:	e00e      	b.n	d6afc <__adddf3+0xd0>
   d6ade:	f1a5 0520 	sub.w	r5, r5, #32
   d6ae2:	f10e 0e20 	add.w	lr, lr, #32
   d6ae6:	2a01      	cmp	r2, #1
   d6ae8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6aec:	bf28      	it	cs
   d6aee:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6af2:	fa43 f305 	asr.w	r3, r3, r5
   d6af6:	18c0      	adds	r0, r0, r3
   d6af8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6afc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6b00:	d507      	bpl.n	d6b12 <__adddf3+0xe6>
   d6b02:	f04f 0e00 	mov.w	lr, #0
   d6b06:	f1dc 0c00 	rsbs	ip, ip, #0
   d6b0a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6b0e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6b12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6b16:	d31b      	bcc.n	d6b50 <__adddf3+0x124>
   d6b18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6b1c:	d30c      	bcc.n	d6b38 <__adddf3+0x10c>
   d6b1e:	0849      	lsrs	r1, r1, #1
   d6b20:	ea5f 0030 	movs.w	r0, r0, rrx
   d6b24:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6b28:	f104 0401 	add.w	r4, r4, #1
   d6b2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6b30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6b34:	f080 809a 	bcs.w	d6c6c <__adddf3+0x240>
   d6b38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6b3c:	bf08      	it	eq
   d6b3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6b42:	f150 0000 	adcs.w	r0, r0, #0
   d6b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6b4a:	ea41 0105 	orr.w	r1, r1, r5
   d6b4e:	bd30      	pop	{r4, r5, pc}
   d6b50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6b54:	4140      	adcs	r0, r0
   d6b56:	eb41 0101 	adc.w	r1, r1, r1
   d6b5a:	3c01      	subs	r4, #1
   d6b5c:	bf28      	it	cs
   d6b5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6b62:	d2e9      	bcs.n	d6b38 <__adddf3+0x10c>
   d6b64:	f091 0f00 	teq	r1, #0
   d6b68:	bf04      	itt	eq
   d6b6a:	4601      	moveq	r1, r0
   d6b6c:	2000      	moveq	r0, #0
   d6b6e:	fab1 f381 	clz	r3, r1
   d6b72:	bf08      	it	eq
   d6b74:	3320      	addeq	r3, #32
   d6b76:	f1a3 030b 	sub.w	r3, r3, #11
   d6b7a:	f1b3 0220 	subs.w	r2, r3, #32
   d6b7e:	da0c      	bge.n	d6b9a <__adddf3+0x16e>
   d6b80:	320c      	adds	r2, #12
   d6b82:	dd08      	ble.n	d6b96 <__adddf3+0x16a>
   d6b84:	f102 0c14 	add.w	ip, r2, #20
   d6b88:	f1c2 020c 	rsb	r2, r2, #12
   d6b8c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6b90:	fa21 f102 	lsr.w	r1, r1, r2
   d6b94:	e00c      	b.n	d6bb0 <__adddf3+0x184>
   d6b96:	f102 0214 	add.w	r2, r2, #20
   d6b9a:	bfd8      	it	le
   d6b9c:	f1c2 0c20 	rsble	ip, r2, #32
   d6ba0:	fa01 f102 	lsl.w	r1, r1, r2
   d6ba4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6ba8:	bfdc      	itt	le
   d6baa:	ea41 010c 	orrle.w	r1, r1, ip
   d6bae:	4090      	lslle	r0, r2
   d6bb0:	1ae4      	subs	r4, r4, r3
   d6bb2:	bfa2      	ittt	ge
   d6bb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6bb8:	4329      	orrge	r1, r5
   d6bba:	bd30      	popge	{r4, r5, pc}
   d6bbc:	ea6f 0404 	mvn.w	r4, r4
   d6bc0:	3c1f      	subs	r4, #31
   d6bc2:	da1c      	bge.n	d6bfe <__adddf3+0x1d2>
   d6bc4:	340c      	adds	r4, #12
   d6bc6:	dc0e      	bgt.n	d6be6 <__adddf3+0x1ba>
   d6bc8:	f104 0414 	add.w	r4, r4, #20
   d6bcc:	f1c4 0220 	rsb	r2, r4, #32
   d6bd0:	fa20 f004 	lsr.w	r0, r0, r4
   d6bd4:	fa01 f302 	lsl.w	r3, r1, r2
   d6bd8:	ea40 0003 	orr.w	r0, r0, r3
   d6bdc:	fa21 f304 	lsr.w	r3, r1, r4
   d6be0:	ea45 0103 	orr.w	r1, r5, r3
   d6be4:	bd30      	pop	{r4, r5, pc}
   d6be6:	f1c4 040c 	rsb	r4, r4, #12
   d6bea:	f1c4 0220 	rsb	r2, r4, #32
   d6bee:	fa20 f002 	lsr.w	r0, r0, r2
   d6bf2:	fa01 f304 	lsl.w	r3, r1, r4
   d6bf6:	ea40 0003 	orr.w	r0, r0, r3
   d6bfa:	4629      	mov	r1, r5
   d6bfc:	bd30      	pop	{r4, r5, pc}
   d6bfe:	fa21 f004 	lsr.w	r0, r1, r4
   d6c02:	4629      	mov	r1, r5
   d6c04:	bd30      	pop	{r4, r5, pc}
   d6c06:	f094 0f00 	teq	r4, #0
   d6c0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6c0e:	bf06      	itte	eq
   d6c10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6c14:	3401      	addeq	r4, #1
   d6c16:	3d01      	subne	r5, #1
   d6c18:	e74e      	b.n	d6ab8 <__adddf3+0x8c>
   d6c1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6c1e:	bf18      	it	ne
   d6c20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c24:	d029      	beq.n	d6c7a <__adddf3+0x24e>
   d6c26:	ea94 0f05 	teq	r4, r5
   d6c2a:	bf08      	it	eq
   d6c2c:	ea90 0f02 	teqeq	r0, r2
   d6c30:	d005      	beq.n	d6c3e <__adddf3+0x212>
   d6c32:	ea54 0c00 	orrs.w	ip, r4, r0
   d6c36:	bf04      	itt	eq
   d6c38:	4619      	moveq	r1, r3
   d6c3a:	4610      	moveq	r0, r2
   d6c3c:	bd30      	pop	{r4, r5, pc}
   d6c3e:	ea91 0f03 	teq	r1, r3
   d6c42:	bf1e      	ittt	ne
   d6c44:	2100      	movne	r1, #0
   d6c46:	2000      	movne	r0, #0
   d6c48:	bd30      	popne	{r4, r5, pc}
   d6c4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6c4e:	d105      	bne.n	d6c5c <__adddf3+0x230>
   d6c50:	0040      	lsls	r0, r0, #1
   d6c52:	4149      	adcs	r1, r1
   d6c54:	bf28      	it	cs
   d6c56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6c5a:	bd30      	pop	{r4, r5, pc}
   d6c5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6c60:	bf3c      	itt	cc
   d6c62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6c66:	bd30      	popcc	{r4, r5, pc}
   d6c68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6c70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6c74:	f04f 0000 	mov.w	r0, #0
   d6c78:	bd30      	pop	{r4, r5, pc}
   d6c7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6c7e:	bf1a      	itte	ne
   d6c80:	4619      	movne	r1, r3
   d6c82:	4610      	movne	r0, r2
   d6c84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6c88:	bf1c      	itt	ne
   d6c8a:	460b      	movne	r3, r1
   d6c8c:	4602      	movne	r2, r0
   d6c8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c92:	bf06      	itte	eq
   d6c94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6c98:	ea91 0f03 	teqeq	r1, r3
   d6c9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6ca0:	bd30      	pop	{r4, r5, pc}
   d6ca2:	bf00      	nop

000d6ca4 <__aeabi_ui2d>:
   d6ca4:	f090 0f00 	teq	r0, #0
   d6ca8:	bf04      	itt	eq
   d6caa:	2100      	moveq	r1, #0
   d6cac:	4770      	bxeq	lr
   d6cae:	b530      	push	{r4, r5, lr}
   d6cb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6cb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6cb8:	f04f 0500 	mov.w	r5, #0
   d6cbc:	f04f 0100 	mov.w	r1, #0
   d6cc0:	e750      	b.n	d6b64 <__adddf3+0x138>
   d6cc2:	bf00      	nop

000d6cc4 <__aeabi_i2d>:
   d6cc4:	f090 0f00 	teq	r0, #0
   d6cc8:	bf04      	itt	eq
   d6cca:	2100      	moveq	r1, #0
   d6ccc:	4770      	bxeq	lr
   d6cce:	b530      	push	{r4, r5, lr}
   d6cd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6cd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6cd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6cdc:	bf48      	it	mi
   d6cde:	4240      	negmi	r0, r0
   d6ce0:	f04f 0100 	mov.w	r1, #0
   d6ce4:	e73e      	b.n	d6b64 <__adddf3+0x138>
   d6ce6:	bf00      	nop

000d6ce8 <__aeabi_f2d>:
   d6ce8:	0042      	lsls	r2, r0, #1
   d6cea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6cee:	ea4f 0131 	mov.w	r1, r1, rrx
   d6cf2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6cf6:	bf1f      	itttt	ne
   d6cf8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6cfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6d00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6d04:	4770      	bxne	lr
   d6d06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6d0a:	bf08      	it	eq
   d6d0c:	4770      	bxeq	lr
   d6d0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6d12:	bf04      	itt	eq
   d6d14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6d18:	4770      	bxeq	lr
   d6d1a:	b530      	push	{r4, r5, lr}
   d6d1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6d20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6d28:	e71c      	b.n	d6b64 <__adddf3+0x138>
   d6d2a:	bf00      	nop

000d6d2c <__aeabi_ul2d>:
   d6d2c:	ea50 0201 	orrs.w	r2, r0, r1
   d6d30:	bf08      	it	eq
   d6d32:	4770      	bxeq	lr
   d6d34:	b530      	push	{r4, r5, lr}
   d6d36:	f04f 0500 	mov.w	r5, #0
   d6d3a:	e00a      	b.n	d6d52 <__aeabi_l2d+0x16>

000d6d3c <__aeabi_l2d>:
   d6d3c:	ea50 0201 	orrs.w	r2, r0, r1
   d6d40:	bf08      	it	eq
   d6d42:	4770      	bxeq	lr
   d6d44:	b530      	push	{r4, r5, lr}
   d6d46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6d4a:	d502      	bpl.n	d6d52 <__aeabi_l2d+0x16>
   d6d4c:	4240      	negs	r0, r0
   d6d4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6d52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6d56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6d5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6d5e:	f43f aed8 	beq.w	d6b12 <__adddf3+0xe6>
   d6d62:	f04f 0203 	mov.w	r2, #3
   d6d66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6d6a:	bf18      	it	ne
   d6d6c:	3203      	addne	r2, #3
   d6d6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6d72:	bf18      	it	ne
   d6d74:	3203      	addne	r2, #3
   d6d76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6d7a:	f1c2 0320 	rsb	r3, r2, #32
   d6d7e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6d82:	fa20 f002 	lsr.w	r0, r0, r2
   d6d86:	fa01 fe03 	lsl.w	lr, r1, r3
   d6d8a:	ea40 000e 	orr.w	r0, r0, lr
   d6d8e:	fa21 f102 	lsr.w	r1, r1, r2
   d6d92:	4414      	add	r4, r2
   d6d94:	e6bd      	b.n	d6b12 <__adddf3+0xe6>
   d6d96:	bf00      	nop

000d6d98 <__aeabi_dmul>:
   d6d98:	b570      	push	{r4, r5, r6, lr}
   d6d9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6d9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6da2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6da6:	bf1d      	ittte	ne
   d6da8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6dac:	ea94 0f0c 	teqne	r4, ip
   d6db0:	ea95 0f0c 	teqne	r5, ip
   d6db4:	f000 f8de 	bleq	d6f74 <__aeabi_dmul+0x1dc>
   d6db8:	442c      	add	r4, r5
   d6dba:	ea81 0603 	eor.w	r6, r1, r3
   d6dbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6dc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6dc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6dca:	bf18      	it	ne
   d6dcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6dd8:	d038      	beq.n	d6e4c <__aeabi_dmul+0xb4>
   d6dda:	fba0 ce02 	umull	ip, lr, r0, r2
   d6dde:	f04f 0500 	mov.w	r5, #0
   d6de2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6de6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6dea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6dee:	f04f 0600 	mov.w	r6, #0
   d6df2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6df6:	f09c 0f00 	teq	ip, #0
   d6dfa:	bf18      	it	ne
   d6dfc:	f04e 0e01 	orrne.w	lr, lr, #1
   d6e00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6e04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6e08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6e0c:	d204      	bcs.n	d6e18 <__aeabi_dmul+0x80>
   d6e0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6e12:	416d      	adcs	r5, r5
   d6e14:	eb46 0606 	adc.w	r6, r6, r6
   d6e18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6e1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6e20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6e24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6e28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6e2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6e30:	bf88      	it	hi
   d6e32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6e36:	d81e      	bhi.n	d6e76 <__aeabi_dmul+0xde>
   d6e38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6e3c:	bf08      	it	eq
   d6e3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6e42:	f150 0000 	adcs.w	r0, r0, #0
   d6e46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6e4a:	bd70      	pop	{r4, r5, r6, pc}
   d6e4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6e50:	ea46 0101 	orr.w	r1, r6, r1
   d6e54:	ea40 0002 	orr.w	r0, r0, r2
   d6e58:	ea81 0103 	eor.w	r1, r1, r3
   d6e5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6e60:	bfc2      	ittt	gt
   d6e62:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6e66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6e6a:	bd70      	popgt	{r4, r5, r6, pc}
   d6e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e70:	f04f 0e00 	mov.w	lr, #0
   d6e74:	3c01      	subs	r4, #1
   d6e76:	f300 80ab 	bgt.w	d6fd0 <__aeabi_dmul+0x238>
   d6e7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6e7e:	bfde      	ittt	le
   d6e80:	2000      	movle	r0, #0
   d6e82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6e86:	bd70      	pople	{r4, r5, r6, pc}
   d6e88:	f1c4 0400 	rsb	r4, r4, #0
   d6e8c:	3c20      	subs	r4, #32
   d6e8e:	da35      	bge.n	d6efc <__aeabi_dmul+0x164>
   d6e90:	340c      	adds	r4, #12
   d6e92:	dc1b      	bgt.n	d6ecc <__aeabi_dmul+0x134>
   d6e94:	f104 0414 	add.w	r4, r4, #20
   d6e98:	f1c4 0520 	rsb	r5, r4, #32
   d6e9c:	fa00 f305 	lsl.w	r3, r0, r5
   d6ea0:	fa20 f004 	lsr.w	r0, r0, r4
   d6ea4:	fa01 f205 	lsl.w	r2, r1, r5
   d6ea8:	ea40 0002 	orr.w	r0, r0, r2
   d6eac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6eb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6eb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6eb8:	fa21 f604 	lsr.w	r6, r1, r4
   d6ebc:	eb42 0106 	adc.w	r1, r2, r6
   d6ec0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6ec4:	bf08      	it	eq
   d6ec6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6eca:	bd70      	pop	{r4, r5, r6, pc}
   d6ecc:	f1c4 040c 	rsb	r4, r4, #12
   d6ed0:	f1c4 0520 	rsb	r5, r4, #32
   d6ed4:	fa00 f304 	lsl.w	r3, r0, r4
   d6ed8:	fa20 f005 	lsr.w	r0, r0, r5
   d6edc:	fa01 f204 	lsl.w	r2, r1, r4
   d6ee0:	ea40 0002 	orr.w	r0, r0, r2
   d6ee4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ee8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6eec:	f141 0100 	adc.w	r1, r1, #0
   d6ef0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6ef4:	bf08      	it	eq
   d6ef6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6efa:	bd70      	pop	{r4, r5, r6, pc}
   d6efc:	f1c4 0520 	rsb	r5, r4, #32
   d6f00:	fa00 f205 	lsl.w	r2, r0, r5
   d6f04:	ea4e 0e02 	orr.w	lr, lr, r2
   d6f08:	fa20 f304 	lsr.w	r3, r0, r4
   d6f0c:	fa01 f205 	lsl.w	r2, r1, r5
   d6f10:	ea43 0302 	orr.w	r3, r3, r2
   d6f14:	fa21 f004 	lsr.w	r0, r1, r4
   d6f18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f1c:	fa21 f204 	lsr.w	r2, r1, r4
   d6f20:	ea20 0002 	bic.w	r0, r0, r2
   d6f24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6f28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6f2c:	bf08      	it	eq
   d6f2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6f32:	bd70      	pop	{r4, r5, r6, pc}
   d6f34:	f094 0f00 	teq	r4, #0
   d6f38:	d10f      	bne.n	d6f5a <__aeabi_dmul+0x1c2>
   d6f3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6f3e:	0040      	lsls	r0, r0, #1
   d6f40:	eb41 0101 	adc.w	r1, r1, r1
   d6f44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6f48:	bf08      	it	eq
   d6f4a:	3c01      	subeq	r4, #1
   d6f4c:	d0f7      	beq.n	d6f3e <__aeabi_dmul+0x1a6>
   d6f4e:	ea41 0106 	orr.w	r1, r1, r6
   d6f52:	f095 0f00 	teq	r5, #0
   d6f56:	bf18      	it	ne
   d6f58:	4770      	bxne	lr
   d6f5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6f5e:	0052      	lsls	r2, r2, #1
   d6f60:	eb43 0303 	adc.w	r3, r3, r3
   d6f64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6f68:	bf08      	it	eq
   d6f6a:	3d01      	subeq	r5, #1
   d6f6c:	d0f7      	beq.n	d6f5e <__aeabi_dmul+0x1c6>
   d6f6e:	ea43 0306 	orr.w	r3, r3, r6
   d6f72:	4770      	bx	lr
   d6f74:	ea94 0f0c 	teq	r4, ip
   d6f78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6f7c:	bf18      	it	ne
   d6f7e:	ea95 0f0c 	teqne	r5, ip
   d6f82:	d00c      	beq.n	d6f9e <__aeabi_dmul+0x206>
   d6f84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6f88:	bf18      	it	ne
   d6f8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6f8e:	d1d1      	bne.n	d6f34 <__aeabi_dmul+0x19c>
   d6f90:	ea81 0103 	eor.w	r1, r1, r3
   d6f94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f98:	f04f 0000 	mov.w	r0, #0
   d6f9c:	bd70      	pop	{r4, r5, r6, pc}
   d6f9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6fa2:	bf06      	itte	eq
   d6fa4:	4610      	moveq	r0, r2
   d6fa6:	4619      	moveq	r1, r3
   d6fa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6fac:	d019      	beq.n	d6fe2 <__aeabi_dmul+0x24a>
   d6fae:	ea94 0f0c 	teq	r4, ip
   d6fb2:	d102      	bne.n	d6fba <__aeabi_dmul+0x222>
   d6fb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6fb8:	d113      	bne.n	d6fe2 <__aeabi_dmul+0x24a>
   d6fba:	ea95 0f0c 	teq	r5, ip
   d6fbe:	d105      	bne.n	d6fcc <__aeabi_dmul+0x234>
   d6fc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6fc4:	bf1c      	itt	ne
   d6fc6:	4610      	movne	r0, r2
   d6fc8:	4619      	movne	r1, r3
   d6fca:	d10a      	bne.n	d6fe2 <__aeabi_dmul+0x24a>
   d6fcc:	ea81 0103 	eor.w	r1, r1, r3
   d6fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6fd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6fd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6fdc:	f04f 0000 	mov.w	r0, #0
   d6fe0:	bd70      	pop	{r4, r5, r6, pc}
   d6fe2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6fe6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6fea:	bd70      	pop	{r4, r5, r6, pc}

000d6fec <__aeabi_ddiv>:
   d6fec:	b570      	push	{r4, r5, r6, lr}
   d6fee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ff2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ff6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6ffa:	bf1d      	ittte	ne
   d6ffc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7000:	ea94 0f0c 	teqne	r4, ip
   d7004:	ea95 0f0c 	teqne	r5, ip
   d7008:	f000 f8a7 	bleq	d715a <__aeabi_ddiv+0x16e>
   d700c:	eba4 0405 	sub.w	r4, r4, r5
   d7010:	ea81 0e03 	eor.w	lr, r1, r3
   d7014:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7018:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d701c:	f000 8088 	beq.w	d7130 <__aeabi_ddiv+0x144>
   d7020:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7024:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7028:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d702c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7030:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7034:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7038:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d703c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7040:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7044:	429d      	cmp	r5, r3
   d7046:	bf08      	it	eq
   d7048:	4296      	cmpeq	r6, r2
   d704a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d704e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7052:	d202      	bcs.n	d705a <__aeabi_ddiv+0x6e>
   d7054:	085b      	lsrs	r3, r3, #1
   d7056:	ea4f 0232 	mov.w	r2, r2, rrx
   d705a:	1ab6      	subs	r6, r6, r2
   d705c:	eb65 0503 	sbc.w	r5, r5, r3
   d7060:	085b      	lsrs	r3, r3, #1
   d7062:	ea4f 0232 	mov.w	r2, r2, rrx
   d7066:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d706a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d706e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7072:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7076:	bf22      	ittt	cs
   d7078:	1ab6      	subcs	r6, r6, r2
   d707a:	4675      	movcs	r5, lr
   d707c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7080:	085b      	lsrs	r3, r3, #1
   d7082:	ea4f 0232 	mov.w	r2, r2, rrx
   d7086:	ebb6 0e02 	subs.w	lr, r6, r2
   d708a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d708e:	bf22      	ittt	cs
   d7090:	1ab6      	subcs	r6, r6, r2
   d7092:	4675      	movcs	r5, lr
   d7094:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7098:	085b      	lsrs	r3, r3, #1
   d709a:	ea4f 0232 	mov.w	r2, r2, rrx
   d709e:	ebb6 0e02 	subs.w	lr, r6, r2
   d70a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d70a6:	bf22      	ittt	cs
   d70a8:	1ab6      	subcs	r6, r6, r2
   d70aa:	4675      	movcs	r5, lr
   d70ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d70b0:	085b      	lsrs	r3, r3, #1
   d70b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d70b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d70ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d70be:	bf22      	ittt	cs
   d70c0:	1ab6      	subcs	r6, r6, r2
   d70c2:	4675      	movcs	r5, lr
   d70c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d70c8:	ea55 0e06 	orrs.w	lr, r5, r6
   d70cc:	d018      	beq.n	d7100 <__aeabi_ddiv+0x114>
   d70ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d70d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d70d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d70da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d70de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d70e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d70e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d70ea:	d1c0      	bne.n	d706e <__aeabi_ddiv+0x82>
   d70ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d70f0:	d10b      	bne.n	d710a <__aeabi_ddiv+0x11e>
   d70f2:	ea41 0100 	orr.w	r1, r1, r0
   d70f6:	f04f 0000 	mov.w	r0, #0
   d70fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d70fe:	e7b6      	b.n	d706e <__aeabi_ddiv+0x82>
   d7100:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7104:	bf04      	itt	eq
   d7106:	4301      	orreq	r1, r0
   d7108:	2000      	moveq	r0, #0
   d710a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d710e:	bf88      	it	hi
   d7110:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7114:	f63f aeaf 	bhi.w	d6e76 <__aeabi_dmul+0xde>
   d7118:	ebb5 0c03 	subs.w	ip, r5, r3
   d711c:	bf04      	itt	eq
   d711e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7122:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7126:	f150 0000 	adcs.w	r0, r0, #0
   d712a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d712e:	bd70      	pop	{r4, r5, r6, pc}
   d7130:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7134:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7138:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d713c:	bfc2      	ittt	gt
   d713e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7142:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7146:	bd70      	popgt	{r4, r5, r6, pc}
   d7148:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d714c:	f04f 0e00 	mov.w	lr, #0
   d7150:	3c01      	subs	r4, #1
   d7152:	e690      	b.n	d6e76 <__aeabi_dmul+0xde>
   d7154:	ea45 0e06 	orr.w	lr, r5, r6
   d7158:	e68d      	b.n	d6e76 <__aeabi_dmul+0xde>
   d715a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d715e:	ea94 0f0c 	teq	r4, ip
   d7162:	bf08      	it	eq
   d7164:	ea95 0f0c 	teqeq	r5, ip
   d7168:	f43f af3b 	beq.w	d6fe2 <__aeabi_dmul+0x24a>
   d716c:	ea94 0f0c 	teq	r4, ip
   d7170:	d10a      	bne.n	d7188 <__aeabi_ddiv+0x19c>
   d7172:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7176:	f47f af34 	bne.w	d6fe2 <__aeabi_dmul+0x24a>
   d717a:	ea95 0f0c 	teq	r5, ip
   d717e:	f47f af25 	bne.w	d6fcc <__aeabi_dmul+0x234>
   d7182:	4610      	mov	r0, r2
   d7184:	4619      	mov	r1, r3
   d7186:	e72c      	b.n	d6fe2 <__aeabi_dmul+0x24a>
   d7188:	ea95 0f0c 	teq	r5, ip
   d718c:	d106      	bne.n	d719c <__aeabi_ddiv+0x1b0>
   d718e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7192:	f43f aefd 	beq.w	d6f90 <__aeabi_dmul+0x1f8>
   d7196:	4610      	mov	r0, r2
   d7198:	4619      	mov	r1, r3
   d719a:	e722      	b.n	d6fe2 <__aeabi_dmul+0x24a>
   d719c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d71a0:	bf18      	it	ne
   d71a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d71a6:	f47f aec5 	bne.w	d6f34 <__aeabi_dmul+0x19c>
   d71aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d71ae:	f47f af0d 	bne.w	d6fcc <__aeabi_dmul+0x234>
   d71b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d71b6:	f47f aeeb 	bne.w	d6f90 <__aeabi_dmul+0x1f8>
   d71ba:	e712      	b.n	d6fe2 <__aeabi_dmul+0x24a>

000d71bc <__gedf2>:
   d71bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d71c0:	e006      	b.n	d71d0 <__cmpdf2+0x4>
   d71c2:	bf00      	nop

000d71c4 <__ledf2>:
   d71c4:	f04f 0c01 	mov.w	ip, #1
   d71c8:	e002      	b.n	d71d0 <__cmpdf2+0x4>
   d71ca:	bf00      	nop

000d71cc <__cmpdf2>:
   d71cc:	f04f 0c01 	mov.w	ip, #1
   d71d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d71d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d71d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d71dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d71e0:	bf18      	it	ne
   d71e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d71e6:	d01b      	beq.n	d7220 <__cmpdf2+0x54>
   d71e8:	b001      	add	sp, #4
   d71ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d71ee:	bf0c      	ite	eq
   d71f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d71f4:	ea91 0f03 	teqne	r1, r3
   d71f8:	bf02      	ittt	eq
   d71fa:	ea90 0f02 	teqeq	r0, r2
   d71fe:	2000      	moveq	r0, #0
   d7200:	4770      	bxeq	lr
   d7202:	f110 0f00 	cmn.w	r0, #0
   d7206:	ea91 0f03 	teq	r1, r3
   d720a:	bf58      	it	pl
   d720c:	4299      	cmppl	r1, r3
   d720e:	bf08      	it	eq
   d7210:	4290      	cmpeq	r0, r2
   d7212:	bf2c      	ite	cs
   d7214:	17d8      	asrcs	r0, r3, #31
   d7216:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d721a:	f040 0001 	orr.w	r0, r0, #1
   d721e:	4770      	bx	lr
   d7220:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7224:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7228:	d102      	bne.n	d7230 <__cmpdf2+0x64>
   d722a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d722e:	d107      	bne.n	d7240 <__cmpdf2+0x74>
   d7230:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7234:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7238:	d1d6      	bne.n	d71e8 <__cmpdf2+0x1c>
   d723a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d723e:	d0d3      	beq.n	d71e8 <__cmpdf2+0x1c>
   d7240:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7244:	4770      	bx	lr
   d7246:	bf00      	nop

000d7248 <__aeabi_cdrcmple>:
   d7248:	4684      	mov	ip, r0
   d724a:	4610      	mov	r0, r2
   d724c:	4662      	mov	r2, ip
   d724e:	468c      	mov	ip, r1
   d7250:	4619      	mov	r1, r3
   d7252:	4663      	mov	r3, ip
   d7254:	e000      	b.n	d7258 <__aeabi_cdcmpeq>
   d7256:	bf00      	nop

000d7258 <__aeabi_cdcmpeq>:
   d7258:	b501      	push	{r0, lr}
   d725a:	f7ff ffb7 	bl	d71cc <__cmpdf2>
   d725e:	2800      	cmp	r0, #0
   d7260:	bf48      	it	mi
   d7262:	f110 0f00 	cmnmi.w	r0, #0
   d7266:	bd01      	pop	{r0, pc}

000d7268 <__aeabi_dcmpeq>:
   d7268:	f84d ed08 	str.w	lr, [sp, #-8]!
   d726c:	f7ff fff4 	bl	d7258 <__aeabi_cdcmpeq>
   d7270:	bf0c      	ite	eq
   d7272:	2001      	moveq	r0, #1
   d7274:	2000      	movne	r0, #0
   d7276:	f85d fb08 	ldr.w	pc, [sp], #8
   d727a:	bf00      	nop

000d727c <__aeabi_dcmplt>:
   d727c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7280:	f7ff ffea 	bl	d7258 <__aeabi_cdcmpeq>
   d7284:	bf34      	ite	cc
   d7286:	2001      	movcc	r0, #1
   d7288:	2000      	movcs	r0, #0
   d728a:	f85d fb08 	ldr.w	pc, [sp], #8
   d728e:	bf00      	nop

000d7290 <__aeabi_dcmple>:
   d7290:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7294:	f7ff ffe0 	bl	d7258 <__aeabi_cdcmpeq>
   d7298:	bf94      	ite	ls
   d729a:	2001      	movls	r0, #1
   d729c:	2000      	movhi	r0, #0
   d729e:	f85d fb08 	ldr.w	pc, [sp], #8
   d72a2:	bf00      	nop

000d72a4 <__aeabi_dcmpge>:
   d72a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d72a8:	f7ff ffce 	bl	d7248 <__aeabi_cdrcmple>
   d72ac:	bf94      	ite	ls
   d72ae:	2001      	movls	r0, #1
   d72b0:	2000      	movhi	r0, #0
   d72b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d72b6:	bf00      	nop

000d72b8 <__aeabi_dcmpgt>:
   d72b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d72bc:	f7ff ffc4 	bl	d7248 <__aeabi_cdrcmple>
   d72c0:	bf34      	ite	cc
   d72c2:	2001      	movcc	r0, #1
   d72c4:	2000      	movcs	r0, #0
   d72c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d72ca:	bf00      	nop

000d72cc <__aeabi_d2uiz>:
   d72cc:	004a      	lsls	r2, r1, #1
   d72ce:	d211      	bcs.n	d72f4 <__aeabi_d2uiz+0x28>
   d72d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d72d4:	d211      	bcs.n	d72fa <__aeabi_d2uiz+0x2e>
   d72d6:	d50d      	bpl.n	d72f4 <__aeabi_d2uiz+0x28>
   d72d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d72dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d72e0:	d40e      	bmi.n	d7300 <__aeabi_d2uiz+0x34>
   d72e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d72e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d72ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d72ee:	fa23 f002 	lsr.w	r0, r3, r2
   d72f2:	4770      	bx	lr
   d72f4:	f04f 0000 	mov.w	r0, #0
   d72f8:	4770      	bx	lr
   d72fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d72fe:	d102      	bne.n	d7306 <__aeabi_d2uiz+0x3a>
   d7300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7304:	4770      	bx	lr
   d7306:	f04f 0000 	mov.w	r0, #0
   d730a:	4770      	bx	lr

000d730c <__aeabi_d2f>:
   d730c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7310:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7314:	bf24      	itt	cs
   d7316:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d731a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d731e:	d90d      	bls.n	d733c <__aeabi_d2f+0x30>
   d7320:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7324:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7328:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d732c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7330:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7334:	bf08      	it	eq
   d7336:	f020 0001 	biceq.w	r0, r0, #1
   d733a:	4770      	bx	lr
   d733c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7340:	d121      	bne.n	d7386 <__aeabi_d2f+0x7a>
   d7342:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7346:	bfbc      	itt	lt
   d7348:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d734c:	4770      	bxlt	lr
   d734e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7352:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7356:	f1c2 0218 	rsb	r2, r2, #24
   d735a:	f1c2 0c20 	rsb	ip, r2, #32
   d735e:	fa10 f30c 	lsls.w	r3, r0, ip
   d7362:	fa20 f002 	lsr.w	r0, r0, r2
   d7366:	bf18      	it	ne
   d7368:	f040 0001 	orrne.w	r0, r0, #1
   d736c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7370:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7374:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7378:	ea40 000c 	orr.w	r0, r0, ip
   d737c:	fa23 f302 	lsr.w	r3, r3, r2
   d7380:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7384:	e7cc      	b.n	d7320 <__aeabi_d2f+0x14>
   d7386:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d738a:	d107      	bne.n	d739c <__aeabi_d2f+0x90>
   d738c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7390:	bf1e      	ittt	ne
   d7392:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7396:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d739a:	4770      	bxne	lr
   d739c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d73a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d73a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d73a8:	4770      	bx	lr
   d73aa:	bf00      	nop

000d73ac <__aeabi_uldivmod>:
   d73ac:	b953      	cbnz	r3, d73c4 <__aeabi_uldivmod+0x18>
   d73ae:	b94a      	cbnz	r2, d73c4 <__aeabi_uldivmod+0x18>
   d73b0:	2900      	cmp	r1, #0
   d73b2:	bf08      	it	eq
   d73b4:	2800      	cmpeq	r0, #0
   d73b6:	bf1c      	itt	ne
   d73b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d73bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d73c0:	f000 b98c 	b.w	d76dc <__aeabi_idiv0>
   d73c4:	f1ad 0c08 	sub.w	ip, sp, #8
   d73c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d73cc:	f000 f824 	bl	d7418 <__udivmoddi4>
   d73d0:	f8dd e004 	ldr.w	lr, [sp, #4]
   d73d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d73d8:	b004      	add	sp, #16
   d73da:	4770      	bx	lr

000d73dc <__aeabi_d2ulz>:
   d73dc:	b5d0      	push	{r4, r6, r7, lr}
   d73de:	4b0c      	ldr	r3, [pc, #48]	; (d7410 <__aeabi_d2ulz+0x34>)
   d73e0:	2200      	movs	r2, #0
   d73e2:	4606      	mov	r6, r0
   d73e4:	460f      	mov	r7, r1
   d73e6:	f7ff fcd7 	bl	d6d98 <__aeabi_dmul>
   d73ea:	f7ff ff6f 	bl	d72cc <__aeabi_d2uiz>
   d73ee:	4604      	mov	r4, r0
   d73f0:	f7ff fc58 	bl	d6ca4 <__aeabi_ui2d>
   d73f4:	4b07      	ldr	r3, [pc, #28]	; (d7414 <__aeabi_d2ulz+0x38>)
   d73f6:	2200      	movs	r2, #0
   d73f8:	f7ff fcce 	bl	d6d98 <__aeabi_dmul>
   d73fc:	4602      	mov	r2, r0
   d73fe:	460b      	mov	r3, r1
   d7400:	4630      	mov	r0, r6
   d7402:	4639      	mov	r1, r7
   d7404:	f7ff fb10 	bl	d6a28 <__aeabi_dsub>
   d7408:	f7ff ff60 	bl	d72cc <__aeabi_d2uiz>
   d740c:	4621      	mov	r1, r4
   d740e:	bdd0      	pop	{r4, r6, r7, pc}
   d7410:	3df00000 	.word	0x3df00000
   d7414:	41f00000 	.word	0x41f00000

000d7418 <__udivmoddi4>:
   d7418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d741c:	9d08      	ldr	r5, [sp, #32]
   d741e:	4604      	mov	r4, r0
   d7420:	468c      	mov	ip, r1
   d7422:	2b00      	cmp	r3, #0
   d7424:	f040 8083 	bne.w	d752e <__udivmoddi4+0x116>
   d7428:	428a      	cmp	r2, r1
   d742a:	4617      	mov	r7, r2
   d742c:	d947      	bls.n	d74be <__udivmoddi4+0xa6>
   d742e:	fab2 f282 	clz	r2, r2
   d7432:	b142      	cbz	r2, d7446 <__udivmoddi4+0x2e>
   d7434:	f1c2 0020 	rsb	r0, r2, #32
   d7438:	fa24 f000 	lsr.w	r0, r4, r0
   d743c:	4091      	lsls	r1, r2
   d743e:	4097      	lsls	r7, r2
   d7440:	ea40 0c01 	orr.w	ip, r0, r1
   d7444:	4094      	lsls	r4, r2
   d7446:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d744a:	0c23      	lsrs	r3, r4, #16
   d744c:	fbbc f6f8 	udiv	r6, ip, r8
   d7450:	fa1f fe87 	uxth.w	lr, r7
   d7454:	fb08 c116 	mls	r1, r8, r6, ip
   d7458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d745c:	fb06 f10e 	mul.w	r1, r6, lr
   d7460:	4299      	cmp	r1, r3
   d7462:	d909      	bls.n	d7478 <__udivmoddi4+0x60>
   d7464:	18fb      	adds	r3, r7, r3
   d7466:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d746a:	f080 8119 	bcs.w	d76a0 <__udivmoddi4+0x288>
   d746e:	4299      	cmp	r1, r3
   d7470:	f240 8116 	bls.w	d76a0 <__udivmoddi4+0x288>
   d7474:	3e02      	subs	r6, #2
   d7476:	443b      	add	r3, r7
   d7478:	1a5b      	subs	r3, r3, r1
   d747a:	b2a4      	uxth	r4, r4
   d747c:	fbb3 f0f8 	udiv	r0, r3, r8
   d7480:	fb08 3310 	mls	r3, r8, r0, r3
   d7484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d7488:	fb00 fe0e 	mul.w	lr, r0, lr
   d748c:	45a6      	cmp	lr, r4
   d748e:	d909      	bls.n	d74a4 <__udivmoddi4+0x8c>
   d7490:	193c      	adds	r4, r7, r4
   d7492:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7496:	f080 8105 	bcs.w	d76a4 <__udivmoddi4+0x28c>
   d749a:	45a6      	cmp	lr, r4
   d749c:	f240 8102 	bls.w	d76a4 <__udivmoddi4+0x28c>
   d74a0:	3802      	subs	r0, #2
   d74a2:	443c      	add	r4, r7
   d74a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d74a8:	eba4 040e 	sub.w	r4, r4, lr
   d74ac:	2600      	movs	r6, #0
   d74ae:	b11d      	cbz	r5, d74b8 <__udivmoddi4+0xa0>
   d74b0:	40d4      	lsrs	r4, r2
   d74b2:	2300      	movs	r3, #0
   d74b4:	e9c5 4300 	strd	r4, r3, [r5]
   d74b8:	4631      	mov	r1, r6
   d74ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d74be:	b902      	cbnz	r2, d74c2 <__udivmoddi4+0xaa>
   d74c0:	deff      	udf	#255	; 0xff
   d74c2:	fab2 f282 	clz	r2, r2
   d74c6:	2a00      	cmp	r2, #0
   d74c8:	d150      	bne.n	d756c <__udivmoddi4+0x154>
   d74ca:	1bcb      	subs	r3, r1, r7
   d74cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d74d0:	fa1f f887 	uxth.w	r8, r7
   d74d4:	2601      	movs	r6, #1
   d74d6:	fbb3 fcfe 	udiv	ip, r3, lr
   d74da:	0c21      	lsrs	r1, r4, #16
   d74dc:	fb0e 331c 	mls	r3, lr, ip, r3
   d74e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d74e4:	fb08 f30c 	mul.w	r3, r8, ip
   d74e8:	428b      	cmp	r3, r1
   d74ea:	d907      	bls.n	d74fc <__udivmoddi4+0xe4>
   d74ec:	1879      	adds	r1, r7, r1
   d74ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d74f2:	d202      	bcs.n	d74fa <__udivmoddi4+0xe2>
   d74f4:	428b      	cmp	r3, r1
   d74f6:	f200 80e9 	bhi.w	d76cc <__udivmoddi4+0x2b4>
   d74fa:	4684      	mov	ip, r0
   d74fc:	1ac9      	subs	r1, r1, r3
   d74fe:	b2a3      	uxth	r3, r4
   d7500:	fbb1 f0fe 	udiv	r0, r1, lr
   d7504:	fb0e 1110 	mls	r1, lr, r0, r1
   d7508:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d750c:	fb08 f800 	mul.w	r8, r8, r0
   d7510:	45a0      	cmp	r8, r4
   d7512:	d907      	bls.n	d7524 <__udivmoddi4+0x10c>
   d7514:	193c      	adds	r4, r7, r4
   d7516:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d751a:	d202      	bcs.n	d7522 <__udivmoddi4+0x10a>
   d751c:	45a0      	cmp	r8, r4
   d751e:	f200 80d9 	bhi.w	d76d4 <__udivmoddi4+0x2bc>
   d7522:	4618      	mov	r0, r3
   d7524:	eba4 0408 	sub.w	r4, r4, r8
   d7528:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d752c:	e7bf      	b.n	d74ae <__udivmoddi4+0x96>
   d752e:	428b      	cmp	r3, r1
   d7530:	d909      	bls.n	d7546 <__udivmoddi4+0x12e>
   d7532:	2d00      	cmp	r5, #0
   d7534:	f000 80b1 	beq.w	d769a <__udivmoddi4+0x282>
   d7538:	2600      	movs	r6, #0
   d753a:	e9c5 0100 	strd	r0, r1, [r5]
   d753e:	4630      	mov	r0, r6
   d7540:	4631      	mov	r1, r6
   d7542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7546:	fab3 f683 	clz	r6, r3
   d754a:	2e00      	cmp	r6, #0
   d754c:	d14a      	bne.n	d75e4 <__udivmoddi4+0x1cc>
   d754e:	428b      	cmp	r3, r1
   d7550:	d302      	bcc.n	d7558 <__udivmoddi4+0x140>
   d7552:	4282      	cmp	r2, r0
   d7554:	f200 80b8 	bhi.w	d76c8 <__udivmoddi4+0x2b0>
   d7558:	1a84      	subs	r4, r0, r2
   d755a:	eb61 0103 	sbc.w	r1, r1, r3
   d755e:	2001      	movs	r0, #1
   d7560:	468c      	mov	ip, r1
   d7562:	2d00      	cmp	r5, #0
   d7564:	d0a8      	beq.n	d74b8 <__udivmoddi4+0xa0>
   d7566:	e9c5 4c00 	strd	r4, ip, [r5]
   d756a:	e7a5      	b.n	d74b8 <__udivmoddi4+0xa0>
   d756c:	f1c2 0320 	rsb	r3, r2, #32
   d7570:	fa20 f603 	lsr.w	r6, r0, r3
   d7574:	4097      	lsls	r7, r2
   d7576:	fa01 f002 	lsl.w	r0, r1, r2
   d757a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d757e:	40d9      	lsrs	r1, r3
   d7580:	4330      	orrs	r0, r6
   d7582:	0c03      	lsrs	r3, r0, #16
   d7584:	fbb1 f6fe 	udiv	r6, r1, lr
   d7588:	fa1f f887 	uxth.w	r8, r7
   d758c:	fb0e 1116 	mls	r1, lr, r6, r1
   d7590:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7594:	fb06 f108 	mul.w	r1, r6, r8
   d7598:	4299      	cmp	r1, r3
   d759a:	fa04 f402 	lsl.w	r4, r4, r2
   d759e:	d909      	bls.n	d75b4 <__udivmoddi4+0x19c>
   d75a0:	18fb      	adds	r3, r7, r3
   d75a2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d75a6:	f080 808d 	bcs.w	d76c4 <__udivmoddi4+0x2ac>
   d75aa:	4299      	cmp	r1, r3
   d75ac:	f240 808a 	bls.w	d76c4 <__udivmoddi4+0x2ac>
   d75b0:	3e02      	subs	r6, #2
   d75b2:	443b      	add	r3, r7
   d75b4:	1a5b      	subs	r3, r3, r1
   d75b6:	b281      	uxth	r1, r0
   d75b8:	fbb3 f0fe 	udiv	r0, r3, lr
   d75bc:	fb0e 3310 	mls	r3, lr, r0, r3
   d75c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d75c4:	fb00 f308 	mul.w	r3, r0, r8
   d75c8:	428b      	cmp	r3, r1
   d75ca:	d907      	bls.n	d75dc <__udivmoddi4+0x1c4>
   d75cc:	1879      	adds	r1, r7, r1
   d75ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d75d2:	d273      	bcs.n	d76bc <__udivmoddi4+0x2a4>
   d75d4:	428b      	cmp	r3, r1
   d75d6:	d971      	bls.n	d76bc <__udivmoddi4+0x2a4>
   d75d8:	3802      	subs	r0, #2
   d75da:	4439      	add	r1, r7
   d75dc:	1acb      	subs	r3, r1, r3
   d75de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d75e2:	e778      	b.n	d74d6 <__udivmoddi4+0xbe>
   d75e4:	f1c6 0c20 	rsb	ip, r6, #32
   d75e8:	fa03 f406 	lsl.w	r4, r3, r6
   d75ec:	fa22 f30c 	lsr.w	r3, r2, ip
   d75f0:	431c      	orrs	r4, r3
   d75f2:	fa20 f70c 	lsr.w	r7, r0, ip
   d75f6:	fa01 f306 	lsl.w	r3, r1, r6
   d75fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d75fe:	fa21 f10c 	lsr.w	r1, r1, ip
   d7602:	431f      	orrs	r7, r3
   d7604:	0c3b      	lsrs	r3, r7, #16
   d7606:	fbb1 f9fe 	udiv	r9, r1, lr
   d760a:	fa1f f884 	uxth.w	r8, r4
   d760e:	fb0e 1119 	mls	r1, lr, r9, r1
   d7612:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d7616:	fb09 fa08 	mul.w	sl, r9, r8
   d761a:	458a      	cmp	sl, r1
   d761c:	fa02 f206 	lsl.w	r2, r2, r6
   d7620:	fa00 f306 	lsl.w	r3, r0, r6
   d7624:	d908      	bls.n	d7638 <__udivmoddi4+0x220>
   d7626:	1861      	adds	r1, r4, r1
   d7628:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d762c:	d248      	bcs.n	d76c0 <__udivmoddi4+0x2a8>
   d762e:	458a      	cmp	sl, r1
   d7630:	d946      	bls.n	d76c0 <__udivmoddi4+0x2a8>
   d7632:	f1a9 0902 	sub.w	r9, r9, #2
   d7636:	4421      	add	r1, r4
   d7638:	eba1 010a 	sub.w	r1, r1, sl
   d763c:	b2bf      	uxth	r7, r7
   d763e:	fbb1 f0fe 	udiv	r0, r1, lr
   d7642:	fb0e 1110 	mls	r1, lr, r0, r1
   d7646:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d764a:	fb00 f808 	mul.w	r8, r0, r8
   d764e:	45b8      	cmp	r8, r7
   d7650:	d907      	bls.n	d7662 <__udivmoddi4+0x24a>
   d7652:	19e7      	adds	r7, r4, r7
   d7654:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d7658:	d22e      	bcs.n	d76b8 <__udivmoddi4+0x2a0>
   d765a:	45b8      	cmp	r8, r7
   d765c:	d92c      	bls.n	d76b8 <__udivmoddi4+0x2a0>
   d765e:	3802      	subs	r0, #2
   d7660:	4427      	add	r7, r4
   d7662:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d7666:	eba7 0708 	sub.w	r7, r7, r8
   d766a:	fba0 8902 	umull	r8, r9, r0, r2
   d766e:	454f      	cmp	r7, r9
   d7670:	46c6      	mov	lr, r8
   d7672:	4649      	mov	r1, r9
   d7674:	d31a      	bcc.n	d76ac <__udivmoddi4+0x294>
   d7676:	d017      	beq.n	d76a8 <__udivmoddi4+0x290>
   d7678:	b15d      	cbz	r5, d7692 <__udivmoddi4+0x27a>
   d767a:	ebb3 020e 	subs.w	r2, r3, lr
   d767e:	eb67 0701 	sbc.w	r7, r7, r1
   d7682:	fa07 fc0c 	lsl.w	ip, r7, ip
   d7686:	40f2      	lsrs	r2, r6
   d7688:	ea4c 0202 	orr.w	r2, ip, r2
   d768c:	40f7      	lsrs	r7, r6
   d768e:	e9c5 2700 	strd	r2, r7, [r5]
   d7692:	2600      	movs	r6, #0
   d7694:	4631      	mov	r1, r6
   d7696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d769a:	462e      	mov	r6, r5
   d769c:	4628      	mov	r0, r5
   d769e:	e70b      	b.n	d74b8 <__udivmoddi4+0xa0>
   d76a0:	4606      	mov	r6, r0
   d76a2:	e6e9      	b.n	d7478 <__udivmoddi4+0x60>
   d76a4:	4618      	mov	r0, r3
   d76a6:	e6fd      	b.n	d74a4 <__udivmoddi4+0x8c>
   d76a8:	4543      	cmp	r3, r8
   d76aa:	d2e5      	bcs.n	d7678 <__udivmoddi4+0x260>
   d76ac:	ebb8 0e02 	subs.w	lr, r8, r2
   d76b0:	eb69 0104 	sbc.w	r1, r9, r4
   d76b4:	3801      	subs	r0, #1
   d76b6:	e7df      	b.n	d7678 <__udivmoddi4+0x260>
   d76b8:	4608      	mov	r0, r1
   d76ba:	e7d2      	b.n	d7662 <__udivmoddi4+0x24a>
   d76bc:	4660      	mov	r0, ip
   d76be:	e78d      	b.n	d75dc <__udivmoddi4+0x1c4>
   d76c0:	4681      	mov	r9, r0
   d76c2:	e7b9      	b.n	d7638 <__udivmoddi4+0x220>
   d76c4:	4666      	mov	r6, ip
   d76c6:	e775      	b.n	d75b4 <__udivmoddi4+0x19c>
   d76c8:	4630      	mov	r0, r6
   d76ca:	e74a      	b.n	d7562 <__udivmoddi4+0x14a>
   d76cc:	f1ac 0c02 	sub.w	ip, ip, #2
   d76d0:	4439      	add	r1, r7
   d76d2:	e713      	b.n	d74fc <__udivmoddi4+0xe4>
   d76d4:	3802      	subs	r0, #2
   d76d6:	443c      	add	r4, r7
   d76d8:	e724      	b.n	d7524 <__udivmoddi4+0x10c>
   d76da:	bf00      	nop

000d76dc <__aeabi_idiv0>:
   d76dc:	4770      	bx	lr
   d76de:	bf00      	nop

000d76e0 <calloc>:
   d76e0:	4b02      	ldr	r3, [pc, #8]	; (d76ec <calloc+0xc>)
   d76e2:	460a      	mov	r2, r1
   d76e4:	4601      	mov	r1, r0
   d76e6:	6818      	ldr	r0, [r3, #0]
   d76e8:	f000 b840 	b.w	d776c <_calloc_r>
   d76ec:	2003e418 	.word	0x2003e418

000d76f0 <__cxa_atexit>:
   d76f0:	b510      	push	{r4, lr}
   d76f2:	4c05      	ldr	r4, [pc, #20]	; (d7708 <__cxa_atexit+0x18>)
   d76f4:	4613      	mov	r3, r2
   d76f6:	b12c      	cbz	r4, d7704 <__cxa_atexit+0x14>
   d76f8:	460a      	mov	r2, r1
   d76fa:	4601      	mov	r1, r0
   d76fc:	2002      	movs	r0, #2
   d76fe:	f3af 8000 	nop.w
   d7702:	bd10      	pop	{r4, pc}
   d7704:	4620      	mov	r0, r4
   d7706:	e7fc      	b.n	d7702 <__cxa_atexit+0x12>
   d7708:	00000000 	.word	0x00000000

000d770c <memcpy>:
   d770c:	440a      	add	r2, r1
   d770e:	4291      	cmp	r1, r2
   d7710:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7714:	d100      	bne.n	d7718 <memcpy+0xc>
   d7716:	4770      	bx	lr
   d7718:	b510      	push	{r4, lr}
   d771a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d771e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7722:	4291      	cmp	r1, r2
   d7724:	d1f9      	bne.n	d771a <memcpy+0xe>
   d7726:	bd10      	pop	{r4, pc}

000d7728 <memmove>:
   d7728:	4288      	cmp	r0, r1
   d772a:	b510      	push	{r4, lr}
   d772c:	eb01 0402 	add.w	r4, r1, r2
   d7730:	d902      	bls.n	d7738 <memmove+0x10>
   d7732:	4284      	cmp	r4, r0
   d7734:	4623      	mov	r3, r4
   d7736:	d807      	bhi.n	d7748 <memmove+0x20>
   d7738:	1e43      	subs	r3, r0, #1
   d773a:	42a1      	cmp	r1, r4
   d773c:	d008      	beq.n	d7750 <memmove+0x28>
   d773e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7742:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7746:	e7f8      	b.n	d773a <memmove+0x12>
   d7748:	4402      	add	r2, r0
   d774a:	4601      	mov	r1, r0
   d774c:	428a      	cmp	r2, r1
   d774e:	d100      	bne.n	d7752 <memmove+0x2a>
   d7750:	bd10      	pop	{r4, pc}
   d7752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7756:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d775a:	e7f7      	b.n	d774c <memmove+0x24>

000d775c <memset>:
   d775c:	4402      	add	r2, r0
   d775e:	4603      	mov	r3, r0
   d7760:	4293      	cmp	r3, r2
   d7762:	d100      	bne.n	d7766 <memset+0xa>
   d7764:	4770      	bx	lr
   d7766:	f803 1b01 	strb.w	r1, [r3], #1
   d776a:	e7f9      	b.n	d7760 <memset+0x4>

000d776c <_calloc_r>:
   d776c:	b513      	push	{r0, r1, r4, lr}
   d776e:	434a      	muls	r2, r1
   d7770:	4611      	mov	r1, r2
   d7772:	9201      	str	r2, [sp, #4]
   d7774:	f7fd fd84 	bl	d5280 <_malloc_r>
   d7778:	4604      	mov	r4, r0
   d777a:	b118      	cbz	r0, d7784 <_calloc_r+0x18>
   d777c:	9a01      	ldr	r2, [sp, #4]
   d777e:	2100      	movs	r1, #0
   d7780:	f7ff ffec 	bl	d775c <memset>
   d7784:	4620      	mov	r0, r4
   d7786:	b002      	add	sp, #8
   d7788:	bd10      	pop	{r4, pc}
	...

000d778c <srand>:
   d778c:	b538      	push	{r3, r4, r5, lr}
   d778e:	4b0d      	ldr	r3, [pc, #52]	; (d77c4 <srand+0x38>)
   d7790:	681d      	ldr	r5, [r3, #0]
   d7792:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7794:	4604      	mov	r4, r0
   d7796:	b97b      	cbnz	r3, d77b8 <srand+0x2c>
   d7798:	2018      	movs	r0, #24
   d779a:	f7fd fd51 	bl	d5240 <malloc>
   d779e:	4a0a      	ldr	r2, [pc, #40]	; (d77c8 <srand+0x3c>)
   d77a0:	4b0a      	ldr	r3, [pc, #40]	; (d77cc <srand+0x40>)
   d77a2:	63a8      	str	r0, [r5, #56]	; 0x38
   d77a4:	e9c0 2300 	strd	r2, r3, [r0]
   d77a8:	4b09      	ldr	r3, [pc, #36]	; (d77d0 <srand+0x44>)
   d77aa:	6083      	str	r3, [r0, #8]
   d77ac:	230b      	movs	r3, #11
   d77ae:	8183      	strh	r3, [r0, #12]
   d77b0:	2201      	movs	r2, #1
   d77b2:	2300      	movs	r3, #0
   d77b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d77b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d77ba:	2200      	movs	r2, #0
   d77bc:	611c      	str	r4, [r3, #16]
   d77be:	615a      	str	r2, [r3, #20]
   d77c0:	bd38      	pop	{r3, r4, r5, pc}
   d77c2:	bf00      	nop
   d77c4:	2003e418 	.word	0x2003e418
   d77c8:	abcd330e 	.word	0xabcd330e
   d77cc:	e66d1234 	.word	0xe66d1234
   d77d0:	0005deec 	.word	0x0005deec

000d77d4 <strcmp>:
   d77d4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d77d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d77dc:	2a01      	cmp	r2, #1
   d77de:	bf28      	it	cs
   d77e0:	429a      	cmpcs	r2, r3
   d77e2:	d0f7      	beq.n	d77d4 <strcmp>
   d77e4:	1ad0      	subs	r0, r2, r3
   d77e6:	4770      	bx	lr

000d77e8 <strcpy>:
   d77e8:	4603      	mov	r3, r0
   d77ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   d77ee:	f803 2b01 	strb.w	r2, [r3], #1
   d77f2:	2a00      	cmp	r2, #0
   d77f4:	d1f9      	bne.n	d77ea <strcpy+0x2>
   d77f6:	4770      	bx	lr

000d77f8 <strdup>:
   d77f8:	4b02      	ldr	r3, [pc, #8]	; (d7804 <strdup+0xc>)
   d77fa:	4601      	mov	r1, r0
   d77fc:	6818      	ldr	r0, [r3, #0]
   d77fe:	f000 b803 	b.w	d7808 <_strdup_r>
   d7802:	bf00      	nop
   d7804:	2003e418 	.word	0x2003e418

000d7808 <_strdup_r>:
   d7808:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d780a:	4604      	mov	r4, r0
   d780c:	4608      	mov	r0, r1
   d780e:	460d      	mov	r5, r1
   d7810:	f000 f80f 	bl	d7832 <strlen>
   d7814:	1c42      	adds	r2, r0, #1
   d7816:	4611      	mov	r1, r2
   d7818:	4620      	mov	r0, r4
   d781a:	9201      	str	r2, [sp, #4]
   d781c:	f7fd fd30 	bl	d5280 <_malloc_r>
   d7820:	4604      	mov	r4, r0
   d7822:	b118      	cbz	r0, d782c <_strdup_r+0x24>
   d7824:	9a01      	ldr	r2, [sp, #4]
   d7826:	4629      	mov	r1, r5
   d7828:	f7ff ff70 	bl	d770c <memcpy>
   d782c:	4620      	mov	r0, r4
   d782e:	b003      	add	sp, #12
   d7830:	bd30      	pop	{r4, r5, pc}

000d7832 <strlen>:
   d7832:	4603      	mov	r3, r0
   d7834:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7838:	2a00      	cmp	r2, #0
   d783a:	d1fb      	bne.n	d7834 <strlen+0x2>
   d783c:	1a18      	subs	r0, r3, r0
   d783e:	3801      	subs	r0, #1
   d7840:	4770      	bx	lr

000d7842 <strncmp>:
   d7842:	b510      	push	{r4, lr}
   d7844:	b16a      	cbz	r2, d7862 <strncmp+0x20>
   d7846:	3901      	subs	r1, #1
   d7848:	1884      	adds	r4, r0, r2
   d784a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d784e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d7852:	4293      	cmp	r3, r2
   d7854:	d103      	bne.n	d785e <strncmp+0x1c>
   d7856:	42a0      	cmp	r0, r4
   d7858:	d001      	beq.n	d785e <strncmp+0x1c>
   d785a:	2b00      	cmp	r3, #0
   d785c:	d1f5      	bne.n	d784a <strncmp+0x8>
   d785e:	1a98      	subs	r0, r3, r2
   d7860:	bd10      	pop	{r4, pc}
   d7862:	4610      	mov	r0, r2
   d7864:	e7fc      	b.n	d7860 <strncmp+0x1e>

000d7866 <sulp>:
   d7866:	b570      	push	{r4, r5, r6, lr}
   d7868:	4604      	mov	r4, r0
   d786a:	460d      	mov	r5, r1
   d786c:	ec45 4b10 	vmov	d0, r4, r5
   d7870:	4616      	mov	r6, r2
   d7872:	f001 fc97 	bl	d91a4 <__ulp>
   d7876:	ec51 0b10 	vmov	r0, r1, d0
   d787a:	b17e      	cbz	r6, d789c <sulp+0x36>
   d787c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7880:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7884:	2b00      	cmp	r3, #0
   d7886:	dd09      	ble.n	d789c <sulp+0x36>
   d7888:	051b      	lsls	r3, r3, #20
   d788a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d788e:	2400      	movs	r4, #0
   d7890:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d7894:	4622      	mov	r2, r4
   d7896:	462b      	mov	r3, r5
   d7898:	f7ff fa7e 	bl	d6d98 <__aeabi_dmul>
   d789c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d78a0 <_strtod_l>:
   d78a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78a4:	b0a3      	sub	sp, #140	; 0x8c
   d78a6:	461f      	mov	r7, r3
   d78a8:	2300      	movs	r3, #0
   d78aa:	931e      	str	r3, [sp, #120]	; 0x78
   d78ac:	4ba4      	ldr	r3, [pc, #656]	; (d7b40 <_strtod_l+0x2a0>)
   d78ae:	9219      	str	r2, [sp, #100]	; 0x64
   d78b0:	681b      	ldr	r3, [r3, #0]
   d78b2:	9307      	str	r3, [sp, #28]
   d78b4:	4604      	mov	r4, r0
   d78b6:	4618      	mov	r0, r3
   d78b8:	4688      	mov	r8, r1
   d78ba:	f7ff ffba 	bl	d7832 <strlen>
   d78be:	f04f 0a00 	mov.w	sl, #0
   d78c2:	4605      	mov	r5, r0
   d78c4:	f04f 0b00 	mov.w	fp, #0
   d78c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d78cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d78ce:	781a      	ldrb	r2, [r3, #0]
   d78d0:	2a2b      	cmp	r2, #43	; 0x2b
   d78d2:	d04c      	beq.n	d796e <_strtod_l+0xce>
   d78d4:	d839      	bhi.n	d794a <_strtod_l+0xaa>
   d78d6:	2a0d      	cmp	r2, #13
   d78d8:	d832      	bhi.n	d7940 <_strtod_l+0xa0>
   d78da:	2a08      	cmp	r2, #8
   d78dc:	d832      	bhi.n	d7944 <_strtod_l+0xa4>
   d78de:	2a00      	cmp	r2, #0
   d78e0:	d03c      	beq.n	d795c <_strtod_l+0xbc>
   d78e2:	2300      	movs	r3, #0
   d78e4:	930e      	str	r3, [sp, #56]	; 0x38
   d78e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d78e8:	7833      	ldrb	r3, [r6, #0]
   d78ea:	2b30      	cmp	r3, #48	; 0x30
   d78ec:	f040 80b4 	bne.w	d7a58 <_strtod_l+0x1b8>
   d78f0:	7873      	ldrb	r3, [r6, #1]
   d78f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d78f6:	2b58      	cmp	r3, #88	; 0x58
   d78f8:	d16c      	bne.n	d79d4 <_strtod_l+0x134>
   d78fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d78fc:	9301      	str	r3, [sp, #4]
   d78fe:	ab1e      	add	r3, sp, #120	; 0x78
   d7900:	9702      	str	r7, [sp, #8]
   d7902:	9300      	str	r3, [sp, #0]
   d7904:	4a8f      	ldr	r2, [pc, #572]	; (d7b44 <_strtod_l+0x2a4>)
   d7906:	ab1f      	add	r3, sp, #124	; 0x7c
   d7908:	a91d      	add	r1, sp, #116	; 0x74
   d790a:	4620      	mov	r0, r4
   d790c:	f000 fe46 	bl	d859c <__gethex>
   d7910:	f010 0707 	ands.w	r7, r0, #7
   d7914:	4605      	mov	r5, r0
   d7916:	d005      	beq.n	d7924 <_strtod_l+0x84>
   d7918:	2f06      	cmp	r7, #6
   d791a:	d12a      	bne.n	d7972 <_strtod_l+0xd2>
   d791c:	3601      	adds	r6, #1
   d791e:	2300      	movs	r3, #0
   d7920:	961d      	str	r6, [sp, #116]	; 0x74
   d7922:	930e      	str	r3, [sp, #56]	; 0x38
   d7924:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7926:	2b00      	cmp	r3, #0
   d7928:	f040 8596 	bne.w	d8458 <_strtod_l+0xbb8>
   d792c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d792e:	b1db      	cbz	r3, d7968 <_strtod_l+0xc8>
   d7930:	4652      	mov	r2, sl
   d7932:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7936:	ec43 2b10 	vmov	d0, r2, r3
   d793a:	b023      	add	sp, #140	; 0x8c
   d793c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7940:	2a20      	cmp	r2, #32
   d7942:	d1ce      	bne.n	d78e2 <_strtod_l+0x42>
   d7944:	3301      	adds	r3, #1
   d7946:	931d      	str	r3, [sp, #116]	; 0x74
   d7948:	e7c0      	b.n	d78cc <_strtod_l+0x2c>
   d794a:	2a2d      	cmp	r2, #45	; 0x2d
   d794c:	d1c9      	bne.n	d78e2 <_strtod_l+0x42>
   d794e:	2201      	movs	r2, #1
   d7950:	920e      	str	r2, [sp, #56]	; 0x38
   d7952:	1c5a      	adds	r2, r3, #1
   d7954:	921d      	str	r2, [sp, #116]	; 0x74
   d7956:	785b      	ldrb	r3, [r3, #1]
   d7958:	2b00      	cmp	r3, #0
   d795a:	d1c4      	bne.n	d78e6 <_strtod_l+0x46>
   d795c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d795e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7962:	2b00      	cmp	r3, #0
   d7964:	f040 8576 	bne.w	d8454 <_strtod_l+0xbb4>
   d7968:	4652      	mov	r2, sl
   d796a:	465b      	mov	r3, fp
   d796c:	e7e3      	b.n	d7936 <_strtod_l+0x96>
   d796e:	2200      	movs	r2, #0
   d7970:	e7ee      	b.n	d7950 <_strtod_l+0xb0>
   d7972:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d7974:	b13a      	cbz	r2, d7986 <_strtod_l+0xe6>
   d7976:	2135      	movs	r1, #53	; 0x35
   d7978:	a820      	add	r0, sp, #128	; 0x80
   d797a:	f001 fd12 	bl	d93a2 <__copybits>
   d797e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7980:	4620      	mov	r0, r4
   d7982:	f001 f947 	bl	d8c14 <_Bfree>
   d7986:	3f01      	subs	r7, #1
   d7988:	2f05      	cmp	r7, #5
   d798a:	d807      	bhi.n	d799c <_strtod_l+0xfc>
   d798c:	e8df f007 	tbb	[pc, r7]
   d7990:	1d180b0e 	.word	0x1d180b0e
   d7994:	030e      	.short	0x030e
   d7996:	f04f 0b00 	mov.w	fp, #0
   d799a:	46da      	mov	sl, fp
   d799c:	0728      	lsls	r0, r5, #28
   d799e:	d5c1      	bpl.n	d7924 <_strtod_l+0x84>
   d79a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d79a4:	e7be      	b.n	d7924 <_strtod_l+0x84>
   d79a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d79aa:	e7f7      	b.n	d799c <_strtod_l+0xfc>
   d79ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d79b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d79b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d79b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d79ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d79be:	e7ed      	b.n	d799c <_strtod_l+0xfc>
   d79c0:	f8df b184 	ldr.w	fp, [pc, #388]	; d7b48 <_strtod_l+0x2a8>
   d79c4:	f04f 0a00 	mov.w	sl, #0
   d79c8:	e7e8      	b.n	d799c <_strtod_l+0xfc>
   d79ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d79ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d79d2:	e7e3      	b.n	d799c <_strtod_l+0xfc>
   d79d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d79d6:	1c5a      	adds	r2, r3, #1
   d79d8:	921d      	str	r2, [sp, #116]	; 0x74
   d79da:	785b      	ldrb	r3, [r3, #1]
   d79dc:	2b30      	cmp	r3, #48	; 0x30
   d79de:	d0f9      	beq.n	d79d4 <_strtod_l+0x134>
   d79e0:	2b00      	cmp	r3, #0
   d79e2:	d09f      	beq.n	d7924 <_strtod_l+0x84>
   d79e4:	2301      	movs	r3, #1
   d79e6:	f04f 0900 	mov.w	r9, #0
   d79ea:	9304      	str	r3, [sp, #16]
   d79ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d79ee:	930a      	str	r3, [sp, #40]	; 0x28
   d79f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d79f4:	464f      	mov	r7, r9
   d79f6:	220a      	movs	r2, #10
   d79f8:	981d      	ldr	r0, [sp, #116]	; 0x74
   d79fa:	7806      	ldrb	r6, [r0, #0]
   d79fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7a00:	b2d9      	uxtb	r1, r3
   d7a02:	2909      	cmp	r1, #9
   d7a04:	d92a      	bls.n	d7a5c <_strtod_l+0x1bc>
   d7a06:	9907      	ldr	r1, [sp, #28]
   d7a08:	462a      	mov	r2, r5
   d7a0a:	f7ff ff1a 	bl	d7842 <strncmp>
   d7a0e:	b398      	cbz	r0, d7a78 <_strtod_l+0x1d8>
   d7a10:	2000      	movs	r0, #0
   d7a12:	4633      	mov	r3, r6
   d7a14:	463d      	mov	r5, r7
   d7a16:	9007      	str	r0, [sp, #28]
   d7a18:	4602      	mov	r2, r0
   d7a1a:	2b65      	cmp	r3, #101	; 0x65
   d7a1c:	d001      	beq.n	d7a22 <_strtod_l+0x182>
   d7a1e:	2b45      	cmp	r3, #69	; 0x45
   d7a20:	d118      	bne.n	d7a54 <_strtod_l+0x1b4>
   d7a22:	b91d      	cbnz	r5, d7a2c <_strtod_l+0x18c>
   d7a24:	9b04      	ldr	r3, [sp, #16]
   d7a26:	4303      	orrs	r3, r0
   d7a28:	d098      	beq.n	d795c <_strtod_l+0xbc>
   d7a2a:	2500      	movs	r5, #0
   d7a2c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d7a30:	f108 0301 	add.w	r3, r8, #1
   d7a34:	931d      	str	r3, [sp, #116]	; 0x74
   d7a36:	f898 3001 	ldrb.w	r3, [r8, #1]
   d7a3a:	2b2b      	cmp	r3, #43	; 0x2b
   d7a3c:	d075      	beq.n	d7b2a <_strtod_l+0x28a>
   d7a3e:	2b2d      	cmp	r3, #45	; 0x2d
   d7a40:	d07b      	beq.n	d7b3a <_strtod_l+0x29a>
   d7a42:	f04f 0c00 	mov.w	ip, #0
   d7a46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d7a4a:	2909      	cmp	r1, #9
   d7a4c:	f240 8082 	bls.w	d7b54 <_strtod_l+0x2b4>
   d7a50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d7a54:	2600      	movs	r6, #0
   d7a56:	e09d      	b.n	d7b94 <_strtod_l+0x2f4>
   d7a58:	2300      	movs	r3, #0
   d7a5a:	e7c4      	b.n	d79e6 <_strtod_l+0x146>
   d7a5c:	2f08      	cmp	r7, #8
   d7a5e:	bfd8      	it	le
   d7a60:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d7a62:	f100 0001 	add.w	r0, r0, #1
   d7a66:	bfda      	itte	le
   d7a68:	fb02 3301 	mlale	r3, r2, r1, r3
   d7a6c:	9309      	strle	r3, [sp, #36]	; 0x24
   d7a6e:	fb02 3909 	mlagt	r9, r2, r9, r3
   d7a72:	3701      	adds	r7, #1
   d7a74:	901d      	str	r0, [sp, #116]	; 0x74
   d7a76:	e7bf      	b.n	d79f8 <_strtod_l+0x158>
   d7a78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7a7a:	195a      	adds	r2, r3, r5
   d7a7c:	921d      	str	r2, [sp, #116]	; 0x74
   d7a7e:	5d5b      	ldrb	r3, [r3, r5]
   d7a80:	2f00      	cmp	r7, #0
   d7a82:	d037      	beq.n	d7af4 <_strtod_l+0x254>
   d7a84:	9007      	str	r0, [sp, #28]
   d7a86:	463d      	mov	r5, r7
   d7a88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d7a8c:	2a09      	cmp	r2, #9
   d7a8e:	d912      	bls.n	d7ab6 <_strtod_l+0x216>
   d7a90:	2201      	movs	r2, #1
   d7a92:	e7c2      	b.n	d7a1a <_strtod_l+0x17a>
   d7a94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7a96:	1c5a      	adds	r2, r3, #1
   d7a98:	921d      	str	r2, [sp, #116]	; 0x74
   d7a9a:	785b      	ldrb	r3, [r3, #1]
   d7a9c:	3001      	adds	r0, #1
   d7a9e:	2b30      	cmp	r3, #48	; 0x30
   d7aa0:	d0f8      	beq.n	d7a94 <_strtod_l+0x1f4>
   d7aa2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d7aa6:	2a08      	cmp	r2, #8
   d7aa8:	f200 84db 	bhi.w	d8462 <_strtod_l+0xbc2>
   d7aac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d7aae:	9007      	str	r0, [sp, #28]
   d7ab0:	2000      	movs	r0, #0
   d7ab2:	920a      	str	r2, [sp, #40]	; 0x28
   d7ab4:	4605      	mov	r5, r0
   d7ab6:	3b30      	subs	r3, #48	; 0x30
   d7ab8:	f100 0201 	add.w	r2, r0, #1
   d7abc:	d014      	beq.n	d7ae8 <_strtod_l+0x248>
   d7abe:	9907      	ldr	r1, [sp, #28]
   d7ac0:	4411      	add	r1, r2
   d7ac2:	9107      	str	r1, [sp, #28]
   d7ac4:	462a      	mov	r2, r5
   d7ac6:	eb00 0e05 	add.w	lr, r0, r5
   d7aca:	210a      	movs	r1, #10
   d7acc:	4572      	cmp	r2, lr
   d7ace:	d113      	bne.n	d7af8 <_strtod_l+0x258>
   d7ad0:	182a      	adds	r2, r5, r0
   d7ad2:	2a08      	cmp	r2, #8
   d7ad4:	f105 0501 	add.w	r5, r5, #1
   d7ad8:	4405      	add	r5, r0
   d7ada:	dc1c      	bgt.n	d7b16 <_strtod_l+0x276>
   d7adc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7ade:	220a      	movs	r2, #10
   d7ae0:	fb02 3301 	mla	r3, r2, r1, r3
   d7ae4:	9309      	str	r3, [sp, #36]	; 0x24
   d7ae6:	2200      	movs	r2, #0
   d7ae8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7aea:	1c59      	adds	r1, r3, #1
   d7aec:	911d      	str	r1, [sp, #116]	; 0x74
   d7aee:	785b      	ldrb	r3, [r3, #1]
   d7af0:	4610      	mov	r0, r2
   d7af2:	e7c9      	b.n	d7a88 <_strtod_l+0x1e8>
   d7af4:	4638      	mov	r0, r7
   d7af6:	e7d2      	b.n	d7a9e <_strtod_l+0x1fe>
   d7af8:	2a08      	cmp	r2, #8
   d7afa:	dc04      	bgt.n	d7b06 <_strtod_l+0x266>
   d7afc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7afe:	434e      	muls	r6, r1
   d7b00:	9609      	str	r6, [sp, #36]	; 0x24
   d7b02:	3201      	adds	r2, #1
   d7b04:	e7e2      	b.n	d7acc <_strtod_l+0x22c>
   d7b06:	f102 0c01 	add.w	ip, r2, #1
   d7b0a:	f1bc 0f10 	cmp.w	ip, #16
   d7b0e:	bfd8      	it	le
   d7b10:	fb01 f909 	mulle.w	r9, r1, r9
   d7b14:	e7f5      	b.n	d7b02 <_strtod_l+0x262>
   d7b16:	2d10      	cmp	r5, #16
   d7b18:	bfdc      	itt	le
   d7b1a:	220a      	movle	r2, #10
   d7b1c:	fb02 3909 	mlale	r9, r2, r9, r3
   d7b20:	e7e1      	b.n	d7ae6 <_strtod_l+0x246>
   d7b22:	2300      	movs	r3, #0
   d7b24:	9307      	str	r3, [sp, #28]
   d7b26:	2201      	movs	r2, #1
   d7b28:	e77c      	b.n	d7a24 <_strtod_l+0x184>
   d7b2a:	f04f 0c00 	mov.w	ip, #0
   d7b2e:	f108 0302 	add.w	r3, r8, #2
   d7b32:	931d      	str	r3, [sp, #116]	; 0x74
   d7b34:	f898 3002 	ldrb.w	r3, [r8, #2]
   d7b38:	e785      	b.n	d7a46 <_strtod_l+0x1a6>
   d7b3a:	f04f 0c01 	mov.w	ip, #1
   d7b3e:	e7f6      	b.n	d7b2e <_strtod_l+0x28e>
   d7b40:	000d9b6c 	.word	0x000d9b6c
   d7b44:	000d9a14 	.word	0x000d9a14
   d7b48:	7ff00000 	.word	0x7ff00000
   d7b4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7b4e:	1c59      	adds	r1, r3, #1
   d7b50:	911d      	str	r1, [sp, #116]	; 0x74
   d7b52:	785b      	ldrb	r3, [r3, #1]
   d7b54:	2b30      	cmp	r3, #48	; 0x30
   d7b56:	d0f9      	beq.n	d7b4c <_strtod_l+0x2ac>
   d7b58:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d7b5c:	2908      	cmp	r1, #8
   d7b5e:	f63f af79 	bhi.w	d7a54 <_strtod_l+0x1b4>
   d7b62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d7b66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7b68:	9308      	str	r3, [sp, #32]
   d7b6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7b6c:	1c59      	adds	r1, r3, #1
   d7b6e:	911d      	str	r1, [sp, #116]	; 0x74
   d7b70:	785b      	ldrb	r3, [r3, #1]
   d7b72:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d7b76:	2e09      	cmp	r6, #9
   d7b78:	d937      	bls.n	d7bea <_strtod_l+0x34a>
   d7b7a:	9e08      	ldr	r6, [sp, #32]
   d7b7c:	1b89      	subs	r1, r1, r6
   d7b7e:	2908      	cmp	r1, #8
   d7b80:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d7b84:	dc02      	bgt.n	d7b8c <_strtod_l+0x2ec>
   d7b86:	4576      	cmp	r6, lr
   d7b88:	bfa8      	it	ge
   d7b8a:	4676      	movge	r6, lr
   d7b8c:	f1bc 0f00 	cmp.w	ip, #0
   d7b90:	d000      	beq.n	d7b94 <_strtod_l+0x2f4>
   d7b92:	4276      	negs	r6, r6
   d7b94:	2d00      	cmp	r5, #0
   d7b96:	d14f      	bne.n	d7c38 <_strtod_l+0x398>
   d7b98:	9904      	ldr	r1, [sp, #16]
   d7b9a:	4301      	orrs	r1, r0
   d7b9c:	f47f aec2 	bne.w	d7924 <_strtod_l+0x84>
   d7ba0:	2a00      	cmp	r2, #0
   d7ba2:	f47f aedb 	bne.w	d795c <_strtod_l+0xbc>
   d7ba6:	2b69      	cmp	r3, #105	; 0x69
   d7ba8:	d027      	beq.n	d7bfa <_strtod_l+0x35a>
   d7baa:	dc24      	bgt.n	d7bf6 <_strtod_l+0x356>
   d7bac:	2b49      	cmp	r3, #73	; 0x49
   d7bae:	d024      	beq.n	d7bfa <_strtod_l+0x35a>
   d7bb0:	2b4e      	cmp	r3, #78	; 0x4e
   d7bb2:	f47f aed3 	bne.w	d795c <_strtod_l+0xbc>
   d7bb6:	499e      	ldr	r1, [pc, #632]	; (d7e30 <_strtod_l+0x590>)
   d7bb8:	a81d      	add	r0, sp, #116	; 0x74
   d7bba:	f000 ff35 	bl	d8a28 <__match>
   d7bbe:	2800      	cmp	r0, #0
   d7bc0:	f43f aecc 	beq.w	d795c <_strtod_l+0xbc>
   d7bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7bc6:	781b      	ldrb	r3, [r3, #0]
   d7bc8:	2b28      	cmp	r3, #40	; 0x28
   d7bca:	d12d      	bne.n	d7c28 <_strtod_l+0x388>
   d7bcc:	4999      	ldr	r1, [pc, #612]	; (d7e34 <_strtod_l+0x594>)
   d7bce:	aa20      	add	r2, sp, #128	; 0x80
   d7bd0:	a81d      	add	r0, sp, #116	; 0x74
   d7bd2:	f000 ff3d 	bl	d8a50 <__hexnan>
   d7bd6:	2805      	cmp	r0, #5
   d7bd8:	d126      	bne.n	d7c28 <_strtod_l+0x388>
   d7bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d7bdc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d7be0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7be4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7be8:	e69c      	b.n	d7924 <_strtod_l+0x84>
   d7bea:	210a      	movs	r1, #10
   d7bec:	fb01 3e0e 	mla	lr, r1, lr, r3
   d7bf0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d7bf4:	e7b9      	b.n	d7b6a <_strtod_l+0x2ca>
   d7bf6:	2b6e      	cmp	r3, #110	; 0x6e
   d7bf8:	e7db      	b.n	d7bb2 <_strtod_l+0x312>
   d7bfa:	498f      	ldr	r1, [pc, #572]	; (d7e38 <_strtod_l+0x598>)
   d7bfc:	a81d      	add	r0, sp, #116	; 0x74
   d7bfe:	f000 ff13 	bl	d8a28 <__match>
   d7c02:	2800      	cmp	r0, #0
   d7c04:	f43f aeaa 	beq.w	d795c <_strtod_l+0xbc>
   d7c08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7c0a:	498c      	ldr	r1, [pc, #560]	; (d7e3c <_strtod_l+0x59c>)
   d7c0c:	3b01      	subs	r3, #1
   d7c0e:	a81d      	add	r0, sp, #116	; 0x74
   d7c10:	931d      	str	r3, [sp, #116]	; 0x74
   d7c12:	f000 ff09 	bl	d8a28 <__match>
   d7c16:	b910      	cbnz	r0, d7c1e <_strtod_l+0x37e>
   d7c18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7c1a:	3301      	adds	r3, #1
   d7c1c:	931d      	str	r3, [sp, #116]	; 0x74
   d7c1e:	f8df b22c 	ldr.w	fp, [pc, #556]	; d7e4c <_strtod_l+0x5ac>
   d7c22:	f04f 0a00 	mov.w	sl, #0
   d7c26:	e67d      	b.n	d7924 <_strtod_l+0x84>
   d7c28:	4885      	ldr	r0, [pc, #532]	; (d7e40 <_strtod_l+0x5a0>)
   d7c2a:	f7fe fef1 	bl	d6a10 <nan>
   d7c2e:	ed8d 0b04 	vstr	d0, [sp, #16]
   d7c32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d7c36:	e675      	b.n	d7924 <_strtod_l+0x84>
   d7c38:	9b07      	ldr	r3, [sp, #28]
   d7c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
   d7c3c:	1af3      	subs	r3, r6, r3
   d7c3e:	2f00      	cmp	r7, #0
   d7c40:	bf08      	it	eq
   d7c42:	462f      	moveq	r7, r5
   d7c44:	2d10      	cmp	r5, #16
   d7c46:	9308      	str	r3, [sp, #32]
   d7c48:	46a8      	mov	r8, r5
   d7c4a:	bfa8      	it	ge
   d7c4c:	f04f 0810 	movge.w	r8, #16
   d7c50:	f7ff f828 	bl	d6ca4 <__aeabi_ui2d>
   d7c54:	2d09      	cmp	r5, #9
   d7c56:	4682      	mov	sl, r0
   d7c58:	468b      	mov	fp, r1
   d7c5a:	dd13      	ble.n	d7c84 <_strtod_l+0x3e4>
   d7c5c:	4b79      	ldr	r3, [pc, #484]	; (d7e44 <_strtod_l+0x5a4>)
   d7c5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d7c62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d7c66:	f7ff f897 	bl	d6d98 <__aeabi_dmul>
   d7c6a:	4682      	mov	sl, r0
   d7c6c:	4648      	mov	r0, r9
   d7c6e:	468b      	mov	fp, r1
   d7c70:	f7ff f818 	bl	d6ca4 <__aeabi_ui2d>
   d7c74:	4602      	mov	r2, r0
   d7c76:	460b      	mov	r3, r1
   d7c78:	4650      	mov	r0, sl
   d7c7a:	4659      	mov	r1, fp
   d7c7c:	f7fe fed6 	bl	d6a2c <__adddf3>
   d7c80:	4682      	mov	sl, r0
   d7c82:	468b      	mov	fp, r1
   d7c84:	2d0f      	cmp	r5, #15
   d7c86:	dc38      	bgt.n	d7cfa <_strtod_l+0x45a>
   d7c88:	9b08      	ldr	r3, [sp, #32]
   d7c8a:	2b00      	cmp	r3, #0
   d7c8c:	f43f ae4a 	beq.w	d7924 <_strtod_l+0x84>
   d7c90:	dd24      	ble.n	d7cdc <_strtod_l+0x43c>
   d7c92:	2b16      	cmp	r3, #22
   d7c94:	dc0b      	bgt.n	d7cae <_strtod_l+0x40e>
   d7c96:	4d6b      	ldr	r5, [pc, #428]	; (d7e44 <_strtod_l+0x5a4>)
   d7c98:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d7c9c:	e9d5 0100 	ldrd	r0, r1, [r5]
   d7ca0:	4652      	mov	r2, sl
   d7ca2:	465b      	mov	r3, fp
   d7ca4:	f7ff f878 	bl	d6d98 <__aeabi_dmul>
   d7ca8:	4682      	mov	sl, r0
   d7caa:	468b      	mov	fp, r1
   d7cac:	e63a      	b.n	d7924 <_strtod_l+0x84>
   d7cae:	9a08      	ldr	r2, [sp, #32]
   d7cb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d7cb4:	4293      	cmp	r3, r2
   d7cb6:	db20      	blt.n	d7cfa <_strtod_l+0x45a>
   d7cb8:	4c62      	ldr	r4, [pc, #392]	; (d7e44 <_strtod_l+0x5a4>)
   d7cba:	f1c5 050f 	rsb	r5, r5, #15
   d7cbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7cc2:	4652      	mov	r2, sl
   d7cc4:	465b      	mov	r3, fp
   d7cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7cca:	f7ff f865 	bl	d6d98 <__aeabi_dmul>
   d7cce:	9b08      	ldr	r3, [sp, #32]
   d7cd0:	1b5d      	subs	r5, r3, r5
   d7cd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7cd6:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7cda:	e7e3      	b.n	d7ca4 <_strtod_l+0x404>
   d7cdc:	9b08      	ldr	r3, [sp, #32]
   d7cde:	3316      	adds	r3, #22
   d7ce0:	db0b      	blt.n	d7cfa <_strtod_l+0x45a>
   d7ce2:	9b07      	ldr	r3, [sp, #28]
   d7ce4:	4a57      	ldr	r2, [pc, #348]	; (d7e44 <_strtod_l+0x5a4>)
   d7ce6:	1b9e      	subs	r6, r3, r6
   d7ce8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d7cec:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7cf0:	4650      	mov	r0, sl
   d7cf2:	4659      	mov	r1, fp
   d7cf4:	f7ff f97a 	bl	d6fec <__aeabi_ddiv>
   d7cf8:	e7d6      	b.n	d7ca8 <_strtod_l+0x408>
   d7cfa:	9b08      	ldr	r3, [sp, #32]
   d7cfc:	eba5 0808 	sub.w	r8, r5, r8
   d7d00:	4498      	add	r8, r3
   d7d02:	f1b8 0f00 	cmp.w	r8, #0
   d7d06:	dd71      	ble.n	d7dec <_strtod_l+0x54c>
   d7d08:	f018 030f 	ands.w	r3, r8, #15
   d7d0c:	d00a      	beq.n	d7d24 <_strtod_l+0x484>
   d7d0e:	494d      	ldr	r1, [pc, #308]	; (d7e44 <_strtod_l+0x5a4>)
   d7d10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d7d14:	4652      	mov	r2, sl
   d7d16:	465b      	mov	r3, fp
   d7d18:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7d1c:	f7ff f83c 	bl	d6d98 <__aeabi_dmul>
   d7d20:	4682      	mov	sl, r0
   d7d22:	468b      	mov	fp, r1
   d7d24:	f038 080f 	bics.w	r8, r8, #15
   d7d28:	d04d      	beq.n	d7dc6 <_strtod_l+0x526>
   d7d2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d7d2e:	dd22      	ble.n	d7d76 <_strtod_l+0x4d6>
   d7d30:	2500      	movs	r5, #0
   d7d32:	462e      	mov	r6, r5
   d7d34:	9509      	str	r5, [sp, #36]	; 0x24
   d7d36:	9507      	str	r5, [sp, #28]
   d7d38:	2322      	movs	r3, #34	; 0x22
   d7d3a:	f8df b110 	ldr.w	fp, [pc, #272]	; d7e4c <_strtod_l+0x5ac>
   d7d3e:	6023      	str	r3, [r4, #0]
   d7d40:	f04f 0a00 	mov.w	sl, #0
   d7d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7d46:	2b00      	cmp	r3, #0
   d7d48:	f43f adec 	beq.w	d7924 <_strtod_l+0x84>
   d7d4c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7d4e:	4620      	mov	r0, r4
   d7d50:	f000 ff60 	bl	d8c14 <_Bfree>
   d7d54:	9907      	ldr	r1, [sp, #28]
   d7d56:	4620      	mov	r0, r4
   d7d58:	f000 ff5c 	bl	d8c14 <_Bfree>
   d7d5c:	4631      	mov	r1, r6
   d7d5e:	4620      	mov	r0, r4
   d7d60:	f000 ff58 	bl	d8c14 <_Bfree>
   d7d64:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7d66:	4620      	mov	r0, r4
   d7d68:	f000 ff54 	bl	d8c14 <_Bfree>
   d7d6c:	4629      	mov	r1, r5
   d7d6e:	4620      	mov	r0, r4
   d7d70:	f000 ff50 	bl	d8c14 <_Bfree>
   d7d74:	e5d6      	b.n	d7924 <_strtod_l+0x84>
   d7d76:	2300      	movs	r3, #0
   d7d78:	ea4f 1828 	mov.w	r8, r8, asr #4
   d7d7c:	4650      	mov	r0, sl
   d7d7e:	4659      	mov	r1, fp
   d7d80:	4699      	mov	r9, r3
   d7d82:	f1b8 0f01 	cmp.w	r8, #1
   d7d86:	dc21      	bgt.n	d7dcc <_strtod_l+0x52c>
   d7d88:	b10b      	cbz	r3, d7d8e <_strtod_l+0x4ee>
   d7d8a:	4682      	mov	sl, r0
   d7d8c:	468b      	mov	fp, r1
   d7d8e:	4b2e      	ldr	r3, [pc, #184]	; (d7e48 <_strtod_l+0x5a8>)
   d7d90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7d94:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d7d98:	4652      	mov	r2, sl
   d7d9a:	465b      	mov	r3, fp
   d7d9c:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7da0:	f7fe fffa 	bl	d6d98 <__aeabi_dmul>
   d7da4:	4b29      	ldr	r3, [pc, #164]	; (d7e4c <_strtod_l+0x5ac>)
   d7da6:	460a      	mov	r2, r1
   d7da8:	400b      	ands	r3, r1
   d7daa:	4929      	ldr	r1, [pc, #164]	; (d7e50 <_strtod_l+0x5b0>)
   d7dac:	428b      	cmp	r3, r1
   d7dae:	4682      	mov	sl, r0
   d7db0:	d8be      	bhi.n	d7d30 <_strtod_l+0x490>
   d7db2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d7db6:	428b      	cmp	r3, r1
   d7db8:	bf86      	itte	hi
   d7dba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d7e54 <_strtod_l+0x5b4>
   d7dbe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d7dc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d7dc6:	2300      	movs	r3, #0
   d7dc8:	9304      	str	r3, [sp, #16]
   d7dca:	e081      	b.n	d7ed0 <_strtod_l+0x630>
   d7dcc:	f018 0f01 	tst.w	r8, #1
   d7dd0:	d007      	beq.n	d7de2 <_strtod_l+0x542>
   d7dd2:	4b1d      	ldr	r3, [pc, #116]	; (d7e48 <_strtod_l+0x5a8>)
   d7dd4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d7dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ddc:	f7fe ffdc 	bl	d6d98 <__aeabi_dmul>
   d7de0:	2301      	movs	r3, #1
   d7de2:	f109 0901 	add.w	r9, r9, #1
   d7de6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d7dea:	e7ca      	b.n	d7d82 <_strtod_l+0x4e2>
   d7dec:	d0eb      	beq.n	d7dc6 <_strtod_l+0x526>
   d7dee:	f1c8 0800 	rsb	r8, r8, #0
   d7df2:	f018 020f 	ands.w	r2, r8, #15
   d7df6:	d00a      	beq.n	d7e0e <_strtod_l+0x56e>
   d7df8:	4b12      	ldr	r3, [pc, #72]	; (d7e44 <_strtod_l+0x5a4>)
   d7dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7dfe:	4650      	mov	r0, sl
   d7e00:	4659      	mov	r1, fp
   d7e02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e06:	f7ff f8f1 	bl	d6fec <__aeabi_ddiv>
   d7e0a:	4682      	mov	sl, r0
   d7e0c:	468b      	mov	fp, r1
   d7e0e:	ea5f 1828 	movs.w	r8, r8, asr #4
   d7e12:	d0d8      	beq.n	d7dc6 <_strtod_l+0x526>
   d7e14:	f1b8 0f1f 	cmp.w	r8, #31
   d7e18:	dd1e      	ble.n	d7e58 <_strtod_l+0x5b8>
   d7e1a:	2500      	movs	r5, #0
   d7e1c:	462e      	mov	r6, r5
   d7e1e:	9509      	str	r5, [sp, #36]	; 0x24
   d7e20:	9507      	str	r5, [sp, #28]
   d7e22:	2322      	movs	r3, #34	; 0x22
   d7e24:	f04f 0a00 	mov.w	sl, #0
   d7e28:	f04f 0b00 	mov.w	fp, #0
   d7e2c:	6023      	str	r3, [r4, #0]
   d7e2e:	e789      	b.n	d7d44 <_strtod_l+0x4a4>
   d7e30:	000d9a0e 	.word	0x000d9a0e
   d7e34:	000d9a28 	.word	0x000d9a28
   d7e38:	000d9a05 	.word	0x000d9a05
   d7e3c:	000d9a08 	.word	0x000d9a08
   d7e40:	000d94dc 	.word	0x000d94dc
   d7e44:	000d9ba8 	.word	0x000d9ba8
   d7e48:	000d9b80 	.word	0x000d9b80
   d7e4c:	7ff00000 	.word	0x7ff00000
   d7e50:	7ca00000 	.word	0x7ca00000
   d7e54:	7fefffff 	.word	0x7fefffff
   d7e58:	f018 0310 	ands.w	r3, r8, #16
   d7e5c:	bf18      	it	ne
   d7e5e:	236a      	movne	r3, #106	; 0x6a
   d7e60:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d8218 <_strtod_l+0x978>
   d7e64:	9304      	str	r3, [sp, #16]
   d7e66:	4650      	mov	r0, sl
   d7e68:	4659      	mov	r1, fp
   d7e6a:	2300      	movs	r3, #0
   d7e6c:	f018 0f01 	tst.w	r8, #1
   d7e70:	d004      	beq.n	d7e7c <_strtod_l+0x5dc>
   d7e72:	e9d9 2300 	ldrd	r2, r3, [r9]
   d7e76:	f7fe ff8f 	bl	d6d98 <__aeabi_dmul>
   d7e7a:	2301      	movs	r3, #1
   d7e7c:	ea5f 0868 	movs.w	r8, r8, asr #1
   d7e80:	f109 0908 	add.w	r9, r9, #8
   d7e84:	d1f2      	bne.n	d7e6c <_strtod_l+0x5cc>
   d7e86:	b10b      	cbz	r3, d7e8c <_strtod_l+0x5ec>
   d7e88:	4682      	mov	sl, r0
   d7e8a:	468b      	mov	fp, r1
   d7e8c:	9b04      	ldr	r3, [sp, #16]
   d7e8e:	b1bb      	cbz	r3, d7ec0 <_strtod_l+0x620>
   d7e90:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7e94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7e98:	2b00      	cmp	r3, #0
   d7e9a:	4659      	mov	r1, fp
   d7e9c:	dd10      	ble.n	d7ec0 <_strtod_l+0x620>
   d7e9e:	2b1f      	cmp	r3, #31
   d7ea0:	f340 8128 	ble.w	d80f4 <_strtod_l+0x854>
   d7ea4:	2b34      	cmp	r3, #52	; 0x34
   d7ea6:	bfde      	ittt	le
   d7ea8:	3b20      	suble	r3, #32
   d7eaa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d7eae:	fa02 f303 	lslle.w	r3, r2, r3
   d7eb2:	f04f 0a00 	mov.w	sl, #0
   d7eb6:	bfcc      	ite	gt
   d7eb8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d7ebc:	ea03 0b01 	andle.w	fp, r3, r1
   d7ec0:	2200      	movs	r2, #0
   d7ec2:	2300      	movs	r3, #0
   d7ec4:	4650      	mov	r0, sl
   d7ec6:	4659      	mov	r1, fp
   d7ec8:	f7ff f9ce 	bl	d7268 <__aeabi_dcmpeq>
   d7ecc:	2800      	cmp	r0, #0
   d7ece:	d1a4      	bne.n	d7e1a <_strtod_l+0x57a>
   d7ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7ed2:	9300      	str	r3, [sp, #0]
   d7ed4:	990a      	ldr	r1, [sp, #40]	; 0x28
   d7ed6:	462b      	mov	r3, r5
   d7ed8:	463a      	mov	r2, r7
   d7eda:	4620      	mov	r0, r4
   d7edc:	f000 feef 	bl	d8cbe <__s2b>
   d7ee0:	9009      	str	r0, [sp, #36]	; 0x24
   d7ee2:	2800      	cmp	r0, #0
   d7ee4:	f43f af24 	beq.w	d7d30 <_strtod_l+0x490>
   d7ee8:	9b07      	ldr	r3, [sp, #28]
   d7eea:	1b9e      	subs	r6, r3, r6
   d7eec:	9b08      	ldr	r3, [sp, #32]
   d7eee:	2b00      	cmp	r3, #0
   d7ef0:	bfb4      	ite	lt
   d7ef2:	4633      	movlt	r3, r6
   d7ef4:	2300      	movge	r3, #0
   d7ef6:	9310      	str	r3, [sp, #64]	; 0x40
   d7ef8:	9b08      	ldr	r3, [sp, #32]
   d7efa:	2500      	movs	r5, #0
   d7efc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d7f00:	9318      	str	r3, [sp, #96]	; 0x60
   d7f02:	462e      	mov	r6, r5
   d7f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7f06:	4620      	mov	r0, r4
   d7f08:	6859      	ldr	r1, [r3, #4]
   d7f0a:	f000 fe4f 	bl	d8bac <_Balloc>
   d7f0e:	9007      	str	r0, [sp, #28]
   d7f10:	2800      	cmp	r0, #0
   d7f12:	f43f af11 	beq.w	d7d38 <_strtod_l+0x498>
   d7f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7f18:	691a      	ldr	r2, [r3, #16]
   d7f1a:	3202      	adds	r2, #2
   d7f1c:	f103 010c 	add.w	r1, r3, #12
   d7f20:	0092      	lsls	r2, r2, #2
   d7f22:	300c      	adds	r0, #12
   d7f24:	f7ff fbf2 	bl	d770c <memcpy>
   d7f28:	ec4b ab10 	vmov	d0, sl, fp
   d7f2c:	aa20      	add	r2, sp, #128	; 0x80
   d7f2e:	a91f      	add	r1, sp, #124	; 0x7c
   d7f30:	4620      	mov	r0, r4
   d7f32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d7f36:	f001 f9b1 	bl	d929c <__d2b>
   d7f3a:	901e      	str	r0, [sp, #120]	; 0x78
   d7f3c:	2800      	cmp	r0, #0
   d7f3e:	f43f aefb 	beq.w	d7d38 <_strtod_l+0x498>
   d7f42:	2101      	movs	r1, #1
   d7f44:	4620      	mov	r0, r4
   d7f46:	f000 ff48 	bl	d8dda <__i2b>
   d7f4a:	4606      	mov	r6, r0
   d7f4c:	2800      	cmp	r0, #0
   d7f4e:	f43f aef3 	beq.w	d7d38 <_strtod_l+0x498>
   d7f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d7f54:	9904      	ldr	r1, [sp, #16]
   d7f56:	2b00      	cmp	r3, #0
   d7f58:	bfab      	itete	ge
   d7f5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d7f5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d7f5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d7f60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d7f64:	bfac      	ite	ge
   d7f66:	eb03 0902 	addge.w	r9, r3, r2
   d7f6a:	1ad7      	sublt	r7, r2, r3
   d7f6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d7f6e:	eba3 0801 	sub.w	r8, r3, r1
   d7f72:	4490      	add	r8, r2
   d7f74:	4ba3      	ldr	r3, [pc, #652]	; (d8204 <_strtod_l+0x964>)
   d7f76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d7f7a:	4598      	cmp	r8, r3
   d7f7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d7f80:	f280 80cc 	bge.w	d811c <_strtod_l+0x87c>
   d7f84:	eba3 0308 	sub.w	r3, r3, r8
   d7f88:	2b1f      	cmp	r3, #31
   d7f8a:	eba2 0203 	sub.w	r2, r2, r3
   d7f8e:	f04f 0101 	mov.w	r1, #1
   d7f92:	f300 80b6 	bgt.w	d8102 <_strtod_l+0x862>
   d7f96:	fa01 f303 	lsl.w	r3, r1, r3
   d7f9a:	9311      	str	r3, [sp, #68]	; 0x44
   d7f9c:	2300      	movs	r3, #0
   d7f9e:	930c      	str	r3, [sp, #48]	; 0x30
   d7fa0:	eb09 0802 	add.w	r8, r9, r2
   d7fa4:	9b04      	ldr	r3, [sp, #16]
   d7fa6:	45c1      	cmp	r9, r8
   d7fa8:	4417      	add	r7, r2
   d7faa:	441f      	add	r7, r3
   d7fac:	464b      	mov	r3, r9
   d7fae:	bfa8      	it	ge
   d7fb0:	4643      	movge	r3, r8
   d7fb2:	42bb      	cmp	r3, r7
   d7fb4:	bfa8      	it	ge
   d7fb6:	463b      	movge	r3, r7
   d7fb8:	2b00      	cmp	r3, #0
   d7fba:	bfc2      	ittt	gt
   d7fbc:	eba8 0803 	subgt.w	r8, r8, r3
   d7fc0:	1aff      	subgt	r7, r7, r3
   d7fc2:	eba9 0903 	subgt.w	r9, r9, r3
   d7fc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7fc8:	2b00      	cmp	r3, #0
   d7fca:	dd17      	ble.n	d7ffc <_strtod_l+0x75c>
   d7fcc:	4631      	mov	r1, r6
   d7fce:	461a      	mov	r2, r3
   d7fd0:	4620      	mov	r0, r4
   d7fd2:	f000 ffa7 	bl	d8f24 <__pow5mult>
   d7fd6:	4606      	mov	r6, r0
   d7fd8:	2800      	cmp	r0, #0
   d7fda:	f43f aead 	beq.w	d7d38 <_strtod_l+0x498>
   d7fde:	4601      	mov	r1, r0
   d7fe0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d7fe2:	4620      	mov	r0, r4
   d7fe4:	f000 ff02 	bl	d8dec <__multiply>
   d7fe8:	900f      	str	r0, [sp, #60]	; 0x3c
   d7fea:	2800      	cmp	r0, #0
   d7fec:	f43f aea4 	beq.w	d7d38 <_strtod_l+0x498>
   d7ff0:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7ff2:	4620      	mov	r0, r4
   d7ff4:	f000 fe0e 	bl	d8c14 <_Bfree>
   d7ff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7ffa:	931e      	str	r3, [sp, #120]	; 0x78
   d7ffc:	f1b8 0f00 	cmp.w	r8, #0
   d8000:	f300 8091 	bgt.w	d8126 <_strtod_l+0x886>
   d8004:	9b08      	ldr	r3, [sp, #32]
   d8006:	2b00      	cmp	r3, #0
   d8008:	dd08      	ble.n	d801c <_strtod_l+0x77c>
   d800a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d800c:	9907      	ldr	r1, [sp, #28]
   d800e:	4620      	mov	r0, r4
   d8010:	f000 ff88 	bl	d8f24 <__pow5mult>
   d8014:	9007      	str	r0, [sp, #28]
   d8016:	2800      	cmp	r0, #0
   d8018:	f43f ae8e 	beq.w	d7d38 <_strtod_l+0x498>
   d801c:	2f00      	cmp	r7, #0
   d801e:	dd08      	ble.n	d8032 <_strtod_l+0x792>
   d8020:	9907      	ldr	r1, [sp, #28]
   d8022:	463a      	mov	r2, r7
   d8024:	4620      	mov	r0, r4
   d8026:	f000 ffcb 	bl	d8fc0 <__lshift>
   d802a:	9007      	str	r0, [sp, #28]
   d802c:	2800      	cmp	r0, #0
   d802e:	f43f ae83 	beq.w	d7d38 <_strtod_l+0x498>
   d8032:	f1b9 0f00 	cmp.w	r9, #0
   d8036:	dd08      	ble.n	d804a <_strtod_l+0x7aa>
   d8038:	4631      	mov	r1, r6
   d803a:	464a      	mov	r2, r9
   d803c:	4620      	mov	r0, r4
   d803e:	f000 ffbf 	bl	d8fc0 <__lshift>
   d8042:	4606      	mov	r6, r0
   d8044:	2800      	cmp	r0, #0
   d8046:	f43f ae77 	beq.w	d7d38 <_strtod_l+0x498>
   d804a:	9a07      	ldr	r2, [sp, #28]
   d804c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d804e:	4620      	mov	r0, r4
   d8050:	f001 f831 	bl	d90b6 <__mdiff>
   d8054:	4605      	mov	r5, r0
   d8056:	2800      	cmp	r0, #0
   d8058:	f43f ae6e 	beq.w	d7d38 <_strtod_l+0x498>
   d805c:	68c3      	ldr	r3, [r0, #12]
   d805e:	930f      	str	r3, [sp, #60]	; 0x3c
   d8060:	2300      	movs	r3, #0
   d8062:	60c3      	str	r3, [r0, #12]
   d8064:	4631      	mov	r1, r6
   d8066:	f001 f80a 	bl	d907e <__mcmp>
   d806a:	2800      	cmp	r0, #0
   d806c:	da65      	bge.n	d813a <_strtod_l+0x89a>
   d806e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8070:	ea53 030a 	orrs.w	r3, r3, sl
   d8074:	f040 8087 	bne.w	d8186 <_strtod_l+0x8e6>
   d8078:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d807c:	2b00      	cmp	r3, #0
   d807e:	f040 8082 	bne.w	d8186 <_strtod_l+0x8e6>
   d8082:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8086:	0d1b      	lsrs	r3, r3, #20
   d8088:	051b      	lsls	r3, r3, #20
   d808a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d808e:	d97a      	bls.n	d8186 <_strtod_l+0x8e6>
   d8090:	696b      	ldr	r3, [r5, #20]
   d8092:	b913      	cbnz	r3, d809a <_strtod_l+0x7fa>
   d8094:	692b      	ldr	r3, [r5, #16]
   d8096:	2b01      	cmp	r3, #1
   d8098:	dd75      	ble.n	d8186 <_strtod_l+0x8e6>
   d809a:	4629      	mov	r1, r5
   d809c:	2201      	movs	r2, #1
   d809e:	4620      	mov	r0, r4
   d80a0:	f000 ff8e 	bl	d8fc0 <__lshift>
   d80a4:	4631      	mov	r1, r6
   d80a6:	4605      	mov	r5, r0
   d80a8:	f000 ffe9 	bl	d907e <__mcmp>
   d80ac:	2800      	cmp	r0, #0
   d80ae:	dd6a      	ble.n	d8186 <_strtod_l+0x8e6>
   d80b0:	9904      	ldr	r1, [sp, #16]
   d80b2:	4a55      	ldr	r2, [pc, #340]	; (d8208 <_strtod_l+0x968>)
   d80b4:	465b      	mov	r3, fp
   d80b6:	2900      	cmp	r1, #0
   d80b8:	f000 8085 	beq.w	d81c6 <_strtod_l+0x926>
   d80bc:	ea02 010b 	and.w	r1, r2, fp
   d80c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d80c4:	dc7f      	bgt.n	d81c6 <_strtod_l+0x926>
   d80c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d80ca:	f77f aeaa 	ble.w	d7e22 <_strtod_l+0x582>
   d80ce:	4a4f      	ldr	r2, [pc, #316]	; (d820c <_strtod_l+0x96c>)
   d80d0:	2300      	movs	r3, #0
   d80d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d80d6:	4650      	mov	r0, sl
   d80d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d80dc:	4659      	mov	r1, fp
   d80de:	f7fe fe5b 	bl	d6d98 <__aeabi_dmul>
   d80e2:	460b      	mov	r3, r1
   d80e4:	4303      	orrs	r3, r0
   d80e6:	bf08      	it	eq
   d80e8:	2322      	moveq	r3, #34	; 0x22
   d80ea:	4682      	mov	sl, r0
   d80ec:	468b      	mov	fp, r1
   d80ee:	bf08      	it	eq
   d80f0:	6023      	streq	r3, [r4, #0]
   d80f2:	e62b      	b.n	d7d4c <_strtod_l+0x4ac>
   d80f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d80f8:	fa02 f303 	lsl.w	r3, r2, r3
   d80fc:	ea03 0a0a 	and.w	sl, r3, sl
   d8100:	e6de      	b.n	d7ec0 <_strtod_l+0x620>
   d8102:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d8106:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d810a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d810e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d8112:	fa01 f308 	lsl.w	r3, r1, r8
   d8116:	930c      	str	r3, [sp, #48]	; 0x30
   d8118:	9111      	str	r1, [sp, #68]	; 0x44
   d811a:	e741      	b.n	d7fa0 <_strtod_l+0x700>
   d811c:	2300      	movs	r3, #0
   d811e:	930c      	str	r3, [sp, #48]	; 0x30
   d8120:	2301      	movs	r3, #1
   d8122:	9311      	str	r3, [sp, #68]	; 0x44
   d8124:	e73c      	b.n	d7fa0 <_strtod_l+0x700>
   d8126:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8128:	4642      	mov	r2, r8
   d812a:	4620      	mov	r0, r4
   d812c:	f000 ff48 	bl	d8fc0 <__lshift>
   d8130:	901e      	str	r0, [sp, #120]	; 0x78
   d8132:	2800      	cmp	r0, #0
   d8134:	f47f af66 	bne.w	d8004 <_strtod_l+0x764>
   d8138:	e5fe      	b.n	d7d38 <_strtod_l+0x498>
   d813a:	465f      	mov	r7, fp
   d813c:	d16e      	bne.n	d821c <_strtod_l+0x97c>
   d813e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8140:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8144:	b342      	cbz	r2, d8198 <_strtod_l+0x8f8>
   d8146:	4a32      	ldr	r2, [pc, #200]	; (d8210 <_strtod_l+0x970>)
   d8148:	4293      	cmp	r3, r2
   d814a:	d128      	bne.n	d819e <_strtod_l+0x8fe>
   d814c:	9b04      	ldr	r3, [sp, #16]
   d814e:	4650      	mov	r0, sl
   d8150:	b1eb      	cbz	r3, d818e <_strtod_l+0x8ee>
   d8152:	4a2d      	ldr	r2, [pc, #180]	; (d8208 <_strtod_l+0x968>)
   d8154:	403a      	ands	r2, r7
   d8156:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d815a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d815e:	d819      	bhi.n	d8194 <_strtod_l+0x8f4>
   d8160:	0d12      	lsrs	r2, r2, #20
   d8162:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d8166:	fa01 f303 	lsl.w	r3, r1, r3
   d816a:	4298      	cmp	r0, r3
   d816c:	d117      	bne.n	d819e <_strtod_l+0x8fe>
   d816e:	4b29      	ldr	r3, [pc, #164]	; (d8214 <_strtod_l+0x974>)
   d8170:	429f      	cmp	r7, r3
   d8172:	d102      	bne.n	d817a <_strtod_l+0x8da>
   d8174:	3001      	adds	r0, #1
   d8176:	f43f addf 	beq.w	d7d38 <_strtod_l+0x498>
   d817a:	4b23      	ldr	r3, [pc, #140]	; (d8208 <_strtod_l+0x968>)
   d817c:	403b      	ands	r3, r7
   d817e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d8182:	f04f 0a00 	mov.w	sl, #0
   d8186:	9b04      	ldr	r3, [sp, #16]
   d8188:	2b00      	cmp	r3, #0
   d818a:	d1a0      	bne.n	d80ce <_strtod_l+0x82e>
   d818c:	e5de      	b.n	d7d4c <_strtod_l+0x4ac>
   d818e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8192:	e7ea      	b.n	d816a <_strtod_l+0x8ca>
   d8194:	460b      	mov	r3, r1
   d8196:	e7e8      	b.n	d816a <_strtod_l+0x8ca>
   d8198:	ea53 030a 	orrs.w	r3, r3, sl
   d819c:	d088      	beq.n	d80b0 <_strtod_l+0x810>
   d819e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d81a0:	b1db      	cbz	r3, d81da <_strtod_l+0x93a>
   d81a2:	423b      	tst	r3, r7
   d81a4:	d0ef      	beq.n	d8186 <_strtod_l+0x8e6>
   d81a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d81a8:	9a04      	ldr	r2, [sp, #16]
   d81aa:	4650      	mov	r0, sl
   d81ac:	4659      	mov	r1, fp
   d81ae:	b1c3      	cbz	r3, d81e2 <_strtod_l+0x942>
   d81b0:	f7ff fb59 	bl	d7866 <sulp>
   d81b4:	4602      	mov	r2, r0
   d81b6:	460b      	mov	r3, r1
   d81b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d81bc:	f7fe fc36 	bl	d6a2c <__adddf3>
   d81c0:	4682      	mov	sl, r0
   d81c2:	468b      	mov	fp, r1
   d81c4:	e7df      	b.n	d8186 <_strtod_l+0x8e6>
   d81c6:	4013      	ands	r3, r2
   d81c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d81cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d81d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d81d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d81d8:	e7d5      	b.n	d8186 <_strtod_l+0x8e6>
   d81da:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d81dc:	ea13 0f0a 	tst.w	r3, sl
   d81e0:	e7e0      	b.n	d81a4 <_strtod_l+0x904>
   d81e2:	f7ff fb40 	bl	d7866 <sulp>
   d81e6:	4602      	mov	r2, r0
   d81e8:	460b      	mov	r3, r1
   d81ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d81ee:	f7fe fc1b 	bl	d6a28 <__aeabi_dsub>
   d81f2:	2200      	movs	r2, #0
   d81f4:	2300      	movs	r3, #0
   d81f6:	4682      	mov	sl, r0
   d81f8:	468b      	mov	fp, r1
   d81fa:	f7ff f835 	bl	d7268 <__aeabi_dcmpeq>
   d81fe:	2800      	cmp	r0, #0
   d8200:	d0c1      	beq.n	d8186 <_strtod_l+0x8e6>
   d8202:	e60e      	b.n	d7e22 <_strtod_l+0x582>
   d8204:	fffffc02 	.word	0xfffffc02
   d8208:	7ff00000 	.word	0x7ff00000
   d820c:	39500000 	.word	0x39500000
   d8210:	000fffff 	.word	0x000fffff
   d8214:	7fefffff 	.word	0x7fefffff
   d8218:	000d9a40 	.word	0x000d9a40
   d821c:	4631      	mov	r1, r6
   d821e:	4628      	mov	r0, r5
   d8220:	f001 f88c 	bl	d933c <__ratio>
   d8224:	ec59 8b10 	vmov	r8, r9, d0
   d8228:	ee10 0a10 	vmov	r0, s0
   d822c:	2200      	movs	r2, #0
   d822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8232:	4649      	mov	r1, r9
   d8234:	f7ff f82c 	bl	d7290 <__aeabi_dcmple>
   d8238:	2800      	cmp	r0, #0
   d823a:	d07c      	beq.n	d8336 <_strtod_l+0xa96>
   d823c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d823e:	2b00      	cmp	r3, #0
   d8240:	d04c      	beq.n	d82dc <_strtod_l+0xa3c>
   d8242:	4b95      	ldr	r3, [pc, #596]	; (d8498 <_strtod_l+0xbf8>)
   d8244:	2200      	movs	r2, #0
   d8246:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d824a:	f8df 924c 	ldr.w	r9, [pc, #588]	; d8498 <_strtod_l+0xbf8>
   d824e:	f04f 0800 	mov.w	r8, #0
   d8252:	4b92      	ldr	r3, [pc, #584]	; (d849c <_strtod_l+0xbfc>)
   d8254:	403b      	ands	r3, r7
   d8256:	9311      	str	r3, [sp, #68]	; 0x44
   d8258:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d825a:	4b91      	ldr	r3, [pc, #580]	; (d84a0 <_strtod_l+0xc00>)
   d825c:	429a      	cmp	r2, r3
   d825e:	f040 80b2 	bne.w	d83c6 <_strtod_l+0xb26>
   d8262:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d826a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d826e:	ec4b ab10 	vmov	d0, sl, fp
   d8272:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d8276:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d827a:	f000 ff93 	bl	d91a4 <__ulp>
   d827e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d8282:	ec53 2b10 	vmov	r2, r3, d0
   d8286:	f7fe fd87 	bl	d6d98 <__aeabi_dmul>
   d828a:	4652      	mov	r2, sl
   d828c:	465b      	mov	r3, fp
   d828e:	f7fe fbcd 	bl	d6a2c <__adddf3>
   d8292:	460b      	mov	r3, r1
   d8294:	4981      	ldr	r1, [pc, #516]	; (d849c <_strtod_l+0xbfc>)
   d8296:	4a83      	ldr	r2, [pc, #524]	; (d84a4 <_strtod_l+0xc04>)
   d8298:	4019      	ands	r1, r3
   d829a:	4291      	cmp	r1, r2
   d829c:	4682      	mov	sl, r0
   d829e:	d95e      	bls.n	d835e <_strtod_l+0xabe>
   d82a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d82a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d82a6:	4293      	cmp	r3, r2
   d82a8:	d103      	bne.n	d82b2 <_strtod_l+0xa12>
   d82aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d82ac:	3301      	adds	r3, #1
   d82ae:	f43f ad43 	beq.w	d7d38 <_strtod_l+0x498>
   d82b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d84b0 <_strtod_l+0xc10>
   d82b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d82ba:	991e      	ldr	r1, [sp, #120]	; 0x78
   d82bc:	4620      	mov	r0, r4
   d82be:	f000 fca9 	bl	d8c14 <_Bfree>
   d82c2:	9907      	ldr	r1, [sp, #28]
   d82c4:	4620      	mov	r0, r4
   d82c6:	f000 fca5 	bl	d8c14 <_Bfree>
   d82ca:	4631      	mov	r1, r6
   d82cc:	4620      	mov	r0, r4
   d82ce:	f000 fca1 	bl	d8c14 <_Bfree>
   d82d2:	4629      	mov	r1, r5
   d82d4:	4620      	mov	r0, r4
   d82d6:	f000 fc9d 	bl	d8c14 <_Bfree>
   d82da:	e613      	b.n	d7f04 <_strtod_l+0x664>
   d82dc:	f1ba 0f00 	cmp.w	sl, #0
   d82e0:	d11b      	bne.n	d831a <_strtod_l+0xa7a>
   d82e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d82e6:	b9f3      	cbnz	r3, d8326 <_strtod_l+0xa86>
   d82e8:	4b6b      	ldr	r3, [pc, #428]	; (d8498 <_strtod_l+0xbf8>)
   d82ea:	2200      	movs	r2, #0
   d82ec:	4640      	mov	r0, r8
   d82ee:	4649      	mov	r1, r9
   d82f0:	f7fe ffc4 	bl	d727c <__aeabi_dcmplt>
   d82f4:	b9d0      	cbnz	r0, d832c <_strtod_l+0xa8c>
   d82f6:	4640      	mov	r0, r8
   d82f8:	4649      	mov	r1, r9
   d82fa:	4b6b      	ldr	r3, [pc, #428]	; (d84a8 <_strtod_l+0xc08>)
   d82fc:	2200      	movs	r2, #0
   d82fe:	f7fe fd4b 	bl	d6d98 <__aeabi_dmul>
   d8302:	4680      	mov	r8, r0
   d8304:	4689      	mov	r9, r1
   d8306:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d830a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d830e:	931b      	str	r3, [sp, #108]	; 0x6c
   d8310:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d8314:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d8318:	e79b      	b.n	d8252 <_strtod_l+0x9b2>
   d831a:	f1ba 0f01 	cmp.w	sl, #1
   d831e:	d102      	bne.n	d8326 <_strtod_l+0xa86>
   d8320:	2f00      	cmp	r7, #0
   d8322:	f43f ad7e 	beq.w	d7e22 <_strtod_l+0x582>
   d8326:	4b61      	ldr	r3, [pc, #388]	; (d84ac <_strtod_l+0xc0c>)
   d8328:	2200      	movs	r2, #0
   d832a:	e78c      	b.n	d8246 <_strtod_l+0x9a6>
   d832c:	f8df 9178 	ldr.w	r9, [pc, #376]	; d84a8 <_strtod_l+0xc08>
   d8330:	f04f 0800 	mov.w	r8, #0
   d8334:	e7e7      	b.n	d8306 <_strtod_l+0xa66>
   d8336:	4b5c      	ldr	r3, [pc, #368]	; (d84a8 <_strtod_l+0xc08>)
   d8338:	4640      	mov	r0, r8
   d833a:	4649      	mov	r1, r9
   d833c:	2200      	movs	r2, #0
   d833e:	f7fe fd2b 	bl	d6d98 <__aeabi_dmul>
   d8342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8344:	4680      	mov	r8, r0
   d8346:	4689      	mov	r9, r1
   d8348:	b933      	cbnz	r3, d8358 <_strtod_l+0xab8>
   d834a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d834e:	9012      	str	r0, [sp, #72]	; 0x48
   d8350:	9313      	str	r3, [sp, #76]	; 0x4c
   d8352:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d8356:	e7dd      	b.n	d8314 <_strtod_l+0xa74>
   d8358:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d835c:	e7f9      	b.n	d8352 <_strtod_l+0xab2>
   d835e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d8362:	9b04      	ldr	r3, [sp, #16]
   d8364:	2b00      	cmp	r3, #0
   d8366:	d1a8      	bne.n	d82ba <_strtod_l+0xa1a>
   d8368:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d836c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d836e:	0d1b      	lsrs	r3, r3, #20
   d8370:	051b      	lsls	r3, r3, #20
   d8372:	429a      	cmp	r2, r3
   d8374:	d1a1      	bne.n	d82ba <_strtod_l+0xa1a>
   d8376:	4640      	mov	r0, r8
   d8378:	4649      	mov	r1, r9
   d837a:	f001 f863 	bl	d9444 <__aeabi_d2lz>
   d837e:	f7fe fcdd 	bl	d6d3c <__aeabi_l2d>
   d8382:	4602      	mov	r2, r0
   d8384:	460b      	mov	r3, r1
   d8386:	4640      	mov	r0, r8
   d8388:	4649      	mov	r1, r9
   d838a:	f7fe fb4d 	bl	d6a28 <__aeabi_dsub>
   d838e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8390:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8394:	ea43 030a 	orr.w	r3, r3, sl
   d8398:	4313      	orrs	r3, r2
   d839a:	4680      	mov	r8, r0
   d839c:	4689      	mov	r9, r1
   d839e:	d053      	beq.n	d8448 <_strtod_l+0xba8>
   d83a0:	a335      	add	r3, pc, #212	; (adr r3, d8478 <_strtod_l+0xbd8>)
   d83a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83a6:	f7fe ff69 	bl	d727c <__aeabi_dcmplt>
   d83aa:	2800      	cmp	r0, #0
   d83ac:	f47f acce 	bne.w	d7d4c <_strtod_l+0x4ac>
   d83b0:	a333      	add	r3, pc, #204	; (adr r3, d8480 <_strtod_l+0xbe0>)
   d83b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83b6:	4640      	mov	r0, r8
   d83b8:	4649      	mov	r1, r9
   d83ba:	f7fe ff7d 	bl	d72b8 <__aeabi_dcmpgt>
   d83be:	2800      	cmp	r0, #0
   d83c0:	f43f af7b 	beq.w	d82ba <_strtod_l+0xa1a>
   d83c4:	e4c2      	b.n	d7d4c <_strtod_l+0x4ac>
   d83c6:	9b04      	ldr	r3, [sp, #16]
   d83c8:	b333      	cbz	r3, d8418 <_strtod_l+0xb78>
   d83ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d83cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d83d0:	d822      	bhi.n	d8418 <_strtod_l+0xb78>
   d83d2:	a32d      	add	r3, pc, #180	; (adr r3, d8488 <_strtod_l+0xbe8>)
   d83d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83d8:	4640      	mov	r0, r8
   d83da:	4649      	mov	r1, r9
   d83dc:	f7fe ff58 	bl	d7290 <__aeabi_dcmple>
   d83e0:	b1a0      	cbz	r0, d840c <_strtod_l+0xb6c>
   d83e2:	4649      	mov	r1, r9
   d83e4:	4640      	mov	r0, r8
   d83e6:	f7fe ff71 	bl	d72cc <__aeabi_d2uiz>
   d83ea:	2801      	cmp	r0, #1
   d83ec:	bf38      	it	cc
   d83ee:	2001      	movcc	r0, #1
   d83f0:	f7fe fc58 	bl	d6ca4 <__aeabi_ui2d>
   d83f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d83f6:	4680      	mov	r8, r0
   d83f8:	4689      	mov	r9, r1
   d83fa:	bb13      	cbnz	r3, d8442 <_strtod_l+0xba2>
   d83fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8400:	9014      	str	r0, [sp, #80]	; 0x50
   d8402:	9315      	str	r3, [sp, #84]	; 0x54
   d8404:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d8408:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d840c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d840e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d8410:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d8414:	1a9b      	subs	r3, r3, r2
   d8416:	930d      	str	r3, [sp, #52]	; 0x34
   d8418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d841c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d8420:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d8424:	f000 febe 	bl	d91a4 <__ulp>
   d8428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d842c:	ec53 2b10 	vmov	r2, r3, d0
   d8430:	f7fe fcb2 	bl	d6d98 <__aeabi_dmul>
   d8434:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8438:	f7fe faf8 	bl	d6a2c <__adddf3>
   d843c:	4682      	mov	sl, r0
   d843e:	468b      	mov	fp, r1
   d8440:	e78f      	b.n	d8362 <_strtod_l+0xac2>
   d8442:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d8446:	e7dd      	b.n	d8404 <_strtod_l+0xb64>
   d8448:	a311      	add	r3, pc, #68	; (adr r3, d8490 <_strtod_l+0xbf0>)
   d844a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d844e:	f7fe ff15 	bl	d727c <__aeabi_dcmplt>
   d8452:	e7b4      	b.n	d83be <_strtod_l+0xb1e>
   d8454:	2300      	movs	r3, #0
   d8456:	930e      	str	r3, [sp, #56]	; 0x38
   d8458:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d845a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d845c:	6013      	str	r3, [r2, #0]
   d845e:	f7ff ba65 	b.w	d792c <_strtod_l+0x8c>
   d8462:	2b65      	cmp	r3, #101	; 0x65
   d8464:	f43f ab5d 	beq.w	d7b22 <_strtod_l+0x282>
   d8468:	2b45      	cmp	r3, #69	; 0x45
   d846a:	f43f ab5a 	beq.w	d7b22 <_strtod_l+0x282>
   d846e:	2201      	movs	r2, #1
   d8470:	f7ff bb92 	b.w	d7b98 <_strtod_l+0x2f8>
   d8474:	f3af 8000 	nop.w
   d8478:	94a03595 	.word	0x94a03595
   d847c:	3fdfffff 	.word	0x3fdfffff
   d8480:	35afe535 	.word	0x35afe535
   d8484:	3fe00000 	.word	0x3fe00000
   d8488:	ffc00000 	.word	0xffc00000
   d848c:	41dfffff 	.word	0x41dfffff
   d8490:	94a03595 	.word	0x94a03595
   d8494:	3fcfffff 	.word	0x3fcfffff
   d8498:	3ff00000 	.word	0x3ff00000
   d849c:	7ff00000 	.word	0x7ff00000
   d84a0:	7fe00000 	.word	0x7fe00000
   d84a4:	7c9fffff 	.word	0x7c9fffff
   d84a8:	3fe00000 	.word	0x3fe00000
   d84ac:	bff00000 	.word	0xbff00000
   d84b0:	7fefffff 	.word	0x7fefffff

000d84b4 <strtod>:
   d84b4:	460a      	mov	r2, r1
   d84b6:	4601      	mov	r1, r0
   d84b8:	4802      	ldr	r0, [pc, #8]	; (d84c4 <strtod+0x10>)
   d84ba:	4b03      	ldr	r3, [pc, #12]	; (d84c8 <strtod+0x14>)
   d84bc:	6800      	ldr	r0, [r0, #0]
   d84be:	f7ff b9ef 	b.w	d78a0 <_strtod_l>
   d84c2:	bf00      	nop
   d84c4:	2003e418 	.word	0x2003e418
   d84c8:	2003e480 	.word	0x2003e480

000d84cc <rshift>:
   d84cc:	6903      	ldr	r3, [r0, #16]
   d84ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d84d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d84d6:	ea4f 1261 	mov.w	r2, r1, asr #5
   d84da:	f100 0414 	add.w	r4, r0, #20
   d84de:	dd45      	ble.n	d856c <rshift+0xa0>
   d84e0:	f011 011f 	ands.w	r1, r1, #31
   d84e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d84e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d84ec:	d10c      	bne.n	d8508 <rshift+0x3c>
   d84ee:	f100 0710 	add.w	r7, r0, #16
   d84f2:	4629      	mov	r1, r5
   d84f4:	42b1      	cmp	r1, r6
   d84f6:	d334      	bcc.n	d8562 <rshift+0x96>
   d84f8:	1a9b      	subs	r3, r3, r2
   d84fa:	009b      	lsls	r3, r3, #2
   d84fc:	1eea      	subs	r2, r5, #3
   d84fe:	4296      	cmp	r6, r2
   d8500:	bf38      	it	cc
   d8502:	2300      	movcc	r3, #0
   d8504:	4423      	add	r3, r4
   d8506:	e015      	b.n	d8534 <rshift+0x68>
   d8508:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d850c:	f1c1 0820 	rsb	r8, r1, #32
   d8510:	40cf      	lsrs	r7, r1
   d8512:	f105 0e04 	add.w	lr, r5, #4
   d8516:	46a1      	mov	r9, r4
   d8518:	4576      	cmp	r6, lr
   d851a:	46f4      	mov	ip, lr
   d851c:	d815      	bhi.n	d854a <rshift+0x7e>
   d851e:	1a9b      	subs	r3, r3, r2
   d8520:	009a      	lsls	r2, r3, #2
   d8522:	3a04      	subs	r2, #4
   d8524:	3501      	adds	r5, #1
   d8526:	42ae      	cmp	r6, r5
   d8528:	bf38      	it	cc
   d852a:	2200      	movcc	r2, #0
   d852c:	18a3      	adds	r3, r4, r2
   d852e:	50a7      	str	r7, [r4, r2]
   d8530:	b107      	cbz	r7, d8534 <rshift+0x68>
   d8532:	3304      	adds	r3, #4
   d8534:	1b1a      	subs	r2, r3, r4
   d8536:	42a3      	cmp	r3, r4
   d8538:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d853c:	bf08      	it	eq
   d853e:	2300      	moveq	r3, #0
   d8540:	6102      	str	r2, [r0, #16]
   d8542:	bf08      	it	eq
   d8544:	6143      	streq	r3, [r0, #20]
   d8546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d854a:	f8dc c000 	ldr.w	ip, [ip]
   d854e:	fa0c fc08 	lsl.w	ip, ip, r8
   d8552:	ea4c 0707 	orr.w	r7, ip, r7
   d8556:	f849 7b04 	str.w	r7, [r9], #4
   d855a:	f85e 7b04 	ldr.w	r7, [lr], #4
   d855e:	40cf      	lsrs	r7, r1
   d8560:	e7da      	b.n	d8518 <rshift+0x4c>
   d8562:	f851 cb04 	ldr.w	ip, [r1], #4
   d8566:	f847 cf04 	str.w	ip, [r7, #4]!
   d856a:	e7c3      	b.n	d84f4 <rshift+0x28>
   d856c:	4623      	mov	r3, r4
   d856e:	e7e1      	b.n	d8534 <rshift+0x68>

000d8570 <__hexdig_fun>:
   d8570:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8574:	2b09      	cmp	r3, #9
   d8576:	d802      	bhi.n	d857e <__hexdig_fun+0xe>
   d8578:	3820      	subs	r0, #32
   d857a:	b2c0      	uxtb	r0, r0
   d857c:	4770      	bx	lr
   d857e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8582:	2b05      	cmp	r3, #5
   d8584:	d801      	bhi.n	d858a <__hexdig_fun+0x1a>
   d8586:	3847      	subs	r0, #71	; 0x47
   d8588:	e7f7      	b.n	d857a <__hexdig_fun+0xa>
   d858a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d858e:	2b05      	cmp	r3, #5
   d8590:	d801      	bhi.n	d8596 <__hexdig_fun+0x26>
   d8592:	3827      	subs	r0, #39	; 0x27
   d8594:	e7f1      	b.n	d857a <__hexdig_fun+0xa>
   d8596:	2000      	movs	r0, #0
   d8598:	4770      	bx	lr
	...

000d859c <__gethex>:
   d859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d85a0:	ed2d 8b02 	vpush	{d8}
   d85a4:	b089      	sub	sp, #36	; 0x24
   d85a6:	ee08 0a10 	vmov	s16, r0
   d85aa:	9304      	str	r3, [sp, #16]
   d85ac:	4bbc      	ldr	r3, [pc, #752]	; (d88a0 <__gethex+0x304>)
   d85ae:	681b      	ldr	r3, [r3, #0]
   d85b0:	9301      	str	r3, [sp, #4]
   d85b2:	4618      	mov	r0, r3
   d85b4:	468b      	mov	fp, r1
   d85b6:	4690      	mov	r8, r2
   d85b8:	f7ff f93b 	bl	d7832 <strlen>
   d85bc:	9b01      	ldr	r3, [sp, #4]
   d85be:	f8db 2000 	ldr.w	r2, [fp]
   d85c2:	4403      	add	r3, r0
   d85c4:	4682      	mov	sl, r0
   d85c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d85ca:	9305      	str	r3, [sp, #20]
   d85cc:	1c93      	adds	r3, r2, #2
   d85ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d85d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d85d6:	32fe      	adds	r2, #254	; 0xfe
   d85d8:	18d1      	adds	r1, r2, r3
   d85da:	461f      	mov	r7, r3
   d85dc:	f813 0b01 	ldrb.w	r0, [r3], #1
   d85e0:	9100      	str	r1, [sp, #0]
   d85e2:	2830      	cmp	r0, #48	; 0x30
   d85e4:	d0f8      	beq.n	d85d8 <__gethex+0x3c>
   d85e6:	f7ff ffc3 	bl	d8570 <__hexdig_fun>
   d85ea:	4604      	mov	r4, r0
   d85ec:	2800      	cmp	r0, #0
   d85ee:	d13a      	bne.n	d8666 <__gethex+0xca>
   d85f0:	9901      	ldr	r1, [sp, #4]
   d85f2:	4652      	mov	r2, sl
   d85f4:	4638      	mov	r0, r7
   d85f6:	f7ff f924 	bl	d7842 <strncmp>
   d85fa:	4605      	mov	r5, r0
   d85fc:	2800      	cmp	r0, #0
   d85fe:	d168      	bne.n	d86d2 <__gethex+0x136>
   d8600:	f817 000a 	ldrb.w	r0, [r7, sl]
   d8604:	eb07 060a 	add.w	r6, r7, sl
   d8608:	f7ff ffb2 	bl	d8570 <__hexdig_fun>
   d860c:	2800      	cmp	r0, #0
   d860e:	d062      	beq.n	d86d6 <__gethex+0x13a>
   d8610:	4633      	mov	r3, r6
   d8612:	7818      	ldrb	r0, [r3, #0]
   d8614:	2830      	cmp	r0, #48	; 0x30
   d8616:	461f      	mov	r7, r3
   d8618:	f103 0301 	add.w	r3, r3, #1
   d861c:	d0f9      	beq.n	d8612 <__gethex+0x76>
   d861e:	f7ff ffa7 	bl	d8570 <__hexdig_fun>
   d8622:	2301      	movs	r3, #1
   d8624:	fab0 f480 	clz	r4, r0
   d8628:	0964      	lsrs	r4, r4, #5
   d862a:	4635      	mov	r5, r6
   d862c:	9300      	str	r3, [sp, #0]
   d862e:	463a      	mov	r2, r7
   d8630:	4616      	mov	r6, r2
   d8632:	3201      	adds	r2, #1
   d8634:	7830      	ldrb	r0, [r6, #0]
   d8636:	f7ff ff9b 	bl	d8570 <__hexdig_fun>
   d863a:	2800      	cmp	r0, #0
   d863c:	d1f8      	bne.n	d8630 <__gethex+0x94>
   d863e:	9901      	ldr	r1, [sp, #4]
   d8640:	4652      	mov	r2, sl
   d8642:	4630      	mov	r0, r6
   d8644:	f7ff f8fd 	bl	d7842 <strncmp>
   d8648:	b980      	cbnz	r0, d866c <__gethex+0xd0>
   d864a:	b94d      	cbnz	r5, d8660 <__gethex+0xc4>
   d864c:	eb06 050a 	add.w	r5, r6, sl
   d8650:	462a      	mov	r2, r5
   d8652:	4616      	mov	r6, r2
   d8654:	3201      	adds	r2, #1
   d8656:	7830      	ldrb	r0, [r6, #0]
   d8658:	f7ff ff8a 	bl	d8570 <__hexdig_fun>
   d865c:	2800      	cmp	r0, #0
   d865e:	d1f8      	bne.n	d8652 <__gethex+0xb6>
   d8660:	1bad      	subs	r5, r5, r6
   d8662:	00ad      	lsls	r5, r5, #2
   d8664:	e004      	b.n	d8670 <__gethex+0xd4>
   d8666:	2400      	movs	r4, #0
   d8668:	4625      	mov	r5, r4
   d866a:	e7e0      	b.n	d862e <__gethex+0x92>
   d866c:	2d00      	cmp	r5, #0
   d866e:	d1f7      	bne.n	d8660 <__gethex+0xc4>
   d8670:	7833      	ldrb	r3, [r6, #0]
   d8672:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8676:	2b50      	cmp	r3, #80	; 0x50
   d8678:	d13b      	bne.n	d86f2 <__gethex+0x156>
   d867a:	7873      	ldrb	r3, [r6, #1]
   d867c:	2b2b      	cmp	r3, #43	; 0x2b
   d867e:	d02c      	beq.n	d86da <__gethex+0x13e>
   d8680:	2b2d      	cmp	r3, #45	; 0x2d
   d8682:	d02e      	beq.n	d86e2 <__gethex+0x146>
   d8684:	1c71      	adds	r1, r6, #1
   d8686:	f04f 0900 	mov.w	r9, #0
   d868a:	7808      	ldrb	r0, [r1, #0]
   d868c:	f7ff ff70 	bl	d8570 <__hexdig_fun>
   d8690:	1e43      	subs	r3, r0, #1
   d8692:	b2db      	uxtb	r3, r3
   d8694:	2b18      	cmp	r3, #24
   d8696:	d82c      	bhi.n	d86f2 <__gethex+0x156>
   d8698:	f1a0 0210 	sub.w	r2, r0, #16
   d869c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d86a0:	f7ff ff66 	bl	d8570 <__hexdig_fun>
   d86a4:	1e43      	subs	r3, r0, #1
   d86a6:	b2db      	uxtb	r3, r3
   d86a8:	2b18      	cmp	r3, #24
   d86aa:	d91d      	bls.n	d86e8 <__gethex+0x14c>
   d86ac:	f1b9 0f00 	cmp.w	r9, #0
   d86b0:	d000      	beq.n	d86b4 <__gethex+0x118>
   d86b2:	4252      	negs	r2, r2
   d86b4:	4415      	add	r5, r2
   d86b6:	f8cb 1000 	str.w	r1, [fp]
   d86ba:	b1e4      	cbz	r4, d86f6 <__gethex+0x15a>
   d86bc:	9b00      	ldr	r3, [sp, #0]
   d86be:	2b00      	cmp	r3, #0
   d86c0:	bf14      	ite	ne
   d86c2:	2700      	movne	r7, #0
   d86c4:	2706      	moveq	r7, #6
   d86c6:	4638      	mov	r0, r7
   d86c8:	b009      	add	sp, #36	; 0x24
   d86ca:	ecbd 8b02 	vpop	{d8}
   d86ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d86d2:	463e      	mov	r6, r7
   d86d4:	4625      	mov	r5, r4
   d86d6:	2401      	movs	r4, #1
   d86d8:	e7ca      	b.n	d8670 <__gethex+0xd4>
   d86da:	f04f 0900 	mov.w	r9, #0
   d86de:	1cb1      	adds	r1, r6, #2
   d86e0:	e7d3      	b.n	d868a <__gethex+0xee>
   d86e2:	f04f 0901 	mov.w	r9, #1
   d86e6:	e7fa      	b.n	d86de <__gethex+0x142>
   d86e8:	230a      	movs	r3, #10
   d86ea:	fb03 0202 	mla	r2, r3, r2, r0
   d86ee:	3a10      	subs	r2, #16
   d86f0:	e7d4      	b.n	d869c <__gethex+0x100>
   d86f2:	4631      	mov	r1, r6
   d86f4:	e7df      	b.n	d86b6 <__gethex+0x11a>
   d86f6:	1bf3      	subs	r3, r6, r7
   d86f8:	3b01      	subs	r3, #1
   d86fa:	4621      	mov	r1, r4
   d86fc:	2b07      	cmp	r3, #7
   d86fe:	dc52      	bgt.n	d87a6 <__gethex+0x20a>
   d8700:	ee18 0a10 	vmov	r0, s16
   d8704:	f000 fa52 	bl	d8bac <_Balloc>
   d8708:	f04f 0b00 	mov.w	fp, #0
   d870c:	f100 0914 	add.w	r9, r0, #20
   d8710:	f1ca 0301 	rsb	r3, sl, #1
   d8714:	4604      	mov	r4, r0
   d8716:	f8cd 9008 	str.w	r9, [sp, #8]
   d871a:	f8cd b000 	str.w	fp, [sp]
   d871e:	9306      	str	r3, [sp, #24]
   d8720:	42b7      	cmp	r7, r6
   d8722:	d343      	bcc.n	d87ac <__gethex+0x210>
   d8724:	9802      	ldr	r0, [sp, #8]
   d8726:	9b00      	ldr	r3, [sp, #0]
   d8728:	f840 3b04 	str.w	r3, [r0], #4
   d872c:	eba0 0009 	sub.w	r0, r0, r9
   d8730:	1080      	asrs	r0, r0, #2
   d8732:	0146      	lsls	r6, r0, #5
   d8734:	6120      	str	r0, [r4, #16]
   d8736:	4618      	mov	r0, r3
   d8738:	f000 faff 	bl	d8d3a <__hi0bits>
   d873c:	1a30      	subs	r0, r6, r0
   d873e:	f8d8 6000 	ldr.w	r6, [r8]
   d8742:	42b0      	cmp	r0, r6
   d8744:	dd66      	ble.n	d8814 <__gethex+0x278>
   d8746:	1b87      	subs	r7, r0, r6
   d8748:	4639      	mov	r1, r7
   d874a:	4620      	mov	r0, r4
   d874c:	f000 fe4c 	bl	d93e8 <__any_on>
   d8750:	4682      	mov	sl, r0
   d8752:	b1a8      	cbz	r0, d8780 <__gethex+0x1e4>
   d8754:	1e7b      	subs	r3, r7, #1
   d8756:	1159      	asrs	r1, r3, #5
   d8758:	f003 021f 	and.w	r2, r3, #31
   d875c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d8760:	f04f 0a01 	mov.w	sl, #1
   d8764:	fa0a f202 	lsl.w	r2, sl, r2
   d8768:	420a      	tst	r2, r1
   d876a:	d009      	beq.n	d8780 <__gethex+0x1e4>
   d876c:	4553      	cmp	r3, sl
   d876e:	dd05      	ble.n	d877c <__gethex+0x1e0>
   d8770:	1eb9      	subs	r1, r7, #2
   d8772:	4620      	mov	r0, r4
   d8774:	f000 fe38 	bl	d93e8 <__any_on>
   d8778:	2800      	cmp	r0, #0
   d877a:	d148      	bne.n	d880e <__gethex+0x272>
   d877c:	f04f 0a02 	mov.w	sl, #2
   d8780:	4639      	mov	r1, r7
   d8782:	4620      	mov	r0, r4
   d8784:	f7ff fea2 	bl	d84cc <rshift>
   d8788:	443d      	add	r5, r7
   d878a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d878e:	42ab      	cmp	r3, r5
   d8790:	da4f      	bge.n	d8832 <__gethex+0x296>
   d8792:	ee18 0a10 	vmov	r0, s16
   d8796:	4621      	mov	r1, r4
   d8798:	f000 fa3c 	bl	d8c14 <_Bfree>
   d879c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d879e:	2300      	movs	r3, #0
   d87a0:	6013      	str	r3, [r2, #0]
   d87a2:	27a3      	movs	r7, #163	; 0xa3
   d87a4:	e78f      	b.n	d86c6 <__gethex+0x12a>
   d87a6:	3101      	adds	r1, #1
   d87a8:	105b      	asrs	r3, r3, #1
   d87aa:	e7a7      	b.n	d86fc <__gethex+0x160>
   d87ac:	1e73      	subs	r3, r6, #1
   d87ae:	9a05      	ldr	r2, [sp, #20]
   d87b0:	9303      	str	r3, [sp, #12]
   d87b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d87b6:	4293      	cmp	r3, r2
   d87b8:	d019      	beq.n	d87ee <__gethex+0x252>
   d87ba:	f1bb 0f20 	cmp.w	fp, #32
   d87be:	d107      	bne.n	d87d0 <__gethex+0x234>
   d87c0:	9b02      	ldr	r3, [sp, #8]
   d87c2:	9a00      	ldr	r2, [sp, #0]
   d87c4:	f843 2b04 	str.w	r2, [r3], #4
   d87c8:	9302      	str	r3, [sp, #8]
   d87ca:	2300      	movs	r3, #0
   d87cc:	9300      	str	r3, [sp, #0]
   d87ce:	469b      	mov	fp, r3
   d87d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d87d4:	f7ff fecc 	bl	d8570 <__hexdig_fun>
   d87d8:	9b00      	ldr	r3, [sp, #0]
   d87da:	f000 000f 	and.w	r0, r0, #15
   d87de:	fa00 f00b 	lsl.w	r0, r0, fp
   d87e2:	4303      	orrs	r3, r0
   d87e4:	9300      	str	r3, [sp, #0]
   d87e6:	f10b 0b04 	add.w	fp, fp, #4
   d87ea:	9b03      	ldr	r3, [sp, #12]
   d87ec:	e00d      	b.n	d880a <__gethex+0x26e>
   d87ee:	9b03      	ldr	r3, [sp, #12]
   d87f0:	9a06      	ldr	r2, [sp, #24]
   d87f2:	4413      	add	r3, r2
   d87f4:	42bb      	cmp	r3, r7
   d87f6:	d3e0      	bcc.n	d87ba <__gethex+0x21e>
   d87f8:	4618      	mov	r0, r3
   d87fa:	9901      	ldr	r1, [sp, #4]
   d87fc:	9307      	str	r3, [sp, #28]
   d87fe:	4652      	mov	r2, sl
   d8800:	f7ff f81f 	bl	d7842 <strncmp>
   d8804:	9b07      	ldr	r3, [sp, #28]
   d8806:	2800      	cmp	r0, #0
   d8808:	d1d7      	bne.n	d87ba <__gethex+0x21e>
   d880a:	461e      	mov	r6, r3
   d880c:	e788      	b.n	d8720 <__gethex+0x184>
   d880e:	f04f 0a03 	mov.w	sl, #3
   d8812:	e7b5      	b.n	d8780 <__gethex+0x1e4>
   d8814:	da0a      	bge.n	d882c <__gethex+0x290>
   d8816:	1a37      	subs	r7, r6, r0
   d8818:	4621      	mov	r1, r4
   d881a:	ee18 0a10 	vmov	r0, s16
   d881e:	463a      	mov	r2, r7
   d8820:	f000 fbce 	bl	d8fc0 <__lshift>
   d8824:	1bed      	subs	r5, r5, r7
   d8826:	4604      	mov	r4, r0
   d8828:	f100 0914 	add.w	r9, r0, #20
   d882c:	f04f 0a00 	mov.w	sl, #0
   d8830:	e7ab      	b.n	d878a <__gethex+0x1ee>
   d8832:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8836:	42a8      	cmp	r0, r5
   d8838:	dd6d      	ble.n	d8916 <__gethex+0x37a>
   d883a:	1b45      	subs	r5, r0, r5
   d883c:	42ae      	cmp	r6, r5
   d883e:	dc31      	bgt.n	d88a4 <__gethex+0x308>
   d8840:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8844:	2b02      	cmp	r3, #2
   d8846:	d023      	beq.n	d8890 <__gethex+0x2f4>
   d8848:	2b03      	cmp	r3, #3
   d884a:	d025      	beq.n	d8898 <__gethex+0x2fc>
   d884c:	2b01      	cmp	r3, #1
   d884e:	d115      	bne.n	d887c <__gethex+0x2e0>
   d8850:	42ae      	cmp	r6, r5
   d8852:	d113      	bne.n	d887c <__gethex+0x2e0>
   d8854:	2e01      	cmp	r6, #1
   d8856:	d10b      	bne.n	d8870 <__gethex+0x2d4>
   d8858:	9a04      	ldr	r2, [sp, #16]
   d885a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d885e:	6013      	str	r3, [r2, #0]
   d8860:	2301      	movs	r3, #1
   d8862:	6123      	str	r3, [r4, #16]
   d8864:	f8c9 3000 	str.w	r3, [r9]
   d8868:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d886a:	2762      	movs	r7, #98	; 0x62
   d886c:	601c      	str	r4, [r3, #0]
   d886e:	e72a      	b.n	d86c6 <__gethex+0x12a>
   d8870:	1e71      	subs	r1, r6, #1
   d8872:	4620      	mov	r0, r4
   d8874:	f000 fdb8 	bl	d93e8 <__any_on>
   d8878:	2800      	cmp	r0, #0
   d887a:	d1ed      	bne.n	d8858 <__gethex+0x2bc>
   d887c:	ee18 0a10 	vmov	r0, s16
   d8880:	4621      	mov	r1, r4
   d8882:	f000 f9c7 	bl	d8c14 <_Bfree>
   d8886:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8888:	2300      	movs	r3, #0
   d888a:	6013      	str	r3, [r2, #0]
   d888c:	2750      	movs	r7, #80	; 0x50
   d888e:	e71a      	b.n	d86c6 <__gethex+0x12a>
   d8890:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8892:	2b00      	cmp	r3, #0
   d8894:	d1f2      	bne.n	d887c <__gethex+0x2e0>
   d8896:	e7df      	b.n	d8858 <__gethex+0x2bc>
   d8898:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d889a:	2b00      	cmp	r3, #0
   d889c:	d1dc      	bne.n	d8858 <__gethex+0x2bc>
   d889e:	e7ed      	b.n	d887c <__gethex+0x2e0>
   d88a0:	000d9b6c 	.word	0x000d9b6c
   d88a4:	1e6f      	subs	r7, r5, #1
   d88a6:	f1ba 0f00 	cmp.w	sl, #0
   d88aa:	d131      	bne.n	d8910 <__gethex+0x374>
   d88ac:	b127      	cbz	r7, d88b8 <__gethex+0x31c>
   d88ae:	4639      	mov	r1, r7
   d88b0:	4620      	mov	r0, r4
   d88b2:	f000 fd99 	bl	d93e8 <__any_on>
   d88b6:	4682      	mov	sl, r0
   d88b8:	117b      	asrs	r3, r7, #5
   d88ba:	2101      	movs	r1, #1
   d88bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d88c0:	f007 071f 	and.w	r7, r7, #31
   d88c4:	fa01 f707 	lsl.w	r7, r1, r7
   d88c8:	421f      	tst	r7, r3
   d88ca:	4629      	mov	r1, r5
   d88cc:	4620      	mov	r0, r4
   d88ce:	bf18      	it	ne
   d88d0:	f04a 0a02 	orrne.w	sl, sl, #2
   d88d4:	1b76      	subs	r6, r6, r5
   d88d6:	f7ff fdf9 	bl	d84cc <rshift>
   d88da:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d88de:	2702      	movs	r7, #2
   d88e0:	f1ba 0f00 	cmp.w	sl, #0
   d88e4:	d048      	beq.n	d8978 <__gethex+0x3dc>
   d88e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d88ea:	2b02      	cmp	r3, #2
   d88ec:	d015      	beq.n	d891a <__gethex+0x37e>
   d88ee:	2b03      	cmp	r3, #3
   d88f0:	d017      	beq.n	d8922 <__gethex+0x386>
   d88f2:	2b01      	cmp	r3, #1
   d88f4:	d109      	bne.n	d890a <__gethex+0x36e>
   d88f6:	f01a 0f02 	tst.w	sl, #2
   d88fa:	d006      	beq.n	d890a <__gethex+0x36e>
   d88fc:	f8d9 0000 	ldr.w	r0, [r9]
   d8900:	ea4a 0a00 	orr.w	sl, sl, r0
   d8904:	f01a 0f01 	tst.w	sl, #1
   d8908:	d10e      	bne.n	d8928 <__gethex+0x38c>
   d890a:	f047 0710 	orr.w	r7, r7, #16
   d890e:	e033      	b.n	d8978 <__gethex+0x3dc>
   d8910:	f04f 0a01 	mov.w	sl, #1
   d8914:	e7d0      	b.n	d88b8 <__gethex+0x31c>
   d8916:	2701      	movs	r7, #1
   d8918:	e7e2      	b.n	d88e0 <__gethex+0x344>
   d891a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d891c:	f1c3 0301 	rsb	r3, r3, #1
   d8920:	9315      	str	r3, [sp, #84]	; 0x54
   d8922:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8924:	2b00      	cmp	r3, #0
   d8926:	d0f0      	beq.n	d890a <__gethex+0x36e>
   d8928:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d892c:	f104 0314 	add.w	r3, r4, #20
   d8930:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d8934:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d8938:	f04f 0c00 	mov.w	ip, #0
   d893c:	4618      	mov	r0, r3
   d893e:	f853 2b04 	ldr.w	r2, [r3], #4
   d8942:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d8946:	d01c      	beq.n	d8982 <__gethex+0x3e6>
   d8948:	3201      	adds	r2, #1
   d894a:	6002      	str	r2, [r0, #0]
   d894c:	2f02      	cmp	r7, #2
   d894e:	f104 0314 	add.w	r3, r4, #20
   d8952:	d13a      	bne.n	d89ca <__gethex+0x42e>
   d8954:	f8d8 2000 	ldr.w	r2, [r8]
   d8958:	3a01      	subs	r2, #1
   d895a:	42b2      	cmp	r2, r6
   d895c:	d10a      	bne.n	d8974 <__gethex+0x3d8>
   d895e:	1171      	asrs	r1, r6, #5
   d8960:	2201      	movs	r2, #1
   d8962:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d8966:	f006 061f 	and.w	r6, r6, #31
   d896a:	fa02 f606 	lsl.w	r6, r2, r6
   d896e:	421e      	tst	r6, r3
   d8970:	bf18      	it	ne
   d8972:	4617      	movne	r7, r2
   d8974:	f047 0720 	orr.w	r7, r7, #32
   d8978:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d897a:	601c      	str	r4, [r3, #0]
   d897c:	9b04      	ldr	r3, [sp, #16]
   d897e:	601d      	str	r5, [r3, #0]
   d8980:	e6a1      	b.n	d86c6 <__gethex+0x12a>
   d8982:	4299      	cmp	r1, r3
   d8984:	f843 cc04 	str.w	ip, [r3, #-4]
   d8988:	d8d8      	bhi.n	d893c <__gethex+0x3a0>
   d898a:	68a3      	ldr	r3, [r4, #8]
   d898c:	4599      	cmp	r9, r3
   d898e:	db14      	blt.n	d89ba <__gethex+0x41e>
   d8990:	6861      	ldr	r1, [r4, #4]
   d8992:	ee18 0a10 	vmov	r0, s16
   d8996:	3101      	adds	r1, #1
   d8998:	f000 f908 	bl	d8bac <_Balloc>
   d899c:	6922      	ldr	r2, [r4, #16]
   d899e:	3202      	adds	r2, #2
   d89a0:	f104 010c 	add.w	r1, r4, #12
   d89a4:	4682      	mov	sl, r0
   d89a6:	0092      	lsls	r2, r2, #2
   d89a8:	300c      	adds	r0, #12
   d89aa:	f7fe feaf 	bl	d770c <memcpy>
   d89ae:	4621      	mov	r1, r4
   d89b0:	ee18 0a10 	vmov	r0, s16
   d89b4:	f000 f92e 	bl	d8c14 <_Bfree>
   d89b8:	4654      	mov	r4, sl
   d89ba:	6923      	ldr	r3, [r4, #16]
   d89bc:	1c5a      	adds	r2, r3, #1
   d89be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d89c2:	6122      	str	r2, [r4, #16]
   d89c4:	2201      	movs	r2, #1
   d89c6:	615a      	str	r2, [r3, #20]
   d89c8:	e7c0      	b.n	d894c <__gethex+0x3b0>
   d89ca:	6922      	ldr	r2, [r4, #16]
   d89cc:	454a      	cmp	r2, r9
   d89ce:	dd0b      	ble.n	d89e8 <__gethex+0x44c>
   d89d0:	2101      	movs	r1, #1
   d89d2:	4620      	mov	r0, r4
   d89d4:	f7ff fd7a 	bl	d84cc <rshift>
   d89d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d89dc:	3501      	adds	r5, #1
   d89de:	42ab      	cmp	r3, r5
   d89e0:	f6ff aed7 	blt.w	d8792 <__gethex+0x1f6>
   d89e4:	2701      	movs	r7, #1
   d89e6:	e7c5      	b.n	d8974 <__gethex+0x3d8>
   d89e8:	f016 061f 	ands.w	r6, r6, #31
   d89ec:	d0fa      	beq.n	d89e4 <__gethex+0x448>
   d89ee:	449b      	add	fp, r3
   d89f0:	f1c6 0620 	rsb	r6, r6, #32
   d89f4:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d89f8:	f000 f99f 	bl	d8d3a <__hi0bits>
   d89fc:	42b0      	cmp	r0, r6
   d89fe:	dbe7      	blt.n	d89d0 <__gethex+0x434>
   d8a00:	e7f0      	b.n	d89e4 <__gethex+0x448>
   d8a02:	bf00      	nop

000d8a04 <L_shift>:
   d8a04:	f1c2 0208 	rsb	r2, r2, #8
   d8a08:	0092      	lsls	r2, r2, #2
   d8a0a:	b570      	push	{r4, r5, r6, lr}
   d8a0c:	f1c2 0620 	rsb	r6, r2, #32
   d8a10:	6843      	ldr	r3, [r0, #4]
   d8a12:	6804      	ldr	r4, [r0, #0]
   d8a14:	fa03 f506 	lsl.w	r5, r3, r6
   d8a18:	432c      	orrs	r4, r5
   d8a1a:	40d3      	lsrs	r3, r2
   d8a1c:	6004      	str	r4, [r0, #0]
   d8a1e:	f840 3f04 	str.w	r3, [r0, #4]!
   d8a22:	4288      	cmp	r0, r1
   d8a24:	d3f4      	bcc.n	d8a10 <L_shift+0xc>
   d8a26:	bd70      	pop	{r4, r5, r6, pc}

000d8a28 <__match>:
   d8a28:	b530      	push	{r4, r5, lr}
   d8a2a:	6803      	ldr	r3, [r0, #0]
   d8a2c:	3301      	adds	r3, #1
   d8a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8a32:	b914      	cbnz	r4, d8a3a <__match+0x12>
   d8a34:	6003      	str	r3, [r0, #0]
   d8a36:	2001      	movs	r0, #1
   d8a38:	bd30      	pop	{r4, r5, pc}
   d8a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8a3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d8a42:	2d19      	cmp	r5, #25
   d8a44:	bf98      	it	ls
   d8a46:	3220      	addls	r2, #32
   d8a48:	42a2      	cmp	r2, r4
   d8a4a:	d0f0      	beq.n	d8a2e <__match+0x6>
   d8a4c:	2000      	movs	r0, #0
   d8a4e:	e7f3      	b.n	d8a38 <__match+0x10>

000d8a50 <__hexnan>:
   d8a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a54:	680b      	ldr	r3, [r1, #0]
   d8a56:	6801      	ldr	r1, [r0, #0]
   d8a58:	115e      	asrs	r6, r3, #5
   d8a5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d8a5e:	f013 031f 	ands.w	r3, r3, #31
   d8a62:	b087      	sub	sp, #28
   d8a64:	bf18      	it	ne
   d8a66:	3604      	addne	r6, #4
   d8a68:	2500      	movs	r5, #0
   d8a6a:	1f37      	subs	r7, r6, #4
   d8a6c:	4682      	mov	sl, r0
   d8a6e:	4690      	mov	r8, r2
   d8a70:	9301      	str	r3, [sp, #4]
   d8a72:	f846 5c04 	str.w	r5, [r6, #-4]
   d8a76:	46b9      	mov	r9, r7
   d8a78:	463c      	mov	r4, r7
   d8a7a:	9502      	str	r5, [sp, #8]
   d8a7c:	46ab      	mov	fp, r5
   d8a7e:	784a      	ldrb	r2, [r1, #1]
   d8a80:	1c4b      	adds	r3, r1, #1
   d8a82:	9303      	str	r3, [sp, #12]
   d8a84:	b342      	cbz	r2, d8ad8 <__hexnan+0x88>
   d8a86:	4610      	mov	r0, r2
   d8a88:	9105      	str	r1, [sp, #20]
   d8a8a:	9204      	str	r2, [sp, #16]
   d8a8c:	f7ff fd70 	bl	d8570 <__hexdig_fun>
   d8a90:	2800      	cmp	r0, #0
   d8a92:	d14f      	bne.n	d8b34 <__hexnan+0xe4>
   d8a94:	9a04      	ldr	r2, [sp, #16]
   d8a96:	9905      	ldr	r1, [sp, #20]
   d8a98:	2a20      	cmp	r2, #32
   d8a9a:	d818      	bhi.n	d8ace <__hexnan+0x7e>
   d8a9c:	9b02      	ldr	r3, [sp, #8]
   d8a9e:	459b      	cmp	fp, r3
   d8aa0:	dd13      	ble.n	d8aca <__hexnan+0x7a>
   d8aa2:	454c      	cmp	r4, r9
   d8aa4:	d206      	bcs.n	d8ab4 <__hexnan+0x64>
   d8aa6:	2d07      	cmp	r5, #7
   d8aa8:	dc04      	bgt.n	d8ab4 <__hexnan+0x64>
   d8aaa:	462a      	mov	r2, r5
   d8aac:	4649      	mov	r1, r9
   d8aae:	4620      	mov	r0, r4
   d8ab0:	f7ff ffa8 	bl	d8a04 <L_shift>
   d8ab4:	4544      	cmp	r4, r8
   d8ab6:	d950      	bls.n	d8b5a <__hexnan+0x10a>
   d8ab8:	2300      	movs	r3, #0
   d8aba:	f1a4 0904 	sub.w	r9, r4, #4
   d8abe:	f844 3c04 	str.w	r3, [r4, #-4]
   d8ac2:	f8cd b008 	str.w	fp, [sp, #8]
   d8ac6:	464c      	mov	r4, r9
   d8ac8:	461d      	mov	r5, r3
   d8aca:	9903      	ldr	r1, [sp, #12]
   d8acc:	e7d7      	b.n	d8a7e <__hexnan+0x2e>
   d8ace:	2a29      	cmp	r2, #41	; 0x29
   d8ad0:	d156      	bne.n	d8b80 <__hexnan+0x130>
   d8ad2:	3102      	adds	r1, #2
   d8ad4:	f8ca 1000 	str.w	r1, [sl]
   d8ad8:	f1bb 0f00 	cmp.w	fp, #0
   d8adc:	d050      	beq.n	d8b80 <__hexnan+0x130>
   d8ade:	454c      	cmp	r4, r9
   d8ae0:	d206      	bcs.n	d8af0 <__hexnan+0xa0>
   d8ae2:	2d07      	cmp	r5, #7
   d8ae4:	dc04      	bgt.n	d8af0 <__hexnan+0xa0>
   d8ae6:	462a      	mov	r2, r5
   d8ae8:	4649      	mov	r1, r9
   d8aea:	4620      	mov	r0, r4
   d8aec:	f7ff ff8a 	bl	d8a04 <L_shift>
   d8af0:	4544      	cmp	r4, r8
   d8af2:	d934      	bls.n	d8b5e <__hexnan+0x10e>
   d8af4:	f1a8 0204 	sub.w	r2, r8, #4
   d8af8:	4623      	mov	r3, r4
   d8afa:	f853 1b04 	ldr.w	r1, [r3], #4
   d8afe:	f842 1f04 	str.w	r1, [r2, #4]!
   d8b02:	429f      	cmp	r7, r3
   d8b04:	d2f9      	bcs.n	d8afa <__hexnan+0xaa>
   d8b06:	1b3b      	subs	r3, r7, r4
   d8b08:	f023 0303 	bic.w	r3, r3, #3
   d8b0c:	3304      	adds	r3, #4
   d8b0e:	3401      	adds	r4, #1
   d8b10:	3e03      	subs	r6, #3
   d8b12:	42b4      	cmp	r4, r6
   d8b14:	bf88      	it	hi
   d8b16:	2304      	movhi	r3, #4
   d8b18:	4443      	add	r3, r8
   d8b1a:	2200      	movs	r2, #0
   d8b1c:	f843 2b04 	str.w	r2, [r3], #4
   d8b20:	429f      	cmp	r7, r3
   d8b22:	d2fb      	bcs.n	d8b1c <__hexnan+0xcc>
   d8b24:	683b      	ldr	r3, [r7, #0]
   d8b26:	b91b      	cbnz	r3, d8b30 <__hexnan+0xe0>
   d8b28:	4547      	cmp	r7, r8
   d8b2a:	d127      	bne.n	d8b7c <__hexnan+0x12c>
   d8b2c:	2301      	movs	r3, #1
   d8b2e:	603b      	str	r3, [r7, #0]
   d8b30:	2005      	movs	r0, #5
   d8b32:	e026      	b.n	d8b82 <__hexnan+0x132>
   d8b34:	3501      	adds	r5, #1
   d8b36:	2d08      	cmp	r5, #8
   d8b38:	f10b 0b01 	add.w	fp, fp, #1
   d8b3c:	dd06      	ble.n	d8b4c <__hexnan+0xfc>
   d8b3e:	4544      	cmp	r4, r8
   d8b40:	d9c3      	bls.n	d8aca <__hexnan+0x7a>
   d8b42:	2300      	movs	r3, #0
   d8b44:	f844 3c04 	str.w	r3, [r4, #-4]
   d8b48:	2501      	movs	r5, #1
   d8b4a:	3c04      	subs	r4, #4
   d8b4c:	6822      	ldr	r2, [r4, #0]
   d8b4e:	f000 000f 	and.w	r0, r0, #15
   d8b52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d8b56:	6022      	str	r2, [r4, #0]
   d8b58:	e7b7      	b.n	d8aca <__hexnan+0x7a>
   d8b5a:	2508      	movs	r5, #8
   d8b5c:	e7b5      	b.n	d8aca <__hexnan+0x7a>
   d8b5e:	9b01      	ldr	r3, [sp, #4]
   d8b60:	2b00      	cmp	r3, #0
   d8b62:	d0df      	beq.n	d8b24 <__hexnan+0xd4>
   d8b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8b68:	f1c3 0320 	rsb	r3, r3, #32
   d8b6c:	fa22 f303 	lsr.w	r3, r2, r3
   d8b70:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d8b74:	401a      	ands	r2, r3
   d8b76:	f846 2c04 	str.w	r2, [r6, #-4]
   d8b7a:	e7d3      	b.n	d8b24 <__hexnan+0xd4>
   d8b7c:	3f04      	subs	r7, #4
   d8b7e:	e7d1      	b.n	d8b24 <__hexnan+0xd4>
   d8b80:	2004      	movs	r0, #4
   d8b82:	b007      	add	sp, #28
   d8b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8b88 <__ascii_mbtowc>:
   d8b88:	b082      	sub	sp, #8
   d8b8a:	b901      	cbnz	r1, d8b8e <__ascii_mbtowc+0x6>
   d8b8c:	a901      	add	r1, sp, #4
   d8b8e:	b142      	cbz	r2, d8ba2 <__ascii_mbtowc+0x1a>
   d8b90:	b14b      	cbz	r3, d8ba6 <__ascii_mbtowc+0x1e>
   d8b92:	7813      	ldrb	r3, [r2, #0]
   d8b94:	600b      	str	r3, [r1, #0]
   d8b96:	7812      	ldrb	r2, [r2, #0]
   d8b98:	1e10      	subs	r0, r2, #0
   d8b9a:	bf18      	it	ne
   d8b9c:	2001      	movne	r0, #1
   d8b9e:	b002      	add	sp, #8
   d8ba0:	4770      	bx	lr
   d8ba2:	4610      	mov	r0, r2
   d8ba4:	e7fb      	b.n	d8b9e <__ascii_mbtowc+0x16>
   d8ba6:	f06f 0001 	mvn.w	r0, #1
   d8baa:	e7f8      	b.n	d8b9e <__ascii_mbtowc+0x16>

000d8bac <_Balloc>:
   d8bac:	b570      	push	{r4, r5, r6, lr}
   d8bae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d8bb0:	4604      	mov	r4, r0
   d8bb2:	460d      	mov	r5, r1
   d8bb4:	b93e      	cbnz	r6, d8bc6 <_Balloc+0x1a>
   d8bb6:	2010      	movs	r0, #16
   d8bb8:	f7fc fb42 	bl	d5240 <malloc>
   d8bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d8bc0:	6260      	str	r0, [r4, #36]	; 0x24
   d8bc2:	6006      	str	r6, [r0, #0]
   d8bc4:	60c6      	str	r6, [r0, #12]
   d8bc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d8bc8:	68f3      	ldr	r3, [r6, #12]
   d8bca:	b183      	cbz	r3, d8bee <_Balloc+0x42>
   d8bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8bce:	68db      	ldr	r3, [r3, #12]
   d8bd0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d8bd4:	b9b8      	cbnz	r0, d8c06 <_Balloc+0x5a>
   d8bd6:	2101      	movs	r1, #1
   d8bd8:	fa01 f605 	lsl.w	r6, r1, r5
   d8bdc:	1d72      	adds	r2, r6, #5
   d8bde:	0092      	lsls	r2, r2, #2
   d8be0:	4620      	mov	r0, r4
   d8be2:	f7fe fdc3 	bl	d776c <_calloc_r>
   d8be6:	b160      	cbz	r0, d8c02 <_Balloc+0x56>
   d8be8:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d8bec:	e00e      	b.n	d8c0c <_Balloc+0x60>
   d8bee:	2221      	movs	r2, #33	; 0x21
   d8bf0:	2104      	movs	r1, #4
   d8bf2:	4620      	mov	r0, r4
   d8bf4:	f7fe fdba 	bl	d776c <_calloc_r>
   d8bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8bfa:	60f0      	str	r0, [r6, #12]
   d8bfc:	68db      	ldr	r3, [r3, #12]
   d8bfe:	2b00      	cmp	r3, #0
   d8c00:	d1e4      	bne.n	d8bcc <_Balloc+0x20>
   d8c02:	2000      	movs	r0, #0
   d8c04:	bd70      	pop	{r4, r5, r6, pc}
   d8c06:	6802      	ldr	r2, [r0, #0]
   d8c08:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d8c0c:	2300      	movs	r3, #0
   d8c0e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d8c12:	e7f7      	b.n	d8c04 <_Balloc+0x58>

000d8c14 <_Bfree>:
   d8c14:	b570      	push	{r4, r5, r6, lr}
   d8c16:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d8c18:	4605      	mov	r5, r0
   d8c1a:	460c      	mov	r4, r1
   d8c1c:	b93e      	cbnz	r6, d8c2e <_Bfree+0x1a>
   d8c1e:	2010      	movs	r0, #16
   d8c20:	f7fc fb0e 	bl	d5240 <malloc>
   d8c24:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d8c28:	6268      	str	r0, [r5, #36]	; 0x24
   d8c2a:	6006      	str	r6, [r0, #0]
   d8c2c:	60c6      	str	r6, [r0, #12]
   d8c2e:	b13c      	cbz	r4, d8c40 <_Bfree+0x2c>
   d8c30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d8c32:	6862      	ldr	r2, [r4, #4]
   d8c34:	68db      	ldr	r3, [r3, #12]
   d8c36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d8c3a:	6021      	str	r1, [r4, #0]
   d8c3c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d8c40:	bd70      	pop	{r4, r5, r6, pc}

000d8c42 <__multadd>:
   d8c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c46:	690e      	ldr	r6, [r1, #16]
   d8c48:	4607      	mov	r7, r0
   d8c4a:	4698      	mov	r8, r3
   d8c4c:	460c      	mov	r4, r1
   d8c4e:	f101 0014 	add.w	r0, r1, #20
   d8c52:	2300      	movs	r3, #0
   d8c54:	6805      	ldr	r5, [r0, #0]
   d8c56:	b2a9      	uxth	r1, r5
   d8c58:	fb02 8101 	mla	r1, r2, r1, r8
   d8c5c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d8c60:	0c2d      	lsrs	r5, r5, #16
   d8c62:	fb02 c505 	mla	r5, r2, r5, ip
   d8c66:	b289      	uxth	r1, r1
   d8c68:	3301      	adds	r3, #1
   d8c6a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d8c6e:	429e      	cmp	r6, r3
   d8c70:	f840 1b04 	str.w	r1, [r0], #4
   d8c74:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d8c78:	dcec      	bgt.n	d8c54 <__multadd+0x12>
   d8c7a:	f1b8 0f00 	cmp.w	r8, #0
   d8c7e:	d01b      	beq.n	d8cb8 <__multadd+0x76>
   d8c80:	68a3      	ldr	r3, [r4, #8]
   d8c82:	42b3      	cmp	r3, r6
   d8c84:	dc12      	bgt.n	d8cac <__multadd+0x6a>
   d8c86:	6861      	ldr	r1, [r4, #4]
   d8c88:	4638      	mov	r0, r7
   d8c8a:	3101      	adds	r1, #1
   d8c8c:	f7ff ff8e 	bl	d8bac <_Balloc>
   d8c90:	6922      	ldr	r2, [r4, #16]
   d8c92:	3202      	adds	r2, #2
   d8c94:	f104 010c 	add.w	r1, r4, #12
   d8c98:	4605      	mov	r5, r0
   d8c9a:	0092      	lsls	r2, r2, #2
   d8c9c:	300c      	adds	r0, #12
   d8c9e:	f7fe fd35 	bl	d770c <memcpy>
   d8ca2:	4621      	mov	r1, r4
   d8ca4:	4638      	mov	r0, r7
   d8ca6:	f7ff ffb5 	bl	d8c14 <_Bfree>
   d8caa:	462c      	mov	r4, r5
   d8cac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d8cb0:	3601      	adds	r6, #1
   d8cb2:	f8c3 8014 	str.w	r8, [r3, #20]
   d8cb6:	6126      	str	r6, [r4, #16]
   d8cb8:	4620      	mov	r0, r4
   d8cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8cbe <__s2b>:
   d8cbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8cc2:	460c      	mov	r4, r1
   d8cc4:	4615      	mov	r5, r2
   d8cc6:	461f      	mov	r7, r3
   d8cc8:	2209      	movs	r2, #9
   d8cca:	3308      	adds	r3, #8
   d8ccc:	4606      	mov	r6, r0
   d8cce:	fb93 f3f2 	sdiv	r3, r3, r2
   d8cd2:	2100      	movs	r1, #0
   d8cd4:	2201      	movs	r2, #1
   d8cd6:	429a      	cmp	r2, r3
   d8cd8:	db20      	blt.n	d8d1c <__s2b+0x5e>
   d8cda:	4630      	mov	r0, r6
   d8cdc:	f7ff ff66 	bl	d8bac <_Balloc>
   d8ce0:	9b08      	ldr	r3, [sp, #32]
   d8ce2:	6143      	str	r3, [r0, #20]
   d8ce4:	2d09      	cmp	r5, #9
   d8ce6:	f04f 0301 	mov.w	r3, #1
   d8cea:	6103      	str	r3, [r0, #16]
   d8cec:	dd19      	ble.n	d8d22 <__s2b+0x64>
   d8cee:	f104 0909 	add.w	r9, r4, #9
   d8cf2:	46c8      	mov	r8, r9
   d8cf4:	442c      	add	r4, r5
   d8cf6:	f818 3b01 	ldrb.w	r3, [r8], #1
   d8cfa:	4601      	mov	r1, r0
   d8cfc:	3b30      	subs	r3, #48	; 0x30
   d8cfe:	220a      	movs	r2, #10
   d8d00:	4630      	mov	r0, r6
   d8d02:	f7ff ff9e 	bl	d8c42 <__multadd>
   d8d06:	45a0      	cmp	r8, r4
   d8d08:	d1f5      	bne.n	d8cf6 <__s2b+0x38>
   d8d0a:	f1a5 0408 	sub.w	r4, r5, #8
   d8d0e:	444c      	add	r4, r9
   d8d10:	1b2d      	subs	r5, r5, r4
   d8d12:	1963      	adds	r3, r4, r5
   d8d14:	42bb      	cmp	r3, r7
   d8d16:	db07      	blt.n	d8d28 <__s2b+0x6a>
   d8d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8d1c:	0052      	lsls	r2, r2, #1
   d8d1e:	3101      	adds	r1, #1
   d8d20:	e7d9      	b.n	d8cd6 <__s2b+0x18>
   d8d22:	340a      	adds	r4, #10
   d8d24:	2509      	movs	r5, #9
   d8d26:	e7f3      	b.n	d8d10 <__s2b+0x52>
   d8d28:	f814 3b01 	ldrb.w	r3, [r4], #1
   d8d2c:	4601      	mov	r1, r0
   d8d2e:	3b30      	subs	r3, #48	; 0x30
   d8d30:	220a      	movs	r2, #10
   d8d32:	4630      	mov	r0, r6
   d8d34:	f7ff ff85 	bl	d8c42 <__multadd>
   d8d38:	e7eb      	b.n	d8d12 <__s2b+0x54>

000d8d3a <__hi0bits>:
   d8d3a:	0c03      	lsrs	r3, r0, #16
   d8d3c:	041b      	lsls	r3, r3, #16
   d8d3e:	b9d3      	cbnz	r3, d8d76 <__hi0bits+0x3c>
   d8d40:	0400      	lsls	r0, r0, #16
   d8d42:	2310      	movs	r3, #16
   d8d44:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d8d48:	bf04      	itt	eq
   d8d4a:	0200      	lsleq	r0, r0, #8
   d8d4c:	3308      	addeq	r3, #8
   d8d4e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d8d52:	bf04      	itt	eq
   d8d54:	0100      	lsleq	r0, r0, #4
   d8d56:	3304      	addeq	r3, #4
   d8d58:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d8d5c:	bf04      	itt	eq
   d8d5e:	0080      	lsleq	r0, r0, #2
   d8d60:	3302      	addeq	r3, #2
   d8d62:	2800      	cmp	r0, #0
   d8d64:	db05      	blt.n	d8d72 <__hi0bits+0x38>
   d8d66:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d8d6a:	f103 0301 	add.w	r3, r3, #1
   d8d6e:	bf08      	it	eq
   d8d70:	2320      	moveq	r3, #32
   d8d72:	4618      	mov	r0, r3
   d8d74:	4770      	bx	lr
   d8d76:	2300      	movs	r3, #0
   d8d78:	e7e4      	b.n	d8d44 <__hi0bits+0xa>

000d8d7a <__lo0bits>:
   d8d7a:	6803      	ldr	r3, [r0, #0]
   d8d7c:	f013 0207 	ands.w	r2, r3, #7
   d8d80:	4601      	mov	r1, r0
   d8d82:	d00b      	beq.n	d8d9c <__lo0bits+0x22>
   d8d84:	07da      	lsls	r2, r3, #31
   d8d86:	d424      	bmi.n	d8dd2 <__lo0bits+0x58>
   d8d88:	0798      	lsls	r0, r3, #30
   d8d8a:	bf49      	itett	mi
   d8d8c:	085b      	lsrmi	r3, r3, #1
   d8d8e:	089b      	lsrpl	r3, r3, #2
   d8d90:	2001      	movmi	r0, #1
   d8d92:	600b      	strmi	r3, [r1, #0]
   d8d94:	bf5c      	itt	pl
   d8d96:	600b      	strpl	r3, [r1, #0]
   d8d98:	2002      	movpl	r0, #2
   d8d9a:	4770      	bx	lr
   d8d9c:	b298      	uxth	r0, r3
   d8d9e:	b9b0      	cbnz	r0, d8dce <__lo0bits+0x54>
   d8da0:	0c1b      	lsrs	r3, r3, #16
   d8da2:	2010      	movs	r0, #16
   d8da4:	f013 0fff 	tst.w	r3, #255	; 0xff
   d8da8:	bf04      	itt	eq
   d8daa:	0a1b      	lsreq	r3, r3, #8
   d8dac:	3008      	addeq	r0, #8
   d8dae:	071a      	lsls	r2, r3, #28
   d8db0:	bf04      	itt	eq
   d8db2:	091b      	lsreq	r3, r3, #4
   d8db4:	3004      	addeq	r0, #4
   d8db6:	079a      	lsls	r2, r3, #30
   d8db8:	bf04      	itt	eq
   d8dba:	089b      	lsreq	r3, r3, #2
   d8dbc:	3002      	addeq	r0, #2
   d8dbe:	07da      	lsls	r2, r3, #31
   d8dc0:	d403      	bmi.n	d8dca <__lo0bits+0x50>
   d8dc2:	085b      	lsrs	r3, r3, #1
   d8dc4:	f100 0001 	add.w	r0, r0, #1
   d8dc8:	d005      	beq.n	d8dd6 <__lo0bits+0x5c>
   d8dca:	600b      	str	r3, [r1, #0]
   d8dcc:	4770      	bx	lr
   d8dce:	4610      	mov	r0, r2
   d8dd0:	e7e8      	b.n	d8da4 <__lo0bits+0x2a>
   d8dd2:	2000      	movs	r0, #0
   d8dd4:	4770      	bx	lr
   d8dd6:	2020      	movs	r0, #32
   d8dd8:	4770      	bx	lr

000d8dda <__i2b>:
   d8dda:	b510      	push	{r4, lr}
   d8ddc:	460c      	mov	r4, r1
   d8dde:	2101      	movs	r1, #1
   d8de0:	f7ff fee4 	bl	d8bac <_Balloc>
   d8de4:	2201      	movs	r2, #1
   d8de6:	6144      	str	r4, [r0, #20]
   d8de8:	6102      	str	r2, [r0, #16]
   d8dea:	bd10      	pop	{r4, pc}

000d8dec <__multiply>:
   d8dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8df0:	4615      	mov	r5, r2
   d8df2:	690a      	ldr	r2, [r1, #16]
   d8df4:	692b      	ldr	r3, [r5, #16]
   d8df6:	429a      	cmp	r2, r3
   d8df8:	bfb8      	it	lt
   d8dfa:	460b      	movlt	r3, r1
   d8dfc:	460c      	mov	r4, r1
   d8dfe:	bfbc      	itt	lt
   d8e00:	462c      	movlt	r4, r5
   d8e02:	461d      	movlt	r5, r3
   d8e04:	6927      	ldr	r7, [r4, #16]
   d8e06:	f8d5 9010 	ldr.w	r9, [r5, #16]
   d8e0a:	68a3      	ldr	r3, [r4, #8]
   d8e0c:	6861      	ldr	r1, [r4, #4]
   d8e0e:	eb07 0609 	add.w	r6, r7, r9
   d8e12:	42b3      	cmp	r3, r6
   d8e14:	bfb8      	it	lt
   d8e16:	3101      	addlt	r1, #1
   d8e18:	b085      	sub	sp, #20
   d8e1a:	f7ff fec7 	bl	d8bac <_Balloc>
   d8e1e:	f100 0114 	add.w	r1, r0, #20
   d8e22:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   d8e26:	460b      	mov	r3, r1
   d8e28:	2200      	movs	r2, #0
   d8e2a:	4543      	cmp	r3, r8
   d8e2c:	d31d      	bcc.n	d8e6a <__multiply+0x7e>
   d8e2e:	f104 0314 	add.w	r3, r4, #20
   d8e32:	f105 0214 	add.w	r2, r5, #20
   d8e36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d8e3a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8e3e:	9302      	str	r3, [sp, #8]
   d8e40:	1b3b      	subs	r3, r7, r4
   d8e42:	3b15      	subs	r3, #21
   d8e44:	f023 0303 	bic.w	r3, r3, #3
   d8e48:	3304      	adds	r3, #4
   d8e4a:	f104 0515 	add.w	r5, r4, #21
   d8e4e:	42af      	cmp	r7, r5
   d8e50:	bf38      	it	cc
   d8e52:	2304      	movcc	r3, #4
   d8e54:	9301      	str	r3, [sp, #4]
   d8e56:	9b02      	ldr	r3, [sp, #8]
   d8e58:	9203      	str	r2, [sp, #12]
   d8e5a:	4293      	cmp	r3, r2
   d8e5c:	d808      	bhi.n	d8e70 <__multiply+0x84>
   d8e5e:	2e00      	cmp	r6, #0
   d8e60:	dc5a      	bgt.n	d8f18 <__multiply+0x12c>
   d8e62:	6106      	str	r6, [r0, #16]
   d8e64:	b005      	add	sp, #20
   d8e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8e6a:	f843 2b04 	str.w	r2, [r3], #4
   d8e6e:	e7dc      	b.n	d8e2a <__multiply+0x3e>
   d8e70:	f8b2 a000 	ldrh.w	sl, [r2]
   d8e74:	f1ba 0f00 	cmp.w	sl, #0
   d8e78:	d024      	beq.n	d8ec4 <__multiply+0xd8>
   d8e7a:	f104 0e14 	add.w	lr, r4, #20
   d8e7e:	4689      	mov	r9, r1
   d8e80:	f04f 0c00 	mov.w	ip, #0
   d8e84:	f85e 5b04 	ldr.w	r5, [lr], #4
   d8e88:	f8d9 b000 	ldr.w	fp, [r9]
   d8e8c:	b2ab      	uxth	r3, r5
   d8e8e:	fa1f fb8b 	uxth.w	fp, fp
   d8e92:	fb0a b303 	mla	r3, sl, r3, fp
   d8e96:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   d8e9a:	f8d9 5000 	ldr.w	r5, [r9]
   d8e9e:	4463      	add	r3, ip
   d8ea0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d8ea4:	fb0a c50b 	mla	r5, sl, fp, ip
   d8ea8:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   d8eac:	b29b      	uxth	r3, r3
   d8eae:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d8eb2:	4577      	cmp	r7, lr
   d8eb4:	f849 3b04 	str.w	r3, [r9], #4
   d8eb8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d8ebc:	d8e2      	bhi.n	d8e84 <__multiply+0x98>
   d8ebe:	9b01      	ldr	r3, [sp, #4]
   d8ec0:	f841 c003 	str.w	ip, [r1, r3]
   d8ec4:	9b03      	ldr	r3, [sp, #12]
   d8ec6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   d8eca:	3204      	adds	r2, #4
   d8ecc:	f1b9 0f00 	cmp.w	r9, #0
   d8ed0:	d020      	beq.n	d8f14 <__multiply+0x128>
   d8ed2:	680b      	ldr	r3, [r1, #0]
   d8ed4:	f104 0c14 	add.w	ip, r4, #20
   d8ed8:	468e      	mov	lr, r1
   d8eda:	f04f 0a00 	mov.w	sl, #0
   d8ede:	f8bc 5000 	ldrh.w	r5, [ip]
   d8ee2:	f8be b002 	ldrh.w	fp, [lr, #2]
   d8ee6:	fb09 b505 	mla	r5, r9, r5, fp
   d8eea:	44aa      	add	sl, r5
   d8eec:	b29b      	uxth	r3, r3
   d8eee:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   d8ef2:	f84e 3b04 	str.w	r3, [lr], #4
   d8ef6:	f85c 3b04 	ldr.w	r3, [ip], #4
   d8efa:	f8be 5000 	ldrh.w	r5, [lr]
   d8efe:	0c1b      	lsrs	r3, r3, #16
   d8f00:	fb09 5303 	mla	r3, r9, r3, r5
   d8f04:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   d8f08:	4567      	cmp	r7, ip
   d8f0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   d8f0e:	d8e6      	bhi.n	d8ede <__multiply+0xf2>
   d8f10:	9d01      	ldr	r5, [sp, #4]
   d8f12:	514b      	str	r3, [r1, r5]
   d8f14:	3104      	adds	r1, #4
   d8f16:	e79e      	b.n	d8e56 <__multiply+0x6a>
   d8f18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   d8f1c:	2b00      	cmp	r3, #0
   d8f1e:	d1a0      	bne.n	d8e62 <__multiply+0x76>
   d8f20:	3e01      	subs	r6, #1
   d8f22:	e79c      	b.n	d8e5e <__multiply+0x72>

000d8f24 <__pow5mult>:
   d8f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8f28:	4615      	mov	r5, r2
   d8f2a:	f012 0203 	ands.w	r2, r2, #3
   d8f2e:	4606      	mov	r6, r0
   d8f30:	460f      	mov	r7, r1
   d8f32:	d007      	beq.n	d8f44 <__pow5mult+0x20>
   d8f34:	4c21      	ldr	r4, [pc, #132]	; (d8fbc <__pow5mult+0x98>)
   d8f36:	3a01      	subs	r2, #1
   d8f38:	2300      	movs	r3, #0
   d8f3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d8f3e:	f7ff fe80 	bl	d8c42 <__multadd>
   d8f42:	4607      	mov	r7, r0
   d8f44:	10ad      	asrs	r5, r5, #2
   d8f46:	d035      	beq.n	d8fb4 <__pow5mult+0x90>
   d8f48:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d8f4a:	b93c      	cbnz	r4, d8f5c <__pow5mult+0x38>
   d8f4c:	2010      	movs	r0, #16
   d8f4e:	f7fc f977 	bl	d5240 <malloc>
   d8f52:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d8f56:	6270      	str	r0, [r6, #36]	; 0x24
   d8f58:	6004      	str	r4, [r0, #0]
   d8f5a:	60c4      	str	r4, [r0, #12]
   d8f5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8f60:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d8f64:	b94c      	cbnz	r4, d8f7a <__pow5mult+0x56>
   d8f66:	f240 2171 	movw	r1, #625	; 0x271
   d8f6a:	4630      	mov	r0, r6
   d8f6c:	f7ff ff35 	bl	d8dda <__i2b>
   d8f70:	2300      	movs	r3, #0
   d8f72:	f8c8 0008 	str.w	r0, [r8, #8]
   d8f76:	4604      	mov	r4, r0
   d8f78:	6003      	str	r3, [r0, #0]
   d8f7a:	f04f 0900 	mov.w	r9, #0
   d8f7e:	07eb      	lsls	r3, r5, #31
   d8f80:	d50a      	bpl.n	d8f98 <__pow5mult+0x74>
   d8f82:	4639      	mov	r1, r7
   d8f84:	4622      	mov	r2, r4
   d8f86:	4630      	mov	r0, r6
   d8f88:	f7ff ff30 	bl	d8dec <__multiply>
   d8f8c:	4639      	mov	r1, r7
   d8f8e:	4680      	mov	r8, r0
   d8f90:	4630      	mov	r0, r6
   d8f92:	f7ff fe3f 	bl	d8c14 <_Bfree>
   d8f96:	4647      	mov	r7, r8
   d8f98:	106d      	asrs	r5, r5, #1
   d8f9a:	d00b      	beq.n	d8fb4 <__pow5mult+0x90>
   d8f9c:	6820      	ldr	r0, [r4, #0]
   d8f9e:	b938      	cbnz	r0, d8fb0 <__pow5mult+0x8c>
   d8fa0:	4622      	mov	r2, r4
   d8fa2:	4621      	mov	r1, r4
   d8fa4:	4630      	mov	r0, r6
   d8fa6:	f7ff ff21 	bl	d8dec <__multiply>
   d8faa:	6020      	str	r0, [r4, #0]
   d8fac:	f8c0 9000 	str.w	r9, [r0]
   d8fb0:	4604      	mov	r4, r0
   d8fb2:	e7e4      	b.n	d8f7e <__pow5mult+0x5a>
   d8fb4:	4638      	mov	r0, r7
   d8fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8fba:	bf00      	nop
   d8fbc:	000d9c70 	.word	0x000d9c70

000d8fc0 <__lshift>:
   d8fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8fc4:	460c      	mov	r4, r1
   d8fc6:	6849      	ldr	r1, [r1, #4]
   d8fc8:	6923      	ldr	r3, [r4, #16]
   d8fca:	eb03 1862 	add.w	r8, r3, r2, asr #5
   d8fce:	68a3      	ldr	r3, [r4, #8]
   d8fd0:	4607      	mov	r7, r0
   d8fd2:	4691      	mov	r9, r2
   d8fd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d8fd8:	f108 0601 	add.w	r6, r8, #1
   d8fdc:	42b3      	cmp	r3, r6
   d8fde:	db3f      	blt.n	d9060 <__lshift+0xa0>
   d8fe0:	4638      	mov	r0, r7
   d8fe2:	f7ff fde3 	bl	d8bac <_Balloc>
   d8fe6:	2300      	movs	r3, #0
   d8fe8:	4605      	mov	r5, r0
   d8fea:	f100 0114 	add.w	r1, r0, #20
   d8fee:	f100 0210 	add.w	r2, r0, #16
   d8ff2:	4618      	mov	r0, r3
   d8ff4:	4553      	cmp	r3, sl
   d8ff6:	db36      	blt.n	d9066 <__lshift+0xa6>
   d8ff8:	6920      	ldr	r0, [r4, #16]
   d8ffa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   d8ffe:	f104 0314 	add.w	r3, r4, #20
   d9002:	f019 091f 	ands.w	r9, r9, #31
   d9006:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   d900a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   d900e:	d02e      	beq.n	d906e <__lshift+0xae>
   d9010:	f1c9 0e20 	rsb	lr, r9, #32
   d9014:	468a      	mov	sl, r1
   d9016:	2200      	movs	r2, #0
   d9018:	6818      	ldr	r0, [r3, #0]
   d901a:	fa00 f009 	lsl.w	r0, r0, r9
   d901e:	4302      	orrs	r2, r0
   d9020:	f84a 2b04 	str.w	r2, [sl], #4
   d9024:	f853 2b04 	ldr.w	r2, [r3], #4
   d9028:	459c      	cmp	ip, r3
   d902a:	fa22 f20e 	lsr.w	r2, r2, lr
   d902e:	d8f3      	bhi.n	d9018 <__lshift+0x58>
   d9030:	ebac 0304 	sub.w	r3, ip, r4
   d9034:	3b15      	subs	r3, #21
   d9036:	f023 0303 	bic.w	r3, r3, #3
   d903a:	3304      	adds	r3, #4
   d903c:	f104 0015 	add.w	r0, r4, #21
   d9040:	4560      	cmp	r0, ip
   d9042:	bf88      	it	hi
   d9044:	2304      	movhi	r3, #4
   d9046:	50ca      	str	r2, [r1, r3]
   d9048:	b10a      	cbz	r2, d904e <__lshift+0x8e>
   d904a:	f108 0602 	add.w	r6, r8, #2
   d904e:	3e01      	subs	r6, #1
   d9050:	4638      	mov	r0, r7
   d9052:	612e      	str	r6, [r5, #16]
   d9054:	4621      	mov	r1, r4
   d9056:	f7ff fddd 	bl	d8c14 <_Bfree>
   d905a:	4628      	mov	r0, r5
   d905c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9060:	3101      	adds	r1, #1
   d9062:	005b      	lsls	r3, r3, #1
   d9064:	e7ba      	b.n	d8fdc <__lshift+0x1c>
   d9066:	f842 0f04 	str.w	r0, [r2, #4]!
   d906a:	3301      	adds	r3, #1
   d906c:	e7c2      	b.n	d8ff4 <__lshift+0x34>
   d906e:	3904      	subs	r1, #4
   d9070:	f853 2b04 	ldr.w	r2, [r3], #4
   d9074:	f841 2f04 	str.w	r2, [r1, #4]!
   d9078:	459c      	cmp	ip, r3
   d907a:	d8f9      	bhi.n	d9070 <__lshift+0xb0>
   d907c:	e7e7      	b.n	d904e <__lshift+0x8e>

000d907e <__mcmp>:
   d907e:	b530      	push	{r4, r5, lr}
   d9080:	6902      	ldr	r2, [r0, #16]
   d9082:	690c      	ldr	r4, [r1, #16]
   d9084:	1b12      	subs	r2, r2, r4
   d9086:	d10e      	bne.n	d90a6 <__mcmp+0x28>
   d9088:	f100 0314 	add.w	r3, r0, #20
   d908c:	3114      	adds	r1, #20
   d908e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   d9092:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   d9096:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   d909a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   d909e:	42a5      	cmp	r5, r4
   d90a0:	d003      	beq.n	d90aa <__mcmp+0x2c>
   d90a2:	d305      	bcc.n	d90b0 <__mcmp+0x32>
   d90a4:	2201      	movs	r2, #1
   d90a6:	4610      	mov	r0, r2
   d90a8:	bd30      	pop	{r4, r5, pc}
   d90aa:	4283      	cmp	r3, r0
   d90ac:	d3f3      	bcc.n	d9096 <__mcmp+0x18>
   d90ae:	e7fa      	b.n	d90a6 <__mcmp+0x28>
   d90b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d90b4:	e7f7      	b.n	d90a6 <__mcmp+0x28>

000d90b6 <__mdiff>:
   d90b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d90ba:	460c      	mov	r4, r1
   d90bc:	4606      	mov	r6, r0
   d90be:	4611      	mov	r1, r2
   d90c0:	4620      	mov	r0, r4
   d90c2:	4617      	mov	r7, r2
   d90c4:	f7ff ffdb 	bl	d907e <__mcmp>
   d90c8:	1e05      	subs	r5, r0, #0
   d90ca:	d108      	bne.n	d90de <__mdiff+0x28>
   d90cc:	4629      	mov	r1, r5
   d90ce:	4630      	mov	r0, r6
   d90d0:	f7ff fd6c 	bl	d8bac <_Balloc>
   d90d4:	2301      	movs	r3, #1
   d90d6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   d90da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d90de:	bfa4      	itt	ge
   d90e0:	463b      	movge	r3, r7
   d90e2:	4627      	movge	r7, r4
   d90e4:	4630      	mov	r0, r6
   d90e6:	6879      	ldr	r1, [r7, #4]
   d90e8:	bfa6      	itte	ge
   d90ea:	461c      	movge	r4, r3
   d90ec:	2500      	movge	r5, #0
   d90ee:	2501      	movlt	r5, #1
   d90f0:	f7ff fd5c 	bl	d8bac <_Balloc>
   d90f4:	693e      	ldr	r6, [r7, #16]
   d90f6:	60c5      	str	r5, [r0, #12]
   d90f8:	6925      	ldr	r5, [r4, #16]
   d90fa:	f107 0114 	add.w	r1, r7, #20
   d90fe:	f104 0914 	add.w	r9, r4, #20
   d9102:	f100 0e14 	add.w	lr, r0, #20
   d9106:	f107 0210 	add.w	r2, r7, #16
   d910a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   d910e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   d9112:	46f2      	mov	sl, lr
   d9114:	2700      	movs	r7, #0
   d9116:	f859 3b04 	ldr.w	r3, [r9], #4
   d911a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   d911e:	fa1f f883 	uxth.w	r8, r3
   d9122:	fa17 f78b 	uxtah	r7, r7, fp
   d9126:	0c1b      	lsrs	r3, r3, #16
   d9128:	eba7 0808 	sub.w	r8, r7, r8
   d912c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   d9130:	eb03 4328 	add.w	r3, r3, r8, asr #16
   d9134:	fa1f f888 	uxth.w	r8, r8
   d9138:	141f      	asrs	r7, r3, #16
   d913a:	454d      	cmp	r5, r9
   d913c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   d9140:	f84a 3b04 	str.w	r3, [sl], #4
   d9144:	d8e7      	bhi.n	d9116 <__mdiff+0x60>
   d9146:	1b2b      	subs	r3, r5, r4
   d9148:	3b15      	subs	r3, #21
   d914a:	f023 0303 	bic.w	r3, r3, #3
   d914e:	3304      	adds	r3, #4
   d9150:	3415      	adds	r4, #21
   d9152:	42a5      	cmp	r5, r4
   d9154:	bf38      	it	cc
   d9156:	2304      	movcc	r3, #4
   d9158:	4419      	add	r1, r3
   d915a:	4473      	add	r3, lr
   d915c:	469e      	mov	lr, r3
   d915e:	460d      	mov	r5, r1
   d9160:	4565      	cmp	r5, ip
   d9162:	d30e      	bcc.n	d9182 <__mdiff+0xcc>
   d9164:	f10c 0203 	add.w	r2, ip, #3
   d9168:	1a52      	subs	r2, r2, r1
   d916a:	f022 0203 	bic.w	r2, r2, #3
   d916e:	3903      	subs	r1, #3
   d9170:	458c      	cmp	ip, r1
   d9172:	bf38      	it	cc
   d9174:	2200      	movcc	r2, #0
   d9176:	441a      	add	r2, r3
   d9178:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   d917c:	b17b      	cbz	r3, d919e <__mdiff+0xe8>
   d917e:	6106      	str	r6, [r0, #16]
   d9180:	e7ab      	b.n	d90da <__mdiff+0x24>
   d9182:	f855 8b04 	ldr.w	r8, [r5], #4
   d9186:	fa17 f488 	uxtah	r4, r7, r8
   d918a:	1422      	asrs	r2, r4, #16
   d918c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   d9190:	b2a4      	uxth	r4, r4
   d9192:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   d9196:	f84e 4b04 	str.w	r4, [lr], #4
   d919a:	1417      	asrs	r7, r2, #16
   d919c:	e7e0      	b.n	d9160 <__mdiff+0xaa>
   d919e:	3e01      	subs	r6, #1
   d91a0:	e7ea      	b.n	d9178 <__mdiff+0xc2>
	...

000d91a4 <__ulp>:
   d91a4:	b082      	sub	sp, #8
   d91a6:	ed8d 0b00 	vstr	d0, [sp]
   d91aa:	9b01      	ldr	r3, [sp, #4]
   d91ac:	4912      	ldr	r1, [pc, #72]	; (d91f8 <__ulp+0x54>)
   d91ae:	4019      	ands	r1, r3
   d91b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   d91b4:	2900      	cmp	r1, #0
   d91b6:	dd05      	ble.n	d91c4 <__ulp+0x20>
   d91b8:	2200      	movs	r2, #0
   d91ba:	460b      	mov	r3, r1
   d91bc:	ec43 2b10 	vmov	d0, r2, r3
   d91c0:	b002      	add	sp, #8
   d91c2:	4770      	bx	lr
   d91c4:	4249      	negs	r1, r1
   d91c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   d91ca:	ea4f 5021 	mov.w	r0, r1, asr #20
   d91ce:	f04f 0200 	mov.w	r2, #0
   d91d2:	f04f 0300 	mov.w	r3, #0
   d91d6:	da04      	bge.n	d91e2 <__ulp+0x3e>
   d91d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d91dc:	fa41 f300 	asr.w	r3, r1, r0
   d91e0:	e7ec      	b.n	d91bc <__ulp+0x18>
   d91e2:	f1a0 0114 	sub.w	r1, r0, #20
   d91e6:	291e      	cmp	r1, #30
   d91e8:	bfda      	itte	le
   d91ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   d91ee:	fa20 f101 	lsrle.w	r1, r0, r1
   d91f2:	2101      	movgt	r1, #1
   d91f4:	460a      	mov	r2, r1
   d91f6:	e7e1      	b.n	d91bc <__ulp+0x18>
   d91f8:	7ff00000 	.word	0x7ff00000

000d91fc <__b2d>:
   d91fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d91fe:	6905      	ldr	r5, [r0, #16]
   d9200:	f100 0714 	add.w	r7, r0, #20
   d9204:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   d9208:	1f2e      	subs	r6, r5, #4
   d920a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d920e:	4620      	mov	r0, r4
   d9210:	f7ff fd93 	bl	d8d3a <__hi0bits>
   d9214:	f1c0 0320 	rsb	r3, r0, #32
   d9218:	280a      	cmp	r0, #10
   d921a:	f8df c07c 	ldr.w	ip, [pc, #124]	; d9298 <__b2d+0x9c>
   d921e:	600b      	str	r3, [r1, #0]
   d9220:	dc14      	bgt.n	d924c <__b2d+0x50>
   d9222:	f1c0 0e0b 	rsb	lr, r0, #11
   d9226:	fa24 f10e 	lsr.w	r1, r4, lr
   d922a:	42b7      	cmp	r7, r6
   d922c:	ea41 030c 	orr.w	r3, r1, ip
   d9230:	bf34      	ite	cc
   d9232:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9236:	2100      	movcs	r1, #0
   d9238:	3015      	adds	r0, #21
   d923a:	fa04 f000 	lsl.w	r0, r4, r0
   d923e:	fa21 f10e 	lsr.w	r1, r1, lr
   d9242:	ea40 0201 	orr.w	r2, r0, r1
   d9246:	ec43 2b10 	vmov	d0, r2, r3
   d924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d924c:	42b7      	cmp	r7, r6
   d924e:	bf3a      	itte	cc
   d9250:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9254:	f1a5 0608 	subcc.w	r6, r5, #8
   d9258:	2100      	movcs	r1, #0
   d925a:	380b      	subs	r0, #11
   d925c:	d017      	beq.n	d928e <__b2d+0x92>
   d925e:	f1c0 0c20 	rsb	ip, r0, #32
   d9262:	fa04 f500 	lsl.w	r5, r4, r0
   d9266:	42be      	cmp	r6, r7
   d9268:	fa21 f40c 	lsr.w	r4, r1, ip
   d926c:	ea45 0504 	orr.w	r5, r5, r4
   d9270:	bf8c      	ite	hi
   d9272:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   d9276:	2400      	movls	r4, #0
   d9278:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   d927c:	fa01 f000 	lsl.w	r0, r1, r0
   d9280:	fa24 f40c 	lsr.w	r4, r4, ip
   d9284:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9288:	ea40 0204 	orr.w	r2, r0, r4
   d928c:	e7db      	b.n	d9246 <__b2d+0x4a>
   d928e:	ea44 030c 	orr.w	r3, r4, ip
   d9292:	460a      	mov	r2, r1
   d9294:	e7d7      	b.n	d9246 <__b2d+0x4a>
   d9296:	bf00      	nop
   d9298:	3ff00000 	.word	0x3ff00000

000d929c <__d2b>:
   d929c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d92a0:	4689      	mov	r9, r1
   d92a2:	2101      	movs	r1, #1
   d92a4:	ec57 6b10 	vmov	r6, r7, d0
   d92a8:	4690      	mov	r8, r2
   d92aa:	f7ff fc7f 	bl	d8bac <_Balloc>
   d92ae:	f3c7 550a 	ubfx	r5, r7, #20, #11
   d92b2:	4604      	mov	r4, r0
   d92b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   d92b8:	bb35      	cbnz	r5, d9308 <__d2b+0x6c>
   d92ba:	2e00      	cmp	r6, #0
   d92bc:	9301      	str	r3, [sp, #4]
   d92be:	d028      	beq.n	d9312 <__d2b+0x76>
   d92c0:	4668      	mov	r0, sp
   d92c2:	9600      	str	r6, [sp, #0]
   d92c4:	f7ff fd59 	bl	d8d7a <__lo0bits>
   d92c8:	9900      	ldr	r1, [sp, #0]
   d92ca:	b300      	cbz	r0, d930e <__d2b+0x72>
   d92cc:	9a01      	ldr	r2, [sp, #4]
   d92ce:	f1c0 0320 	rsb	r3, r0, #32
   d92d2:	fa02 f303 	lsl.w	r3, r2, r3
   d92d6:	430b      	orrs	r3, r1
   d92d8:	40c2      	lsrs	r2, r0
   d92da:	6163      	str	r3, [r4, #20]
   d92dc:	9201      	str	r2, [sp, #4]
   d92de:	9b01      	ldr	r3, [sp, #4]
   d92e0:	61a3      	str	r3, [r4, #24]
   d92e2:	2b00      	cmp	r3, #0
   d92e4:	bf14      	ite	ne
   d92e6:	2202      	movne	r2, #2
   d92e8:	2201      	moveq	r2, #1
   d92ea:	6122      	str	r2, [r4, #16]
   d92ec:	b1d5      	cbz	r5, d9324 <__d2b+0x88>
   d92ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   d92f2:	4405      	add	r5, r0
   d92f4:	f8c9 5000 	str.w	r5, [r9]
   d92f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d92fc:	f8c8 0000 	str.w	r0, [r8]
   d9300:	4620      	mov	r0, r4
   d9302:	b003      	add	sp, #12
   d9304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d930c:	e7d5      	b.n	d92ba <__d2b+0x1e>
   d930e:	6161      	str	r1, [r4, #20]
   d9310:	e7e5      	b.n	d92de <__d2b+0x42>
   d9312:	a801      	add	r0, sp, #4
   d9314:	f7ff fd31 	bl	d8d7a <__lo0bits>
   d9318:	9b01      	ldr	r3, [sp, #4]
   d931a:	6163      	str	r3, [r4, #20]
   d931c:	2201      	movs	r2, #1
   d931e:	6122      	str	r2, [r4, #16]
   d9320:	3020      	adds	r0, #32
   d9322:	e7e3      	b.n	d92ec <__d2b+0x50>
   d9324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   d9328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d932c:	f8c9 0000 	str.w	r0, [r9]
   d9330:	6918      	ldr	r0, [r3, #16]
   d9332:	f7ff fd02 	bl	d8d3a <__hi0bits>
   d9336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   d933a:	e7df      	b.n	d92fc <__d2b+0x60>

000d933c <__ratio>:
   d933c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9340:	4688      	mov	r8, r1
   d9342:	4669      	mov	r1, sp
   d9344:	4681      	mov	r9, r0
   d9346:	f7ff ff59 	bl	d91fc <__b2d>
   d934a:	a901      	add	r1, sp, #4
   d934c:	4640      	mov	r0, r8
   d934e:	ec55 4b10 	vmov	r4, r5, d0
   d9352:	f7ff ff53 	bl	d91fc <__b2d>
   d9356:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d935a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d935e:	eba3 0c02 	sub.w	ip, r3, r2
   d9362:	e9dd 3200 	ldrd	r3, r2, [sp]
   d9366:	1a9b      	subs	r3, r3, r2
   d9368:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   d936c:	ec51 0b10 	vmov	r0, r1, d0
   d9370:	2b00      	cmp	r3, #0
   d9372:	bfd6      	itet	le
   d9374:	460a      	movle	r2, r1
   d9376:	462a      	movgt	r2, r5
   d9378:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   d937c:	468b      	mov	fp, r1
   d937e:	462f      	mov	r7, r5
   d9380:	bfd4      	ite	le
   d9382:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   d9386:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   d938a:	4620      	mov	r0, r4
   d938c:	ee10 2a10 	vmov	r2, s0
   d9390:	465b      	mov	r3, fp
   d9392:	4639      	mov	r1, r7
   d9394:	f7fd fe2a 	bl	d6fec <__aeabi_ddiv>
   d9398:	ec41 0b10 	vmov	d0, r0, r1
   d939c:	b003      	add	sp, #12
   d939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d93a2 <__copybits>:
   d93a2:	3901      	subs	r1, #1
   d93a4:	b570      	push	{r4, r5, r6, lr}
   d93a6:	1149      	asrs	r1, r1, #5
   d93a8:	6914      	ldr	r4, [r2, #16]
   d93aa:	3101      	adds	r1, #1
   d93ac:	f102 0314 	add.w	r3, r2, #20
   d93b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d93b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d93b8:	1f05      	subs	r5, r0, #4
   d93ba:	42a3      	cmp	r3, r4
   d93bc:	d30c      	bcc.n	d93d8 <__copybits+0x36>
   d93be:	1aa3      	subs	r3, r4, r2
   d93c0:	3b11      	subs	r3, #17
   d93c2:	f023 0303 	bic.w	r3, r3, #3
   d93c6:	3211      	adds	r2, #17
   d93c8:	42a2      	cmp	r2, r4
   d93ca:	bf88      	it	hi
   d93cc:	2300      	movhi	r3, #0
   d93ce:	4418      	add	r0, r3
   d93d0:	2300      	movs	r3, #0
   d93d2:	4288      	cmp	r0, r1
   d93d4:	d305      	bcc.n	d93e2 <__copybits+0x40>
   d93d6:	bd70      	pop	{r4, r5, r6, pc}
   d93d8:	f853 6b04 	ldr.w	r6, [r3], #4
   d93dc:	f845 6f04 	str.w	r6, [r5, #4]!
   d93e0:	e7eb      	b.n	d93ba <__copybits+0x18>
   d93e2:	f840 3b04 	str.w	r3, [r0], #4
   d93e6:	e7f4      	b.n	d93d2 <__copybits+0x30>

000d93e8 <__any_on>:
   d93e8:	f100 0214 	add.w	r2, r0, #20
   d93ec:	6900      	ldr	r0, [r0, #16]
   d93ee:	114b      	asrs	r3, r1, #5
   d93f0:	4298      	cmp	r0, r3
   d93f2:	b510      	push	{r4, lr}
   d93f4:	db11      	blt.n	d941a <__any_on+0x32>
   d93f6:	dd0a      	ble.n	d940e <__any_on+0x26>
   d93f8:	f011 011f 	ands.w	r1, r1, #31
   d93fc:	d007      	beq.n	d940e <__any_on+0x26>
   d93fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d9402:	fa24 f001 	lsr.w	r0, r4, r1
   d9406:	fa00 f101 	lsl.w	r1, r0, r1
   d940a:	428c      	cmp	r4, r1
   d940c:	d10b      	bne.n	d9426 <__any_on+0x3e>
   d940e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d9412:	4293      	cmp	r3, r2
   d9414:	d803      	bhi.n	d941e <__any_on+0x36>
   d9416:	2000      	movs	r0, #0
   d9418:	bd10      	pop	{r4, pc}
   d941a:	4603      	mov	r3, r0
   d941c:	e7f7      	b.n	d940e <__any_on+0x26>
   d941e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d9422:	2900      	cmp	r1, #0
   d9424:	d0f5      	beq.n	d9412 <__any_on+0x2a>
   d9426:	2001      	movs	r0, #1
   d9428:	e7f6      	b.n	d9418 <__any_on+0x30>

000d942a <__ascii_wctomb>:
   d942a:	b149      	cbz	r1, d9440 <__ascii_wctomb+0x16>
   d942c:	2aff      	cmp	r2, #255	; 0xff
   d942e:	bf85      	ittet	hi
   d9430:	238a      	movhi	r3, #138	; 0x8a
   d9432:	6003      	strhi	r3, [r0, #0]
   d9434:	700a      	strbls	r2, [r1, #0]
   d9436:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   d943a:	bf98      	it	ls
   d943c:	2001      	movls	r0, #1
   d943e:	4770      	bx	lr
   d9440:	4608      	mov	r0, r1
   d9442:	4770      	bx	lr

000d9444 <__aeabi_d2lz>:
   d9444:	b538      	push	{r3, r4, r5, lr}
   d9446:	2200      	movs	r2, #0
   d9448:	2300      	movs	r3, #0
   d944a:	4604      	mov	r4, r0
   d944c:	460d      	mov	r5, r1
   d944e:	f7fd ff15 	bl	d727c <__aeabi_dcmplt>
   d9452:	b928      	cbnz	r0, d9460 <__aeabi_d2lz+0x1c>
   d9454:	4620      	mov	r0, r4
   d9456:	4629      	mov	r1, r5
   d9458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d945c:	f7fd bfbe 	b.w	d73dc <__aeabi_d2ulz>
   d9460:	4620      	mov	r0, r4
   d9462:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d9466:	f7fd ffb9 	bl	d73dc <__aeabi_d2ulz>
   d946a:	4240      	negs	r0, r0
   d946c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9470:	bd38      	pop	{r3, r4, r5, pc}
   d9472:	bf00      	nop

000d9474 <dynalib_user>:
   d9474:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9484:	0000 0000 4844 3154 2031 6574 7473 5000     ....DHT11 test.P
   d9494:	7261 6974 6c63 0065 6557 7461 6568 0072     article.Weather.
   d94a4:	7453 7461 6f69 006e 472f 7465 6557 7461     Station./GetWeat
   d94b4:	6568 4672 726f 6365 7361 2f74 4900 646e     herForecast/.Ind
   d94c4:	6f6f 2072 6554 706d 203a 4900 646e 6f6f     oor Temp: .Indoo
   d94d4:	2072 7548 646d 203a 2500 4f00 6474 6f6f     r Humd: .%.Otdoo
   d94e4:	2072 6554 706d 203a 4f00 6474 6f6f 2072     r Temp: .Otdoor 
   d94f4:	7548 646d 203a 4700 7465 6557 7461 6568     Humd: .GetWeathe
   d9504:	4672 726f 6365 7361 0074 6146 6c69 6465     rForecast.Failed
   d9514:	7420 206f 6572 6461 6620 6f72 206d 4844      to read from DH
   d9524:	2054 6573 736e 726f 7400 6d65 4670 6800     T sensor.tempF.h
   d9534:	6d75 6469 7300 6275 6373 6972 7470 6f69     umid.subscriptio
   d9544:	486e 6e61 6c64 7265 2520 0073 6574 706d     nHandler %s.temp
   d9554:	6800 6d75                                    .hum.

000d9559 <_ZL9BasicFont>:
	...
   d9561:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d9571:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d9581:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d9591:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d95a1:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d95b1:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d95c1:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d95d1:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d95e1:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d95f1:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d9601:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d9611:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d9621:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d9631:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d9641:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d9651:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d9661:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d9671:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d9681:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d9691:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d96a1:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d96b1:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d96c1:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d96d1:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d96e1:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d96f1:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d9701:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d9711:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d9721:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d9731:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d9741:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d9751:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d9761:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d9771:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d9781:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d9791:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d97a1:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d97b1:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d97c1:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d97d1:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d97e1:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d97f1:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d9801:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d9811:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d9821:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d9831:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d9841:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d9851:	0200 0505 0002 0000 0000                     ...........

000d985c <_ZTVN5spark13CellularClassE>:
	...
   d9864:	539b 000d 5391 000d 5387 000d 533d 000d     .S...S...S..=S..
   d9874:	537b 000d 536f 000d 602d 000d 6035 000d     {S..oS..-`..5`..
   d9884:	5363 000d 535b 000d 5351 000d 5347 000d     cS..[S..QS..GS..
   d9894:	6065 000d                                   e`..

000d9898 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d98a0:	53d5 000d 53db 000d 5419 000d 53e9 000d     .S...S...T...S..
   d98b0:	53d7 000d                                   .S..

000d98b4 <_ZTVN5spark13EthernetClassE>:
	...
   d98bc:	596b 000d 5961 000d 5957 000d 594d 000d     kY..aY..WY..MY..
   d98cc:	5941 000d 5935 000d 602d 000d 6035 000d     AY..5Y..-`..5`..
   d98dc:	5929 000d 5921 000d 5917 000d 590d 000d     )Y..!Y...Y...Y..
   d98ec:	6065 000d                                   e`..

000d98f0 <_ZTV7TwoWire>:
	...
   d98f8:	5989 000d 59d3 000d 59ab 000d 598b 000d     .Y...Y...Y...Y..
   d9908:	59b3 000d 59bb 000d 59c3 000d 59cb 000d     .Y...Y...Y...Y..

000d9918 <_ZTV9IPAddress>:
	...
   d9920:	5a45 000d 5a35 000d 5a37 000d               EZ..5Z..7Z..

000d992c <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9934:	5b4f 000d 5b55 000d 5b6b 000d 5b63 000d     O[..U[..k[..c[..
   d9944:	5b51 000d 7061 0070                         Q[..app.

000d994c <_ZTVN5spark12NetworkClassE>:
	...
   d9954:	5fed 000d 5ff7 000d 6001 000d 600b 000d     ._..._...`...`..
   d9964:	6015 000d 6021 000d 602d 000d 6035 000d     .`..!`..-`..5`..
   d9974:	603d 000d 6049 000d 6051 000d 605b 000d     =`..I`..Q`..[`..
   d9984:	6065 000d 5925 252d 2d6d 6425 2554 3a48     e`..%Y-%m-%dT%H:
   d9994:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d99a4 <_ZTV11USARTSerial>:
	...
   d99ac:	64f9 000d 6565 000d 653d 000d 6159 000d     .d..ee..=e..Ya..
   d99bc:	650d 000d 6529 000d 651b 000d 6537 000d     .e..)e...e..7e..
   d99cc:	64fb 000d 64ff 000d                         .d...d..

000d99d4 <_ZTV9USBSerial>:
	...
   d99dc:	65f9 000d 6661 000d 6637 000d 6159 000d     .e..af..7f..Ya..
   d99ec:	6629 000d 65fb 000d 660b 000d 665b 000d     )f...e...f..[f..
   d99fc:	661b 000d 65f5 000d                         .f...e..

000d9a04 <_ZSt7nothrow>:
   d9a04:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000d9a14 <fpi.7566>:
   d9a14:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d9a24:	0000 0000                                   ....

000d9a28 <fpinan.7602>:
   d9a28:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000d9a40 <tinytens>:
   d9a40:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d9a50:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d9a60:	6f43 64ac 0628 1168                         Co.d(.h.

000d9a68 <_ctype_>:
   d9a68:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9a78:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9a88:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9a98:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9aa8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9ab8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9ac8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9ad8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9ae8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   d9b68:	2e00 0000                                   ....

000d9b6c <_C_numeric_locale>:
   d9b6c:	9b69 000d 94dc 000d e47c 2003 0043 4f50     i.......|.. C.PO
   d9b7c:	4953 0058                                   SIX.

000d9b80 <__mprec_bigtens>:
   d9b80:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d9b90:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d9ba0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d9ba8 <__mprec_tens>:
   d9ba8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d9bb8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d9bc8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d9bd8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d9be8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9bf8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9c08:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d9c18:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9c28:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d9c38:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d9c48:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d9c58:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d9c68:	9db4 79d9 7843 44ea                         ...yCx.D

000d9c70 <p05.7490>:
   d9c70:	0005 0000 0019 0000 007d 0000               ........}...

000d9c7c <link_const_variable_data_end>:
   d9c7c:	000d456d 	.word	0x000d456d
   d9c80:	000d5315 	.word	0x000d5315
   d9c84:	000d53a5 	.word	0x000d53a5
   d9c88:	000d5975 	.word	0x000d5975
   d9c8c:	000d5fdd 	.word	0x000d5fdd
   d9c90:	000d6145 	.word	0x000d6145
   d9c94:	000d6225 	.word	0x000d6225
   d9c98:	000d64a9 	.word	0x000d64a9
   d9c9c:	000d64e5 	.word	0x000d64e5
