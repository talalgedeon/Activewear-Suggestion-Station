
/Users/talalagedeon/Desktop/particlePDP/shortproject/target/3.0.0/boron/shortproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003984  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d79a0  000d79a0  000079a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d79a8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e584  000d79ac  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  2003e5ec  2003e5ec  0002e5ec  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d7a14  000d7a14  00027a14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d7a3c  000d7a3c  00027a3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001afb33  00000000  00000000  00027a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00019fc8  00000000  00000000  001d7573  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003a94c  00000000  00000000  001f153b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002e50  00000000  00000000  0022be87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009b60  00000000  00000000  0022ecd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b33f  00000000  00000000  00238837  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00043fef  00000000  00000000  00273b76  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012c306  00000000  00000000  002b7b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000084b4  00000000  00000000  003e3e6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f96f 	bl	d7310 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f991 	bl	d7360 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e584 	.word	0x2003e584
   d4048:	000d79ac 	.word	0x000d79ac
   d404c:	2003e5ec 	.word	0x2003e5ec
   d4050:	2003e5ec 	.word	0x2003e5ec
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 fa49 	bl	d64f4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7978 	.word	0x000d7978
   d407c:	000d799c 	.word	0x000d799c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b818 	b.w	d40b4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8f1 	bl	d426c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b9f3 	b.w	d6478 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bfcd 	b.w	d5030 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bfcb 	b.w	d5030 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bfd1 	b.w	d5040 <free>

000d409e <_ZdaPv>:
   d409e:	f000 bfcf 	b.w	d5040 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
ChainableLED leds (RX, TX, 1);

void updateDisplay(int temp, int humidity);


void setup() {
   d40b4:	b510      	push	{r4, lr}
   d40b6:	b08a      	sub	sp, #40	; 0x28
  Serial.begin(9600);
   d40b8:	f002 f956 	bl	d6368 <_Z16_fetch_usbserialv>
   d40bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c0:	f002 f946 	bl	d6350 <_ZN9USBSerial5beginEl>
  Serial.println("DHT11 test");
   d40c4:	f002 f950 	bl	d6368 <_Z16_fetch_usbserialv>
   d40c8:	4927      	ldr	r1, [pc, #156]	; (d4168 <setup+0xb4>)
  
  dht.begin();
  leds.init();

  Wire.begin();
  SeeedOled.init();
   d40ca:	4c28      	ldr	r4, [pc, #160]	; (d416c <setup+0xb8>)
  Serial.println("DHT11 test");
   d40cc:	f001 fed7 	bl	d5e7e <_ZN5Print7printlnEPKc>
  dht.begin();
   d40d0:	4827      	ldr	r0, [pc, #156]	; (d4170 <setup+0xbc>)
   d40d2:	f000 f9ad 	bl	d4430 <_ZN3DHT5beginEv>
  leds.init();
   d40d6:	4827      	ldr	r0, [pc, #156]	; (d4174 <setup+0xc0>)
   d40d8:	f000 fc8e 	bl	d49f8 <_ZN12ChainableLED4initEv>
  Wire.begin();
   d40dc:	f002 fabc 	bl	d6658 <_Z19__fetch_global_Wirev>
   d40e0:	f001 fb90 	bl	d5804 <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   d40e4:	4620      	mov	r0, r4
   d40e6:	f000 fcbd 	bl	d4a64 <_ZN9SeeedOLED4initEv>

  SeeedOled.clearDisplay();
   d40ea:	4620      	mov	r0, r4
   d40ec:	f000 fd1c 	bl	d4b28 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d40f0:	4620      	mov	r0, r4
   d40f2:	f000 fd7e 	bl	d4bf2 <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d40f6:	4620      	mov	r0, r4
   d40f8:	f000 fcc6 	bl	d4a88 <_ZN9SeeedOLED11setPageModeEv>

  SeeedOled.setTextXY(2, 0);
   d40fc:	2200      	movs	r2, #0
   d40fe:	4620      	mov	r0, r4
   d4100:	2102      	movs	r1, #2
   d4102:	f000 fccc 	bl	d4a9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Particle");
   d4106:	4620      	mov	r0, r4
   d4108:	491b      	ldr	r1, [pc, #108]	; (d4178 <setup+0xc4>)
   d410a:	f000 fd2e 	bl	d4b6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d410e:	2200      	movs	r2, #0
   d4110:	4620      	mov	r0, r4
   d4112:	2103      	movs	r1, #3
   d4114:	f000 fcc3 	bl	d4a9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Weather");
   d4118:	4620      	mov	r0, r4
   d411a:	4918      	ldr	r1, [pc, #96]	; (d417c <setup+0xc8>)
   d411c:	f000 fd25 	bl	d4b6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4120:	2200      	movs	r2, #0
   d4122:	4620      	mov	r0, r4
   d4124:	2104      	movs	r1, #4
   d4126:	f000 fcba 	bl	d4a9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Station");
   d412a:	4915      	ldr	r1, [pc, #84]	; (d4180 <setup+0xcc>)
   d412c:	4620      	mov	r0, r4
   d412e:	f000 fd1c 	bl	d4b6a <_ZN9SeeedOLED9putStringEPKc>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4132:	a802      	add	r0, sp, #8
   d4134:	f000 fefc 	bl	d4f30 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4138:	a902      	add	r1, sp, #8
   d413a:	a806      	add	r0, sp, #24
   d413c:	f001 ff9e 	bl	d607c <_ZN6StringC1ERKS_>

  Particle.subscribe(System.deviceID() + "/GetWeatherForecast/", setCurrentWeather, MY_DEVICES);
   d4140:	4910      	ldr	r1, [pc, #64]	; (d4184 <setup+0xd0>)
   d4142:	a806      	add	r0, sp, #24
   d4144:	f001 ffe8 	bl	d6118 <_ZplRK15StringSumHelperPKc>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4148:	2300      	movs	r3, #0
   d414a:	e9cd 3300 	strd	r3, r3, [sp]
   d414e:	490e      	ldr	r1, [pc, #56]	; (d4188 <setup+0xd4>)
   d4150:	6800      	ldr	r0, [r0, #0]
   d4152:	461a      	mov	r2, r3
   d4154:	f000 fefc 	bl	d4f50 <spark_subscribe>
class StringSumHelper : public String
   d4158:	a806      	add	r0, sp, #24
   d415a:	f001 ff35 	bl	d5fc8 <_ZN6StringD1Ev>
   d415e:	a802      	add	r0, sp, #8
   d4160:	f001 ff32 	bl	d5fc8 <_ZN6StringD1Ev>
}
   d4164:	b00a      	add	sp, #40	; 0x28
   d4166:	bd10      	pop	{r4, pc}
   d4168:	000d7448 	.word	0x000d7448
   d416c:	2003e618 	.word	0x2003e618
   d4170:	2003e5f4 	.word	0x2003e5f4
   d4174:	2003e608 	.word	0x2003e608
   d4178:	000d7453 	.word	0x000d7453
   d417c:	000d745c 	.word	0x000d745c
   d4180:	000d7464 	.word	0x000d7464
   d4184:	000d746c 	.word	0x000d746c
   d4188:	000d4225 	.word	0x000d4225

000d418c <_Z13updateDisplayii>:
  Particle.publish("humid", String (humidity));

}

void updateDisplay (int temp, int humidity)
{
   d418c:	b570      	push	{r4, r5, r6, lr}
  SeeedOled.clearDisplay(), 
   d418e:	4c15      	ldr	r4, [pc, #84]	; (d41e4 <_Z13updateDisplayii+0x58>)
{
   d4190:	4606      	mov	r6, r0
  SeeedOled.clearDisplay(), 
   d4192:	4620      	mov	r0, r4
{
   d4194:	460d      	mov	r5, r1
  SeeedOled.clearDisplay(), 
   d4196:	f000 fcc7 	bl	d4b28 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setTextXY(1, 0);
   d419a:	2200      	movs	r2, #0
   d419c:	4620      	mov	r0, r4
   d419e:	2101      	movs	r1, #1
   d41a0:	f000 fc7d 	bl	d4a9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Indoor Temp: ");
   d41a4:	4620      	mov	r0, r4
   d41a6:	4910      	ldr	r1, [pc, #64]	; (d41e8 <_Z13updateDisplayii+0x5c>)
   d41a8:	f000 fcdf 	bl	d4b6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(temp);
   d41ac:	4631      	mov	r1, r6
   d41ae:	4620      	mov	r0, r4
   d41b0:	f000 fce8 	bl	d4b84 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("F");
   d41b4:	4620      	mov	r0, r4
   d41b6:	490d      	ldr	r1, [pc, #52]	; (d41ec <_Z13updateDisplayii+0x60>)
   d41b8:	f000 fcd7 	bl	d4b6a <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(2, 0);
   d41bc:	2200      	movs	r2, #0
   d41be:	4620      	mov	r0, r4
   d41c0:	2102      	movs	r1, #2
   d41c2:	f000 fc6c 	bl	d4a9e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Indoor Humd: ");
   d41c6:	4620      	mov	r0, r4
   d41c8:	4909      	ldr	r1, [pc, #36]	; (d41f0 <_Z13updateDisplayii+0x64>)
   d41ca:	f000 fcce 	bl	d4b6a <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidity);
   d41ce:	4629      	mov	r1, r5
   d41d0:	4620      	mov	r0, r4
   d41d2:	f000 fcd7 	bl	d4b84 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
   d41d6:	4620      	mov	r0, r4
   d41d8:	4906      	ldr	r1, [pc, #24]	; (d41f4 <_Z13updateDisplayii+0x68>)
  // SeeedOled.setTextXY(3, 0);
  // SeeedOled.putString("Outdoor temp: ");
  // SeeedOled.putNumber(humidity);
  // SeeedOled.putString("C");

   d41da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SeeedOled.putString("%");
   d41de:	f000 bcc4 	b.w	d4b6a <_ZN9SeeedOLED9putStringEPKc>
   d41e2:	bf00      	nop
   d41e4:	2003e618 	.word	0x2003e618
   d41e8:	000d7481 	.word	0x000d7481
   d41ec:	000d74c2 	.word	0x000d74c2
   d41f0:	000d748f 	.word	0x000d748f
   d41f4:	000d749d 	.word	0x000d749d

000d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d41f8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d41fa:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d41fc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d41fe:	b17c      	cbz	r4, d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4200:	6863      	ldr	r3, [r4, #4]
   d4202:	3b01      	subs	r3, #1
   d4204:	6063      	str	r3, [r4, #4]
   d4206:	b95b      	cbnz	r3, d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4208:	6823      	ldr	r3, [r4, #0]
   d420a:	4620      	mov	r0, r4
   d420c:	689b      	ldr	r3, [r3, #8]
   d420e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4210:	68a3      	ldr	r3, [r4, #8]
   d4212:	3b01      	subs	r3, #1
   d4214:	60a3      	str	r3, [r4, #8]
   d4216:	b91b      	cbnz	r3, d4220 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4218:	6823      	ldr	r3, [r4, #0]
   d421a:	4620      	mov	r0, r4
   d421c:	68db      	ldr	r3, [r3, #12]
   d421e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4220:	4628      	mov	r0, r5
   d4222:	bd38      	pop	{r3, r4, r5, pc}

000d4224 <_Z17setCurrentWeatherPKcS0_>:
void setCurrentWeather(const char *event, const char *data) {
   d4224:	b500      	push	{lr}
   d4226:	b08f      	sub	sp, #60	; 0x3c
inline bool spark::JSONValue::isValid() const {
    return type() != JSON_TYPE_INVALID;
}

inline spark::JSONValue spark::JSONValue::parseCopy(const char *json) {
    return parseCopy(json, strlen(json));
   d4228:	4608      	mov	r0, r1
   d422a:	9101      	str	r1, [sp, #4]
   d422c:	f003 f8f9 	bl	d7422 <strlen>
   d4230:	9901      	ldr	r1, [sp, #4]
   d4232:	4602      	mov	r2, r0
   d4234:	a805      	add	r0, sp, #20
   d4236:	f001 fcd7 	bl	d5be8 <_ZN5spark9JSONValue9parseCopyEPKcj>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d423a:	9b05      	ldr	r3, [sp, #20]
   d423c:	9303      	str	r3, [sp, #12]
      : _M_pi(__r._M_pi)
   d423e:	9b06      	ldr	r3, [sp, #24]
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
   d4240:	9907      	ldr	r1, [sp, #28]
   d4242:	9304      	str	r3, [sp, #16]
	if (_M_pi != 0)
   d4244:	b113      	cbz	r3, d424c <_Z17setCurrentWeatherPKcS0_+0x28>
    { ++_M_use_count; }
   d4246:	685a      	ldr	r2, [r3, #4]
   d4248:	3201      	adds	r2, #1
   d424a:	605a      	str	r2, [r3, #4]
   d424c:	aa03      	add	r2, sp, #12
   d424e:	a808      	add	r0, sp, #32
   d4250:	f001 fc9d 	bl	d5b8e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4254:	a804      	add	r0, sp, #16
   d4256:	f7ff ffcf 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d425a:	a809      	add	r0, sp, #36	; 0x24
   d425c:	f7ff ffcc 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4260:	a806      	add	r0, sp, #24
   d4262:	f7ff ffc9 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4266:	b00f      	add	sp, #60	; 0x3c
   d4268:	f85d fb04 	ldr.w	pc, [sp], #4

000d426c <loop>:
void loop() {
   d426c:	b510      	push	{r4, lr}
   d426e:	ed2d 8b04 	vpush	{d8-d9}
  delay(50000);
   d4272:	f24c 3050 	movw	r0, #50000	; 0xc350
void loop() {
   d4276:	b088      	sub	sp, #32
  delay(50000);
   d4278:	f000 ff0a 	bl	d5090 <delay>
  float humidity = dht.getHumidity();
   d427c:	4837      	ldr	r0, [pc, #220]	; (d435c <loop+0xf0>)
   d427e:	f000 fb07 	bl	d4890 <_ZN3DHT11getHumidityEv>
  float temp = dht.getTempFarenheit(); 
   d4282:	4836      	ldr	r0, [pc, #216]	; (d435c <loop+0xf0>)
  float humidity = dht.getHumidity();
   d4284:	eef0 8a40 	vmov.f32	s17, s0
  float temp = dht.getTempFarenheit(); 
   d4288:	f000 fac4 	bl	d4814 <_ZN3DHT16getTempFarenheitEv>
  if (isnan(humidity) || isnan(temp)){
   d428c:	eef4 8a68 	vcmp.f32	s17, s17
   d4290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float temp = dht.getTempFarenheit(); 
   d4294:	eeb0 8a40 	vmov.f32	s16, s0
  if (isnan(humidity) || isnan(temp)){
   d4298:	d604      	bvs.n	d42a4 <loop+0x38>
   d429a:	eeb4 0a40 	vcmp.f32	s0, s0
   d429e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42a2:	d708      	bvc.n	d42b6 <loop+0x4a>
    Serial.println("Failed to read from DHT sensor");
   d42a4:	f002 f860 	bl	d6368 <_Z16_fetch_usbserialv>
   d42a8:	492d      	ldr	r1, [pc, #180]	; (d4360 <loop+0xf4>)
   d42aa:	f001 fde8 	bl	d5e7e <_ZN5Print7printlnEPKc>
}
   d42ae:	b008      	add	sp, #32
   d42b0:	ecbd 8b04 	vpop	{d8-d9}
   d42b4:	bd10      	pop	{r4, pc}
  if (temp > 75.0){
   d42b6:	eddf 7a2b 	vldr	s15, [pc, #172]	; d4364 <loop+0xf8>
   d42ba:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d42be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42c2:	eeb0 9a67 	vmov.f32	s18, s15
   d42c6:	dd06      	ble.n	d42d6 <loop+0x6a>
  leds.setColorRGB(0,255,0,0);
   d42c8:	2300      	movs	r3, #0
   d42ca:	4827      	ldr	r0, [pc, #156]	; (d4368 <loop+0xfc>)
   d42cc:	9300      	str	r3, [sp, #0]
   d42ce:	22ff      	movs	r2, #255	; 0xff
   d42d0:	4619      	mov	r1, r3
   d42d2:	f000 fb49 	bl	d4968 <_ZN12ChainableLED11setColorRGBEhhhh>
  if (temp < 75.0){
   d42d6:	eeb4 8ac9 	vcmpe.f32	s16, s18
   d42da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42de:	d507      	bpl.n	d42f0 <loop+0x84>
    leds.setColorRGB(0,0,0,255);
   d42e0:	23ff      	movs	r3, #255	; 0xff
   d42e2:	9300      	str	r3, [sp, #0]
   d42e4:	2300      	movs	r3, #0
   d42e6:	4820      	ldr	r0, [pc, #128]	; (d4368 <loop+0xfc>)
   d42e8:	461a      	mov	r2, r3
   d42ea:	4619      	mov	r1, r3
   d42ec:	f000 fb3c 	bl	d4968 <_ZN12ChainableLED11setColorRGBEhhhh>
  updateDisplay(temp, humidity);
   d42f0:	eefd 7ae8 	vcvt.s32.f32	s15, s17
   d42f4:	4c1d      	ldr	r4, [pc, #116]	; (d436c <loop+0x100>)
   d42f6:	ee17 1a90 	vmov	r1, s15
   d42fa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d42fe:	ee17 0a90 	vmov	r0, s15
   d4302:	f7ff ff43 	bl	d418c <_Z13updateDisplayii>
  Particle.publish("tempF",String (temp));
   d4306:	eeb0 0a48 	vmov.f32	s0, s16
   d430a:	2106      	movs	r1, #6
   d430c:	a804      	add	r0, sp, #16
   d430e:	f001 fed2 	bl	d60b6 <_ZN6StringC1Efi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4312:	7823      	ldrb	r3, [r4, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4314:	9a04      	ldr	r2, [sp, #16]
   d4316:	4916      	ldr	r1, [pc, #88]	; (d4370 <loop+0x104>)
   d4318:	f88d 3000 	strb.w	r3, [sp]
   d431c:	a802      	add	r0, sp, #8
   d431e:	233c      	movs	r3, #60	; 0x3c
   d4320:	f001 f87e 	bl	d5420 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4324:	a803      	add	r0, sp, #12
   d4326:	f7ff ff67 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d432a:	a804      	add	r0, sp, #16
   d432c:	f001 fe4c 	bl	d5fc8 <_ZN6StringD1Ev>
  Particle.publish("humid", String (humidity));
   d4330:	eeb0 0a68 	vmov.f32	s0, s17
   d4334:	2106      	movs	r1, #6
   d4336:	a804      	add	r0, sp, #16
   d4338:	f001 febd 	bl	d60b6 <_ZN6StringC1Efi>
   d433c:	7823      	ldrb	r3, [r4, #0]
   d433e:	9a04      	ldr	r2, [sp, #16]
   d4340:	490c      	ldr	r1, [pc, #48]	; (d4374 <loop+0x108>)
   d4342:	f88d 3000 	strb.w	r3, [sp]
   d4346:	a802      	add	r0, sp, #8
   d4348:	233c      	movs	r3, #60	; 0x3c
   d434a:	f001 f869 	bl	d5420 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d434e:	a803      	add	r0, sp, #12
   d4350:	f7ff ff52 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4354:	a804      	add	r0, sp, #16
   d4356:	f001 fe37 	bl	d5fc8 <_ZN6StringD1Ev>
   d435a:	e7a8      	b.n	d42ae <loop+0x42>
   d435c:	2003e5f4 	.word	0x2003e5f4
   d4360:	000d749f 	.word	0x000d749f
   d4364:	42960000 	.word	0x42960000
   d4368:	2003e608 	.word	0x2003e608
   d436c:	2003e5f0 	.word	0x2003e5f0
   d4370:	000d74be 	.word	0x000d74be
   d4374:	000d74c4 	.word	0x000d74c4

000d4378 <_GLOBAL__sub_I_dht>:
   d4378:	b510      	push	{r4, lr}
        val_(val) {
   d437a:	4b0b      	ldr	r3, [pc, #44]	; (d43a8 <_GLOBAL__sub_I_dht+0x30>)
ChainableLED leds (RX, TX, 1);
   d437c:	4c0b      	ldr	r4, [pc, #44]	; (d43ac <_GLOBAL__sub_I_dht+0x34>)
DHT dht(DHTPIN, DHTTYPE);
   d437e:	480c      	ldr	r0, [pc, #48]	; (d43b0 <_GLOBAL__sub_I_dht+0x38>)
   d4380:	2200      	movs	r2, #0
   d4382:	701a      	strb	r2, [r3, #0]
   d4384:	2113      	movs	r1, #19
   d4386:	2306      	movs	r3, #6
   d4388:	220b      	movs	r2, #11
   d438a:	f000 f84a 	bl	d4422 <_ZN3DHTC1Ehhh>
ChainableLED leds (RX, TX, 1);
   d438e:	2209      	movs	r2, #9
   d4390:	210a      	movs	r1, #10
   d4392:	4620      	mov	r0, r4
   d4394:	2301      	movs	r3, #1
   d4396:	f000 fa7d 	bl	d4894 <_ZN12ChainableLEDC1Ehhh>
   d439a:	4620      	mov	r0, r4
   d439c:	4a05      	ldr	r2, [pc, #20]	; (d43b4 <_GLOBAL__sub_I_dht+0x3c>)
   d439e:	4906      	ldr	r1, [pc, #24]	; (d43b8 <_GLOBAL__sub_I_dht+0x40>)
   d43a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
ChainableLED leds (RX, TX, 1);
   d43a4:	f002 b980 	b.w	d66a8 <__aeabi_atexit>
   d43a8:	2003e5f0 	.word	0x2003e5f0
   d43ac:	2003e608 	.word	0x2003e608
   d43b0:	2003e5f4 	.word	0x2003e5f4
   d43b4:	2003e5ec 	.word	0x2003e5ec
   d43b8:	000d48af 	.word	0x000d48af

000d43bc <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d43bc:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d43be:	6803      	ldr	r3, [r0, #0]
   d43c0:	2b2f      	cmp	r3, #47	; 0x2f
{
   d43c2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d43c4:	d904      	bls.n	d43d0 <nrf_gpio_pin_port_decode+0x14>
   d43c6:	4a07      	ldr	r2, [pc, #28]	; (d43e4 <nrf_gpio_pin_port_decode+0x28>)
   d43c8:	2100      	movs	r1, #0
   d43ca:	200a      	movs	r0, #10
   d43cc:	f000 fd5c 	bl	d4e88 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d43d0:	6823      	ldr	r3, [r4, #0]
   d43d2:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d43d4:	bf83      	ittte	hi
   d43d6:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d43da:	4803      	ldrhi	r0, [pc, #12]	; (d43e8 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d43dc:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d43de:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d43e2:	bd10      	pop	{r4, pc}
   d43e4:	000d4c29 	.word	0x000d4c29
   d43e8:	50000300 	.word	0x50000300

000d43ec <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d43ec:	b507      	push	{r0, r1, r2, lr}
   d43ee:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d43f0:	a801      	add	r0, sp, #4
   d43f2:	f7ff ffe3 	bl	d43bc <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d43f6:	9a01      	ldr	r2, [sp, #4]
   d43f8:	2301      	movs	r3, #1
   d43fa:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d43fc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4400:	b003      	add	sp, #12
   d4402:	f85d fb04 	ldr.w	pc, [sp], #4

000d4406 <nrf_gpio_pin_read>:
{
   d4406:	b507      	push	{r0, r1, r2, lr}
   d4408:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d440a:	a801      	add	r0, sp, #4
   d440c:	f7ff ffd6 	bl	d43bc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4410:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4412:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4416:	40d8      	lsrs	r0, r3
}
   d4418:	f000 0001 	and.w	r0, r0, #1
   d441c:	b003      	add	sp, #12
   d441e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4422 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4422:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4424:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4426:	2301      	movs	r3, #1
	_pin = pin;
   d4428:	7181      	strb	r1, [r0, #6]
	_type = type;
   d442a:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d442c:	7403      	strb	r3, [r0, #16]
}
   d442e:	bd10      	pop	{r4, pc}

000d4430 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4434:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4436:	4c1e      	ldr	r4, [pc, #120]	; (d44b0 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4438:	7980      	ldrb	r0, [r0, #6]
   d443a:	f8df 8078 	ldr.w	r8, [pc, #120]	; d44b4 <_ZN3DHT5beginEv+0x84>
   d443e:	2100      	movs	r1, #0
   d4440:	f002 f8c8 	bl	d65d4 <pinMode>
	pinSetFast(_pin);
   d4444:	79ae      	ldrb	r6, [r5, #6]
   d4446:	7823      	ldrb	r3, [r4, #0]
   d4448:	f3bf 8f5b 	dmb	ish
   d444c:	f013 0f01 	tst.w	r3, #1
   d4450:	d10a      	bne.n	d4468 <_ZN3DHT5beginEv+0x38>
   d4452:	4620      	mov	r0, r4
   d4454:	f7ff fe25 	bl	d40a2 <__cxa_guard_acquire>
   d4458:	b130      	cbz	r0, d4468 <_ZN3DHT5beginEv+0x38>
   d445a:	f000 fbf5 	bl	d4c48 <HAL_Pin_Map>
   d445e:	f8c8 0000 	str.w	r0, [r8]
   d4462:	4620      	mov	r0, r4
   d4464:	f7ff fe22 	bl	d40ac <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4468:	f8d8 3000 	ldr.w	r3, [r8]
   d446c:	0136      	lsls	r6, r6, #4
   d446e:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4470:	7823      	ldrb	r3, [r4, #0]
   d4472:	f3bf 8f5b 	dmb	ish
   d4476:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4478:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d447c:	d40a      	bmi.n	d4494 <_ZN3DHT5beginEv+0x64>
   d447e:	480c      	ldr	r0, [pc, #48]	; (d44b0 <_ZN3DHT5beginEv+0x80>)
   d4480:	f7ff fe0f 	bl	d40a2 <__cxa_guard_acquire>
   d4484:	b130      	cbz	r0, d4494 <_ZN3DHT5beginEv+0x64>
   d4486:	f000 fbdf 	bl	d4c48 <HAL_Pin_Map>
   d448a:	f8c8 0000 	str.w	r0, [r8]
   d448e:	4808      	ldr	r0, [pc, #32]	; (d44b0 <_ZN3DHT5beginEv+0x80>)
   d4490:	f7ff fe0c 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4494:	f8d8 3000 	ldr.w	r3, [r8]
   d4498:	4433      	add	r3, r6
   d449a:	785b      	ldrb	r3, [r3, #1]
   d449c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d44a0:	ea43 0007 	orr.w	r0, r3, r7
   d44a4:	f7ff ffa2 	bl	d43ec <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d44a8:	2300      	movs	r3, #0
   d44aa:	60eb      	str	r3, [r5, #12]
}
   d44ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d44b0:	2003e610 	.word	0x2003e610
   d44b4:	2003e614 	.word	0x2003e614

000d44b8 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d44b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d44bc:	4604      	mov	r4, r0
   d44be:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44c0:	f000 fbba 	bl	d4c38 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d44c4:	68e3      	ldr	r3, [r4, #12]
   d44c6:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d44c8:	bf84      	itt	hi
   d44ca:	2300      	movhi	r3, #0
   d44cc:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d44ce:	7c23      	ldrb	r3, [r4, #16]
   d44d0:	b92b      	cbnz	r3, d44de <_ZN3DHT4readEv+0x26>
   d44d2:	68e3      	ldr	r3, [r4, #12]
   d44d4:	1ac0      	subs	r0, r0, r3
   d44d6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d44da:	f0c0 8160 	bcc.w	d479e <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d44de:	2500      	movs	r5, #0
   d44e0:	7425      	strb	r5, [r4, #16]
   d44e2:	f000 fba9 	bl	d4c38 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44e6:	4eb0      	ldr	r6, [pc, #704]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d44e8:	6025      	str	r5, [r4, #0]
   d44ea:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d44ec:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d44ee:	79a7      	ldrb	r7, [r4, #6]
   d44f0:	7833      	ldrb	r3, [r6, #0]
   d44f2:	4dae      	ldr	r5, [pc, #696]	; (d47ac <_ZN3DHT4readEv+0x2f4>)
   d44f4:	f3bf 8f5b 	dmb	ish
   d44f8:	f013 0f01 	tst.w	r3, #1
   d44fc:	d109      	bne.n	d4512 <_ZN3DHT4readEv+0x5a>
   d44fe:	4630      	mov	r0, r6
   d4500:	f7ff fdcf 	bl	d40a2 <__cxa_guard_acquire>
   d4504:	b128      	cbz	r0, d4512 <_ZN3DHT4readEv+0x5a>
   d4506:	f000 fb9f 	bl	d4c48 <HAL_Pin_Map>
   d450a:	6028      	str	r0, [r5, #0]
   d450c:	4630      	mov	r0, r6
   d450e:	f7ff fdcd 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4512:	682b      	ldr	r3, [r5, #0]
   d4514:	013f      	lsls	r7, r7, #4
   d4516:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d451a:	7833      	ldrb	r3, [r6, #0]
   d451c:	f3bf 8f5b 	dmb	ish
   d4520:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4522:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4526:	d409      	bmi.n	d453c <_ZN3DHT4readEv+0x84>
   d4528:	489f      	ldr	r0, [pc, #636]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d452a:	f7ff fdba 	bl	d40a2 <__cxa_guard_acquire>
   d452e:	b128      	cbz	r0, d453c <_ZN3DHT4readEv+0x84>
   d4530:	f000 fb8a 	bl	d4c48 <HAL_Pin_Map>
   d4534:	6028      	str	r0, [r5, #0]
   d4536:	489c      	ldr	r0, [pc, #624]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d4538:	f7ff fdb8 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d453c:	682b      	ldr	r3, [r5, #0]
   d453e:	441f      	add	r7, r3
   d4540:	7878      	ldrb	r0, [r7, #1]
   d4542:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4546:	ea40 0008 	orr.w	r0, r0, r8
   d454a:	f7ff ff4f 	bl	d43ec <nrf_gpio_pin_set>
	delay(250);
   d454e:	20fa      	movs	r0, #250	; 0xfa
   d4550:	f000 fd9e 	bl	d5090 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4554:	79a0      	ldrb	r0, [r4, #6]
   d4556:	2101      	movs	r1, #1
   d4558:	f002 f83c 	bl	d65d4 <pinMode>
	pinResetFast(_pin);
   d455c:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d455e:	7833      	ldrb	r3, [r6, #0]
   d4560:	f3bf 8f5b 	dmb	ish
   d4564:	07da      	lsls	r2, r3, #31
   d4566:	d409      	bmi.n	d457c <_ZN3DHT4readEv+0xc4>
   d4568:	488f      	ldr	r0, [pc, #572]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d456a:	f7ff fd9a 	bl	d40a2 <__cxa_guard_acquire>
   d456e:	b128      	cbz	r0, d457c <_ZN3DHT4readEv+0xc4>
   d4570:	f000 fb6a 	bl	d4c48 <HAL_Pin_Map>
   d4574:	6028      	str	r0, [r5, #0]
   d4576:	488c      	ldr	r0, [pc, #560]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d4578:	f7ff fd98 	bl	d40ac <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d457c:	682b      	ldr	r3, [r5, #0]
   d457e:	013f      	lsls	r7, r7, #4
   d4580:	5ddb      	ldrb	r3, [r3, r7]
   d4582:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4586:	7833      	ldrb	r3, [r6, #0]
   d4588:	f3bf 8f5b 	dmb	ish
   d458c:	07db      	lsls	r3, r3, #31
   d458e:	d409      	bmi.n	d45a4 <_ZN3DHT4readEv+0xec>
   d4590:	4885      	ldr	r0, [pc, #532]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d4592:	f7ff fd86 	bl	d40a2 <__cxa_guard_acquire>
   d4596:	b128      	cbz	r0, d45a4 <_ZN3DHT4readEv+0xec>
   d4598:	f000 fb56 	bl	d4c48 <HAL_Pin_Map>
   d459c:	6028      	str	r0, [r5, #0]
   d459e:	4882      	ldr	r0, [pc, #520]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d45a0:	f7ff fd84 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45a4:	682b      	ldr	r3, [r5, #0]
   d45a6:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45a8:	a803      	add	r0, sp, #12
   d45aa:	787b      	ldrb	r3, [r7, #1]
   d45ac:	f003 031f 	and.w	r3, r3, #31
   d45b0:	ea43 0308 	orr.w	r3, r3, r8
   d45b4:	9303      	str	r3, [sp, #12]
   d45b6:	f7ff ff01 	bl	d43bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d45ba:	9a03      	ldr	r2, [sp, #12]
   d45bc:	2301      	movs	r3, #1
   d45be:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d45c0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d45c4:	2014      	movs	r0, #20
   d45c6:	f000 fd63 	bl	d5090 <delay>
	noInterrupts();
   d45ca:	f001 f92f 	bl	d582c <_Z12noInterruptsv>
	pinSetFast(_pin);
   d45ce:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45d0:	7833      	ldrb	r3, [r6, #0]
   d45d2:	f3bf 8f5b 	dmb	ish
   d45d6:	07d8      	lsls	r0, r3, #31
   d45d8:	d409      	bmi.n	d45ee <_ZN3DHT4readEv+0x136>
   d45da:	4873      	ldr	r0, [pc, #460]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d45dc:	f7ff fd61 	bl	d40a2 <__cxa_guard_acquire>
   d45e0:	b128      	cbz	r0, d45ee <_ZN3DHT4readEv+0x136>
   d45e2:	f000 fb31 	bl	d4c48 <HAL_Pin_Map>
   d45e6:	6028      	str	r0, [r5, #0]
   d45e8:	486f      	ldr	r0, [pc, #444]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d45ea:	f7ff fd5f 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45ee:	682b      	ldr	r3, [r5, #0]
   d45f0:	013f      	lsls	r7, r7, #4
   d45f2:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45f6:	7833      	ldrb	r3, [r6, #0]
   d45f8:	f3bf 8f5b 	dmb	ish
   d45fc:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45fe:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4602:	d409      	bmi.n	d4618 <_ZN3DHT4readEv+0x160>
   d4604:	4868      	ldr	r0, [pc, #416]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d4606:	f7ff fd4c 	bl	d40a2 <__cxa_guard_acquire>
   d460a:	b128      	cbz	r0, d4618 <_ZN3DHT4readEv+0x160>
   d460c:	f000 fb1c 	bl	d4c48 <HAL_Pin_Map>
   d4610:	6028      	str	r0, [r5, #0]
   d4612:	4865      	ldr	r0, [pc, #404]	; (d47a8 <_ZN3DHT4readEv+0x2f0>)
   d4614:	f7ff fd4a 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4618:	682b      	ldr	r3, [r5, #0]
   d461a:	441f      	add	r7, r3
   d461c:	7878      	ldrb	r0, [r7, #1]
   d461e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4622:	ea40 0008 	orr.w	r0, r0, r8
   d4626:	f7ff fee1 	bl	d43ec <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d462a:	2028      	movs	r0, #40	; 0x28
   d462c:	f000 fafc 	bl	d4c28 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4630:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4632:	f8df 8174 	ldr.w	r8, [pc, #372]	; d47a8 <_ZN3DHT4readEv+0x2f0>
   d4636:	2100      	movs	r1, #0
   d4638:	f001 ffcc 	bl	d65d4 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d463c:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d463e:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4640:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4642:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4644:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4648:	f894 b006 	ldrb.w	fp, [r4, #6]
   d464c:	7833      	ldrb	r3, [r6, #0]
   d464e:	f3bf 8f5b 	dmb	ish
   d4652:	07da      	lsls	r2, r3, #31
   d4654:	d409      	bmi.n	d466a <_ZN3DHT4readEv+0x1b2>
   d4656:	4640      	mov	r0, r8
   d4658:	f7ff fd23 	bl	d40a2 <__cxa_guard_acquire>
   d465c:	b128      	cbz	r0, d466a <_ZN3DHT4readEv+0x1b2>
   d465e:	f000 faf3 	bl	d4c48 <HAL_Pin_Map>
   d4662:	6028      	str	r0, [r5, #0]
   d4664:	4640      	mov	r0, r8
   d4666:	f7ff fd21 	bl	d40ac <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d466a:	682b      	ldr	r3, [r5, #0]
   d466c:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4670:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4674:	015b      	lsls	r3, r3, #5
   d4676:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4678:	7833      	ldrb	r3, [r6, #0]
   d467a:	f3bf 8f5b 	dmb	ish
   d467e:	07db      	lsls	r3, r3, #31
   d4680:	d409      	bmi.n	d4696 <_ZN3DHT4readEv+0x1de>
   d4682:	4640      	mov	r0, r8
   d4684:	f7ff fd0d 	bl	d40a2 <__cxa_guard_acquire>
   d4688:	b128      	cbz	r0, d4696 <_ZN3DHT4readEv+0x1de>
   d468a:	f000 fadd 	bl	d4c48 <HAL_Pin_Map>
   d468e:	6028      	str	r0, [r5, #0]
   d4690:	4640      	mov	r0, r8
   d4692:	f7ff fd0b 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4696:	682b      	ldr	r3, [r5, #0]
   d4698:	445b      	add	r3, fp
   d469a:	f893 b001 	ldrb.w	fp, [r3, #1]
   d469e:	9b01      	ldr	r3, [sp, #4]
   d46a0:	f00b 0b1f 	and.w	fp, fp, #31
   d46a4:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d46a8:	4658      	mov	r0, fp
   d46aa:	f7ff feac 	bl	d4406 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d46ae:	4658      	mov	r0, fp
   d46b0:	f7ff fea9 	bl	d4406 <nrf_gpio_pin_read>
   d46b4:	9b00      	ldr	r3, [sp, #0]
   d46b6:	4283      	cmp	r3, r0
   d46b8:	d109      	bne.n	d46ce <_ZN3DHT4readEv+0x216>
			counter++;
   d46ba:	f109 0901 	add.w	r9, r9, #1
   d46be:	fa5f f989 	uxtb.w	r9, r9
   d46c2:	2001      	movs	r0, #1
   d46c4:	f000 fab0 	bl	d4c28 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d46c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d46cc:	d1bc      	bne.n	d4648 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d46ce:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46d2:	7833      	ldrb	r3, [r6, #0]
   d46d4:	f3bf 8f5b 	dmb	ish
   d46d8:	07d8      	lsls	r0, r3, #31
   d46da:	d409      	bmi.n	d46f0 <_ZN3DHT4readEv+0x238>
   d46dc:	4640      	mov	r0, r8
   d46de:	f7ff fce0 	bl	d40a2 <__cxa_guard_acquire>
   d46e2:	b128      	cbz	r0, d46f0 <_ZN3DHT4readEv+0x238>
   d46e4:	f000 fab0 	bl	d4c48 <HAL_Pin_Map>
   d46e8:	6028      	str	r0, [r5, #0]
   d46ea:	4640      	mov	r0, r8
   d46ec:	f7ff fcde 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46f0:	682b      	ldr	r3, [r5, #0]
   d46f2:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d46f6:	f813 300b 	ldrb.w	r3, [r3, fp]
   d46fa:	015b      	lsls	r3, r3, #5
   d46fc:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46fe:	7833      	ldrb	r3, [r6, #0]
   d4700:	f3bf 8f5b 	dmb	ish
   d4704:	07d9      	lsls	r1, r3, #31
   d4706:	d409      	bmi.n	d471c <_ZN3DHT4readEv+0x264>
   d4708:	4640      	mov	r0, r8
   d470a:	f7ff fcca 	bl	d40a2 <__cxa_guard_acquire>
   d470e:	b128      	cbz	r0, d471c <_ZN3DHT4readEv+0x264>
   d4710:	f000 fa9a 	bl	d4c48 <HAL_Pin_Map>
   d4714:	6028      	str	r0, [r5, #0]
   d4716:	4640      	mov	r0, r8
   d4718:	f7ff fcc8 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d471c:	682b      	ldr	r3, [r5, #0]
   d471e:	445b      	add	r3, fp
   d4720:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4724:	9b00      	ldr	r3, [sp, #0]
   d4726:	f00b 0b1f 	and.w	fp, fp, #31
   d472a:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d472e:	4658      	mov	r0, fp
   d4730:	f7ff fe69 	bl	d4406 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4734:	4658      	mov	r0, fp
   d4736:	f7ff fe66 	bl	d4406 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d473a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d473e:	b2c3      	uxtb	r3, r0
   d4740:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4742:	d018      	beq.n	d4776 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4744:	2f03      	cmp	r7, #3
   d4746:	d911      	bls.n	d476c <_ZN3DHT4readEv+0x2b4>
   d4748:	07fa      	lsls	r2, r7, #31
   d474a:	d40f      	bmi.n	d476c <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d474c:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4750:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d4754:	5ca3      	ldrb	r3, [r4, r2]
   d4756:	005b      	lsls	r3, r3, #1
   d4758:	b2db      	uxtb	r3, r3
   d475a:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d475c:	7a21      	ldrb	r1, [r4, #8]
   d475e:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4760:	bf3c      	itt	cc
   d4762:	f043 0301 	orrcc.w	r3, r3, #1
   d4766:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4768:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d476c:	3701      	adds	r7, #1
   d476e:	b2ff      	uxtb	r7, r7
   d4770:	2f55      	cmp	r7, #85	; 0x55
   d4772:	f47f af67 	bne.w	d4644 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d4776:	f001 f85b 	bl	d5830 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d477a:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d477e:	d910      	bls.n	d47a2 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4780:	7863      	ldrb	r3, [r4, #1]
   d4782:	7820      	ldrb	r0, [r4, #0]
   d4784:	4418      	add	r0, r3
   d4786:	78a3      	ldrb	r3, [r4, #2]
   d4788:	4418      	add	r0, r3
   d478a:	78e3      	ldrb	r3, [r4, #3]
   d478c:	4418      	add	r0, r3
   d478e:	7923      	ldrb	r3, [r4, #4]
   d4790:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d4792:	1ac3      	subs	r3, r0, r3
   d4794:	4258      	negs	r0, r3
   d4796:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d4798:	b005      	add	sp, #20
   d479a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d479e:	2001      	movs	r0, #1
   d47a0:	e7fa      	b.n	d4798 <_ZN3DHT4readEv+0x2e0>
	return false;
   d47a2:	2000      	movs	r0, #0
   d47a4:	e7f8      	b.n	d4798 <_ZN3DHT4readEv+0x2e0>
   d47a6:	bf00      	nop
   d47a8:	2003e610 	.word	0x2003e610
   d47ac:	2003e614 	.word	0x2003e614

000d47b0 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d47b0:	b510      	push	{r4, lr}
   d47b2:	4604      	mov	r4, r0
	if (read()) {
   d47b4:	f7ff fe80 	bl	d44b8 <_ZN3DHT4readEv>
   d47b8:	b320      	cbz	r0, d4804 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d47ba:	79e3      	ldrb	r3, [r4, #7]
   d47bc:	2b0b      	cmp	r3, #11
   d47be:	d01b      	beq.n	d47f8 <_ZN3DHT15readTemperatureEv+0x48>
   d47c0:	3b15      	subs	r3, #21
   d47c2:	2b01      	cmp	r3, #1
   d47c4:	d81e      	bhi.n	d4804 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d47c6:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d47c8:	eddf 6a10 	vldr	s13, [pc, #64]	; d480c <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d47cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d47d0:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d47d4:	78e2      	ldrb	r2, [r4, #3]
   d47d6:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d47da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d47de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d47e2:	061b      	lsls	r3, r3, #24
				f += data[3];
   d47e4:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d47e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d47ec:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d47f0:	d507      	bpl.n	d4802 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d47f2:	eeb1 0a40 	vneg.f32	s0, s0
   d47f6:	e004      	b.n	d4802 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d47f8:	78a3      	ldrb	r3, [r4, #2]
   d47fa:	ee00 3a10 	vmov	s0, r3
   d47fe:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4802:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4804:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4810 <_ZN3DHT15readTemperatureEv+0x60>
   d4808:	e7fb      	b.n	d4802 <_ZN3DHT15readTemperatureEv+0x52>
   d480a:	bf00      	nop
   d480c:	43800000 	.word	0x43800000
   d4810:	7fc00000 	.word	0x7fc00000

000d4814 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d4814:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4816:	f7ff ffcb 	bl	d47b0 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d481a:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d481e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4822:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4826:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d482a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4834 <_ZN3DHT16getTempFarenheitEv+0x20>
   d482e:	ee37 0a00 	vadd.f32	s0, s14, s0
   d4832:	bd08      	pop	{r3, pc}
   d4834:	42000000 	.word	0x42000000

000d4838 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4838:	b510      	push	{r4, lr}
   d483a:	4604      	mov	r4, r0
	if (read()) {
   d483c:	f7ff fe3c 	bl	d44b8 <_ZN3DHT4readEv>
   d4840:	b1f0      	cbz	r0, d4880 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d4842:	79e3      	ldrb	r3, [r4, #7]
   d4844:	2b0b      	cmp	r3, #11
   d4846:	d015      	beq.n	d4874 <_ZN3DHT12readHumidityEv+0x3c>
   d4848:	3b15      	subs	r3, #21
   d484a:	2b01      	cmp	r3, #1
   d484c:	d818      	bhi.n	d4880 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d484e:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4850:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4888 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4854:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4858:	7863      	ldrb	r3, [r4, #1]
   d485a:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d485e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d4862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4866:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d486a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d486e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4872:	bd10      	pop	{r4, pc}
				f = data[0];
   d4874:	7823      	ldrb	r3, [r4, #0]
   d4876:	ee00 3a10 	vmov	s0, r3
   d487a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d487e:	e7f8      	b.n	d4872 <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4880:	ed9f 0a02 	vldr	s0, [pc, #8]	; d488c <_ZN3DHT12readHumidityEv+0x54>
   d4884:	e7f5      	b.n	d4872 <_ZN3DHT12readHumidityEv+0x3a>
   d4886:	bf00      	nop
   d4888:	43800000 	.word	0x43800000
   d488c:	7fc00000 	.word	0x7fc00000

000d4890 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4890:	f7ff bfd2 	b.w	d4838 <_ZN3DHT12readHumidityEv>

000d4894 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d4894:	b510      	push	{r4, lr}
   d4896:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d4898:	7001      	strb	r1, [r0, #0]
   d489a:	7042      	strb	r2, [r0, #1]
   d489c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d489e:	2101      	movs	r1, #1
   d48a0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d48a4:	f002 fd1e 	bl	d72e4 <calloc>
   d48a8:	6060      	str	r0, [r4, #4]
}
   d48aa:	4620      	mov	r0, r4
   d48ac:	bd10      	pop	{r4, pc}

000d48ae <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d48ae:	b510      	push	{r4, lr}
   d48b0:	4604      	mov	r4, r0
{
    free(_led_state);
   d48b2:	6840      	ldr	r0, [r0, #4]
   d48b4:	f000 fbc4 	bl	d5040 <free>
}
   d48b8:	4620      	mov	r0, r4
   d48ba:	bd10      	pop	{r4, pc}

000d48bc <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d48bc:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d48be:	2100      	movs	r1, #0
{
   d48c0:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d48c2:	7800      	ldrb	r0, [r0, #0]
   d48c4:	f001 fe97 	bl	d65f6 <digitalWrite>
   d48c8:	2014      	movs	r0, #20
   d48ca:	f000 f9ad 	bl	d4c28 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d48ce:	7820      	ldrb	r0, [r4, #0]
   d48d0:	2101      	movs	r1, #1
   d48d2:	f001 fe90 	bl	d65f6 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d48d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d48da:	2014      	movs	r0, #20
   d48dc:	f000 b9a4 	b.w	d4c28 <HAL_Delay_Microseconds>

000d48e0 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d48e0:	b570      	push	{r4, r5, r6, lr}
   d48e2:	4606      	mov	r6, r0
   d48e4:	460c      	mov	r4, r1
   d48e6:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d48e8:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   d48ea:	bf4c      	ite	mi
   d48ec:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d48ee:	2100      	movpl	r1, #0
   d48f0:	7870      	ldrb	r0, [r6, #1]
   d48f2:	f001 fe80 	bl	d65f6 <digitalWrite>
        clk();
   d48f6:	3d01      	subs	r5, #1
   d48f8:	4630      	mov	r0, r6
   d48fa:	f7ff ffdf 	bl	d48bc <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d48fe:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   d4900:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   d4904:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   d4906:	d1ef      	bne.n	d48e8 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   d4908:	bd70      	pop	{r4, r5, r6, pc}

000d490a <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d490a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d490c:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   d4910:	461e      	mov	r6, r3
   d4912:	460c      	mov	r4, r1
   d4914:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4916:	bf14      	ite	ne
   d4918:	21c0      	movne	r1, #192	; 0xc0
   d491a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d491c:	0673      	lsls	r3, r6, #25
   d491e:	bf58      	it	pl
   d4920:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4924:	062a      	lsls	r2, r5, #24
   d4926:	bf58      	it	pl
   d4928:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d492c:	066b      	lsls	r3, r5, #25
   d492e:	bf58      	it	pl
   d4930:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4934:	0622      	lsls	r2, r4, #24
   d4936:	bf58      	it	pl
   d4938:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d493c:	0663      	lsls	r3, r4, #25
   d493e:	bf58      	it	pl
   d4940:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d4944:	9001      	str	r0, [sp, #4]
   d4946:	f7ff ffcb 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d494a:	9801      	ldr	r0, [sp, #4]
   d494c:	4631      	mov	r1, r6
   d494e:	f7ff ffc7 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d4952:	9801      	ldr	r0, [sp, #4]
   d4954:	4629      	mov	r1, r5
   d4956:	f7ff ffc3 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d495a:	9801      	ldr	r0, [sp, #4]
   d495c:	4621      	mov	r1, r4
}
   d495e:	b002      	add	sp, #8
   d4960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   d4964:	f7ff bfbc 	b.w	d48e0 <_ZN12ChainableLED8sendByteEh>

000d4968 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d4968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d496c:	4604      	mov	r4, r0
   d496e:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d4970:	2100      	movs	r1, #0
{
   d4972:	4690      	mov	r8, r2
   d4974:	4699      	mov	r9, r3
   d4976:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   d497a:	f7ff ffb1 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d497e:	2100      	movs	r1, #0
   d4980:	4620      	mov	r0, r4
   d4982:	f7ff ffad 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4986:	2100      	movs	r1, #0
   d4988:	4620      	mov	r0, r4
   d498a:	f7ff ffa9 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d498e:	2100      	movs	r1, #0
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff ffa5 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>
   d4996:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d4998:	78a3      	ldrb	r3, [r4, #2]
   d499a:	b2f5      	uxtb	r5, r6
   d499c:	42ab      	cmp	r3, r5
   d499e:	d919      	bls.n	d49d4 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
   d49a0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   d49a4:	42af      	cmp	r7, r5
   d49a6:	f100 0201 	add.w	r2, r0, #1
   d49aa:	f100 0302 	add.w	r3, r0, #2
   d49ae:	d108      	bne.n	d49c2 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
        {
            _led_state[i*3 + _CL_RED] = red;
   d49b0:	6861      	ldr	r1, [r4, #4]
   d49b2:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   d49b6:	6861      	ldr	r1, [r4, #4]
   d49b8:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   d49bc:	6861      	ldr	r1, [r4, #4]
   d49be:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d49c2:	6861      	ldr	r1, [r4, #4]
   d49c4:	5ccb      	ldrb	r3, [r1, r3]
   d49c6:	5c8a      	ldrb	r2, [r1, r2]
   d49c8:	5c09      	ldrb	r1, [r1, r0]
   d49ca:	4620      	mov	r0, r4
   d49cc:	f7ff ff9d 	bl	d490a <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   d49d0:	3601      	adds	r6, #1
   d49d2:	e7e1      	b.n	d4998 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d49d4:	4620      	mov	r0, r4
   d49d6:	2100      	movs	r1, #0
   d49d8:	f7ff ff82 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d49dc:	4620      	mov	r0, r4
   d49de:	2100      	movs	r1, #0
   d49e0:	f7ff ff7e 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d49e4:	4620      	mov	r0, r4
   d49e6:	2100      	movs	r1, #0
   d49e8:	f7ff ff7a 	bl	d48e0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d49ec:	4620      	mov	r0, r4
   d49ee:	2100      	movs	r1, #0
}
   d49f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   d49f4:	f7ff bf74 	b.w	d48e0 <_ZN12ChainableLED8sendByteEh>

000d49f8 <_ZN12ChainableLED4initEv>:
{
   d49f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d49fa:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d49fc:	2101      	movs	r1, #1
   d49fe:	7800      	ldrb	r0, [r0, #0]
   d4a00:	f001 fde8 	bl	d65d4 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d4a04:	7860      	ldrb	r0, [r4, #1]
   d4a06:	2101      	movs	r1, #1
   d4a08:	f001 fde4 	bl	d65d4 <pinMode>
   d4a0c:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   d4a0e:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   d4a10:	78a3      	ldrb	r3, [r4, #2]
   d4a12:	b2e9      	uxtb	r1, r5
   d4a14:	428b      	cmp	r3, r1
   d4a16:	d907      	bls.n	d4a28 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   d4a18:	2300      	movs	r3, #0
   d4a1a:	9600      	str	r6, [sp, #0]
   d4a1c:	461a      	mov	r2, r3
   d4a1e:	4620      	mov	r0, r4
   d4a20:	f7ff ffa2 	bl	d4968 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   d4a24:	3501      	adds	r5, #1
   d4a26:	e7f3      	b.n	d4a10 <_ZN12ChainableLED4initEv+0x18>
}
   d4a28:	b002      	add	sp, #8
   d4a2a:	bd70      	pop	{r4, r5, r6, pc}

000d4a2c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4a2c:	6803      	ldr	r3, [r0, #0]
   d4a2e:	b2c9      	uxtb	r1, r1
   d4a30:	689b      	ldr	r3, [r3, #8]
   d4a32:	4718      	bx	r3

000d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
    delay(5);
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   d4a34:	b510      	push	{r4, lr}
   d4a36:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4a38:	f001 fe0e 	bl	d6658 <_Z19__fetch_global_Wirev>
   d4a3c:	213c      	movs	r1, #60	; 0x3c
   d4a3e:	f000 feeb 	bl	d5818 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
  Wire.write(SeeedOLED_Command_Mode);	     // Set OLED Command mode
   d4a42:	f001 fe09 	bl	d6658 <_Z19__fetch_global_Wirev>
   d4a46:	2180      	movs	r1, #128	; 0x80
   d4a48:	f7ff fff0 	bl	d4a2c <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d4a4c:	f001 fe04 	bl	d6658 <_Z19__fetch_global_Wirev>
   d4a50:	6803      	ldr	r3, [r0, #0]
   d4a52:	4621      	mov	r1, r4
   d4a54:	689b      	ldr	r3, [r3, #8]
   d4a56:	4798      	blx	r3
#else
  Wire.send(SeeedOLED_Command_Mode);	     // Set OLED Command mode
  Wire.send(command);
#endif
  Wire.endTransmission();    		     // End I2C communication
   d4a58:	f001 fdfe 	bl	d6658 <_Z19__fetch_global_Wirev>
}
   d4a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission();    		     // End I2C communication
   d4a60:	f000 bee1 	b.w	d5826 <_ZN7TwoWire15endTransmissionEv>

000d4a64 <_ZN9SeeedOLED4initEv>:
{
   d4a64:	b508      	push	{r3, lr}
    sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d4a66:	20ae      	movs	r0, #174	; 0xae
   d4a68:	f7ff ffe4 	bl	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d4a6c:	2005      	movs	r0, #5
   d4a6e:	f000 fb0f 	bl	d5090 <delay>
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d4a72:	20af      	movs	r0, #175	; 0xaf
   d4a74:	f7ff ffde 	bl	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d4a78:	2005      	movs	r0, #5
   d4a7a:	f000 fb09 	bl	d5090 <delay>
}
   d4a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
   d4a82:	20a6      	movs	r0, #166	; 0xa6
   d4a84:	f7ff bfd6 	b.w	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4a88 <_ZN9SeeedOLED11setPageModeEv>:
    sendCommand(0x20); 			//set addressing mode
    sendCommand(0x00); 			//set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d4a88:	b508      	push	{r3, lr}
    addressingMode = PAGE_MODE;
   d4a8a:	2301      	movs	r3, #1
   d4a8c:	7003      	strb	r3, [r0, #0]
    sendCommand(0x20); 			//set addressing mode
   d4a8e:	2020      	movs	r0, #32
   d4a90:	f7ff ffd0 	bl	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x02); 			//set page addressing mode
}
   d4a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(0x02); 			//set page addressing mode
   d4a98:	2002      	movs	r0, #2
   d4a9a:	f7ff bfcb 	b.w	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4a9e <_ZN9SeeedOLED9setTextXYEhh>:


void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4a9e:	b510      	push	{r4, lr}
    sendCommand(0xB0 + Row); 			//set page address
   d4aa0:	3950      	subs	r1, #80	; 0x50
{
   d4aa2:	4614      	mov	r4, r2
    sendCommand(0xB0 + Row); 			//set page address
   d4aa4:	b2c8      	uxtb	r0, r1
   d4aa6:	f7ff ffc5 	bl	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x00 + (8*Column & 0x0F)); 	//set column lower address
   d4aaa:	00e0      	lsls	r0, r4, #3
   d4aac:	f000 0008 	and.w	r0, r0, #8
   d4ab0:	f7ff ffc0 	bl	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4ab4:	f3c4 0043 	ubfx	r0, r4, #1, #4
   d4ab8:	3010      	adds	r0, #16
}
   d4aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4abe:	f7ff bfb9 	b.w	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4ac2 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
  setTextXY(0,0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d4ac2:	b510      	push	{r4, lr}
   d4ac4:	460c      	mov	r4, r1
     Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d4ac6:	f001 fdc7 	bl	d6658 <_Z19__fetch_global_Wirev>
   d4aca:	213c      	movs	r1, #60	; 0x3c
   d4acc:	f000 fea4 	bl	d5818 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
     Wire.write(SeeedOLED_Data_Mode);            // data mode
   d4ad0:	f001 fdc2 	bl	d6658 <_Z19__fetch_global_Wirev>
   d4ad4:	2140      	movs	r1, #64	; 0x40
   d4ad6:	f7ff ffa9 	bl	d4a2c <_ZN7TwoWire5writeEi>
     Wire.write(Data);
   d4ada:	f001 fdbd 	bl	d6658 <_Z19__fetch_global_Wirev>
   d4ade:	6803      	ldr	r3, [r0, #0]
   d4ae0:	4621      	mov	r1, r4
   d4ae2:	689b      	ldr	r3, [r3, #8]
   d4ae4:	4798      	blx	r3
#else
     Wire.send(SeeedOLED_Data_Mode);            // data mode
     Wire.send(Data);
#endif
     Wire.endTransmission();                    // stop I2C transmission
   d4ae6:	f001 fdb7 	bl	d6658 <_Z19__fetch_global_Wirev>
}
   d4aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     Wire.endTransmission();                    // stop I2C transmission
   d4aee:	f000 be9a 	b.w	d5826 <_ZN7TwoWire15endTransmissionEv>
	...

000d4af4 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
    if(C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d4af4:	f1a1 0320 	sub.w	r3, r1, #32
    {
    C=' '; //Space
   d4af8:	2b5f      	cmp	r3, #95	; 0x5f
   d4afa:	bf88      	it	hi
   d4afc:	2120      	movhi	r1, #32
{
   d4afe:	b570      	push	{r4, r5, r6, lr}
   d4b00:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   d4b04:	4d07      	ldr	r5, [pc, #28]	; (d4b24 <_ZN9SeeedOLED7putCharEh+0x30>)
   d4b06:	3920      	subs	r1, #32
   d4b08:	4606      	mov	r6, r0
    }
    unsigned char i=0;
    for(i=0;i<8;i++)
   d4b0a:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C=' '; //Space
   d4b0e:	2408      	movs	r4, #8
    {
       //read bytes from code memory
       sendData(pgm_read_byte(&BasicFont[C-32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d4b10:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b14:	4630      	mov	r0, r6
   d4b16:	3c01      	subs	r4, #1
   d4b18:	f7ff ffd3 	bl	d4ac2 <_ZN9SeeedOLED8sendDataEh>
    for(i=0;i<8;i++)
   d4b1c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4b20:	d1f6      	bne.n	d4b10 <_ZN9SeeedOLED7putCharEh+0x1c>
    }
}
   d4b22:	bd70      	pop	{r4, r5, r6, pc}
   d4b24:	000d74ca 	.word	0x000d74ca

000d4b28 <_ZN9SeeedOLED12clearDisplayEv>:
{
   d4b28:	b570      	push	{r4, r5, r6, lr}
   d4b2a:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d4b2c:	20ae      	movs	r0, #174	; 0xae
   d4b2e:	f7ff ff81 	bl	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   d4b32:	2600      	movs	r6, #0
    setTextXY(j,0);
   d4b34:	2200      	movs	r2, #0
   d4b36:	b2f1      	uxtb	r1, r6
   d4b38:	4628      	mov	r0, r5
   d4b3a:	f7ff ffb0 	bl	d4a9e <_ZN9SeeedOLED9setTextXYEhh>
   d4b3e:	2410      	movs	r4, #16
        putChar(' ');
   d4b40:	2120      	movs	r1, #32
   d4b42:	4628      	mov	r0, r5
   d4b44:	3c01      	subs	r4, #1
   d4b46:	f7ff ffd5 	bl	d4af4 <_ZN9SeeedOLED7putCharEh>
      for(i=0;i<16;i++)  //clear all columns
   d4b4a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4b4e:	d1f7      	bne.n	d4b40 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for(j=0;j<8;j++)
   d4b50:	3601      	adds	r6, #1
   d4b52:	2e08      	cmp	r6, #8
   d4b54:	d1ee      	bne.n	d4b34 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d4b56:	20af      	movs	r0, #175	; 0xaf
   d4b58:	f7ff ff6c 	bl	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0,0);
   d4b5c:	4622      	mov	r2, r4
   d4b5e:	4621      	mov	r1, r4
   d4b60:	4628      	mov	r0, r5
}
   d4b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0,0);
   d4b66:	f7ff bf9a 	b.w	d4a9e <_ZN9SeeedOLED9setTextXYEhh>

000d4b6a <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   d4b6a:	b570      	push	{r4, r5, r6, lr}
   d4b6c:	4606      	mov	r6, r0
   d4b6e:	460d      	mov	r5, r1
   d4b70:	2400      	movs	r4, #0
    unsigned char i=0;
    while(String[i])
   d4b72:	b2e3      	uxtb	r3, r4
   d4b74:	3401      	adds	r4, #1
   d4b76:	5ce9      	ldrb	r1, [r5, r3]
   d4b78:	b119      	cbz	r1, d4b82 <_ZN9SeeedOLED9putStringEPKc+0x18>
    {
        putChar(String[i]);
   d4b7a:	4630      	mov	r0, r6
   d4b7c:	f7ff ffba 	bl	d4af4 <_ZN9SeeedOLED7putCharEh>
    while(String[i])
   d4b80:	e7f7      	b.n	d4b72 <_ZN9SeeedOLED9putStringEPKc+0x8>
        i++;
    }
}
   d4b82:	bd70      	pop	{r4, r5, r6, pc}

000d4b84 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   d4b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b86:	b085      	sub	sp, #20
  unsigned char char_buffer[10]="";
   d4b88:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d4b8a:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10]="";
   d4b8c:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   d4b90:	4606      	mov	r6, r0
  unsigned char char_buffer[10]="";
   d4b92:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   d4b96:	da24      	bge.n	d4be2 <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f=1;
    putChar('-');
   d4b98:	212d      	movs	r1, #45	; 0x2d
   d4b9a:	f7ff ffab 	bl	d4af4 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d4b9e:	4264      	negs	r4, r4
    f=1;
   d4ba0:	2301      	movs	r3, #1
  unsigned char f = 0;
   d4ba2:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d4ba4:	200a      	movs	r0, #10
   d4ba6:	462a      	mov	r2, r5
   d4ba8:	a904      	add	r1, sp, #16
   d4baa:	440a      	add	r2, r1
   d4bac:	3501      	adds	r5, #1
   d4bae:	fbb4 f1f0 	udiv	r1, r4, r0
   d4bb2:	fb00 4411 	mls	r4, r0, r1, r4
   d4bb6:	f802 4c0c 	strb.w	r4, [r2, #-12]
   d4bba:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   d4bbc:	460c      	mov	r4, r1
   d4bbe:	2900      	cmp	r1, #0
   d4bc0:	d1f1      	bne.n	d4ba6 <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f=f+i;
   d4bc2:	442b      	add	r3, r5
   d4bc4:	b2dc      	uxtb	r4, r3
   d4bc6:	ab04      	add	r3, sp, #16
   d4bc8:	195f      	adds	r7, r3, r5
   d4bca:	3f0d      	subs	r7, #13
  for(; i > 0; i--)
   d4bcc:	b175      	cbz	r5, d4bec <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0'+ char_buffer[i - 1]);
   d4bce:	f817 1901 	ldrb.w	r1, [r7], #-1
   d4bd2:	3130      	adds	r1, #48	; 0x30
   d4bd4:	b2c9      	uxtb	r1, r1
   d4bd6:	4630      	mov	r0, r6
  for(; i > 0; i--)
   d4bd8:	3d01      	subs	r5, #1
    putChar('0'+ char_buffer[i - 1]);
   d4bda:	f7ff ff8b 	bl	d4af4 <_ZN9SeeedOLED7putCharEh>
  for(; i > 0; i--)
   d4bde:	b2ed      	uxtb	r5, r5
   d4be0:	e7f4      	b.n	d4bcc <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   d4be2:	d1de      	bne.n	d4ba2 <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   d4be4:	2130      	movs	r1, #48	; 0x30
   d4be6:	f7ff ff85 	bl	d4af4 <_ZN9SeeedOLED7putCharEh>
    return f;
   d4bea:	2401      	movs	r4, #1
  }
  return f;

}
   d4bec:	4620      	mov	r0, r4
   d4bee:	b005      	add	sp, #20
   d4bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4bf2 <_ZN9SeeedOLED16setNormalDisplayEv>:
    sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
    sendCommand(SeeedOLED_Normal_Display_Cmd);
   d4bf2:	20a6      	movs	r0, #166	; 0xa6
   d4bf4:	f7ff bf1e 	b.w	d4a34 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4bf8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <os_mutex_recursive_create+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030248 	.word	0x00030248

000d4c08 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <os_mutex_recursive_destroy+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030248 	.word	0x00030248

000d4c18 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <HAL_RNG_GetRandomNumber+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	685b      	ldr	r3, [r3, #4]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030218 	.word	0x00030218

000d4c28 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <HAL_Delay_Microseconds+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	68db      	ldr	r3, [r3, #12]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030218 	.word	0x00030218

000d4c38 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	695b      	ldr	r3, [r3, #20]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030218 	.word	0x00030218

000d4c48 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <HAL_Pin_Map+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	681b      	ldr	r3, [r3, #0]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	0003022c 	.word	0x0003022c

000d4c58 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <HAL_Pin_Mode+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	689b      	ldr	r3, [r3, #8]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	0003022c 	.word	0x0003022c

000d4c68 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <HAL_Get_Pin_Mode+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	68db      	ldr	r3, [r3, #12]
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	0003022c 	.word	0x0003022c

000d4c78 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <HAL_GPIO_Write+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	691b      	ldr	r3, [r3, #16]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	0003022c 	.word	0x0003022c

000d4c88 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <HAL_Interrupts_Enable_All+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	6a1b      	ldr	r3, [r3, #32]
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	0003022c 	.word	0x0003022c

000d4c98 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <HAL_Interrupts_Disable_All+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	0003022c 	.word	0x0003022c

000d4ca8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <hal_i2c_begin+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	68db      	ldr	r3, [r3, #12]
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030228 	.word	0x00030228

000d4cb8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <hal_i2c_begin_transmission+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	699b      	ldr	r3, [r3, #24]
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	00030228 	.word	0x00030228

000d4cc8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <hal_i2c_end_transmission+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	69db      	ldr	r3, [r3, #28]
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	00030228 	.word	0x00030228

000d4cd8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <hal_i2c_write+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	6a1b      	ldr	r3, [r3, #32]
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	00030228 	.word	0x00030228

000d4ce8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <hal_i2c_available+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	00030228 	.word	0x00030228

000d4cf8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <hal_i2c_read+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	00030228 	.word	0x00030228

000d4d08 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <hal_i2c_peek+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	00030228 	.word	0x00030228

000d4d18 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <hal_i2c_flush+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	00030228 	.word	0x00030228

000d4d28 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <hal_i2c_is_enabled+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030228 	.word	0x00030228

000d4d38 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <hal_i2c_init+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030228 	.word	0x00030228

000d4d48 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <inet_inet_ntop+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	695b      	ldr	r3, [r3, #20]
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030264 	.word	0x00030264

000d4d58 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <netdb_freeaddrinfo+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	689b      	ldr	r3, [r3, #8]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	00030268 	.word	0x00030268

000d4d68 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <netdb_getaddrinfo+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	68db      	ldr	r3, [r3, #12]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	00030268 	.word	0x00030268

000d4d78 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <hal_spi_init+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	69db      	ldr	r3, [r3, #28]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	00030230 	.word	0x00030230

000d4d88 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <hal_spi_is_enabled+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	6a1b      	ldr	r3, [r3, #32]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	00030230 	.word	0x00030230

000d4d98 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <hal_usart_init+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	681b      	ldr	r3, [r3, #0]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	0003023c 	.word	0x0003023c

000d4da8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <hal_usart_write+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	68db      	ldr	r3, [r3, #12]
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	0003023c 	.word	0x0003023c

000d4db8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <hal_usart_available+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	691b      	ldr	r3, [r3, #16]
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	0003023c 	.word	0x0003023c

000d4dc8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <hal_usart_read+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	695b      	ldr	r3, [r3, #20]
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	0003023c 	.word	0x0003023c

000d4dd8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <hal_usart_peek+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	699b      	ldr	r3, [r3, #24]
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	0003023c 	.word	0x0003023c

000d4de8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <hal_usart_flush+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	69db      	ldr	r3, [r3, #28]
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	0003023c 	.word	0x0003023c

000d4df8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <hal_usart_is_enabled+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	6a1b      	ldr	r3, [r3, #32]
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	0003023c 	.word	0x0003023c

000d4e08 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <hal_usart_available_data_for_write+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	0003023c 	.word	0x0003023c

000d4e18 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <HAL_USB_USART_Init+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	681b      	ldr	r3, [r3, #0]
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	0003024c 	.word	0x0003024c

000d4e28 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <HAL_USB_USART_Begin+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	685b      	ldr	r3, [r3, #4]
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	0003024c 	.word	0x0003024c

000d4e38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <HAL_USB_USART_Available_Data+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	691b      	ldr	r3, [r3, #16]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	0003024c 	.word	0x0003024c

000d4e48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	695b      	ldr	r3, [r3, #20]
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	0003024c 	.word	0x0003024c

000d4e58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <HAL_USB_USART_Receive_Data+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	699b      	ldr	r3, [r3, #24]
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	0003024c 	.word	0x0003024c

000d4e68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <HAL_USB_USART_Send_Data+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	69db      	ldr	r3, [r3, #28]
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	0003024c 	.word	0x0003024c

000d4e78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <HAL_USB_USART_Flush_Data+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	6a1b      	ldr	r3, [r3, #32]
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	0003024c 	.word	0x0003024c

000d4e88 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <panic_+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	00030260 	.word	0x00030260

000d4e98 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <jsmn_init+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	00030260 	.word	0x00030260

000d4ea8 <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <jsmn_parse+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	00030260 	.word	0x00030260

000d4eb8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <set_system_mode+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	685b      	ldr	r3, [r3, #4]
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	00030220 	.word	0x00030220

000d4ec8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <system_delay_ms+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	695b      	ldr	r3, [r3, #20]
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	00030220 	.word	0x00030220

000d4ed8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <application_thread_current+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	00030220 	.word	0x00030220

000d4ee8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <application_thread_invoke+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	00030220 	.word	0x00030220

000d4ef8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b03      	ldr	r3, [pc, #12]	; (d4f08 <system_ctrl_set_app_request_handler+0x10>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f02:	9301      	str	r3, [sp, #4]
   d4f04:	bd08      	pop	{r3, pc}
   d4f06:	0000      	.short	0x0000
   d4f08:	00030220 	.word	0x00030220

000d4f0c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b03      	ldr	r3, [pc, #12]	; (d4f1c <system_ctrl_set_result+0x10>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f16:	9301      	str	r3, [sp, #4]
   d4f18:	bd08      	pop	{r3, pc}
   d4f1a:	0000      	.short	0x0000
   d4f1c:	00030220 	.word	0x00030220

000d4f20 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <spark_cloud_flag_connected+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	695b      	ldr	r3, [r3, #20]
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	00030244 	.word	0x00030244

000d4f30 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <spark_deviceID+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	69db      	ldr	r3, [r3, #28]
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	00030244 	.word	0x00030244

000d4f40 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <spark_send_event+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	6a1b      	ldr	r3, [r3, #32]
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030244 	.word	0x00030244

000d4f50 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <spark_subscribe+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030244 	.word	0x00030244

000d4f60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	00030244 	.word	0x00030244

000d4f70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <network_connect+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	685b      	ldr	r3, [r3, #4]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	00030240 	.word	0x00030240

000d4f80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <network_connecting+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	689b      	ldr	r3, [r3, #8]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	00030240 	.word	0x00030240

000d4f90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <network_disconnect+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	68db      	ldr	r3, [r3, #12]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	00030240 	.word	0x00030240

000d4fa0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <network_ready+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	691b      	ldr	r3, [r3, #16]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	00030240 	.word	0x00030240

000d4fb0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <network_on+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	695b      	ldr	r3, [r3, #20]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	00030240 	.word	0x00030240

000d4fc0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <network_off+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	699b      	ldr	r3, [r3, #24]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	00030240 	.word	0x00030240

000d4fd0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <network_listen+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	69db      	ldr	r3, [r3, #28]
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	00030240 	.word	0x00030240

000d4fe0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <network_listening+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	6a1b      	ldr	r3, [r3, #32]
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030240 	.word	0x00030240

000d4ff0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <network_set_listen_timeout+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030240 	.word	0x00030240

000d5000 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <network_get_listen_timeout+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030240 	.word	0x00030240

000d5010 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <network_is_on+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030240 	.word	0x00030240

000d5020 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <network_is_off+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	00030240 	.word	0x00030240

000d5030 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <malloc+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	681b      	ldr	r3, [r3, #0]
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	0003021c 	.word	0x0003021c

000d5040 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <free+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	685b      	ldr	r3, [r3, #4]
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	0003021c 	.word	0x0003021c

000d5050 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <realloc+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	689b      	ldr	r3, [r3, #8]
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	0003021c 	.word	0x0003021c

000d5060 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <abort+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	0003021c 	.word	0x0003021c

000d5070 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <_malloc_r+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	0003021c 	.word	0x0003021c

000d5080 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <newlib_impure_ptr_callback+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	0003021c 	.word	0x0003021c

000d5090 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5090:	2100      	movs	r1, #0
   d5092:	f7ff bf19 	b.w	d4ec8 <system_delay_ms>

000d5096 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5096:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5098:	6883      	ldr	r3, [r0, #8]
   d509a:	4604      	mov	r4, r0
   d509c:	b90b      	cbnz	r3, d50a2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d509e:	f001 fb0e 	bl	d66be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50a2:	68c3      	ldr	r3, [r0, #12]
   d50a4:	4798      	blx	r3
      if (_M_manager)
   d50a6:	68a3      	ldr	r3, [r4, #8]
   d50a8:	b11b      	cbz	r3, d50b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50aa:	2203      	movs	r2, #3
   d50ac:	4621      	mov	r1, r4
   d50ae:	4620      	mov	r0, r4
   d50b0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d50b2:	4620      	mov	r0, r4
   d50b4:	2110      	movs	r1, #16
}
   d50b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d50ba:	f001 bafa 	b.w	d66b2 <_ZdlPvj>

000d50be <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d50be:	b510      	push	{r4, lr}
   d50c0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d50c2:	6800      	ldr	r0, [r0, #0]
   d50c4:	b108      	cbz	r0, d50ca <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d50c6:	f7ff fd9f 	bl	d4c08 <os_mutex_recursive_destroy>
    }
   d50ca:	4620      	mov	r0, r4
   d50cc:	bd10      	pop	{r4, pc}

000d50ce <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d50ce:	b510      	push	{r4, lr}
      if (_M_manager)
   d50d0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d50d2:	4604      	mov	r4, r0
      if (_M_manager)
   d50d4:	b113      	cbz	r3, d50dc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50d6:	2203      	movs	r2, #3
   d50d8:	4601      	mov	r1, r0
   d50da:	4798      	blx	r3
    }
   d50dc:	4620      	mov	r0, r4
   d50de:	bd10      	pop	{r4, pc}

000d50e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d50e0:	680b      	ldr	r3, [r1, #0]
   d50e2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d50e4:	b113      	cbz	r3, d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d50e6:	685a      	ldr	r2, [r3, #4]
   d50e8:	3201      	adds	r2, #1
   d50ea:	605a      	str	r2, [r3, #4]
      }
   d50ec:	4770      	bx	lr

000d50ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d50ee:	b513      	push	{r0, r1, r4, lr}
   d50f0:	460b      	mov	r3, r1
   d50f2:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50f4:	e9d0 0100 	ldrd	r0, r1, [r0]
   d50f8:	466c      	mov	r4, sp
   d50fa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d50fe:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5102:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5106:	e894 0003 	ldmia.w	r4, {r0, r1}
   d510a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d510e:	b002      	add	sp, #8
   d5110:	bd10      	pop	{r4, pc}
	...

000d5114 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5114:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5116:	4c06      	ldr	r4, [pc, #24]	; (d5130 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5118:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d511a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d511c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d511e:	f7ff fd6b 	bl	d4bf8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5122:	4620      	mov	r0, r4
   d5124:	4a03      	ldr	r2, [pc, #12]	; (d5134 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5126:	4904      	ldr	r1, [pc, #16]	; (d5138 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d512c:	f001 babc 	b.w	d66a8 <__aeabi_atexit>
   d5130:	2003e61c 	.word	0x2003e61c
   d5134:	2003e5ec 	.word	0x2003e5ec
   d5138:	000d50bf 	.word	0x000d50bf

000d513c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d513c:	2200      	movs	r2, #0
   d513e:	6840      	ldr	r0, [r0, #4]
   d5140:	4611      	mov	r1, r2
   d5142:	f7ff bf2d 	b.w	d4fa0 <network_ready>

000d5146 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5146:	2200      	movs	r2, #0
   d5148:	6840      	ldr	r0, [r0, #4]
   d514a:	4611      	mov	r1, r2
   d514c:	f7ff bf48 	b.w	d4fe0 <network_listening>

000d5150 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5150:	2200      	movs	r2, #0
   d5152:	6840      	ldr	r0, [r0, #4]
   d5154:	4611      	mov	r1, r2
   d5156:	f7ff bf53 	b.w	d5000 <network_get_listen_timeout>

000d515a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d515a:	6840      	ldr	r0, [r0, #4]
   d515c:	2200      	movs	r2, #0
   d515e:	f7ff bf47 	b.w	d4ff0 <network_set_listen_timeout>

000d5162 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5162:	6840      	ldr	r0, [r0, #4]
   d5164:	2200      	movs	r2, #0
   d5166:	f081 0101 	eor.w	r1, r1, #1
   d516a:	f7ff bf31 	b.w	d4fd0 <network_listen>

000d516e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d516e:	2300      	movs	r3, #0
   d5170:	6840      	ldr	r0, [r0, #4]
   d5172:	461a      	mov	r2, r3
   d5174:	4619      	mov	r1, r3
   d5176:	f7ff bf23 	b.w	d4fc0 <network_off>

000d517a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d517a:	2300      	movs	r3, #0
   d517c:	6840      	ldr	r0, [r0, #4]
   d517e:	461a      	mov	r2, r3
   d5180:	4619      	mov	r1, r3
   d5182:	f7ff bf15 	b.w	d4fb0 <network_on>

000d5186 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5186:	2200      	movs	r2, #0
   d5188:	6840      	ldr	r0, [r0, #4]
   d518a:	4611      	mov	r1, r2
   d518c:	f7ff bef8 	b.w	d4f80 <network_connecting>

000d5190 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5190:	6840      	ldr	r0, [r0, #4]
   d5192:	2200      	movs	r2, #0
   d5194:	2102      	movs	r1, #2
   d5196:	f7ff befb 	b.w	d4f90 <network_disconnect>

000d519a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d519a:	2300      	movs	r3, #0
   d519c:	6840      	ldr	r0, [r0, #4]
   d519e:	461a      	mov	r2, r3
   d51a0:	f7ff bee6 	b.w	d4f70 <network_connect>

000d51a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d51a4:	4b08      	ldr	r3, [pc, #32]	; (d51c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d51a6:	b510      	push	{r4, lr}
   d51a8:	2428      	movs	r4, #40	; 0x28
   d51aa:	4622      	mov	r2, r4
   d51ac:	4618      	mov	r0, r3
   d51ae:	2100      	movs	r1, #0
   d51b0:	f002 f8d6 	bl	d7360 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d51b4:	4b05      	ldr	r3, [pc, #20]	; (d51cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d51b6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d51b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d51bc:	6042      	str	r2, [r0, #4]
   d51be:	2204      	movs	r2, #4
   d51c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d51c2:	4a03      	ldr	r2, [pc, #12]	; (d51d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d51c4:	601a      	str	r2, [r3, #0]
   d51c6:	bd10      	pop	{r4, pc}
   d51c8:	2003e628 	.word	0x2003e628
   d51cc:	2003e620 	.word	0x2003e620
   d51d0:	000d77d4 	.word	0x000d77d4

000d51d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d51d4:	4770      	bx	lr

000d51d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d51d6:	2000      	movs	r0, #0
   d51d8:	4770      	bx	lr

000d51da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d51da:	b510      	push	{r4, lr}
   d51dc:	2110      	movs	r1, #16
   d51de:	4604      	mov	r4, r0
   d51e0:	f001 fa67 	bl	d66b2 <_ZdlPvj>
   d51e4:	4620      	mov	r0, r4
   d51e6:	bd10      	pop	{r4, pc}

000d51e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d51e8:	b508      	push	{r3, lr}
      { delete this; }
   d51ea:	f7ff fff6 	bl	d51da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d51ee:	bd08      	pop	{r3, pc}

000d51f0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d51f0:	b530      	push	{r4, r5, lr}
        type_(type) {
   d51f2:	2200      	movs	r2, #0
   d51f4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d51f8:	6002      	str	r2, [r0, #0]
   d51fa:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d51fc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d51fe:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5200:	680c      	ldr	r4, [r1, #0]
   d5202:	8085      	strh	r5, [r0, #4]
   d5204:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5206:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5208:	bd30      	pop	{r4, r5, pc}

000d520a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d520a:	b510      	push	{r4, lr}
   d520c:	4604      	mov	r4, r0
    free((void*)msg_);
   d520e:	6800      	ldr	r0, [r0, #0]
   d5210:	f7ff ff16 	bl	d5040 <free>
}
   d5214:	4620      	mov	r0, r4
   d5216:	bd10      	pop	{r4, pc}

000d5218 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5218:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d521a:	68c4      	ldr	r4, [r0, #12]
   d521c:	b1f4      	cbz	r4, d525c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d521e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5220:	2b02      	cmp	r3, #2
   d5222:	d103      	bne.n	d522c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5224:	f104 000c 	add.w	r0, r4, #12
   d5228:	f7ff ffef 	bl	d520a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d522c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d522e:	b135      	cbz	r5, d523e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5230:	4628      	mov	r0, r5
   d5232:	f7ff ff4c 	bl	d50ce <_ZNSt14_Function_baseD1Ev>
   d5236:	2110      	movs	r1, #16
   d5238:	4628      	mov	r0, r5
   d523a:	f001 fa3a 	bl	d66b2 <_ZdlPvj>
   d523e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5240:	b135      	cbz	r5, d5250 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5242:	4628      	mov	r0, r5
   d5244:	f7ff ff43 	bl	d50ce <_ZNSt14_Function_baseD1Ev>
   d5248:	2110      	movs	r1, #16
   d524a:	4628      	mov	r0, r5
   d524c:	f001 fa31 	bl	d66b2 <_ZdlPvj>
   d5250:	4620      	mov	r0, r4
   d5252:	2114      	movs	r1, #20
   d5254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5258:	f001 ba2b 	b.w	d66b2 <_ZdlPvj>
   d525c:	bd38      	pop	{r3, r4, r5, pc}

000d525e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d525e:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5260:	460e      	mov	r6, r1
   d5262:	4604      	mov	r4, r0
   d5264:	f856 3b04 	ldr.w	r3, [r6], #4
   d5268:	9300      	str	r3, [sp, #0]
   d526a:	460d      	mov	r5, r1
   d526c:	a801      	add	r0, sp, #4
   d526e:	4631      	mov	r1, r6
   d5270:	f7ff ff36 	bl	d50e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5274:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5276:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5278:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d527a:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d527c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d527e:	2300      	movs	r3, #0
   d5280:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5282:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5284:	f7fe ffb8 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5288:	4630      	mov	r0, r6
   d528a:	f7fe ffb5 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d528e:	4628      	mov	r0, r5
   d5290:	2108      	movs	r1, #8
   d5292:	f001 fa0e 	bl	d66b2 <_ZdlPvj>
        return p;
    }
   d5296:	4620      	mov	r0, r4
   d5298:	b002      	add	sp, #8
   d529a:	bd70      	pop	{r4, r5, r6, pc}

000d529c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d529c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d529e:	b510      	push	{r4, lr}
      if (_M_empty())
   d52a0:	b90a      	cbnz	r2, d52a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d52a2:	f001 fa0c 	bl	d66be <_ZSt25__throw_bad_function_callv>
    }
   d52a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52aa:	68c3      	ldr	r3, [r0, #12]
   d52ac:	4718      	bx	r3

000d52ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d52ae:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d52b0:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d52b2:	f100 0110 	add.w	r1, r0, #16
   d52b6:	f7ff fff1 	bl	d529c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d52ba:	bd08      	pop	{r3, pc}

000d52bc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d52bc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d52be:	b510      	push	{r4, lr}
      if (_M_empty())
   d52c0:	b90a      	cbnz	r2, d52c6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d52c2:	f001 f9fc 	bl	d66be <_ZSt25__throw_bad_function_callv>
    }
   d52c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52ca:	68c3      	ldr	r3, [r0, #12]
   d52cc:	4718      	bx	r3

000d52ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d52ce:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d52d0:	6800      	ldr	r0, [r0, #0]
   d52d2:	f100 0110 	add.w	r1, r0, #16
   d52d6:	f7ff fff1 	bl	d52bc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d52da:	bd08      	pop	{r3, pc}

000d52dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d52dc:	b538      	push	{r3, r4, r5, lr}
   d52de:	2300      	movs	r3, #0
   d52e0:	4604      	mov	r4, r0
   d52e2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52e4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d52e6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52e8:	f7fe fed3 	bl	d4092 <_Znwj>
   d52ec:	b128      	cbz	r0, d52fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d52ee:	2301      	movs	r3, #1
   d52f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d52f4:	4b02      	ldr	r3, [pc, #8]	; (d5300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d52f6:	6003      	str	r3, [r0, #0]
   d52f8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52fa:	6020      	str	r0, [r4, #0]
	}
   d52fc:	4620      	mov	r0, r4
   d52fe:	bd38      	pop	{r3, r4, r5, pc}
   d5300:	000d7810 	.word	0x000d7810

000d5304 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5304:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5306:	2300      	movs	r3, #0
   d5308:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d530a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d530c:	4604      	mov	r4, r0
   d530e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5310:	b12b      	cbz	r3, d531e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5312:	2202      	movs	r2, #2
   d5314:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5316:	68eb      	ldr	r3, [r5, #12]
   d5318:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d531a:	68ab      	ldr	r3, [r5, #8]
   d531c:	60a3      	str	r3, [r4, #8]
    }
   d531e:	4620      	mov	r0, r4
   d5320:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5324 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5324:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5326:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5328:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d532a:	4668      	mov	r0, sp
   d532c:	f7ff ff60 	bl	d51f0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5330:	f04f 0302 	mov.w	r3, #2
   d5334:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5338:	2a00      	cmp	r2, #0
   d533a:	d103      	bne.n	d5344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d533c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5340:	2900      	cmp	r1, #0
   d5342:	d1f7      	bne.n	d5334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5344:	d125      	bne.n	d5392 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5346:	f104 050c 	add.w	r5, r4, #12
   d534a:	4669      	mov	r1, sp
   d534c:	4628      	mov	r0, r5
   d534e:	f7ff ff4f 	bl	d51f0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5352:	f3bf 8f5b 	dmb	ish
   d5356:	2301      	movs	r3, #1
   d5358:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d535a:	2000      	movs	r0, #0
   d535c:	f104 0308 	add.w	r3, r4, #8
   d5360:	f3bf 8f5b 	dmb	ish
   d5364:	e853 6f00 	ldrex	r6, [r3]
   d5368:	e843 0200 	strex	r2, r0, [r3]
   d536c:	2a00      	cmp	r2, #0
   d536e:	d1f9      	bne.n	d5364 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5370:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5374:	b16e      	cbz	r6, d5392 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5376:	f7ff fdaf 	bl	d4ed8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d537a:	b178      	cbz	r0, d539c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d537c:	4629      	mov	r1, r5
   d537e:	4630      	mov	r0, r6
   d5380:	f7ff ff8c 	bl	d529c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5384:	4630      	mov	r0, r6
   d5386:	f7ff fea2 	bl	d50ce <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d538a:	2110      	movs	r1, #16
   d538c:	4630      	mov	r0, r6
   d538e:	f001 f990 	bl	d66b2 <_ZdlPvj>
        p_->setError(std::move(error));
   d5392:	4668      	mov	r0, sp
   d5394:	f7ff ff39 	bl	d520a <_ZN8particle5ErrorD1Ev>
    }
   d5398:	b009      	add	sp, #36	; 0x24
   d539a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d539c:	4631      	mov	r1, r6
   d539e:	a802      	add	r0, sp, #8
   d53a0:	f7ff ffb0 	bl	d5304 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d53a4:	68e0      	ldr	r0, [r4, #12]
   d53a6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d53aa:	b108      	cbz	r0, d53b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d53ac:	f002 f81c 	bl	d73e8 <strdup>
        type_(type) {
   d53b0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d53b2:	2010      	movs	r0, #16
   d53b4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d53b8:	f7fe fe6b 	bl	d4092 <_Znwj>
   d53bc:	4605      	mov	r5, r0
   d53be:	b1e8      	cbz	r0, d53fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d53c0:	2700      	movs	r7, #0
   d53c2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53c4:	2018      	movs	r0, #24
   d53c6:	f7fe fe64 	bl	d4092 <_Znwj>
   d53ca:	4604      	mov	r4, r0
   d53cc:	b188      	cbz	r0, d53f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d53ce:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d53d0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d53d2:	a802      	add	r0, sp, #8
   d53d4:	f7ff fe8b 	bl	d50ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53d8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d53da:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53dc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53de:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d53e0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d53e2:	a906      	add	r1, sp, #24
   d53e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53e6:	60e3      	str	r3, [r4, #12]
   d53e8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d53ec:	9205      	str	r2, [sp, #20]
   d53ee:	f7ff feff 	bl	d51f0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d53f2:	4b08      	ldr	r3, [pc, #32]	; (d5414 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d53f4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53f6:	4b08      	ldr	r3, [pc, #32]	; (d5418 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53f8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d53fa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d53fc:	a806      	add	r0, sp, #24
   d53fe:	f7ff ff04 	bl	d520a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5402:	a802      	add	r0, sp, #8
   d5404:	f7ff fe63 	bl	d50ce <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5408:	2200      	movs	r2, #0
   d540a:	4629      	mov	r1, r5
   d540c:	4803      	ldr	r0, [pc, #12]	; (d541c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d540e:	f7ff fd6b 	bl	d4ee8 <application_thread_invoke>
   d5412:	e7b7      	b.n	d5384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5414:	000d52af 	.word	0x000d52af
   d5418:	000d5545 	.word	0x000d5545
   d541c:	000d5097 	.word	0x000d5097

000d5420 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5424:	b08a      	sub	sp, #40	; 0x28
   d5426:	4605      	mov	r5, r0
   d5428:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d542c:	460c      	mov	r4, r1
   d542e:	4617      	mov	r7, r2
   d5430:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5432:	f7ff fd75 	bl	d4f20 <spark_cloud_flag_connected>
   d5436:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5438:	4682      	mov	sl, r0
   d543a:	bb38      	cbnz	r0, d548c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d543c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5440:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5442:	a905      	add	r1, sp, #20
   d5444:	4630      	mov	r0, r6
   d5446:	f8ad 3018 	strh.w	r3, [sp, #24]
   d544a:	f7ff fed1 	bl	d51f0 <_ZN8particle5ErrorC1EOS0_>
   d544e:	2014      	movs	r0, #20
   d5450:	f7fe fe1f 	bl	d4092 <_Znwj>
   d5454:	4604      	mov	r4, r0
   d5456:	b148      	cbz	r0, d546c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5458:	2302      	movs	r3, #2
   d545a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d545c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d545e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5462:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5464:	4631      	mov	r1, r6
   d5466:	300c      	adds	r0, #12
   d5468:	f7ff fec2 	bl	d51f0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d546c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d546e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5470:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5474:	f7ff ff32 	bl	d52dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5478:	4630      	mov	r0, r6
   d547a:	f7ff fec6 	bl	d520a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d547e:	a805      	add	r0, sp, #20
   d5480:	f7ff fec3 	bl	d520a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5484:	4628      	mov	r0, r5
   d5486:	b00a      	add	sp, #40	; 0x28
   d5488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d548c:	230c      	movs	r3, #12
   d548e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5492:	2014      	movs	r0, #20
   d5494:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5498:	9307      	str	r3, [sp, #28]
   d549a:	f7fe fdfa 	bl	d4092 <_Znwj>
   d549e:	4601      	mov	r1, r0
   d54a0:	b128      	cbz	r0, d54ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d54a2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d54a6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d54aa:	f880 a001 	strb.w	sl, [r0, #1]
   d54ae:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d54b0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d54b2:	f7ff ff13 	bl	d52dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d54b6:	4b22      	ldr	r3, [pc, #136]	; (d5540 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d54b8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d54ba:	2008      	movs	r0, #8
   d54bc:	f7fe fde9 	bl	d4092 <_Znwj>
   d54c0:	4682      	mov	sl, r0
   d54c2:	b128      	cbz	r0, d54d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54c4:	9b03      	ldr	r3, [sp, #12]
   d54c6:	f840 3b04 	str.w	r3, [r0], #4
   d54ca:	a904      	add	r1, sp, #16
   d54cc:	f7ff fe08 	bl	d50e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d54d0:	9600      	str	r6, [sp, #0]
   d54d2:	fa5f f389 	uxtb.w	r3, r9
   d54d6:	4642      	mov	r2, r8
   d54d8:	4639      	mov	r1, r7
   d54da:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d54dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d54e0:	f7ff fd2e 	bl	d4f40 <spark_send_event>
   d54e4:	b9b8      	cbnz	r0, d5516 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d54e6:	9b03      	ldr	r3, [sp, #12]
   d54e8:	785b      	ldrb	r3, [r3, #1]
   d54ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d54ee:	b993      	cbnz	r3, d5516 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d54f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d54f4:	a905      	add	r1, sp, #20
   d54f6:	a803      	add	r0, sp, #12
   d54f8:	9205      	str	r2, [sp, #20]
   d54fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d54fe:	f7ff ff11 	bl	d5324 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5502:	a805      	add	r0, sp, #20
   d5504:	f7ff fe81 	bl	d520a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5508:	a805      	add	r0, sp, #20
   d550a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d550c:	f7ff fea7 	bl	d525e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5510:	a806      	add	r0, sp, #24
   d5512:	f7fe fe71 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5516:	9b03      	ldr	r3, [sp, #12]
   d5518:	9305      	str	r3, [sp, #20]
   d551a:	a904      	add	r1, sp, #16
   d551c:	a806      	add	r0, sp, #24
   d551e:	f7ff fddf 	bl	d50e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5522:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5524:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5526:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5528:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d552a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d552c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d552e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5530:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5532:	f7fe fe61 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5536:	a804      	add	r0, sp, #16
   d5538:	f7fe fe5e 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d553c:	e7a2      	b.n	d5484 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d553e:	bf00      	nop
   d5540:	000d5609 	.word	0x000d5609

000d5544 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5544:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5548:	4605      	mov	r5, r0
	  switch (__op)
   d554a:	d007      	beq.n	d555c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d554c:	2a03      	cmp	r2, #3
   d554e:	d018      	beq.n	d5582 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5550:	2a01      	cmp	r2, #1
   d5552:	d101      	bne.n	d5558 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5554:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5556:	6003      	str	r3, [r0, #0]
	}
   d5558:	2000      	movs	r0, #0
   d555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d555c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d555e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5560:	f7fe fd97 	bl	d4092 <_Znwj>
   d5564:	4604      	mov	r4, r0
   d5566:	b150      	cbz	r0, d557e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5568:	4631      	mov	r1, r6
   d556a:	f7ff fecb 	bl	d5304 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d556e:	6930      	ldr	r0, [r6, #16]
   d5570:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5574:	b108      	cbz	r0, d557a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5576:	f001 ff37 	bl	d73e8 <strdup>
        type_(type) {
   d557a:	6120      	str	r0, [r4, #16]
   d557c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d557e:	602c      	str	r4, [r5, #0]
	}
   d5580:	e7ea      	b.n	d5558 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5582:	6804      	ldr	r4, [r0, #0]
   d5584:	2c00      	cmp	r4, #0
   d5586:	d0e7      	beq.n	d5558 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5588:	f104 0010 	add.w	r0, r4, #16
   d558c:	f7ff fe3d 	bl	d520a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5590:	4620      	mov	r0, r4
   d5592:	f7ff fd9c 	bl	d50ce <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5596:	2118      	movs	r1, #24
   d5598:	4620      	mov	r0, r4
   d559a:	f001 f88a 	bl	d66b2 <_ZdlPvj>
   d559e:	e7db      	b.n	d5558 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d55a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d55a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d55a2:	2300      	movs	r3, #0
   d55a4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d55a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d55a8:	4604      	mov	r4, r0
   d55aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d55ac:	b12b      	cbz	r3, d55ba <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d55ae:	2202      	movs	r2, #2
   d55b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d55b2:	68eb      	ldr	r3, [r5, #12]
   d55b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d55b6:	68ab      	ldr	r3, [r5, #8]
   d55b8:	60a3      	str	r3, [r4, #8]
    }
   d55ba:	4620      	mov	r0, r4
   d55bc:	bd38      	pop	{r3, r4, r5, pc}

000d55be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d55be:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d55c0:	b570      	push	{r4, r5, r6, lr}
   d55c2:	4604      	mov	r4, r0
	  switch (__op)
   d55c4:	d007      	beq.n	d55d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d55c6:	2a03      	cmp	r2, #3
   d55c8:	d012      	beq.n	d55f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d55ca:	2a01      	cmp	r2, #1
   d55cc:	d101      	bne.n	d55d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d55ce:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d55d0:	6003      	str	r3, [r0, #0]
	}
   d55d2:	2000      	movs	r0, #0
   d55d4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d55d6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d55d8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d55da:	f7fe fd5a 	bl	d4092 <_Znwj>
   d55de:	4605      	mov	r5, r0
   d55e0:	b120      	cbz	r0, d55ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d55e2:	4631      	mov	r1, r6
   d55e4:	f7ff ffdc 	bl	d55a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d55e8:	7c33      	ldrb	r3, [r6, #16]
   d55ea:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d55ec:	6025      	str	r5, [r4, #0]
	}
   d55ee:	e7f0      	b.n	d55d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d55f0:	6804      	ldr	r4, [r0, #0]
   d55f2:	2c00      	cmp	r4, #0
   d55f4:	d0ed      	beq.n	d55d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d55f6:	4620      	mov	r0, r4
   d55f8:	f7ff fd69 	bl	d50ce <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d55fc:	2114      	movs	r1, #20
   d55fe:	4620      	mov	r0, r4
   d5600:	f001 f857 	bl	d66b2 <_ZdlPvj>
   d5604:	e7e5      	b.n	d55d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5608 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5608:	b5f0      	push	{r4, r5, r6, r7, lr}
   d560a:	b089      	sub	sp, #36	; 0x24
   d560c:	4604      	mov	r4, r0
   d560e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5610:	a801      	add	r0, sp, #4
   d5612:	4611      	mov	r1, r2
   d5614:	f7ff fe23 	bl	d525e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5618:	b1a4      	cbz	r4, d5644 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d561a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d561c:	b11d      	cbz	r5, d5626 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d561e:	4628      	mov	r0, r5
   d5620:	f001 fee2 	bl	d73e8 <strdup>
   d5624:	4605      	mov	r5, r0
   d5626:	a801      	add	r0, sp, #4
   d5628:	a903      	add	r1, sp, #12
        type_(type) {
   d562a:	9503      	str	r5, [sp, #12]
   d562c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5630:	f7ff fe78 	bl	d5324 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5634:	a803      	add	r0, sp, #12
   d5636:	f7ff fde8 	bl	d520a <_ZN8particle5ErrorD1Ev>
   d563a:	a802      	add	r0, sp, #8
   d563c:	f7fe fddc 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5640:	b009      	add	sp, #36	; 0x24
   d5642:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5644:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5646:	2301      	movs	r3, #1
   d5648:	e8d5 2f4f 	ldrexb	r2, [r5]
   d564c:	2a00      	cmp	r2, #0
   d564e:	d103      	bne.n	d5658 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5650:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5654:	2900      	cmp	r1, #0
   d5656:	d1f7      	bne.n	d5648 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5658:	d1ef      	bne.n	d563a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d565a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d565c:	f3bf 8f5b 	dmb	ish
   d5660:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5662:	1d2b      	adds	r3, r5, #4
   d5664:	f3bf 8f5b 	dmb	ish
   d5668:	e853 6f00 	ldrex	r6, [r3]
   d566c:	e843 4200 	strex	r2, r4, [r3]
   d5670:	2a00      	cmp	r2, #0
   d5672:	d1f9      	bne.n	d5668 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5674:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5678:	2e00      	cmp	r6, #0
   d567a:	d0de      	beq.n	d563a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d567c:	4620      	mov	r0, r4
   d567e:	f7ff fc2b 	bl	d4ed8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5682:	4607      	mov	r7, r0
   d5684:	b160      	cbz	r0, d56a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5686:	f105 010c 	add.w	r1, r5, #12
   d568a:	4630      	mov	r0, r6
   d568c:	f7ff fe16 	bl	d52bc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5690:	4630      	mov	r0, r6
   d5692:	f7ff fd1c 	bl	d50ce <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5696:	2110      	movs	r1, #16
   d5698:	4630      	mov	r0, r6
   d569a:	f001 f80a 	bl	d66b2 <_ZdlPvj>
   d569e:	e7cc      	b.n	d563a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d56a0:	4631      	mov	r1, r6
   d56a2:	a803      	add	r0, sp, #12
   d56a4:	f7ff ff7c 	bl	d55a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d56a8:	7b2b      	ldrb	r3, [r5, #12]
   d56aa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d56ae:	2010      	movs	r0, #16
   d56b0:	f7fe fcef 	bl	d4092 <_Znwj>
   d56b4:	4605      	mov	r5, r0
   d56b6:	b1d0      	cbz	r0, d56ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d56b8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56ba:	2014      	movs	r0, #20
   d56bc:	f7fe fce9 	bl	d4092 <_Znwj>
   d56c0:	4604      	mov	r4, r0
   d56c2:	b178      	cbz	r0, d56e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d56c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d56c6:	4601      	mov	r1, r0
   d56c8:	a803      	add	r0, sp, #12
   d56ca:	f7ff fd10 	bl	d50ee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d56d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d56d2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56d4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d56d6:	9205      	str	r2, [sp, #20]
   d56d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d56da:	60e3      	str	r3, [r4, #12]
   d56dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d56e0:	9206      	str	r2, [sp, #24]
   d56e2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d56e4:	4b06      	ldr	r3, [pc, #24]	; (d5700 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d56e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d56e8:	4b06      	ldr	r3, [pc, #24]	; (d5704 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d56ea:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d56ec:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d56ee:	a803      	add	r0, sp, #12
   d56f0:	f7ff fced 	bl	d50ce <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d56f4:	2200      	movs	r2, #0
   d56f6:	4629      	mov	r1, r5
   d56f8:	4803      	ldr	r0, [pc, #12]	; (d5708 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d56fa:	f7ff fbf5 	bl	d4ee8 <application_thread_invoke>
   d56fe:	e7c7      	b.n	d5690 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5700:	000d52cf 	.word	0x000d52cf
   d5704:	000d55bf 	.word	0x000d55bf
   d5708:	000d5097 	.word	0x000d5097

000d570c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d570c:	2200      	movs	r2, #0
   d570e:	6840      	ldr	r0, [r0, #4]
   d5710:	4611      	mov	r1, r2
   d5712:	f7ff bc65 	b.w	d4fe0 <network_listening>

000d5716 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5716:	2200      	movs	r2, #0
   d5718:	6840      	ldr	r0, [r0, #4]
   d571a:	4611      	mov	r1, r2
   d571c:	f7ff bc70 	b.w	d5000 <network_get_listen_timeout>

000d5720 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5720:	6840      	ldr	r0, [r0, #4]
   d5722:	2200      	movs	r2, #0
   d5724:	f7ff bc64 	b.w	d4ff0 <network_set_listen_timeout>

000d5728 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5728:	6840      	ldr	r0, [r0, #4]
   d572a:	2200      	movs	r2, #0
   d572c:	f081 0101 	eor.w	r1, r1, #1
   d5730:	f7ff bc4e 	b.w	d4fd0 <network_listen>

000d5734 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5734:	2300      	movs	r3, #0
   d5736:	6840      	ldr	r0, [r0, #4]
   d5738:	461a      	mov	r2, r3
   d573a:	4619      	mov	r1, r3
   d573c:	f7ff bc40 	b.w	d4fc0 <network_off>

000d5740 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5740:	2300      	movs	r3, #0
   d5742:	6840      	ldr	r0, [r0, #4]
   d5744:	461a      	mov	r2, r3
   d5746:	4619      	mov	r1, r3
   d5748:	f7ff bc32 	b.w	d4fb0 <network_on>

000d574c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d574c:	2200      	movs	r2, #0
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	4611      	mov	r1, r2
   d5752:	f7ff bc25 	b.w	d4fa0 <network_ready>

000d5756 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5756:	2200      	movs	r2, #0
   d5758:	6840      	ldr	r0, [r0, #4]
   d575a:	4611      	mov	r1, r2
   d575c:	f7ff bc10 	b.w	d4f80 <network_connecting>

000d5760 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5760:	6840      	ldr	r0, [r0, #4]
   d5762:	2200      	movs	r2, #0
   d5764:	2102      	movs	r1, #2
   d5766:	f7ff bc13 	b.w	d4f90 <network_disconnect>

000d576a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d576a:	2300      	movs	r3, #0
   d576c:	6840      	ldr	r0, [r0, #4]
   d576e:	461a      	mov	r2, r3
   d5770:	f7ff bbfe 	b.w	d4f70 <network_connect>

000d5774 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5774:	4b02      	ldr	r3, [pc, #8]	; (d5780 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5776:	2203      	movs	r2, #3
   d5778:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d577a:	4a02      	ldr	r2, [pc, #8]	; (d5784 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d577c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d577e:	4770      	bx	lr
   d5780:	2003e650 	.word	0x2003e650
   d5784:	000d782c 	.word	0x000d782c

000d5788 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5788:	4770      	bx	lr

000d578a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d578a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d578c:	4606      	mov	r6, r0
   d578e:	4615      	mov	r5, r2
   d5790:	460c      	mov	r4, r1
   d5792:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5794:	42bc      	cmp	r4, r7
   d5796:	d006      	beq.n	d57a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5798:	6833      	ldr	r3, [r6, #0]
   d579a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d579e:	689b      	ldr	r3, [r3, #8]
   d57a0:	4630      	mov	r0, r6
   d57a2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d57a4:	e7f6      	b.n	d5794 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d57a6:	4628      	mov	r0, r5
   d57a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57aa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d57aa:	7c00      	ldrb	r0, [r0, #16]
   d57ac:	2200      	movs	r2, #0
   d57ae:	f7ff ba93 	b.w	d4cd8 <hal_i2c_write>

000d57b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d57b2:	7c00      	ldrb	r0, [r0, #16]
   d57b4:	2100      	movs	r1, #0
   d57b6:	f7ff ba97 	b.w	d4ce8 <hal_i2c_available>

000d57ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d57ba:	7c00      	ldrb	r0, [r0, #16]
   d57bc:	2100      	movs	r1, #0
   d57be:	f7ff ba9b 	b.w	d4cf8 <hal_i2c_read>

000d57c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d57c2:	7c00      	ldrb	r0, [r0, #16]
   d57c4:	2100      	movs	r1, #0
   d57c6:	f7ff ba9f 	b.w	d4d08 <hal_i2c_peek>

000d57ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d57ca:	7c00      	ldrb	r0, [r0, #16]
   d57cc:	2100      	movs	r1, #0
   d57ce:	f7ff baa3 	b.w	d4d18 <hal_i2c_flush>

000d57d2 <_ZN7TwoWireD0Ev>:
   d57d2:	b510      	push	{r4, lr}
   d57d4:	2114      	movs	r1, #20
   d57d6:	4604      	mov	r4, r0
   d57d8:	f000 ff6b 	bl	d66b2 <_ZdlPvj>
   d57dc:	4620      	mov	r0, r4
   d57de:	bd10      	pop	{r4, pc}

000d57e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d57e0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57e6:	4604      	mov	r4, r0
   d57e8:	4608      	mov	r0, r1
   d57ea:	2100      	movs	r1, #0
   d57ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d57f0:	4b03      	ldr	r3, [pc, #12]	; (d5800 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d57f2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d57f4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d57f6:	4611      	mov	r1, r2
   d57f8:	f7ff fa9e 	bl	d4d38 <hal_i2c_init>
}
   d57fc:	4620      	mov	r0, r4
   d57fe:	bd10      	pop	{r4, pc}
   d5800:	000d7868 	.word	0x000d7868

000d5804 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5804:	2300      	movs	r3, #0
   d5806:	7c00      	ldrb	r0, [r0, #16]
   d5808:	461a      	mov	r2, r3
   d580a:	4619      	mov	r1, r3
   d580c:	f7ff ba4c 	b.w	d4ca8 <hal_i2c_begin>

000d5810 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5810:	7c00      	ldrb	r0, [r0, #16]
   d5812:	2200      	movs	r2, #0
   d5814:	f7ff ba50 	b.w	d4cb8 <hal_i2c_begin_transmission>

000d5818 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5818:	b2c9      	uxtb	r1, r1
   d581a:	f7ff bff9 	b.w	d5810 <_ZN7TwoWire17beginTransmissionEh>

000d581e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d581e:	7c00      	ldrb	r0, [r0, #16]
   d5820:	2200      	movs	r2, #0
   d5822:	f7ff ba51 	b.w	d4cc8 <hal_i2c_end_transmission>

000d5826 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5826:	2101      	movs	r1, #1
   d5828:	f7ff bff9 	b.w	d581e <_ZN7TwoWire15endTransmissionEh>

000d582c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d582c:	f7ff ba34 	b.w	d4c98 <HAL_Interrupts_Disable_All>

000d5830 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5830:	f7ff ba2a 	b.w	d4c88 <HAL_Interrupts_Enable_All>

000d5834 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5834:	4770      	bx	lr

000d5836 <_ZN9IPAddressD0Ev>:
   d5836:	b510      	push	{r4, lr}
   d5838:	2118      	movs	r1, #24
   d583a:	4604      	mov	r4, r0
   d583c:	f000 ff39 	bl	d66b2 <_ZdlPvj>
   d5840:	4620      	mov	r0, r4
   d5842:	bd10      	pop	{r4, pc}

000d5844 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5844:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5846:	7d03      	ldrb	r3, [r0, #20]
   d5848:	2b06      	cmp	r3, #6
{
   d584a:	b08d      	sub	sp, #52	; 0x34
   d584c:	460e      	mov	r6, r1
   d584e:	f100 0704 	add.w	r7, r0, #4
   d5852:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5856:	d012      	beq.n	d587e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5858:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d585c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5860:	220a      	movs	r2, #10
   d5862:	4630      	mov	r0, r6
   d5864:	f000 fb15 	bl	d5e92 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5868:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d586a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d586c:	d019      	beq.n	d58a2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d586e:	2c00      	cmp	r4, #0
   d5870:	d0f4      	beq.n	d585c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5872:	212e      	movs	r1, #46	; 0x2e
   d5874:	4630      	mov	r0, r6
   d5876:	f000 faf3 	bl	d5e60 <_ZN5Print5printEc>
   d587a:	4404      	add	r4, r0
   d587c:	e7ee      	b.n	d585c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d587e:	232f      	movs	r3, #47	; 0x2f
   d5880:	466a      	mov	r2, sp
   d5882:	4639      	mov	r1, r7
   d5884:	200a      	movs	r0, #10
		buf[0] = 0;
   d5886:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d588a:	f7ff fa5d 	bl	d4d48 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d588e:	4668      	mov	r0, sp
   d5890:	f001 fdc7 	bl	d7422 <strlen>
   d5894:	6833      	ldr	r3, [r6, #0]
   d5896:	4602      	mov	r2, r0
   d5898:	68db      	ldr	r3, [r3, #12]
   d589a:	4669      	mov	r1, sp
   d589c:	4630      	mov	r0, r6
   d589e:	4798      	blx	r3
   d58a0:	4604      	mov	r4, r0
    }
    return n;
}
   d58a2:	4620      	mov	r0, r4
   d58a4:	b00d      	add	sp, #52	; 0x34
   d58a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d58a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d58a8:	b510      	push	{r4, lr}
   d58aa:	4b05      	ldr	r3, [pc, #20]	; (d58c0 <_ZN9IPAddressC1Ev+0x18>)
   d58ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d58ae:	2211      	movs	r2, #17
   d58b0:	f840 3b04 	str.w	r3, [r0], #4
   d58b4:	2100      	movs	r1, #0
   d58b6:	f001 fd53 	bl	d7360 <memset>
}
   d58ba:	4620      	mov	r0, r4
   d58bc:	bd10      	pop	{r4, pc}
   d58be:	bf00      	nop
   d58c0:	000d7890 	.word	0x000d7890

000d58c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d58c4:	4603      	mov	r3, r0
   d58c6:	4a07      	ldr	r2, [pc, #28]	; (d58e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d58c8:	b510      	push	{r4, lr}
   d58ca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d58ce:	f101 0210 	add.w	r2, r1, #16
   d58d2:	f851 4b04 	ldr.w	r4, [r1], #4
   d58d6:	f843 4b04 	str.w	r4, [r3], #4
   d58da:	4291      	cmp	r1, r2
   d58dc:	d1f9      	bne.n	d58d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d58de:	780a      	ldrb	r2, [r1, #0]
   d58e0:	701a      	strb	r2, [r3, #0]
}
   d58e2:	bd10      	pop	{r4, pc}
   d58e4:	000d7890 	.word	0x000d7890

000d58e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d58e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d58ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d58ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d58f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d58f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d58fa:	2304      	movs	r3, #4
   d58fc:	6041      	str	r1, [r0, #4]
   d58fe:	7503      	strb	r3, [r0, #20]
}
   d5900:	bd10      	pop	{r4, pc}
	...

000d5904 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5904:	b513      	push	{r0, r1, r4, lr}
   d5906:	4b05      	ldr	r3, [pc, #20]	; (d591c <_ZN9IPAddressC1EPKh+0x18>)
   d5908:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d590a:	78cb      	ldrb	r3, [r1, #3]
   d590c:	9300      	str	r3, [sp, #0]
   d590e:	788b      	ldrb	r3, [r1, #2]
   d5910:	784a      	ldrb	r2, [r1, #1]
   d5912:	7809      	ldrb	r1, [r1, #0]
   d5914:	f7ff ffe8 	bl	d58e8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5918:	b002      	add	sp, #8
   d591a:	bd10      	pop	{r4, pc}
   d591c:	000d7890 	.word	0x000d7890

000d5920 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5920:	4770      	bx	lr

000d5922 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5922:	2000      	movs	r0, #0
   d5924:	4770      	bx	lr

000d5926 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5926:	b510      	push	{r4, lr}
   d5928:	2110      	movs	r1, #16
   d592a:	4604      	mov	r4, r0
   d592c:	f000 fec1 	bl	d66b2 <_ZdlPvj>
   d5930:	4620      	mov	r0, r4
   d5932:	bd10      	pop	{r4, pc}

000d5934 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5934:	b508      	push	{r3, lr}
      { delete this; }
   d5936:	f7ff fff6 	bl	d5926 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d593a:	bd08      	pop	{r3, pc}

000d593c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d593c:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d593e:	68c4      	ldr	r4, [r0, #12]
   d5940:	b17c      	cbz	r4, d5962 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d5942:	6820      	ldr	r0, [r4, #0]
   d5944:	b108      	cbz	r0, d594a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d5946:	f7fe fbaa 	bl	d409e <_ZdaPv>
        if (freeJson) {
   d594a:	7a23      	ldrb	r3, [r4, #8]
   d594c:	b11b      	cbz	r3, d5956 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d594e:	6860      	ldr	r0, [r4, #4]
   d5950:	b108      	cbz	r0, d5956 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d5952:	f7fe fba4 	bl	d409e <_ZdaPv>
   d5956:	4620      	mov	r0, r4
   d5958:	210c      	movs	r1, #12
   d595a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d595e:	f000 bea8 	b.w	d66b2 <_ZdlPvj>
   d5962:	bd10      	pop	{r4, pc}

000d5964 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5964:	b510      	push	{r4, lr}
          _M_dispose();
   d5966:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5968:	4604      	mov	r4, r0
          _M_dispose();
   d596a:	689b      	ldr	r3, [r3, #8]
   d596c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d596e:	68a3      	ldr	r3, [r4, #8]
   d5970:	3b01      	subs	r3, #1
   d5972:	60a3      	str	r3, [r4, #8]
   d5974:	b92b      	cbnz	r3, d5982 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5976:	6823      	ldr	r3, [r4, #0]
   d5978:	4620      	mov	r0, r4
   d597a:	68db      	ldr	r3, [r3, #12]
    }
   d597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5980:	4718      	bx	r3
    }
   d5982:	bd10      	pop	{r4, pc}

000d5984 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d5984:	b538      	push	{r3, r4, r5, lr}
   d5986:	680b      	ldr	r3, [r1, #0]
   d5988:	6003      	str	r3, [r0, #0]
   d598a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d598c:	6843      	ldr	r3, [r0, #4]
   d598e:	429d      	cmp	r5, r3
    class __shared_ptr
   d5990:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d5992:	d00c      	beq.n	d59ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d5994:	b115      	cbz	r5, d599c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5996:	686b      	ldr	r3, [r5, #4]
   d5998:	3301      	adds	r3, #1
   d599a:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d599c:	6860      	ldr	r0, [r4, #4]
   d599e:	b128      	cbz	r0, d59ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d59a0:	6843      	ldr	r3, [r0, #4]
   d59a2:	3b01      	subs	r3, #1
   d59a4:	6043      	str	r3, [r0, #4]
   d59a6:	b90b      	cbnz	r3, d59ac <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d59a8:	f7ff ffdc 	bl	d5964 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d59ac:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d59ae:	4620      	mov	r0, r4
   d59b0:	bd38      	pop	{r3, r4, r5, pc}

000d59b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d59b2:	460b      	mov	r3, r1
   d59b4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d59b6:	2200      	movs	r2, #0
   d59b8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d59ba:	e9c0 2200 	strd	r2, r2, [r0]
   d59be:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d59c0:	6083      	str	r3, [r0, #8]
    if (t) {
   d59c2:	b90b      	cbnz	r3, d59c8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d59c4:	4620      	mov	r0, r4
   d59c6:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d59c8:	f7ff ffdc 	bl	d5984 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d59cc:	e7fa      	b.n	d59c4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>
	...

000d59d0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d59d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d59d4:	b086      	sub	sp, #24
   d59d6:	4607      	mov	r7, r0
   d59d8:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   d59da:	a802      	add	r0, sp, #8
   d59dc:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d59de:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d59e0:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d59e2:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d59e4:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d59e6:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d59e8:	f7ff fa56 	bl	d4e98 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d59ec:	e9cd 4400 	strd	r4, r4, [sp]
   d59f0:	4623      	mov	r3, r4
   d59f2:	4642      	mov	r2, r8
   d59f4:	4639      	mov	r1, r7
   d59f6:	a802      	add	r0, sp, #8
   d59f8:	f7ff fa56 	bl	d4ea8 <jsmn_parse>
    if (n <= 0) {
   d59fc:	1e06      	subs	r6, r0, #0
   d59fe:	dd1e      	ble.n	d5a3e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d5a00:	4910      	ldr	r1, [pc, #64]	; (d5a44 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d5a02:	0130      	lsls	r0, r6, #4
   d5a04:	f000 fe59 	bl	d66ba <_ZnajRKSt9nothrow_t>
    if (!t) {
   d5a08:	4605      	mov	r5, r0
   d5a0a:	b190      	cbz	r0, d5a32 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d5a0c:	4621      	mov	r1, r4
   d5a0e:	a802      	add	r0, sp, #8
   d5a10:	f7ff fa42 	bl	d4e98 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d5a14:	e9cd 6400 	strd	r6, r4, [sp]
   d5a18:	462b      	mov	r3, r5
   d5a1a:	4642      	mov	r2, r8
   d5a1c:	4639      	mov	r1, r7
   d5a1e:	a802      	add	r0, sp, #8
   d5a20:	f7ff fa42 	bl	d4ea8 <jsmn_parse>
   d5a24:	42a0      	cmp	r0, r4
   d5a26:	dd07      	ble.n	d5a38 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   d5a28:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   d5a2c:	2001      	movs	r0, #1
    *count = n;
   d5a2e:	f8c9 6000 	str.w	r6, [r9]
}
   d5a32:	b006      	add	sp, #24
   d5a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5a38:	4628      	mov	r0, r5
   d5a3a:	f7fe fb30 	bl	d409e <_ZdaPv>
      }
   d5a3e:	4620      	mov	r0, r4
   d5a40:	e7f7      	b.n	d5a32 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d5a42:	bf00      	nop
   d5a44:	000d7974 	.word	0x000d7974

000d5a48 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d5a4c:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d5a4e:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d5a50:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5a52:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d5a54:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d5a56:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d5a58:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d5a5a:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d5a5c:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d5a60:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d5a64:	42b4      	cmp	r4, r6
   d5a66:	d063      	beq.n	d5b30 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d5a68:	4625      	mov	r5, r4
   d5a6a:	f815 2b01 	ldrb.w	r2, [r5], #1
   d5a6e:	2a5c      	cmp	r2, #92	; 0x5c
   d5a70:	d12b      	bne.n	d5aca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d5a72:	42a1      	cmp	r1, r4
   d5a74:	d007      	beq.n	d5a86 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d5a76:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d5a7a:	4618      	mov	r0, r3
   d5a7c:	465a      	mov	r2, fp
   d5a7e:	f001 fc55 	bl	d732c <memmove>
   d5a82:	4603      	mov	r3, r0
                str += n;
   d5a84:	445b      	add	r3, fp
            if (s == end) {
   d5a86:	42b5      	cmp	r5, r6
   d5a88:	d039      	beq.n	d5afe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d5a8a:	7862      	ldrb	r2, [r4, #1]
   d5a8c:	2a75      	cmp	r2, #117	; 0x75
   d5a8e:	d12a      	bne.n	d5ae6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d5a90:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d5a92:	1ab2      	subs	r2, r6, r2
   d5a94:	2a03      	cmp	r2, #3
   d5a96:	dd32      	ble.n	d5afe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d5a98:	1da0      	adds	r0, r4, #6
   d5a9a:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d5a9e:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d5aa2:	45ae      	cmp	lr, r5
   d5aa4:	d053      	beq.n	d5b4e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d5aa6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d5aaa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d5aae:	fa5f fb82 	uxtb.w	fp, r2
   d5ab2:	f1bb 0f09 	cmp.w	fp, #9
   d5ab6:	d905      	bls.n	d5ac4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d5ab8:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d5abc:	2a05      	cmp	r2, #5
   d5abe:	d807      	bhi.n	d5ad0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d5ac0:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d5ac4:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d5ac8:	e7eb      	b.n	d5aa2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d5aca:	4628      	mov	r0, r5
   d5acc:	4604      	mov	r4, r0
   d5ace:	e7c9      	b.n	d5a64 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d5ad0:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d5ad4:	2a05      	cmp	r2, #5
   d5ad6:	d812      	bhi.n	d5afe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d5ad8:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d5adc:	e7f2      	b.n	d5ac4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d5ade:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d5ae2:	4601      	mov	r1, r0
   d5ae4:	e7f2      	b.n	d5acc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d5ae6:	2a6e      	cmp	r2, #110	; 0x6e
   d5ae8:	d01c      	beq.n	d5b24 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d5aea:	d80e      	bhi.n	d5b0a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d5aec:	2a62      	cmp	r2, #98	; 0x62
   d5aee:	d013      	beq.n	d5b18 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d5af0:	d807      	bhi.n	d5b02 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d5af2:	2a2f      	cmp	r2, #47	; 0x2f
   d5af4:	d011      	beq.n	d5b1a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5af6:	2a5c      	cmp	r2, #92	; 0x5c
   d5af8:	d00f      	beq.n	d5b1a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d5afa:	2a22      	cmp	r2, #34	; 0x22
   d5afc:	d00d      	beq.n	d5b1a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d5afe:	2000      	movs	r0, #0
   d5b00:	e023      	b.n	d5b4a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d5b02:	2a66      	cmp	r2, #102	; 0x66
   d5b04:	d1fb      	bne.n	d5afe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d5b06:	220c      	movs	r2, #12
   d5b08:	e007      	b.n	d5b1a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d5b0a:	2a72      	cmp	r2, #114	; 0x72
   d5b0c:	d00d      	beq.n	d5b2a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d5b0e:	2a74      	cmp	r2, #116	; 0x74
   d5b10:	d1f5      	bne.n	d5afe <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d5b12:	f883 a000 	strb.w	sl, [r3]
                    break;
   d5b16:	e001      	b.n	d5b1c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d5b18:	2208      	movs	r2, #8
   d5b1a:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d5b1c:	1ca1      	adds	r1, r4, #2
                ++str;
   d5b1e:	3301      	adds	r3, #1
                ++s;
   d5b20:	4608      	mov	r0, r1
   d5b22:	e7d3      	b.n	d5acc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d5b24:	f04f 020a 	mov.w	r2, #10
   d5b28:	e7f7      	b.n	d5b1a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d5b2a:	f883 9000 	strb.w	r9, [r3]
                    break;
   d5b2e:	e7f5      	b.n	d5b1c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d5b30:	42a1      	cmp	r1, r4
   d5b32:	d006      	beq.n	d5b42 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d5b34:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d5b36:	4618      	mov	r0, r3
   d5b38:	4622      	mov	r2, r4
   d5b3a:	f001 fbf7 	bl	d732c <memmove>
   d5b3e:	4603      	mov	r3, r0
        str += n;
   d5b40:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d5b42:	eba3 0308 	sub.w	r3, r3, r8
   d5b46:	60bb      	str	r3, [r7, #8]
    return true;
   d5b48:	2001      	movs	r0, #1
}
   d5b4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d5b4e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d5b52:	d9c4      	bls.n	d5ade <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d5b54:	4621      	mov	r1, r4
   d5b56:	e7b9      	b.n	d5acc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d5b58 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d5b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b5a:	4604      	mov	r4, r0
   d5b5c:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d5b5e:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d5b62:	2700      	movs	r7, #0
    while (t != end) {
   d5b64:	42b4      	cmp	r4, r6
   d5b66:	d010      	beq.n	d5b8a <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d5b68:	7823      	ldrb	r3, [r4, #0]
   d5b6a:	2b03      	cmp	r3, #3
   d5b6c:	d108      	bne.n	d5b80 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d5b6e:	4629      	mov	r1, r5
   d5b70:	4620      	mov	r0, r4
   d5b72:	f7ff ff69 	bl	d5a48 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d5b76:	b148      	cbz	r0, d5b8c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d5b78:	68a3      	ldr	r3, [r4, #8]
   d5b7a:	54ef      	strb	r7, [r5, r3]
        ++t;
   d5b7c:	3410      	adds	r4, #16
    while (t != end) {
   d5b7e:	e7f1      	b.n	d5b64 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d5b80:	2b00      	cmp	r3, #0
   d5b82:	d1fb      	bne.n	d5b7c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d5b84:	68a2      	ldr	r2, [r4, #8]
   d5b86:	54ab      	strb	r3, [r5, r2]
   d5b88:	e7f8      	b.n	d5b7c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d5b8a:	2001      	movs	r0, #1
}
   d5b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b8e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5b8e:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5b90:	2500      	movs	r5, #0
   d5b92:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b94:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5b98:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5b9c:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5ba0:	4604      	mov	r4, r0
   d5ba2:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5ba4:	b14b      	cbz	r3, d5bba <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d5ba6:	781a      	ldrb	r2, [r3, #0]
   d5ba8:	2a01      	cmp	r2, #1
   d5baa:	d106      	bne.n	d5bba <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5bac:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5bb0:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5bb2:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d5bb4:	6143      	str	r3, [r0, #20]
   d5bb6:	f7ff fee5 	bl	d5984 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d5bba:	4620      	mov	r0, r4
   d5bbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5bc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5bc0:	b538      	push	{r3, r4, r5, lr}
   d5bc2:	2300      	movs	r3, #0
   d5bc4:	4604      	mov	r4, r0
   d5bc6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5bc8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5bca:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5bcc:	f7fe fa61 	bl	d4092 <_Znwj>
   d5bd0:	b128      	cbz	r0, d5bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5bd2:	2301      	movs	r3, #1
   d5bd4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5bd8:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d5bda:	6003      	str	r3, [r0, #0]
   d5bdc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5bde:	6020      	str	r0, [r4, #0]
	}
   d5be0:	4620      	mov	r0, r4
   d5be2:	bd38      	pop	{r3, r4, r5, pc}
   d5be4:	000d78a4 	.word	0x000d78a4

000d5be8 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5bea:	4604      	mov	r4, r0
   d5bec:	b087      	sub	sp, #28
   d5bee:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5bf0:	200c      	movs	r0, #12
   d5bf2:	4927      	ldr	r1, [pc, #156]	; (d5c90 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d5bf4:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d5bf6:	f000 fd5e 	bl	d66b6 <_ZnwjRKSt9nothrow_t>
   d5bfa:	4601      	mov	r1, r0
   d5bfc:	b118      	cbz	r0, d5c06 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d5bfe:	2300      	movs	r3, #0
   d5c00:	e9c0 3300 	strd	r3, r3, [r0]
   d5c04:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d5c06:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5c08:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d5c0a:	f7ff ffd9 	bl	d5bc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d5c0e:	9a02      	ldr	r2, [sp, #8]
   d5c10:	b942      	cbnz	r2, d5c24 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5c12:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d5c16:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d5c18:	a803      	add	r0, sp, #12
   d5c1a:	f7fe faed 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c1e:	4620      	mov	r0, r4
   d5c20:	b007      	add	sp, #28
   d5c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d5c24:	2300      	movs	r3, #0
   d5c26:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d5c28:	4629      	mov	r1, r5
   d5c2a:	ab01      	add	r3, sp, #4
   d5c2c:	4630      	mov	r0, r6
   d5c2e:	f7ff fecf 	bl	d59d0 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d5c32:	b918      	cbnz	r0, d5c3c <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d5c34:	e9c4 0000 	strd	r0, r0, [r4]
   d5c38:	60a0      	str	r0, [r4, #8]
}
   d5c3a:	e7ed      	b.n	d5c18 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d5c3c:	4914      	ldr	r1, [pc, #80]	; (d5c90 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5c3e:	9f02      	ldr	r7, [sp, #8]
   d5c40:	1c68      	adds	r0, r5, #1
   d5c42:	f000 fd3a 	bl	d66ba <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d5c46:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d5c48:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d5c4a:	6858      	ldr	r0, [r3, #4]
   d5c4c:	2800      	cmp	r0, #0
   d5c4e:	d0f1      	beq.n	d5c34 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d5c50:	462a      	mov	r2, r5
   d5c52:	4631      	mov	r1, r6
   d5c54:	f001 fb5c 	bl	d7310 <memcpy>
   d5c58:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5c5a:	9901      	ldr	r1, [sp, #4]
   d5c5c:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d5c5e:	2201      	movs	r2, #1
   d5c60:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d5c62:	685a      	ldr	r2, [r3, #4]
   d5c64:	f7ff ff78 	bl	d5b58 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d5c68:	2800      	cmp	r0, #0
   d5c6a:	d0e3      	beq.n	d5c34 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d5c6c:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d5c6e:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c70:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d5c72:	9b03      	ldr	r3, [sp, #12]
   d5c74:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d5c76:	b113      	cbz	r3, d5c7e <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d5c78:	685a      	ldr	r2, [r3, #4]
   d5c7a:	3201      	adds	r2, #1
   d5c7c:	605a      	str	r2, [r3, #4]
   d5c7e:	aa04      	add	r2, sp, #16
   d5c80:	4620      	mov	r0, r4
   d5c82:	f7ff fe96 	bl	d59b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5c86:	a805      	add	r0, sp, #20
   d5c88:	f7fe fab6 	bl	d41f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c8c:	e7c4      	b.n	d5c18 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d5c8e:	bf00      	nop
   d5c90:	000d7974 	.word	0x000d7974

000d5c94 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5c94:	4b01      	ldr	r3, [pc, #4]	; (d5c9c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c96:	4a02      	ldr	r2, [pc, #8]	; (d5ca0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c98:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5c9a:	4770      	bx	lr
   d5c9c:	2003e658 	.word	0x2003e658
   d5ca0:	000d78b8 	.word	0x000d78b8

000d5ca4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5ca4:	2300      	movs	r3, #0
   d5ca6:	6840      	ldr	r0, [r0, #4]
   d5ca8:	461a      	mov	r2, r3
   d5caa:	f7ff b961 	b.w	d4f70 <network_connect>

000d5cae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5cae:	6840      	ldr	r0, [r0, #4]
   d5cb0:	2200      	movs	r2, #0
   d5cb2:	2102      	movs	r1, #2
   d5cb4:	f7ff b96c 	b.w	d4f90 <network_disconnect>

000d5cb8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5cb8:	2200      	movs	r2, #0
   d5cba:	6840      	ldr	r0, [r0, #4]
   d5cbc:	4611      	mov	r1, r2
   d5cbe:	f7ff b95f 	b.w	d4f80 <network_connecting>

000d5cc2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5cc2:	2200      	movs	r2, #0
   d5cc4:	6840      	ldr	r0, [r0, #4]
   d5cc6:	4611      	mov	r1, r2
   d5cc8:	f7ff b96a 	b.w	d4fa0 <network_ready>

000d5ccc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5ccc:	2300      	movs	r3, #0
   d5cce:	6840      	ldr	r0, [r0, #4]
   d5cd0:	461a      	mov	r2, r3
   d5cd2:	4619      	mov	r1, r3
   d5cd4:	f7ff b96c 	b.w	d4fb0 <network_on>

000d5cd8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5cd8:	2300      	movs	r3, #0
   d5cda:	6840      	ldr	r0, [r0, #4]
   d5cdc:	461a      	mov	r2, r3
   d5cde:	4619      	mov	r1, r3
   d5ce0:	f7ff b96e 	b.w	d4fc0 <network_off>

000d5ce4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5ce4:	6840      	ldr	r0, [r0, #4]
   d5ce6:	2100      	movs	r1, #0
   d5ce8:	f7ff b992 	b.w	d5010 <network_is_on>

000d5cec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5cec:	6840      	ldr	r0, [r0, #4]
   d5cee:	2100      	movs	r1, #0
   d5cf0:	f7ff b996 	b.w	d5020 <network_is_off>

000d5cf4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5cf4:	6840      	ldr	r0, [r0, #4]
   d5cf6:	2200      	movs	r2, #0
   d5cf8:	f081 0101 	eor.w	r1, r1, #1
   d5cfc:	f7ff b968 	b.w	d4fd0 <network_listen>

000d5d00 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5d00:	6840      	ldr	r0, [r0, #4]
   d5d02:	2200      	movs	r2, #0
   d5d04:	f7ff b974 	b.w	d4ff0 <network_set_listen_timeout>

000d5d08 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5d08:	2200      	movs	r2, #0
   d5d0a:	6840      	ldr	r0, [r0, #4]
   d5d0c:	4611      	mov	r1, r2
   d5d0e:	f7ff b977 	b.w	d5000 <network_get_listen_timeout>

000d5d12 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5d12:	2200      	movs	r2, #0
   d5d14:	6840      	ldr	r0, [r0, #4]
   d5d16:	4611      	mov	r1, r2
   d5d18:	f7ff b962 	b.w	d4fe0 <network_listening>

000d5d1c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5d20:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5d22:	b095      	sub	sp, #84	; 0x54
   d5d24:	4616      	mov	r6, r2
   d5d26:	460d      	mov	r5, r1
   d5d28:	4607      	mov	r7, r0
    IPAddress addr;
   d5d2a:	f7ff fdbd 	bl	d58a8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5d2e:	4621      	mov	r1, r4
   d5d30:	2218      	movs	r2, #24
   d5d32:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5d34:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5d36:	f001 fb13 	bl	d7360 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5d3a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5d3c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5d40:	4621      	mov	r1, r4
   d5d42:	466b      	mov	r3, sp
   d5d44:	aa0c      	add	r2, sp, #48	; 0x30
   d5d46:	4630      	mov	r0, r6
   d5d48:	f7ff f80e 	bl	d4d68 <netdb_getaddrinfo>
    if (!r) {
   d5d4c:	4604      	mov	r4, r0
   d5d4e:	2800      	cmp	r0, #0
   d5d50:	d14c      	bne.n	d5dec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5d52:	4602      	mov	r2, r0
   d5d54:	2101      	movs	r1, #1
   d5d56:	6868      	ldr	r0, [r5, #4]
   d5d58:	f7ff f922 	bl	d4fa0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d5c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5d5e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d60:	4622      	mov	r2, r4
   d5d62:	6868      	ldr	r0, [r5, #4]
   d5d64:	f7ff f91c 	bl	d4fa0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d68:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d6a:	4681      	mov	r9, r0
        bool ok = false;
   d5d6c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d6e:	2e00      	cmp	r6, #0
   d5d70:	d03c      	beq.n	d5dec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d5d72:	2900      	cmp	r1, #0
   d5d74:	d13a      	bne.n	d5dec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5d76:	6873      	ldr	r3, [r6, #4]
   d5d78:	2b02      	cmp	r3, #2
   d5d7a:	d003      	beq.n	d5d84 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5d7c:	2b0a      	cmp	r3, #10
   d5d7e:	d011      	beq.n	d5da4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d80:	69f6      	ldr	r6, [r6, #28]
   d5d82:	e7f4      	b.n	d5d6e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5d84:	f1b8 0f00 	cmp.w	r8, #0
   d5d88:	d00a      	beq.n	d5da0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5d8a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d5d8c:	a806      	add	r0, sp, #24
   d5d8e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5d90:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d5d92:	f7ff fdb7 	bl	d5904 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d98:	1d3c      	adds	r4, r7, #4
   d5d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d9c:	682b      	ldr	r3, [r5, #0]
   d5d9e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d5da0:	4641      	mov	r1, r8
   d5da2:	e7ed      	b.n	d5d80 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5da4:	f1b9 0f00 	cmp.w	r9, #0
   d5da8:	d101      	bne.n	d5dae <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5daa:	4649      	mov	r1, r9
   d5dac:	e7e8      	b.n	d5d80 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5dae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5db0:	2210      	movs	r2, #16
   d5db2:	a801      	add	r0, sp, #4
   d5db4:	f001 fad4 	bl	d7360 <memset>
                    a.v = 6;
   d5db8:	2306      	movs	r3, #6
   d5dba:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5dbe:	ad01      	add	r5, sp, #4
   d5dc0:	f104 0308 	add.w	r3, r4, #8
   d5dc4:	3418      	adds	r4, #24
   d5dc6:	6818      	ldr	r0, [r3, #0]
   d5dc8:	6859      	ldr	r1, [r3, #4]
   d5dca:	462a      	mov	r2, r5
   d5dcc:	c203      	stmia	r2!, {r0, r1}
   d5dce:	3308      	adds	r3, #8
   d5dd0:	42a3      	cmp	r3, r4
   d5dd2:	4615      	mov	r5, r2
   d5dd4:	d1f7      	bne.n	d5dc6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d5dd6:	a901      	add	r1, sp, #4
   d5dd8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5dda:	ad07      	add	r5, sp, #28
   d5ddc:	f7ff fd72 	bl	d58c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5de2:	1d3c      	adds	r4, r7, #4
   d5de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5de6:	682b      	ldr	r3, [r5, #0]
   d5de8:	7023      	strb	r3, [r4, #0]
   d5dea:	e7de      	b.n	d5daa <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5dec:	9800      	ldr	r0, [sp, #0]
   d5dee:	f7fe ffb3 	bl	d4d58 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5df2:	4638      	mov	r0, r7
   d5df4:	b015      	add	sp, #84	; 0x54
   d5df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5dfc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5dfc:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5dfe:	4a03      	ldr	r2, [pc, #12]	; (d5e0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5e00:	601a      	str	r2, [r3, #0]
   d5e02:	2200      	movs	r2, #0
   d5e04:	605a      	str	r2, [r3, #4]

} // spark
   d5e06:	4770      	bx	lr
   d5e08:	2003e65c 	.word	0x2003e65c
   d5e0c:	000d78c4 	.word	0x000d78c4

000d5e10 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e12:	4606      	mov	r6, r0
   d5e14:	460d      	mov	r5, r1
  size_t n = 0;
   d5e16:	188f      	adds	r7, r1, r2
   d5e18:	2400      	movs	r4, #0
  while (size--) {
   d5e1a:	42bd      	cmp	r5, r7
   d5e1c:	d00c      	beq.n	d5e38 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5e1e:	6833      	ldr	r3, [r6, #0]
   d5e20:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5e24:	689b      	ldr	r3, [r3, #8]
   d5e26:	4630      	mov	r0, r6
   d5e28:	4798      	blx	r3
     if (chunk>=0)
   d5e2a:	1e03      	subs	r3, r0, #0
   d5e2c:	db01      	blt.n	d5e32 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5e2e:	441c      	add	r4, r3
  while (size--) {
   d5e30:	e7f3      	b.n	d5e1a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5e32:	2c00      	cmp	r4, #0
   d5e34:	bf08      	it	eq
   d5e36:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5e38:	4620      	mov	r0, r4
   d5e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e3c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5e3c:	b513      	push	{r0, r1, r4, lr}
   d5e3e:	4604      	mov	r4, r0
    }
   d5e40:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5e42:	b159      	cbz	r1, d5e5c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5e44:	9101      	str	r1, [sp, #4]
   d5e46:	f001 faec 	bl	d7422 <strlen>
   d5e4a:	6823      	ldr	r3, [r4, #0]
   d5e4c:	9901      	ldr	r1, [sp, #4]
   d5e4e:	68db      	ldr	r3, [r3, #12]
   d5e50:	4602      	mov	r2, r0
   d5e52:	4620      	mov	r0, r4
    }
   d5e54:	b002      	add	sp, #8
   d5e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5e5a:	4718      	bx	r3
    }
   d5e5c:	b002      	add	sp, #8
   d5e5e:	bd10      	pop	{r4, pc}

000d5e60 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5e60:	6803      	ldr	r3, [r0, #0]
   d5e62:	689b      	ldr	r3, [r3, #8]
   d5e64:	4718      	bx	r3

000d5e66 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5e66:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5e68:	210d      	movs	r1, #13
{
   d5e6a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5e6c:	f7ff fff8 	bl	d5e60 <_ZN5Print5printEc>
  n += print('\n');
   d5e70:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5e72:	4604      	mov	r4, r0
  n += print('\n');
   d5e74:	4628      	mov	r0, r5
   d5e76:	f7ff fff3 	bl	d5e60 <_ZN5Print5printEc>
  return n;
}
   d5e7a:	4420      	add	r0, r4
   d5e7c:	bd38      	pop	{r3, r4, r5, pc}

000d5e7e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5e7e:	b538      	push	{r3, r4, r5, lr}
   d5e80:	4605      	mov	r5, r0
  return write(str);
   d5e82:	f7ff ffdb 	bl	d5e3c <_ZN5Print5writeEPKc>
   d5e86:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5e88:	4628      	mov	r0, r5
   d5e8a:	f7ff ffec 	bl	d5e66 <_ZN5Print7printlnEv>
  return n;
}
   d5e8e:	4420      	add	r0, r4
   d5e90:	bd38      	pop	{r3, r4, r5, pc}

000d5e92 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5e92:	b530      	push	{r4, r5, lr}
   d5e94:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5e96:	2300      	movs	r3, #0
   d5e98:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5e9c:	2a01      	cmp	r2, #1
   d5e9e:	bf98      	it	ls
   d5ea0:	220a      	movls	r2, #10
   d5ea2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5ea4:	460d      	mov	r5, r1
   d5ea6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5eaa:	fb01 5312 	mls	r3, r1, r2, r5
   d5eae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5eb2:	2b09      	cmp	r3, #9
   d5eb4:	bf94      	ite	ls
   d5eb6:	3330      	addls	r3, #48	; 0x30
   d5eb8:	3337      	addhi	r3, #55	; 0x37
   d5eba:	b2db      	uxtb	r3, r3
  } while(n);
   d5ebc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ebe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5ec2:	d9ef      	bls.n	d5ea4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5ec4:	4621      	mov	r1, r4
   d5ec6:	f7ff ffb9 	bl	d5e3c <_ZN5Print5writeEPKc>
}
   d5eca:	b00b      	add	sp, #44	; 0x2c
   d5ecc:	bd30      	pop	{r4, r5, pc}

000d5ece <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5ece:	b510      	push	{r4, lr}
   d5ed0:	4604      	mov	r4, r0
   d5ed2:	f7ff f8fc 	bl	d50ce <_ZNSt14_Function_baseD1Ev>
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	bd10      	pop	{r4, pc}
	...

000d5edc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5edc:	4803      	ldr	r0, [pc, #12]	; (d5eec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5ede:	4a04      	ldr	r2, [pc, #16]	; (d5ef0 <_GLOBAL__sub_I_RGB+0x14>)
   d5ee0:	4904      	ldr	r1, [pc, #16]	; (d5ef4 <_GLOBAL__sub_I_RGB+0x18>)
   d5ee2:	2300      	movs	r3, #0
   d5ee4:	6083      	str	r3, [r0, #8]
   d5ee6:	f000 bbdf 	b.w	d66a8 <__aeabi_atexit>
   d5eea:	bf00      	nop
   d5eec:	2003e664 	.word	0x2003e664
   d5ef0:	2003e5ec 	.word	0x2003e5ec
   d5ef4:	000d5ecf 	.word	0x000d5ecf

000d5ef8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5ef8:	b510      	push	{r4, lr}
   d5efa:	4604      	mov	r4, r0
   d5efc:	4608      	mov	r0, r1
{
    _spi = spi;
   d5efe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5f00:	f7fe ff3a 	bl	d4d78 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5f04:	2300      	movs	r3, #0
   d5f06:	6063      	str	r3, [r4, #4]
}
   d5f08:	4620      	mov	r0, r4
   d5f0a:	bd10      	pop	{r4, pc}

000d5f0c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5f10:	ec57 6b10 	vmov	r6, r7, d0
   d5f14:	4680      	mov	r8, r0
   d5f16:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d5f18:	ee10 0a10 	vmov	r0, s0
   d5f1c:	2200      	movs	r2, #0
   d5f1e:	2300      	movs	r3, #0
   d5f20:	4639      	mov	r1, r7
   d5f22:	f000 fffd 	bl	d6f20 <__aeabi_dcmplt>
   d5f26:	b128      	cbz	r0, d5f34 <_Z4dtoadhPc+0x28>
        val = -val;
   d5f28:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d5f2c:	461f      	mov	r7, r3
        *sout++ = '-';
   d5f2e:	232d      	movs	r3, #45	; 0x2d
   d5f30:	f804 3b01 	strb.w	r3, [r4], #1
   d5f34:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5f36:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5f3a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d5f3c:	b2d9      	uxtb	r1, r3
   d5f3e:	4588      	cmp	r8, r1
   d5f40:	d903      	bls.n	d5f4a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d5f42:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d5f46:	3301      	adds	r3, #1
   d5f48:	e7f8      	b.n	d5f3c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d5f4a:	4648      	mov	r0, r9
   d5f4c:	f000 fd0c 	bl	d6968 <__aeabi_i2d>
   d5f50:	4632      	mov	r2, r6
   d5f52:	463b      	mov	r3, r7
   d5f54:	f000 fd72 	bl	d6a3c <__aeabi_dmul>
   d5f58:	4606      	mov	r6, r0
   d5f5a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d5f5c:	f001 f840 	bl	d6fe0 <__aeabi_d2ulz>
   d5f60:	4605      	mov	r5, r0
   d5f62:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5f64:	f000 fd34 	bl	d69d0 <__aeabi_ul2d>
   d5f68:	4602      	mov	r2, r0
   d5f6a:	460b      	mov	r3, r1
   d5f6c:	4630      	mov	r0, r6
   d5f6e:	4639      	mov	r1, r7
   d5f70:	f000 fbac 	bl	d66cc <__aeabi_dsub>
   d5f74:	4b13      	ldr	r3, [pc, #76]	; (d5fc4 <_Z4dtoadhPc+0xb8>)
   d5f76:	2200      	movs	r2, #0
   d5f78:	f000 ffe6 	bl	d6f48 <__aeabi_dcmpge>
   d5f7c:	b110      	cbz	r0, d5f84 <_Z4dtoadhPc+0x78>
        fixed++;
   d5f7e:	3501      	adds	r5, #1
   d5f80:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5f84:	464a      	mov	r2, r9
   d5f86:	4628      	mov	r0, r5
   d5f88:	17d3      	asrs	r3, r2, #31
   d5f8a:	4651      	mov	r1, sl
   d5f8c:	f001 f810 	bl	d6fb0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5f90:	2301      	movs	r3, #1
   d5f92:	4615      	mov	r5, r2
   d5f94:	4621      	mov	r1, r4
   d5f96:	220a      	movs	r2, #10
   d5f98:	f000 fa21 	bl	d63de <ultoa>
    if (prec) {
   d5f9c:	f1b8 0f00 	cmp.w	r8, #0
   d5fa0:	d00d      	beq.n	d5fbe <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f001 fa3d 	bl	d7422 <strlen>
        *sout++ = '.';
   d5fa8:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d5faa:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d5fac:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d5fae:	220a      	movs	r2, #10
   d5fb0:	4643      	mov	r3, r8
   d5fb2:	4628      	mov	r0, r5
   d5fb4:	3101      	adds	r1, #1
    }
}
   d5fb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d5fba:	f000 ba10 	b.w	d63de <ultoa>
}
   d5fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5fc2:	bf00      	nop
   d5fc4:	3fe00000 	.word	0x3fe00000

000d5fc8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5fc8:	b510      	push	{r4, lr}
   d5fca:	4604      	mov	r4, r0
{
	free(buffer);
   d5fcc:	6800      	ldr	r0, [r0, #0]
   d5fce:	f7ff f837 	bl	d5040 <free>
}
   d5fd2:	4620      	mov	r0, r4
   d5fd4:	bd10      	pop	{r4, pc}

000d5fd6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5fd6:	b510      	push	{r4, lr}
   d5fd8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5fda:	6800      	ldr	r0, [r0, #0]
   d5fdc:	b108      	cbz	r0, d5fe2 <_ZN6String10invalidateEv+0xc>
   d5fde:	f7ff f82f 	bl	d5040 <free>
	buffer = NULL;
   d5fe2:	2300      	movs	r3, #0
	capacity = len = 0;
   d5fe4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5fe8:	6023      	str	r3, [r4, #0]
}
   d5fea:	bd10      	pop	{r4, pc}

000d5fec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5fec:	b538      	push	{r3, r4, r5, lr}
   d5fee:	4604      	mov	r4, r0
   d5ff0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5ff2:	6800      	ldr	r0, [r0, #0]
   d5ff4:	3101      	adds	r1, #1
   d5ff6:	f7ff f82b 	bl	d5050 <realloc>
	if (newbuffer) {
   d5ffa:	b110      	cbz	r0, d6002 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5ffc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6000:	2001      	movs	r0, #1
	}
	return 0;
}
   d6002:	bd38      	pop	{r3, r4, r5, pc}

000d6004 <_ZN6String7reserveEj>:
{
   d6004:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6006:	6803      	ldr	r3, [r0, #0]
{
   d6008:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d600a:	b123      	cbz	r3, d6016 <_ZN6String7reserveEj+0x12>
   d600c:	6843      	ldr	r3, [r0, #4]
   d600e:	428b      	cmp	r3, r1
   d6010:	d301      	bcc.n	d6016 <_ZN6String7reserveEj+0x12>
   d6012:	2001      	movs	r0, #1
}
   d6014:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6016:	4620      	mov	r0, r4
   d6018:	f7ff ffe8 	bl	d5fec <_ZN6String12changeBufferEj>
   d601c:	2800      	cmp	r0, #0
   d601e:	d0f9      	beq.n	d6014 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6020:	68a3      	ldr	r3, [r4, #8]
   d6022:	2b00      	cmp	r3, #0
   d6024:	d1f5      	bne.n	d6012 <_ZN6String7reserveEj+0xe>
   d6026:	6822      	ldr	r2, [r4, #0]
   d6028:	7013      	strb	r3, [r2, #0]
   d602a:	e7f2      	b.n	d6012 <_ZN6String7reserveEj+0xe>

000d602c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d602c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d602e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6030:	4611      	mov	r1, r2
   d6032:	9201      	str	r2, [sp, #4]
{
   d6034:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6036:	f7ff ffe5 	bl	d6004 <_ZN6String7reserveEj>
   d603a:	9a01      	ldr	r2, [sp, #4]
   d603c:	b928      	cbnz	r0, d604a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d603e:	4620      	mov	r0, r4
   d6040:	f7ff ffc9 	bl	d5fd6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6044:	4620      	mov	r0, r4
   d6046:	b003      	add	sp, #12
   d6048:	bd30      	pop	{r4, r5, pc}
	len = length;
   d604a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d604c:	4629      	mov	r1, r5
   d604e:	6820      	ldr	r0, [r4, #0]
   d6050:	f001 f95e 	bl	d7310 <memcpy>
	buffer[len] = 0;
   d6054:	6822      	ldr	r2, [r4, #0]
   d6056:	68a3      	ldr	r3, [r4, #8]
   d6058:	2100      	movs	r1, #0
   d605a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d605c:	e7f2      	b.n	d6044 <_ZN6String4copyEPKcj+0x18>

000d605e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d605e:	4288      	cmp	r0, r1
{
   d6060:	b510      	push	{r4, lr}
   d6062:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6064:	d005      	beq.n	d6072 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6066:	680b      	ldr	r3, [r1, #0]
   d6068:	b12b      	cbz	r3, d6076 <_ZN6StringaSERKS_+0x18>
   d606a:	688a      	ldr	r2, [r1, #8]
   d606c:	4619      	mov	r1, r3
   d606e:	f7ff ffdd 	bl	d602c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6072:	4620      	mov	r0, r4
   d6074:	bd10      	pop	{r4, pc}
	else invalidate();
   d6076:	f7ff ffae 	bl	d5fd6 <_ZN6String10invalidateEv>
   d607a:	e7fa      	b.n	d6072 <_ZN6StringaSERKS_+0x14>

000d607c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d607c:	b510      	push	{r4, lr}
	buffer = NULL;
   d607e:	2300      	movs	r3, #0
String::String(const String &value)
   d6080:	4604      	mov	r4, r0
	capacity = 0;
   d6082:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6086:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6088:	7303      	strb	r3, [r0, #12]
	*this = value;
   d608a:	f7ff ffe8 	bl	d605e <_ZN6StringaSERKS_>
}
   d608e:	4620      	mov	r0, r4
   d6090:	bd10      	pop	{r4, pc}

000d6092 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6092:	b513      	push	{r0, r1, r4, lr}
   d6094:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6096:	b159      	cbz	r1, d60b0 <_ZN6StringaSEPKc+0x1e>
   d6098:	4608      	mov	r0, r1
   d609a:	9101      	str	r1, [sp, #4]
   d609c:	f001 f9c1 	bl	d7422 <strlen>
   d60a0:	9901      	ldr	r1, [sp, #4]
   d60a2:	4602      	mov	r2, r0
   d60a4:	4620      	mov	r0, r4
   d60a6:	f7ff ffc1 	bl	d602c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d60aa:	4620      	mov	r0, r4
   d60ac:	b002      	add	sp, #8
   d60ae:	bd10      	pop	{r4, pc}
	else invalidate();
   d60b0:	f7ff ff91 	bl	d5fd6 <_ZN6String10invalidateEv>
   d60b4:	e7f9      	b.n	d60aa <_ZN6StringaSEPKc+0x18>

000d60b6 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d60b6:	b530      	push	{r4, r5, lr}
   d60b8:	4604      	mov	r4, r0
	buffer = NULL;
   d60ba:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d60bc:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d60be:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d60c2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d60c4:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d60c6:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d60ca:	b2cd      	uxtb	r5, r1
   d60cc:	f000 fc5e 	bl	d698c <__aeabi_f2d>
   d60d0:	ec41 0b10 	vmov	d0, r0, r1
   d60d4:	a901      	add	r1, sp, #4
   d60d6:	4628      	mov	r0, r5
   d60d8:	f7ff ff18 	bl	d5f0c <_Z4dtoadhPc>
        *this = buf;
   d60dc:	a901      	add	r1, sp, #4
   d60de:	4620      	mov	r0, r4
   d60e0:	f7ff ffd7 	bl	d6092 <_ZN6StringaSEPKc>
}
   d60e4:	4620      	mov	r0, r4
   d60e6:	b00b      	add	sp, #44	; 0x2c
   d60e8:	bd30      	pop	{r4, r5, pc}

000d60ea <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d60ea:	b570      	push	{r4, r5, r6, lr}
   d60ec:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d60ee:	460e      	mov	r6, r1
   d60f0:	b909      	cbnz	r1, d60f6 <_ZN6String6concatEPKcj+0xc>
   d60f2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d60f4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d60f6:	b16a      	cbz	r2, d6114 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d60f8:	6884      	ldr	r4, [r0, #8]
   d60fa:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d60fc:	4621      	mov	r1, r4
   d60fe:	f7ff ff81 	bl	d6004 <_ZN6String7reserveEj>
   d6102:	2800      	cmp	r0, #0
   d6104:	d0f5      	beq.n	d60f2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6106:	6828      	ldr	r0, [r5, #0]
   d6108:	68ab      	ldr	r3, [r5, #8]
   d610a:	4631      	mov	r1, r6
   d610c:	4418      	add	r0, r3
   d610e:	f001 f963 	bl	d73d8 <strcpy>
	len = newlen;
   d6112:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6114:	2001      	movs	r0, #1
   d6116:	e7ed      	b.n	d60f4 <_ZN6String6concatEPKcj+0xa>

000d6118 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6118:	b513      	push	{r0, r1, r4, lr}
   d611a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d611c:	b929      	cbnz	r1, d612a <_ZplRK15StringSumHelperPKc+0x12>
   d611e:	4620      	mov	r0, r4
   d6120:	f7ff ff59 	bl	d5fd6 <_ZN6String10invalidateEv>
	return a;
}
   d6124:	4620      	mov	r0, r4
   d6126:	b002      	add	sp, #8
   d6128:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d612a:	4608      	mov	r0, r1
   d612c:	9101      	str	r1, [sp, #4]
   d612e:	f001 f978 	bl	d7422 <strlen>
   d6132:	9901      	ldr	r1, [sp, #4]
   d6134:	4602      	mov	r2, r0
   d6136:	4620      	mov	r0, r4
   d6138:	f7ff ffd7 	bl	d60ea <_ZN6String6concatEPKcj>
   d613c:	2800      	cmp	r0, #0
   d613e:	d0ee      	beq.n	d611e <_ZplRK15StringSumHelperPKc+0x6>
   d6140:	e7f0      	b.n	d6124 <_ZplRK15StringSumHelperPKc+0xc>

000d6142 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6142:	b510      	push	{r4, lr}
   d6144:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6146:	6800      	ldr	r0, [r0, #0]
   d6148:	b118      	cbz	r0, d6152 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d614a:	f7fe ff79 	bl	d5040 <free>
            wakeupSource_ = nullptr;
   d614e:	2300      	movs	r3, #0
   d6150:	6023      	str	r3, [r4, #0]
        }
    }
   d6152:	bd10      	pop	{r4, pc}

000d6154 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6154:	b510      	push	{r4, lr}
   d6156:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6158:	f7ff fff3 	bl	d6142 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d615c:	4620      	mov	r0, r4
   d615e:	bd10      	pop	{r4, pc}

000d6160 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6160:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6162:	4b09      	ldr	r3, [pc, #36]	; (d6188 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6164:	4c09      	ldr	r4, [pc, #36]	; (d618c <_GLOBAL__sub_I_System+0x2c>)
   d6166:	2202      	movs	r2, #2
   d6168:	2000      	movs	r0, #0
   d616a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d616c:	4b08      	ldr	r3, [pc, #32]	; (d6190 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d616e:	6020      	str	r0, [r4, #0]
   d6170:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6172:	71a0      	strb	r0, [r4, #6]
   d6174:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6176:	f7fe fe9f 	bl	d4eb8 <set_system_mode>
SystemClass System;
   d617a:	4620      	mov	r0, r4
   d617c:	4a05      	ldr	r2, [pc, #20]	; (d6194 <_GLOBAL__sub_I_System+0x34>)
   d617e:	4906      	ldr	r1, [pc, #24]	; (d6198 <_GLOBAL__sub_I_System+0x38>)
   d6180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6184:	f000 ba90 	b.w	d66a8 <__aeabi_atexit>
   d6188:	2003e680 	.word	0x2003e680
   d618c:	2003e674 	.word	0x2003e674
   d6190:	ffff0000 	.word	0xffff0000
   d6194:	2003e5ec 	.word	0x2003e5ec
   d6198:	000d6155 	.word	0x000d6155

000d619c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d619c:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d619e:	681a      	ldr	r2, [r3, #0]
   d61a0:	4b02      	ldr	r3, [pc, #8]	; (d61ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d61a2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d61a4:	4770      	bx	lr
   d61a6:	bf00      	nop
   d61a8:	2003e584 	.word	0x2003e584
   d61ac:	2003e684 	.word	0x2003e684

000d61b0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d61b0:	4770      	bx	lr

000d61b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d61b2:	7441      	strb	r1, [r0, #17]
}
   d61b4:	4770      	bx	lr

000d61b6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d61b6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d61b8:	7c00      	ldrb	r0, [r0, #16]
   d61ba:	f7fe fe25 	bl	d4e08 <hal_usart_available_data_for_write>
}
   d61be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61c2:	bd08      	pop	{r3, pc}

000d61c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d61c4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d61c6:	7c00      	ldrb	r0, [r0, #16]
   d61c8:	f7fe fdf6 	bl	d4db8 <hal_usart_available>
}
   d61cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61d0:	bd08      	pop	{r3, pc}

000d61d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d61d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d61d4:	7c00      	ldrb	r0, [r0, #16]
   d61d6:	f7fe fdff 	bl	d4dd8 <hal_usart_peek>
}
   d61da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61de:	bd08      	pop	{r3, pc}

000d61e0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d61e0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d61e2:	7c00      	ldrb	r0, [r0, #16]
   d61e4:	f7fe fdf0 	bl	d4dc8 <hal_usart_read>
}
   d61e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61ec:	bd08      	pop	{r3, pc}

000d61ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d61ee:	7c00      	ldrb	r0, [r0, #16]
   d61f0:	f7fe bdfa 	b.w	d4de8 <hal_usart_flush>

000d61f4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d61f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61f6:	7c45      	ldrb	r5, [r0, #17]
{
   d61f8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d61fa:	b12d      	cbz	r5, d6208 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d61fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d61fe:	b003      	add	sp, #12
   d6200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6204:	f7fe bdd0 	b.w	d4da8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6208:	7c00      	ldrb	r0, [r0, #16]
   d620a:	9101      	str	r1, [sp, #4]
   d620c:	f7fe fdfc 	bl	d4e08 <hal_usart_available_data_for_write>
   d6210:	2800      	cmp	r0, #0
   d6212:	9901      	ldr	r1, [sp, #4]
   d6214:	dcf2      	bgt.n	d61fc <_ZN11USARTSerial5writeEh+0x8>
}
   d6216:	4628      	mov	r0, r5
   d6218:	b003      	add	sp, #12
   d621a:	bd30      	pop	{r4, r5, pc}

000d621c <_ZN11USARTSerialD0Ev>:
   d621c:	b510      	push	{r4, lr}
   d621e:	2114      	movs	r1, #20
   d6220:	4604      	mov	r4, r0
   d6222:	f000 fa46 	bl	d66b2 <_ZdlPvj>
   d6226:	4620      	mov	r0, r4
   d6228:	bd10      	pop	{r4, pc}
	...

000d622c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d622c:	b510      	push	{r4, lr}
   d622e:	f04f 0c00 	mov.w	ip, #0
   d6232:	4604      	mov	r4, r0
   d6234:	4608      	mov	r0, r1
   d6236:	4611      	mov	r1, r2
   d6238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d623c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6240:	4a04      	ldr	r2, [pc, #16]	; (d6254 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6242:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6244:	2201      	movs	r2, #1
  _serial = serial;
   d6246:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6248:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d624a:	461a      	mov	r2, r3
   d624c:	f7fe fda4 	bl	d4d98 <hal_usart_init>
}
   d6250:	4620      	mov	r0, r4
   d6252:	bd10      	pop	{r4, pc}
   d6254:	000d791c 	.word	0x000d791c

000d6258 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6258:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d625a:	4c0e      	ldr	r4, [pc, #56]	; (d6294 <_Z22__fetch_global_Serial1v+0x3c>)
   d625c:	7821      	ldrb	r1, [r4, #0]
   d625e:	f3bf 8f5b 	dmb	ish
   d6262:	f011 0101 	ands.w	r1, r1, #1
   d6266:	d112      	bne.n	d628e <_Z22__fetch_global_Serial1v+0x36>
   d6268:	4620      	mov	r0, r4
   d626a:	9101      	str	r1, [sp, #4]
   d626c:	f7fd ff19 	bl	d40a2 <__cxa_guard_acquire>
   d6270:	9901      	ldr	r1, [sp, #4]
   d6272:	b160      	cbz	r0, d628e <_Z22__fetch_global_Serial1v+0x36>
   d6274:	4a08      	ldr	r2, [pc, #32]	; (d6298 <_Z22__fetch_global_Serial1v+0x40>)
   d6276:	4b09      	ldr	r3, [pc, #36]	; (d629c <_Z22__fetch_global_Serial1v+0x44>)
   d6278:	4809      	ldr	r0, [pc, #36]	; (d62a0 <_Z22__fetch_global_Serial1v+0x48>)
   d627a:	f7ff ffd7 	bl	d622c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d627e:	4620      	mov	r0, r4
   d6280:	f7fd ff14 	bl	d40ac <__cxa_guard_release>
   d6284:	4a07      	ldr	r2, [pc, #28]	; (d62a4 <_Z22__fetch_global_Serial1v+0x4c>)
   d6286:	4908      	ldr	r1, [pc, #32]	; (d62a8 <_Z22__fetch_global_Serial1v+0x50>)
   d6288:	4805      	ldr	r0, [pc, #20]	; (d62a0 <_Z22__fetch_global_Serial1v+0x48>)
   d628a:	f000 fa0d 	bl	d66a8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d628e:	4804      	ldr	r0, [pc, #16]	; (d62a0 <_Z22__fetch_global_Serial1v+0x48>)
   d6290:	b002      	add	sp, #8
   d6292:	bd10      	pop	{r4, pc}
   d6294:	2003e688 	.word	0x2003e688
   d6298:	2003e68c 	.word	0x2003e68c
   d629c:	2003e710 	.word	0x2003e710
   d62a0:	2003e794 	.word	0x2003e794
   d62a4:	2003e5ec 	.word	0x2003e5ec
   d62a8:	000d61b1 	.word	0x000d61b1

000d62ac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d62ac:	7441      	strb	r1, [r0, #17]
}
   d62ae:	4770      	bx	lr

000d62b0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d62b0:	4770      	bx	lr

000d62b2 <_ZN9USBSerial4readEv>:
{
   d62b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d62b4:	2100      	movs	r1, #0
   d62b6:	7c00      	ldrb	r0, [r0, #16]
   d62b8:	f7fe fdce 	bl	d4e58 <HAL_USB_USART_Receive_Data>
}
   d62bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62c0:	bd08      	pop	{r3, pc}

000d62c2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d62c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d62c4:	2101      	movs	r1, #1
   d62c6:	7c00      	ldrb	r0, [r0, #16]
   d62c8:	f7fe fdc6 	bl	d4e58 <HAL_USB_USART_Receive_Data>
}
   d62cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62d0:	bd08      	pop	{r3, pc}

000d62d2 <_ZN9USBSerial17availableForWriteEv>:
{
   d62d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d62d4:	7c00      	ldrb	r0, [r0, #16]
   d62d6:	f7fe fdb7 	bl	d4e48 <HAL_USB_USART_Available_Data_For_Write>
}
   d62da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62de:	bd08      	pop	{r3, pc}

000d62e0 <_ZN9USBSerial9availableEv>:
{
   d62e0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d62e2:	7c00      	ldrb	r0, [r0, #16]
   d62e4:	f7fe fda8 	bl	d4e38 <HAL_USB_USART_Available_Data>
}
   d62e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62ec:	bd08      	pop	{r3, pc}

000d62ee <_ZN9USBSerial5writeEh>:
{
   d62ee:	b513      	push	{r0, r1, r4, lr}
   d62f0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d62f2:	7c00      	ldrb	r0, [r0, #16]
{
   d62f4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d62f6:	f7fe fda7 	bl	d4e48 <HAL_USB_USART_Available_Data_For_Write>
   d62fa:	2800      	cmp	r0, #0
   d62fc:	9901      	ldr	r1, [sp, #4]
   d62fe:	dc01      	bgt.n	d6304 <_ZN9USBSerial5writeEh+0x16>
   d6300:	7c60      	ldrb	r0, [r4, #17]
   d6302:	b120      	cbz	r0, d630e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6304:	7c20      	ldrb	r0, [r4, #16]
   d6306:	f7fe fdaf 	bl	d4e68 <HAL_USB_USART_Send_Data>
   d630a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d630e:	b002      	add	sp, #8
   d6310:	bd10      	pop	{r4, pc}

000d6312 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6312:	7c00      	ldrb	r0, [r0, #16]
   d6314:	f7fe bdb0 	b.w	d4e78 <HAL_USB_USART_Flush_Data>

000d6318 <_ZN9USBSerialD0Ev>:
   d6318:	b510      	push	{r4, lr}
   d631a:	2114      	movs	r1, #20
   d631c:	4604      	mov	r4, r0
   d631e:	f000 f9c8 	bl	d66b2 <_ZdlPvj>
   d6322:	4620      	mov	r0, r4
   d6324:	bd10      	pop	{r4, pc}
	...

000d6328 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6328:	b510      	push	{r4, lr}
   d632a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d632e:	4604      	mov	r4, r0
   d6330:	4608      	mov	r0, r1
   d6332:	2100      	movs	r1, #0
   d6334:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6338:	4b04      	ldr	r3, [pc, #16]	; (d634c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d633a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d633c:	2301      	movs	r3, #1
  _serial = serial;
   d633e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6340:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6342:	4611      	mov	r1, r2
   d6344:	f7fe fd68 	bl	d4e18 <HAL_USB_USART_Init>
}
   d6348:	4620      	mov	r0, r4
   d634a:	bd10      	pop	{r4, pc}
   d634c:	000d794c 	.word	0x000d794c

000d6350 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6350:	7c00      	ldrb	r0, [r0, #16]
   d6352:	2200      	movs	r2, #0
   d6354:	f7fe bd68 	b.w	d4e28 <HAL_USB_USART_Begin>

000d6358 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6358:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d635a:	2214      	movs	r2, #20
{
   d635c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d635e:	2100      	movs	r1, #0
   d6360:	f000 fffe 	bl	d7360 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6364:	4620      	mov	r0, r4
   d6366:	bd10      	pop	{r4, pc}

000d6368 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6368:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d636a:	4c10      	ldr	r4, [pc, #64]	; (d63ac <_Z16_fetch_usbserialv+0x44>)
{
   d636c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d636e:	a803      	add	r0, sp, #12
   d6370:	f7ff fff2 	bl	d6358 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6374:	7821      	ldrb	r1, [r4, #0]
   d6376:	f3bf 8f5b 	dmb	ish
   d637a:	f011 0101 	ands.w	r1, r1, #1
   d637e:	d111      	bne.n	d63a4 <_Z16_fetch_usbserialv+0x3c>
   d6380:	4620      	mov	r0, r4
   d6382:	9101      	str	r1, [sp, #4]
   d6384:	f7fd fe8d 	bl	d40a2 <__cxa_guard_acquire>
   d6388:	9901      	ldr	r1, [sp, #4]
   d638a:	b158      	cbz	r0, d63a4 <_Z16_fetch_usbserialv+0x3c>
   d638c:	aa03      	add	r2, sp, #12
   d638e:	4808      	ldr	r0, [pc, #32]	; (d63b0 <_Z16_fetch_usbserialv+0x48>)
   d6390:	f7ff ffca 	bl	d6328 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6394:	4620      	mov	r0, r4
   d6396:	f7fd fe89 	bl	d40ac <__cxa_guard_release>
   d639a:	4a06      	ldr	r2, [pc, #24]	; (d63b4 <_Z16_fetch_usbserialv+0x4c>)
   d639c:	4906      	ldr	r1, [pc, #24]	; (d63b8 <_Z16_fetch_usbserialv+0x50>)
   d639e:	4804      	ldr	r0, [pc, #16]	; (d63b0 <_Z16_fetch_usbserialv+0x48>)
   d63a0:	f000 f982 	bl	d66a8 <__aeabi_atexit>
	return _usbserial;
}
   d63a4:	4802      	ldr	r0, [pc, #8]	; (d63b0 <_Z16_fetch_usbserialv+0x48>)
   d63a6:	b008      	add	sp, #32
   d63a8:	bd10      	pop	{r4, pc}
   d63aa:	bf00      	nop
   d63ac:	2003e7a8 	.word	0x2003e7a8
   d63b0:	2003e7ac 	.word	0x2003e7ac
   d63b4:	2003e5ec 	.word	0x2003e5ec
   d63b8:	000d62b1 	.word	0x000d62b1

000d63bc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d63bc:	b510      	push	{r4, lr}
   d63be:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d63c0:	f001 f82f 	bl	d7422 <strlen>
   d63c4:	3801      	subs	r0, #1
   d63c6:	1823      	adds	r3, r4, r0
   d63c8:	4620      	mov	r0, r4
	while(i<j){
   d63ca:	4283      	cmp	r3, r0
   d63cc:	d906      	bls.n	d63dc <_Z11str_reversePc+0x20>
		c = *i;
   d63ce:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d63d0:	7819      	ldrb	r1, [r3, #0]
   d63d2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d63d6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d63da:	e7f6      	b.n	d63ca <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d63dc:	bd10      	pop	{r4, pc}

000d63de <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d63de:	b570      	push	{r4, r5, r6, lr}
   d63e0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d63e2:	1e91      	subs	r1, r2, #2
   d63e4:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d63e6:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d63e8:	d822      	bhi.n	d6430 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d63ea:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d63ec:	b16d      	cbz	r5, d640a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d63ee:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d63f2:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d63f6:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d63f8:	2d09      	cmp	r5, #9
                *ptr += '0';
   d63fa:	bf94      	ite	ls
   d63fc:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d63fe:	3157      	addhi	r1, #87	; 0x57
   d6400:	b2c9      	uxtb	r1, r1
   d6402:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6406:	4635      	mov	r5, r6
	while(a){
   d6408:	e7f0      	b.n	d63ec <ultoa+0xe>
   d640a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d640c:	4423      	add	r3, r4
            *ptr++ = '0';
   d640e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6410:	4293      	cmp	r3, r2
   d6412:	d902      	bls.n	d641a <ultoa+0x3c>
            *ptr++ = '0';
   d6414:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6418:	e7fa      	b.n	d6410 <ultoa+0x32>
   d641a:	1a1a      	subs	r2, r3, r0
   d641c:	4283      	cmp	r3, r0
   d641e:	bf38      	it	cc
   d6420:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6422:	2300      	movs	r3, #0
   d6424:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6426:	4620      	mov	r0, r4
   d6428:	f7ff ffc8 	bl	d63bc <_Z11str_reversePc>
	return buffer;
   d642c:	4620      	mov	r0, r4
}
   d642e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6430:	2000      	movs	r0, #0
   d6432:	e7fc      	b.n	d642e <ultoa+0x50>

000d6434 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6434:	4b01      	ldr	r3, [pc, #4]	; (d643c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6436:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6438:	4770      	bx	lr
   d643a:	bf00      	nop
   d643c:	2003e588 	.word	0x2003e588

000d6440 <serialEventRun>:
{
   d6440:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6442:	4b0b      	ldr	r3, [pc, #44]	; (d6470 <serialEventRun+0x30>)
   d6444:	b143      	cbz	r3, d6458 <serialEventRun+0x18>
   d6446:	f7ff ff8f 	bl	d6368 <_Z16_fetch_usbserialv>
   d644a:	6803      	ldr	r3, [r0, #0]
   d644c:	691b      	ldr	r3, [r3, #16]
   d644e:	4798      	blx	r3
   d6450:	2800      	cmp	r0, #0
   d6452:	dd01      	ble.n	d6458 <serialEventRun+0x18>
        serialEvent();
   d6454:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6458:	4b06      	ldr	r3, [pc, #24]	; (d6474 <serialEventRun+0x34>)
   d645a:	b143      	cbz	r3, d646e <serialEventRun+0x2e>
   d645c:	f7ff fefc 	bl	d6258 <_Z22__fetch_global_Serial1v>
   d6460:	6803      	ldr	r3, [r0, #0]
   d6462:	691b      	ldr	r3, [r3, #16]
   d6464:	4798      	blx	r3
   d6466:	2800      	cmp	r0, #0
   d6468:	dd01      	ble.n	d646e <serialEventRun+0x2e>
        serialEvent1();
   d646a:	f3af 8000 	nop.w
}
   d646e:	bd08      	pop	{r3, pc}
	...

000d6478 <_post_loop>:
{
   d6478:	b508      	push	{r3, lr}
	serialEventRun();
   d647a:	f7ff ffe1 	bl	d6440 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d647e:	f7fe fbdb 	bl	d4c38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6482:	4b01      	ldr	r3, [pc, #4]	; (d6488 <_post_loop+0x10>)
   d6484:	6018      	str	r0, [r3, #0]
}
   d6486:	bd08      	pop	{r3, pc}
   d6488:	2003e7d4 	.word	0x2003e7d4

000d648c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d648c:	4802      	ldr	r0, [pc, #8]	; (d6498 <_Z33system_initialize_user_backup_ramv+0xc>)
   d648e:	4a03      	ldr	r2, [pc, #12]	; (d649c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6490:	4903      	ldr	r1, [pc, #12]	; (d64a0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6492:	1a12      	subs	r2, r2, r0
   d6494:	f000 bf3c 	b.w	d7310 <memcpy>
   d6498:	2003f400 	.word	0x2003f400
   d649c:	2003f404 	.word	0x2003f404
   d64a0:	000d79a8 	.word	0x000d79a8

000d64a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d64a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64a6:	2300      	movs	r3, #0
   d64a8:	9300      	str	r3, [sp, #0]
   d64aa:	461a      	mov	r2, r3
   d64ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64b0:	f7fe fd2c 	bl	d4f0c <system_ctrl_set_result>
}
   d64b4:	b003      	add	sp, #12
   d64b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d64bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d64bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d64be:	8843      	ldrh	r3, [r0, #2]
   d64c0:	2b0a      	cmp	r3, #10
   d64c2:	d008      	beq.n	d64d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d64c4:	2b50      	cmp	r3, #80	; 0x50
   d64c6:	d10b      	bne.n	d64e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d64c8:	4b09      	ldr	r3, [pc, #36]	; (d64f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d64ca:	681b      	ldr	r3, [r3, #0]
   d64cc:	b14b      	cbz	r3, d64e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d64ce:	b003      	add	sp, #12
   d64d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d64d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d64d6:	f7ff ffe5 	bl	d64a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d64da:	b003      	add	sp, #12
   d64dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64e0:	2300      	movs	r3, #0
   d64e2:	9300      	str	r3, [sp, #0]
   d64e4:	461a      	mov	r2, r3
   d64e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64ea:	f7fe fd0f 	bl	d4f0c <system_ctrl_set_result>
}
   d64ee:	e7f4      	b.n	d64da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d64f0:	2003e7c4 	.word	0x2003e7c4

000d64f4 <module_user_init_hook>:
{
   d64f4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64f6:	4c12      	ldr	r4, [pc, #72]	; (d6540 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d64f8:	4812      	ldr	r0, [pc, #72]	; (d6544 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64fa:	4d13      	ldr	r5, [pc, #76]	; (d6548 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d64fc:	2100      	movs	r1, #0
   d64fe:	f7fe fdbf 	bl	d5080 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6502:	6823      	ldr	r3, [r4, #0]
   d6504:	42ab      	cmp	r3, r5
   d6506:	4b11      	ldr	r3, [pc, #68]	; (d654c <module_user_init_hook+0x58>)
   d6508:	bf0c      	ite	eq
   d650a:	2201      	moveq	r2, #1
   d650c:	2200      	movne	r2, #0
   d650e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6510:	d002      	beq.n	d6518 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6512:	f7ff ffbb 	bl	d648c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6516:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6518:	f7fe fb7e 	bl	d4c18 <HAL_RNG_GetRandomNumber>
   d651c:	4604      	mov	r4, r0
    srand(seed);
   d651e:	f000 ff37 	bl	d7390 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6522:	4b0b      	ldr	r3, [pc, #44]	; (d6550 <module_user_init_hook+0x5c>)
   d6524:	b113      	cbz	r3, d652c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6526:	4620      	mov	r0, r4
   d6528:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d652c:	2100      	movs	r1, #0
   d652e:	4808      	ldr	r0, [pc, #32]	; (d6550 <module_user_init_hook+0x5c>)
   d6530:	f7fe fd16 	bl	d4f60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6538:	4806      	ldr	r0, [pc, #24]	; (d6554 <module_user_init_hook+0x60>)
   d653a:	2100      	movs	r1, #0
   d653c:	f7fe bcdc 	b.w	d4ef8 <system_ctrl_set_app_request_handler>
   d6540:	2003f400 	.word	0x2003f400
   d6544:	000d6435 	.word	0x000d6435
   d6548:	9a271c1e 	.word	0x9a271c1e
   d654c:	2003e7c0 	.word	0x2003e7c0
   d6550:	00000000 	.word	0x00000000
   d6554:	000d64bd 	.word	0x000d64bd

000d6558 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6558:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d655a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d655c:	d902      	bls.n	d6564 <pinAvailable+0xc>
    return false;
   d655e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6560:	b002      	add	sp, #8
   d6562:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6564:	f1a0 030b 	sub.w	r3, r0, #11
   d6568:	2b02      	cmp	r3, #2
   d656a:	d81a      	bhi.n	d65a2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d656c:	4c17      	ldr	r4, [pc, #92]	; (d65cc <pinAvailable+0x74>)
   d656e:	7821      	ldrb	r1, [r4, #0]
   d6570:	f3bf 8f5b 	dmb	ish
   d6574:	f011 0101 	ands.w	r1, r1, #1
   d6578:	d10b      	bne.n	d6592 <pinAvailable+0x3a>
   d657a:	4620      	mov	r0, r4
   d657c:	9101      	str	r1, [sp, #4]
   d657e:	f7fd fd90 	bl	d40a2 <__cxa_guard_acquire>
   d6582:	9901      	ldr	r1, [sp, #4]
   d6584:	b128      	cbz	r0, d6592 <pinAvailable+0x3a>
   d6586:	4812      	ldr	r0, [pc, #72]	; (d65d0 <pinAvailable+0x78>)
   d6588:	f7ff fcb6 	bl	d5ef8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d658c:	4620      	mov	r0, r4
   d658e:	f7fd fd8d 	bl	d40ac <__cxa_guard_release>
   d6592:	4b0f      	ldr	r3, [pc, #60]	; (d65d0 <pinAvailable+0x78>)
   d6594:	7818      	ldrb	r0, [r3, #0]
   d6596:	f7fe fbf7 	bl	d4d88 <hal_spi_is_enabled>
   d659a:	2800      	cmp	r0, #0
   d659c:	d1df      	bne.n	d655e <pinAvailable+0x6>
  return true; // 'pin' is available
   d659e:	2001      	movs	r0, #1
   d65a0:	e7de      	b.n	d6560 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d65a2:	2801      	cmp	r0, #1
   d65a4:	d809      	bhi.n	d65ba <pinAvailable+0x62>
   d65a6:	f000 f857 	bl	d6658 <_Z19__fetch_global_Wirev>
   d65aa:	2100      	movs	r1, #0
   d65ac:	7c00      	ldrb	r0, [r0, #16]
   d65ae:	f7fe fbbb 	bl	d4d28 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d65b2:	f080 0001 	eor.w	r0, r0, #1
   d65b6:	b2c0      	uxtb	r0, r0
   d65b8:	e7d2      	b.n	d6560 <pinAvailable+0x8>
   d65ba:	3809      	subs	r0, #9
   d65bc:	2801      	cmp	r0, #1
   d65be:	d8ee      	bhi.n	d659e <pinAvailable+0x46>
   d65c0:	f7ff fe4a 	bl	d6258 <_Z22__fetch_global_Serial1v>
   d65c4:	7c00      	ldrb	r0, [r0, #16]
   d65c6:	f7fe fc17 	bl	d4df8 <hal_usart_is_enabled>
   d65ca:	e7f2      	b.n	d65b2 <pinAvailable+0x5a>
   d65cc:	2003e7c8 	.word	0x2003e7c8
   d65d0:	2003e7cc 	.word	0x2003e7cc

000d65d4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d65d4:	2823      	cmp	r0, #35	; 0x23
{
   d65d6:	b538      	push	{r3, r4, r5, lr}
   d65d8:	4604      	mov	r4, r0
   d65da:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d65dc:	d80a      	bhi.n	d65f4 <pinMode+0x20>
   d65de:	29ff      	cmp	r1, #255	; 0xff
   d65e0:	d008      	beq.n	d65f4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d65e2:	f7ff ffb9 	bl	d6558 <pinAvailable>
   d65e6:	b128      	cbz	r0, d65f4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d65e8:	4629      	mov	r1, r5
   d65ea:	4620      	mov	r0, r4
}
   d65ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d65f0:	f7fe bb32 	b.w	d4c58 <HAL_Pin_Mode>
}
   d65f4:	bd38      	pop	{r3, r4, r5, pc}

000d65f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d65f6:	b538      	push	{r3, r4, r5, lr}
   d65f8:	4604      	mov	r4, r0
   d65fa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d65fc:	f7fe fb34 	bl	d4c68 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6600:	28ff      	cmp	r0, #255	; 0xff
   d6602:	d010      	beq.n	d6626 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6604:	2806      	cmp	r0, #6
   d6606:	d804      	bhi.n	d6612 <digitalWrite+0x1c>
   d6608:	234d      	movs	r3, #77	; 0x4d
   d660a:	fa23 f000 	lsr.w	r0, r3, r0
   d660e:	07c3      	lsls	r3, r0, #31
   d6610:	d409      	bmi.n	d6626 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6612:	4620      	mov	r0, r4
   d6614:	f7ff ffa0 	bl	d6558 <pinAvailable>
   d6618:	b128      	cbz	r0, d6626 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d661a:	4629      	mov	r1, r5
   d661c:	4620      	mov	r0, r4
}
   d661e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6622:	f7fe bb29 	b.w	d4c78 <HAL_GPIO_Write>
}
   d6626:	bd38      	pop	{r3, r4, r5, pc}

000d6628 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6628:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d662a:	2300      	movs	r3, #0
   d662c:	2520      	movs	r5, #32
   d662e:	8043      	strh	r3, [r0, #2]
   d6630:	2314      	movs	r3, #20
{
   d6632:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6634:	8003      	strh	r3, [r0, #0]
   d6636:	6085      	str	r5, [r0, #8]
   d6638:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d663a:	4906      	ldr	r1, [pc, #24]	; (d6654 <_Z17acquireWireBufferv+0x2c>)
   d663c:	4628      	mov	r0, r5
   d663e:	f000 f83c 	bl	d66ba <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6642:	4904      	ldr	r1, [pc, #16]	; (d6654 <_Z17acquireWireBufferv+0x2c>)
	};
   d6644:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6646:	4628      	mov	r0, r5
   d6648:	f000 f837 	bl	d66ba <_ZnajRKSt9nothrow_t>
	};
   d664c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d664e:	4620      	mov	r0, r4
   d6650:	bd38      	pop	{r3, r4, r5, pc}
   d6652:	bf00      	nop
   d6654:	000d7974 	.word	0x000d7974

000d6658 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6658:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d665a:	4d0f      	ldr	r5, [pc, #60]	; (d6698 <_Z19__fetch_global_Wirev+0x40>)
   d665c:	7829      	ldrb	r1, [r5, #0]
   d665e:	f3bf 8f5b 	dmb	ish
   d6662:	f011 0401 	ands.w	r4, r1, #1
{
   d6666:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6668:	d113      	bne.n	d6692 <_Z19__fetch_global_Wirev+0x3a>
   d666a:	4628      	mov	r0, r5
   d666c:	f7fd fd19 	bl	d40a2 <__cxa_guard_acquire>
   d6670:	b178      	cbz	r0, d6692 <_Z19__fetch_global_Wirev+0x3a>
   d6672:	a801      	add	r0, sp, #4
   d6674:	f7ff ffd8 	bl	d6628 <_Z17acquireWireBufferv>
   d6678:	aa01      	add	r2, sp, #4
   d667a:	4621      	mov	r1, r4
   d667c:	4807      	ldr	r0, [pc, #28]	; (d669c <_Z19__fetch_global_Wirev+0x44>)
   d667e:	f7ff f8af 	bl	d57e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6682:	4628      	mov	r0, r5
   d6684:	f7fd fd12 	bl	d40ac <__cxa_guard_release>
   d6688:	4a05      	ldr	r2, [pc, #20]	; (d66a0 <_Z19__fetch_global_Wirev+0x48>)
   d668a:	4906      	ldr	r1, [pc, #24]	; (d66a4 <_Z19__fetch_global_Wirev+0x4c>)
   d668c:	4803      	ldr	r0, [pc, #12]	; (d669c <_Z19__fetch_global_Wirev+0x44>)
   d668e:	f000 f80b 	bl	d66a8 <__aeabi_atexit>
	return wire;
}
   d6692:	4802      	ldr	r0, [pc, #8]	; (d669c <_Z19__fetch_global_Wirev+0x44>)
   d6694:	b007      	add	sp, #28
   d6696:	bd30      	pop	{r4, r5, pc}
   d6698:	2003e7d8 	.word	0x2003e7d8
   d669c:	2003e7dc 	.word	0x2003e7dc
   d66a0:	2003e5ec 	.word	0x2003e5ec
   d66a4:	000d5789 	.word	0x000d5789

000d66a8 <__aeabi_atexit>:
   d66a8:	460b      	mov	r3, r1
   d66aa:	4601      	mov	r1, r0
   d66ac:	4618      	mov	r0, r3
   d66ae:	f000 be21 	b.w	d72f4 <__cxa_atexit>

000d66b2 <_ZdlPvj>:
   d66b2:	f7fd bcf2 	b.w	d409a <_ZdlPv>

000d66b6 <_ZnwjRKSt9nothrow_t>:
   d66b6:	f7fd bcec 	b.w	d4092 <_Znwj>

000d66ba <_ZnajRKSt9nothrow_t>:
   d66ba:	f7fd bcec 	b.w	d4096 <_Znaj>

000d66be <_ZSt25__throw_bad_function_callv>:
   d66be:	b508      	push	{r3, lr}
   d66c0:	f7fe fcce 	bl	d5060 <abort>

000d66c4 <__aeabi_drsub>:
   d66c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d66c8:	e002      	b.n	d66d0 <__adddf3>
   d66ca:	bf00      	nop

000d66cc <__aeabi_dsub>:
   d66cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d66d0 <__adddf3>:
   d66d0:	b530      	push	{r4, r5, lr}
   d66d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d66d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d66da:	ea94 0f05 	teq	r4, r5
   d66de:	bf08      	it	eq
   d66e0:	ea90 0f02 	teqeq	r0, r2
   d66e4:	bf1f      	itttt	ne
   d66e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d66ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   d66ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d66f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d66f6:	f000 80e2 	beq.w	d68be <__adddf3+0x1ee>
   d66fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d66fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6702:	bfb8      	it	lt
   d6704:	426d      	neglt	r5, r5
   d6706:	dd0c      	ble.n	d6722 <__adddf3+0x52>
   d6708:	442c      	add	r4, r5
   d670a:	ea80 0202 	eor.w	r2, r0, r2
   d670e:	ea81 0303 	eor.w	r3, r1, r3
   d6712:	ea82 0000 	eor.w	r0, r2, r0
   d6716:	ea83 0101 	eor.w	r1, r3, r1
   d671a:	ea80 0202 	eor.w	r2, r0, r2
   d671e:	ea81 0303 	eor.w	r3, r1, r3
   d6722:	2d36      	cmp	r5, #54	; 0x36
   d6724:	bf88      	it	hi
   d6726:	bd30      	pophi	{r4, r5, pc}
   d6728:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d672c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6730:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6734:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6738:	d002      	beq.n	d6740 <__adddf3+0x70>
   d673a:	4240      	negs	r0, r0
   d673c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6740:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6744:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6748:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d674c:	d002      	beq.n	d6754 <__adddf3+0x84>
   d674e:	4252      	negs	r2, r2
   d6750:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6754:	ea94 0f05 	teq	r4, r5
   d6758:	f000 80a7 	beq.w	d68aa <__adddf3+0x1da>
   d675c:	f1a4 0401 	sub.w	r4, r4, #1
   d6760:	f1d5 0e20 	rsbs	lr, r5, #32
   d6764:	db0d      	blt.n	d6782 <__adddf3+0xb2>
   d6766:	fa02 fc0e 	lsl.w	ip, r2, lr
   d676a:	fa22 f205 	lsr.w	r2, r2, r5
   d676e:	1880      	adds	r0, r0, r2
   d6770:	f141 0100 	adc.w	r1, r1, #0
   d6774:	fa03 f20e 	lsl.w	r2, r3, lr
   d6778:	1880      	adds	r0, r0, r2
   d677a:	fa43 f305 	asr.w	r3, r3, r5
   d677e:	4159      	adcs	r1, r3
   d6780:	e00e      	b.n	d67a0 <__adddf3+0xd0>
   d6782:	f1a5 0520 	sub.w	r5, r5, #32
   d6786:	f10e 0e20 	add.w	lr, lr, #32
   d678a:	2a01      	cmp	r2, #1
   d678c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6790:	bf28      	it	cs
   d6792:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6796:	fa43 f305 	asr.w	r3, r3, r5
   d679a:	18c0      	adds	r0, r0, r3
   d679c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d67a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d67a4:	d507      	bpl.n	d67b6 <__adddf3+0xe6>
   d67a6:	f04f 0e00 	mov.w	lr, #0
   d67aa:	f1dc 0c00 	rsbs	ip, ip, #0
   d67ae:	eb7e 0000 	sbcs.w	r0, lr, r0
   d67b2:	eb6e 0101 	sbc.w	r1, lr, r1
   d67b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d67ba:	d31b      	bcc.n	d67f4 <__adddf3+0x124>
   d67bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d67c0:	d30c      	bcc.n	d67dc <__adddf3+0x10c>
   d67c2:	0849      	lsrs	r1, r1, #1
   d67c4:	ea5f 0030 	movs.w	r0, r0, rrx
   d67c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d67cc:	f104 0401 	add.w	r4, r4, #1
   d67d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d67d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d67d8:	f080 809a 	bcs.w	d6910 <__adddf3+0x240>
   d67dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d67e0:	bf08      	it	eq
   d67e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d67e6:	f150 0000 	adcs.w	r0, r0, #0
   d67ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d67ee:	ea41 0105 	orr.w	r1, r1, r5
   d67f2:	bd30      	pop	{r4, r5, pc}
   d67f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d67f8:	4140      	adcs	r0, r0
   d67fa:	eb41 0101 	adc.w	r1, r1, r1
   d67fe:	3c01      	subs	r4, #1
   d6800:	bf28      	it	cs
   d6802:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6806:	d2e9      	bcs.n	d67dc <__adddf3+0x10c>
   d6808:	f091 0f00 	teq	r1, #0
   d680c:	bf04      	itt	eq
   d680e:	4601      	moveq	r1, r0
   d6810:	2000      	moveq	r0, #0
   d6812:	fab1 f381 	clz	r3, r1
   d6816:	bf08      	it	eq
   d6818:	3320      	addeq	r3, #32
   d681a:	f1a3 030b 	sub.w	r3, r3, #11
   d681e:	f1b3 0220 	subs.w	r2, r3, #32
   d6822:	da0c      	bge.n	d683e <__adddf3+0x16e>
   d6824:	320c      	adds	r2, #12
   d6826:	dd08      	ble.n	d683a <__adddf3+0x16a>
   d6828:	f102 0c14 	add.w	ip, r2, #20
   d682c:	f1c2 020c 	rsb	r2, r2, #12
   d6830:	fa01 f00c 	lsl.w	r0, r1, ip
   d6834:	fa21 f102 	lsr.w	r1, r1, r2
   d6838:	e00c      	b.n	d6854 <__adddf3+0x184>
   d683a:	f102 0214 	add.w	r2, r2, #20
   d683e:	bfd8      	it	le
   d6840:	f1c2 0c20 	rsble	ip, r2, #32
   d6844:	fa01 f102 	lsl.w	r1, r1, r2
   d6848:	fa20 fc0c 	lsr.w	ip, r0, ip
   d684c:	bfdc      	itt	le
   d684e:	ea41 010c 	orrle.w	r1, r1, ip
   d6852:	4090      	lslle	r0, r2
   d6854:	1ae4      	subs	r4, r4, r3
   d6856:	bfa2      	ittt	ge
   d6858:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d685c:	4329      	orrge	r1, r5
   d685e:	bd30      	popge	{r4, r5, pc}
   d6860:	ea6f 0404 	mvn.w	r4, r4
   d6864:	3c1f      	subs	r4, #31
   d6866:	da1c      	bge.n	d68a2 <__adddf3+0x1d2>
   d6868:	340c      	adds	r4, #12
   d686a:	dc0e      	bgt.n	d688a <__adddf3+0x1ba>
   d686c:	f104 0414 	add.w	r4, r4, #20
   d6870:	f1c4 0220 	rsb	r2, r4, #32
   d6874:	fa20 f004 	lsr.w	r0, r0, r4
   d6878:	fa01 f302 	lsl.w	r3, r1, r2
   d687c:	ea40 0003 	orr.w	r0, r0, r3
   d6880:	fa21 f304 	lsr.w	r3, r1, r4
   d6884:	ea45 0103 	orr.w	r1, r5, r3
   d6888:	bd30      	pop	{r4, r5, pc}
   d688a:	f1c4 040c 	rsb	r4, r4, #12
   d688e:	f1c4 0220 	rsb	r2, r4, #32
   d6892:	fa20 f002 	lsr.w	r0, r0, r2
   d6896:	fa01 f304 	lsl.w	r3, r1, r4
   d689a:	ea40 0003 	orr.w	r0, r0, r3
   d689e:	4629      	mov	r1, r5
   d68a0:	bd30      	pop	{r4, r5, pc}
   d68a2:	fa21 f004 	lsr.w	r0, r1, r4
   d68a6:	4629      	mov	r1, r5
   d68a8:	bd30      	pop	{r4, r5, pc}
   d68aa:	f094 0f00 	teq	r4, #0
   d68ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d68b2:	bf06      	itte	eq
   d68b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d68b8:	3401      	addeq	r4, #1
   d68ba:	3d01      	subne	r5, #1
   d68bc:	e74e      	b.n	d675c <__adddf3+0x8c>
   d68be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d68c2:	bf18      	it	ne
   d68c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d68c8:	d029      	beq.n	d691e <__adddf3+0x24e>
   d68ca:	ea94 0f05 	teq	r4, r5
   d68ce:	bf08      	it	eq
   d68d0:	ea90 0f02 	teqeq	r0, r2
   d68d4:	d005      	beq.n	d68e2 <__adddf3+0x212>
   d68d6:	ea54 0c00 	orrs.w	ip, r4, r0
   d68da:	bf04      	itt	eq
   d68dc:	4619      	moveq	r1, r3
   d68de:	4610      	moveq	r0, r2
   d68e0:	bd30      	pop	{r4, r5, pc}
   d68e2:	ea91 0f03 	teq	r1, r3
   d68e6:	bf1e      	ittt	ne
   d68e8:	2100      	movne	r1, #0
   d68ea:	2000      	movne	r0, #0
   d68ec:	bd30      	popne	{r4, r5, pc}
   d68ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d68f2:	d105      	bne.n	d6900 <__adddf3+0x230>
   d68f4:	0040      	lsls	r0, r0, #1
   d68f6:	4149      	adcs	r1, r1
   d68f8:	bf28      	it	cs
   d68fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d68fe:	bd30      	pop	{r4, r5, pc}
   d6900:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6904:	bf3c      	itt	cc
   d6906:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d690a:	bd30      	popcc	{r4, r5, pc}
   d690c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6910:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6914:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6918:	f04f 0000 	mov.w	r0, #0
   d691c:	bd30      	pop	{r4, r5, pc}
   d691e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6922:	bf1a      	itte	ne
   d6924:	4619      	movne	r1, r3
   d6926:	4610      	movne	r0, r2
   d6928:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d692c:	bf1c      	itt	ne
   d692e:	460b      	movne	r3, r1
   d6930:	4602      	movne	r2, r0
   d6932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6936:	bf06      	itte	eq
   d6938:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d693c:	ea91 0f03 	teqeq	r1, r3
   d6940:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6944:	bd30      	pop	{r4, r5, pc}
   d6946:	bf00      	nop

000d6948 <__aeabi_ui2d>:
   d6948:	f090 0f00 	teq	r0, #0
   d694c:	bf04      	itt	eq
   d694e:	2100      	moveq	r1, #0
   d6950:	4770      	bxeq	lr
   d6952:	b530      	push	{r4, r5, lr}
   d6954:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6958:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d695c:	f04f 0500 	mov.w	r5, #0
   d6960:	f04f 0100 	mov.w	r1, #0
   d6964:	e750      	b.n	d6808 <__adddf3+0x138>
   d6966:	bf00      	nop

000d6968 <__aeabi_i2d>:
   d6968:	f090 0f00 	teq	r0, #0
   d696c:	bf04      	itt	eq
   d696e:	2100      	moveq	r1, #0
   d6970:	4770      	bxeq	lr
   d6972:	b530      	push	{r4, r5, lr}
   d6974:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6978:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d697c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6980:	bf48      	it	mi
   d6982:	4240      	negmi	r0, r0
   d6984:	f04f 0100 	mov.w	r1, #0
   d6988:	e73e      	b.n	d6808 <__adddf3+0x138>
   d698a:	bf00      	nop

000d698c <__aeabi_f2d>:
   d698c:	0042      	lsls	r2, r0, #1
   d698e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6992:	ea4f 0131 	mov.w	r1, r1, rrx
   d6996:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d699a:	bf1f      	itttt	ne
   d699c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d69a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d69a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d69a8:	4770      	bxne	lr
   d69aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d69ae:	bf08      	it	eq
   d69b0:	4770      	bxeq	lr
   d69b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d69b6:	bf04      	itt	eq
   d69b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d69bc:	4770      	bxeq	lr
   d69be:	b530      	push	{r4, r5, lr}
   d69c0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d69c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d69cc:	e71c      	b.n	d6808 <__adddf3+0x138>
   d69ce:	bf00      	nop

000d69d0 <__aeabi_ul2d>:
   d69d0:	ea50 0201 	orrs.w	r2, r0, r1
   d69d4:	bf08      	it	eq
   d69d6:	4770      	bxeq	lr
   d69d8:	b530      	push	{r4, r5, lr}
   d69da:	f04f 0500 	mov.w	r5, #0
   d69de:	e00a      	b.n	d69f6 <__aeabi_l2d+0x16>

000d69e0 <__aeabi_l2d>:
   d69e0:	ea50 0201 	orrs.w	r2, r0, r1
   d69e4:	bf08      	it	eq
   d69e6:	4770      	bxeq	lr
   d69e8:	b530      	push	{r4, r5, lr}
   d69ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d69ee:	d502      	bpl.n	d69f6 <__aeabi_l2d+0x16>
   d69f0:	4240      	negs	r0, r0
   d69f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d69f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d69fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d69fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6a02:	f43f aed8 	beq.w	d67b6 <__adddf3+0xe6>
   d6a06:	f04f 0203 	mov.w	r2, #3
   d6a0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6a0e:	bf18      	it	ne
   d6a10:	3203      	addne	r2, #3
   d6a12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6a16:	bf18      	it	ne
   d6a18:	3203      	addne	r2, #3
   d6a1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6a1e:	f1c2 0320 	rsb	r3, r2, #32
   d6a22:	fa00 fc03 	lsl.w	ip, r0, r3
   d6a26:	fa20 f002 	lsr.w	r0, r0, r2
   d6a2a:	fa01 fe03 	lsl.w	lr, r1, r3
   d6a2e:	ea40 000e 	orr.w	r0, r0, lr
   d6a32:	fa21 f102 	lsr.w	r1, r1, r2
   d6a36:	4414      	add	r4, r2
   d6a38:	e6bd      	b.n	d67b6 <__adddf3+0xe6>
   d6a3a:	bf00      	nop

000d6a3c <__aeabi_dmul>:
   d6a3c:	b570      	push	{r4, r5, r6, lr}
   d6a3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6a42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6a46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6a4a:	bf1d      	ittte	ne
   d6a4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6a50:	ea94 0f0c 	teqne	r4, ip
   d6a54:	ea95 0f0c 	teqne	r5, ip
   d6a58:	f000 f8de 	bleq	d6c18 <__aeabi_dmul+0x1dc>
   d6a5c:	442c      	add	r4, r5
   d6a5e:	ea81 0603 	eor.w	r6, r1, r3
   d6a62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6a66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6a6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6a6e:	bf18      	it	ne
   d6a70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6a74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6a7c:	d038      	beq.n	d6af0 <__aeabi_dmul+0xb4>
   d6a7e:	fba0 ce02 	umull	ip, lr, r0, r2
   d6a82:	f04f 0500 	mov.w	r5, #0
   d6a86:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6a8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6a8e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6a92:	f04f 0600 	mov.w	r6, #0
   d6a96:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6a9a:	f09c 0f00 	teq	ip, #0
   d6a9e:	bf18      	it	ne
   d6aa0:	f04e 0e01 	orrne.w	lr, lr, #1
   d6aa4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6aa8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6aac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6ab0:	d204      	bcs.n	d6abc <__aeabi_dmul+0x80>
   d6ab2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6ab6:	416d      	adcs	r5, r5
   d6ab8:	eb46 0606 	adc.w	r6, r6, r6
   d6abc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6ac0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6ac4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6ac8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6acc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6ad0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ad4:	bf88      	it	hi
   d6ad6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6ada:	d81e      	bhi.n	d6b1a <__aeabi_dmul+0xde>
   d6adc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6ae0:	bf08      	it	eq
   d6ae2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6ae6:	f150 0000 	adcs.w	r0, r0, #0
   d6aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6aee:	bd70      	pop	{r4, r5, r6, pc}
   d6af0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6af4:	ea46 0101 	orr.w	r1, r6, r1
   d6af8:	ea40 0002 	orr.w	r0, r0, r2
   d6afc:	ea81 0103 	eor.w	r1, r1, r3
   d6b00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6b04:	bfc2      	ittt	gt
   d6b06:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6b0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6b0e:	bd70      	popgt	{r4, r5, r6, pc}
   d6b10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b14:	f04f 0e00 	mov.w	lr, #0
   d6b18:	3c01      	subs	r4, #1
   d6b1a:	f300 80ab 	bgt.w	d6c74 <__aeabi_dmul+0x238>
   d6b1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6b22:	bfde      	ittt	le
   d6b24:	2000      	movle	r0, #0
   d6b26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6b2a:	bd70      	pople	{r4, r5, r6, pc}
   d6b2c:	f1c4 0400 	rsb	r4, r4, #0
   d6b30:	3c20      	subs	r4, #32
   d6b32:	da35      	bge.n	d6ba0 <__aeabi_dmul+0x164>
   d6b34:	340c      	adds	r4, #12
   d6b36:	dc1b      	bgt.n	d6b70 <__aeabi_dmul+0x134>
   d6b38:	f104 0414 	add.w	r4, r4, #20
   d6b3c:	f1c4 0520 	rsb	r5, r4, #32
   d6b40:	fa00 f305 	lsl.w	r3, r0, r5
   d6b44:	fa20 f004 	lsr.w	r0, r0, r4
   d6b48:	fa01 f205 	lsl.w	r2, r1, r5
   d6b4c:	ea40 0002 	orr.w	r0, r0, r2
   d6b50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6b54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6b58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6b5c:	fa21 f604 	lsr.w	r6, r1, r4
   d6b60:	eb42 0106 	adc.w	r1, r2, r6
   d6b64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b68:	bf08      	it	eq
   d6b6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b6e:	bd70      	pop	{r4, r5, r6, pc}
   d6b70:	f1c4 040c 	rsb	r4, r4, #12
   d6b74:	f1c4 0520 	rsb	r5, r4, #32
   d6b78:	fa00 f304 	lsl.w	r3, r0, r4
   d6b7c:	fa20 f005 	lsr.w	r0, r0, r5
   d6b80:	fa01 f204 	lsl.w	r2, r1, r4
   d6b84:	ea40 0002 	orr.w	r0, r0, r2
   d6b88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6b90:	f141 0100 	adc.w	r1, r1, #0
   d6b94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b98:	bf08      	it	eq
   d6b9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b9e:	bd70      	pop	{r4, r5, r6, pc}
   d6ba0:	f1c4 0520 	rsb	r5, r4, #32
   d6ba4:	fa00 f205 	lsl.w	r2, r0, r5
   d6ba8:	ea4e 0e02 	orr.w	lr, lr, r2
   d6bac:	fa20 f304 	lsr.w	r3, r0, r4
   d6bb0:	fa01 f205 	lsl.w	r2, r1, r5
   d6bb4:	ea43 0302 	orr.w	r3, r3, r2
   d6bb8:	fa21 f004 	lsr.w	r0, r1, r4
   d6bbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6bc0:	fa21 f204 	lsr.w	r2, r1, r4
   d6bc4:	ea20 0002 	bic.w	r0, r0, r2
   d6bc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6bcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6bd0:	bf08      	it	eq
   d6bd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6bd6:	bd70      	pop	{r4, r5, r6, pc}
   d6bd8:	f094 0f00 	teq	r4, #0
   d6bdc:	d10f      	bne.n	d6bfe <__aeabi_dmul+0x1c2>
   d6bde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6be2:	0040      	lsls	r0, r0, #1
   d6be4:	eb41 0101 	adc.w	r1, r1, r1
   d6be8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bec:	bf08      	it	eq
   d6bee:	3c01      	subeq	r4, #1
   d6bf0:	d0f7      	beq.n	d6be2 <__aeabi_dmul+0x1a6>
   d6bf2:	ea41 0106 	orr.w	r1, r1, r6
   d6bf6:	f095 0f00 	teq	r5, #0
   d6bfa:	bf18      	it	ne
   d6bfc:	4770      	bxne	lr
   d6bfe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6c02:	0052      	lsls	r2, r2, #1
   d6c04:	eb43 0303 	adc.w	r3, r3, r3
   d6c08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6c0c:	bf08      	it	eq
   d6c0e:	3d01      	subeq	r5, #1
   d6c10:	d0f7      	beq.n	d6c02 <__aeabi_dmul+0x1c6>
   d6c12:	ea43 0306 	orr.w	r3, r3, r6
   d6c16:	4770      	bx	lr
   d6c18:	ea94 0f0c 	teq	r4, ip
   d6c1c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c20:	bf18      	it	ne
   d6c22:	ea95 0f0c 	teqne	r5, ip
   d6c26:	d00c      	beq.n	d6c42 <__aeabi_dmul+0x206>
   d6c28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c2c:	bf18      	it	ne
   d6c2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c32:	d1d1      	bne.n	d6bd8 <__aeabi_dmul+0x19c>
   d6c34:	ea81 0103 	eor.w	r1, r1, r3
   d6c38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c3c:	f04f 0000 	mov.w	r0, #0
   d6c40:	bd70      	pop	{r4, r5, r6, pc}
   d6c42:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c46:	bf06      	itte	eq
   d6c48:	4610      	moveq	r0, r2
   d6c4a:	4619      	moveq	r1, r3
   d6c4c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c50:	d019      	beq.n	d6c86 <__aeabi_dmul+0x24a>
   d6c52:	ea94 0f0c 	teq	r4, ip
   d6c56:	d102      	bne.n	d6c5e <__aeabi_dmul+0x222>
   d6c58:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6c5c:	d113      	bne.n	d6c86 <__aeabi_dmul+0x24a>
   d6c5e:	ea95 0f0c 	teq	r5, ip
   d6c62:	d105      	bne.n	d6c70 <__aeabi_dmul+0x234>
   d6c64:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6c68:	bf1c      	itt	ne
   d6c6a:	4610      	movne	r0, r2
   d6c6c:	4619      	movne	r1, r3
   d6c6e:	d10a      	bne.n	d6c86 <__aeabi_dmul+0x24a>
   d6c70:	ea81 0103 	eor.w	r1, r1, r3
   d6c74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c78:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6c80:	f04f 0000 	mov.w	r0, #0
   d6c84:	bd70      	pop	{r4, r5, r6, pc}
   d6c86:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c8a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6c8e:	bd70      	pop	{r4, r5, r6, pc}

000d6c90 <__aeabi_ddiv>:
   d6c90:	b570      	push	{r4, r5, r6, lr}
   d6c92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6c96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6c9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6c9e:	bf1d      	ittte	ne
   d6ca0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ca4:	ea94 0f0c 	teqne	r4, ip
   d6ca8:	ea95 0f0c 	teqne	r5, ip
   d6cac:	f000 f8a7 	bleq	d6dfe <__aeabi_ddiv+0x16e>
   d6cb0:	eba4 0405 	sub.w	r4, r4, r5
   d6cb4:	ea81 0e03 	eor.w	lr, r1, r3
   d6cb8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6cbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6cc0:	f000 8088 	beq.w	d6dd4 <__aeabi_ddiv+0x144>
   d6cc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6cc8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6ccc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6cd0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6cd4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6cd8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6cdc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6ce0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6ce4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6ce8:	429d      	cmp	r5, r3
   d6cea:	bf08      	it	eq
   d6cec:	4296      	cmpeq	r6, r2
   d6cee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6cf2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6cf6:	d202      	bcs.n	d6cfe <__aeabi_ddiv+0x6e>
   d6cf8:	085b      	lsrs	r3, r3, #1
   d6cfa:	ea4f 0232 	mov.w	r2, r2, rrx
   d6cfe:	1ab6      	subs	r6, r6, r2
   d6d00:	eb65 0503 	sbc.w	r5, r5, r3
   d6d04:	085b      	lsrs	r3, r3, #1
   d6d06:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6d0e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6d12:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d16:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d1a:	bf22      	ittt	cs
   d6d1c:	1ab6      	subcs	r6, r6, r2
   d6d1e:	4675      	movcs	r5, lr
   d6d20:	ea40 000c 	orrcs.w	r0, r0, ip
   d6d24:	085b      	lsrs	r3, r3, #1
   d6d26:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d2a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d32:	bf22      	ittt	cs
   d6d34:	1ab6      	subcs	r6, r6, r2
   d6d36:	4675      	movcs	r5, lr
   d6d38:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6d3c:	085b      	lsrs	r3, r3, #1
   d6d3e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d42:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d46:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d4a:	bf22      	ittt	cs
   d6d4c:	1ab6      	subcs	r6, r6, r2
   d6d4e:	4675      	movcs	r5, lr
   d6d50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6d54:	085b      	lsrs	r3, r3, #1
   d6d56:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d5a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d62:	bf22      	ittt	cs
   d6d64:	1ab6      	subcs	r6, r6, r2
   d6d66:	4675      	movcs	r5, lr
   d6d68:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6d6c:	ea55 0e06 	orrs.w	lr, r5, r6
   d6d70:	d018      	beq.n	d6da4 <__aeabi_ddiv+0x114>
   d6d72:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6d76:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6d7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6d7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6d82:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6d86:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6d8a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6d8e:	d1c0      	bne.n	d6d12 <__aeabi_ddiv+0x82>
   d6d90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d94:	d10b      	bne.n	d6dae <__aeabi_ddiv+0x11e>
   d6d96:	ea41 0100 	orr.w	r1, r1, r0
   d6d9a:	f04f 0000 	mov.w	r0, #0
   d6d9e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6da2:	e7b6      	b.n	d6d12 <__aeabi_ddiv+0x82>
   d6da4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6da8:	bf04      	itt	eq
   d6daa:	4301      	orreq	r1, r0
   d6dac:	2000      	moveq	r0, #0
   d6dae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6db2:	bf88      	it	hi
   d6db4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6db8:	f63f aeaf 	bhi.w	d6b1a <__aeabi_dmul+0xde>
   d6dbc:	ebb5 0c03 	subs.w	ip, r5, r3
   d6dc0:	bf04      	itt	eq
   d6dc2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6dc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6dca:	f150 0000 	adcs.w	r0, r0, #0
   d6dce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6dd2:	bd70      	pop	{r4, r5, r6, pc}
   d6dd4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6dd8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6ddc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6de0:	bfc2      	ittt	gt
   d6de2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6de6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6dea:	bd70      	popgt	{r4, r5, r6, pc}
   d6dec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6df0:	f04f 0e00 	mov.w	lr, #0
   d6df4:	3c01      	subs	r4, #1
   d6df6:	e690      	b.n	d6b1a <__aeabi_dmul+0xde>
   d6df8:	ea45 0e06 	orr.w	lr, r5, r6
   d6dfc:	e68d      	b.n	d6b1a <__aeabi_dmul+0xde>
   d6dfe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6e02:	ea94 0f0c 	teq	r4, ip
   d6e06:	bf08      	it	eq
   d6e08:	ea95 0f0c 	teqeq	r5, ip
   d6e0c:	f43f af3b 	beq.w	d6c86 <__aeabi_dmul+0x24a>
   d6e10:	ea94 0f0c 	teq	r4, ip
   d6e14:	d10a      	bne.n	d6e2c <__aeabi_ddiv+0x19c>
   d6e16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e1a:	f47f af34 	bne.w	d6c86 <__aeabi_dmul+0x24a>
   d6e1e:	ea95 0f0c 	teq	r5, ip
   d6e22:	f47f af25 	bne.w	d6c70 <__aeabi_dmul+0x234>
   d6e26:	4610      	mov	r0, r2
   d6e28:	4619      	mov	r1, r3
   d6e2a:	e72c      	b.n	d6c86 <__aeabi_dmul+0x24a>
   d6e2c:	ea95 0f0c 	teq	r5, ip
   d6e30:	d106      	bne.n	d6e40 <__aeabi_ddiv+0x1b0>
   d6e32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6e36:	f43f aefd 	beq.w	d6c34 <__aeabi_dmul+0x1f8>
   d6e3a:	4610      	mov	r0, r2
   d6e3c:	4619      	mov	r1, r3
   d6e3e:	e722      	b.n	d6c86 <__aeabi_dmul+0x24a>
   d6e40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e44:	bf18      	it	ne
   d6e46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e4a:	f47f aec5 	bne.w	d6bd8 <__aeabi_dmul+0x19c>
   d6e4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6e52:	f47f af0d 	bne.w	d6c70 <__aeabi_dmul+0x234>
   d6e56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6e5a:	f47f aeeb 	bne.w	d6c34 <__aeabi_dmul+0x1f8>
   d6e5e:	e712      	b.n	d6c86 <__aeabi_dmul+0x24a>

000d6e60 <__gedf2>:
   d6e60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6e64:	e006      	b.n	d6e74 <__cmpdf2+0x4>
   d6e66:	bf00      	nop

000d6e68 <__ledf2>:
   d6e68:	f04f 0c01 	mov.w	ip, #1
   d6e6c:	e002      	b.n	d6e74 <__cmpdf2+0x4>
   d6e6e:	bf00      	nop

000d6e70 <__cmpdf2>:
   d6e70:	f04f 0c01 	mov.w	ip, #1
   d6e74:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6e78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6e7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e84:	bf18      	it	ne
   d6e86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6e8a:	d01b      	beq.n	d6ec4 <__cmpdf2+0x54>
   d6e8c:	b001      	add	sp, #4
   d6e8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6e92:	bf0c      	ite	eq
   d6e94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6e98:	ea91 0f03 	teqne	r1, r3
   d6e9c:	bf02      	ittt	eq
   d6e9e:	ea90 0f02 	teqeq	r0, r2
   d6ea2:	2000      	moveq	r0, #0
   d6ea4:	4770      	bxeq	lr
   d6ea6:	f110 0f00 	cmn.w	r0, #0
   d6eaa:	ea91 0f03 	teq	r1, r3
   d6eae:	bf58      	it	pl
   d6eb0:	4299      	cmppl	r1, r3
   d6eb2:	bf08      	it	eq
   d6eb4:	4290      	cmpeq	r0, r2
   d6eb6:	bf2c      	ite	cs
   d6eb8:	17d8      	asrcs	r0, r3, #31
   d6eba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6ebe:	f040 0001 	orr.w	r0, r0, #1
   d6ec2:	4770      	bx	lr
   d6ec4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6ec8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ecc:	d102      	bne.n	d6ed4 <__cmpdf2+0x64>
   d6ece:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6ed2:	d107      	bne.n	d6ee4 <__cmpdf2+0x74>
   d6ed4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6edc:	d1d6      	bne.n	d6e8c <__cmpdf2+0x1c>
   d6ede:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6ee2:	d0d3      	beq.n	d6e8c <__cmpdf2+0x1c>
   d6ee4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6ee8:	4770      	bx	lr
   d6eea:	bf00      	nop

000d6eec <__aeabi_cdrcmple>:
   d6eec:	4684      	mov	ip, r0
   d6eee:	4610      	mov	r0, r2
   d6ef0:	4662      	mov	r2, ip
   d6ef2:	468c      	mov	ip, r1
   d6ef4:	4619      	mov	r1, r3
   d6ef6:	4663      	mov	r3, ip
   d6ef8:	e000      	b.n	d6efc <__aeabi_cdcmpeq>
   d6efa:	bf00      	nop

000d6efc <__aeabi_cdcmpeq>:
   d6efc:	b501      	push	{r0, lr}
   d6efe:	f7ff ffb7 	bl	d6e70 <__cmpdf2>
   d6f02:	2800      	cmp	r0, #0
   d6f04:	bf48      	it	mi
   d6f06:	f110 0f00 	cmnmi.w	r0, #0
   d6f0a:	bd01      	pop	{r0, pc}

000d6f0c <__aeabi_dcmpeq>:
   d6f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6f10:	f7ff fff4 	bl	d6efc <__aeabi_cdcmpeq>
   d6f14:	bf0c      	ite	eq
   d6f16:	2001      	moveq	r0, #1
   d6f18:	2000      	movne	r0, #0
   d6f1a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f1e:	bf00      	nop

000d6f20 <__aeabi_dcmplt>:
   d6f20:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6f24:	f7ff ffea 	bl	d6efc <__aeabi_cdcmpeq>
   d6f28:	bf34      	ite	cc
   d6f2a:	2001      	movcc	r0, #1
   d6f2c:	2000      	movcs	r0, #0
   d6f2e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f32:	bf00      	nop

000d6f34 <__aeabi_dcmple>:
   d6f34:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6f38:	f7ff ffe0 	bl	d6efc <__aeabi_cdcmpeq>
   d6f3c:	bf94      	ite	ls
   d6f3e:	2001      	movls	r0, #1
   d6f40:	2000      	movhi	r0, #0
   d6f42:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f46:	bf00      	nop

000d6f48 <__aeabi_dcmpge>:
   d6f48:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6f4c:	f7ff ffce 	bl	d6eec <__aeabi_cdrcmple>
   d6f50:	bf94      	ite	ls
   d6f52:	2001      	movls	r0, #1
   d6f54:	2000      	movhi	r0, #0
   d6f56:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f5a:	bf00      	nop

000d6f5c <__aeabi_dcmpgt>:
   d6f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6f60:	f7ff ffc4 	bl	d6eec <__aeabi_cdrcmple>
   d6f64:	bf34      	ite	cc
   d6f66:	2001      	movcc	r0, #1
   d6f68:	2000      	movcs	r0, #0
   d6f6a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f6e:	bf00      	nop

000d6f70 <__aeabi_d2uiz>:
   d6f70:	004a      	lsls	r2, r1, #1
   d6f72:	d211      	bcs.n	d6f98 <__aeabi_d2uiz+0x28>
   d6f74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6f78:	d211      	bcs.n	d6f9e <__aeabi_d2uiz+0x2e>
   d6f7a:	d50d      	bpl.n	d6f98 <__aeabi_d2uiz+0x28>
   d6f7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6f80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6f84:	d40e      	bmi.n	d6fa4 <__aeabi_d2uiz+0x34>
   d6f86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6f8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6f92:	fa23 f002 	lsr.w	r0, r3, r2
   d6f96:	4770      	bx	lr
   d6f98:	f04f 0000 	mov.w	r0, #0
   d6f9c:	4770      	bx	lr
   d6f9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6fa2:	d102      	bne.n	d6faa <__aeabi_d2uiz+0x3a>
   d6fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6fa8:	4770      	bx	lr
   d6faa:	f04f 0000 	mov.w	r0, #0
   d6fae:	4770      	bx	lr

000d6fb0 <__aeabi_uldivmod>:
   d6fb0:	b953      	cbnz	r3, d6fc8 <__aeabi_uldivmod+0x18>
   d6fb2:	b94a      	cbnz	r2, d6fc8 <__aeabi_uldivmod+0x18>
   d6fb4:	2900      	cmp	r1, #0
   d6fb6:	bf08      	it	eq
   d6fb8:	2800      	cmpeq	r0, #0
   d6fba:	bf1c      	itt	ne
   d6fbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6fc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d6fc4:	f000 b98c 	b.w	d72e0 <__aeabi_idiv0>
   d6fc8:	f1ad 0c08 	sub.w	ip, sp, #8
   d6fcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6fd0:	f000 f824 	bl	d701c <__udivmoddi4>
   d6fd4:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6fd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6fdc:	b004      	add	sp, #16
   d6fde:	4770      	bx	lr

000d6fe0 <__aeabi_d2ulz>:
   d6fe0:	b5d0      	push	{r4, r6, r7, lr}
   d6fe2:	4b0c      	ldr	r3, [pc, #48]	; (d7014 <__aeabi_d2ulz+0x34>)
   d6fe4:	2200      	movs	r2, #0
   d6fe6:	4606      	mov	r6, r0
   d6fe8:	460f      	mov	r7, r1
   d6fea:	f7ff fd27 	bl	d6a3c <__aeabi_dmul>
   d6fee:	f7ff ffbf 	bl	d6f70 <__aeabi_d2uiz>
   d6ff2:	4604      	mov	r4, r0
   d6ff4:	f7ff fca8 	bl	d6948 <__aeabi_ui2d>
   d6ff8:	4b07      	ldr	r3, [pc, #28]	; (d7018 <__aeabi_d2ulz+0x38>)
   d6ffa:	2200      	movs	r2, #0
   d6ffc:	f7ff fd1e 	bl	d6a3c <__aeabi_dmul>
   d7000:	4602      	mov	r2, r0
   d7002:	460b      	mov	r3, r1
   d7004:	4630      	mov	r0, r6
   d7006:	4639      	mov	r1, r7
   d7008:	f7ff fb60 	bl	d66cc <__aeabi_dsub>
   d700c:	f7ff ffb0 	bl	d6f70 <__aeabi_d2uiz>
   d7010:	4621      	mov	r1, r4
   d7012:	bdd0      	pop	{r4, r6, r7, pc}
   d7014:	3df00000 	.word	0x3df00000
   d7018:	41f00000 	.word	0x41f00000

000d701c <__udivmoddi4>:
   d701c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7020:	9d08      	ldr	r5, [sp, #32]
   d7022:	4604      	mov	r4, r0
   d7024:	468c      	mov	ip, r1
   d7026:	2b00      	cmp	r3, #0
   d7028:	f040 8083 	bne.w	d7132 <__udivmoddi4+0x116>
   d702c:	428a      	cmp	r2, r1
   d702e:	4617      	mov	r7, r2
   d7030:	d947      	bls.n	d70c2 <__udivmoddi4+0xa6>
   d7032:	fab2 f282 	clz	r2, r2
   d7036:	b142      	cbz	r2, d704a <__udivmoddi4+0x2e>
   d7038:	f1c2 0020 	rsb	r0, r2, #32
   d703c:	fa24 f000 	lsr.w	r0, r4, r0
   d7040:	4091      	lsls	r1, r2
   d7042:	4097      	lsls	r7, r2
   d7044:	ea40 0c01 	orr.w	ip, r0, r1
   d7048:	4094      	lsls	r4, r2
   d704a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d704e:	0c23      	lsrs	r3, r4, #16
   d7050:	fbbc f6f8 	udiv	r6, ip, r8
   d7054:	fa1f fe87 	uxth.w	lr, r7
   d7058:	fb08 c116 	mls	r1, r8, r6, ip
   d705c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7060:	fb06 f10e 	mul.w	r1, r6, lr
   d7064:	4299      	cmp	r1, r3
   d7066:	d909      	bls.n	d707c <__udivmoddi4+0x60>
   d7068:	18fb      	adds	r3, r7, r3
   d706a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d706e:	f080 8119 	bcs.w	d72a4 <__udivmoddi4+0x288>
   d7072:	4299      	cmp	r1, r3
   d7074:	f240 8116 	bls.w	d72a4 <__udivmoddi4+0x288>
   d7078:	3e02      	subs	r6, #2
   d707a:	443b      	add	r3, r7
   d707c:	1a5b      	subs	r3, r3, r1
   d707e:	b2a4      	uxth	r4, r4
   d7080:	fbb3 f0f8 	udiv	r0, r3, r8
   d7084:	fb08 3310 	mls	r3, r8, r0, r3
   d7088:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d708c:	fb00 fe0e 	mul.w	lr, r0, lr
   d7090:	45a6      	cmp	lr, r4
   d7092:	d909      	bls.n	d70a8 <__udivmoddi4+0x8c>
   d7094:	193c      	adds	r4, r7, r4
   d7096:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d709a:	f080 8105 	bcs.w	d72a8 <__udivmoddi4+0x28c>
   d709e:	45a6      	cmp	lr, r4
   d70a0:	f240 8102 	bls.w	d72a8 <__udivmoddi4+0x28c>
   d70a4:	3802      	subs	r0, #2
   d70a6:	443c      	add	r4, r7
   d70a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d70ac:	eba4 040e 	sub.w	r4, r4, lr
   d70b0:	2600      	movs	r6, #0
   d70b2:	b11d      	cbz	r5, d70bc <__udivmoddi4+0xa0>
   d70b4:	40d4      	lsrs	r4, r2
   d70b6:	2300      	movs	r3, #0
   d70b8:	e9c5 4300 	strd	r4, r3, [r5]
   d70bc:	4631      	mov	r1, r6
   d70be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d70c2:	b902      	cbnz	r2, d70c6 <__udivmoddi4+0xaa>
   d70c4:	deff      	udf	#255	; 0xff
   d70c6:	fab2 f282 	clz	r2, r2
   d70ca:	2a00      	cmp	r2, #0
   d70cc:	d150      	bne.n	d7170 <__udivmoddi4+0x154>
   d70ce:	1bcb      	subs	r3, r1, r7
   d70d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d70d4:	fa1f f887 	uxth.w	r8, r7
   d70d8:	2601      	movs	r6, #1
   d70da:	fbb3 fcfe 	udiv	ip, r3, lr
   d70de:	0c21      	lsrs	r1, r4, #16
   d70e0:	fb0e 331c 	mls	r3, lr, ip, r3
   d70e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d70e8:	fb08 f30c 	mul.w	r3, r8, ip
   d70ec:	428b      	cmp	r3, r1
   d70ee:	d907      	bls.n	d7100 <__udivmoddi4+0xe4>
   d70f0:	1879      	adds	r1, r7, r1
   d70f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d70f6:	d202      	bcs.n	d70fe <__udivmoddi4+0xe2>
   d70f8:	428b      	cmp	r3, r1
   d70fa:	f200 80e9 	bhi.w	d72d0 <__udivmoddi4+0x2b4>
   d70fe:	4684      	mov	ip, r0
   d7100:	1ac9      	subs	r1, r1, r3
   d7102:	b2a3      	uxth	r3, r4
   d7104:	fbb1 f0fe 	udiv	r0, r1, lr
   d7108:	fb0e 1110 	mls	r1, lr, r0, r1
   d710c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d7110:	fb08 f800 	mul.w	r8, r8, r0
   d7114:	45a0      	cmp	r8, r4
   d7116:	d907      	bls.n	d7128 <__udivmoddi4+0x10c>
   d7118:	193c      	adds	r4, r7, r4
   d711a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d711e:	d202      	bcs.n	d7126 <__udivmoddi4+0x10a>
   d7120:	45a0      	cmp	r8, r4
   d7122:	f200 80d9 	bhi.w	d72d8 <__udivmoddi4+0x2bc>
   d7126:	4618      	mov	r0, r3
   d7128:	eba4 0408 	sub.w	r4, r4, r8
   d712c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d7130:	e7bf      	b.n	d70b2 <__udivmoddi4+0x96>
   d7132:	428b      	cmp	r3, r1
   d7134:	d909      	bls.n	d714a <__udivmoddi4+0x12e>
   d7136:	2d00      	cmp	r5, #0
   d7138:	f000 80b1 	beq.w	d729e <__udivmoddi4+0x282>
   d713c:	2600      	movs	r6, #0
   d713e:	e9c5 0100 	strd	r0, r1, [r5]
   d7142:	4630      	mov	r0, r6
   d7144:	4631      	mov	r1, r6
   d7146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d714a:	fab3 f683 	clz	r6, r3
   d714e:	2e00      	cmp	r6, #0
   d7150:	d14a      	bne.n	d71e8 <__udivmoddi4+0x1cc>
   d7152:	428b      	cmp	r3, r1
   d7154:	d302      	bcc.n	d715c <__udivmoddi4+0x140>
   d7156:	4282      	cmp	r2, r0
   d7158:	f200 80b8 	bhi.w	d72cc <__udivmoddi4+0x2b0>
   d715c:	1a84      	subs	r4, r0, r2
   d715e:	eb61 0103 	sbc.w	r1, r1, r3
   d7162:	2001      	movs	r0, #1
   d7164:	468c      	mov	ip, r1
   d7166:	2d00      	cmp	r5, #0
   d7168:	d0a8      	beq.n	d70bc <__udivmoddi4+0xa0>
   d716a:	e9c5 4c00 	strd	r4, ip, [r5]
   d716e:	e7a5      	b.n	d70bc <__udivmoddi4+0xa0>
   d7170:	f1c2 0320 	rsb	r3, r2, #32
   d7174:	fa20 f603 	lsr.w	r6, r0, r3
   d7178:	4097      	lsls	r7, r2
   d717a:	fa01 f002 	lsl.w	r0, r1, r2
   d717e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d7182:	40d9      	lsrs	r1, r3
   d7184:	4330      	orrs	r0, r6
   d7186:	0c03      	lsrs	r3, r0, #16
   d7188:	fbb1 f6fe 	udiv	r6, r1, lr
   d718c:	fa1f f887 	uxth.w	r8, r7
   d7190:	fb0e 1116 	mls	r1, lr, r6, r1
   d7194:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7198:	fb06 f108 	mul.w	r1, r6, r8
   d719c:	4299      	cmp	r1, r3
   d719e:	fa04 f402 	lsl.w	r4, r4, r2
   d71a2:	d909      	bls.n	d71b8 <__udivmoddi4+0x19c>
   d71a4:	18fb      	adds	r3, r7, r3
   d71a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d71aa:	f080 808d 	bcs.w	d72c8 <__udivmoddi4+0x2ac>
   d71ae:	4299      	cmp	r1, r3
   d71b0:	f240 808a 	bls.w	d72c8 <__udivmoddi4+0x2ac>
   d71b4:	3e02      	subs	r6, #2
   d71b6:	443b      	add	r3, r7
   d71b8:	1a5b      	subs	r3, r3, r1
   d71ba:	b281      	uxth	r1, r0
   d71bc:	fbb3 f0fe 	udiv	r0, r3, lr
   d71c0:	fb0e 3310 	mls	r3, lr, r0, r3
   d71c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d71c8:	fb00 f308 	mul.w	r3, r0, r8
   d71cc:	428b      	cmp	r3, r1
   d71ce:	d907      	bls.n	d71e0 <__udivmoddi4+0x1c4>
   d71d0:	1879      	adds	r1, r7, r1
   d71d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d71d6:	d273      	bcs.n	d72c0 <__udivmoddi4+0x2a4>
   d71d8:	428b      	cmp	r3, r1
   d71da:	d971      	bls.n	d72c0 <__udivmoddi4+0x2a4>
   d71dc:	3802      	subs	r0, #2
   d71de:	4439      	add	r1, r7
   d71e0:	1acb      	subs	r3, r1, r3
   d71e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d71e6:	e778      	b.n	d70da <__udivmoddi4+0xbe>
   d71e8:	f1c6 0c20 	rsb	ip, r6, #32
   d71ec:	fa03 f406 	lsl.w	r4, r3, r6
   d71f0:	fa22 f30c 	lsr.w	r3, r2, ip
   d71f4:	431c      	orrs	r4, r3
   d71f6:	fa20 f70c 	lsr.w	r7, r0, ip
   d71fa:	fa01 f306 	lsl.w	r3, r1, r6
   d71fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d7202:	fa21 f10c 	lsr.w	r1, r1, ip
   d7206:	431f      	orrs	r7, r3
   d7208:	0c3b      	lsrs	r3, r7, #16
   d720a:	fbb1 f9fe 	udiv	r9, r1, lr
   d720e:	fa1f f884 	uxth.w	r8, r4
   d7212:	fb0e 1119 	mls	r1, lr, r9, r1
   d7216:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d721a:	fb09 fa08 	mul.w	sl, r9, r8
   d721e:	458a      	cmp	sl, r1
   d7220:	fa02 f206 	lsl.w	r2, r2, r6
   d7224:	fa00 f306 	lsl.w	r3, r0, r6
   d7228:	d908      	bls.n	d723c <__udivmoddi4+0x220>
   d722a:	1861      	adds	r1, r4, r1
   d722c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7230:	d248      	bcs.n	d72c4 <__udivmoddi4+0x2a8>
   d7232:	458a      	cmp	sl, r1
   d7234:	d946      	bls.n	d72c4 <__udivmoddi4+0x2a8>
   d7236:	f1a9 0902 	sub.w	r9, r9, #2
   d723a:	4421      	add	r1, r4
   d723c:	eba1 010a 	sub.w	r1, r1, sl
   d7240:	b2bf      	uxth	r7, r7
   d7242:	fbb1 f0fe 	udiv	r0, r1, lr
   d7246:	fb0e 1110 	mls	r1, lr, r0, r1
   d724a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d724e:	fb00 f808 	mul.w	r8, r0, r8
   d7252:	45b8      	cmp	r8, r7
   d7254:	d907      	bls.n	d7266 <__udivmoddi4+0x24a>
   d7256:	19e7      	adds	r7, r4, r7
   d7258:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d725c:	d22e      	bcs.n	d72bc <__udivmoddi4+0x2a0>
   d725e:	45b8      	cmp	r8, r7
   d7260:	d92c      	bls.n	d72bc <__udivmoddi4+0x2a0>
   d7262:	3802      	subs	r0, #2
   d7264:	4427      	add	r7, r4
   d7266:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d726a:	eba7 0708 	sub.w	r7, r7, r8
   d726e:	fba0 8902 	umull	r8, r9, r0, r2
   d7272:	454f      	cmp	r7, r9
   d7274:	46c6      	mov	lr, r8
   d7276:	4649      	mov	r1, r9
   d7278:	d31a      	bcc.n	d72b0 <__udivmoddi4+0x294>
   d727a:	d017      	beq.n	d72ac <__udivmoddi4+0x290>
   d727c:	b15d      	cbz	r5, d7296 <__udivmoddi4+0x27a>
   d727e:	ebb3 020e 	subs.w	r2, r3, lr
   d7282:	eb67 0701 	sbc.w	r7, r7, r1
   d7286:	fa07 fc0c 	lsl.w	ip, r7, ip
   d728a:	40f2      	lsrs	r2, r6
   d728c:	ea4c 0202 	orr.w	r2, ip, r2
   d7290:	40f7      	lsrs	r7, r6
   d7292:	e9c5 2700 	strd	r2, r7, [r5]
   d7296:	2600      	movs	r6, #0
   d7298:	4631      	mov	r1, r6
   d729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d729e:	462e      	mov	r6, r5
   d72a0:	4628      	mov	r0, r5
   d72a2:	e70b      	b.n	d70bc <__udivmoddi4+0xa0>
   d72a4:	4606      	mov	r6, r0
   d72a6:	e6e9      	b.n	d707c <__udivmoddi4+0x60>
   d72a8:	4618      	mov	r0, r3
   d72aa:	e6fd      	b.n	d70a8 <__udivmoddi4+0x8c>
   d72ac:	4543      	cmp	r3, r8
   d72ae:	d2e5      	bcs.n	d727c <__udivmoddi4+0x260>
   d72b0:	ebb8 0e02 	subs.w	lr, r8, r2
   d72b4:	eb69 0104 	sbc.w	r1, r9, r4
   d72b8:	3801      	subs	r0, #1
   d72ba:	e7df      	b.n	d727c <__udivmoddi4+0x260>
   d72bc:	4608      	mov	r0, r1
   d72be:	e7d2      	b.n	d7266 <__udivmoddi4+0x24a>
   d72c0:	4660      	mov	r0, ip
   d72c2:	e78d      	b.n	d71e0 <__udivmoddi4+0x1c4>
   d72c4:	4681      	mov	r9, r0
   d72c6:	e7b9      	b.n	d723c <__udivmoddi4+0x220>
   d72c8:	4666      	mov	r6, ip
   d72ca:	e775      	b.n	d71b8 <__udivmoddi4+0x19c>
   d72cc:	4630      	mov	r0, r6
   d72ce:	e74a      	b.n	d7166 <__udivmoddi4+0x14a>
   d72d0:	f1ac 0c02 	sub.w	ip, ip, #2
   d72d4:	4439      	add	r1, r7
   d72d6:	e713      	b.n	d7100 <__udivmoddi4+0xe4>
   d72d8:	3802      	subs	r0, #2
   d72da:	443c      	add	r4, r7
   d72dc:	e724      	b.n	d7128 <__udivmoddi4+0x10c>
   d72de:	bf00      	nop

000d72e0 <__aeabi_idiv0>:
   d72e0:	4770      	bx	lr
   d72e2:	bf00      	nop

000d72e4 <calloc>:
   d72e4:	4b02      	ldr	r3, [pc, #8]	; (d72f0 <calloc+0xc>)
   d72e6:	460a      	mov	r2, r1
   d72e8:	4601      	mov	r1, r0
   d72ea:	6818      	ldr	r0, [r3, #0]
   d72ec:	f000 b840 	b.w	d7370 <_calloc_r>
   d72f0:	2003e588 	.word	0x2003e588

000d72f4 <__cxa_atexit>:
   d72f4:	b510      	push	{r4, lr}
   d72f6:	4c05      	ldr	r4, [pc, #20]	; (d730c <__cxa_atexit+0x18>)
   d72f8:	4613      	mov	r3, r2
   d72fa:	b12c      	cbz	r4, d7308 <__cxa_atexit+0x14>
   d72fc:	460a      	mov	r2, r1
   d72fe:	4601      	mov	r1, r0
   d7300:	2002      	movs	r0, #2
   d7302:	f3af 8000 	nop.w
   d7306:	bd10      	pop	{r4, pc}
   d7308:	4620      	mov	r0, r4
   d730a:	e7fc      	b.n	d7306 <__cxa_atexit+0x12>
   d730c:	00000000 	.word	0x00000000

000d7310 <memcpy>:
   d7310:	440a      	add	r2, r1
   d7312:	4291      	cmp	r1, r2
   d7314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7318:	d100      	bne.n	d731c <memcpy+0xc>
   d731a:	4770      	bx	lr
   d731c:	b510      	push	{r4, lr}
   d731e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7322:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7326:	4291      	cmp	r1, r2
   d7328:	d1f9      	bne.n	d731e <memcpy+0xe>
   d732a:	bd10      	pop	{r4, pc}

000d732c <memmove>:
   d732c:	4288      	cmp	r0, r1
   d732e:	b510      	push	{r4, lr}
   d7330:	eb01 0402 	add.w	r4, r1, r2
   d7334:	d902      	bls.n	d733c <memmove+0x10>
   d7336:	4284      	cmp	r4, r0
   d7338:	4623      	mov	r3, r4
   d733a:	d807      	bhi.n	d734c <memmove+0x20>
   d733c:	1e43      	subs	r3, r0, #1
   d733e:	42a1      	cmp	r1, r4
   d7340:	d008      	beq.n	d7354 <memmove+0x28>
   d7342:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7346:	f803 2f01 	strb.w	r2, [r3, #1]!
   d734a:	e7f8      	b.n	d733e <memmove+0x12>
   d734c:	4402      	add	r2, r0
   d734e:	4601      	mov	r1, r0
   d7350:	428a      	cmp	r2, r1
   d7352:	d100      	bne.n	d7356 <memmove+0x2a>
   d7354:	bd10      	pop	{r4, pc}
   d7356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d735a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d735e:	e7f7      	b.n	d7350 <memmove+0x24>

000d7360 <memset>:
   d7360:	4402      	add	r2, r0
   d7362:	4603      	mov	r3, r0
   d7364:	4293      	cmp	r3, r2
   d7366:	d100      	bne.n	d736a <memset+0xa>
   d7368:	4770      	bx	lr
   d736a:	f803 1b01 	strb.w	r1, [r3], #1
   d736e:	e7f9      	b.n	d7364 <memset+0x4>

000d7370 <_calloc_r>:
   d7370:	b513      	push	{r0, r1, r4, lr}
   d7372:	434a      	muls	r2, r1
   d7374:	4611      	mov	r1, r2
   d7376:	9201      	str	r2, [sp, #4]
   d7378:	f7fd fe7a 	bl	d5070 <_malloc_r>
   d737c:	4604      	mov	r4, r0
   d737e:	b118      	cbz	r0, d7388 <_calloc_r+0x18>
   d7380:	9a01      	ldr	r2, [sp, #4]
   d7382:	2100      	movs	r1, #0
   d7384:	f7ff ffec 	bl	d7360 <memset>
   d7388:	4620      	mov	r0, r4
   d738a:	b002      	add	sp, #8
   d738c:	bd10      	pop	{r4, pc}
	...

000d7390 <srand>:
   d7390:	b538      	push	{r3, r4, r5, lr}
   d7392:	4b0d      	ldr	r3, [pc, #52]	; (d73c8 <srand+0x38>)
   d7394:	681d      	ldr	r5, [r3, #0]
   d7396:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7398:	4604      	mov	r4, r0
   d739a:	b97b      	cbnz	r3, d73bc <srand+0x2c>
   d739c:	2018      	movs	r0, #24
   d739e:	f7fd fe47 	bl	d5030 <malloc>
   d73a2:	4a0a      	ldr	r2, [pc, #40]	; (d73cc <srand+0x3c>)
   d73a4:	4b0a      	ldr	r3, [pc, #40]	; (d73d0 <srand+0x40>)
   d73a6:	63a8      	str	r0, [r5, #56]	; 0x38
   d73a8:	e9c0 2300 	strd	r2, r3, [r0]
   d73ac:	4b09      	ldr	r3, [pc, #36]	; (d73d4 <srand+0x44>)
   d73ae:	6083      	str	r3, [r0, #8]
   d73b0:	230b      	movs	r3, #11
   d73b2:	8183      	strh	r3, [r0, #12]
   d73b4:	2201      	movs	r2, #1
   d73b6:	2300      	movs	r3, #0
   d73b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d73bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d73be:	2200      	movs	r2, #0
   d73c0:	611c      	str	r4, [r3, #16]
   d73c2:	615a      	str	r2, [r3, #20]
   d73c4:	bd38      	pop	{r3, r4, r5, pc}
   d73c6:	bf00      	nop
   d73c8:	2003e588 	.word	0x2003e588
   d73cc:	abcd330e 	.word	0xabcd330e
   d73d0:	e66d1234 	.word	0xe66d1234
   d73d4:	0005deec 	.word	0x0005deec

000d73d8 <strcpy>:
   d73d8:	4603      	mov	r3, r0
   d73da:	f811 2b01 	ldrb.w	r2, [r1], #1
   d73de:	f803 2b01 	strb.w	r2, [r3], #1
   d73e2:	2a00      	cmp	r2, #0
   d73e4:	d1f9      	bne.n	d73da <strcpy+0x2>
   d73e6:	4770      	bx	lr

000d73e8 <strdup>:
   d73e8:	4b02      	ldr	r3, [pc, #8]	; (d73f4 <strdup+0xc>)
   d73ea:	4601      	mov	r1, r0
   d73ec:	6818      	ldr	r0, [r3, #0]
   d73ee:	f000 b803 	b.w	d73f8 <_strdup_r>
   d73f2:	bf00      	nop
   d73f4:	2003e588 	.word	0x2003e588

000d73f8 <_strdup_r>:
   d73f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73fa:	4604      	mov	r4, r0
   d73fc:	4608      	mov	r0, r1
   d73fe:	460d      	mov	r5, r1
   d7400:	f000 f80f 	bl	d7422 <strlen>
   d7404:	1c42      	adds	r2, r0, #1
   d7406:	4611      	mov	r1, r2
   d7408:	4620      	mov	r0, r4
   d740a:	9201      	str	r2, [sp, #4]
   d740c:	f7fd fe30 	bl	d5070 <_malloc_r>
   d7410:	4604      	mov	r4, r0
   d7412:	b118      	cbz	r0, d741c <_strdup_r+0x24>
   d7414:	9a01      	ldr	r2, [sp, #4]
   d7416:	4629      	mov	r1, r5
   d7418:	f7ff ff7a 	bl	d7310 <memcpy>
   d741c:	4620      	mov	r0, r4
   d741e:	b003      	add	sp, #12
   d7420:	bd30      	pop	{r4, r5, pc}

000d7422 <strlen>:
   d7422:	4603      	mov	r3, r0
   d7424:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7428:	2a00      	cmp	r2, #0
   d742a:	d1fb      	bne.n	d7424 <strlen+0x2>
   d742c:	1a18      	subs	r0, r3, r0
   d742e:	3801      	subs	r0, #1
   d7430:	4770      	bx	lr

000d7432 <link_code_end>:
	...

000d7434 <dynalib_user>:
   d7434:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d7444:	0000 0000 4844 3154 2031 6574 7473 5000     ....DHT11 test.P
   d7454:	7261 6974 6c63 0065 6557 7461 6568 0072     article.Weather.
   d7464:	7453 7461 6f69 006e 472f 7465 6557 7461     Station./GetWeat
   d7474:	6568 4672 726f 6365 7361 2f74 4900 646e     herForecast/.Ind
   d7484:	6f6f 2072 6554 706d 203a 4900 646e 6f6f     oor Temp: .Indoo
   d7494:	2072 7548 646d 203a 2500 4600 6961 656c     r Humd: .%.Faile
   d74a4:	2064 6f74 7220 6165 2064 7266 6d6f 4420     d to read from D
   d74b4:	5448 7320 6e65 6f73 0072 6574 706d 0046     HT sensor.tempF.
   d74c4:	7568 696d 0064                              humid.

000d74ca <_ZL9BasicFont>:
	...
   d74d2:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d74e2:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d74f2:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d7502:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d7512:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d7522:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d7532:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d7542:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d7552:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d7562:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d7572:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d7582:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d7592:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d75a2:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d75b2:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d75c2:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d75d2:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d75e2:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d75f2:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d7602:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d7612:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d7622:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d7632:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d7642:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d7652:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d7662:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d7672:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d7682:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d7692:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d76a2:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d76b2:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d76c2:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d76d2:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d76e2:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d76f2:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d7702:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d7712:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d7722:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d7732:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d7742:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d7752:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d7762:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d7772:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d7782:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d7792:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d77a2:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d77b2:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d77c2:	0200 0505 0002 0000 0000                    ..........

000d77cc <_ZTVN5spark13CellularClassE>:
	...
   d77d4:	519b 000d 5191 000d 5187 000d 513d 000d     .Q...Q...Q..=Q..
   d77e4:	517b 000d 516f 000d 5ce5 000d 5ced 000d     {Q..oQ...\...\..
   d77f4:	5163 000d 515b 000d 5151 000d 5147 000d     cQ..[Q..QQ..GQ..
   d7804:	5d1d 000d                                   .]..

000d7808 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7810:	51d5 000d 51db 000d 5219 000d 51e9 000d     .Q...Q...R...Q..
   d7820:	51d7 000d                                   .Q..

000d7824 <_ZTVN5spark13EthernetClassE>:
	...
   d782c:	576b 000d 5761 000d 5757 000d 574d 000d     kW..aW..WW..MW..
   d783c:	5741 000d 5735 000d 5ce5 000d 5ced 000d     AW..5W...\...\..
   d784c:	5729 000d 5721 000d 5717 000d 570d 000d     )W..!W...W...W..
   d785c:	5d1d 000d                                   .]..

000d7860 <_ZTV7TwoWire>:
	...
   d7868:	5789 000d 57d3 000d 57ab 000d 578b 000d     .W...W...W...W..
   d7878:	57b3 000d 57bb 000d 57c3 000d 57cb 000d     .W...W...W...W..

000d7888 <_ZTV9IPAddress>:
	...
   d7890:	5845 000d 5835 000d 5837 000d               EX..5X..7X..

000d789c <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d78a4:	5921 000d 5927 000d 593d 000d 5935 000d     !Y..'Y..=Y..5Y..
   d78b4:	5923 000d 7061 0070                         #Y..app.

000d78bc <_ZTVN5spark12NetworkClassE>:
	...
   d78c4:	5ca5 000d 5caf 000d 5cb9 000d 5cc3 000d     .\...\...\...\..
   d78d4:	5ccd 000d 5cd9 000d 5ce5 000d 5ced 000d     .\...\...\...\..
   d78e4:	5cf5 000d 5d01 000d 5d09 000d 5d13 000d     .\...]...]...]..
   d78f4:	5d1d 000d 5925 252d 2d6d 6425 2554 3a48     .]..%Y-%m-%dT%H:
   d7904:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d7914 <_ZTV11USARTSerial>:
	...
   d791c:	61b1 000d 621d 000d 61f5 000d 5e11 000d     .a...b...a...^..
   d792c:	61c5 000d 61e1 000d 61d3 000d 61ef 000d     .a...a...a...a..
   d793c:	61b3 000d 61b7 000d                         .a...a..

000d7944 <_ZTV9USBSerial>:
	...
   d794c:	62b1 000d 6319 000d 62ef 000d 5e11 000d     .b...c...b...^..
   d795c:	62e1 000d 62b3 000d 62c3 000d 6313 000d     .b...b...b...c..
   d796c:	62d3 000d 62ad 000d                         .b...b..

000d7974 <_ZSt7nothrow>:
	...

000d7975 <link_const_variable_data_end>:
   d7975:	00          	.byte	0x00
	...

000d7978 <link_constructors_location>:
   d7978:	000d4379 	.word	0x000d4379
   d797c:	000d5115 	.word	0x000d5115
   d7980:	000d51a5 	.word	0x000d51a5
   d7984:	000d5775 	.word	0x000d5775
   d7988:	000d5c95 	.word	0x000d5c95
   d798c:	000d5dfd 	.word	0x000d5dfd
   d7990:	000d5edd 	.word	0x000d5edd
   d7994:	000d6161 	.word	0x000d6161
   d7998:	000d619d 	.word	0x000d619d

000d799c <link_constructors_end>:
   d799c:	00000000 	.word	0x00000000
