
/Users/talalagedeon/Desktop/particlePDP/shortproject/target/3.0.0/boron/shortproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009540  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dd560  000dd560  0000d560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dd568  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  2003e258  000dd56c  0001e258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003b0  2003e440  2003e440  0002e440  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000dd754  000dd754  0002d754  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000dd77c  000dd77c  0002d77c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00283cd3  00000000  00000000  0002d780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00024cb7  00000000  00000000  002b1453  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000473a6  00000000  00000000  002d610a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003678  00000000  00000000  0031d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000b9a0  00000000  00000000  00320b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000467e5  00000000  00000000  0032c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005d32d  00000000  00000000  00372cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00142e6a  00000000  00000000  003cffda  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000a714  00000000  00000000  00512e44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fbad 	bl	da790 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fbcf 	bl	da7e0 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e258 	.word	0x2003e258
   d404c:	000dd56c 	.word	0x000dd56c
   d4050:	2003e440 	.word	0x2003e440
   d4054:	2003e440 	.word	0x2003e440
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 fa27 	bl	d94b4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dd51c 	.word	0x000dd51c
   d4080:	000dd554 	.word	0x000dd554

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83e 	b.w	d4104 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9f7 	bl	d447c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 b9d1 	b.w	d9438 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 b865 	b.w	d7164 <malloc>

000d409a <_Znaj>:
   d409a:	f003 b863 	b.w	d7164 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 b869 	b.w	d7174 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f003 b867 	b.w	d7174 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b8:	b513      	push	{r0, r1, r4, lr}
   d40ba:	4b05      	ldr	r3, [pc, #20]	; (d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40bc:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40be:	f88d 3000 	strb.w	r3, [sp]
   d40c2:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40c4:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c6:	f003 fa45 	bl	d7554 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40ca:	4620      	mov	r0, r4
   d40cc:	b002      	add	sp, #8
   d40ce:	bd10      	pop	{r4, pc}
   d40d0:	2003e444 	.word	0x2003e444

000d40d4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40d4:	b40e      	push	{r1, r2, r3}
   d40d6:	b510      	push	{r4, lr}
   d40d8:	b08d      	sub	sp, #52	; 0x34
   d40da:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d40dc:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d40de:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d40e2:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40e4:	2300      	movs	r3, #0
   d40e6:	2020      	movs	r0, #32
   d40e8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40ec:	e9cd 4200 	strd	r4, r2, [sp]
   d40f0:	201e      	movs	r0, #30
   d40f2:	aa04      	add	r2, sp, #16
   d40f4:	f002 ff6a 	bl	d6fcc <log_message_v>
}
   d40f8:	b00d      	add	sp, #52	; 0x34
   d40fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40fe:	b003      	add	sp, #12
   d4100:	4770      	bx	lr
	...

000d4104 <setup>:

// Read Temp Data
float temp = dht.getTempFarenheit();


void setup() {
   d4104:	b510      	push	{r4, lr}
   d4106:	b08a      	sub	sp, #40	; 0x28
  Serial.begin(9600);
   d4108:	f005 f90e 	bl	d9328 <_Z16_fetch_usbserialv>
   d410c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4110:	f005 f8fe 	bl	d9310 <_ZN9USBSerial5beginEl>
  Serial.println("Active Wear Station"); 
   d4114:	f005 f908 	bl	d9328 <_Z16_fetch_usbserialv>
   d4118:	492c      	ldr	r1, [pc, #176]	; (d41cc <setup+0xc8>)
  leds.init();

  Wire.begin();

// initialize display library
  SeeedOled.init(); 
   d411a:	4c2d      	ldr	r4, [pc, #180]	; (d41d0 <setup+0xcc>)
  Serial.println("Active Wear Station"); 
   d411c:	f004 f813 	bl	d8146 <_ZN5Print7printlnEPKc>
  dht.begin();
   d4120:	482c      	ldr	r0, [pc, #176]	; (d41d4 <setup+0xd0>)
   d4122:	f000 fcc5 	bl	d4ab0 <_ZN3DHT5beginEv>
  leds.init();
   d4126:	482c      	ldr	r0, [pc, #176]	; (d41d8 <setup+0xd4>)
   d4128:	f000 ffa6 	bl	d5078 <_ZN12ChainableLED4initEv>
  Wire.begin();
   d412c:	f005 fa74 	bl	d9618 <_Z19__fetch_global_Wirev>
   d4130:	f003 fc02 	bl	d7938 <_ZN7TwoWire5beginEv>
  SeeedOled.init(); 
   d4134:	4620      	mov	r0, r4
   d4136:	f000 ffd5 	bl	d50e4 <_ZN9SeeedOLED4initEv>

// Clearing display
  SeeedOled.clearDisplay();
   d413a:	4620      	mov	r0, r4
   d413c:	f001 f834 	bl	d51a8 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d4140:	4620      	mov	r0, r4
   d4142:	f001 f896 	bl	d5272 <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d4146:	4620      	mov	r0, r4
   d4148:	f000 ffde 	bl	d5108 <_ZN9SeeedOLED11setPageModeEv>

// Adding Active Wear Station at setup
  SeeedOled.setTextXY(2, 0);
   d414c:	2200      	movs	r2, #0
   d414e:	4620      	mov	r0, r4
   d4150:	2102      	movs	r1, #2
   d4152:	f000 ffe4 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Active");
   d4156:	4620      	mov	r0, r4
   d4158:	4920      	ldr	r1, [pc, #128]	; (d41dc <setup+0xd8>)
   d415a:	f001 f846 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d415e:	2200      	movs	r2, #0
   d4160:	4620      	mov	r0, r4
   d4162:	2103      	movs	r1, #3
   d4164:	f000 ffdb 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Wear");
   d4168:	4620      	mov	r0, r4
   d416a:	491d      	ldr	r1, [pc, #116]	; (d41e0 <setup+0xdc>)
   d416c:	f001 f83d 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4170:	2200      	movs	r2, #0
   d4172:	4620      	mov	r0, r4
   d4174:	2104      	movs	r1, #4
   d4176:	f000 ffd2 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Suggestion");
   d417a:	4620      	mov	r0, r4
   d417c:	4919      	ldr	r1, [pc, #100]	; (d41e4 <setup+0xe0>)
   d417e:	f001 f834 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(5, 0);
   d4182:	2200      	movs	r2, #0
   d4184:	4620      	mov	r0, r4
   d4186:	2105      	movs	r1, #5
   d4188:	f000 ffc9 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Station");
   d418c:	4916      	ldr	r1, [pc, #88]	; (d41e8 <setup+0xe4>)
   d418e:	4620      	mov	r0, r4
   d4190:	f001 f82b 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4194:	a802      	add	r0, sp, #8
   d4196:	f002 ff65 	bl	d7064 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d419a:	a902      	add	r1, sp, #8
   d419c:	a806      	add	r0, sp, #24
   d419e:	f004 f9a5 	bl	d84ec <_ZN6StringC1ERKS_>

// Subscribing to GetWeatherForecast webhook
  Particle.subscribe(System.deviceID() + "/GetWeatherForecast/", setCurrentWeather, MY_DEVICES);
   d41a2:	4912      	ldr	r1, [pc, #72]	; (d41ec <setup+0xe8>)
   d41a4:	a806      	add	r0, sp, #24
   d41a6:	f004 fa03 	bl	d85b0 <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d41aa:	2300      	movs	r3, #0
   d41ac:	e9cd 3300 	strd	r3, r3, [sp]
   d41b0:	490f      	ldr	r1, [pc, #60]	; (d41f0 <setup+0xec>)
   d41b2:	6800      	ldr	r0, [r0, #0]
   d41b4:	461a      	mov	r2, r3
   d41b6:	f002 ff65 	bl	d7084 <spark_subscribe>
class StringSumHelper : public String
   d41ba:	a806      	add	r0, sp, #24
   d41bc:	f004 f93c 	bl	d8438 <_ZN6StringD1Ev>
   d41c0:	a802      	add	r0, sp, #8
   d41c2:	f004 f939 	bl	d8438 <_ZN6StringD1Ev>
}
   d41c6:	b00a      	add	sp, #40	; 0x28
   d41c8:	bd10      	pop	{r4, pc}
   d41ca:	bf00      	nop
   d41cc:	000dc624 	.word	0x000dc624
   d41d0:	2003e480 	.word	0x2003e480
   d41d4:	2003e448 	.word	0x2003e448
   d41d8:	2003e460 	.word	0x2003e460
   d41dc:	000dc638 	.word	0x000dc638
   d41e0:	000dc63f 	.word	0x000dc63f
   d41e4:	000dc644 	.word	0x000dc644
   d41e8:	000dc630 	.word	0x000dc630
   d41ec:	000dc64f 	.word	0x000dc64f
   d41f0:	000d4865 	.word	0x000d4865

000d41f4 <_Z13updateDisplaydd>:
        }
    }}

// Updating OLED Display
void updateDisplay (double inside, double outside)
{
   d41f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

// Clearing Display before updating
  SeeedOled.clearDisplay(), 
   d41f8:	4c27      	ldr	r4, [pc, #156]	; (d4298 <_Z13updateDisplaydd+0xa4>)
  SeeedOled.putString("Heat Indexes");

  SeeedOled.setTextXY(5, 0);
  SeeedOled.putString("In Index:");
  SeeedOled.putNumber(inside);
  SeeedOled.putString("F");
   d41fa:	4d28      	ldr	r5, [pc, #160]	; (d429c <_Z13updateDisplaydd+0xa8>)
  SeeedOled.clearDisplay(), 
   d41fc:	4620      	mov	r0, r4
{
   d41fe:	ec59 8b10 	vmov	r8, r9, d0
   d4202:	ec57 6b11 	vmov	r6, r7, d1
  SeeedOled.clearDisplay(), 
   d4206:	f000 ffcf 	bl	d51a8 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setTextXY(1, 0);
   d420a:	2200      	movs	r2, #0
   d420c:	4620      	mov	r0, r4
   d420e:	2101      	movs	r1, #1
   d4210:	f000 ff85 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Indoor (IN) &");
   d4214:	4620      	mov	r0, r4
   d4216:	4922      	ldr	r1, [pc, #136]	; (d42a0 <_Z13updateDisplaydd+0xac>)
   d4218:	f000 ffe7 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(2, 0);
   d421c:	2200      	movs	r2, #0
   d421e:	4620      	mov	r0, r4
   d4220:	2102      	movs	r1, #2
   d4222:	f000 ff7c 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Outdoor (Out)");
   d4226:	4620      	mov	r0, r4
   d4228:	491e      	ldr	r1, [pc, #120]	; (d42a4 <_Z13updateDisplaydd+0xb0>)
   d422a:	f000 ffde 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d422e:	2200      	movs	r2, #0
   d4230:	4620      	mov	r0, r4
   d4232:	2103      	movs	r1, #3
   d4234:	f000 ff73 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Heat Indexes");
   d4238:	4620      	mov	r0, r4
   d423a:	491b      	ldr	r1, [pc, #108]	; (d42a8 <_Z13updateDisplaydd+0xb4>)
   d423c:	f000 ffd5 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(5, 0);
   d4240:	2200      	movs	r2, #0
   d4242:	4620      	mov	r0, r4
   d4244:	2105      	movs	r1, #5
   d4246:	f000 ff6a 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("In Index:");
   d424a:	4620      	mov	r0, r4
   d424c:	4917      	ldr	r1, [pc, #92]	; (d42ac <_Z13updateDisplaydd+0xb8>)
   d424e:	f000 ffcc 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(inside);
   d4252:	4649      	mov	r1, r9
   d4254:	4640      	mov	r0, r8
   d4256:	f006 f84f 	bl	da2f8 <__aeabi_d2iz>
   d425a:	4601      	mov	r1, r0
   d425c:	4620      	mov	r0, r4
   d425e:	f000 ffd1 	bl	d5204 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("F");
   d4262:	4629      	mov	r1, r5
   d4264:	4620      	mov	r0, r4
   d4266:	f000 ffc0 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(6, 0);
   d426a:	2200      	movs	r2, #0
   d426c:	4620      	mov	r0, r4
   d426e:	2106      	movs	r1, #6
   d4270:	f000 ff55 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Out Index:");
   d4274:	4620      	mov	r0, r4
   d4276:	490e      	ldr	r1, [pc, #56]	; (d42b0 <_Z13updateDisplaydd+0xbc>)
   d4278:	f000 ffb7 	bl	d51ea <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(outside);
   d427c:	4639      	mov	r1, r7
   d427e:	4630      	mov	r0, r6
   d4280:	f006 f83a 	bl	da2f8 <__aeabi_d2iz>
   d4284:	4601      	mov	r1, r0
   d4286:	4620      	mov	r0, r4
   d4288:	f000 ffbc 	bl	d5204 <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("F");
   d428c:	4629      	mov	r1, r5
   d428e:	4620      	mov	r0, r4

}
   d4290:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  SeeedOled.putString("F");
   d4294:	f000 bfa9 	b.w	d51ea <_ZN9SeeedOLED9putStringEPKc>
   d4298:	2003e480 	.word	0x2003e480
   d429c:	000dc697 	.word	0x000dc697
   d42a0:	000dc664 	.word	0x000dc664
   d42a4:	000dc672 	.word	0x000dc672
   d42a8:	000dc680 	.word	0x000dc680
   d42ac:	000dc68d 	.word	0x000dc68d
   d42b0:	000dc699 	.word	0x000dc699
   d42b4:	00000000 	.word	0x00000000

000d42b8 <_Z15indoorHeatIndexdd>:

// Indoor heat index equation
double indoorHeatIndex (double temp, double humidity) {
   d42b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42bc:	ec55 4b10 	vmov	r4, r5, d0
   d42c0:	ed2d 8b02 	vpush	{d8}
    const double c9 = -0.00000199;

    double heatIndex = c1 + (c2 * temp) +
                           (c3 * humidity) +
                           (c4 * temp*humidity) + 
                           (c5 * (temp*temp)) +
   d42c4:	ee10 2a10 	vmov	r2, s0
   d42c8:	ee10 0a10 	vmov	r0, s0
   d42cc:	462b      	mov	r3, r5
   d42ce:	4629      	mov	r1, r5
double indoorHeatIndex (double temp, double humidity) {
   d42d0:	ec57 6b11 	vmov	r6, r7, d1
                           (c5 * (temp*temp)) +
   d42d4:	f005 fd60 	bl	d9d98 <__aeabi_dmul>
                           (c6 * (humidity * humidity)) +
   d42d8:	4632      	mov	r2, r6
                           (c5 * (temp*temp)) +
   d42da:	4682      	mov	sl, r0
   d42dc:	468b      	mov	fp, r1
                           (c6 * (humidity * humidity)) +
   d42de:	463b      	mov	r3, r7
   d42e0:	4630      	mov	r0, r6
   d42e2:	4639      	mov	r1, r7
   d42e4:	f005 fd58 	bl	d9d98 <__aeabi_dmul>
    double heatIndex = c1 + (c2 * temp) +
   d42e8:	a347      	add	r3, pc, #284	; (adr r3, d4408 <_Z15indoorHeatIndexdd+0x150>)
   d42ea:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c6 * (humidity * humidity)) +
   d42ee:	ec41 0b18 	vmov	d8, r0, r1
    double heatIndex = c1 + (c2 * temp) +
   d42f2:	4620      	mov	r0, r4
   d42f4:	4629      	mov	r1, r5
   d42f6:	f005 fd4f 	bl	d9d98 <__aeabi_dmul>
   d42fa:	a345      	add	r3, pc, #276	; (adr r3, d4410 <_Z15indoorHeatIndexdd+0x158>)
   d42fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4300:	f005 fb92 	bl	d9a28 <__aeabi_dsub>
                           (c3 * humidity) +
   d4304:	a344      	add	r3, pc, #272	; (adr r3, d4418 <_Z15indoorHeatIndexdd+0x160>)
   d4306:	e9d3 2300 	ldrd	r2, r3, [r3]
    double heatIndex = c1 + (c2 * temp) +
   d430a:	4680      	mov	r8, r0
   d430c:	4689      	mov	r9, r1
                           (c3 * humidity) +
   d430e:	4630      	mov	r0, r6
   d4310:	4639      	mov	r1, r7
   d4312:	f005 fd41 	bl	d9d98 <__aeabi_dmul>
   d4316:	4602      	mov	r2, r0
   d4318:	460b      	mov	r3, r1
    double heatIndex = c1 + (c2 * temp) +
   d431a:	4640      	mov	r0, r8
   d431c:	4649      	mov	r1, r9
   d431e:	f005 fb85 	bl	d9a2c <__adddf3>
                           (c4 * temp*humidity) + 
   d4322:	a33f      	add	r3, pc, #252	; (adr r3, d4420 <_Z15indoorHeatIndexdd+0x168>)
   d4324:	e9d3 2300 	ldrd	r2, r3, [r3]
    double heatIndex = c1 + (c2 * temp) +
   d4328:	4680      	mov	r8, r0
   d432a:	4689      	mov	r9, r1
                           (c4 * temp*humidity) + 
   d432c:	4620      	mov	r0, r4
   d432e:	4629      	mov	r1, r5
   d4330:	f005 fd32 	bl	d9d98 <__aeabi_dmul>
   d4334:	4632      	mov	r2, r6
   d4336:	463b      	mov	r3, r7
   d4338:	f005 fd2e 	bl	d9d98 <__aeabi_dmul>
   d433c:	4602      	mov	r2, r0
   d433e:	460b      	mov	r3, r1
                           (c3 * humidity) +
   d4340:	4640      	mov	r0, r8
   d4342:	4649      	mov	r1, r9
   d4344:	f005 fb72 	bl	d9a2c <__adddf3>
                           (c5 * (temp*temp)) +
   d4348:	a337      	add	r3, pc, #220	; (adr r3, d4428 <_Z15indoorHeatIndexdd+0x170>)
   d434a:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c3 * humidity) +
   d434e:	4680      	mov	r8, r0
   d4350:	4689      	mov	r9, r1
                           (c5 * (temp*temp)) +
   d4352:	4650      	mov	r0, sl
   d4354:	4659      	mov	r1, fp
   d4356:	f005 fd1f 	bl	d9d98 <__aeabi_dmul>
   d435a:	4602      	mov	r2, r0
   d435c:	460b      	mov	r3, r1
                           (c4 * temp*humidity) + 
   d435e:	4640      	mov	r0, r8
   d4360:	4649      	mov	r1, r9
   d4362:	f005 fb63 	bl	d9a2c <__adddf3>
                           (c6 * (humidity * humidity)) +
   d4366:	a332      	add	r3, pc, #200	; (adr r3, d4430 <_Z15indoorHeatIndexdd+0x178>)
   d4368:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c4 * temp*humidity) + 
   d436c:	4680      	mov	r8, r0
   d436e:	4689      	mov	r9, r1
                           (c6 * (humidity * humidity)) +
   d4370:	ec51 0b18 	vmov	r0, r1, d8
   d4374:	f005 fd10 	bl	d9d98 <__aeabi_dmul>
   d4378:	4602      	mov	r2, r0
   d437a:	460b      	mov	r3, r1
                           (c5 * (temp*temp)) +
   d437c:	4640      	mov	r0, r8
   d437e:	4649      	mov	r1, r9
   d4380:	f005 fb54 	bl	d9a2c <__adddf3>
                           (c7 * (temp * temp) * humidity) + 
   d4384:	a32c      	add	r3, pc, #176	; (adr r3, d4438 <_Z15indoorHeatIndexdd+0x180>)
   d4386:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c5 * (temp*temp)) +
   d438a:	4680      	mov	r8, r0
   d438c:	4689      	mov	r9, r1
                           (c7 * (temp * temp) * humidity) + 
   d438e:	4650      	mov	r0, sl
   d4390:	4659      	mov	r1, fp
   d4392:	f005 fd01 	bl	d9d98 <__aeabi_dmul>
   d4396:	4632      	mov	r2, r6
   d4398:	463b      	mov	r3, r7
   d439a:	f005 fcfd 	bl	d9d98 <__aeabi_dmul>
   d439e:	4602      	mov	r2, r0
   d43a0:	460b      	mov	r3, r1
                           (c6 * (humidity * humidity)) +
   d43a2:	4640      	mov	r0, r8
   d43a4:	4649      	mov	r1, r9
   d43a6:	f005 fb41 	bl	d9a2c <__adddf3>
                           (c8 * temp * (humidity * humidity)) +
   d43aa:	a325      	add	r3, pc, #148	; (adr r3, d4440 <_Z15indoorHeatIndexdd+0x188>)
   d43ac:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c6 * (humidity * humidity)) +
   d43b0:	4606      	mov	r6, r0
   d43b2:	460f      	mov	r7, r1
                           (c8 * temp * (humidity * humidity)) +
   d43b4:	4620      	mov	r0, r4
   d43b6:	4629      	mov	r1, r5
   d43b8:	f005 fcee 	bl	d9d98 <__aeabi_dmul>
   d43bc:	ec53 2b18 	vmov	r2, r3, d8
   d43c0:	f005 fcea 	bl	d9d98 <__aeabi_dmul>
   d43c4:	4602      	mov	r2, r0
   d43c6:	460b      	mov	r3, r1
                           (c7 * (temp * temp) * humidity) + 
   d43c8:	4630      	mov	r0, r6
   d43ca:	4639      	mov	r1, r7
   d43cc:	f005 fb2e 	bl	d9a2c <__adddf3>
                           (c9 * (temp * temp) * (humidity * humidity));
   d43d0:	a31d      	add	r3, pc, #116	; (adr r3, d4448 <_Z15indoorHeatIndexdd+0x190>)
   d43d2:	e9d3 2300 	ldrd	r2, r3, [r3]
                           (c7 * (temp * temp) * humidity) + 
   d43d6:	4604      	mov	r4, r0
   d43d8:	460d      	mov	r5, r1
                           (c9 * (temp * temp) * (humidity * humidity));
   d43da:	4650      	mov	r0, sl
   d43dc:	4659      	mov	r1, fp
   d43de:	f005 fcdb 	bl	d9d98 <__aeabi_dmul>
   d43e2:	ec53 2b18 	vmov	r2, r3, d8
   d43e6:	f005 fcd7 	bl	d9d98 <__aeabi_dmul>
   d43ea:	4602      	mov	r2, r0
   d43ec:	460b      	mov	r3, r1
    double heatIndex = c1 + (c2 * temp) +
   d43ee:	4620      	mov	r0, r4
   d43f0:	4629      	mov	r1, r5
   d43f2:	f005 fb1b 	bl	d9a2c <__adddf3>

  return heatIndex;
}   
   d43f6:	ecbd 8b02 	vpop	{d8}
   d43fa:	ec41 0b10 	vmov	d0, r0, r1
   d43fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4402:	bf00      	nop
   d4404:	f3af 8000 	nop.w
   d4408:	18ced8ec 	.word	0x18ced8ec
   d440c:	40006462 	.word	0x40006462
   d4410:	126e978d 	.word	0x126e978d
   d4414:	40453083 	.word	0x40453083
   d4418:	b75a49cd 	.word	0xb75a49cd
   d441c:	40244962 	.word	0x40244962
   d4420:	07c647f8 	.word	0x07c647f8
   d4424:	bfccc4c9 	.word	0xbfccc4c9
   d4428:	039c16cc 	.word	0x039c16cc
   d442c:	bf7c01fc 	.word	0xbf7c01fc
   d4430:	00d18c24 	.word	0x00d18c24
   d4434:	bfac10ff 	.word	0xbfac10ff
   d4438:	8760dce5 	.word	0x8760dce5
   d443c:	3f5421b5 	.word	0x3f5421b5
   d4440:	013330da 	.word	0x013330da
   d4444:	3f4bf1f9 	.word	0x3f4bf1f9
   d4448:	11d3bd01 	.word	0x11d3bd01
   d444c:	bec0b17e 	.word	0xbec0b17e

000d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4450:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4452:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4454:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4456:	b17c      	cbz	r4, d4478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4458:	6863      	ldr	r3, [r4, #4]
   d445a:	3b01      	subs	r3, #1
   d445c:	6063      	str	r3, [r4, #4]
   d445e:	b95b      	cbnz	r3, d4478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4460:	6823      	ldr	r3, [r4, #0]
   d4462:	4620      	mov	r0, r4
   d4464:	689b      	ldr	r3, [r3, #8]
   d4466:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4468:	68a3      	ldr	r3, [r4, #8]
   d446a:	3b01      	subs	r3, #1
   d446c:	60a3      	str	r3, [r4, #8]
   d446e:	b91b      	cbnz	r3, d4478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4470:	6823      	ldr	r3, [r4, #0]
   d4472:	4620      	mov	r0, r4
   d4474:	68db      	ldr	r3, [r3, #12]
   d4476:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4478:	4628      	mov	r0, r5
   d447a:	bd38      	pop	{r3, r4, r5, pc}

000d447c <loop>:
void loop() {
   d447c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4480:	ed2d 8b04 	vpush	{d8-d9}
  delay(50000);
   d4484:	f24c 3050 	movw	r0, #50000	; 0xc350
void loop() {
   d4488:	b088      	sub	sp, #32
  delay(50000);
   d448a:	f002 feab 	bl	d71e4 <delay>
double inside = indoorHeatIndex(temp, humidity);
   d448e:	4b22      	ldr	r3, [pc, #136]	; (d4518 <loop+0x9c>)
   d4490:	4c22      	ldr	r4, [pc, #136]	; (d451c <loop+0xa0>)
   d4492:	edd3 9a00 	vldr	s19, [r3]
   d4496:	ed94 9a00 	vldr	s18, [r4]
   d449a:	ee19 0a90 	vmov	r0, s19
   d449e:	f005 fc23 	bl	d9ce8 <__aeabi_f2d>
   d44a2:	ec41 0b18 	vmov	d8, r0, r1
   d44a6:	ee19 0a10 	vmov	r0, s18
   d44aa:	f005 fc1d 	bl	d9ce8 <__aeabi_f2d>
   d44ae:	eeb0 1a48 	vmov.f32	s2, s16
   d44b2:	eef0 1a68 	vmov.f32	s3, s17
   d44b6:	ec41 0b10 	vmov	d0, r0, r1
   d44ba:	f7ff fefd 	bl	d42b8 <_Z15indoorHeatIndexdd>
double outside = outdoorHeatIndex (tempOutdoor, humidityOutdoor);
   d44be:	4b18      	ldr	r3, [pc, #96]	; (d4520 <loop+0xa4>)
   d44c0:	6818      	ldr	r0, [r3, #0]
double inside = indoorHeatIndex(temp, humidity);
   d44c2:	ec57 6b10 	vmov	r6, r7, d0
double outside = outdoorHeatIndex (tempOutdoor, humidityOutdoor);
   d44c6:	f005 fc0f 	bl	d9ce8 <__aeabi_f2d>
   d44ca:	4b16      	ldr	r3, [pc, #88]	; (d4524 <loop+0xa8>)
   d44cc:	ec41 0b18 	vmov	d8, r0, r1
   d44d0:	6818      	ldr	r0, [r3, #0]
   d44d2:	f005 fc09 	bl	d9ce8 <__aeabi_f2d>
   d44d6:	eeb0 1a48 	vmov.f32	s2, s16
   d44da:	eef0 1a68 	vmov.f32	s3, s17
   d44de:	ec41 0b10 	vmov	d0, r0, r1
   d44e2:	f7ff fee9 	bl	d42b8 <_Z15indoorHeatIndexdd>
  if (isnan(humidity) || isnan(temp)){
   d44e6:	eef4 9a69 	vcmp.f32	s19, s19
   d44ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
double outside = outdoorHeatIndex (tempOutdoor, humidityOutdoor);
   d44ee:	eeb0 8a40 	vmov.f32	s16, s0
   d44f2:	eef0 8a60 	vmov.f32	s17, s1
  if (isnan(humidity) || isnan(temp)){
   d44f6:	d604      	bvs.n	d4502 <loop+0x86>
   d44f8:	eeb4 9a49 	vcmp.f32	s18, s18
   d44fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4500:	d714      	bvc.n	d452c <loop+0xb0>
    Serial.println("Failed to read from DHT sensor");
   d4502:	f004 ff11 	bl	d9328 <_Z16_fetch_usbserialv>
   d4506:	4908      	ldr	r1, [pc, #32]	; (d4528 <loop+0xac>)
   d4508:	f003 fe1d 	bl	d8146 <_ZN5Print7printlnEPKc>
}
   d450c:	b008      	add	sp, #32
   d450e:	ecbd 8b04 	vpop	{d8-d9}
   d4512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4516:	bf00      	nop
   d4518:	2003e45c 	.word	0x2003e45c
   d451c:	2003e468 	.word	0x2003e468
   d4520:	2003e260 	.word	0x2003e260
   d4524:	2003e264 	.word	0x2003e264
   d4528:	000dc6a4 	.word	0x000dc6a4
  if (millis() - lastPublish >= publishPeriod) {
   d452c:	4db8      	ldr	r5, [pc, #736]	; (d4810 <loop+0x394>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d452e:	f002 fb9d 	bl	d6c6c <HAL_Timer_Get_Milli_Seconds>
   d4532:	682b      	ldr	r3, [r5, #0]
   d4534:	1ac0      	subs	r0, r0, r3
   d4536:	4bb7      	ldr	r3, [pc, #732]	; (d4814 <loop+0x398>)
   d4538:	4298      	cmp	r0, r3
   d453a:	d90f      	bls.n	d455c <loop+0xe0>
   d453c:	f002 fb96 	bl	d6c6c <HAL_Timer_Get_Milli_Seconds>
   d4540:	4bb5      	ldr	r3, [pc, #724]	; (d4818 <loop+0x39c>)
    lastPublish = millis();
   d4542:	6028      	str	r0, [r5, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4544:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4546:	f88d 3000 	strb.w	r3, [sp]
   d454a:	a804      	add	r0, sp, #16
   d454c:	49b3      	ldr	r1, [pc, #716]	; (d481c <loop+0x3a0>)
   d454e:	233c      	movs	r3, #60	; 0x3c
   d4550:	2200      	movs	r2, #0
   d4552:	f002 ffff 	bl	d7554 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4556:	a805      	add	r0, sp, #20
   d4558:	f7ff ff7a 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  if (inside < outside){
   d455c:	ec53 2b18 	vmov	r2, r3, d8
   d4560:	4630      	mov	r0, r6
   d4562:	4639      	mov	r1, r7
   d4564:	f005 fe8a 	bl	da27c <__aeabi_dcmplt>
   d4568:	b138      	cbz	r0, d457a <loop+0xfe>
  leds.setColorRGB(0,0,0,255);
   d456a:	23ff      	movs	r3, #255	; 0xff
   d456c:	9300      	str	r3, [sp, #0]
   d456e:	2300      	movs	r3, #0
   d4570:	48ab      	ldr	r0, [pc, #684]	; (d4820 <loop+0x3a4>)
   d4572:	461a      	mov	r2, r3
   d4574:	4619      	mov	r1, r3
   d4576:	f000 fd37 	bl	d4fe8 <_ZN12ChainableLED11setColorRGBEhhhh>
  if (inside > outside){
   d457a:	ec53 2b18 	vmov	r2, r3, d8
   d457e:	4630      	mov	r0, r6
   d4580:	4639      	mov	r1, r7
   d4582:	f005 fe99 	bl	da2b8 <__aeabi_dcmpgt>
   d4586:	b130      	cbz	r0, d4596 <loop+0x11a>
    leds.setColorRGB(0,255,0,0);
   d4588:	2300      	movs	r3, #0
   d458a:	48a5      	ldr	r0, [pc, #660]	; (d4820 <loop+0x3a4>)
   d458c:	9300      	str	r3, [sp, #0]
   d458e:	22ff      	movs	r2, #255	; 0xff
   d4590:	4619      	mov	r1, r3
   d4592:	f000 fd29 	bl	d4fe8 <_ZN12ChainableLED11setColorRGBEhhhh>
 updateDisplay (inside, outside);
   d4596:	eeb0 1a48 	vmov.f32	s2, s16
   d459a:	eef0 1a68 	vmov.f32	s3, s17
   d459e:	ec47 6b10 	vmov	d0, r6, r7
  ubidots.add("Indoor Humidity", humidity);
   d45a2:	f8df 82ac 	ldr.w	r8, [pc, #684]	; d4850 <loop+0x3d4>
  ubidots.add("Outdoor Temp", tempOutdoor);
   d45a6:	4d9f      	ldr	r5, [pc, #636]	; (d4824 <loop+0x3a8>)
  ubidots.add("Outdoor Humidity", humidityOutdoor);
   d45a8:	4e9f      	ldr	r6, [pc, #636]	; (d4828 <loop+0x3ac>)
 updateDisplay (inside, outside);
   d45aa:	f7ff fe23 	bl	d41f4 <_Z13updateDisplaydd>
  ubidots.add("Indoor Temp", temp);
   d45ae:	ed94 0a00 	vldr	s0, [r4]
   d45b2:	499e      	ldr	r1, [pc, #632]	; (d482c <loop+0x3b0>)
   d45b4:	489e      	ldr	r0, [pc, #632]	; (d4830 <loop+0x3b4>)
   d45b6:	f002 fb2c 	bl	d6c12 <_ZN7Ubidots3addEPcf>
  ubidots.add("Indoor Humidity", humidity);
   d45ba:	ed98 0a00 	vldr	s0, [r8]
   d45be:	499d      	ldr	r1, [pc, #628]	; (d4834 <loop+0x3b8>)
   d45c0:	489b      	ldr	r0, [pc, #620]	; (d4830 <loop+0x3b4>)
   d45c2:	f002 fb26 	bl	d6c12 <_ZN7Ubidots3addEPcf>
  ubidots.add("Outdoor Temp", tempOutdoor);
   d45c6:	ed95 0a00 	vldr	s0, [r5]
   d45ca:	499b      	ldr	r1, [pc, #620]	; (d4838 <loop+0x3bc>)
   d45cc:	4898      	ldr	r0, [pc, #608]	; (d4830 <loop+0x3b4>)
   d45ce:	f002 fb20 	bl	d6c12 <_ZN7Ubidots3addEPcf>
  ubidots.add("Outdoor Humidity", humidityOutdoor);
   d45d2:	ed96 0a00 	vldr	s0, [r6]
   d45d6:	4999      	ldr	r1, [pc, #612]	; (d483c <loop+0x3c0>)
   d45d8:	4895      	ldr	r0, [pc, #596]	; (d4830 <loop+0x3b4>)
   d45da:	f002 fb1a 	bl	d6c12 <_ZN7Ubidots3addEPcf>
  ubidots.add("Indoor Heat Index",indoorHeatIndex(temp, humidity));
   d45de:	f8d8 0000 	ldr.w	r0, [r8]
   d45e2:	f005 fb81 	bl	d9ce8 <__aeabi_f2d>
   d45e6:	ec41 0b19 	vmov	d9, r0, r1
   d45ea:	6820      	ldr	r0, [r4, #0]
   d45ec:	f005 fb7c 	bl	d9ce8 <__aeabi_f2d>
   d45f0:	eeb0 1a49 	vmov.f32	s2, s18
   d45f4:	eef0 1a69 	vmov.f32	s3, s19
   d45f8:	ec41 0b10 	vmov	d0, r0, r1
   d45fc:	f7ff fe5c 	bl	d42b8 <_Z15indoorHeatIndexdd>
   d4600:	ec51 0b10 	vmov	r0, r1, d0
   d4604:	f005 fec0 	bl	da388 <__aeabi_d2f>
   d4608:	498d      	ldr	r1, [pc, #564]	; (d4840 <loop+0x3c4>)
   d460a:	ee00 0a10 	vmov	s0, r0
   d460e:	4888      	ldr	r0, [pc, #544]	; (d4830 <loop+0x3b4>)
   d4610:	f002 faff 	bl	d6c12 <_ZN7Ubidots3addEPcf>
  ubidots.add("Outdoor Heat Index", outdoorHeatIndex(tempOutdoor, humidityOutdoor));
   d4614:	6830      	ldr	r0, [r6, #0]
   d4616:	f005 fb67 	bl	d9ce8 <__aeabi_f2d>
   d461a:	ec41 0b19 	vmov	d9, r0, r1
   d461e:	6828      	ldr	r0, [r5, #0]
   d4620:	f005 fb62 	bl	d9ce8 <__aeabi_f2d>
   d4624:	eeb0 1a49 	vmov.f32	s2, s18
   d4628:	eef0 1a69 	vmov.f32	s3, s19
   d462c:	ec41 0b10 	vmov	d0, r0, r1
   d4630:	f7ff fe42 	bl	d42b8 <_Z15indoorHeatIndexdd>
   d4634:	ec51 0b10 	vmov	r0, r1, d0
   d4638:	f005 fea6 	bl	da388 <__aeabi_d2f>
   d463c:	4981      	ldr	r1, [pc, #516]	; (d4844 <loop+0x3c8>)
   d463e:	ee00 0a10 	vmov	s0, r0
   d4642:	487b      	ldr	r0, [pc, #492]	; (d4830 <loop+0x3b4>)
   d4644:	f002 fae5 	bl	d6c12 <_ZN7Ubidots3addEPcf>
  bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC); 
   d4648:	4b7f      	ldr	r3, [pc, #508]	; (d4848 <loop+0x3cc>)
   d464a:	4879      	ldr	r0, [pc, #484]	; (d4830 <loop+0x3b4>)
   d464c:	781a      	ldrb	r2, [r3, #0]
   d464e:	4b7f      	ldr	r3, [pc, #508]	; (d484c <loop+0x3d0>)
   d4650:	6819      	ldr	r1, [r3, #0]
   d4652:	f002 fae7 	bl	d6c24 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
  Particle.publish("Indoor Temp",String (temp));
   d4656:	ed94 0a00 	vldr	s0, [r4]
   d465a:	2106      	movs	r1, #6
   d465c:	a804      	add	r0, sp, #16
   d465e:	f003 ff62 	bl	d8526 <_ZN6StringC1Efi>
   d4662:	9a04      	ldr	r2, [sp, #16]
   d4664:	4971      	ldr	r1, [pc, #452]	; (d482c <loop+0x3b0>)
   d4666:	a802      	add	r0, sp, #8
   d4668:	f7ff fd26 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d466c:	a803      	add	r0, sp, #12
   d466e:	f7ff feef 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4672:	a804      	add	r0, sp, #16
   d4674:	f003 fee0 	bl	d8438 <_ZN6StringD1Ev>
  Particle.publish("Indoor Humidity", String (humidity));
   d4678:	ed98 0a00 	vldr	s0, [r8]
   d467c:	2106      	movs	r1, #6
   d467e:	a804      	add	r0, sp, #16
   d4680:	f003 ff51 	bl	d8526 <_ZN6StringC1Efi>
   d4684:	9a04      	ldr	r2, [sp, #16]
   d4686:	496b      	ldr	r1, [pc, #428]	; (d4834 <loop+0x3b8>)
   d4688:	a802      	add	r0, sp, #8
   d468a:	f7ff fd15 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d468e:	a803      	add	r0, sp, #12
   d4690:	f7ff fede 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4694:	a804      	add	r0, sp, #16
   d4696:	f003 fecf 	bl	d8438 <_ZN6StringD1Ev>
  Particle.publish("Outdoor Temp",String (tempOutdoor));
   d469a:	ed95 0a00 	vldr	s0, [r5]
   d469e:	2106      	movs	r1, #6
   d46a0:	a804      	add	r0, sp, #16
   d46a2:	f003 ff40 	bl	d8526 <_ZN6StringC1Efi>
   d46a6:	9a04      	ldr	r2, [sp, #16]
   d46a8:	4963      	ldr	r1, [pc, #396]	; (d4838 <loop+0x3bc>)
   d46aa:	a802      	add	r0, sp, #8
   d46ac:	f7ff fd04 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d46b0:	a803      	add	r0, sp, #12
   d46b2:	f7ff fecd 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46b6:	a804      	add	r0, sp, #16
   d46b8:	f003 febe 	bl	d8438 <_ZN6StringD1Ev>
  Particle.publish("Outdoor Humidity", String (humidity));
   d46bc:	ed98 0a00 	vldr	s0, [r8]
   d46c0:	2106      	movs	r1, #6
   d46c2:	a804      	add	r0, sp, #16
   d46c4:	f003 ff2f 	bl	d8526 <_ZN6StringC1Efi>
   d46c8:	9a04      	ldr	r2, [sp, #16]
   d46ca:	495c      	ldr	r1, [pc, #368]	; (d483c <loop+0x3c0>)
   d46cc:	a802      	add	r0, sp, #8
   d46ce:	f7ff fcf3 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d46d2:	a803      	add	r0, sp, #12
   d46d4:	f7ff febc 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d46d8:	a804      	add	r0, sp, #16
   d46da:	f003 fead 	bl	d8438 <_ZN6StringD1Ev>
  Particle.publish("Indoor Heat Index",String(indoorHeatIndex(temp, humidity)));
   d46de:	f8d8 0000 	ldr.w	r0, [r8]
   d46e2:	f005 fb01 	bl	d9ce8 <__aeabi_f2d>
   d46e6:	ec41 0b19 	vmov	d9, r0, r1
   d46ea:	6820      	ldr	r0, [r4, #0]
   d46ec:	f005 fafc 	bl	d9ce8 <__aeabi_f2d>
   d46f0:	eeb0 1a49 	vmov.f32	s2, s18
   d46f4:	eef0 1a69 	vmov.f32	s3, s19
   d46f8:	ec41 0b10 	vmov	d0, r0, r1
   d46fc:	f7ff fddc 	bl	d42b8 <_Z15indoorHeatIndexdd>
   d4700:	2106      	movs	r1, #6
   d4702:	a804      	add	r0, sp, #16
   d4704:	f003 ff29 	bl	d855a <_ZN6StringC1Edi>
   d4708:	9a04      	ldr	r2, [sp, #16]
   d470a:	494d      	ldr	r1, [pc, #308]	; (d4840 <loop+0x3c4>)
   d470c:	a802      	add	r0, sp, #8
   d470e:	f7ff fcd3 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4712:	a803      	add	r0, sp, #12
   d4714:	f7ff fe9c 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4718:	a804      	add	r0, sp, #16
   d471a:	f003 fe8d 	bl	d8438 <_ZN6StringD1Ev>
  Particle.publish("Outdoor Heat Index",String(outdoorHeatIndex(tempOutdoor, humidityOutdoor)));
   d471e:	6830      	ldr	r0, [r6, #0]
   d4720:	f005 fae2 	bl	d9ce8 <__aeabi_f2d>
   d4724:	ec41 0b19 	vmov	d9, r0, r1
   d4728:	6828      	ldr	r0, [r5, #0]
   d472a:	f005 fadd 	bl	d9ce8 <__aeabi_f2d>
   d472e:	eeb0 1a49 	vmov.f32	s2, s18
   d4732:	eef0 1a69 	vmov.f32	s3, s19
   d4736:	ec41 0b10 	vmov	d0, r0, r1
   d473a:	f7ff fdbd 	bl	d42b8 <_Z15indoorHeatIndexdd>
   d473e:	2106      	movs	r1, #6
   d4740:	a804      	add	r0, sp, #16
   d4742:	f003 ff0a 	bl	d855a <_ZN6StringC1Edi>
   d4746:	9a04      	ldr	r2, [sp, #16]
   d4748:	493e      	ldr	r1, [pc, #248]	; (d4844 <loop+0x3c8>)
   d474a:	a802      	add	r0, sp, #8
   d474c:	f7ff fcb4 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4750:	a803      	add	r0, sp, #12
   d4752:	f7ff fe7d 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4756:	a804      	add	r0, sp, #16
   d4758:	f003 fe6e 	bl	d8438 <_ZN6StringD1Ev>
  Serial.println(long(indoorHeatIndex(temp, humidity)));
   d475c:	f004 fde4 	bl	d9328 <_Z16_fetch_usbserialv>
   d4760:	4607      	mov	r7, r0
   d4762:	f8d8 0000 	ldr.w	r0, [r8]
   d4766:	f005 fabf 	bl	d9ce8 <__aeabi_f2d>
   d476a:	ec41 0b19 	vmov	d9, r0, r1
   d476e:	6820      	ldr	r0, [r4, #0]
   d4770:	f005 faba 	bl	d9ce8 <__aeabi_f2d>
   d4774:	eeb0 1a49 	vmov.f32	s2, s18
   d4778:	eef0 1a69 	vmov.f32	s3, s19
   d477c:	ec41 0b10 	vmov	d0, r0, r1
   d4780:	f7ff fd9a 	bl	d42b8 <_Z15indoorHeatIndexdd>
   d4784:	ec51 0b10 	vmov	r0, r1, d0
   d4788:	f005 fdb6 	bl	da2f8 <__aeabi_d2iz>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d478c:	1e04      	subs	r4, r0, #0
   d478e:	da3a      	bge.n	d4806 <loop+0x38a>
            t = print('-');
   d4790:	212d      	movs	r1, #45	; 0x2d
   d4792:	4638      	mov	r0, r7
   d4794:	f003 fcc8 	bl	d8128 <_ZN5Print5printEc>
            val = -n;
   d4798:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d479a:	220a      	movs	r2, #10
   d479c:	4638      	mov	r0, r7
   d479e:	f003 fcdc 	bl	d815a <_ZN5Print11printNumberEmh>
        n += println();
   d47a2:	4638      	mov	r0, r7
   d47a4:	f003 fcc3 	bl	d812e <_ZN5Print7printlnEv>
  Serial.println(long(outdoorHeatIndex(tempOutdoor, humidityOutdoor)));
   d47a8:	f004 fdbe 	bl	d9328 <_Z16_fetch_usbserialv>
   d47ac:	4607      	mov	r7, r0
   d47ae:	6830      	ldr	r0, [r6, #0]
   d47b0:	f005 fa9a 	bl	d9ce8 <__aeabi_f2d>
   d47b4:	ec41 0b19 	vmov	d9, r0, r1
   d47b8:	6828      	ldr	r0, [r5, #0]
   d47ba:	f005 fa95 	bl	d9ce8 <__aeabi_f2d>
   d47be:	eeb0 1a49 	vmov.f32	s2, s18
   d47c2:	eef0 1a69 	vmov.f32	s3, s19
   d47c6:	ec41 0b10 	vmov	d0, r0, r1
   d47ca:	f7ff fd75 	bl	d42b8 <_Z15indoorHeatIndexdd>
   d47ce:	ec51 0b10 	vmov	r0, r1, d0
   d47d2:	f005 fd91 	bl	da2f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d47d6:	1e04      	subs	r4, r0, #0
   d47d8:	da17      	bge.n	d480a <loop+0x38e>
            t = print('-');
   d47da:	212d      	movs	r1, #45	; 0x2d
   d47dc:	4638      	mov	r0, r7
   d47de:	f003 fca3 	bl	d8128 <_ZN5Print5printEc>
            val = -n;
   d47e2:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d47e4:	220a      	movs	r2, #10
   d47e6:	4638      	mov	r0, r7
   d47e8:	f003 fcb7 	bl	d815a <_ZN5Print11printNumberEmh>
        n += println();
   d47ec:	4638      	mov	r0, r7
   d47ee:	f003 fc9e 	bl	d812e <_ZN5Print7printlnEv>
  Serial.println(outside);
   d47f2:	f004 fd99 	bl	d9328 <_Z16_fetch_usbserialv>
   d47f6:	eeb0 0a48 	vmov.f32	s0, s16
   d47fa:	eef0 0a68 	vmov.f32	s1, s17
   d47fe:	2102      	movs	r1, #2
   d4800:	f003 fd92 	bl	d8328 <_ZN5Print7printlnEdi>
   d4804:	e682      	b.n	d450c <loop+0x90>
            val = n;
   d4806:	4621      	mov	r1, r4
   d4808:	e7c7      	b.n	d479a <loop+0x31e>
   d480a:	4621      	mov	r1, r4
   d480c:	e7ea      	b.n	d47e4 <loop+0x368>
   d480e:	bf00      	nop
   d4810:	2003e25c 	.word	0x2003e25c
   d4814:	000dbb9f 	.word	0x000dbb9f
   d4818:	2003e445 	.word	0x2003e445
   d481c:	000dc6c3 	.word	0x000dc6c3
   d4820:	2003e460 	.word	0x2003e460
   d4824:	2003e264 	.word	0x2003e264
   d4828:	2003e260 	.word	0x2003e260
   d482c:	000dc6d6 	.word	0x000dc6d6
   d4830:	2003e46c 	.word	0x2003e46c
   d4834:	000dc6e2 	.word	0x000dc6e2
   d4838:	000dc6f2 	.word	0x000dc6f2
   d483c:	000dc6ff 	.word	0x000dc6ff
   d4840:	000dc710 	.word	0x000dc710
   d4844:	000dc722 	.word	0x000dc722
   d4848:	2003e444 	.word	0x2003e444
   d484c:	2003e258 	.word	0x2003e258
   d4850:	2003e45c 	.word	0x2003e45c

000d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4854:	680b      	ldr	r3, [r1, #0]
   d4856:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4858:	b113      	cbz	r3, d4860 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d485a:	685a      	ldr	r2, [r3, #4]
   d485c:	3201      	adds	r2, #1
   d485e:	605a      	str	r2, [r3, #4]
      }
   d4860:	4770      	bx	lr
	...

000d4864 <_Z17setCurrentWeatherPKcS0_>:
void setCurrentWeather(const char *event, const char *data) {
   d4864:	b5f0      	push	{r4, r5, r6, r7, lr}
    Log.info("subscriptionHandler %s", data);
   d4866:	460a      	mov	r2, r1
void setCurrentWeather(const char *event, const char *data) {
   d4868:	b091      	sub	sp, #68	; 0x44
   d486a:	460c      	mov	r4, r1
    Log.info("subscriptionHandler %s", data);
   d486c:	4848      	ldr	r0, [pc, #288]	; (d4990 <_Z17setCurrentWeatherPKcS0_+0x12c>)
   d486e:	4949      	ldr	r1, [pc, #292]	; (d4994 <_Z17setCurrentWeatherPKcS0_+0x130>)
inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
    return strcmp(s_, str) == 0;
   d4870:	4d49      	ldr	r5, [pc, #292]	; (d4998 <_Z17setCurrentWeatherPKcS0_+0x134>)
            tempOutdoor = iter.value().toDouble();
   d4872:	4e4a      	ldr	r6, [pc, #296]	; (d499c <_Z17setCurrentWeatherPKcS0_+0x138>)
    Log.info("subscriptionHandler %s", data);
   d4874:	f7ff fc2e 	bl	d40d4 <_ZNK5spark6Logger4infoEPKcz>
    return parseCopy(json, strlen(json));
   d4878:	4620      	mov	r0, r4
   d487a:	f006 f82a 	bl	da8d2 <strlen>
   d487e:	4621      	mov	r1, r4
   d4880:	4602      	mov	r2, r0
   d4882:	a803      	add	r0, sp, #12
   d4884:	f003 fb10 	bl	d7ea8 <_ZN5spark9JSONValue9parseCopyEPKcj>
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
   d4888:	9c05      	ldr	r4, [sp, #20]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d488a:	9b03      	ldr	r3, [sp, #12]
   d488c:	9306      	str	r3, [sp, #24]
   d488e:	a904      	add	r1, sp, #16
   d4890:	a807      	add	r0, sp, #28
   d4892:	f7ff ffdf 	bl	d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4896:	aa06      	add	r2, sp, #24
   d4898:	4621      	mov	r1, r4
   d489a:	a80a      	add	r0, sp, #40	; 0x28
   d489c:	f003 fac4 	bl	d7e28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d48a0:	a807      	add	r0, sp, #28
   d48a2:	f7ff fdd5 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d48a6:	4f3e      	ldr	r7, [pc, #248]	; (d49a0 <_Z17setCurrentWeatherPKcS0_+0x13c>)
    while (iter.next()) {
   d48a8:	a80a      	add	r0, sp, #40	; 0x28
   d48aa:	f003 fad5 	bl	d7e58 <_ZN5spark18JSONObjectIterator4nextEv>
   d48ae:	2800      	cmp	r0, #0
   d48b0:	d066      	beq.n	d4980 <_Z17setCurrentWeatherPKcS0_+0x11c>
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
   d48b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d48b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d48b6:	9301      	str	r3, [sp, #4]
   d48b8:	a90b      	add	r1, sp, #44	; 0x2c
   d48ba:	a802      	add	r0, sp, #8
   d48bc:	f7ff ffca 	bl	d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d48c0:	4621      	mov	r1, r4
   d48c2:	aa01      	add	r2, sp, #4
   d48c4:	a806      	add	r0, sp, #24
   d48c6:	f003 fa8b 	bl	d7de0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d48ca:	a802      	add	r0, sp, #8
   d48cc:	f7ff fdc0 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d48d0:	9808      	ldr	r0, [sp, #32]
   d48d2:	4629      	mov	r1, r5
   d48d4:	f005 ffcd 	bl	da872 <strcmp>
   d48d8:	4604      	mov	r4, r0
   d48da:	a807      	add	r0, sp, #28
   d48dc:	f7ff fdb8 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "temp") {
   d48e0:	b9cc      	cbnz	r4, d4916 <_Z17setCurrentWeatherPKcS0_+0xb2>
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   d48e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d48e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d48e6:	9301      	str	r3, [sp, #4]
   d48e8:	a90b      	add	r1, sp, #44	; 0x2c
   d48ea:	a802      	add	r0, sp, #8
   d48ec:	f7ff ffb2 	bl	d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d48f0:	aa01      	add	r2, sp, #4
   d48f2:	4621      	mov	r1, r4
   d48f4:	a806      	add	r0, sp, #24
   d48f6:	f003 f92f 	bl	d7b58 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d48fa:	a802      	add	r0, sp, #8
   d48fc:	f7ff fda8 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            tempOutdoor = iter.value().toDouble();
   d4900:	a806      	add	r0, sp, #24
   d4902:	f003 f961 	bl	d7bc8 <_ZNK5spark9JSONValue8toDoubleEv>
   d4906:	ec51 0b10 	vmov	r0, r1, d0
   d490a:	f005 fd3d 	bl	da388 <__aeabi_d2f>
   d490e:	6030      	str	r0, [r6, #0]
   d4910:	a807      	add	r0, sp, #28
   d4912:	f7ff fd9d 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(k_, d_);
   d4916:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d491a:	9301      	str	r3, [sp, #4]
   d491c:	a90b      	add	r1, sp, #44	; 0x2c
   d491e:	a802      	add	r0, sp, #8
   d4920:	f7ff ff98 	bl	d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4924:	4621      	mov	r1, r4
   d4926:	aa01      	add	r2, sp, #4
   d4928:	a806      	add	r0, sp, #24
   d492a:	f003 fa59 	bl	d7de0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d492e:	a802      	add	r0, sp, #8
   d4930:	f7ff fd8e 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4934:	9808      	ldr	r0, [sp, #32]
   d4936:	4639      	mov	r1, r7
   d4938:	f005 ff9b 	bl	da872 <strcmp>
   d493c:	4604      	mov	r4, r0
   d493e:	a807      	add	r0, sp, #28
   d4940:	f7ff fd86 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (iter.name() == "hum") {
   d4944:	2c00      	cmp	r4, #0
   d4946:	d1af      	bne.n	d48a8 <_Z17setCurrentWeatherPKcS0_+0x44>
    return JSONValue(v_, d_);
   d4948:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d494a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	a90b      	add	r1, sp, #44	; 0x2c
   d4950:	a802      	add	r0, sp, #8
   d4952:	f7ff ff7f 	bl	d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4956:	aa01      	add	r2, sp, #4
   d4958:	4621      	mov	r1, r4
   d495a:	a806      	add	r0, sp, #24
   d495c:	f003 f8fc 	bl	d7b58 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4960:	a802      	add	r0, sp, #8
   d4962:	f7ff fd75 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            humidityOutdoor = iter.value().toDouble();
   d4966:	a806      	add	r0, sp, #24
   d4968:	f003 f92e 	bl	d7bc8 <_ZNK5spark9JSONValue8toDoubleEv>
   d496c:	ec51 0b10 	vmov	r0, r1, d0
   d4970:	f005 fd0a 	bl	da388 <__aeabi_d2f>
   d4974:	4b0b      	ldr	r3, [pc, #44]	; (d49a4 <_Z17setCurrentWeatherPKcS0_+0x140>)
   d4976:	6018      	str	r0, [r3, #0]
   d4978:	a807      	add	r0, sp, #28
   d497a:	f7ff fd69 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d497e:	e792      	b.n	d48a6 <_Z17setCurrentWeatherPKcS0_+0x42>
   d4980:	a80b      	add	r0, sp, #44	; 0x2c
   d4982:	f7ff fd65 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4986:	a804      	add	r0, sp, #16
   d4988:	f7ff fd62 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }}
   d498c:	b011      	add	sp, #68	; 0x44
   d498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4990:	2003e658 	.word	0x2003e658
   d4994:	000dc735 	.word	0x000dc735
   d4998:	000dc74c 	.word	0x000dc74c
   d499c:	2003e264 	.word	0x2003e264
   d49a0:	000dc751 	.word	0x000dc751
   d49a4:	2003e260 	.word	0x2003e260

000d49a8 <_GLOBAL__sub_I_WEBHOOK_NAME>:
                           (c7 * (tempOutdoor * tempOutdoor) * humidityOutdoor) + 
                           (c8 * tempOutdoor * (humidityOutdoor * humidityOutdoor)) +
                           (c9 * (tempOutdoor * tempOutdoor) * (humidityOutdoor * humidityOutdoor));

  return outHeatIndex;
}   
   d49a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d49aa:	4b19      	ldr	r3, [pc, #100]	; (d4a10 <_GLOBAL__sub_I_WEBHOOK_NAME+0x68>)
Ubidots ubidots("webhook", UBI_PARTICLE); 
   d49ac:	4c19      	ldr	r4, [pc, #100]	; (d4a14 <_GLOBAL__sub_I_WEBHOOK_NAME+0x6c>)
   d49ae:	491a      	ldr	r1, [pc, #104]	; (d4a18 <_GLOBAL__sub_I_WEBHOOK_NAME+0x70>)
   d49b0:	4e1a      	ldr	r6, [pc, #104]	; (d4a1c <_GLOBAL__sub_I_WEBHOOK_NAME+0x74>)
ChainableLED leds (RX, TX, 1);
   d49b2:	4d1b      	ldr	r5, [pc, #108]	; (d4a20 <_GLOBAL__sub_I_WEBHOOK_NAME+0x78>)
   d49b4:	2200      	movs	r2, #0
   d49b6:	701a      	strb	r2, [r3, #0]
   d49b8:	4b1a      	ldr	r3, [pc, #104]	; (d4a24 <_GLOBAL__sub_I_WEBHOOK_NAME+0x7c>)
   d49ba:	2701      	movs	r7, #1
   d49bc:	701f      	strb	r7, [r3, #0]
Ubidots ubidots("webhook", UBI_PARTICLE); 
   d49be:	2203      	movs	r2, #3
   d49c0:	4620      	mov	r0, r4
   d49c2:	f002 f905 	bl	d6bd0 <_ZN7UbidotsC1EPc11IotProtocol>
   d49c6:	4620      	mov	r0, r4
DHT dht(DHTPIN, DHTTYPE); 
   d49c8:	4c17      	ldr	r4, [pc, #92]	; (d4a28 <_GLOBAL__sub_I_WEBHOOK_NAME+0x80>)
Ubidots ubidots("webhook", UBI_PARTICLE); 
   d49ca:	4918      	ldr	r1, [pc, #96]	; (d4a2c <_GLOBAL__sub_I_WEBHOOK_NAME+0x84>)
   d49cc:	4632      	mov	r2, r6
   d49ce:	f004 fe4b 	bl	d9668 <__aeabi_atexit>
DHT dht(DHTPIN, DHTTYPE); 
   d49d2:	2306      	movs	r3, #6
   d49d4:	220b      	movs	r2, #11
   d49d6:	2113      	movs	r1, #19
   d49d8:	4620      	mov	r0, r4
   d49da:	f000 f862 	bl	d4aa2 <_ZN3DHTC1Ehhh>
ChainableLED leds (RX, TX, 1);
   d49de:	463b      	mov	r3, r7
   d49e0:	2209      	movs	r2, #9
   d49e2:	210a      	movs	r1, #10
   d49e4:	4628      	mov	r0, r5
   d49e6:	f000 fa95 	bl	d4f14 <_ZN12ChainableLEDC1Ehhh>
   d49ea:	4911      	ldr	r1, [pc, #68]	; (d4a30 <_GLOBAL__sub_I_WEBHOOK_NAME+0x88>)
   d49ec:	4632      	mov	r2, r6
   d49ee:	4628      	mov	r0, r5
   d49f0:	f004 fe3a 	bl	d9668 <__aeabi_atexit>
float humidity = dht.getHumidity();
   d49f4:	4620      	mov	r0, r4
   d49f6:	f000 fa8b 	bl	d4f10 <_ZN3DHT11getHumidityEv>
   d49fa:	4b0e      	ldr	r3, [pc, #56]	; (d4a34 <_GLOBAL__sub_I_WEBHOOK_NAME+0x8c>)
float temp = dht.getTempFarenheit();
   d49fc:	4620      	mov	r0, r4
float humidity = dht.getHumidity();
   d49fe:	ed83 0a00 	vstr	s0, [r3]
float temp = dht.getTempFarenheit();
   d4a02:	f000 fa47 	bl	d4e94 <_ZN3DHT16getTempFarenheitEv>
   d4a06:	4b0c      	ldr	r3, [pc, #48]	; (d4a38 <_GLOBAL__sub_I_WEBHOOK_NAME+0x90>)
   d4a08:	ed83 0a00 	vstr	s0, [r3]
}   
   d4a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4a0e:	bf00      	nop
   d4a10:	2003e444 	.word	0x2003e444
   d4a14:	2003e46c 	.word	0x2003e46c
   d4a18:	000dc755 	.word	0x000dc755
   d4a1c:	2003e440 	.word	0x2003e440
   d4a20:	2003e460 	.word	0x2003e460
   d4a24:	2003e445 	.word	0x2003e445
   d4a28:	2003e448 	.word	0x2003e448
   d4a2c:	000d6bed 	.word	0x000d6bed
   d4a30:	000d4f2f 	.word	0x000d4f2f
   d4a34:	2003e45c 	.word	0x2003e45c
   d4a38:	2003e468 	.word	0x2003e468

000d4a3c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4a3c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4a3e:	6803      	ldr	r3, [r0, #0]
   d4a40:	2b2f      	cmp	r3, #47	; 0x2f
{
   d4a42:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4a44:	d904      	bls.n	d4a50 <nrf_gpio_pin_port_decode+0x14>
   d4a46:	4a07      	ldr	r2, [pc, #28]	; (d4a64 <nrf_gpio_pin_port_decode+0x28>)
   d4a48:	2100      	movs	r1, #0
   d4a4a:	200a      	movs	r0, #10
   d4a4c:	f002 fa9e 	bl	d6f8c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4a50:	6823      	ldr	r3, [r4, #0]
   d4a52:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4a54:	bf83      	ittte	hi
   d4a56:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4a5a:	4803      	ldrhi	r0, [pc, #12]	; (d4a68 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4a5c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4a5e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d4a62:	bd10      	pop	{r4, pc}
   d4a64:	000d6c5d 	.word	0x000d6c5d
   d4a68:	50000300 	.word	0x50000300

000d4a6c <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4a6c:	b507      	push	{r0, r1, r2, lr}
   d4a6e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4a70:	a801      	add	r0, sp, #4
   d4a72:	f7ff ffe3 	bl	d4a3c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4a76:	9a01      	ldr	r2, [sp, #4]
   d4a78:	2301      	movs	r3, #1
   d4a7a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4a7c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4a80:	b003      	add	sp, #12
   d4a82:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a86 <nrf_gpio_pin_read>:
{
   d4a86:	b507      	push	{r0, r1, r2, lr}
   d4a88:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4a8a:	a801      	add	r0, sp, #4
   d4a8c:	f7ff ffd6 	bl	d4a3c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4a90:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4a92:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4a96:	40d8      	lsrs	r0, r3
}
   d4a98:	f000 0001 	and.w	r0, r0, #1
   d4a9c:	b003      	add	sp, #12
   d4a9e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4aa2 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4aa2:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4aa4:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4aa6:	2301      	movs	r3, #1
	_pin = pin;
   d4aa8:	7181      	strb	r1, [r0, #6]
	_type = type;
   d4aaa:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4aac:	7403      	strb	r3, [r0, #16]
}
   d4aae:	bd10      	pop	{r4, pc}

000d4ab0 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ab4:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ab6:	4c1e      	ldr	r4, [pc, #120]	; (d4b30 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d4ab8:	7980      	ldrb	r0, [r0, #6]
   d4aba:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4b34 <_ZN3DHT5beginEv+0x84>
   d4abe:	2100      	movs	r1, #0
   d4ac0:	f004 fd68 	bl	d9594 <pinMode>
	pinSetFast(_pin);
   d4ac4:	79ae      	ldrb	r6, [r5, #6]
   d4ac6:	7823      	ldrb	r3, [r4, #0]
   d4ac8:	f3bf 8f5b 	dmb	ish
   d4acc:	f013 0f01 	tst.w	r3, #1
   d4ad0:	d10a      	bne.n	d4ae8 <_ZN3DHT5beginEv+0x38>
   d4ad2:	4620      	mov	r0, r4
   d4ad4:	f7ff fae7 	bl	d40a6 <__cxa_guard_acquire>
   d4ad8:	b130      	cbz	r0, d4ae8 <_ZN3DHT5beginEv+0x38>
   d4ada:	f002 f8cf 	bl	d6c7c <HAL_Pin_Map>
   d4ade:	f8c8 0000 	str.w	r0, [r8]
   d4ae2:	4620      	mov	r0, r4
   d4ae4:	f7ff fae4 	bl	d40b0 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ae8:	f8d8 3000 	ldr.w	r3, [r8]
   d4aec:	0136      	lsls	r6, r6, #4
   d4aee:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4af0:	7823      	ldrb	r3, [r4, #0]
   d4af2:	f3bf 8f5b 	dmb	ish
   d4af6:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4af8:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4afc:	d40a      	bmi.n	d4b14 <_ZN3DHT5beginEv+0x64>
   d4afe:	480c      	ldr	r0, [pc, #48]	; (d4b30 <_ZN3DHT5beginEv+0x80>)
   d4b00:	f7ff fad1 	bl	d40a6 <__cxa_guard_acquire>
   d4b04:	b130      	cbz	r0, d4b14 <_ZN3DHT5beginEv+0x64>
   d4b06:	f002 f8b9 	bl	d6c7c <HAL_Pin_Map>
   d4b0a:	f8c8 0000 	str.w	r0, [r8]
   d4b0e:	4808      	ldr	r0, [pc, #32]	; (d4b30 <_ZN3DHT5beginEv+0x80>)
   d4b10:	f7ff face 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b14:	f8d8 3000 	ldr.w	r3, [r8]
   d4b18:	4433      	add	r3, r6
   d4b1a:	785b      	ldrb	r3, [r3, #1]
   d4b1c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d4b20:	ea43 0007 	orr.w	r0, r3, r7
   d4b24:	f7ff ffa2 	bl	d4a6c <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d4b28:	2300      	movs	r3, #0
   d4b2a:	60eb      	str	r3, [r5, #12]
}
   d4b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b30:	2003e478 	.word	0x2003e478
   d4b34:	2003e47c 	.word	0x2003e47c

000d4b38 <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d4b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b3c:	4604      	mov	r4, r0
   d4b3e:	b085      	sub	sp, #20
   d4b40:	f002 f894 	bl	d6c6c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4b44:	68e3      	ldr	r3, [r4, #12]
   d4b46:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d4b48:	bf84      	itt	hi
   d4b4a:	2300      	movhi	r3, #0
   d4b4c:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4b4e:	7c23      	ldrb	r3, [r4, #16]
   d4b50:	b92b      	cbnz	r3, d4b5e <_ZN3DHT4readEv+0x26>
   d4b52:	68e3      	ldr	r3, [r4, #12]
   d4b54:	1ac0      	subs	r0, r0, r3
   d4b56:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4b5a:	f0c0 8160 	bcc.w	d4e1e <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4b5e:	2500      	movs	r5, #0
   d4b60:	7425      	strb	r5, [r4, #16]
   d4b62:	f002 f883 	bl	d6c6c <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b66:	4eb0      	ldr	r6, [pc, #704]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4b68:	6025      	str	r5, [r4, #0]
   d4b6a:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d4b6c:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d4b6e:	79a7      	ldrb	r7, [r4, #6]
   d4b70:	7833      	ldrb	r3, [r6, #0]
   d4b72:	4dae      	ldr	r5, [pc, #696]	; (d4e2c <_ZN3DHT4readEv+0x2f4>)
   d4b74:	f3bf 8f5b 	dmb	ish
   d4b78:	f013 0f01 	tst.w	r3, #1
   d4b7c:	d109      	bne.n	d4b92 <_ZN3DHT4readEv+0x5a>
   d4b7e:	4630      	mov	r0, r6
   d4b80:	f7ff fa91 	bl	d40a6 <__cxa_guard_acquire>
   d4b84:	b128      	cbz	r0, d4b92 <_ZN3DHT4readEv+0x5a>
   d4b86:	f002 f879 	bl	d6c7c <HAL_Pin_Map>
   d4b8a:	6028      	str	r0, [r5, #0]
   d4b8c:	4630      	mov	r0, r6
   d4b8e:	f7ff fa8f 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b92:	682b      	ldr	r3, [r5, #0]
   d4b94:	013f      	lsls	r7, r7, #4
   d4b96:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4b9a:	7833      	ldrb	r3, [r6, #0]
   d4b9c:	f3bf 8f5b 	dmb	ish
   d4ba0:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ba2:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ba6:	d409      	bmi.n	d4bbc <_ZN3DHT4readEv+0x84>
   d4ba8:	489f      	ldr	r0, [pc, #636]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4baa:	f7ff fa7c 	bl	d40a6 <__cxa_guard_acquire>
   d4bae:	b128      	cbz	r0, d4bbc <_ZN3DHT4readEv+0x84>
   d4bb0:	f002 f864 	bl	d6c7c <HAL_Pin_Map>
   d4bb4:	6028      	str	r0, [r5, #0]
   d4bb6:	489c      	ldr	r0, [pc, #624]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4bb8:	f7ff fa7a 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4bbc:	682b      	ldr	r3, [r5, #0]
   d4bbe:	441f      	add	r7, r3
   d4bc0:	7878      	ldrb	r0, [r7, #1]
   d4bc2:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4bc6:	ea40 0008 	orr.w	r0, r0, r8
   d4bca:	f7ff ff4f 	bl	d4a6c <nrf_gpio_pin_set>
	delay(250);
   d4bce:	20fa      	movs	r0, #250	; 0xfa
   d4bd0:	f002 fb08 	bl	d71e4 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4bd4:	79a0      	ldrb	r0, [r4, #6]
   d4bd6:	2101      	movs	r1, #1
   d4bd8:	f004 fcdc 	bl	d9594 <pinMode>
	pinResetFast(_pin);
   d4bdc:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4bde:	7833      	ldrb	r3, [r6, #0]
   d4be0:	f3bf 8f5b 	dmb	ish
   d4be4:	07da      	lsls	r2, r3, #31
   d4be6:	d409      	bmi.n	d4bfc <_ZN3DHT4readEv+0xc4>
   d4be8:	488f      	ldr	r0, [pc, #572]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4bea:	f7ff fa5c 	bl	d40a6 <__cxa_guard_acquire>
   d4bee:	b128      	cbz	r0, d4bfc <_ZN3DHT4readEv+0xc4>
   d4bf0:	f002 f844 	bl	d6c7c <HAL_Pin_Map>
   d4bf4:	6028      	str	r0, [r5, #0]
   d4bf6:	488c      	ldr	r0, [pc, #560]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4bf8:	f7ff fa5a 	bl	d40b0 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4bfc:	682b      	ldr	r3, [r5, #0]
   d4bfe:	013f      	lsls	r7, r7, #4
   d4c00:	5ddb      	ldrb	r3, [r3, r7]
   d4c02:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4c06:	7833      	ldrb	r3, [r6, #0]
   d4c08:	f3bf 8f5b 	dmb	ish
   d4c0c:	07db      	lsls	r3, r3, #31
   d4c0e:	d409      	bmi.n	d4c24 <_ZN3DHT4readEv+0xec>
   d4c10:	4885      	ldr	r0, [pc, #532]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4c12:	f7ff fa48 	bl	d40a6 <__cxa_guard_acquire>
   d4c16:	b128      	cbz	r0, d4c24 <_ZN3DHT4readEv+0xec>
   d4c18:	f002 f830 	bl	d6c7c <HAL_Pin_Map>
   d4c1c:	6028      	str	r0, [r5, #0]
   d4c1e:	4882      	ldr	r0, [pc, #520]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4c20:	f7ff fa46 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4c24:	682b      	ldr	r3, [r5, #0]
   d4c26:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4c28:	a803      	add	r0, sp, #12
   d4c2a:	787b      	ldrb	r3, [r7, #1]
   d4c2c:	f003 031f 	and.w	r3, r3, #31
   d4c30:	ea43 0308 	orr.w	r3, r3, r8
   d4c34:	9303      	str	r3, [sp, #12]
   d4c36:	f7ff ff01 	bl	d4a3c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4c3a:	9a03      	ldr	r2, [sp, #12]
   d4c3c:	2301      	movs	r3, #1
   d4c3e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4c40:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4c44:	2014      	movs	r0, #20
   d4c46:	f002 facd 	bl	d71e4 <delay>
	noInterrupts();
   d4c4a:	f002 fe89 	bl	d7960 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4c4e:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4c50:	7833      	ldrb	r3, [r6, #0]
   d4c52:	f3bf 8f5b 	dmb	ish
   d4c56:	07d8      	lsls	r0, r3, #31
   d4c58:	d409      	bmi.n	d4c6e <_ZN3DHT4readEv+0x136>
   d4c5a:	4873      	ldr	r0, [pc, #460]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4c5c:	f7ff fa23 	bl	d40a6 <__cxa_guard_acquire>
   d4c60:	b128      	cbz	r0, d4c6e <_ZN3DHT4readEv+0x136>
   d4c62:	f002 f80b 	bl	d6c7c <HAL_Pin_Map>
   d4c66:	6028      	str	r0, [r5, #0]
   d4c68:	486f      	ldr	r0, [pc, #444]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4c6a:	f7ff fa21 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4c6e:	682b      	ldr	r3, [r5, #0]
   d4c70:	013f      	lsls	r7, r7, #4
   d4c72:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4c76:	7833      	ldrb	r3, [r6, #0]
   d4c78:	f3bf 8f5b 	dmb	ish
   d4c7c:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4c7e:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4c82:	d409      	bmi.n	d4c98 <_ZN3DHT4readEv+0x160>
   d4c84:	4868      	ldr	r0, [pc, #416]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4c86:	f7ff fa0e 	bl	d40a6 <__cxa_guard_acquire>
   d4c8a:	b128      	cbz	r0, d4c98 <_ZN3DHT4readEv+0x160>
   d4c8c:	f001 fff6 	bl	d6c7c <HAL_Pin_Map>
   d4c90:	6028      	str	r0, [r5, #0]
   d4c92:	4865      	ldr	r0, [pc, #404]	; (d4e28 <_ZN3DHT4readEv+0x2f0>)
   d4c94:	f7ff fa0c 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4c98:	682b      	ldr	r3, [r5, #0]
   d4c9a:	441f      	add	r7, r3
   d4c9c:	7878      	ldrb	r0, [r7, #1]
   d4c9e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4ca2:	ea40 0008 	orr.w	r0, r0, r8
   d4ca6:	f7ff fee1 	bl	d4a6c <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4caa:	2028      	movs	r0, #40	; 0x28
   d4cac:	f001 ffd6 	bl	d6c5c <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4cb0:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4cb2:	f8df 8174 	ldr.w	r8, [pc, #372]	; d4e28 <_ZN3DHT4readEv+0x2f0>
   d4cb6:	2100      	movs	r1, #0
   d4cb8:	f004 fc6c 	bl	d9594 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d4cbc:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d4cbe:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4cc0:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4cc2:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4cc4:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d4cc8:	f894 b006 	ldrb.w	fp, [r4, #6]
   d4ccc:	7833      	ldrb	r3, [r6, #0]
   d4cce:	f3bf 8f5b 	dmb	ish
   d4cd2:	07da      	lsls	r2, r3, #31
   d4cd4:	d409      	bmi.n	d4cea <_ZN3DHT4readEv+0x1b2>
   d4cd6:	4640      	mov	r0, r8
   d4cd8:	f7ff f9e5 	bl	d40a6 <__cxa_guard_acquire>
   d4cdc:	b128      	cbz	r0, d4cea <_ZN3DHT4readEv+0x1b2>
   d4cde:	f001 ffcd 	bl	d6c7c <HAL_Pin_Map>
   d4ce2:	6028      	str	r0, [r5, #0]
   d4ce4:	4640      	mov	r0, r8
   d4ce6:	f7ff f9e3 	bl	d40b0 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4cea:	682b      	ldr	r3, [r5, #0]
   d4cec:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4cf0:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4cf4:	015b      	lsls	r3, r3, #5
   d4cf6:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4cf8:	7833      	ldrb	r3, [r6, #0]
   d4cfa:	f3bf 8f5b 	dmb	ish
   d4cfe:	07db      	lsls	r3, r3, #31
   d4d00:	d409      	bmi.n	d4d16 <_ZN3DHT4readEv+0x1de>
   d4d02:	4640      	mov	r0, r8
   d4d04:	f7ff f9cf 	bl	d40a6 <__cxa_guard_acquire>
   d4d08:	b128      	cbz	r0, d4d16 <_ZN3DHT4readEv+0x1de>
   d4d0a:	f001 ffb7 	bl	d6c7c <HAL_Pin_Map>
   d4d0e:	6028      	str	r0, [r5, #0]
   d4d10:	4640      	mov	r0, r8
   d4d12:	f7ff f9cd 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4d16:	682b      	ldr	r3, [r5, #0]
   d4d18:	445b      	add	r3, fp
   d4d1a:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4d1e:	9b01      	ldr	r3, [sp, #4]
   d4d20:	f00b 0b1f 	and.w	fp, fp, #31
   d4d24:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4d28:	4658      	mov	r0, fp
   d4d2a:	f7ff feac 	bl	d4a86 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4d2e:	4658      	mov	r0, fp
   d4d30:	f7ff fea9 	bl	d4a86 <nrf_gpio_pin_read>
   d4d34:	9b00      	ldr	r3, [sp, #0]
   d4d36:	4283      	cmp	r3, r0
   d4d38:	d109      	bne.n	d4d4e <_ZN3DHT4readEv+0x216>
			counter++;
   d4d3a:	f109 0901 	add.w	r9, r9, #1
   d4d3e:	fa5f f989 	uxtb.w	r9, r9
   d4d42:	2001      	movs	r0, #1
   d4d44:	f001 ff8a 	bl	d6c5c <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d4d48:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4d4c:	d1bc      	bne.n	d4cc8 <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4d4e:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4d52:	7833      	ldrb	r3, [r6, #0]
   d4d54:	f3bf 8f5b 	dmb	ish
   d4d58:	07d8      	lsls	r0, r3, #31
   d4d5a:	d409      	bmi.n	d4d70 <_ZN3DHT4readEv+0x238>
   d4d5c:	4640      	mov	r0, r8
   d4d5e:	f7ff f9a2 	bl	d40a6 <__cxa_guard_acquire>
   d4d62:	b128      	cbz	r0, d4d70 <_ZN3DHT4readEv+0x238>
   d4d64:	f001 ff8a 	bl	d6c7c <HAL_Pin_Map>
   d4d68:	6028      	str	r0, [r5, #0]
   d4d6a:	4640      	mov	r0, r8
   d4d6c:	f7ff f9a0 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4d70:	682b      	ldr	r3, [r5, #0]
   d4d72:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d4d76:	f813 300b 	ldrb.w	r3, [r3, fp]
   d4d7a:	015b      	lsls	r3, r3, #5
   d4d7c:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4d7e:	7833      	ldrb	r3, [r6, #0]
   d4d80:	f3bf 8f5b 	dmb	ish
   d4d84:	07d9      	lsls	r1, r3, #31
   d4d86:	d409      	bmi.n	d4d9c <_ZN3DHT4readEv+0x264>
   d4d88:	4640      	mov	r0, r8
   d4d8a:	f7ff f98c 	bl	d40a6 <__cxa_guard_acquire>
   d4d8e:	b128      	cbz	r0, d4d9c <_ZN3DHT4readEv+0x264>
   d4d90:	f001 ff74 	bl	d6c7c <HAL_Pin_Map>
   d4d94:	6028      	str	r0, [r5, #0]
   d4d96:	4640      	mov	r0, r8
   d4d98:	f7ff f98a 	bl	d40b0 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4d9c:	682b      	ldr	r3, [r5, #0]
   d4d9e:	445b      	add	r3, fp
   d4da0:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4da4:	9b00      	ldr	r3, [sp, #0]
   d4da6:	f00b 0b1f 	and.w	fp, fp, #31
   d4daa:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d4dae:	4658      	mov	r0, fp
   d4db0:	f7ff fe69 	bl	d4a86 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4db4:	4658      	mov	r0, fp
   d4db6:	f7ff fe66 	bl	d4a86 <nrf_gpio_pin_read>

		if (counter == 255) break;
   d4dba:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d4dbe:	b2c3      	uxtb	r3, r0
   d4dc0:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4dc2:	d018      	beq.n	d4df6 <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4dc4:	2f03      	cmp	r7, #3
   d4dc6:	d911      	bls.n	d4dec <_ZN3DHT4readEv+0x2b4>
   d4dc8:	07fa      	lsls	r2, r7, #31
   d4dca:	d40f      	bmi.n	d4dec <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4dcc:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4dd0:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d4dd4:	5ca3      	ldrb	r3, [r4, r2]
   d4dd6:	005b      	lsls	r3, r3, #1
   d4dd8:	b2db      	uxtb	r3, r3
   d4dda:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4ddc:	7a21      	ldrb	r1, [r4, #8]
   d4dde:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4de0:	bf3c      	itt	cc
   d4de2:	f043 0301 	orrcc.w	r3, r3, #1
   d4de6:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4de8:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d4dec:	3701      	adds	r7, #1
   d4dee:	b2ff      	uxtb	r7, r7
   d4df0:	2f55      	cmp	r7, #85	; 0x55
   d4df2:	f47f af67 	bne.w	d4cc4 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d4df6:	f002 fdb5 	bl	d7964 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d4dfa:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d4dfe:	d910      	bls.n	d4e22 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d4e00:	7863      	ldrb	r3, [r4, #1]
   d4e02:	7820      	ldrb	r0, [r4, #0]
   d4e04:	4418      	add	r0, r3
   d4e06:	78a3      	ldrb	r3, [r4, #2]
   d4e08:	4418      	add	r0, r3
   d4e0a:	78e3      	ldrb	r3, [r4, #3]
   d4e0c:	4418      	add	r0, r3
   d4e0e:	7923      	ldrb	r3, [r4, #4]
   d4e10:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d4e12:	1ac3      	subs	r3, r0, r3
   d4e14:	4258      	negs	r0, r3
   d4e16:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d4e18:	b005      	add	sp, #20
   d4e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d4e1e:	2001      	movs	r0, #1
   d4e20:	e7fa      	b.n	d4e18 <_ZN3DHT4readEv+0x2e0>
	return false;
   d4e22:	2000      	movs	r0, #0
   d4e24:	e7f8      	b.n	d4e18 <_ZN3DHT4readEv+0x2e0>
   d4e26:	bf00      	nop
   d4e28:	2003e478 	.word	0x2003e478
   d4e2c:	2003e47c 	.word	0x2003e47c

000d4e30 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4e30:	b510      	push	{r4, lr}
   d4e32:	4604      	mov	r4, r0
	if (read()) {
   d4e34:	f7ff fe80 	bl	d4b38 <_ZN3DHT4readEv>
   d4e38:	b320      	cbz	r0, d4e84 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d4e3a:	79e3      	ldrb	r3, [r4, #7]
   d4e3c:	2b0b      	cmp	r3, #11
   d4e3e:	d01b      	beq.n	d4e78 <_ZN3DHT15readTemperatureEv+0x48>
   d4e40:	3b15      	subs	r3, #21
   d4e42:	2b01      	cmp	r3, #1
   d4e44:	d81e      	bhi.n	d4e84 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d4e46:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d4e48:	eddf 6a10 	vldr	s13, [pc, #64]	; d4e8c <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4e50:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d4e54:	78e2      	ldrb	r2, [r4, #3]
   d4e56:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d4e5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d4e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d4e62:	061b      	lsls	r3, r3, #24
				f += data[3];
   d4e64:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4e68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4e6c:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4e70:	d507      	bpl.n	d4e82 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d4e72:	eeb1 0a40 	vneg.f32	s0, s0
   d4e76:	e004      	b.n	d4e82 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d4e78:	78a3      	ldrb	r3, [r4, #2]
   d4e7a:	ee00 3a10 	vmov	s0, r3
   d4e7e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4e82:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4e84:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4e90 <_ZN3DHT15readTemperatureEv+0x60>
   d4e88:	e7fb      	b.n	d4e82 <_ZN3DHT15readTemperatureEv+0x52>
   d4e8a:	bf00      	nop
   d4e8c:	43800000 	.word	0x43800000
   d4e90:	7fc00000 	.word	0x7fc00000

000d4e94 <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d4e94:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d4e96:	f7ff ffcb 	bl	d4e30 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d4e9a:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4e9e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4ea2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4ea6:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d4eaa:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4eb4 <_ZN3DHT16getTempFarenheitEv+0x20>
   d4eae:	ee37 0a00 	vadd.f32	s0, s14, s0
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	42000000 	.word	0x42000000

000d4eb8 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4eb8:	b510      	push	{r4, lr}
   d4eba:	4604      	mov	r4, r0
	if (read()) {
   d4ebc:	f7ff fe3c 	bl	d4b38 <_ZN3DHT4readEv>
   d4ec0:	b1f0      	cbz	r0, d4f00 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d4ec2:	79e3      	ldrb	r3, [r4, #7]
   d4ec4:	2b0b      	cmp	r3, #11
   d4ec6:	d015      	beq.n	d4ef4 <_ZN3DHT12readHumidityEv+0x3c>
   d4ec8:	3b15      	subs	r3, #21
   d4eca:	2b01      	cmp	r3, #1
   d4ecc:	d818      	bhi.n	d4f00 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d4ece:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d4ed0:	eddf 6a0d 	vldr	s13, [pc, #52]	; d4f08 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d4ed4:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d4ed8:	7863      	ldrb	r3, [r4, #1]
   d4eda:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d4ede:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d4ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4ee6:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d4eea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4eee:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d4ef2:	bd10      	pop	{r4, pc}
				f = data[0];
   d4ef4:	7823      	ldrb	r3, [r4, #0]
   d4ef6:	ee00 3a10 	vmov	s0, r3
   d4efa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d4efe:	e7f8      	b.n	d4ef2 <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d4f00:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4f0c <_ZN3DHT12readHumidityEv+0x54>
   d4f04:	e7f5      	b.n	d4ef2 <_ZN3DHT12readHumidityEv+0x3a>
   d4f06:	bf00      	nop
   d4f08:	43800000 	.word	0x43800000
   d4f0c:	7fc00000 	.word	0x7fc00000

000d4f10 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d4f10:	f7ff bfd2 	b.w	d4eb8 <_ZN3DHT12readHumidityEv>

000d4f14 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d4f14:	b510      	push	{r4, lr}
   d4f16:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d4f18:	7001      	strb	r1, [r0, #0]
   d4f1a:	7042      	strb	r2, [r0, #1]
   d4f1c:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d4f1e:	2101      	movs	r1, #1
   d4f20:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d4f24:	f005 fc1e 	bl	da764 <calloc>
   d4f28:	6060      	str	r0, [r4, #4]
}
   d4f2a:	4620      	mov	r0, r4
   d4f2c:	bd10      	pop	{r4, pc}

000d4f2e <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d4f2e:	b510      	push	{r4, lr}
   d4f30:	4604      	mov	r4, r0
{
    free(_led_state);
   d4f32:	6840      	ldr	r0, [r0, #4]
   d4f34:	f002 f91e 	bl	d7174 <free>
}
   d4f38:	4620      	mov	r0, r4
   d4f3a:	bd10      	pop	{r4, pc}

000d4f3c <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4f3c:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d4f3e:	2100      	movs	r1, #0
{
   d4f40:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d4f42:	7800      	ldrb	r0, [r0, #0]
   d4f44:	f004 fb37 	bl	d95b6 <digitalWrite>
   d4f48:	2014      	movs	r0, #20
   d4f4a:	f001 fe87 	bl	d6c5c <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d4f4e:	7820      	ldrb	r0, [r4, #0]
   d4f50:	2101      	movs	r1, #1
   d4f52:	f004 fb30 	bl	d95b6 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d4f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4f5a:	2014      	movs	r0, #20
   d4f5c:	f001 be7e 	b.w	d6c5c <HAL_Delay_Microseconds>

000d4f60 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d4f60:	b570      	push	{r4, r5, r6, lr}
   d4f62:	4606      	mov	r6, r0
   d4f64:	460c      	mov	r4, r1
   d4f66:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d4f68:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   d4f6a:	bf4c      	ite	mi
   d4f6c:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d4f6e:	2100      	movpl	r1, #0
   d4f70:	7870      	ldrb	r0, [r6, #1]
   d4f72:	f004 fb20 	bl	d95b6 <digitalWrite>
        clk();
   d4f76:	3d01      	subs	r5, #1
   d4f78:	4630      	mov	r0, r6
   d4f7a:	f7ff ffdf 	bl	d4f3c <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d4f7e:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   d4f80:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   d4f84:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   d4f86:	d1ef      	bne.n	d4f68 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   d4f88:	bd70      	pop	{r4, r5, r6, pc}

000d4f8a <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4f8c:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   d4f90:	461e      	mov	r6, r3
   d4f92:	460c      	mov	r4, r1
   d4f94:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4f96:	bf14      	ite	ne
   d4f98:	21c0      	movne	r1, #192	; 0xc0
   d4f9a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4f9c:	0673      	lsls	r3, r6, #25
   d4f9e:	bf58      	it	pl
   d4fa0:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d4fa4:	062a      	lsls	r2, r5, #24
   d4fa6:	bf58      	it	pl
   d4fa8:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d4fac:	066b      	lsls	r3, r5, #25
   d4fae:	bf58      	it	pl
   d4fb0:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d4fb4:	0622      	lsls	r2, r4, #24
   d4fb6:	bf58      	it	pl
   d4fb8:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d4fbc:	0663      	lsls	r3, r4, #25
   d4fbe:	bf58      	it	pl
   d4fc0:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d4fc4:	9001      	str	r0, [sp, #4]
   d4fc6:	f7ff ffcb 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d4fca:	9801      	ldr	r0, [sp, #4]
   d4fcc:	4631      	mov	r1, r6
   d4fce:	f7ff ffc7 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d4fd2:	9801      	ldr	r0, [sp, #4]
   d4fd4:	4629      	mov	r1, r5
   d4fd6:	f7ff ffc3 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d4fda:	9801      	ldr	r0, [sp, #4]
   d4fdc:	4621      	mov	r1, r4
}
   d4fde:	b002      	add	sp, #8
   d4fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   d4fe4:	f7ff bfbc 	b.w	d4f60 <_ZN12ChainableLED8sendByteEh>

000d4fe8 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d4fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4fec:	4604      	mov	r4, r0
   d4fee:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d4ff0:	2100      	movs	r1, #0
{
   d4ff2:	4690      	mov	r8, r2
   d4ff4:	4699      	mov	r9, r3
   d4ff6:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   d4ffa:	f7ff ffb1 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4ffe:	2100      	movs	r1, #0
   d5000:	4620      	mov	r0, r4
   d5002:	f7ff ffad 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d5006:	2100      	movs	r1, #0
   d5008:	4620      	mov	r0, r4
   d500a:	f7ff ffa9 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d500e:	2100      	movs	r1, #0
   d5010:	4620      	mov	r0, r4
   d5012:	f7ff ffa5 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>
   d5016:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d5018:	78a3      	ldrb	r3, [r4, #2]
   d501a:	b2f5      	uxtb	r5, r6
   d501c:	42ab      	cmp	r3, r5
   d501e:	d919      	bls.n	d5054 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
   d5020:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   d5024:	42af      	cmp	r7, r5
   d5026:	f100 0201 	add.w	r2, r0, #1
   d502a:	f100 0302 	add.w	r3, r0, #2
   d502e:	d108      	bne.n	d5042 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
        {
            _led_state[i*3 + _CL_RED] = red;
   d5030:	6861      	ldr	r1, [r4, #4]
   d5032:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   d5036:	6861      	ldr	r1, [r4, #4]
   d5038:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   d503c:	6861      	ldr	r1, [r4, #4]
   d503e:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d5042:	6861      	ldr	r1, [r4, #4]
   d5044:	5ccb      	ldrb	r3, [r1, r3]
   d5046:	5c8a      	ldrb	r2, [r1, r2]
   d5048:	5c09      	ldrb	r1, [r1, r0]
   d504a:	4620      	mov	r0, r4
   d504c:	f7ff ff9d 	bl	d4f8a <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   d5050:	3601      	adds	r6, #1
   d5052:	e7e1      	b.n	d5018 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d5054:	4620      	mov	r0, r4
   d5056:	2100      	movs	r1, #0
   d5058:	f7ff ff82 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d505c:	4620      	mov	r0, r4
   d505e:	2100      	movs	r1, #0
   d5060:	f7ff ff7e 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d5064:	4620      	mov	r0, r4
   d5066:	2100      	movs	r1, #0
   d5068:	f7ff ff7a 	bl	d4f60 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d506c:	4620      	mov	r0, r4
   d506e:	2100      	movs	r1, #0
}
   d5070:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   d5074:	f7ff bf74 	b.w	d4f60 <_ZN12ChainableLED8sendByteEh>

000d5078 <_ZN12ChainableLED4initEv>:
{
   d5078:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d507a:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d507c:	2101      	movs	r1, #1
   d507e:	7800      	ldrb	r0, [r0, #0]
   d5080:	f004 fa88 	bl	d9594 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d5084:	7860      	ldrb	r0, [r4, #1]
   d5086:	2101      	movs	r1, #1
   d5088:	f004 fa84 	bl	d9594 <pinMode>
   d508c:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   d508e:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   d5090:	78a3      	ldrb	r3, [r4, #2]
   d5092:	b2e9      	uxtb	r1, r5
   d5094:	428b      	cmp	r3, r1
   d5096:	d907      	bls.n	d50a8 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   d5098:	2300      	movs	r3, #0
   d509a:	9600      	str	r6, [sp, #0]
   d509c:	461a      	mov	r2, r3
   d509e:	4620      	mov	r0, r4
   d50a0:	f7ff ffa2 	bl	d4fe8 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   d50a4:	3501      	adds	r5, #1
   d50a6:	e7f3      	b.n	d5090 <_ZN12ChainableLED4initEv+0x18>
}
   d50a8:	b002      	add	sp, #8
   d50aa:	bd70      	pop	{r4, r5, r6, pc}

000d50ac <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d50ac:	6803      	ldr	r3, [r0, #0]
   d50ae:	b2c9      	uxtb	r1, r1
   d50b0:	689b      	ldr	r3, [r3, #8]
   d50b2:	4718      	bx	r3

000d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
    delay(5);
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   d50b4:	b510      	push	{r4, lr}
   d50b6:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d50b8:	f004 faae 	bl	d9618 <_Z19__fetch_global_Wirev>
   d50bc:	213c      	movs	r1, #60	; 0x3c
   d50be:	f002 fc45 	bl	d794c <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
  Wire.write(SeeedOLED_Command_Mode);	     // Set OLED Command mode
   d50c2:	f004 faa9 	bl	d9618 <_Z19__fetch_global_Wirev>
   d50c6:	2180      	movs	r1, #128	; 0x80
   d50c8:	f7ff fff0 	bl	d50ac <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d50cc:	f004 faa4 	bl	d9618 <_Z19__fetch_global_Wirev>
   d50d0:	6803      	ldr	r3, [r0, #0]
   d50d2:	4621      	mov	r1, r4
   d50d4:	689b      	ldr	r3, [r3, #8]
   d50d6:	4798      	blx	r3
#else
  Wire.send(SeeedOLED_Command_Mode);	     // Set OLED Command mode
  Wire.send(command);
#endif
  Wire.endTransmission();    		     // End I2C communication
   d50d8:	f004 fa9e 	bl	d9618 <_Z19__fetch_global_Wirev>
}
   d50dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission();    		     // End I2C communication
   d50e0:	f002 bc3b 	b.w	d795a <_ZN7TwoWire15endTransmissionEv>

000d50e4 <_ZN9SeeedOLED4initEv>:
{
   d50e4:	b508      	push	{r3, lr}
    sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d50e6:	20ae      	movs	r0, #174	; 0xae
   d50e8:	f7ff ffe4 	bl	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d50ec:	2005      	movs	r0, #5
   d50ee:	f002 f879 	bl	d71e4 <delay>
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d50f2:	20af      	movs	r0, #175	; 0xaf
   d50f4:	f7ff ffde 	bl	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d50f8:	2005      	movs	r0, #5
   d50fa:	f002 f873 	bl	d71e4 <delay>
}
   d50fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
   d5102:	20a6      	movs	r0, #166	; 0xa6
   d5104:	f7ff bfd6 	b.w	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d5108 <_ZN9SeeedOLED11setPageModeEv>:
    sendCommand(0x20); 			//set addressing mode
    sendCommand(0x00); 			//set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d5108:	b508      	push	{r3, lr}
    addressingMode = PAGE_MODE;
   d510a:	2301      	movs	r3, #1
   d510c:	7003      	strb	r3, [r0, #0]
    sendCommand(0x20); 			//set addressing mode
   d510e:	2020      	movs	r0, #32
   d5110:	f7ff ffd0 	bl	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x02); 			//set page addressing mode
}
   d5114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(0x02); 			//set page addressing mode
   d5118:	2002      	movs	r0, #2
   d511a:	f7ff bfcb 	b.w	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d511e <_ZN9SeeedOLED9setTextXYEhh>:


void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d511e:	b510      	push	{r4, lr}
    sendCommand(0xB0 + Row); 			//set page address
   d5120:	3950      	subs	r1, #80	; 0x50
{
   d5122:	4614      	mov	r4, r2
    sendCommand(0xB0 + Row); 			//set page address
   d5124:	b2c8      	uxtb	r0, r1
   d5126:	f7ff ffc5 	bl	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x00 + (8*Column & 0x0F)); 	//set column lower address
   d512a:	00e0      	lsls	r0, r4, #3
   d512c:	f000 0008 	and.w	r0, r0, #8
   d5130:	f7ff ffc0 	bl	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d5134:	f3c4 0043 	ubfx	r0, r4, #1, #4
   d5138:	3010      	adds	r0, #16
}
   d513a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d513e:	f7ff bfb9 	b.w	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d5142 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
  setTextXY(0,0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d5142:	b510      	push	{r4, lr}
   d5144:	460c      	mov	r4, r1
     Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d5146:	f004 fa67 	bl	d9618 <_Z19__fetch_global_Wirev>
   d514a:	213c      	movs	r1, #60	; 0x3c
   d514c:	f002 fbfe 	bl	d794c <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
     Wire.write(SeeedOLED_Data_Mode);            // data mode
   d5150:	f004 fa62 	bl	d9618 <_Z19__fetch_global_Wirev>
   d5154:	2140      	movs	r1, #64	; 0x40
   d5156:	f7ff ffa9 	bl	d50ac <_ZN7TwoWire5writeEi>
     Wire.write(Data);
   d515a:	f004 fa5d 	bl	d9618 <_Z19__fetch_global_Wirev>
   d515e:	6803      	ldr	r3, [r0, #0]
   d5160:	4621      	mov	r1, r4
   d5162:	689b      	ldr	r3, [r3, #8]
   d5164:	4798      	blx	r3
#else
     Wire.send(SeeedOLED_Data_Mode);            // data mode
     Wire.send(Data);
#endif
     Wire.endTransmission();                    // stop I2C transmission
   d5166:	f004 fa57 	bl	d9618 <_Z19__fetch_global_Wirev>
}
   d516a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     Wire.endTransmission();                    // stop I2C transmission
   d516e:	f002 bbf4 	b.w	d795a <_ZN7TwoWire15endTransmissionEv>
	...

000d5174 <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
    if(C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d5174:	f1a1 0320 	sub.w	r3, r1, #32
    {
    C=' '; //Space
   d5178:	2b5f      	cmp	r3, #95	; 0x5f
   d517a:	bf88      	it	hi
   d517c:	2120      	movhi	r1, #32
{
   d517e:	b570      	push	{r4, r5, r6, lr}
   d5180:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   d5184:	4d07      	ldr	r5, [pc, #28]	; (d51a4 <_ZN9SeeedOLED7putCharEh+0x30>)
   d5186:	3920      	subs	r1, #32
   d5188:	4606      	mov	r6, r0
    }
    unsigned char i=0;
    for(i=0;i<8;i++)
   d518a:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C=' '; //Space
   d518e:	2408      	movs	r4, #8
    {
       //read bytes from code memory
       sendData(pgm_read_byte(&BasicFont[C-32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d5190:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5194:	4630      	mov	r0, r6
   d5196:	3c01      	subs	r4, #1
   d5198:	f7ff ffd3 	bl	d5142 <_ZN9SeeedOLED8sendDataEh>
    for(i=0;i<8;i++)
   d519c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d51a0:	d1f6      	bne.n	d5190 <_ZN9SeeedOLED7putCharEh+0x1c>
    }
}
   d51a2:	bd70      	pop	{r4, r5, r6, pc}
   d51a4:	000dc765 	.word	0x000dc765

000d51a8 <_ZN9SeeedOLED12clearDisplayEv>:
{
   d51a8:	b570      	push	{r4, r5, r6, lr}
   d51aa:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d51ac:	20ae      	movs	r0, #174	; 0xae
   d51ae:	f7ff ff81 	bl	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   d51b2:	2600      	movs	r6, #0
    setTextXY(j,0);
   d51b4:	2200      	movs	r2, #0
   d51b6:	b2f1      	uxtb	r1, r6
   d51b8:	4628      	mov	r0, r5
   d51ba:	f7ff ffb0 	bl	d511e <_ZN9SeeedOLED9setTextXYEhh>
   d51be:	2410      	movs	r4, #16
        putChar(' ');
   d51c0:	2120      	movs	r1, #32
   d51c2:	4628      	mov	r0, r5
   d51c4:	3c01      	subs	r4, #1
   d51c6:	f7ff ffd5 	bl	d5174 <_ZN9SeeedOLED7putCharEh>
      for(i=0;i<16;i++)  //clear all columns
   d51ca:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d51ce:	d1f7      	bne.n	d51c0 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for(j=0;j<8;j++)
   d51d0:	3601      	adds	r6, #1
   d51d2:	2e08      	cmp	r6, #8
   d51d4:	d1ee      	bne.n	d51b4 <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d51d6:	20af      	movs	r0, #175	; 0xaf
   d51d8:	f7ff ff6c 	bl	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0,0);
   d51dc:	4622      	mov	r2, r4
   d51de:	4621      	mov	r1, r4
   d51e0:	4628      	mov	r0, r5
}
   d51e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0,0);
   d51e6:	f7ff bf9a 	b.w	d511e <_ZN9SeeedOLED9setTextXYEhh>

000d51ea <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   d51ea:	b570      	push	{r4, r5, r6, lr}
   d51ec:	4606      	mov	r6, r0
   d51ee:	460d      	mov	r5, r1
   d51f0:	2400      	movs	r4, #0
    unsigned char i=0;
    while(String[i])
   d51f2:	b2e3      	uxtb	r3, r4
   d51f4:	3401      	adds	r4, #1
   d51f6:	5ce9      	ldrb	r1, [r5, r3]
   d51f8:	b119      	cbz	r1, d5202 <_ZN9SeeedOLED9putStringEPKc+0x18>
    {
        putChar(String[i]);
   d51fa:	4630      	mov	r0, r6
   d51fc:	f7ff ffba 	bl	d5174 <_ZN9SeeedOLED7putCharEh>
    while(String[i])
   d5200:	e7f7      	b.n	d51f2 <_ZN9SeeedOLED9putStringEPKc+0x8>
        i++;
    }
}
   d5202:	bd70      	pop	{r4, r5, r6, pc}

000d5204 <_ZN9SeeedOLED9putNumberEl>:

unsigned char SeeedOLED::putNumber(long long_num)
{
   d5204:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5206:	b085      	sub	sp, #20
  unsigned char char_buffer[10]="";
   d5208:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d520a:	1e0c      	subs	r4, r1, #0
  unsigned char char_buffer[10]="";
   d520c:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   d5210:	4606      	mov	r6, r0
  unsigned char char_buffer[10]="";
   d5212:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (long_num < 0)
   d5216:	da24      	bge.n	d5262 <_ZN9SeeedOLED9putNumberEl+0x5e>
  {
    f=1;
    putChar('-');
   d5218:	212d      	movs	r1, #45	; 0x2d
   d521a:	f7ff ffab 	bl	d5174 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d521e:	4264      	negs	r4, r4
    f=1;
   d5220:	2301      	movs	r3, #1
  unsigned char f = 0;
   d5222:	2500      	movs	r5, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d5224:	200a      	movs	r0, #10
   d5226:	462a      	mov	r2, r5
   d5228:	a904      	add	r1, sp, #16
   d522a:	440a      	add	r2, r1
   d522c:	3501      	adds	r5, #1
   d522e:	fbb4 f1f0 	udiv	r1, r4, r0
   d5232:	fb00 4411 	mls	r4, r0, r1, r4
   d5236:	f802 4c0c 	strb.w	r4, [r2, #-12]
   d523a:	b2ed      	uxtb	r5, r5
  while (long_num > 0)
   d523c:	460c      	mov	r4, r1
   d523e:	2900      	cmp	r1, #0
   d5240:	d1f1      	bne.n	d5226 <_ZN9SeeedOLED9putNumberEl+0x22>
    long_num /= 10;
  }

  f=f+i;
   d5242:	442b      	add	r3, r5
   d5244:	b2dc      	uxtb	r4, r3
   d5246:	ab04      	add	r3, sp, #16
   d5248:	195f      	adds	r7, r3, r5
   d524a:	3f0d      	subs	r7, #13
  for(; i > 0; i--)
   d524c:	b175      	cbz	r5, d526c <_ZN9SeeedOLED9putNumberEl+0x68>
  {
    putChar('0'+ char_buffer[i - 1]);
   d524e:	f817 1901 	ldrb.w	r1, [r7], #-1
   d5252:	3130      	adds	r1, #48	; 0x30
   d5254:	b2c9      	uxtb	r1, r1
   d5256:	4630      	mov	r0, r6
  for(; i > 0; i--)
   d5258:	3d01      	subs	r5, #1
    putChar('0'+ char_buffer[i - 1]);
   d525a:	f7ff ff8b 	bl	d5174 <_ZN9SeeedOLED7putCharEh>
  for(; i > 0; i--)
   d525e:	b2ed      	uxtb	r5, r5
   d5260:	e7f4      	b.n	d524c <_ZN9SeeedOLED9putNumberEl+0x48>
  else if (long_num == 0)
   d5262:	d1de      	bne.n	d5222 <_ZN9SeeedOLED9putNumberEl+0x1e>
    putChar('0');
   d5264:	2130      	movs	r1, #48	; 0x30
   d5266:	f7ff ff85 	bl	d5174 <_ZN9SeeedOLED7putCharEh>
    return f;
   d526a:	2401      	movs	r4, #1
  }
  return f;

}
   d526c:	4620      	mov	r0, r4
   d526e:	b005      	add	sp, #20
   d5270:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5272 <_ZN9SeeedOLED16setNormalDisplayEv>:
    sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
    sendCommand(SeeedOLED_Normal_Display_Cmd);
   d5272:	20a6      	movs	r0, #166	; 0xa6
   d5274:	f7ff bf1e 	b.w	d50b4 <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d5278 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
   d5278:	6803      	ldr	r3, [r0, #0]
   d527a:	4718      	bx	r3

000d527c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d527c:	2a01      	cmp	r2, #1
   d527e:	d003      	beq.n	d5288 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d5280:	2a02      	cmp	r2, #2
   d5282:	d003      	beq.n	d528c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d5284:	2000      	movs	r0, #0
   d5286:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5288:	6001      	str	r1, [r0, #0]
	      break;
   d528a:	e7fb      	b.n	d5284 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d528c:	680b      	ldr	r3, [r1, #0]
   d528e:	6003      	str	r3, [r0, #0]
	}
   d5290:	e7f8      	b.n	d5284 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d5294 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d5294:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5296:	201c      	movs	r0, #28
   d5298:	f7fe fefd 	bl	d4096 <_Znwj>
   d529c:	4604      	mov	r4, r0
   d529e:	b148      	cbz	r0, d52b4 <_Z10builderTcpv+0x20>
   d52a0:	4b06      	ldr	r3, [pc, #24]	; (d52bc <_Z10builderTcpv+0x28>)
   d52a2:	4907      	ldr	r1, [pc, #28]	; (d52c0 <_Z10builderTcpv+0x2c>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	9300      	str	r3, [sp, #0]
   d52a8:	6809      	ldr	r1, [r1, #0]
   d52aa:	4b06      	ldr	r3, [pc, #24]	; (d52c4 <_Z10builderTcpv+0x30>)
   d52ac:	f242 3234 	movw	r2, #9012	; 0x2334
   d52b0:	f001 f878 	bl	d63a4 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d52b4:	4620      	mov	r0, r4
   d52b6:	b002      	add	sp, #8
   d52b8:	bd10      	pop	{r4, pc}
   d52ba:	bf00      	nop
   d52bc:	2003e50c 	.word	0x2003e50c
   d52c0:	2003e508 	.word	0x2003e508
   d52c4:	000dca65 	.word	0x000dca65

000d52c8 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d52c8:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d52ca:	2020      	movs	r0, #32
   d52cc:	f7fe fee3 	bl	d4096 <_Znwj>
   d52d0:	4604      	mov	r4, r0
   d52d2:	b140      	cbz	r0, d52e6 <_Z11builderHttpv+0x1e>
   d52d4:	4b05      	ldr	r3, [pc, #20]	; (d52ec <_Z11builderHttpv+0x24>)
   d52d6:	4906      	ldr	r1, [pc, #24]	; (d52f0 <_Z11builderHttpv+0x28>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	9300      	str	r3, [sp, #0]
   d52dc:	6809      	ldr	r1, [r1, #0]
   d52de:	4b05      	ldr	r3, [pc, #20]	; (d52f4 <_Z11builderHttpv+0x2c>)
   d52e0:	2250      	movs	r2, #80	; 0x50
   d52e2:	f000 fa5f 	bl	d57a4 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d52e6:	4620      	mov	r0, r4
   d52e8:	b002      	add	sp, #8
   d52ea:	bd10      	pop	{r4, pc}
   d52ec:	2003e50c 	.word	0x2003e50c
   d52f0:	2003e508 	.word	0x2003e508
   d52f4:	000dca65 	.word	0x000dca65

000d52f8 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d52f8:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d52fa:	201c      	movs	r0, #28
   d52fc:	f7fe fecb 	bl	d4096 <_Znwj>
   d5300:	4604      	mov	r4, r0
   d5302:	b148      	cbz	r0, d5318 <_Z10builderUdpv+0x20>
   d5304:	4b06      	ldr	r3, [pc, #24]	; (d5320 <_Z10builderUdpv+0x28>)
   d5306:	4907      	ldr	r1, [pc, #28]	; (d5324 <_Z10builderUdpv+0x2c>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	9300      	str	r3, [sp, #0]
   d530c:	6809      	ldr	r1, [r1, #0]
   d530e:	4b06      	ldr	r3, [pc, #24]	; (d5328 <_Z10builderUdpv+0x30>)
   d5310:	f242 3234 	movw	r2, #9012	; 0x2334
   d5314:	f001 fbb0 	bl	d6a78 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d5318:	4620      	mov	r0, r4
   d531a:	b002      	add	sp, #8
   d531c:	bd10      	pop	{r4, pc}
   d531e:	bf00      	nop
   d5320:	2003e50c 	.word	0x2003e50c
   d5324:	2003e508 	.word	0x2003e508
   d5328:	000dca65 	.word	0x000dca65

000d532c <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d532c:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d532e:	2014      	movs	r0, #20
   d5330:	f7fe feb1 	bl	d4096 <_Znwj>
   d5334:	4604      	mov	r4, r0
   d5336:	b140      	cbz	r0, d534a <_Z15builderParticlev+0x1e>
   d5338:	4b05      	ldr	r3, [pc, #20]	; (d5350 <_Z15builderParticlev+0x24>)
   d533a:	4906      	ldr	r1, [pc, #24]	; (d5354 <_Z15builderParticlev+0x28>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	9300      	str	r3, [sp, #0]
   d5340:	2300      	movs	r3, #0
   d5342:	6809      	ldr	r1, [r1, #0]
   d5344:	461a      	mov	r2, r3
   d5346:	f000 fd59 	bl	d5dfc <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   d534a:	4620      	mov	r0, r4
   d534c:	b002      	add	sp, #8
   d534e:	bd10      	pop	{r4, pc}
   d5350:	2003e50c 	.word	0x2003e50c
   d5354:	2003e508 	.word	0x2003e508

000d5358 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5358:	b510      	push	{r4, lr}
   d535a:	4b06      	ldr	r3, [pc, #24]	; (d5374 <_ZN3UDPD1Ev+0x1c>)
   d535c:	6003      	str	r3, [r0, #0]
   d535e:	3364      	adds	r3, #100	; 0x64
   d5360:	4604      	mov	r4, r0
   d5362:	6103      	str	r3, [r0, #16]
   d5364:	f003 fcd8 	bl	d8d18 <_ZN3UDP4stopEv>
   d5368:	4620      	mov	r0, r4
   d536a:	f003 fdcf 	bl	d8f0c <_ZN3UDP13releaseBufferEv>
   d536e:	4620      	mov	r0, r4
   d5370:	bd10      	pop	{r4, pc}
   d5372:	bf00      	nop
   d5374:	000dd0f4 	.word	0x000dd0f4

000d5378 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5378:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d537a:	6984      	ldr	r4, [r0, #24]
   d537c:	4b0a      	ldr	r3, [pc, #40]	; (d53a8 <_ZN9TCPClientD1Ev+0x30>)
   d537e:	6003      	str	r3, [r0, #0]
   d5380:	4605      	mov	r5, r0
   d5382:	b17c      	cbz	r4, d53a4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d5384:	6863      	ldr	r3, [r4, #4]
   d5386:	3b01      	subs	r3, #1
   d5388:	6063      	str	r3, [r4, #4]
   d538a:	b95b      	cbnz	r3, d53a4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d538c:	6823      	ldr	r3, [r4, #0]
   d538e:	4620      	mov	r0, r4
   d5390:	689b      	ldr	r3, [r3, #8]
   d5392:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5394:	68a3      	ldr	r3, [r4, #8]
   d5396:	3b01      	subs	r3, #1
   d5398:	60a3      	str	r3, [r4, #8]
   d539a:	b91b      	cbnz	r3, d53a4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d539c:	6823      	ldr	r3, [r4, #0]
   d539e:	4620      	mov	r0, r4
   d53a0:	68db      	ldr	r3, [r3, #12]
   d53a2:	4798      	blx	r3
   d53a4:	4628      	mov	r0, r5
   d53a6:	bd38      	pop	{r3, r4, r5, pc}
   d53a8:	000dd08c 	.word	0x000dd08c

000d53ac <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d53ac:	b510      	push	{r4, lr}
      if (_M_manager)
   d53ae:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d53b0:	4604      	mov	r4, r0
      if (_M_manager)
   d53b2:	b113      	cbz	r3, d53ba <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d53b4:	2203      	movs	r2, #3
   d53b6:	4601      	mov	r1, r0
   d53b8:	4798      	blx	r3
    }
   d53ba:	4620      	mov	r0, r4
   d53bc:	bd10      	pop	{r4, pc}
	...

000d53c0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d53c0:	b510      	push	{r4, lr}
   d53c2:	b086      	sub	sp, #24
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53c4:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d53c6:	9102      	str	r1, [sp, #8]
	operator=(_Functor&& __f)
   d53c8:	4604      	mov	r4, r0
   d53ca:	e893 0003 	ldmia.w	r3, {r0, r1}
   d53ce:	466a      	mov	r2, sp
   d53d0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d53d4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d53d8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d53dc:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d53e0:	68a2      	ldr	r2, [r4, #8]
   d53e2:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d53e4:	4a06      	ldr	r2, [pc, #24]	; (d5400 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
   d53e6:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d53e8:	68e2      	ldr	r2, [r4, #12]
   d53ea:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d53ec:	4a05      	ldr	r2, [pc, #20]	; (d5404 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
   d53ee:	60e2      	str	r2, [r4, #12]
   d53f0:	e884 0003 	stmia.w	r4, {r0, r1}
    class function<_Res(_ArgTypes...)>
   d53f4:	4618      	mov	r0, r3
   d53f6:	f7ff ffd9 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d53fa:	4620      	mov	r0, r4
   d53fc:	b006      	add	sp, #24
   d53fe:	bd10      	pop	{r4, pc}
   d5400:	000d527d 	.word	0x000d527d
   d5404:	000d5279 	.word	0x000d5279

000d5408 <_ZN9TCPClientD0Ev>:
   d5408:	b510      	push	{r4, lr}
   d540a:	4604      	mov	r4, r0
   d540c:	f7ff ffb4 	bl	d5378 <_ZN9TCPClientD1Ev>
   d5410:	4620      	mov	r0, r4
   d5412:	211c      	movs	r1, #28
   d5414:	f004 f92d 	bl	d9672 <_ZdlPvj>
   d5418:	4620      	mov	r0, r4
   d541a:	bd10      	pop	{r4, pc}

000d541c <_ZN3UDPD0Ev>:
   d541c:	b510      	push	{r4, lr}
   d541e:	4604      	mov	r4, r0
   d5420:	f7ff ff9a 	bl	d5358 <_ZN3UDPD1Ev>
   d5424:	4620      	mov	r0, r4
   d5426:	214c      	movs	r1, #76	; 0x4c
   d5428:	f004 f923 	bl	d9672 <_ZdlPvj>
   d542c:	4620      	mov	r0, r4
   d542e:	bd10      	pop	{r4, pc}

000d5430 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   d5430:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   d5432:	f100 0108 	add.w	r1, r0, #8
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
   d5436:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   d5438:	460b      	mov	r3, r1
      while (__x != 0)
   d543a:	b13a      	cbz	r2, d544c <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d543c:	7c15      	ldrb	r5, [r2, #16]
   d543e:	7804      	ldrb	r4, [r0, #0]
   d5440:	42a5      	cmp	r5, r4
   d5442:	bf2a      	itet	cs
   d5444:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
   d5446:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
   d5448:	6892      	ldrcs	r2, [r2, #8]
   d544a:	e7f6      	b.n	d543a <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d544c:	4299      	cmp	r1, r3
   d544e:	d004      	beq.n	d545a <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
   d5450:	7800      	ldrb	r0, [r0, #0]
   d5452:	7c1a      	ldrb	r2, [r3, #16]
   d5454:	4290      	cmp	r0, r2
   d5456:	bf38      	it	cc
   d5458:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d545a:	69da      	ldr	r2, [r3, #28]
   d545c:	b90a      	cbnz	r2, d5462 <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
   d545e:	f004 f9c0 	bl	d97e2 <_ZSt25__throw_bad_function_callv>
}
   d5462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5466:	6a1a      	ldr	r2, [r3, #32]
   d5468:	f103 0014 	add.w	r0, r3, #20
   d546c:	4710      	bx	r2

000d546e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
      _Link_type __x = _M_begin();
   d546e:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5470:	b570      	push	{r4, r5, r6, lr}
   d5472:	4616      	mov	r6, r2
   d5474:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   d5476:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   d5478:	2201      	movs	r2, #1
      while (__x != 0)
   d547a:	b15b      	cbz	r3, d5494 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d547c:	7830      	ldrb	r0, [r6, #0]
   d547e:	7c1a      	ldrb	r2, [r3, #16]
   d5480:	4290      	cmp	r0, r2
   d5482:	bf34      	ite	cc
   d5484:	6898      	ldrcc	r0, [r3, #8]
   d5486:	68d8      	ldrcs	r0, [r3, #12]
   d5488:	461d      	mov	r5, r3
   d548a:	bf34      	ite	cc
   d548c:	2201      	movcc	r2, #1
   d548e:	2200      	movcs	r2, #0
   d5490:	4603      	mov	r3, r0
   d5492:	e7f2      	b.n	d547a <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   d5494:	b192      	cbz	r2, d54bc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>
	  if (__j == begin())
   d5496:	68ca      	ldr	r2, [r1, #12]
   d5498:	42aa      	cmp	r2, r5
   d549a:	d103      	bne.n	d54a4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d549c:	e9c4 3500 	strd	r3, r5, [r4]
    }
   d54a0:	4620      	mov	r0, r4
   d54a2:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   d54a4:	4628      	mov	r0, r5
   d54a6:	f004 f93e 	bl	d9726 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d54aa:	7833      	ldrb	r3, [r6, #0]
   d54ac:	7c02      	ldrb	r2, [r0, #16]
   d54ae:	429a      	cmp	r2, r3
   d54b0:	f04f 0300 	mov.w	r3, #0
   d54b4:	d3f2      	bcc.n	d549c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d54b6:	e9c4 0300 	strd	r0, r3, [r4]
   d54ba:	e7f1      	b.n	d54a0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x32>
   d54bc:	4628      	mov	r0, r5
   d54be:	e7f4      	b.n	d54aa <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3c>

000d54c0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d54c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return &this->_M_impl._M_header; }
   d54c4:	f100 0804 	add.w	r8, r0, #4
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   d54c8:	6885      	ldr	r5, [r0, #8]
   d54ca:	b085      	sub	sp, #20
   d54cc:	4606      	mov	r6, r0
   d54ce:	4689      	mov	r9, r1
      { return &this->_M_impl._M_header; }
   d54d0:	4644      	mov	r4, r8
      while (__x != 0)
   d54d2:	b155      	cbz	r5, d54ea <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d54d4:	f899 3000 	ldrb.w	r3, [r9]
   d54d8:	7c2a      	ldrb	r2, [r5, #16]
   d54da:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
   d54dc:	bf36      	itet	cc
   d54de:	68eb      	ldrcc	r3, [r5, #12]
	  __y = __x, __x = _S_left(__x);
   d54e0:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
   d54e2:	4625      	movcc	r5, r4
   d54e4:	462c      	mov	r4, r5
   d54e6:	461d      	mov	r5, r3
   d54e8:	e7f3      	b.n	d54d2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x12>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d54ea:	45a0      	cmp	r8, r4
   d54ec:	d004      	beq.n	d54f8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x38>
   d54ee:	f899 2000 	ldrb.w	r2, [r9]
   d54f2:	7c23      	ldrb	r3, [r4, #16]
   d54f4:	429a      	cmp	r2, r3
   d54f6:	d22e      	bcs.n	d5556 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x96>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d54f8:	2024      	movs	r0, #36	; 0x24
   d54fa:	f7fe fdcc 	bl	d4096 <_Znwj>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d54fe:	f899 9000 	ldrb.w	r9, [r9]
   d5502:	f880 9010 	strb.w	r9, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   d5506:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   d5508:	45a0      	cmp	r8, r4
   d550a:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   d550c:	f100 0210 	add.w	r2, r0, #16
   d5510:	61c3      	str	r3, [r0, #28]
   d5512:	d125      	bne.n	d5560 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa0>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d5514:	6973      	ldr	r3, [r6, #20]
   d5516:	b11b      	cbz	r3, d5520 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x60>
   d5518:	6931      	ldr	r1, [r6, #16]
   d551a:	7c0b      	ldrb	r3, [r1, #16]
   d551c:	454b      	cmp	r3, r9
   d551e:	d309      	bcc.n	d5534 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
   d5520:	4631      	mov	r1, r6
   d5522:	a802      	add	r0, sp, #8
   d5524:	f7ff ffa3 	bl	d546e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5528:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
	    if (__res.second)
   d552c:	2900      	cmp	r1, #0
   d552e:	d051      	beq.n	d55d4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5530:	2c00      	cmp	r4, #0
   d5532:	d14d      	bne.n	d55d0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d5534:	4588      	cmp	r8, r1
   d5536:	d04b      	beq.n	d55d0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5538:	7c38      	ldrb	r0, [r7, #16]
   d553a:	7c0b      	ldrb	r3, [r1, #16]
   d553c:	4298      	cmp	r0, r3
   d553e:	bf2c      	ite	cs
   d5540:	2000      	movcs	r0, #0
   d5542:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d5544:	4643      	mov	r3, r8
   d5546:	460a      	mov	r2, r1
   d5548:	4639      	mov	r1, r7
   d554a:	f004 f8ee 	bl	d972a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d554e:	6973      	ldr	r3, [r6, #20]
   d5550:	3301      	adds	r3, #1
   d5552:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d5554:	463c      	mov	r4, r7
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   d5556:	f104 0014 	add.w	r0, r4, #20
   d555a:	b005      	add	sp, #20
   d555c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d5560:	7c23      	ldrb	r3, [r4, #16]
   d5562:	9201      	str	r2, [sp, #4]
   d5564:	454b      	cmp	r3, r9
   d5566:	d918      	bls.n	d559a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xda>
	  if (__pos._M_node == _M_leftmost()) // begin()
   d5568:	68f3      	ldr	r3, [r6, #12]
   d556a:	429c      	cmp	r4, r3
   d556c:	d009      	beq.n	d5582 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	_M_node = _Rb_tree_decrement(_M_node);
   d556e:	4620      	mov	r0, r4
   d5570:	f004 f8d9 	bl	d9726 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d5574:	7c03      	ldrb	r3, [r0, #16]
   d5576:	9a01      	ldr	r2, [sp, #4]
   d5578:	454b      	cmp	r3, r9
   d557a:	d205      	bcs.n	d5588 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc8>
	      if (_S_right(__before._M_node) == 0)
   d557c:	68c3      	ldr	r3, [r0, #12]
   d557e:	b953      	cbnz	r3, d5596 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
   d5580:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   d5582:	4621      	mov	r1, r4
   d5584:	461c      	mov	r4, r3
   d5586:	e7d1      	b.n	d552c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d5588:	4631      	mov	r1, r6
   d558a:	a802      	add	r0, sp, #8
   d558c:	f7ff ff6f 	bl	d546e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5590:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   d5594:	e7f5      	b.n	d5582 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
   d5596:	4623      	mov	r3, r4
   d5598:	e7f3      	b.n	d5582 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d559a:	d21b      	bcs.n	d55d4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
	  if (__pos._M_node == _M_rightmost())
   d559c:	6931      	ldr	r1, [r6, #16]
   d559e:	428c      	cmp	r4, r1
   d55a0:	d00b      	beq.n	d55ba <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
	_M_node = _Rb_tree_increment(_M_node);
   d55a2:	4620      	mov	r0, r4
   d55a4:	f004 f8ac 	bl	d9700 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d55a8:	7c03      	ldrb	r3, [r0, #16]
   d55aa:	9a01      	ldr	r2, [sp, #4]
   d55ac:	454b      	cmp	r3, r9
	_M_node = _Rb_tree_increment(_M_node);
   d55ae:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d55b0:	d905      	bls.n	d55be <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfe>
	      if (_S_right(__pos._M_node) == 0)
   d55b2:	68e3      	ldr	r3, [r4, #12]
   d55b4:	b953      	cbnz	r3, d55cc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
   d55b6:	4621      	mov	r1, r4
   d55b8:	461d      	mov	r5, r3
   d55ba:	462c      	mov	r4, r5
   d55bc:	e7b6      	b.n	d552c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d55be:	4631      	mov	r1, r6
   d55c0:	a802      	add	r0, sp, #8
   d55c2:	f7ff ff54 	bl	d546e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d55c6:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
   d55ca:	e7f6      	b.n	d55ba <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
   d55cc:	4601      	mov	r1, r0
   d55ce:	e7f4      	b.n	d55ba <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
			    || _M_impl._M_key_compare(_S_key(__z),
   d55d0:	2001      	movs	r0, #1
   d55d2:	e7b7      	b.n	d5544 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
   d55d4:	f107 0014 	add.w	r0, r7, #20
   d55d8:	f7ff fee8 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d55dc:	4638      	mov	r0, r7
   d55de:	f7fe fd5e 	bl	d409e <_ZdlPv>
   d55e2:	4627      	mov	r7, r4
   d55e4:	e7b6      	b.n	d5554 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	...

000d55e8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   d55e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d55ec:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   d55ee:	2600      	movs	r6, #0
   d55f0:	4617      	mov	r7, r2
	  : _Node_allocator()
   d55f2:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   d55f6:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   d55fa:	e9c0 2605 	strd	r2, r6, [r0, #20]
   d55fe:	4604      	mov	r4, r0
   d5600:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   d5602:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   d5604:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   d5606:	f10d 0107 	add.w	r1, sp, #7
   d560a:	2301      	movs	r3, #1
   d560c:	4628      	mov	r0, r5
   d560e:	f88d 3007 	strb.w	r3, [sp, #7]
   d5612:	f7ff ff55 	bl	d54c0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5616:	4916      	ldr	r1, [pc, #88]	; (d5670 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   d5618:	f7ff fed2 	bl	d53c0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   d561c:	f10d 0107 	add.w	r1, sp, #7
   d5620:	4628      	mov	r0, r5
   d5622:	f88d 6007 	strb.w	r6, [sp, #7]
   d5626:	f7ff ff4b 	bl	d54c0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d562a:	4912      	ldr	r1, [pc, #72]	; (d5674 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d562c:	f7ff fec8 	bl	d53c0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   d5630:	2302      	movs	r3, #2
   d5632:	f10d 0107 	add.w	r1, sp, #7
   d5636:	4628      	mov	r0, r5
   d5638:	f88d 3007 	strb.w	r3, [sp, #7]
   d563c:	f7ff ff40 	bl	d54c0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5640:	490d      	ldr	r1, [pc, #52]	; (d5678 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d5642:	f7ff febd 	bl	d53c0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   d5646:	2303      	movs	r3, #3
   d5648:	f10d 0107 	add.w	r1, sp, #7
   d564c:	4628      	mov	r0, r5
   d564e:	f88d 3007 	strb.w	r3, [sp, #7]
   d5652:	f7ff ff35 	bl	d54c0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5656:	4909      	ldr	r1, [pc, #36]	; (d567c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d5658:	f7ff feb2 	bl	d53c0 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   d565c:	4b08      	ldr	r3, [pc, #32]	; (d5680 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d565e:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   d5662:	4b08      	ldr	r3, [pc, #32]	; (d5684 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   d5664:	4620      	mov	r0, r4
  _token = token;
   d5666:	601f      	str	r7, [r3, #0]
}
   d5668:	b002      	add	sp, #8
   d566a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d566e:	bf00      	nop
   d5670:	000d5295 	.word	0x000d5295
   d5674:	000d52c9 	.word	0x000d52c9
   d5678:	000d52f9 	.word	0x000d52f9
   d567c:	000d532d 	.word	0x000d532d
   d5680:	2003e508 	.word	0x2003e508
   d5684:	2003e50c 	.word	0x2003e50c

000d5688 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   d5688:	b510      	push	{r4, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d568a:	4c0e      	ldr	r4, [pc, #56]	; (d56c4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x3c>)
   d568c:	4620      	mov	r0, r4
   d568e:	f003 fa01 	bl	d8a94 <_ZN9TCPClientC1Ev>
   d5692:	4620      	mov	r0, r4
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d5694:	4c0c      	ldr	r4, [pc, #48]	; (d56c8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x40>)
   d5696:	4a0d      	ldr	r2, [pc, #52]	; (d56cc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d5698:	490d      	ldr	r1, [pc, #52]	; (d56d0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d569a:	f003 ffe5 	bl	d9668 <__aeabi_atexit>
   d569e:	4620      	mov	r0, r4
   d56a0:	f003 f9f8 	bl	d8a94 <_ZN9TCPClientC1Ev>
   d56a4:	4620      	mov	r0, r4
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d56a6:	4c0b      	ldr	r4, [pc, #44]	; (d56d4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x4c>)
   d56a8:	4a08      	ldr	r2, [pc, #32]	; (d56cc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d56aa:	4909      	ldr	r1, [pc, #36]	; (d56d0 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x48>)
   d56ac:	f003 ffdc 	bl	d9668 <__aeabi_atexit>
   d56b0:	4620      	mov	r0, r4
   d56b2:	f003 fc0b 	bl	d8ecc <_ZN3UDPC1Ev>
   d56b6:	4620      	mov	r0, r4
   d56b8:	4a04      	ldr	r2, [pc, #16]	; (d56cc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x44>)
   d56ba:	4907      	ldr	r1, [pc, #28]	; (d56d8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x50>)
   d56bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d56c0:	f003 bfd2 	b.w	d9668 <__aeabi_atexit>
   d56c4:	2003e4ec 	.word	0x2003e4ec
   d56c8:	2003e484 	.word	0x2003e484
   d56cc:	2003e440 	.word	0x2003e440
   d56d0:	000d5379 	.word	0x000d5379
   d56d4:	2003e4a0 	.word	0x2003e4a0
   d56d8:	000d5359 	.word	0x000d5359

000d56dc <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d56dc:	7501      	strb	r1, [r0, #20]
   d56de:	4770      	bx	lr

000d56e0 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   d56e0:	2200      	movs	r2, #0
	  : _Node_allocator()
   d56e2:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d56e4:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d56e8:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d56ec:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d56ee:	4770      	bx	lr

000d56f0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d56f0:	b570      	push	{r4, r5, r6, lr}
   d56f2:	4606      	mov	r6, r0
   d56f4:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d56f8:	2014      	movs	r0, #20
   d56fa:	f001 fd33 	bl	d7164 <malloc>
   d56fe:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d5700:	2014      	movs	r0, #20
   d5702:	f001 fd2f 	bl	d7164 <malloc>
   d5706:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d5708:	4630      	mov	r0, r6
   d570a:	f005 f8e2 	bl	da8d2 <strlen>
    for (int i = 0; i < len - 2; i++) {
   d570e:	4632      	mov	r2, r6
   d5710:	2300      	movs	r3, #0
   d5712:	3802      	subs	r0, #2
   d5714:	4298      	cmp	r0, r3
   d5716:	dd14      	ble.n	d5742 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   d5718:	f812 1b01 	ldrb.w	r1, [r2], #1
   d571c:	290d      	cmp	r1, #13
   d571e:	d13a      	bne.n	d5796 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5720:	7811      	ldrb	r1, [r2, #0]
   d5722:	290a      	cmp	r1, #10
   d5724:	d137      	bne.n	d5796 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5726:	7851      	ldrb	r1, [r2, #1]
   d5728:	290d      	cmp	r1, #13
   d572a:	d134      	bne.n	d5796 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d572c:	7891      	ldrb	r1, [r2, #2]
   d572e:	290a      	cmp	r1, #10
   d5730:	d131      	bne.n	d5796 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d5732:	3304      	adds	r3, #4
   d5734:	18f1      	adds	r1, r6, r3
   d5736:	2214      	movs	r2, #20
   d5738:	4628      	mov	r0, r5
   d573a:	f005 f8e4 	bl	da906 <strncpy>
        parsed[20] = '\0';
   d573e:	2300      	movs	r3, #0
   d5740:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   d5742:	210a      	movs	r1, #10
   d5744:	4628      	mov	r0, r5
   d5746:	f005 f887 	bl	da858 <strchr>
    if (pch == NULL) {
   d574a:	4606      	mov	r6, r0
   d574c:	b328      	cbz	r0, d579a <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   d574e:	210a      	movs	r1, #10
   d5750:	3001      	adds	r0, #1
   d5752:	f005 f881 	bl	da858 <strchr>
    if (pch2 == NULL) {
   d5756:	b300      	cbz	r0, d579a <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   d5758:	4631      	mov	r1, r6
   d575a:	4620      	mov	r0, r4
   d575c:	f005 f893 	bl	da886 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d5760:	4620      	mov	r0, r4
   d5762:	f005 f8b6 	bl	da8d2 <strlen>
   d5766:	4420      	add	r0, r4
   d5768:	2300      	movs	r3, #0
   d576a:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   d576e:	4620      	mov	r0, r4
   d5770:	f004 fff4 	bl	da75c <atof>
   d5774:	ec51 0b10 	vmov	r0, r1, d0
   d5778:	f004 fe06 	bl	da388 <__aeabi_d2f>
   d577c:	ee08 0a10 	vmov	s16, r0
    free(dst);
   d5780:	4620      	mov	r0, r4
   d5782:	f001 fcf7 	bl	d7174 <free>
    free(parsed);
   d5786:	4628      	mov	r0, r5
   d5788:	f001 fcf4 	bl	d7174 <free>
}
   d578c:	eeb0 0a48 	vmov.f32	s0, s16
   d5790:	ecbd 8b02 	vpop	{d8}
   d5794:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   d5796:	3301      	adds	r3, #1
   d5798:	e7bc      	b.n	d5714 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   d579a:	ed9f 8a01 	vldr	s16, [pc, #4]	; d57a0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   d579e:	e7f5      	b.n	d578c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   d57a0:	cda2425f 	.word	0xcda2425f

000d57a4 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d57a4:	b530      	push	{r4, r5, lr}
   d57a6:	4d07      	ldr	r5, [pc, #28]	; (d57c4 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d57a8:	6005      	str	r5, [r0, #0]
   d57aa:	2500      	movs	r5, #0
  _user_agent = user_agent;
   d57ac:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d57b0:	7505      	strb	r5, [r0, #20]
  _token = token;
   d57b2:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d57b4:	f241 3588 	movw	r5, #5000	; 0x1388
   d57b8:	6185      	str	r5, [r0, #24]
   d57ba:	2505      	movs	r5, #5
  _port = port;
   d57bc:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d57c0:	7705      	strb	r5, [r0, #28]
}
   d57c2:	bd30      	pop	{r4, r5, pc}
   d57c4:	000dcc80 	.word	0x000dcc80

000d57c8 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   d57c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d57cc:	f8df 808c 	ldr.w	r8, [pc, #140]	; d585c <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   d57d0:	f8df a08c 	ldr.w	sl, [pc, #140]	; d5860 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   d57d4:	f8df b08c 	ldr.w	fp, [pc, #140]	; d5864 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   d57d8:	4604      	mov	r4, r0
   d57da:	460d      	mov	r5, r1
   d57dc:	4617      	mov	r7, r2
   d57de:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d57e0:	4640      	mov	r0, r8
   d57e2:	fa5f f986 	uxtb.w	r9, r6
   d57e6:	f002 ff48 	bl	d867a <_ZN9TCPClient9connectedEv>
   d57ea:	bb88      	cbnz	r0, d5850 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   d57ec:	7f23      	ldrb	r3, [r4, #28]
   d57ee:	454b      	cmp	r3, r9
   d57f0:	d92e      	bls.n	d5850 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   d57f2:	7d23      	ldrb	r3, [r4, #20]
   d57f4:	b1cb      	cbz	r3, d582a <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   d57f6:	f003 fd97 	bl	d9328 <_Z16_fetch_usbserialv>
   d57fa:	4651      	mov	r1, sl
   d57fc:	f002 fc90 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(host);
   d5800:	f003 fd92 	bl	d9328 <_Z16_fetch_usbserialv>
   d5804:	4629      	mov	r1, r5
   d5806:	f002 fc8b 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d580a:	f003 fd8d 	bl	d9328 <_Z16_fetch_usbserialv>
   d580e:	4659      	mov	r1, fp
   d5810:	f002 fc86 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d5814:	f003 fd88 	bl	d9328 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d5818:	220a      	movs	r2, #10
   d581a:	4649      	mov	r1, r9
   d581c:	9001      	str	r0, [sp, #4]
   d581e:	f002 fc9c 	bl	d815a <_ZN5Print11printNumberEmh>
        n += println();
   d5822:	9b01      	ldr	r3, [sp, #4]
   d5824:	4618      	mov	r0, r3
   d5826:	f002 fc82 	bl	d812e <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   d582a:	2300      	movs	r3, #0
   d582c:	b2ba      	uxth	r2, r7
   d582e:	4629      	mov	r1, r5
   d5830:	4640      	mov	r0, r8
   d5832:	f003 f953 	bl	d8adc <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d5836:	7d23      	ldrb	r3, [r4, #20]
   d5838:	b123      	cbz	r3, d5844 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   d583a:	f003 fd75 	bl	d9328 <_Z16_fetch_usbserialv>
   d583e:	4906      	ldr	r1, [pc, #24]	; (d5858 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d5840:	f002 fc81 	bl	d8146 <_ZN5Print7printlnEPKc>
    delay(1000);
   d5844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5848:	f001 fccc 	bl	d71e4 <delay>
   d584c:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d584e:	e7c7      	b.n	d57e0 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   d5850:	b003      	add	sp, #12
   d5852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5856:	bf00      	nop
   d5858:	000dcaa3 	.word	0x000dcaa3
   d585c:	2003e510 	.word	0x2003e510
   d5860:	000dca79 	.word	0x000dca79
   d5864:	000dca8f 	.word	0x000dca8f

000d5868 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   d5868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d586c:	1e4b      	subs	r3, r1, #1
   d586e:	460c      	mov	r4, r1
   d5870:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d5874:	4605      	mov	r5, r0
    response[i] = '\0';
   d5876:	2100      	movs	r1, #0
   d5878:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d587c:	4293      	cmp	r3, r2
   d587e:	d1fb      	bne.n	d5878 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
   d5880:	7d2b      	ldrb	r3, [r5, #20]
   d5882:	b14b      	cbz	r3, d5898 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d5884:	f003 fd50 	bl	d9328 <_Z16_fetch_usbserialv>
   d5888:	4914      	ldr	r1, [pc, #80]	; (d58dc <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d588a:	f002 fc5c 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d588e:	f003 fd4b 	bl	d9328 <_Z16_fetch_usbserialv>
   d5892:	4913      	ldr	r1, [pc, #76]	; (d58e0 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d5894:	f002 fc57 	bl	d8146 <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   d5898:	4f12      	ldr	r7, [pc, #72]	; (d58e4 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
void UbiHTTP::readServerAnswer(char* response) {
   d589a:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d589c:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
   d58a0:	4638      	mov	r0, r7
   d58a2:	f003 f84d 	bl	d8940 <_ZN9TCPClient9availableEv>
   d58a6:	b170      	cbz	r0, d58c6 <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
   d58a8:	4638      	mov	r0, r7
   d58aa:	f002 ff82 	bl	d87b2 <_ZN9TCPClient4readEv>
   d58ae:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
   d58b0:	7d2b      	ldrb	r3, [r5, #20]
   d58b2:	b12b      	cbz	r3, d58c0 <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
   d58b4:	f003 fd38 	bl	d9328 <_Z16_fetch_usbserialv>
   d58b8:	6803      	ldr	r3, [r0, #0]
   d58ba:	5da1      	ldrb	r1, [r4, r6]
   d58bc:	689b      	ldr	r3, [r3, #8]
   d58be:	4798      	blx	r3
    j++;
   d58c0:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d58c2:	4546      	cmp	r6, r8
   d58c4:	d1ec      	bne.n	d58a0 <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
   d58c6:	7d2b      	ldrb	r3, [r5, #20]
   d58c8:	b133      	cbz	r3, d58d8 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
   d58ca:	f003 fd2d 	bl	d9328 <_Z16_fetch_usbserialv>
}
   d58ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
   d58d2:	4905      	ldr	r1, [pc, #20]	; (d58e8 <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
   d58d4:	f002 bc37 	b.w	d8146 <_ZN5Print7printlnEPKc>
}
   d58d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58dc:	000dcac8 	.word	0x000dcac8
   d58e0:	000dcab4 	.word	0x000dcab4
   d58e4:	2003e510 	.word	0x2003e510
   d58e8:	000dcac7 	.word	0x000dcac7

000d58ec <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   d58ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d58ee:	4f0e      	ldr	r7, [pc, #56]	; (d5928 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   d58f0:	4604      	mov	r4, r0
  int timeout = 0;
   d58f2:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d58f4:	4638      	mov	r0, r7
   d58f6:	f003 f823 	bl	d8940 <_ZN9TCPClient9availableEv>
   d58fa:	4605      	mov	r5, r0
   d58fc:	b990      	cbnz	r0, d5924 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   d58fe:	69a3      	ldr	r3, [r4, #24]
   d5900:	42b3      	cmp	r3, r6
   d5902:	dd0f      	ble.n	d5924 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   d5904:	2001      	movs	r0, #1
   d5906:	f001 fc6d 	bl	d71e4 <delay>
    if (timeout > _timeout - 1) {
   d590a:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d590c:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d590e:	42b3      	cmp	r3, r6
   d5910:	dcf0      	bgt.n	d58f4 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
   d5912:	7d20      	ldrb	r0, [r4, #20]
   d5914:	b128      	cbz	r0, d5922 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d5916:	f003 fd07 	bl	d9328 <_Z16_fetch_usbserialv>
   d591a:	4904      	ldr	r1, [pc, #16]	; (d592c <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d591c:	f002 fc13 	bl	d8146 <_ZN5Print7printlnEPKc>
   d5920:	4628      	mov	r0, r5
}
   d5922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d5924:	2001      	movs	r0, #1
   d5926:	e7fc      	b.n	d5922 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   d5928:	2003e510 	.word	0x2003e510
   d592c:	000dcad3 	.word	0x000dcad3

000d5930 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5932:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d5934:	6902      	ldr	r2, [r0, #16]
   d5936:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5938:	4604      	mov	r4, r0
   d593a:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d593c:	f7ff ff44 	bl	d57c8 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   d5940:	4878      	ldr	r0, [pc, #480]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5942:	f002 fe9a 	bl	d867a <_ZN9TCPClient9connectedEv>
   d5946:	4606      	mov	r6, r0
   d5948:	2800      	cmp	r0, #0
   d594a:	f000 80e1 	beq.w	d5b10 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d594e:	4976      	ldr	r1, [pc, #472]	; (d5b28 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d5950:	4874      	ldr	r0, [pc, #464]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5952:	f002 fbe5 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5956:	4639      	mov	r1, r7
   d5958:	4872      	ldr	r0, [pc, #456]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d595a:	f002 fbe1 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d595e:	4973      	ldr	r1, [pc, #460]	; (d5b2c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d5960:	4870      	ldr	r0, [pc, #448]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5962:	f002 fbdd 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d5966:	4972      	ldr	r1, [pc, #456]	; (d5b30 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d5968:	486e      	ldr	r0, [pc, #440]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d596a:	f002 fbd9 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d596e:	6861      	ldr	r1, [r4, #4]
   d5970:	486c      	ldr	r0, [pc, #432]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5972:	f002 fbd5 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d5976:	496f      	ldr	r1, [pc, #444]	; (d5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5978:	486a      	ldr	r0, [pc, #424]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d597a:	f002 fbd1 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d597e:	496e      	ldr	r1, [pc, #440]	; (d5b38 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d5980:	4868      	ldr	r0, [pc, #416]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5982:	f002 fbcd 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d5986:	68a1      	ldr	r1, [r4, #8]
   d5988:	4866      	ldr	r0, [pc, #408]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d598a:	f002 fbc9 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d598e:	4969      	ldr	r1, [pc, #420]	; (d5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5990:	4864      	ldr	r0, [pc, #400]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5992:	f002 fbc5 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d5996:	4969      	ldr	r1, [pc, #420]	; (d5b3c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d5998:	4862      	ldr	r0, [pc, #392]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d599a:	f002 fbc1 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d599e:	68e1      	ldr	r1, [r4, #12]
   d59a0:	4860      	ldr	r0, [pc, #384]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59a2:	f002 fbbd 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d59a6:	4963      	ldr	r1, [pc, #396]	; (d5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d59a8:	485e      	ldr	r0, [pc, #376]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59aa:	f002 fbb9 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d59ae:	4964      	ldr	r1, [pc, #400]	; (d5b40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d59b0:	485c      	ldr	r0, [pc, #368]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59b2:	f002 fbb5 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d59b6:	4963      	ldr	r1, [pc, #396]	; (d5b44 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d59b8:	485a      	ldr	r0, [pc, #360]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59ba:	f002 fbb1 	bl	d8120 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d59be:	4628      	mov	r0, r5
   d59c0:	f004 ff87 	bl	da8d2 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d59c4:	4960      	ldr	r1, [pc, #384]	; (d5b48 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   d59c6:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d59c8:	4856      	ldr	r0, [pc, #344]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59ca:	f002 fba9 	bl	d8120 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d59ce:	220a      	movs	r2, #10
   d59d0:	4631      	mov	r1, r6
   d59d2:	4854      	ldr	r0, [pc, #336]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59d4:	f002 fbc1 	bl	d815a <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   d59d8:	495c      	ldr	r1, [pc, #368]	; (d5b4c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d59da:	4852      	ldr	r0, [pc, #328]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59dc:	f002 fba0 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d59e0:	4629      	mov	r1, r5
   d59e2:	4850      	ldr	r0, [pc, #320]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59e4:	f002 fb9c 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d59e8:	4952      	ldr	r1, [pc, #328]	; (d5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d59ea:	484e      	ldr	r0, [pc, #312]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59ec:	f002 fb98 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d59f0:	484c      	ldr	r0, [pc, #304]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d59f2:	f002 fe41 	bl	d8678 <_ZN9TCPClient5flushEv>
    if (_debug) {
   d59f6:	7d23      	ldrb	r3, [r4, #20]
   d59f8:	2b00      	cmp	r3, #0
   d59fa:	d069      	beq.n	d5ad0 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d59fc:	f003 fc94 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a00:	4953      	ldr	r1, [pc, #332]	; (d5b50 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d5a02:	f002 fba0 	bl	d8146 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d5a06:	f003 fc8f 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a0a:	4947      	ldr	r1, [pc, #284]	; (d5b28 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d5a0c:	f002 fb88 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d5a10:	f003 fc8a 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a14:	4639      	mov	r1, r7
   d5a16:	f002 fb83 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d5a1a:	f003 fc85 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a1e:	4943      	ldr	r1, [pc, #268]	; (d5b2c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d5a20:	f002 fb7e 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d5a24:	f003 fc80 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a28:	4941      	ldr	r1, [pc, #260]	; (d5b30 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d5a2a:	f002 fb79 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d5a2e:	f003 fc7b 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a32:	6861      	ldr	r1, [r4, #4]
   d5a34:	f002 fb74 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5a38:	f003 fc76 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a3c:	493d      	ldr	r1, [pc, #244]	; (d5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5a3e:	f002 fb6f 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d5a42:	f003 fc71 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a46:	493c      	ldr	r1, [pc, #240]	; (d5b38 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d5a48:	f002 fb6a 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5a4c:	f003 fc6c 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a50:	68a1      	ldr	r1, [r4, #8]
   d5a52:	f002 fb65 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5a56:	f003 fc67 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a5a:	4936      	ldr	r1, [pc, #216]	; (d5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5a5c:	f002 fb60 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d5a60:	f003 fc62 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a64:	4935      	ldr	r1, [pc, #212]	; (d5b3c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d5a66:	f002 fb5b 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5a6a:	f003 fc5d 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a6e:	68e1      	ldr	r1, [r4, #12]
   d5a70:	f002 fb56 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5a74:	f003 fc58 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a78:	492e      	ldr	r1, [pc, #184]	; (d5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5a7a:	f002 fb51 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d5a7e:	f003 fc53 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a82:	492f      	ldr	r1, [pc, #188]	; (d5b40 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d5a84:	f002 fb4c 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d5a88:	f003 fc4e 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a8c:	492d      	ldr	r1, [pc, #180]	; (d5b44 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d5a8e:	f002 fb47 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d5a92:	f003 fc49 	bl	d9328 <_Z16_fetch_usbserialv>
   d5a96:	492c      	ldr	r1, [pc, #176]	; (d5b48 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d5a98:	f002 fb42 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d5a9c:	f003 fc44 	bl	d9328 <_Z16_fetch_usbserialv>
   d5aa0:	220a      	movs	r2, #10
   d5aa2:	4631      	mov	r1, r6
   d5aa4:	f002 fb59 	bl	d815a <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d5aa8:	f003 fc3e 	bl	d9328 <_Z16_fetch_usbserialv>
   d5aac:	4927      	ldr	r1, [pc, #156]	; (d5b4c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d5aae:	f002 fb37 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d5ab2:	f003 fc39 	bl	d9328 <_Z16_fetch_usbserialv>
   d5ab6:	4629      	mov	r1, r5
   d5ab8:	f002 fb32 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5abc:	f003 fc34 	bl	d9328 <_Z16_fetch_usbserialv>
   d5ac0:	491c      	ldr	r1, [pc, #112]	; (d5b34 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d5ac2:	f002 fb2d 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   d5ac6:	f003 fc2f 	bl	d9328 <_Z16_fetch_usbserialv>
   d5aca:	4922      	ldr	r1, [pc, #136]	; (d5b54 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d5acc:	f002 fb3b 	bl	d8146 <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   d5ad0:	4620      	mov	r0, r4
   d5ad2:	f7ff ff0b 	bl	d58ec <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   d5ad6:	7d23      	ldrb	r3, [r4, #20]
   d5ad8:	b92b      	cbnz	r3, d5ae6 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   d5ada:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   d5adc:	4811      	ldr	r0, [pc, #68]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d5ade:	f002 ff89 	bl	d89f4 <_ZN9TCPClient4stopEv>
}
   d5ae2:	4620      	mov	r0, r4
   d5ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   d5ae6:	f003 fc1f 	bl	d9328 <_Z16_fetch_usbserialv>
   d5aea:	491b      	ldr	r1, [pc, #108]	; (d5b58 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   d5aec:	4d0d      	ldr	r5, [pc, #52]	; (d5b24 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   d5aee:	f002 fb2a 	bl	d8146 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d5af2:	4628      	mov	r0, r5
   d5af4:	f002 ff24 	bl	d8940 <_ZN9TCPClient9availableEv>
   d5af8:	2800      	cmp	r0, #0
   d5afa:	d0ee      	beq.n	d5ada <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d5afc:	4628      	mov	r0, r5
   d5afe:	f002 fe58 	bl	d87b2 <_ZN9TCPClient4readEv>
   d5b02:	4604      	mov	r4, r0
        Serial.print(c);
   d5b04:	f003 fc10 	bl	d9328 <_Z16_fetch_usbserialv>
   d5b08:	b2e1      	uxtb	r1, r4
   d5b0a:	f002 fb0d 	bl	d8128 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   d5b0e:	e7f0      	b.n	d5af2 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   d5b10:	7d24      	ldrb	r4, [r4, #20]
   d5b12:	2c00      	cmp	r4, #0
   d5b14:	d0e2      	beq.n	d5adc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   d5b16:	f003 fc07 	bl	d9328 <_Z16_fetch_usbserialv>
   d5b1a:	4910      	ldr	r1, [pc, #64]	; (d5b5c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d5b1c:	f002 fb13 	bl	d8146 <_ZN5Print7printlnEPKc>
  bool result = false;
   d5b20:	4634      	mov	r4, r6
   d5b22:	e7db      	b.n	d5adc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   d5b24:	2003e510 	.word	0x2003e510
   d5b28:	000dcb06 	.word	0x000dcb06
   d5b2c:	000dcb1e 	.word	0x000dcb1e
   d5b30:	000dcb2a 	.word	0x000dcb2a
   d5b34:	000dcc4e 	.word	0x000dcc4e
   d5b38:	000dcb31 	.word	0x000dcb31
   d5b3c:	000dcb3e 	.word	0x000dcb3e
   d5b40:	000dcb4d 	.word	0x000dcb4d
   d5b44:	000dcb61 	.word	0x000dcb61
   d5b48:	000dcb82 	.word	0x000dcb82
   d5b4c:	000dcc4c 	.word	0x000dcc4c
   d5b50:	000dcb93 	.word	0x000dcb93
   d5b54:	000dcbaf 	.word	0x000dcbaf
   d5b58:	000dcbcd 	.word	0x000dcbcd
   d5b5c:	000dcbe9 	.word	0x000dcbe9

000d5b60 <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d5b60:	b570      	push	{r4, r5, r6, lr}
   d5b62:	ed2d 8b02 	vpush	{d8}
   d5b66:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d5b68:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d5b6a:	460e      	mov	r6, r1
   d5b6c:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d5b6e:	6841      	ldr	r1, [r0, #4]
   d5b70:	4866      	ldr	r0, [pc, #408]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b72:	2250      	movs	r2, #80	; 0x50
   d5b74:	f002 ffb2 	bl	d8adc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d5b78:	4620      	mov	r0, r4
   d5b7a:	6861      	ldr	r1, [r4, #4]
   d5b7c:	2250      	movs	r2, #80	; 0x50
   d5b7e:	f7ff fe23 	bl	d57c8 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d5b82:	4862      	ldr	r0, [pc, #392]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b84:	f002 fd79 	bl	d867a <_ZN9TCPClient9connectedEv>
   d5b88:	2800      	cmp	r0, #0
   d5b8a:	f000 80b6 	beq.w	d5cfa <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d5b8e:	4960      	ldr	r1, [pc, #384]	; (d5d10 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d5b90:	485e      	ldr	r0, [pc, #376]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b92:	f002 fac5 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d5b96:	4631      	mov	r1, r6
   d5b98:	485c      	ldr	r0, [pc, #368]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5b9a:	f002 fac1 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d5b9e:	495d      	ldr	r1, [pc, #372]	; (d5d14 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5ba0:	485a      	ldr	r0, [pc, #360]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5ba2:	f002 fabd 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d5ba6:	4629      	mov	r1, r5
   d5ba8:	4858      	ldr	r0, [pc, #352]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5baa:	f002 fab9 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d5bae:	495a      	ldr	r1, [pc, #360]	; (d5d18 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d5bb0:	4856      	ldr	r0, [pc, #344]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bb2:	f002 fab5 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d5bb6:	4959      	ldr	r1, [pc, #356]	; (d5d1c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d5bb8:	4854      	ldr	r0, [pc, #336]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bba:	f002 fab1 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d5bbe:	4958      	ldr	r1, [pc, #352]	; (d5d20 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d5bc0:	4852      	ldr	r0, [pc, #328]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bc2:	f002 faad 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d5bc6:	6861      	ldr	r1, [r4, #4]
   d5bc8:	4850      	ldr	r0, [pc, #320]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bca:	f002 faa9 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5bce:	4955      	ldr	r1, [pc, #340]	; (d5d24 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5bd0:	484e      	ldr	r0, [pc, #312]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bd2:	f002 faa5 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d5bd6:	4954      	ldr	r1, [pc, #336]	; (d5d28 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5bd8:	484c      	ldr	r0, [pc, #304]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bda:	f002 faa1 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d5bde:	68a1      	ldr	r1, [r4, #8]
   d5be0:	484a      	ldr	r0, [pc, #296]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5be2:	f002 fa9d 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5be6:	494f      	ldr	r1, [pc, #316]	; (d5d24 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5be8:	4848      	ldr	r0, [pc, #288]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bea:	f002 fa99 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d5bee:	494f      	ldr	r1, [pc, #316]	; (d5d2c <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5bf0:	4846      	ldr	r0, [pc, #280]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bf2:	f002 fa95 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d5bf6:	68e1      	ldr	r1, [r4, #12]
   d5bf8:	4844      	ldr	r0, [pc, #272]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5bfa:	f002 fa91 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d5bfe:	4949      	ldr	r1, [pc, #292]	; (d5d24 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5c00:	4842      	ldr	r0, [pc, #264]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5c02:	f002 fa8d 	bl	d8120 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d5c06:	494a      	ldr	r1, [pc, #296]	; (d5d30 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5c08:	4840      	ldr	r0, [pc, #256]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5c0a:	f002 fa89 	bl	d8120 <_ZN5Print5printEPKc>
    if (_debug) {
   d5c0e:	7d23      	ldrb	r3, [r4, #20]
   d5c10:	2b00      	cmp	r3, #0
   d5c12:	d04f      	beq.n	d5cb4 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   d5c14:	f003 fb88 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c18:	493d      	ldr	r1, [pc, #244]	; (d5d10 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d5c1a:	f002 fa81 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d5c1e:	f003 fb83 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c22:	4631      	mov	r1, r6
   d5c24:	f002 fa7c 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("/");
   d5c28:	f003 fb7e 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c2c:	4939      	ldr	r1, [pc, #228]	; (d5d14 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d5c2e:	f002 fa77 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d5c32:	f003 fb79 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c36:	4629      	mov	r1, r5
   d5c38:	f002 fa72 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d5c3c:	f003 fb74 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c40:	4935      	ldr	r1, [pc, #212]	; (d5d18 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d5c42:	f002 fa6d 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d5c46:	f003 fb6f 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c4a:	4934      	ldr	r1, [pc, #208]	; (d5d1c <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d5c4c:	f002 fa68 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d5c50:	f003 fb6a 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c54:	4932      	ldr	r1, [pc, #200]	; (d5d20 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d5c56:	f002 fa63 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d5c5a:	f003 fb65 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c5e:	6861      	ldr	r1, [r4, #4]
   d5c60:	f002 fa5e 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5c64:	f003 fb60 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c68:	492e      	ldr	r1, [pc, #184]	; (d5d24 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5c6a:	f002 fa59 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d5c6e:	f003 fb5b 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c72:	492d      	ldr	r1, [pc, #180]	; (d5d28 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d5c74:	f002 fa54 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d5c78:	f003 fb56 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c7c:	68a1      	ldr	r1, [r4, #8]
   d5c7e:	f002 fa4f 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5c82:	f003 fb51 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c86:	4927      	ldr	r1, [pc, #156]	; (d5d24 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5c88:	f002 fa4a 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d5c8c:	f003 fb4c 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c90:	4926      	ldr	r1, [pc, #152]	; (d5d2c <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d5c92:	f002 fa45 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d5c96:	f003 fb47 	bl	d9328 <_Z16_fetch_usbserialv>
   d5c9a:	68e1      	ldr	r1, [r4, #12]
   d5c9c:	f002 fa40 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d5ca0:	f003 fb42 	bl	d9328 <_Z16_fetch_usbserialv>
   d5ca4:	491f      	ldr	r1, [pc, #124]	; (d5d24 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d5ca6:	f002 fa3b 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d5caa:	f003 fb3d 	bl	d9328 <_Z16_fetch_usbserialv>
   d5cae:	4920      	ldr	r1, [pc, #128]	; (d5d30 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d5cb0:	f002 fa36 	bl	d8120 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	f7ff fe19 	bl	d58ec <_ZN7UbiHTTP16waitServerAnswerEv>
   d5cba:	b948      	cbnz	r0, d5cd0 <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   d5cbc:	4813      	ldr	r0, [pc, #76]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   d5cbe:	ed9f 8a1d 	vldr	s16, [pc, #116]	; d5d34 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   d5cc2:	f002 fe97 	bl	d89f4 <_ZN9TCPClient4stopEv>
}
   d5cc6:	eeb0 0a48 	vmov.f32	s0, s16
   d5cca:	ecbd 8b02 	vpop	{d8}
   d5cce:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5cd0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d5cd4:	f001 fa46 	bl	d7164 <malloc>
    readServerAnswer(response);
   d5cd8:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d5cda:	4605      	mov	r5, r0
    readServerAnswer(response);
   d5cdc:	4620      	mov	r0, r4
   d5cde:	f7ff fdc3 	bl	d5868 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   d5ce2:	4628      	mov	r0, r5
   d5ce4:	f7ff fd04 	bl	d56f0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   d5ce8:	4808      	ldr	r0, [pc, #32]	; (d5d0c <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d5cea:	eeb0 8a40 	vmov.f32	s16, s0
   d5cee:	f002 fe81 	bl	d89f4 <_ZN9TCPClient4stopEv>
    free(response);
   d5cf2:	4628      	mov	r0, r5
   d5cf4:	f001 fa3e 	bl	d7174 <free>
    return value;
   d5cf8:	e7e5      	b.n	d5cc6 <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   d5cfa:	7d23      	ldrb	r3, [r4, #20]
   d5cfc:	2b00      	cmp	r3, #0
   d5cfe:	d0dd      	beq.n	d5cbc <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   d5d00:	f003 fb12 	bl	d9328 <_Z16_fetch_usbserialv>
   d5d04:	490c      	ldr	r1, [pc, #48]	; (d5d38 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d5d06:	f002 fa1e 	bl	d8146 <_ZN5Print7printlnEPKc>
   d5d0a:	e7d7      	b.n	d5cbc <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   d5d0c:	2003e510 	.word	0x2003e510
   d5d10:	000dcc13 	.word	0x000dcc13
   d5d14:	000dcc28 	.word	0x000dcc28
   d5d18:	000dcc2a 	.word	0x000dcc2a
   d5d1c:	000dcb1e 	.word	0x000dcb1e
   d5d20:	000dcb2a 	.word	0x000dcb2a
   d5d24:	000dcc4e 	.word	0x000dcc4e
   d5d28:	000dcb31 	.word	0x000dcb31
   d5d2c:	000dcb3e 	.word	0x000dcb3e
   d5d30:	000dcc2e 	.word	0x000dcc2e
   d5d34:	cda2425f 	.word	0xcda2425f
   d5d38:	000dcc51 	.word	0x000dcc51

000d5d3c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
}
   d5d3c:	b510      	push	{r4, lr}
   d5d3e:	4c05      	ldr	r4, [pc, #20]	; (d5d54 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x18>)
   d5d40:	4620      	mov	r0, r4
   d5d42:	f002 fea7 	bl	d8a94 <_ZN9TCPClientC1Ev>
   d5d46:	4620      	mov	r0, r4
   d5d48:	4a03      	ldr	r2, [pc, #12]	; (d5d58 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x1c>)
   d5d4a:	4904      	ldr	r1, [pc, #16]	; (d5d5c <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x20>)
   d5d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5d50:	f003 bc8a 	b.w	d9668 <__aeabi_atexit>
   d5d54:	2003e510 	.word	0x2003e510
   d5d58:	2003e440 	.word	0x2003e440
   d5d5c:	000d5379 	.word	0x000d5379

000d5d60 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d5d60:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5d68 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d5d64:	4770      	bx	lr
   d5d66:	bf00      	nop
   d5d68:	cda2425f 	.word	0xcda2425f

000d5d6c <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d5d6c:	7401      	strb	r1, [r0, #16]
   d5d6e:	4770      	bx	lr

000d5d70 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   d5d70:	2200      	movs	r2, #0
	  : _Node_allocator()
   d5d72:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d5d74:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d5d78:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d5d7c:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d5d7e:	4770      	bx	lr

000d5d80 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d5d80:	b530      	push	{r4, r5, lr}
   d5d82:	b085      	sub	sp, #20
   d5d84:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5d86:	9b08      	ldr	r3, [sp, #32]
   d5d88:	781b      	ldrb	r3, [r3, #0]
   d5d8a:	f88d 3000 	strb.w	r3, [sp]
   d5d8e:	a802      	add	r0, sp, #8
   d5d90:	233c      	movs	r3, #60	; 0x3c
   d5d92:	f001 fbdf 	bl	d7554 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5d96:	2000      	movs	r0, #0
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5d98:	9c02      	ldr	r4, [sp, #8]
   d5d9a:	f001 f92f 	bl	d6ffc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5d9e:	b120      	cbz	r0, d5daa <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d5da0:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5da2:	b913      	cbnz	r3, d5daa <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   d5da4:	f001 f94e 	bl	d7044 <spark_process>
    }
   d5da8:	e7fa      	b.n	d5da0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   d5daa:	7863      	ldrb	r3, [r4, #1]
   d5dac:	f3bf 8f5b 	dmb	ish
   d5db0:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d5db2:	b9ab      	cbnz	r3, d5de0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   d5db4:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   d5db6:	9c03      	ldr	r4, [sp, #12]
   d5db8:	b17c      	cbz	r4, d5dda <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   d5dba:	6863      	ldr	r3, [r4, #4]
   d5dbc:	3b01      	subs	r3, #1
   d5dbe:	6063      	str	r3, [r4, #4]
   d5dc0:	b95b      	cbnz	r3, d5dda <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   d5dc2:	6823      	ldr	r3, [r4, #0]
   d5dc4:	4620      	mov	r0, r4
   d5dc6:	689b      	ldr	r3, [r3, #8]
   d5dc8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5dca:	68a3      	ldr	r3, [r4, #8]
   d5dcc:	3b01      	subs	r3, #1
   d5dce:	60a3      	str	r3, [r4, #8]
   d5dd0:	b91b      	cbnz	r3, d5dda <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   d5dd2:	6823      	ldr	r3, [r4, #0]
   d5dd4:	4620      	mov	r0, r4
   d5dd6:	68db      	ldr	r3, [r3, #12]
   d5dd8:	4798      	blx	r3
}
   d5dda:	4628      	mov	r0, r5
   d5ddc:	b005      	add	sp, #20
   d5dde:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d5de0:	2000      	movs	r0, #0
   d5de2:	f001 f90b 	bl	d6ffc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5de6:	b120      	cbz	r0, d5df2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   d5de8:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5dea:	b913      	cbnz	r3, d5df2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   d5dec:	f001 f92a 	bl	d7044 <spark_process>
    }
   d5df0:	e7fa      	b.n	d5de8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5df2:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d5df4:	2b01      	cmp	r3, #1
   d5df6:	d1dd      	bne.n	d5db4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   d5df8:	7b25      	ldrb	r5, [r4, #12]
   d5dfa:	e7dc      	b.n	d5db6 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000d5dfc <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d5dfc:	b510      	push	{r4, lr}
   d5dfe:	4c04      	ldr	r4, [pc, #16]	; (d5e10 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d5e00:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   d5e02:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d5e06:	2400      	movs	r4, #0
  _token = token;
   d5e08:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d5e0a:	7404      	strb	r4, [r0, #16]
  _token = token;
   d5e0c:	60c3      	str	r3, [r0, #12]
}
   d5e0e:	bd10      	pop	{r4, pc}
   d5e10:	000dcc98 	.word	0x000dcc98

000d5e14 <_ZN18UbiProtocolHandlerD1Ev>:

/**************************************************************************
 * Overloaded destructor
 ***************************************************************************/

UbiProtocolHandler::~UbiProtocolHandler() {
   d5e14:	b510      	push	{r4, lr}
   d5e16:	4604      	mov	r4, r0
  delete[] _default_device_label;
   d5e18:	6800      	ldr	r0, [r0, #0]
   d5e1a:	b108      	cbz	r0, d5e20 <_ZN18UbiProtocolHandlerD1Ev+0xc>
   d5e1c:	f7fe f941 	bl	d40a2 <_ZdaPv>

  free(_dots);
   d5e20:	68e0      	ldr	r0, [r4, #12]
   d5e22:	f001 f9a7 	bl	d7174 <free>
  delete _ubiProtocol;
   d5e26:	6860      	ldr	r0, [r4, #4]
   d5e28:	b110      	cbz	r0, d5e30 <_ZN18UbiProtocolHandlerD1Ev+0x1c>
   d5e2a:	2104      	movs	r1, #4
   d5e2c:	f003 fc21 	bl	d9672 <_ZdlPvj>
}
   d5e30:	4620      	mov	r0, r4
   d5e32:	bd10      	pop	{r4, pc}

000d5e34 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d5e34:	b538      	push	{r3, r4, r5, lr}
   d5e36:	4604      	mov	r4, r0
  _dirty = true;
   d5e38:	2001      	movs	r0, #1
   d5e3a:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d5e3c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5e40:	68e5      	ldr	r5, [r4, #12]
   d5e42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5e46:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d5e4a:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d5e4e:	68e0      	ldr	r0, [r4, #12]
   d5e50:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d5e54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d5e58:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d5e5c:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d5e60:	68e0      	ldr	r0, [r4, #12]
   d5e62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d5e66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d5e6a:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d5e6c:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d5e70:	68e1      	ldr	r1, [r4, #12]
   d5e72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d5e76:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d5e7a:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d5e7c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5e80:	68e2      	ldr	r2, [r4, #12]
   d5e82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5e86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d5e8a:	9a04      	ldr	r2, [sp, #16]
   d5e8c:	611a      	str	r2, [r3, #16]
  _current_value++;
   d5e8e:	7c23      	ldrb	r3, [r4, #16]
   d5e90:	3301      	adds	r3, #1
   d5e92:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d5e94:	2b0a      	cmp	r3, #10
  _current_value++;
   d5e96:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d5e98:	dd08      	ble.n	d5eac <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d5e9a:	7ca3      	ldrb	r3, [r4, #18]
   d5e9c:	b123      	cbz	r3, d5ea8 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   d5e9e:	f003 fa43 	bl	d9328 <_Z16_fetch_usbserialv>
   d5ea2:	4903      	ldr	r1, [pc, #12]	; (d5eb0 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d5ea4:	f002 f94f 	bl	d8146 <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d5ea8:	230a      	movs	r3, #10
   d5eaa:	7423      	strb	r3, [r4, #16]
  }
}
   d5eac:	bd38      	pop	{r3, r4, r5, pc}
   d5eae:	bf00      	nop
   d5eb0:	000dcca8 	.word	0x000dcca8

000d5eb4 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d5eb4:	b510      	push	{r4, lr}
   d5eb6:	ee10 0a10 	vmov	r0, s0
   d5eba:	b086      	sub	sp, #24
   d5ebc:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d5ebe:	f003 ff13 	bl	d9ce8 <__aeabi_f2d>
   d5ec2:	4602      	mov	r2, r0
   d5ec4:	460b      	mov	r3, r1
   d5ec6:	a801      	add	r0, sp, #4
   d5ec8:	490a      	ldr	r1, [pc, #40]	; (d5ef4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   d5eca:	f001 f963 	bl	d7194 <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d5ece:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   d5ed0:	2214      	movs	r2, #20
  uint8_t k = 0;
   d5ed2:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   d5ed4:	f810 1b01 	ldrb.w	r1, [r0], #1
   d5ed8:	2920      	cmp	r1, #32
   d5eda:	d006      	beq.n	d5eea <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d5edc:	54e1      	strb	r1, [r4, r3]
      k++;
   d5ede:	3301      	adds	r3, #1
   d5ee0:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d5ee2:	b911      	cbnz	r1, d5eea <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d5ee4:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   d5ee6:	b006      	add	sp, #24
   d5ee8:	bd10      	pop	{r4, pc}
  while (j < 20) {
   d5eea:	3a01      	subs	r2, #1
   d5eec:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d5ef0:	d1f0      	bne.n	d5ed4 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   d5ef2:	e7f8      	b.n	d5ee6 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   d5ef4:	000dcce7 	.word	0x000dcce7

000d5ef8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d5ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5efc:	460c      	mov	r4, r1
   d5efe:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   d5f00:	494c      	ldr	r1, [pc, #304]	; (d6034 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d5f02:	f8df 8154 	ldr.w	r8, [pc, #340]	; d6058 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d5f06:	f8df 9154 	ldr.w	r9, [pc, #340]	; d605c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
        sprintf(payload, "%s000", payload);
   d5f0a:	f8df a154 	ldr.w	sl, [pc, #340]	; d6060 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d5f0e:	4605      	mov	r5, r0
  sprintf(payload, "{");
   d5f10:	4620      	mov	r0, r4
   d5f12:	f004 fcb8 	bl	da886 <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   d5f16:	2600      	movs	r6, #0
   d5f18:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d5f1c:	429e      	cmp	r6, r3
   d5f1e:	da6a      	bge.n	d5ff6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfe>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5f20:	68eb      	ldr	r3, [r5, #12]
   d5f22:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d5f26:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d5f2a:	ed93 0a02 	vldr	s0, [r3, #8]
   d5f2e:	a903      	add	r1, sp, #12
   d5f30:	4628      	mov	r0, r5
   d5f32:	f7ff ffbf 	bl	d5eb4 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d5f36:	68eb      	ldr	r3, [r5, #12]
   d5f38:	a903      	add	r1, sp, #12
   d5f3a:	9100      	str	r1, [sp, #0]
   d5f3c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d5f40:	4622      	mov	r2, r4
   d5f42:	4641      	mov	r1, r8
   d5f44:	4620      	mov	r0, r4
   d5f46:	f001 f925 	bl	d7194 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5f4a:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d5f4c:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d5f50:	443b      	add	r3, r7
   d5f52:	68db      	ldr	r3, [r3, #12]
   d5f54:	b343      	cbz	r3, d5fa8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d5f56:	4622      	mov	r2, r4
   d5f58:	4649      	mov	r1, r9
   d5f5a:	4620      	mov	r0, r4
   d5f5c:	f001 f91a 	bl	d7194 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d5f60:	68eb      	ldr	r3, [r5, #12]
   d5f62:	443b      	add	r3, r7
   d5f64:	691b      	ldr	r3, [r3, #16]
   d5f66:	2b00      	cmp	r3, #0
   d5f68:	d038      	beq.n	d5fdc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d5f6a:	200a      	movs	r0, #10
   d5f6c:	fb93 f1f0 	sdiv	r1, r3, r0
   d5f70:	fb91 fcf0 	sdiv	ip, r1, r0
   d5f74:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d5f78:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5f7c:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d5f7e:	2264      	movs	r2, #100	; 0x64
   d5f80:	fb93 f2f2 	sdiv	r2, r3, r2
   d5f84:	fb92 fef0 	sdiv	lr, r2, r0
   d5f88:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d5f8c:	9100      	str	r1, [sp, #0]
   d5f8e:	fa5f f38c 	uxtb.w	r3, ip
   d5f92:	4929      	ldr	r1, [pc, #164]	; (d6038 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d5f94:	b2d2      	uxtb	r2, r2
   d5f96:	a802      	add	r0, sp, #8
   d5f98:	f001 f8fc 	bl	d7194 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d5f9c:	4927      	ldr	r1, [pc, #156]	; (d603c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d5f9e:	ab02      	add	r3, sp, #8
   d5fa0:	4622      	mov	r2, r4
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f001 f8f6 	bl	d7194 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d5fa8:	68eb      	ldr	r3, [r5, #12]
   d5faa:	441f      	add	r7, r3
   d5fac:	687b      	ldr	r3, [r7, #4]
   d5fae:	b123      	cbz	r3, d5fba <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   d5fb0:	4923      	ldr	r1, [pc, #140]	; (d6040 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d5fb2:	4622      	mov	r2, r4
   d5fb4:	4620      	mov	r0, r4
   d5fb6:	f001 f8ed 	bl	d7194 <sprintf>
    sprintf(payload, "%s}", payload);
   d5fba:	4622      	mov	r2, r4
   d5fbc:	4921      	ldr	r1, [pc, #132]	; (d6044 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d5fbe:	4620      	mov	r0, r4
   d5fc0:	f001 f8e8 	bl	d7194 <sprintf>
    i++;
   d5fc4:	3601      	adds	r6, #1
    if (i < _current_value) {
   d5fc6:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d5fca:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d5fcc:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d5fce:	4622      	mov	r2, r4
    if (i < _current_value) {
   d5fd0:	da0a      	bge.n	d5fe8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf0>
      sprintf(payload, "%s,", payload);
   d5fd2:	491d      	ldr	r1, [pc, #116]	; (d6048 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	f001 f8dd 	bl	d7194 <sprintf>
   d5fda:	e79d      	b.n	d5f18 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   d5fdc:	4622      	mov	r2, r4
   d5fde:	4651      	mov	r1, sl
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	f001 f8d7 	bl	d7194 <sprintf>
   d5fe6:	e7df      	b.n	d5fa8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s}", payload);
   d5fe8:	4916      	ldr	r1, [pc, #88]	; (d6044 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d5fea:	4620      	mov	r0, r4
   d5fec:	f001 f8d2 	bl	d7194 <sprintf>
      _current_value = 0;
   d5ff0:	2300      	movs	r3, #0
   d5ff2:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d5ff4:	e790      	b.n	d5f18 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   d5ff6:	7cab      	ldrb	r3, [r5, #18]
   d5ff8:	b1c3      	cbz	r3, d602c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>
    Serial.println("----------");
   d5ffa:	f003 f995 	bl	d9328 <_Z16_fetch_usbserialv>
   d5ffe:	4913      	ldr	r1, [pc, #76]	; (d604c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d6000:	f002 f8a1 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d6004:	f003 f990 	bl	d9328 <_Z16_fetch_usbserialv>
   d6008:	4911      	ldr	r1, [pc, #68]	; (d6050 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d600a:	f002 f89c 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d600e:	f003 f98b 	bl	d9328 <_Z16_fetch_usbserialv>
   d6012:	4621      	mov	r1, r4
   d6014:	f002 f897 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d6018:	f003 f986 	bl	d9328 <_Z16_fetch_usbserialv>
   d601c:	490b      	ldr	r1, [pc, #44]	; (d604c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d601e:	f002 f892 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d6022:	f003 f981 	bl	d9328 <_Z16_fetch_usbserialv>
   d6026:	490b      	ldr	r1, [pc, #44]	; (d6054 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d6028:	f002 f88d 	bl	d8146 <_ZN5Print7printlnEPKc>
}
   d602c:	b009      	add	sp, #36	; 0x24
   d602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6032:	bf00      	nop
   d6034:	000dccec 	.word	0x000dccec
   d6038:	000dcd14 	.word	0x000dcd14
   d603c:	000dcd1b 	.word	0x000dcd1b
   d6040:	000dcd26 	.word	0x000dcd26
   d6044:	000dcd35 	.word	0x000dcd35
   d6048:	000dcd39 	.word	0x000dcd39
   d604c:	000dcac8 	.word	0x000dcac8
   d6050:	000dcd3d 	.word	0x000dcd3d
   d6054:	000dcc50 	.word	0x000dcc50
   d6058:	000dccee 	.word	0x000dccee
   d605c:	000dcd01 	.word	0x000dcd01
   d6060:	000dcd20 	.word	0x000dcd20

000d6064 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d6064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6068:	460c      	mov	r4, r1
   d606a:	4605      	mov	r5, r0
   d606c:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d606e:	4952      	ldr	r1, [pc, #328]	; (d61b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d6070:	f8df 8174 	ldr.w	r8, [pc, #372]	; d61e8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6074:	f8df 9174 	ldr.w	r9, [pc, #372]	; d61ec <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  sprintf(payload, "");
   d6078:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d607a:	4616      	mov	r6, r2
   d607c:	461f      	mov	r7, r3
  sprintf(payload, "");
   d607e:	f004 fc02 	bl	da886 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d6082:	68ab      	ldr	r3, [r5, #8]
   d6084:	4a4d      	ldr	r2, [pc, #308]	; (d61bc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d6086:	494e      	ldr	r1, [pc, #312]	; (d61c0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d6088:	4620      	mov	r0, r4
   d608a:	f001 f883 	bl	d7194 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d608e:	4633      	mov	r3, r6
   d6090:	494c      	ldr	r1, [pc, #304]	; (d61c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d6092:	9700      	str	r7, [sp, #0]
   d6094:	4622      	mov	r2, r4
   d6096:	4620      	mov	r0, r4
   d6098:	f001 f87c 	bl	d7194 <sprintf>
  sprintf(payload, "%s=>", payload);
   d609c:	494a      	ldr	r1, [pc, #296]	; (d61c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d609e:	4f49      	ldr	r7, [pc, #292]	; (d61c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
  sprintf(payload, "%s=>", payload);
   d60a0:	4622      	mov	r2, r4
   d60a2:	4620      	mov	r0, r4
   d60a4:	f001 f876 	bl	d7194 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d60a8:	2600      	movs	r6, #0
   d60aa:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d60ae:	429e      	cmp	r6, r3
   d60b0:	da64      	bge.n	d617c <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d60b2:	68eb      	ldr	r3, [r5, #12]
   d60b4:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d60b8:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d60bc:	ed93 0a02 	vldr	s0, [r3, #8]
   d60c0:	a903      	add	r1, sp, #12
   d60c2:	4628      	mov	r0, r5
   d60c4:	f7ff fef6 	bl	d5eb4 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d60c8:	68eb      	ldr	r3, [r5, #12]
   d60ca:	a903      	add	r1, sp, #12
   d60cc:	9100      	str	r1, [sp, #0]
   d60ce:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d60d2:	4622      	mov	r2, r4
   d60d4:	4639      	mov	r1, r7
   d60d6:	4620      	mov	r0, r4
   d60d8:	f001 f85c 	bl	d7194 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d60dc:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d60de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   d60e2:	4453      	add	r3, sl
   d60e4:	685b      	ldr	r3, [r3, #4]
   d60e6:	b123      	cbz	r3, d60f2 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d60e8:	4622      	mov	r2, r4
   d60ea:	4641      	mov	r1, r8
   d60ec:	4620      	mov	r0, r4
   d60ee:	f001 f851 	bl	d7194 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d60f2:	68eb      	ldr	r3, [r5, #12]
   d60f4:	4453      	add	r3, sl
   d60f6:	68db      	ldr	r3, [r3, #12]
   d60f8:	b33b      	cbz	r3, d614a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d60fa:	4622      	mov	r2, r4
   d60fc:	4649      	mov	r1, r9
   d60fe:	4620      	mov	r0, r4
   d6100:	f001 f848 	bl	d7194 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d6104:	68eb      	ldr	r3, [r5, #12]
   d6106:	4453      	add	r3, sl
   d6108:	691b      	ldr	r3, [r3, #16]
   d610a:	b353      	cbz	r3, d6162 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d610c:	200a      	movs	r0, #10
   d610e:	fb93 f1f0 	sdiv	r1, r3, r0
   d6112:	fb91 fcf0 	sdiv	ip, r1, r0
   d6116:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d611a:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d611e:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d6120:	2264      	movs	r2, #100	; 0x64
   d6122:	fb93 f2f2 	sdiv	r2, r3, r2
   d6126:	fb92 fef0 	sdiv	lr, r2, r0
   d612a:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d612e:	9100      	str	r1, [sp, #0]
   d6130:	fa5f f38c 	uxtb.w	r3, ip
   d6134:	4925      	ldr	r1, [pc, #148]	; (d61cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d6136:	b2d2      	uxtb	r2, r2
   d6138:	a802      	add	r0, sp, #8
   d613a:	f001 f82b 	bl	d7194 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d613e:	4924      	ldr	r1, [pc, #144]	; (d61d0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d6140:	ab02      	add	r3, sp, #8
   d6142:	4622      	mov	r2, r4
   d6144:	4620      	mov	r0, r4
   d6146:	f001 f825 	bl	d7194 <sprintf>
    if (i < _current_value) {
   d614a:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d614e:	3601      	adds	r6, #1
   d6150:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d6152:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d6154:	4622      	mov	r2, r4
    if (i < _current_value) {
   d6156:	da0a      	bge.n	d616e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
   d6158:	491e      	ldr	r1, [pc, #120]	; (d61d4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d615a:	4620      	mov	r0, r4
   d615c:	f001 f81a 	bl	d7194 <sprintf>
   d6160:	e7a3      	b.n	d60aa <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   d6162:	491d      	ldr	r1, [pc, #116]	; (d61d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d6164:	4622      	mov	r2, r4
   d6166:	4620      	mov	r0, r4
   d6168:	f001 f814 	bl	d7194 <sprintf>
   d616c:	e7ed      	b.n	d614a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
   d616e:	491b      	ldr	r1, [pc, #108]	; (d61dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d6170:	4620      	mov	r0, r4
   d6172:	f001 f80f 	bl	d7194 <sprintf>
      _current_value = 0;
   d6176:	2300      	movs	r3, #0
   d6178:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d617a:	e796      	b.n	d60aa <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   d617c:	7cab      	ldrb	r3, [r5, #18]
   d617e:	b1c3      	cbz	r3, d61b2 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
   d6180:	f003 f8d2 	bl	d9328 <_Z16_fetch_usbserialv>
   d6184:	4916      	ldr	r1, [pc, #88]	; (d61e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d6186:	f001 ffde 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d618a:	f003 f8cd 	bl	d9328 <_Z16_fetch_usbserialv>
   d618e:	4915      	ldr	r1, [pc, #84]	; (d61e4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d6190:	f001 ffd9 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d6194:	f003 f8c8 	bl	d9328 <_Z16_fetch_usbserialv>
   d6198:	4621      	mov	r1, r4
   d619a:	f001 ffd4 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d619e:	f003 f8c3 	bl	d9328 <_Z16_fetch_usbserialv>
   d61a2:	490f      	ldr	r1, [pc, #60]	; (d61e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d61a4:	f001 ffcf 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d61a8:	f003 f8be 	bl	d9328 <_Z16_fetch_usbserialv>
   d61ac:	4902      	ldr	r1, [pc, #8]	; (d61b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d61ae:	f001 ffca 	bl	d8146 <_ZN5Print7printlnEPKc>
}
   d61b2:	b009      	add	sp, #36	; 0x24
   d61b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d61b8:	000dcc50 	.word	0x000dcc50
   d61bc:	000dca65 	.word	0x000dca65
   d61c0:	000dcd46 	.word	0x000dcd46
   d61c4:	000dcd52 	.word	0x000dcd52
   d61c8:	000dcd5a 	.word	0x000dcd5a
   d61cc:	000dcd14 	.word	0x000dcd14
   d61d0:	000dcd1b 	.word	0x000dcd1b
   d61d4:	000dcd39 	.word	0x000dcd39
   d61d8:	000dcd20 	.word	0x000dcd20
   d61dc:	000dcd6c 	.word	0x000dcd6c
   d61e0:	000dcac8 	.word	0x000dcac8
   d61e4:	000dcd3d 	.word	0x000dcd3d
   d61e8:	000dcd5f 	.word	0x000dcd5f
   d61ec:	000dcd65 	.word	0x000dcd65

000d61f0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d61f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d61f4:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d61f6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d61fa:	461e      	mov	r6, r3
   d61fc:	460f      	mov	r7, r1
   d61fe:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6200:	f000 ffb0 	bl	d7164 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6204:	7ce3      	ldrb	r3, [r4, #19]
   d6206:	3b01      	subs	r3, #1
   d6208:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d620a:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d620c:	d826      	bhi.n	d625c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   d620e:	4601      	mov	r1, r0
   d6210:	4643      	mov	r3, r8
   d6212:	463a      	mov	r2, r7
   d6214:	4620      	mov	r0, r4
   d6216:	f7ff ff25 	bl	d6064 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   d621a:	7ca3      	ldrb	r3, [r4, #18]
   d621c:	b123      	cbz	r3, d6228 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   d621e:	f003 f883 	bl	d9328 <_Z16_fetch_usbserialv>
   d6222:	4911      	ldr	r1, [pc, #68]	; (d6268 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   d6224:	f001 ff8f 	bl	d8146 <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d6228:	6860      	ldr	r0, [r4, #4]
   d622a:	6803      	ldr	r3, [r0, #0]
   d622c:	9600      	str	r6, [sp, #0]
   d622e:	f8d3 9000 	ldr.w	r9, [r3]
   d6232:	4639      	mov	r1, r7
   d6234:	462b      	mov	r3, r5
   d6236:	4642      	mov	r2, r8
   d6238:	47c8      	blx	r9
   d623a:	4607      	mov	r7, r0
  free(payload);
   d623c:	4628      	mov	r0, r5
   d623e:	f000 ff99 	bl	d7174 <free>
  delete flags;
   d6242:	b11e      	cbz	r6, d624c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   d6244:	2101      	movs	r1, #1
   d6246:	4630      	mov	r0, r6
   d6248:	f003 fa13 	bl	d9672 <_ZdlPvj>
  if (result) {
   d624c:	2300      	movs	r3, #0
   d624e:	b107      	cbz	r7, d6252 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   d6250:	7463      	strb	r3, [r4, #17]
}
   d6252:	4638      	mov	r0, r7
  _current_value = 0;
   d6254:	7423      	strb	r3, [r4, #16]
}
   d6256:	b003      	add	sp, #12
   d6258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   d625c:	4601      	mov	r1, r0
   d625e:	4620      	mov	r0, r4
   d6260:	f7ff fe4a 	bl	d5ef8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   d6264:	e7d9      	b.n	d621a <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   d6266:	bf00      	nop
   d6268:	000dcd73 	.word	0x000dcd73

000d626c <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d626c:	b570      	push	{r4, r5, r6, lr}
   d626e:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d6270:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d6272:	460d      	mov	r5, r1
   d6274:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d6276:	f7fd ff0e 	bl	d4096 <_Znwj>
  flags->particle_flag = flag;
   d627a:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   d627c:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   d627e:	462a      	mov	r2, r5
   d6280:	4629      	mov	r1, r5
   d6282:	4620      	mov	r0, r4
}
   d6284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   d6288:	f7ff bfb2 	b.w	d61f0 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d628c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d628c:	b570      	push	{r4, r5, r6, lr}
   d628e:	4605      	mov	r5, r0
   d6290:	460c      	mov	r4, r1
      while (__x != 0)
   d6292:	b184      	cbz	r4, d62b6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	  _M_erase(_S_right(__x));
   d6294:	68e1      	ldr	r1, [r4, #12]
   d6296:	4628      	mov	r0, r5
   d6298:	f7ff fff8 	bl	d628c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      if (_M_manager)
   d629c:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
   d629e:	68a6      	ldr	r6, [r4, #8]
   d62a0:	b123      	cbz	r3, d62ac <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
    class function<_Res(_ArgTypes...)>
   d62a2:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d62a6:	2203      	movs	r2, #3
   d62a8:	4608      	mov	r0, r1
   d62aa:	4798      	blx	r3
   d62ac:	4620      	mov	r0, r4
   d62ae:	f7fd fef6 	bl	d409e <_ZdlPv>
	  __x = __y;
   d62b2:	4634      	mov	r4, r6
      }
   d62b4:	e7ed      	b.n	d6292 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
    }
   d62b6:	bd70      	pop	{r4, r5, r6, pc}

000d62b8 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   d62b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62ba:	b08d      	sub	sp, #52	; 0x34
   d62bc:	4604      	mov	r4, r0
   d62be:	a801      	add	r0, sp, #4
   d62c0:	460d      	mov	r5, r1
   d62c2:	4617      	mov	r7, r2
   d62c4:	461e      	mov	r6, r3
   d62c6:	f000 fecd 	bl	d7064 <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
   d62ca:	9803      	ldr	r0, [sp, #12]
   d62cc:	3001      	adds	r0, #1
   d62ce:	f7fd fee4 	bl	d409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d62d2:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   d62d4:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d62d6:	f004 fad6 	bl	da886 <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
   d62da:	462a      	mov	r2, r5
   d62dc:	4633      	mov	r3, r6
   d62de:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
   d62e0:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d62e2:	a805      	add	r0, sp, #20
   d62e4:	f7ff f980 	bl	d55e8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d62e8:	20c8      	movs	r0, #200	; 0xc8
   d62ea:	f000 ff3b 	bl	d7164 <malloc>
   d62ee:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d62f0:	a805      	add	r0, sp, #20
   d62f2:	f7ff f89d 	bl	d5430 <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
   d62f6:	2300      	movs	r3, #0
  _token = token;
   d62f8:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
   d62fc:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
   d62fe:	7423      	strb	r3, [r4, #16]
   d6300:	a806      	add	r0, sp, #24
   d6302:	f7ff ffc3 	bl	d628c <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
   d6306:	a801      	add	r0, sp, #4
   d6308:	f002 f896 	bl	d8438 <_ZN6StringD1Ev>
}
   d630c:	b00d      	add	sp, #52	; 0x34
   d630e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6310 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   d6310:	b538      	push	{r3, r4, r5, lr}
   d6312:	2500      	movs	r5, #0
   d6314:	4604      	mov	r4, r0
   d6316:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   d6318:	f7ff ffce 	bl	d62b8 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d631c:	4620      	mov	r0, r4
   d631e:	bd38      	pop	{r3, r4, r5, pc}

000d6320 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6320:	b570      	push	{r4, r5, r6, lr}
   d6322:	4605      	mov	r5, r0
   d6324:	460c      	mov	r4, r1
      while (__x != 0)
   d6326:	b14c      	cbz	r4, d633c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x1c>
	  _M_erase(_S_right(__x));
   d6328:	68e1      	ldr	r1, [r4, #12]
   d632a:	4628      	mov	r0, r5
   d632c:	f7ff fff8 	bl	d6320 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
   d6330:	68a6      	ldr	r6, [r4, #8]
   d6332:	4620      	mov	r0, r4
   d6334:	f7fd feb3 	bl	d409e <_ZdlPv>
	  __x = __y;
   d6338:	4634      	mov	r4, r6
      while (__x != 0)
   d633a:	e7f4      	b.n	d6326 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x6>
    }
   d633c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6340 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   d6340:	b510      	push	{r4, lr}
        val_(val) {
   d6342:	4b10      	ldr	r3, [pc, #64]	; (d6384 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x44>)
   d6344:	4c10      	ldr	r4, [pc, #64]	; (d6388 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x48>)
   d6346:	2200      	movs	r2, #0
   d6348:	701a      	strb	r2, [r3, #0]
   d634a:	4620      	mov	r0, r4
   d634c:	f002 fba2 	bl	d8a94 <_ZN9TCPClientC1Ev>
   d6350:	4620      	mov	r0, r4
   d6352:	4c0e      	ldr	r4, [pc, #56]	; (d638c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x4c>)
   d6354:	4a0e      	ldr	r2, [pc, #56]	; (d6390 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6356:	490f      	ldr	r1, [pc, #60]	; (d6394 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d6358:	f003 f986 	bl	d9668 <__aeabi_atexit>
   d635c:	4620      	mov	r0, r4
   d635e:	f002 fb99 	bl	d8a94 <_ZN9TCPClientC1Ev>
   d6362:	4620      	mov	r0, r4
   d6364:	4c0c      	ldr	r4, [pc, #48]	; (d6398 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x58>)
   d6366:	4a0a      	ldr	r2, [pc, #40]	; (d6390 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6368:	490a      	ldr	r1, [pc, #40]	; (d6394 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x54>)
   d636a:	f003 f97d 	bl	d9668 <__aeabi_atexit>
   d636e:	4620      	mov	r0, r4
   d6370:	f002 fdac 	bl	d8ecc <_ZN3UDPC1Ev>
   d6374:	4620      	mov	r0, r4
   d6376:	4a06      	ldr	r2, [pc, #24]	; (d6390 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x50>)
   d6378:	4908      	ldr	r1, [pc, #32]	; (d639c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x5c>)
   d637a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d637e:	f003 b973 	b.w	d9668 <__aeabi_atexit>
   d6382:	bf00      	nop
   d6384:	2003e5b0 	.word	0x2003e5b0
   d6388:	2003e594 	.word	0x2003e594
   d638c:	2003e52c 	.word	0x2003e52c
   d6390:	2003e440 	.word	0x2003e440
   d6394:	000d5379 	.word	0x000d5379
   d6398:	2003e548 	.word	0x2003e548
   d639c:	000d5359 	.word	0x000d5359

000d63a0 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d63a0:	7501      	strb	r1, [r0, #20]
   d63a2:	4770      	bx	lr

000d63a4 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d63a4:	b530      	push	{r4, r5, lr}
   d63a6:	4d06      	ldr	r5, [pc, #24]	; (d63c0 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d63a8:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d63aa:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d63ae:	2500      	movs	r5, #0
  _token = token;
   d63b0:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d63b2:	7505      	strb	r5, [r0, #20]
   d63b4:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d63b8:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d63bc:	6185      	str	r5, [r0, #24]
}
   d63be:	bd30      	pop	{r4, r5, pc}
   d63c0:	000dce20 	.word	0x000dce20

000d63c4 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   d63c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d63c8:	460d      	mov	r5, r1
   d63ca:	4617      	mov	r7, r2
   d63cc:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   d63ce:	f002 ffab 	bl	d9328 <_Z16_fetch_usbserialv>
   d63d2:	491e      	ldr	r1, [pc, #120]	; (d644c <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d63d4:	4e1e      	ldr	r6, [pc, #120]	; (d6450 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   d63d6:	f8df a07c 	ldr.w	sl, [pc, #124]	; d6454 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   d63da:	f8df b07c 	ldr.w	fp, [pc, #124]	; d6458 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   d63de:	f001 feb2 	bl	d8146 <_ZN5Print7printlnEPKc>
   d63e2:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d63e4:	4630      	mov	r0, r6
   d63e6:	f002 fb1c 	bl	d8a22 <_ZN9TCPClient6statusEv>
   d63ea:	bb60      	cbnz	r0, d6446 <_ZN6UbiTCP9reconnectEPKci+0x82>
   d63ec:	2c05      	cmp	r4, #5
   d63ee:	d02a      	beq.n	d6446 <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   d63f0:	f898 3014 	ldrb.w	r3, [r8, #20]
   d63f4:	b1c3      	cbz	r3, d6428 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   d63f6:	f002 ff97 	bl	d9328 <_Z16_fetch_usbserialv>
   d63fa:	4651      	mov	r1, sl
   d63fc:	f001 fe90 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(host);
   d6400:	f002 ff92 	bl	d9328 <_Z16_fetch_usbserialv>
   d6404:	4629      	mov	r1, r5
   d6406:	f001 fe8b 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d640a:	f002 ff8d 	bl	d9328 <_Z16_fetch_usbserialv>
   d640e:	4659      	mov	r1, fp
   d6410:	f001 fe86 	bl	d8120 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d6414:	f002 ff88 	bl	d9328 <_Z16_fetch_usbserialv>
   d6418:	220a      	movs	r2, #10
   d641a:	4681      	mov	r9, r0
   d641c:	4621      	mov	r1, r4
   d641e:	f001 fe9c 	bl	d815a <_ZN5Print11printNumberEmh>
        n += println();
   d6422:	4648      	mov	r0, r9
   d6424:	f001 fe83 	bl	d812e <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   d6428:	4630      	mov	r0, r6
   d642a:	f002 fae3 	bl	d89f4 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d642e:	2300      	movs	r3, #0
   d6430:	b2ba      	uxth	r2, r7
   d6432:	4629      	mov	r1, r5
   d6434:	4630      	mov	r0, r6
   d6436:	f002 fb51 	bl	d8adc <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   d643a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d643e:	f000 fed1 	bl	d71e4 <delay>
   d6442:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6444:	e7ce      	b.n	d63e4 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   d6446:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d644a:	bf00      	nop
   d644c:	000dcd83 	.word	0x000dcd83
   d6450:	2003e5b4 	.word	0x2003e5b4
   d6454:	000dca79 	.word	0x000dca79
   d6458:	000dca8f 	.word	0x000dca8f

000d645c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d645c:	b570      	push	{r4, r5, r6, lr}
   d645e:	4604      	mov	r4, r0
   d6460:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   d6462:	6881      	ldr	r1, [r0, #8]
   d6464:	482e      	ldr	r0, [pc, #184]	; (d6520 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d6466:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   d6468:	f001 fe5a 	bl	d8120 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   d646c:	492d      	ldr	r1, [pc, #180]	; (d6524 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d646e:	482c      	ldr	r0, [pc, #176]	; (d6520 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6470:	f001 fe56 	bl	d8120 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   d6474:	68e1      	ldr	r1, [r4, #12]
   d6476:	482a      	ldr	r0, [pc, #168]	; (d6520 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6478:	f001 fe52 	bl	d8120 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   d647c:	492a      	ldr	r1, [pc, #168]	; (d6528 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d647e:	4828      	ldr	r0, [pc, #160]	; (d6520 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6480:	f001 fe4e 	bl	d8120 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   d6484:	4631      	mov	r1, r6
   d6486:	4826      	ldr	r0, [pc, #152]	; (d6520 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6488:	f001 fe4a 	bl	d8120 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   d648c:	4927      	ldr	r1, [pc, #156]	; (d652c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d648e:	4824      	ldr	r0, [pc, #144]	; (d6520 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6490:	f001 fe46 	bl	d8120 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   d6494:	4629      	mov	r1, r5
   d6496:	4822      	ldr	r0, [pc, #136]	; (d6520 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6498:	f001 fe42 	bl	d8120 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   d649c:	4924      	ldr	r1, [pc, #144]	; (d6530 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d649e:	4820      	ldr	r0, [pc, #128]	; (d6520 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d64a0:	f001 fe3e 	bl	d8120 <_ZN5Print5printEPKc>
  if (_debug) {
   d64a4:	7d23      	ldrb	r3, [r4, #20]
   d64a6:	2b00      	cmp	r3, #0
   d64a8:	d038      	beq.n	d651c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   d64aa:	f002 ff3d 	bl	d9328 <_Z16_fetch_usbserialv>
   d64ae:	4921      	ldr	r1, [pc, #132]	; (d6534 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   d64b0:	f001 fe49 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   d64b4:	f002 ff38 	bl	d9328 <_Z16_fetch_usbserialv>
   d64b8:	491f      	ldr	r1, [pc, #124]	; (d6538 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   d64ba:	f001 fe44 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   d64be:	f002 ff33 	bl	d9328 <_Z16_fetch_usbserialv>
   d64c2:	68a1      	ldr	r1, [r4, #8]
   d64c4:	f001 fe2c 	bl	d8120 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   d64c8:	f002 ff2e 	bl	d9328 <_Z16_fetch_usbserialv>
   d64cc:	4915      	ldr	r1, [pc, #84]	; (d6524 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d64ce:	f001 fe27 	bl	d8120 <_ZN5Print5printEPKc>
    Serial.print(_token);
   d64d2:	f002 ff29 	bl	d9328 <_Z16_fetch_usbserialv>
   d64d6:	68e1      	ldr	r1, [r4, #12]
   d64d8:	f001 fe22 	bl	d8120 <_ZN5Print5printEPKc>
    Serial.print("|");
   d64dc:	f002 ff24 	bl	d9328 <_Z16_fetch_usbserialv>
   d64e0:	4911      	ldr	r1, [pc, #68]	; (d6528 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d64e2:	f001 fe1d 	bl	d8120 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   d64e6:	f002 ff1f 	bl	d9328 <_Z16_fetch_usbserialv>
   d64ea:	4631      	mov	r1, r6
   d64ec:	f001 fe18 	bl	d8120 <_ZN5Print5printEPKc>
    Serial.print(":");
   d64f0:	f002 ff1a 	bl	d9328 <_Z16_fetch_usbserialv>
   d64f4:	490d      	ldr	r1, [pc, #52]	; (d652c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d64f6:	f001 fe13 	bl	d8120 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   d64fa:	f002 ff15 	bl	d9328 <_Z16_fetch_usbserialv>
   d64fe:	4629      	mov	r1, r5
   d6500:	f001 fe0e 	bl	d8120 <_ZN5Print5printEPKc>
    Serial.print("|end");
   d6504:	f002 ff10 	bl	d9328 <_Z16_fetch_usbserialv>
   d6508:	4909      	ldr	r1, [pc, #36]	; (d6530 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d650a:	f001 fe09 	bl	d8120 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   d650e:	f002 ff0b 	bl	d9328 <_Z16_fetch_usbserialv>
}
   d6512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   d6516:	4909      	ldr	r1, [pc, #36]	; (d653c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   d6518:	f001 be15 	b.w	d8146 <_ZN5Print7printlnEPKc>
}
   d651c:	bd70      	pop	{r4, r5, r6, pc}
   d651e:	bf00      	nop
   d6520:	2003e5b4 	.word	0x2003e5b4
   d6524:	000dcd9b 	.word	0x000dcd9b
   d6528:	000dcd9e 	.word	0x000dcd9e
   d652c:	000dcd44 	.word	0x000dcd44
   d6530:	000dcd6e 	.word	0x000dcd6e
   d6534:	000dcdb6 	.word	0x000dcdb6
   d6538:	000dcda0 	.word	0x000dcda0
   d653c:	000dcdb5 	.word	0x000dcdb5

000d6540 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   d6540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6542:	4f0e      	ldr	r7, [pc, #56]	; (d657c <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   d6544:	4604      	mov	r4, r0
  int timeout = 0;
   d6546:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6548:	4638      	mov	r0, r7
   d654a:	f002 f9f9 	bl	d8940 <_ZN9TCPClient9availableEv>
   d654e:	4605      	mov	r5, r0
   d6550:	b990      	cbnz	r0, d6578 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   d6552:	69a3      	ldr	r3, [r4, #24]
   d6554:	42b3      	cmp	r3, r6
   d6556:	dd0f      	ble.n	d6578 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   d6558:	2001      	movs	r0, #1
   d655a:	f000 fe43 	bl	d71e4 <delay>
    if (timeout > _timeout - 1) {
   d655e:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6560:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d6562:	42b3      	cmp	r3, r6
   d6564:	dcf0      	bgt.n	d6548 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
   d6566:	7d20      	ldrb	r0, [r4, #20]
   d6568:	b128      	cbz	r0, d6576 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d656a:	f002 fedd 	bl	d9328 <_Z16_fetch_usbserialv>
   d656e:	4904      	ldr	r1, [pc, #16]	; (d6580 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d6570:	f001 fde9 	bl	d8146 <_ZN5Print7printlnEPKc>
   d6574:	4628      	mov	r0, r5
}
   d6576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6578:	2001      	movs	r0, #1
   d657a:	e7fc      	b.n	d6576 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   d657c:	2003e5b4 	.word	0x2003e5b4
   d6580:	000dcad3 	.word	0x000dcad3

000d6584 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   d6588:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d658a:	4606      	mov	r6, r0
   d658c:	4688      	mov	r8, r1
   d658e:	4614      	mov	r4, r2
  if (_debug) {
   d6590:	b14b      	cbz	r3, d65a6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d6592:	f002 fec9 	bl	d9328 <_Z16_fetch_usbserialv>
   d6596:	4927      	ldr	r1, [pc, #156]	; (d6634 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d6598:	f001 fdd5 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d659c:	f002 fec4 	bl	d9328 <_Z16_fetch_usbserialv>
   d65a0:	4925      	ldr	r1, [pc, #148]	; (d6638 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d65a2:	f001 fdd0 	bl	d8146 <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d65a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d664c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d65aa:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d65ac:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d65b0:	4648      	mov	r0, r9
   d65b2:	f002 f9c5 	bl	d8940 <_ZN9TCPClient9availableEv>
   d65b6:	b178      	cbz	r0, d65d8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   d65b8:	4648      	mov	r0, r9
   d65ba:	f002 f8fa 	bl	d87b2 <_ZN9TCPClient4readEv>
    if (_debug) {
   d65be:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   d65c0:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d65c2:	b12b      	cbz	r3, d65d0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   d65c4:	f002 feb0 	bl	d9328 <_Z16_fetch_usbserialv>
   d65c8:	6803      	ldr	r3, [r0, #0]
   d65ca:	4639      	mov	r1, r7
   d65cc:	689b      	ldr	r3, [r3, #8]
   d65ce:	4798      	blx	r3
    response[j] = c;
   d65d0:	5567      	strb	r7, [r4, r5]
    j++;
   d65d2:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d65d4:	4555      	cmp	r5, sl
   d65d6:	d1eb      	bne.n	d65b0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   d65d8:	7d33      	ldrb	r3, [r6, #20]
   d65da:	b123      	cbz	r3, d65e6 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   d65dc:	f002 fea4 	bl	d9328 <_Z16_fetch_usbserialv>
   d65e0:	4916      	ldr	r1, [pc, #88]	; (d663c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d65e2:	f001 fdb0 	bl	d8146 <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d65e6:	2300      	movs	r3, #0
   d65e8:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   d65ea:	4915      	ldr	r1, [pc, #84]	; (d6640 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d65ec:	4640      	mov	r0, r8
   d65ee:	f004 f940 	bl	da872 <strcmp>
   d65f2:	b968      	cbnz	r0, d6610 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   d65f4:	4913      	ldr	r1, [pc, #76]	; (d6644 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d65f6:	4620      	mov	r0, r4
   d65f8:	f004 f998 	bl	da92c <strstr>
      result = 1;
   d65fc:	ed9f 0a12 	vldr	s0, [pc, #72]	; d6648 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6600:	2800      	cmp	r0, #0
   d6602:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d6606:	bf18      	it	ne
   d6608:	eeb0 0a67 	vmovne.f32	s0, s15
}
   d660c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   d6610:	217c      	movs	r1, #124	; 0x7c
   d6612:	4620      	mov	r0, r4
   d6614:	f004 f920 	bl	da858 <strchr>
  if (pch != NULL) {
   d6618:	b148      	cbz	r0, d662e <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   d661a:	3001      	adds	r0, #1
   d661c:	f004 f89e 	bl	da75c <atof>
   d6620:	ec51 0b10 	vmov	r0, r1, d0
   d6624:	f003 feb0 	bl	da388 <__aeabi_d2f>
   d6628:	ee00 0a10 	vmov	s0, r0
   d662c:	e7ee      	b.n	d660c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   d662e:	ed9f 0a06 	vldr	s0, [pc, #24]	; d6648 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6632:	e7eb      	b.n	d660c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   d6634:	000dcac8 	.word	0x000dcac8
   d6638:	000dcab4 	.word	0x000dcab4
   d663c:	000dcac7 	.word	0x000dcac7
   d6640:	000dcdbb 	.word	0x000dcdbb
   d6644:	000dcdc0 	.word	0x000dcdc0
   d6648:	cda2425f 	.word	0xcda2425f
   d664c:	2003e5b4 	.word	0x2003e5b4

000d6650 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6650:	b570      	push	{r4, r5, r6, lr}
   d6652:	ed2d 8b02 	vpush	{d8}
   d6656:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6658:	6841      	ldr	r1, [r0, #4]
   d665a:	4822      	ldr	r0, [pc, #136]	; (d66e4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d665c:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6660:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6662:	2300      	movs	r3, #0
   d6664:	f002 fa3a 	bl	d8adc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6668:	4620      	mov	r0, r4
   d666a:	6861      	ldr	r1, [r4, #4]
   d666c:	f242 3234 	movw	r2, #9012	; 0x2334
   d6670:	f7ff fea8 	bl	d63c4 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6674:	481b      	ldr	r0, [pc, #108]	; (d66e4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6676:	f002 f800 	bl	d867a <_ZN9TCPClient9connectedEv>
   d667a:	b348      	cbz	r0, d66d0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    _client_tcp_ubi.print(payload);
   d667c:	4629      	mov	r1, r5
   d667e:	4819      	ldr	r0, [pc, #100]	; (d66e4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6680:	f001 fd4e 	bl	d8120 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   d6684:	4620      	mov	r0, r4
   d6686:	f7ff ff5b 	bl	d6540 <_ZN6UbiTCP16waitServerAnswerEv>
   d668a:	4605      	mov	r5, r0
   d668c:	b938      	cbnz	r0, d669e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.stop();
   d668e:	4815      	ldr	r0, [pc, #84]	; (d66e4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6690:	f002 f9b0 	bl	d89f4 <_ZN9TCPClient4stopEv>
    return false;
   d6694:	2500      	movs	r5, #0
}
   d6696:	ecbd 8b02 	vpop	{d8}
   d669a:	4628      	mov	r0, r5
   d669c:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
   d669e:	2064      	movs	r0, #100	; 0x64
   d66a0:	f000 fd60 	bl	d7164 <malloc>
  float value = parseTCPAnswer("POST", response);
   d66a4:	4910      	ldr	r1, [pc, #64]	; (d66e8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d66a6:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   d66a8:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   d66aa:	4620      	mov	r0, r4
   d66ac:	f7ff ff6a 	bl	d6584 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d66b0:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   d66b2:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d66b6:	f000 fd5d 	bl	d7174 <free>
  if (value != ERROR_VALUE) {
   d66ba:	eddf 7a0c 	vldr	s15, [pc, #48]	; d66ec <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d66be:	eeb4 8a67 	vcmp.f32	s16, s15
   d66c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d66c6:	d0e2      	beq.n	d668e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d66c8:	4806      	ldr	r0, [pc, #24]	; (d66e4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d66ca:	f002 f993 	bl	d89f4 <_ZN9TCPClient4stopEv>
    return true;
   d66ce:	e7e2      	b.n	d6696 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    if (_debug) {
   d66d0:	7d23      	ldrb	r3, [r4, #20]
   d66d2:	2b00      	cmp	r3, #0
   d66d4:	d0db      	beq.n	d668e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d66d6:	f002 fe27 	bl	d9328 <_Z16_fetch_usbserialv>
   d66da:	4905      	ldr	r1, [pc, #20]	; (d66f0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d66dc:	f001 fd33 	bl	d8146 <_ZN5Print7printlnEPKc>
   d66e0:	e7d5      	b.n	d668e <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
   d66e2:	bf00      	nop
   d66e4:	2003e5b4 	.word	0x2003e5b4
   d66e8:	000dcdbb 	.word	0x000dcdbb
   d66ec:	cda2425f 	.word	0xcda2425f
   d66f0:	000dcdc3 	.word	0x000dcdc3

000d66f4 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d66f4:	b570      	push	{r4, r5, r6, lr}
   d66f6:	ed2d 8b02 	vpush	{d8}
   d66fa:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d66fc:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d66fe:	460d      	mov	r5, r1
   d6700:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6702:	6841      	ldr	r1, [r0, #4]
   d6704:	481e      	ldr	r0, [pc, #120]	; (d6780 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d6706:	f242 3234 	movw	r2, #9012	; 0x2334
   d670a:	f002 f9e7 	bl	d8adc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d670e:	4620      	mov	r0, r4
   d6710:	6861      	ldr	r1, [r4, #4]
   d6712:	f242 3234 	movw	r2, #9012	; 0x2334
   d6716:	f7ff fe55 	bl	d63c4 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d671a:	4819      	ldr	r0, [pc, #100]	; (d6780 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d671c:	f001 ffad 	bl	d867a <_ZN9TCPClient9connectedEv>
   d6720:	b328      	cbz	r0, d676e <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   d6722:	4620      	mov	r0, r4
   d6724:	4632      	mov	r2, r6
   d6726:	4629      	mov	r1, r5
   d6728:	f7ff fe98 	bl	d645c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d672c:	4620      	mov	r0, r4
   d672e:	f7ff ff07 	bl	d6540 <_ZN6UbiTCP16waitServerAnswerEv>
   d6732:	b948      	cbnz	r0, d6748 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   d6734:	4812      	ldr	r0, [pc, #72]	; (d6780 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   d6736:	ed9f 8a13 	vldr	s16, [pc, #76]	; d6784 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   d673a:	f002 f95b 	bl	d89f4 <_ZN9TCPClient4stopEv>
}
   d673e:	eeb0 0a48 	vmov.f32	s0, s16
   d6742:	ecbd 8b02 	vpop	{d8}
   d6746:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6748:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d674c:	f000 fd0a 	bl	d7164 <malloc>
    float value = parseTCPAnswer("LV", response);
   d6750:	490d      	ldr	r1, [pc, #52]	; (d6788 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   d6752:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6754:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d6756:	4620      	mov	r0, r4
   d6758:	f7ff ff14 	bl	d6584 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d675c:	4808      	ldr	r0, [pc, #32]	; (d6780 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   d675e:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d6762:	f002 f947 	bl	d89f4 <_ZN9TCPClient4stopEv>
    free(response);
   d6766:	4628      	mov	r0, r5
   d6768:	f000 fd04 	bl	d7174 <free>
    return value;
   d676c:	e7e7      	b.n	d673e <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   d676e:	7d23      	ldrb	r3, [r4, #20]
   d6770:	2b00      	cmp	r3, #0
   d6772:	d0df      	beq.n	d6734 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   d6774:	f002 fdd8 	bl	d9328 <_Z16_fetch_usbserialv>
   d6778:	4904      	ldr	r1, [pc, #16]	; (d678c <_ZN6UbiTCP3getEPKcS1_+0x98>)
   d677a:	f001 fce4 	bl	d8146 <_ZN5Print7printlnEPKc>
   d677e:	e7d9      	b.n	d6734 <_ZN6UbiTCP3getEPKcS1_+0x40>
   d6780:	2003e5b4 	.word	0x2003e5b4
   d6784:	cda2425f 	.word	0xcda2425f
   d6788:	000dcde1 	.word	0x000dcde1
   d678c:	000dcde4 	.word	0x000dcde4

000d6790 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6794:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6796:	2018      	movs	r0, #24
   d6798:	4615      	mov	r5, r2
   d679a:	460f      	mov	r7, r1
   d679c:	f7fd fc7b 	bl	d4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   d67a0:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   d67a4:	686b      	ldr	r3, [r5, #4]
   d67a6:	f8d5 9000 	ldr.w	r9, [r5]
      _Link_type __x = _M_begin();
   d67aa:	68ba      	ldr	r2, [r7, #8]
   d67ac:	6143      	str	r3, [r0, #20]
   d67ae:	4606      	mov	r6, r0
   d67b0:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   d67b4:	4655      	mov	r5, sl
      bool __comp = true;
   d67b6:	2301      	movs	r3, #1
      while (__x != 0)
   d67b8:	b152      	cbz	r2, d67d0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d67ba:	6913      	ldr	r3, [r2, #16]
   d67bc:	454b      	cmp	r3, r9
   d67be:	bfcc      	ite	gt
   d67c0:	6891      	ldrgt	r1, [r2, #8]
   d67c2:	68d1      	ldrle	r1, [r2, #12]
   d67c4:	4615      	mov	r5, r2
   d67c6:	bfcc      	ite	gt
   d67c8:	2301      	movgt	r3, #1
   d67ca:	2300      	movle	r3, #0
   d67cc:	460a      	mov	r2, r1
   d67ce:	e7f3      	b.n	d67b8 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   d67d0:	b1a3      	cbz	r3, d67fc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6c>
	  if (__j == begin())
   d67d2:	68fb      	ldr	r3, [r7, #12]
   d67d4:	42ab      	cmp	r3, r5
   d67d6:	d023      	beq.n	d6820 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	_M_node = _Rb_tree_decrement(_M_node);
   d67d8:	4628      	mov	r0, r5
   d67da:	f002 ffa4 	bl	d9726 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d67de:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d67e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   d67e4:	454b      	cmp	r3, r9
   d67e6:	db1b      	blt.n	d6820 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	::operator delete(__p);
   d67e8:	4630      	mov	r0, r6
   d67ea:	f7fd fc58 	bl	d409e <_ZdlPv>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d67ee:	f8c4 8000 	str.w	r8, [r4]
   d67f2:	2300      	movs	r3, #0
   d67f4:	7123      	strb	r3, [r4, #4]
      }
   d67f6:	4620      	mov	r0, r4
   d67f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67fc:	46a8      	mov	r8, r5
   d67fe:	e7ef      	b.n	d67e0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   d6800:	6928      	ldr	r0, [r5, #16]
   d6802:	4581      	cmp	r9, r0
   d6804:	bfac      	ite	ge
   d6806:	2000      	movge	r0, #0
   d6808:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d680a:	4653      	mov	r3, sl
   d680c:	462a      	mov	r2, r5
   d680e:	4631      	mov	r1, r6
   d6810:	f002 ff8b 	bl	d972a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d6814:	697b      	ldr	r3, [r7, #20]
   d6816:	6026      	str	r6, [r4, #0]
   d6818:	3301      	adds	r3, #1
   d681a:	617b      	str	r3, [r7, #20]
   d681c:	2301      	movs	r3, #1
   d681e:	e7e9      	b.n	d67f4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x64>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d6820:	45aa      	cmp	sl, r5
   d6822:	d1ed      	bne.n	d6800 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x70>
			    || _M_impl._M_key_compare(_S_key(__z),
   d6824:	2001      	movs	r0, #1
   d6826:	e7f0      	b.n	d680a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7a>

000d6828 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   d6828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d682c:	460d      	mov	r5, r1
   d682e:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6830:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d6834:	f000 fc96 	bl	d7164 <malloc>
  if (_debug) {
   d6838:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d683a:	4607      	mov	r7, r0
  if (_debug) {
   d683c:	b14b      	cbz	r3, d6852 <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   d683e:	f002 fd73 	bl	d9328 <_Z16_fetch_usbserialv>
   d6842:	493a      	ldr	r1, [pc, #232]	; (d692c <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   d6844:	f001 fc7f 	bl	d8146 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6848:	f002 fd6e 	bl	d9328 <_Z16_fetch_usbserialv>
   d684c:	4938      	ldr	r1, [pc, #224]	; (d6930 <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   d684e:	f001 fc7a 	bl	d8146 <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d6852:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d6944 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   d6856:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6858:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d685c:	4648      	mov	r0, r9
   d685e:	f002 f86f 	bl	d8940 <_ZN9TCPClient9availableEv>
   d6862:	b188      	cbz	r0, d6888 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   d6864:	4648      	mov	r0, r9
   d6866:	f001 ffa4 	bl	d87b2 <_ZN9TCPClient4readEv>
    if (_debug) {
   d686a:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   d686c:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   d6870:	b12b      	cbz	r3, d687e <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   d6872:	f002 fd59 	bl	d9328 <_Z16_fetch_usbserialv>
   d6876:	6803      	ldr	r3, [r0, #0]
   d6878:	4641      	mov	r1, r8
   d687a:	689b      	ldr	r3, [r3, #8]
   d687c:	4798      	blx	r3
    response[j] = c;
   d687e:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   d6882:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6884:	4556      	cmp	r6, sl
   d6886:	d1e9      	bne.n	d685c <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   d6888:	7d2b      	ldrb	r3, [r5, #20]
   d688a:	b123      	cbz	r3, d6896 <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   d688c:	f002 fd4c 	bl	d9328 <_Z16_fetch_usbserialv>
   d6890:	4928      	ldr	r1, [pc, #160]	; (d6934 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   d6892:	f001 fc58 	bl	d8146 <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d6896:	2500      	movs	r5, #0
	  : _Node_allocator()
   d6898:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   d689a:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   d689e:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   d68a2:	4925      	ldr	r1, [pc, #148]	; (d6938 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   d68a4:	7125      	strb	r5, [r4, #4]
   d68a6:	4638      	mov	r0, r7
  response[j] = '\0';
   d68a8:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   d68aa:	f004 fe8b 	bl	db5c4 <strtok>
    if (strcmp(token, "OK") == 0) {
   d68ae:	f8df 9098 	ldr.w	r9, [pc, #152]	; d6948 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   d68b2:	f8df a098 	ldr.w	sl, [pc, #152]	; d694c <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   d68b6:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6938 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   d68ba:	4606      	mov	r6, r0
  while (token != NULL) {
   d68bc:	b37e      	cbz	r6, d691e <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   d68be:	4649      	mov	r1, r9
   d68c0:	4630      	mov	r0, r6
   d68c2:	f003 ffd6 	bl	da872 <strcmp>
   d68c6:	bb00      	cbnz	r0, d690a <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   d68c8:	4641      	mov	r1, r8
   d68ca:	f004 fe7b 	bl	db5c4 <strtok>
      if (strcmp(token, "null") == 0) {
   d68ce:	491b      	ldr	r1, [pc, #108]	; (d693c <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   d68d0:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   d68d2:	f003 ffce 	bl	da872 <strcmp>
   d68d6:	b918      	cbnz	r0, d68e0 <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d68d8:	4b19      	ldr	r3, [pc, #100]	; (d6940 <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   d68da:	9500      	str	r5, [sp, #0]
   d68dc:	9301      	str	r3, [sp, #4]
   d68de:	e008      	b.n	d68f2 <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   d68e0:	4630      	mov	r0, r6
   d68e2:	f003 ff3b 	bl	da75c <atof>
   d68e6:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d68ea:	9500      	str	r5, [sp, #0]
   d68ec:	f003 fd4c 	bl	da388 <__aeabi_d2f>
   d68f0:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   d68f2:	466a      	mov	r2, sp
   d68f4:	4621      	mov	r1, r4
   d68f6:	a802      	add	r0, sp, #8
   d68f8:	f7ff ff4a 	bl	d6790 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   d68fc:	4641      	mov	r1, r8
   d68fe:	2000      	movs	r0, #0
   d6900:	f004 fe60 	bl	db5c4 <strtok>
    mapKey++;
   d6904:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   d6906:	4606      	mov	r6, r0
  while (token != NULL) {
   d6908:	e7d8      	b.n	d68bc <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   d690a:	4651      	mov	r1, sl
   d690c:	4630      	mov	r0, r6
   d690e:	f003 ffb0 	bl	da872 <strcmp>
   d6912:	2800      	cmp	r0, #0
   d6914:	d1f2      	bne.n	d68fc <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   d6916:	4641      	mov	r1, r8
   d6918:	f004 fe54 	bl	db5c4 <strtok>
   d691c:	e7dc      	b.n	d68d8 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   d691e:	4638      	mov	r0, r7
   d6920:	f000 fc28 	bl	d7174 <free>
}
   d6924:	4620      	mov	r0, r4
   d6926:	b004      	add	sp, #16
   d6928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d692c:	000dcac8 	.word	0x000dcac8
   d6930:	000dcab4 	.word	0x000dcab4
   d6934:	000dcac7 	.word	0x000dcac7
   d6938:	000dcd9e 	.word	0x000dcd9e
   d693c:	000dce0a 	.word	0x000dce0a
   d6940:	cda2425f 	.word	0xcda2425f
   d6944:	2003e5b4 	.word	0x2003e5b4
   d6948:	000dcdc0 	.word	0x000dcdc0
   d694c:	000dce0f 	.word	0x000dce0f

000d6950 <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d6950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   d6954:	1d07      	adds	r7, r0, #4
   d6956:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   d6958:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d695a:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   d695e:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   d6962:	7103      	strb	r3, [r0, #4]
   d6964:	460d      	mov	r5, r1
   d6966:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6968:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d696a:	4604      	mov	r4, r0
   d696c:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d696e:	482e      	ldr	r0, [pc, #184]	; (d6a28 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d6970:	f242 3234 	movw	r2, #9012	; 0x2334
   d6974:	f002 f8b2 	bl	d8adc <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6978:	4628      	mov	r0, r5
   d697a:	6869      	ldr	r1, [r5, #4]
   d697c:	f242 3234 	movw	r2, #9012	; 0x2334
   d6980:	f7ff fd20 	bl	d63c4 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6984:	4828      	ldr	r0, [pc, #160]	; (d6a28 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d6986:	f001 fe78 	bl	d867a <_ZN9TCPClient9connectedEv>
   d698a:	b310      	cbz	r0, d69d2 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   d698c:	4631      	mov	r1, r6
   d698e:	4642      	mov	r2, r8
   d6990:	4628      	mov	r0, r5
   d6992:	f7ff fd63 	bl	d645c <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d6996:	4628      	mov	r0, r5
   d6998:	f7ff fdd2 	bl	d6540 <_ZN6UbiTCP16waitServerAnswerEv>
   d699c:	4606      	mov	r6, r0
   d699e:	b9c0      	cbnz	r0, d69d2 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   d69a0:	4821      	ldr	r0, [pc, #132]	; (d6a28 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   d69a2:	4f22      	ldr	r7, [pc, #136]	; (d6a2c <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   d69a4:	f002 f826 	bl	d89f4 <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   d69a8:	4921      	ldr	r1, [pc, #132]	; (d6a30 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
   d69aa:	4640      	mov	r0, r8
   d69ac:	f004 fe0a 	bl	db5c4 <strtok>
      int mapKey = 0;
   d69b0:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   d69b2:	4e1f      	ldr	r6, [pc, #124]	; (d6a30 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
      while (token != NULL) {
   d69b4:	2800      	cmp	r0, #0
   d69b6:	d032      	beq.n	d6a1e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xce>
   d69b8:	4621      	mov	r1, r4
   d69ba:	a802      	add	r0, sp, #8
   d69bc:	466a      	mov	r2, sp
   d69be:	9500      	str	r5, [sp, #0]
   d69c0:	9701      	str	r7, [sp, #4]
   d69c2:	f7ff fee5 	bl	d6790 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   d69c6:	4631      	mov	r1, r6
   d69c8:	2000      	movs	r0, #0
        mapKey++;
   d69ca:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   d69cc:	f004 fdfa 	bl	db5c4 <strtok>
      while (token != NULL) {
   d69d0:	e7f0      	b.n	d69b4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   d69d2:	4629      	mov	r1, r5
   d69d4:	a802      	add	r0, sp, #8
   d69d6:	f7ff ff27 	bl	d6828 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   d69da:	68a1      	ldr	r1, [r4, #8]
   d69dc:	4620      	mov	r0, r4
   d69de:	f7ff fc9f 	bl	d6320 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
      if (__x._M_root() != nullptr)
   d69e2:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   d69e4:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d69e6:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   d69ea:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   d69ee:	b17a      	cbz	r2, d6a10 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xc0>
      _M_header._M_color = __from._M_header._M_color;
   d69f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d69f4:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   d69f6:	9905      	ldr	r1, [sp, #20]
   d69f8:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   d69fa:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   d69fc:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   d69fe:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   d6a00:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   d6a02:	9a07      	ldr	r2, [sp, #28]
   d6a04:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   d6a06:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   d6a08:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   d6a0c:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   d6a0e:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   d6a10:	a802      	add	r0, sp, #8
   d6a12:	9904      	ldr	r1, [sp, #16]
   d6a14:	f7ff fc84 	bl	d6320 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
  _client_tcp_ubi.stop();
   d6a18:	4803      	ldr	r0, [pc, #12]	; (d6a28 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d6a1a:	f001 ffeb 	bl	d89f4 <_ZN9TCPClient4stopEv>
}
   d6a1e:	4620      	mov	r0, r4
   d6a20:	b008      	add	sp, #32
   d6a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a26:	bf00      	nop
   d6a28:	2003e5b4 	.word	0x2003e5b4
   d6a2c:	cda2425f 	.word	0xcda2425f
   d6a30:	000dcd3b 	.word	0x000dcd3b

000d6a34 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d6a34:	b510      	push	{r4, lr}
   d6a36:	4c05      	ldr	r4, [pc, #20]	; (d6a4c <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x18>)
   d6a38:	4620      	mov	r0, r4
   d6a3a:	f002 f82b 	bl	d8a94 <_ZN9TCPClientC1Ev>
   d6a3e:	4620      	mov	r0, r4
   d6a40:	4a03      	ldr	r2, [pc, #12]	; (d6a50 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x1c>)
   d6a42:	4904      	ldr	r1, [pc, #16]	; (d6a54 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x20>)
   d6a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6a48:	f002 be0e 	b.w	d9668 <__aeabi_atexit>
   d6a4c:	2003e5b4 	.word	0x2003e5b4
   d6a50:	2003e440 	.word	0x2003e440
   d6a54:	000d5379 	.word	0x000d5379

000d6a58 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   d6a58:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6a60 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d6a5c:	4770      	bx	lr
   d6a5e:	bf00      	nop
   d6a60:	cda2425f 	.word	0xcda2425f

000d6a64 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d6a64:	7501      	strb	r1, [r0, #20]
   d6a66:	4770      	bx	lr

000d6a68 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   d6a68:	2200      	movs	r2, #0
	  : _Node_allocator()
   d6a6a:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d6a6c:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d6a70:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d6a74:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   d6a76:	4770      	bx	lr

000d6a78 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d6a78:	b530      	push	{r4, r5, lr}
   d6a7a:	4d06      	ldr	r5, [pc, #24]	; (d6a94 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d6a7c:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d6a7e:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d6a82:	2500      	movs	r5, #0
  _token = token;
   d6a84:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d6a86:	7505      	strb	r5, [r0, #20]
   d6a88:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d6a8c:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d6a90:	6185      	str	r5, [r0, #24]
}
   d6a92:	bd30      	pop	{r4, r5, pc}
   d6a94:	000dcee4 	.word	0x000dcee4

000d6a98 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
}
   d6a98:	b510      	push	{r4, lr}
   d6a9a:	4c05      	ldr	r4, [pc, #20]	; (d6ab0 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x18>)
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	f002 fa15 	bl	d8ecc <_ZN3UDPC1Ev>
   d6aa2:	4620      	mov	r0, r4
   d6aa4:	4a03      	ldr	r2, [pc, #12]	; (d6ab4 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x1c>)
   d6aa6:	4904      	ldr	r1, [pc, #16]	; (d6ab8 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x20>)
   d6aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6aac:	f002 bddc 	b.w	d9668 <__aeabi_atexit>
   d6ab0:	2003e5d0 	.word	0x2003e5d0
   d6ab4:	2003e440 	.word	0x2003e440
   d6ab8:	000d5359 	.word	0x000d5359

000d6abc <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   d6abc:	b510      	push	{r4, lr}
   d6abe:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   d6ac0:	684a      	ldr	r2, [r1, #4]
   d6ac2:	4902      	ldr	r1, [pc, #8]	; (d6acc <_ZN6UbiUDP11getServerIpEv+0x10>)
   d6ac4:	f001 fa8a 	bl	d7fdc <_ZN5spark12NetworkClass7resolveEPKc>
}
   d6ac8:	4620      	mov	r0, r4
   d6aca:	bd10      	pop	{r4, pc}
   d6acc:	2003e620 	.word	0x2003e620

000d6ad0 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ad2:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   d6ad4:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6ad6:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   d6ad8:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d6ada:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   d6adc:	f7ff ffee 	bl	d6abc <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6ae0:	a802      	add	r0, sp, #8
   d6ae2:	f000 ff9b 	bl	d7a1c <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   d6ae6:	b9a0      	cbnz	r0, d6b12 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d6ae8:	7d33      	ldrb	r3, [r6, #20]
   d6aea:	b123      	cbz	r3, d6af6 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d6aec:	f002 fc1c 	bl	d9328 <_Z16_fetch_usbserialv>
   d6af0:	4927      	ldr	r1, [pc, #156]	; (d6b90 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d6af2:	f001 fb28 	bl	d8146 <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   d6af6:	23f3      	movs	r3, #243	; 0xf3
   d6af8:	9300      	str	r3, [sp, #0]
   d6afa:	2237      	movs	r2, #55	; 0x37
   d6afc:	233d      	movs	r3, #61	; 0x3d
   d6afe:	21a9      	movs	r1, #169	; 0xa9
   d6b00:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   d6b02:	ad09      	add	r5, sp, #36	; 0x24
   d6b04:	f000 ffae 	bl	d7a64 <_ZN9IPAddressC1Ehhhh>
   d6b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b0a:	ac03      	add	r4, sp, #12
   d6b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b0e:	682b      	ldr	r3, [r5, #0]
   d6b10:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d6b12:	2200      	movs	r2, #0
   d6b14:	f240 21bd 	movw	r1, #701	; 0x2bd
   d6b18:	481e      	ldr	r0, [pc, #120]	; (d6b94 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b1a:	f002 fa09 	bl	d8f30 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d6b1e:	2200      	movs	r2, #0
   d6b20:	f242 3134 	movw	r1, #9012	; 0x2334
   d6b24:	481b      	ldr	r0, [pc, #108]	; (d6b94 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b26:	f002 f8ab 	bl	d8c80 <_ZN3UDP5beginEtm>
   d6b2a:	ad03      	add	r5, sp, #12
   d6b2c:	4b1a      	ldr	r3, [pc, #104]	; (d6b98 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   d6b2e:	9308      	str	r3, [sp, #32]
   d6b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b32:	ac09      	add	r4, sp, #36	; 0x24
   d6b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b36:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d6b38:	4816      	ldr	r0, [pc, #88]	; (d6b94 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b3a:	7023      	strb	r3, [r4, #0]
   d6b3c:	f242 3234 	movw	r2, #9012	; 0x2334
   d6b40:	a908      	add	r1, sp, #32
   d6b42:	f002 fa11 	bl	d8f68 <_ZN3UDP11beginPacketE9IPAddresst>
   d6b46:	b958      	cbnz	r0, d6b60 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   d6b48:	7d33      	ldrb	r3, [r6, #20]
   d6b4a:	b123      	cbz	r3, d6b56 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   d6b4c:	f002 fbec 	bl	d9328 <_Z16_fetch_usbserialv>
   d6b50:	4912      	ldr	r1, [pc, #72]	; (d6b9c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   d6b52:	f001 faf8 	bl	d8146 <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   d6b56:	480f      	ldr	r0, [pc, #60]	; (d6b94 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b58:	f002 f8de 	bl	d8d18 <_ZN3UDP4stopEv>
    return false;
   d6b5c:	2000      	movs	r0, #0
   d6b5e:	e014      	b.n	d6b8a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   d6b60:	2f00      	cmp	r7, #0
   d6b62:	d0f1      	beq.n	d6b48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   d6b64:	4638      	mov	r0, r7
   d6b66:	f003 feb4 	bl	da8d2 <strlen>
   d6b6a:	4639      	mov	r1, r7
   d6b6c:	4602      	mov	r2, r0
   d6b6e:	4809      	ldr	r0, [pc, #36]	; (d6b94 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b70:	f002 f8e0 	bl	d8d34 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d6b74:	2800      	cmp	r0, #0
   d6b76:	d0e7      	beq.n	d6b48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   d6b78:	4806      	ldr	r0, [pc, #24]	; (d6b94 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b7a:	f002 f93b 	bl	d8df4 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d6b7e:	2800      	cmp	r0, #0
   d6b80:	d0e2      	beq.n	d6b48 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   d6b82:	4804      	ldr	r0, [pc, #16]	; (d6b94 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d6b84:	f002 f8c8 	bl	d8d18 <_ZN3UDP4stopEv>
  return true;
   d6b88:	2001      	movs	r0, #1
}
   d6b8a:	b00f      	add	sp, #60	; 0x3c
   d6b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b8e:	bf00      	nop
   d6b90:	000dce30 	.word	0x000dce30
   d6b94:	2003e5d0 	.word	0x2003e5d0
   d6b98:	000dcfdc 	.word	0x000dcfdc
   d6b9c:	000dcebc 	.word	0x000dcebc

000d6ba0 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d6ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d6ba2:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d6ba4:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d6ba6:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d6ba8:	e9cd 2100 	strd	r2, r1, [sp]
   d6bac:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d6bae:	f000 fad9 	bl	d7164 <malloc>
   d6bb2:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d6bb4:	2014      	movs	r0, #20
   d6bb6:	f7fd fa6e 	bl	d4096 <_Znwj>
   d6bba:	4605      	mov	r5, r0
   d6bbc:	b120      	cbz	r0, d6bc8 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d6bbe:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6bc2:	4633      	mov	r3, r6
   d6bc4:	f7ff fba4 	bl	d6310 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d6bc8:	6025      	str	r5, [r4, #0]
}
   d6bca:	b002      	add	sp, #8
   d6bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6bd0 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   d6bd0:	b538      	push	{r3, r4, r5, lr}
   d6bd2:	2500      	movs	r5, #0
   d6bd4:	4604      	mov	r4, r0
   d6bd6:	4613      	mov	r3, r2
   d6bd8:	7245      	strb	r5, [r0, #9]
   d6bda:	7285      	strb	r5, [r0, #10]
   d6bdc:	4a02      	ldr	r2, [pc, #8]	; (d6be8 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d6bde:	f7ff ffdf 	bl	d6ba0 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   d6be2:	4620      	mov	r0, r4
   d6be4:	bd38      	pop	{r3, r4, r5, pc}
   d6be6:	bf00      	nop
   d6be8:	000dcef4 	.word	0x000dcef4

000d6bec <_ZN7UbidotsD1Ev>:

/**************************************************************************
 * Destructor
 ***************************************************************************/

Ubidots::~Ubidots() {
   d6bec:	b538      	push	{r3, r4, r5, lr}
   d6bee:	4604      	mov	r4, r0
  free(_context);
   d6bf0:	6840      	ldr	r0, [r0, #4]
   d6bf2:	f000 fabf 	bl	d7174 <free>
  delete _cloudProtocol;
   d6bf6:	6825      	ldr	r5, [r4, #0]
   d6bf8:	b135      	cbz	r5, d6c08 <_ZN7UbidotsD1Ev+0x1c>
   d6bfa:	4628      	mov	r0, r5
   d6bfc:	f7ff f90a 	bl	d5e14 <_ZN18UbiProtocolHandlerD1Ev>
   d6c00:	2114      	movs	r1, #20
   d6c02:	4628      	mov	r0, r5
   d6c04:	f002 fd35 	bl	d9672 <_ZdlPvj>
}
   d6c08:	4620      	mov	r0, r4
   d6c0a:	bd38      	pop	{r3, r4, r5, pc}

000d6c0c <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   d6c0c:	6800      	ldr	r0, [r0, #0]
   d6c0e:	f7ff b911 	b.w	d5e34 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d6c12 <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   d6c12:	b507      	push	{r0, r1, r2, lr}
   d6c14:	2300      	movs	r3, #0
   d6c16:	9300      	str	r3, [sp, #0]
   d6c18:	461a      	mov	r2, r3
   d6c1a:	f7ff fff7 	bl	d6c0c <_ZN7Ubidots3addEPcfS0_mj>
   d6c1e:	b003      	add	sp, #12
   d6c20:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c24 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   d6c24:	6800      	ldr	r0, [r0, #0]
   d6c26:	f7ff bb21 	b.w	d626c <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
	...

000d6c2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6c2c:	b508      	push	{r3, lr}
   d6c2e:	4b02      	ldr	r3, [pc, #8]	; (d6c38 <os_mutex_recursive_create+0xc>)
   d6c30:	681b      	ldr	r3, [r3, #0]
   d6c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6c34:	9301      	str	r3, [sp, #4]
   d6c36:	bd08      	pop	{r3, pc}
   d6c38:	00030248 	.word	0x00030248

000d6c3c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6c3c:	b508      	push	{r3, lr}
   d6c3e:	4b02      	ldr	r3, [pc, #8]	; (d6c48 <os_mutex_recursive_destroy+0xc>)
   d6c40:	681b      	ldr	r3, [r3, #0]
   d6c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6c44:	9301      	str	r3, [sp, #4]
   d6c46:	bd08      	pop	{r3, pc}
   d6c48:	00030248 	.word	0x00030248

000d6c4c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6c4c:	b508      	push	{r3, lr}
   d6c4e:	4b02      	ldr	r3, [pc, #8]	; (d6c58 <HAL_RNG_GetRandomNumber+0xc>)
   d6c50:	681b      	ldr	r3, [r3, #0]
   d6c52:	685b      	ldr	r3, [r3, #4]
   d6c54:	9301      	str	r3, [sp, #4]
   d6c56:	bd08      	pop	{r3, pc}
   d6c58:	00030218 	.word	0x00030218

000d6c5c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6c5c:	b508      	push	{r3, lr}
   d6c5e:	4b02      	ldr	r3, [pc, #8]	; (d6c68 <HAL_Delay_Microseconds+0xc>)
   d6c60:	681b      	ldr	r3, [r3, #0]
   d6c62:	68db      	ldr	r3, [r3, #12]
   d6c64:	9301      	str	r3, [sp, #4]
   d6c66:	bd08      	pop	{r3, pc}
   d6c68:	00030218 	.word	0x00030218

000d6c6c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6c6c:	b508      	push	{r3, lr}
   d6c6e:	4b02      	ldr	r3, [pc, #8]	; (d6c78 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6c70:	681b      	ldr	r3, [r3, #0]
   d6c72:	695b      	ldr	r3, [r3, #20]
   d6c74:	9301      	str	r3, [sp, #4]
   d6c76:	bd08      	pop	{r3, pc}
   d6c78:	00030218 	.word	0x00030218

000d6c7c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6c7c:	b508      	push	{r3, lr}
   d6c7e:	4b02      	ldr	r3, [pc, #8]	; (d6c88 <HAL_Pin_Map+0xc>)
   d6c80:	681b      	ldr	r3, [r3, #0]
   d6c82:	681b      	ldr	r3, [r3, #0]
   d6c84:	9301      	str	r3, [sp, #4]
   d6c86:	bd08      	pop	{r3, pc}
   d6c88:	0003022c 	.word	0x0003022c

000d6c8c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6c8c:	b508      	push	{r3, lr}
   d6c8e:	4b02      	ldr	r3, [pc, #8]	; (d6c98 <HAL_Pin_Mode+0xc>)
   d6c90:	681b      	ldr	r3, [r3, #0]
   d6c92:	689b      	ldr	r3, [r3, #8]
   d6c94:	9301      	str	r3, [sp, #4]
   d6c96:	bd08      	pop	{r3, pc}
   d6c98:	0003022c 	.word	0x0003022c

000d6c9c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6c9c:	b508      	push	{r3, lr}
   d6c9e:	4b02      	ldr	r3, [pc, #8]	; (d6ca8 <HAL_Get_Pin_Mode+0xc>)
   d6ca0:	681b      	ldr	r3, [r3, #0]
   d6ca2:	68db      	ldr	r3, [r3, #12]
   d6ca4:	9301      	str	r3, [sp, #4]
   d6ca6:	bd08      	pop	{r3, pc}
   d6ca8:	0003022c 	.word	0x0003022c

000d6cac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6cac:	b508      	push	{r3, lr}
   d6cae:	4b02      	ldr	r3, [pc, #8]	; (d6cb8 <HAL_GPIO_Write+0xc>)
   d6cb0:	681b      	ldr	r3, [r3, #0]
   d6cb2:	691b      	ldr	r3, [r3, #16]
   d6cb4:	9301      	str	r3, [sp, #4]
   d6cb6:	bd08      	pop	{r3, pc}
   d6cb8:	0003022c 	.word	0x0003022c

000d6cbc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d6cbc:	b508      	push	{r3, lr}
   d6cbe:	4b02      	ldr	r3, [pc, #8]	; (d6cc8 <HAL_Interrupts_Enable_All+0xc>)
   d6cc0:	681b      	ldr	r3, [r3, #0]
   d6cc2:	6a1b      	ldr	r3, [r3, #32]
   d6cc4:	9301      	str	r3, [sp, #4]
   d6cc6:	bd08      	pop	{r3, pc}
   d6cc8:	0003022c 	.word	0x0003022c

000d6ccc <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d6ccc:	b508      	push	{r3, lr}
   d6cce:	4b02      	ldr	r3, [pc, #8]	; (d6cd8 <HAL_Interrupts_Disable_All+0xc>)
   d6cd0:	681b      	ldr	r3, [r3, #0]
   d6cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6cd4:	9301      	str	r3, [sp, #4]
   d6cd6:	bd08      	pop	{r3, pc}
   d6cd8:	0003022c 	.word	0x0003022c

000d6cdc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6cdc:	b508      	push	{r3, lr}
   d6cde:	4b02      	ldr	r3, [pc, #8]	; (d6ce8 <hal_i2c_begin+0xc>)
   d6ce0:	681b      	ldr	r3, [r3, #0]
   d6ce2:	68db      	ldr	r3, [r3, #12]
   d6ce4:	9301      	str	r3, [sp, #4]
   d6ce6:	bd08      	pop	{r3, pc}
   d6ce8:	00030228 	.word	0x00030228

000d6cec <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6cec:	b508      	push	{r3, lr}
   d6cee:	4b02      	ldr	r3, [pc, #8]	; (d6cf8 <hal_i2c_begin_transmission+0xc>)
   d6cf0:	681b      	ldr	r3, [r3, #0]
   d6cf2:	699b      	ldr	r3, [r3, #24]
   d6cf4:	9301      	str	r3, [sp, #4]
   d6cf6:	bd08      	pop	{r3, pc}
   d6cf8:	00030228 	.word	0x00030228

000d6cfc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6cfc:	b508      	push	{r3, lr}
   d6cfe:	4b02      	ldr	r3, [pc, #8]	; (d6d08 <hal_i2c_end_transmission+0xc>)
   d6d00:	681b      	ldr	r3, [r3, #0]
   d6d02:	69db      	ldr	r3, [r3, #28]
   d6d04:	9301      	str	r3, [sp, #4]
   d6d06:	bd08      	pop	{r3, pc}
   d6d08:	00030228 	.word	0x00030228

000d6d0c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6d0c:	b508      	push	{r3, lr}
   d6d0e:	4b02      	ldr	r3, [pc, #8]	; (d6d18 <hal_i2c_write+0xc>)
   d6d10:	681b      	ldr	r3, [r3, #0]
   d6d12:	6a1b      	ldr	r3, [r3, #32]
   d6d14:	9301      	str	r3, [sp, #4]
   d6d16:	bd08      	pop	{r3, pc}
   d6d18:	00030228 	.word	0x00030228

000d6d1c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6d1c:	b508      	push	{r3, lr}
   d6d1e:	4b02      	ldr	r3, [pc, #8]	; (d6d28 <hal_i2c_available+0xc>)
   d6d20:	681b      	ldr	r3, [r3, #0]
   d6d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d24:	9301      	str	r3, [sp, #4]
   d6d26:	bd08      	pop	{r3, pc}
   d6d28:	00030228 	.word	0x00030228

000d6d2c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6d2c:	b508      	push	{r3, lr}
   d6d2e:	4b02      	ldr	r3, [pc, #8]	; (d6d38 <hal_i2c_read+0xc>)
   d6d30:	681b      	ldr	r3, [r3, #0]
   d6d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d34:	9301      	str	r3, [sp, #4]
   d6d36:	bd08      	pop	{r3, pc}
   d6d38:	00030228 	.word	0x00030228

000d6d3c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6d3c:	b508      	push	{r3, lr}
   d6d3e:	4b02      	ldr	r3, [pc, #8]	; (d6d48 <hal_i2c_peek+0xc>)
   d6d40:	681b      	ldr	r3, [r3, #0]
   d6d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d44:	9301      	str	r3, [sp, #4]
   d6d46:	bd08      	pop	{r3, pc}
   d6d48:	00030228 	.word	0x00030228

000d6d4c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6d4c:	b508      	push	{r3, lr}
   d6d4e:	4b02      	ldr	r3, [pc, #8]	; (d6d58 <hal_i2c_flush+0xc>)
   d6d50:	681b      	ldr	r3, [r3, #0]
   d6d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d54:	9301      	str	r3, [sp, #4]
   d6d56:	bd08      	pop	{r3, pc}
   d6d58:	00030228 	.word	0x00030228

000d6d5c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6d5c:	b508      	push	{r3, lr}
   d6d5e:	4b02      	ldr	r3, [pc, #8]	; (d6d68 <hal_i2c_is_enabled+0xc>)
   d6d60:	681b      	ldr	r3, [r3, #0]
   d6d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d64:	9301      	str	r3, [sp, #4]
   d6d66:	bd08      	pop	{r3, pc}
   d6d68:	00030228 	.word	0x00030228

000d6d6c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6d6c:	b508      	push	{r3, lr}
   d6d6e:	4b02      	ldr	r3, [pc, #8]	; (d6d78 <hal_i2c_init+0xc>)
   d6d70:	681b      	ldr	r3, [r3, #0]
   d6d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6d74:	9301      	str	r3, [sp, #4]
   d6d76:	bd08      	pop	{r3, pc}
   d6d78:	00030228 	.word	0x00030228

000d6d7c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6d7c:	b508      	push	{r3, lr}
   d6d7e:	4b02      	ldr	r3, [pc, #8]	; (d6d88 <if_index_to_name+0xc>)
   d6d80:	681b      	ldr	r3, [r3, #0]
   d6d82:	695b      	ldr	r3, [r3, #20]
   d6d84:	9301      	str	r3, [sp, #4]
   d6d86:	bd08      	pop	{r3, pc}
   d6d88:	0003026c 	.word	0x0003026c

000d6d8c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6d8c:	b508      	push	{r3, lr}
   d6d8e:	4b02      	ldr	r3, [pc, #8]	; (d6d98 <inet_inet_ntop+0xc>)
   d6d90:	681b      	ldr	r3, [r3, #0]
   d6d92:	695b      	ldr	r3, [r3, #20]
   d6d94:	9301      	str	r3, [sp, #4]
   d6d96:	bd08      	pop	{r3, pc}
   d6d98:	00030264 	.word	0x00030264

000d6d9c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6d9c:	b508      	push	{r3, lr}
   d6d9e:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <inet_htonl+0xc>)
   d6da0:	681b      	ldr	r3, [r3, #0]
   d6da2:	6a1b      	ldr	r3, [r3, #32]
   d6da4:	9301      	str	r3, [sp, #4]
   d6da6:	bd08      	pop	{r3, pc}
   d6da8:	00030264 	.word	0x00030264

000d6dac <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d6dac:	b508      	push	{r3, lr}
   d6dae:	4b02      	ldr	r3, [pc, #8]	; (d6db8 <inet_ntohs+0xc>)
   d6db0:	681b      	ldr	r3, [r3, #0]
   d6db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6db4:	9301      	str	r3, [sp, #4]
   d6db6:	bd08      	pop	{r3, pc}
   d6db8:	00030264 	.word	0x00030264

000d6dbc <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6dbc:	b508      	push	{r3, lr}
   d6dbe:	4b02      	ldr	r3, [pc, #8]	; (d6dc8 <inet_htons+0xc>)
   d6dc0:	681b      	ldr	r3, [r3, #0]
   d6dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6dc4:	9301      	str	r3, [sp, #4]
   d6dc6:	bd08      	pop	{r3, pc}
   d6dc8:	00030264 	.word	0x00030264

000d6dcc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6dcc:	b508      	push	{r3, lr}
   d6dce:	4b02      	ldr	r3, [pc, #8]	; (d6dd8 <netdb_freeaddrinfo+0xc>)
   d6dd0:	681b      	ldr	r3, [r3, #0]
   d6dd2:	689b      	ldr	r3, [r3, #8]
   d6dd4:	9301      	str	r3, [sp, #4]
   d6dd6:	bd08      	pop	{r3, pc}
   d6dd8:	00030268 	.word	0x00030268

000d6ddc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6ddc:	b508      	push	{r3, lr}
   d6dde:	4b02      	ldr	r3, [pc, #8]	; (d6de8 <netdb_getaddrinfo+0xc>)
   d6de0:	681b      	ldr	r3, [r3, #0]
   d6de2:	68db      	ldr	r3, [r3, #12]
   d6de4:	9301      	str	r3, [sp, #4]
   d6de6:	bd08      	pop	{r3, pc}
   d6de8:	00030268 	.word	0x00030268

000d6dec <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d6dec:	b508      	push	{r3, lr}
   d6dee:	4b02      	ldr	r3, [pc, #8]	; (d6df8 <sock_bind+0xc>)
   d6df0:	681b      	ldr	r3, [r3, #0]
   d6df2:	685b      	ldr	r3, [r3, #4]
   d6df4:	9301      	str	r3, [sp, #4]
   d6df6:	bd08      	pop	{r3, pc}
   d6df8:	00030238 	.word	0x00030238

000d6dfc <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6dfc:	b508      	push	{r3, lr}
   d6dfe:	4b02      	ldr	r3, [pc, #8]	; (d6e08 <sock_setsockopt+0xc>)
   d6e00:	681b      	ldr	r3, [r3, #0]
   d6e02:	699b      	ldr	r3, [r3, #24]
   d6e04:	9301      	str	r3, [sp, #4]
   d6e06:	bd08      	pop	{r3, pc}
   d6e08:	00030238 	.word	0x00030238

000d6e0c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6e0c:	b508      	push	{r3, lr}
   d6e0e:	4b02      	ldr	r3, [pc, #8]	; (d6e18 <sock_close+0xc>)
   d6e10:	681b      	ldr	r3, [r3, #0]
   d6e12:	69db      	ldr	r3, [r3, #28]
   d6e14:	9301      	str	r3, [sp, #4]
   d6e16:	bd08      	pop	{r3, pc}
   d6e18:	00030238 	.word	0x00030238

000d6e1c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6e1c:	b508      	push	{r3, lr}
   d6e1e:	4b02      	ldr	r3, [pc, #8]	; (d6e28 <sock_connect+0xc>)
   d6e20:	681b      	ldr	r3, [r3, #0]
   d6e22:	6a1b      	ldr	r3, [r3, #32]
   d6e24:	9301      	str	r3, [sp, #4]
   d6e26:	bd08      	pop	{r3, pc}
   d6e28:	00030238 	.word	0x00030238

000d6e2c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6e2c:	b508      	push	{r3, lr}
   d6e2e:	4b02      	ldr	r3, [pc, #8]	; (d6e38 <sock_recv+0xc>)
   d6e30:	681b      	ldr	r3, [r3, #0]
   d6e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e34:	9301      	str	r3, [sp, #4]
   d6e36:	bd08      	pop	{r3, pc}
   d6e38:	00030238 	.word	0x00030238

000d6e3c <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d6e3c:	b508      	push	{r3, lr}
   d6e3e:	4b02      	ldr	r3, [pc, #8]	; (d6e48 <sock_recvfrom+0xc>)
   d6e40:	681b      	ldr	r3, [r3, #0]
   d6e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e44:	9301      	str	r3, [sp, #4]
   d6e46:	bd08      	pop	{r3, pc}
   d6e48:	00030238 	.word	0x00030238

000d6e4c <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6e4c:	b508      	push	{r3, lr}
   d6e4e:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <sock_send+0xc>)
   d6e50:	681b      	ldr	r3, [r3, #0]
   d6e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e54:	9301      	str	r3, [sp, #4]
   d6e56:	bd08      	pop	{r3, pc}
   d6e58:	00030238 	.word	0x00030238

000d6e5c <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d6e5c:	b508      	push	{r3, lr}
   d6e5e:	4b02      	ldr	r3, [pc, #8]	; (d6e68 <sock_sendto+0xc>)
   d6e60:	681b      	ldr	r3, [r3, #0]
   d6e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e64:	9301      	str	r3, [sp, #4]
   d6e66:	bd08      	pop	{r3, pc}
   d6e68:	00030238 	.word	0x00030238

000d6e6c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	4b02      	ldr	r3, [pc, #8]	; (d6e78 <sock_socket+0xc>)
   d6e70:	681b      	ldr	r3, [r3, #0]
   d6e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6e74:	9301      	str	r3, [sp, #4]
   d6e76:	bd08      	pop	{r3, pc}
   d6e78:	00030238 	.word	0x00030238

000d6e7c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b02      	ldr	r3, [pc, #8]	; (d6e88 <hal_spi_init+0xc>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	69db      	ldr	r3, [r3, #28]
   d6e84:	9301      	str	r3, [sp, #4]
   d6e86:	bd08      	pop	{r3, pc}
   d6e88:	00030230 	.word	0x00030230

000d6e8c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6e8c:	b508      	push	{r3, lr}
   d6e8e:	4b02      	ldr	r3, [pc, #8]	; (d6e98 <hal_spi_is_enabled+0xc>)
   d6e90:	681b      	ldr	r3, [r3, #0]
   d6e92:	6a1b      	ldr	r3, [r3, #32]
   d6e94:	9301      	str	r3, [sp, #4]
   d6e96:	bd08      	pop	{r3, pc}
   d6e98:	00030230 	.word	0x00030230

000d6e9c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6e9c:	b508      	push	{r3, lr}
   d6e9e:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <hal_usart_init+0xc>)
   d6ea0:	681b      	ldr	r3, [r3, #0]
   d6ea2:	681b      	ldr	r3, [r3, #0]
   d6ea4:	9301      	str	r3, [sp, #4]
   d6ea6:	bd08      	pop	{r3, pc}
   d6ea8:	0003023c 	.word	0x0003023c

000d6eac <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6eac:	b508      	push	{r3, lr}
   d6eae:	4b02      	ldr	r3, [pc, #8]	; (d6eb8 <hal_usart_write+0xc>)
   d6eb0:	681b      	ldr	r3, [r3, #0]
   d6eb2:	68db      	ldr	r3, [r3, #12]
   d6eb4:	9301      	str	r3, [sp, #4]
   d6eb6:	bd08      	pop	{r3, pc}
   d6eb8:	0003023c 	.word	0x0003023c

000d6ebc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6ebc:	b508      	push	{r3, lr}
   d6ebe:	4b02      	ldr	r3, [pc, #8]	; (d6ec8 <hal_usart_available+0xc>)
   d6ec0:	681b      	ldr	r3, [r3, #0]
   d6ec2:	691b      	ldr	r3, [r3, #16]
   d6ec4:	9301      	str	r3, [sp, #4]
   d6ec6:	bd08      	pop	{r3, pc}
   d6ec8:	0003023c 	.word	0x0003023c

000d6ecc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6ecc:	b508      	push	{r3, lr}
   d6ece:	4b02      	ldr	r3, [pc, #8]	; (d6ed8 <hal_usart_read+0xc>)
   d6ed0:	681b      	ldr	r3, [r3, #0]
   d6ed2:	695b      	ldr	r3, [r3, #20]
   d6ed4:	9301      	str	r3, [sp, #4]
   d6ed6:	bd08      	pop	{r3, pc}
   d6ed8:	0003023c 	.word	0x0003023c

000d6edc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6edc:	b508      	push	{r3, lr}
   d6ede:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <hal_usart_peek+0xc>)
   d6ee0:	681b      	ldr	r3, [r3, #0]
   d6ee2:	699b      	ldr	r3, [r3, #24]
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	bd08      	pop	{r3, pc}
   d6ee8:	0003023c 	.word	0x0003023c

000d6eec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b02      	ldr	r3, [pc, #8]	; (d6ef8 <hal_usart_flush+0xc>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	69db      	ldr	r3, [r3, #28]
   d6ef4:	9301      	str	r3, [sp, #4]
   d6ef6:	bd08      	pop	{r3, pc}
   d6ef8:	0003023c 	.word	0x0003023c

000d6efc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6efc:	b508      	push	{r3, lr}
   d6efe:	4b02      	ldr	r3, [pc, #8]	; (d6f08 <hal_usart_is_enabled+0xc>)
   d6f00:	681b      	ldr	r3, [r3, #0]
   d6f02:	6a1b      	ldr	r3, [r3, #32]
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	bd08      	pop	{r3, pc}
   d6f08:	0003023c 	.word	0x0003023c

000d6f0c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <hal_usart_available_data_for_write+0xc>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f14:	9301      	str	r3, [sp, #4]
   d6f16:	bd08      	pop	{r3, pc}
   d6f18:	0003023c 	.word	0x0003023c

000d6f1c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <HAL_USB_USART_Init+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	681b      	ldr	r3, [r3, #0]
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	0003024c 	.word	0x0003024c

000d6f2c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <HAL_USB_USART_Begin+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	685b      	ldr	r3, [r3, #4]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	0003024c 	.word	0x0003024c

000d6f3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <HAL_USB_USART_Available_Data+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	691b      	ldr	r3, [r3, #16]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	0003024c 	.word	0x0003024c

000d6f4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	695b      	ldr	r3, [r3, #20]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	0003024c 	.word	0x0003024c

000d6f5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <HAL_USB_USART_Receive_Data+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	699b      	ldr	r3, [r3, #24]
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	0003024c 	.word	0x0003024c

000d6f6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <HAL_USB_USART_Send_Data+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	69db      	ldr	r3, [r3, #28]
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	0003024c 	.word	0x0003024c

000d6f7c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <HAL_USB_USART_Flush_Data+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	6a1b      	ldr	r3, [r3, #32]
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	0003024c 	.word	0x0003024c

000d6f8c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <panic_+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	00030260 	.word	0x00030260

000d6f9c <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <jsmn_init+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	00030260 	.word	0x00030260

000d6fac <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <jsmn_parse+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	00030260 	.word	0x00030260

000d6fbc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <log_message+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	00030260 	.word	0x00030260

000d6fcc <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <log_message_v+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	00030260 	.word	0x00030260

000d6fdc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <set_system_mode+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	685b      	ldr	r3, [r3, #4]
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	00030220 	.word	0x00030220

000d6fec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b02      	ldr	r3, [pc, #8]	; (d6ff8 <system_delay_ms+0xc>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	695b      	ldr	r3, [r3, #20]
   d6ff4:	9301      	str	r3, [sp, #4]
   d6ff6:	bd08      	pop	{r3, pc}
   d6ff8:	00030220 	.word	0x00030220

000d6ffc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6ffc:	b508      	push	{r3, lr}
   d6ffe:	4b02      	ldr	r3, [pc, #8]	; (d7008 <application_thread_current+0xc>)
   d7000:	681b      	ldr	r3, [r3, #0]
   d7002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	bd08      	pop	{r3, pc}
   d7008:	00030220 	.word	0x00030220

000d700c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d700c:	b508      	push	{r3, lr}
   d700e:	4b02      	ldr	r3, [pc, #8]	; (d7018 <application_thread_invoke+0xc>)
   d7010:	681b      	ldr	r3, [r3, #0]
   d7012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	00030220 	.word	0x00030220

000d701c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d701c:	b508      	push	{r3, lr}
   d701e:	4b03      	ldr	r3, [pc, #12]	; (d702c <system_ctrl_set_app_request_handler+0x10>)
   d7020:	681b      	ldr	r3, [r3, #0]
   d7022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7026:	9301      	str	r3, [sp, #4]
   d7028:	bd08      	pop	{r3, pc}
   d702a:	0000      	.short	0x0000
   d702c:	00030220 	.word	0x00030220

000d7030 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7030:	b508      	push	{r3, lr}
   d7032:	4b03      	ldr	r3, [pc, #12]	; (d7040 <system_ctrl_set_result+0x10>)
   d7034:	681b      	ldr	r3, [r3, #0]
   d7036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d703a:	9301      	str	r3, [sp, #4]
   d703c:	bd08      	pop	{r3, pc}
   d703e:	0000      	.short	0x0000
   d7040:	00030220 	.word	0x00030220

000d7044 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7044:	b508      	push	{r3, lr}
   d7046:	4b02      	ldr	r3, [pc, #8]	; (d7050 <spark_process+0xc>)
   d7048:	681b      	ldr	r3, [r3, #0]
   d704a:	689b      	ldr	r3, [r3, #8]
   d704c:	9301      	str	r3, [sp, #4]
   d704e:	bd08      	pop	{r3, pc}
   d7050:	00030244 	.word	0x00030244

000d7054 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7054:	b508      	push	{r3, lr}
   d7056:	4b02      	ldr	r3, [pc, #8]	; (d7060 <spark_cloud_flag_connected+0xc>)
   d7058:	681b      	ldr	r3, [r3, #0]
   d705a:	695b      	ldr	r3, [r3, #20]
   d705c:	9301      	str	r3, [sp, #4]
   d705e:	bd08      	pop	{r3, pc}
   d7060:	00030244 	.word	0x00030244

000d7064 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7064:	b508      	push	{r3, lr}
   d7066:	4b02      	ldr	r3, [pc, #8]	; (d7070 <spark_deviceID+0xc>)
   d7068:	681b      	ldr	r3, [r3, #0]
   d706a:	69db      	ldr	r3, [r3, #28]
   d706c:	9301      	str	r3, [sp, #4]
   d706e:	bd08      	pop	{r3, pc}
   d7070:	00030244 	.word	0x00030244

000d7074 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7074:	b508      	push	{r3, lr}
   d7076:	4b02      	ldr	r3, [pc, #8]	; (d7080 <spark_send_event+0xc>)
   d7078:	681b      	ldr	r3, [r3, #0]
   d707a:	6a1b      	ldr	r3, [r3, #32]
   d707c:	9301      	str	r3, [sp, #4]
   d707e:	bd08      	pop	{r3, pc}
   d7080:	00030244 	.word	0x00030244

000d7084 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7084:	b508      	push	{r3, lr}
   d7086:	4b02      	ldr	r3, [pc, #8]	; (d7090 <spark_subscribe+0xc>)
   d7088:	681b      	ldr	r3, [r3, #0]
   d708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d708c:	9301      	str	r3, [sp, #4]
   d708e:	bd08      	pop	{r3, pc}
   d7090:	00030244 	.word	0x00030244

000d7094 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7094:	b508      	push	{r3, lr}
   d7096:	4b02      	ldr	r3, [pc, #8]	; (d70a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7098:	681b      	ldr	r3, [r3, #0]
   d709a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d709c:	9301      	str	r3, [sp, #4]
   d709e:	bd08      	pop	{r3, pc}
   d70a0:	00030244 	.word	0x00030244

000d70a4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d70a4:	b508      	push	{r3, lr}
   d70a6:	4b02      	ldr	r3, [pc, #8]	; (d70b0 <network_connect+0xc>)
   d70a8:	681b      	ldr	r3, [r3, #0]
   d70aa:	685b      	ldr	r3, [r3, #4]
   d70ac:	9301      	str	r3, [sp, #4]
   d70ae:	bd08      	pop	{r3, pc}
   d70b0:	00030240 	.word	0x00030240

000d70b4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d70b4:	b508      	push	{r3, lr}
   d70b6:	4b02      	ldr	r3, [pc, #8]	; (d70c0 <network_connecting+0xc>)
   d70b8:	681b      	ldr	r3, [r3, #0]
   d70ba:	689b      	ldr	r3, [r3, #8]
   d70bc:	9301      	str	r3, [sp, #4]
   d70be:	bd08      	pop	{r3, pc}
   d70c0:	00030240 	.word	0x00030240

000d70c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d70c4:	b508      	push	{r3, lr}
   d70c6:	4b02      	ldr	r3, [pc, #8]	; (d70d0 <network_disconnect+0xc>)
   d70c8:	681b      	ldr	r3, [r3, #0]
   d70ca:	68db      	ldr	r3, [r3, #12]
   d70cc:	9301      	str	r3, [sp, #4]
   d70ce:	bd08      	pop	{r3, pc}
   d70d0:	00030240 	.word	0x00030240

000d70d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d70d4:	b508      	push	{r3, lr}
   d70d6:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <network_ready+0xc>)
   d70d8:	681b      	ldr	r3, [r3, #0]
   d70da:	691b      	ldr	r3, [r3, #16]
   d70dc:	9301      	str	r3, [sp, #4]
   d70de:	bd08      	pop	{r3, pc}
   d70e0:	00030240 	.word	0x00030240

000d70e4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d70e4:	b508      	push	{r3, lr}
   d70e6:	4b02      	ldr	r3, [pc, #8]	; (d70f0 <network_on+0xc>)
   d70e8:	681b      	ldr	r3, [r3, #0]
   d70ea:	695b      	ldr	r3, [r3, #20]
   d70ec:	9301      	str	r3, [sp, #4]
   d70ee:	bd08      	pop	{r3, pc}
   d70f0:	00030240 	.word	0x00030240

000d70f4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d70f4:	b508      	push	{r3, lr}
   d70f6:	4b02      	ldr	r3, [pc, #8]	; (d7100 <network_off+0xc>)
   d70f8:	681b      	ldr	r3, [r3, #0]
   d70fa:	699b      	ldr	r3, [r3, #24]
   d70fc:	9301      	str	r3, [sp, #4]
   d70fe:	bd08      	pop	{r3, pc}
   d7100:	00030240 	.word	0x00030240

000d7104 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7104:	b508      	push	{r3, lr}
   d7106:	4b02      	ldr	r3, [pc, #8]	; (d7110 <network_listen+0xc>)
   d7108:	681b      	ldr	r3, [r3, #0]
   d710a:	69db      	ldr	r3, [r3, #28]
   d710c:	9301      	str	r3, [sp, #4]
   d710e:	bd08      	pop	{r3, pc}
   d7110:	00030240 	.word	0x00030240

000d7114 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7114:	b508      	push	{r3, lr}
   d7116:	4b02      	ldr	r3, [pc, #8]	; (d7120 <network_listening+0xc>)
   d7118:	681b      	ldr	r3, [r3, #0]
   d711a:	6a1b      	ldr	r3, [r3, #32]
   d711c:	9301      	str	r3, [sp, #4]
   d711e:	bd08      	pop	{r3, pc}
   d7120:	00030240 	.word	0x00030240

000d7124 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7124:	b508      	push	{r3, lr}
   d7126:	4b02      	ldr	r3, [pc, #8]	; (d7130 <network_set_listen_timeout+0xc>)
   d7128:	681b      	ldr	r3, [r3, #0]
   d712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d712c:	9301      	str	r3, [sp, #4]
   d712e:	bd08      	pop	{r3, pc}
   d7130:	00030240 	.word	0x00030240

000d7134 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7134:	b508      	push	{r3, lr}
   d7136:	4b02      	ldr	r3, [pc, #8]	; (d7140 <network_get_listen_timeout+0xc>)
   d7138:	681b      	ldr	r3, [r3, #0]
   d713a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d713c:	9301      	str	r3, [sp, #4]
   d713e:	bd08      	pop	{r3, pc}
   d7140:	00030240 	.word	0x00030240

000d7144 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7144:	b508      	push	{r3, lr}
   d7146:	4b02      	ldr	r3, [pc, #8]	; (d7150 <network_is_on+0xc>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d714c:	9301      	str	r3, [sp, #4]
   d714e:	bd08      	pop	{r3, pc}
   d7150:	00030240 	.word	0x00030240

000d7154 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7154:	b508      	push	{r3, lr}
   d7156:	4b02      	ldr	r3, [pc, #8]	; (d7160 <network_is_off+0xc>)
   d7158:	681b      	ldr	r3, [r3, #0]
   d715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d715c:	9301      	str	r3, [sp, #4]
   d715e:	bd08      	pop	{r3, pc}
   d7160:	00030240 	.word	0x00030240

000d7164 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7164:	b508      	push	{r3, lr}
   d7166:	4b02      	ldr	r3, [pc, #8]	; (d7170 <malloc+0xc>)
   d7168:	681b      	ldr	r3, [r3, #0]
   d716a:	681b      	ldr	r3, [r3, #0]
   d716c:	9301      	str	r3, [sp, #4]
   d716e:	bd08      	pop	{r3, pc}
   d7170:	0003021c 	.word	0x0003021c

000d7174 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7174:	b508      	push	{r3, lr}
   d7176:	4b02      	ldr	r3, [pc, #8]	; (d7180 <free+0xc>)
   d7178:	681b      	ldr	r3, [r3, #0]
   d717a:	685b      	ldr	r3, [r3, #4]
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	bd08      	pop	{r3, pc}
   d7180:	0003021c 	.word	0x0003021c

000d7184 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7184:	b508      	push	{r3, lr}
   d7186:	4b02      	ldr	r3, [pc, #8]	; (d7190 <realloc+0xc>)
   d7188:	681b      	ldr	r3, [r3, #0]
   d718a:	689b      	ldr	r3, [r3, #8]
   d718c:	9301      	str	r3, [sp, #4]
   d718e:	bd08      	pop	{r3, pc}
   d7190:	0003021c 	.word	0x0003021c

000d7194 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7194:	b508      	push	{r3, lr}
   d7196:	4b02      	ldr	r3, [pc, #8]	; (d71a0 <sprintf+0xc>)
   d7198:	681b      	ldr	r3, [r3, #0]
   d719a:	68db      	ldr	r3, [r3, #12]
   d719c:	9301      	str	r3, [sp, #4]
   d719e:	bd08      	pop	{r3, pc}
   d71a0:	0003021c 	.word	0x0003021c

000d71a4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d71a4:	b508      	push	{r3, lr}
   d71a6:	4b02      	ldr	r3, [pc, #8]	; (d71b0 <abort+0xc>)
   d71a8:	681b      	ldr	r3, [r3, #0]
   d71aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d71ac:	9301      	str	r3, [sp, #4]
   d71ae:	bd08      	pop	{r3, pc}
   d71b0:	0003021c 	.word	0x0003021c

000d71b4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d71b4:	b508      	push	{r3, lr}
   d71b6:	4b02      	ldr	r3, [pc, #8]	; (d71c0 <_malloc_r+0xc>)
   d71b8:	681b      	ldr	r3, [r3, #0]
   d71ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d71bc:	9301      	str	r3, [sp, #4]
   d71be:	bd08      	pop	{r3, pc}
   d71c0:	0003021c 	.word	0x0003021c

000d71c4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d71c4:	b508      	push	{r3, lr}
   d71c6:	4b02      	ldr	r3, [pc, #8]	; (d71d0 <__errno+0xc>)
   d71c8:	681b      	ldr	r3, [r3, #0]
   d71ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d71cc:	9301      	str	r3, [sp, #4]
   d71ce:	bd08      	pop	{r3, pc}
   d71d0:	0003021c 	.word	0x0003021c

000d71d4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d71d4:	b508      	push	{r3, lr}
   d71d6:	4b02      	ldr	r3, [pc, #8]	; (d71e0 <newlib_impure_ptr_callback+0xc>)
   d71d8:	681b      	ldr	r3, [r3, #0]
   d71da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d71dc:	9301      	str	r3, [sp, #4]
   d71de:	bd08      	pop	{r3, pc}
   d71e0:	0003021c 	.word	0x0003021c

000d71e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d71e4:	2100      	movs	r1, #0
   d71e6:	f7ff bf01 	b.w	d6fec <system_delay_ms>

000d71ea <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d71ea:	b510      	push	{r4, lr}
      if (_M_empty())
   d71ec:	6883      	ldr	r3, [r0, #8]
   d71ee:	4604      	mov	r4, r0
   d71f0:	b90b      	cbnz	r3, d71f6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d71f2:	f002 faf6 	bl	d97e2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d71f6:	68c3      	ldr	r3, [r0, #12]
   d71f8:	4798      	blx	r3
      if (_M_manager)
   d71fa:	68a3      	ldr	r3, [r4, #8]
   d71fc:	b11b      	cbz	r3, d7206 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d71fe:	2203      	movs	r2, #3
   d7200:	4621      	mov	r1, r4
   d7202:	4620      	mov	r0, r4
   d7204:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7206:	4620      	mov	r0, r4
   d7208:	2110      	movs	r1, #16
}
   d720a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d720e:	f002 ba30 	b.w	d9672 <_ZdlPvj>

000d7212 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7212:	b510      	push	{r4, lr}
   d7214:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7216:	6800      	ldr	r0, [r0, #0]
   d7218:	b108      	cbz	r0, d721e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d721a:	f7ff fd0f 	bl	d6c3c <os_mutex_recursive_destroy>
    }
   d721e:	4620      	mov	r0, r4
   d7220:	bd10      	pop	{r4, pc}

000d7222 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7222:	b513      	push	{r0, r1, r4, lr}
   d7224:	460b      	mov	r3, r1
   d7226:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7228:	e9d0 0100 	ldrd	r0, r1, [r0]
   d722c:	466c      	mov	r4, sp
   d722e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7232:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7236:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d723a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d723e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7242:	b002      	add	sp, #8
   d7244:	bd10      	pop	{r4, pc}
	...

000d7248 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7248:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d724a:	4c06      	ldr	r4, [pc, #24]	; (d7264 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d724c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d724e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7250:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7252:	f7ff fceb 	bl	d6c2c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7256:	4620      	mov	r0, r4
   d7258:	4a03      	ldr	r2, [pc, #12]	; (d7268 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d725a:	4904      	ldr	r1, [pc, #16]	; (d726c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d725c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7260:	f002 ba02 	b.w	d9668 <__aeabi_atexit>
   d7264:	2003e61c 	.word	0x2003e61c
   d7268:	2003e440 	.word	0x2003e440
   d726c:	000d7213 	.word	0x000d7213

000d7270 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7270:	2200      	movs	r2, #0
   d7272:	6840      	ldr	r0, [r0, #4]
   d7274:	4611      	mov	r1, r2
   d7276:	f7ff bf2d 	b.w	d70d4 <network_ready>

000d727a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d727a:	2200      	movs	r2, #0
   d727c:	6840      	ldr	r0, [r0, #4]
   d727e:	4611      	mov	r1, r2
   d7280:	f7ff bf48 	b.w	d7114 <network_listening>

000d7284 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7284:	2200      	movs	r2, #0
   d7286:	6840      	ldr	r0, [r0, #4]
   d7288:	4611      	mov	r1, r2
   d728a:	f7ff bf53 	b.w	d7134 <network_get_listen_timeout>

000d728e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d728e:	6840      	ldr	r0, [r0, #4]
   d7290:	2200      	movs	r2, #0
   d7292:	f7ff bf47 	b.w	d7124 <network_set_listen_timeout>

000d7296 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7296:	6840      	ldr	r0, [r0, #4]
   d7298:	2200      	movs	r2, #0
   d729a:	f081 0101 	eor.w	r1, r1, #1
   d729e:	f7ff bf31 	b.w	d7104 <network_listen>

000d72a2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d72a2:	2300      	movs	r3, #0
   d72a4:	6840      	ldr	r0, [r0, #4]
   d72a6:	461a      	mov	r2, r3
   d72a8:	4619      	mov	r1, r3
   d72aa:	f7ff bf23 	b.w	d70f4 <network_off>

000d72ae <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d72ae:	2300      	movs	r3, #0
   d72b0:	6840      	ldr	r0, [r0, #4]
   d72b2:	461a      	mov	r2, r3
   d72b4:	4619      	mov	r1, r3
   d72b6:	f7ff bf15 	b.w	d70e4 <network_on>

000d72ba <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d72ba:	2200      	movs	r2, #0
   d72bc:	6840      	ldr	r0, [r0, #4]
   d72be:	4611      	mov	r1, r2
   d72c0:	f7ff bef8 	b.w	d70b4 <network_connecting>

000d72c4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72c4:	6840      	ldr	r0, [r0, #4]
   d72c6:	2200      	movs	r2, #0
   d72c8:	2102      	movs	r1, #2
   d72ca:	f7ff befb 	b.w	d70c4 <network_disconnect>

000d72ce <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d72ce:	2300      	movs	r3, #0
   d72d0:	6840      	ldr	r0, [r0, #4]
   d72d2:	461a      	mov	r2, r3
   d72d4:	f7ff bee6 	b.w	d70a4 <network_connect>

000d72d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d72d8:	4b08      	ldr	r3, [pc, #32]	; (d72fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d72da:	b510      	push	{r4, lr}
   d72dc:	2428      	movs	r4, #40	; 0x28
   d72de:	4622      	mov	r2, r4
   d72e0:	4618      	mov	r0, r3
   d72e2:	2100      	movs	r1, #0
   d72e4:	f003 fa7c 	bl	da7e0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d72e8:	4b05      	ldr	r3, [pc, #20]	; (d7300 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d72ea:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d72ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d72f0:	6042      	str	r2, [r0, #4]
   d72f2:	2204      	movs	r2, #4
   d72f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d72f6:	4a03      	ldr	r2, [pc, #12]	; (d7304 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d72f8:	601a      	str	r2, [r3, #0]
   d72fa:	bd10      	pop	{r4, pc}
   d72fc:	2003e628 	.word	0x2003e628
   d7300:	2003e620 	.word	0x2003e620
   d7304:	000dcf20 	.word	0x000dcf20

000d7308 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7308:	4770      	bx	lr

000d730a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d730a:	2000      	movs	r0, #0
   d730c:	4770      	bx	lr

000d730e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d730e:	b510      	push	{r4, lr}
   d7310:	2110      	movs	r1, #16
   d7312:	4604      	mov	r4, r0
   d7314:	f002 f9ad 	bl	d9672 <_ZdlPvj>
   d7318:	4620      	mov	r0, r4
   d731a:	bd10      	pop	{r4, pc}

000d731c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d731c:	b508      	push	{r3, lr}
      { delete this; }
   d731e:	f7ff fff6 	bl	d730e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7322:	bd08      	pop	{r3, pc}

000d7324 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7324:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7326:	2200      	movs	r2, #0
   d7328:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d732c:	6002      	str	r2, [r0, #0]
   d732e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7330:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7332:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7334:	680c      	ldr	r4, [r1, #0]
   d7336:	8085      	strh	r5, [r0, #4]
   d7338:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d733a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d733c:	bd30      	pop	{r4, r5, pc}

000d733e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d733e:	b510      	push	{r4, lr}
   d7340:	4604      	mov	r4, r0
    free((void*)msg_);
   d7342:	6800      	ldr	r0, [r0, #0]
   d7344:	f7ff ff16 	bl	d7174 <free>
}
   d7348:	4620      	mov	r0, r4
   d734a:	bd10      	pop	{r4, pc}

000d734c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d734c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d734e:	68c4      	ldr	r4, [r0, #12]
   d7350:	b1f4      	cbz	r4, d7390 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7352:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7354:	2b02      	cmp	r3, #2
   d7356:	d103      	bne.n	d7360 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7358:	f104 000c 	add.w	r0, r4, #12
   d735c:	f7ff ffef 	bl	d733e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7360:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7362:	b135      	cbz	r5, d7372 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7364:	4628      	mov	r0, r5
   d7366:	f7fe f821 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
   d736a:	2110      	movs	r1, #16
   d736c:	4628      	mov	r0, r5
   d736e:	f002 f980 	bl	d9672 <_ZdlPvj>
   d7372:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7374:	b135      	cbz	r5, d7384 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7376:	4628      	mov	r0, r5
   d7378:	f7fe f818 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
   d737c:	2110      	movs	r1, #16
   d737e:	4628      	mov	r0, r5
   d7380:	f002 f977 	bl	d9672 <_ZdlPvj>
   d7384:	4620      	mov	r0, r4
   d7386:	2114      	movs	r1, #20
   d7388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d738c:	f002 b971 	b.w	d9672 <_ZdlPvj>
   d7390:	bd38      	pop	{r3, r4, r5, pc}

000d7392 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7392:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7394:	460e      	mov	r6, r1
   d7396:	4604      	mov	r4, r0
   d7398:	f856 3b04 	ldr.w	r3, [r6], #4
   d739c:	9300      	str	r3, [sp, #0]
   d739e:	460d      	mov	r5, r1
   d73a0:	a801      	add	r0, sp, #4
   d73a2:	4631      	mov	r1, r6
   d73a4:	f7fd fa56 	bl	d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d73a8:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d73aa:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d73ac:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d73ae:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d73b0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d73b2:	2300      	movs	r3, #0
   d73b4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d73b6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d73b8:	f7fd f84a 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73bc:	4630      	mov	r0, r6
   d73be:	f7fd f847 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d73c2:	4628      	mov	r0, r5
   d73c4:	2108      	movs	r1, #8
   d73c6:	f002 f954 	bl	d9672 <_ZdlPvj>
        return p;
    }
   d73ca:	4620      	mov	r0, r4
   d73cc:	b002      	add	sp, #8
   d73ce:	bd70      	pop	{r4, r5, r6, pc}

000d73d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d73d0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d73d2:	b510      	push	{r4, lr}
      if (_M_empty())
   d73d4:	b90a      	cbnz	r2, d73da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d73d6:	f002 fa04 	bl	d97e2 <_ZSt25__throw_bad_function_callv>
    }
   d73da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73de:	68c3      	ldr	r3, [r0, #12]
   d73e0:	4718      	bx	r3

000d73e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d73e2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d73e4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d73e6:	f100 0110 	add.w	r1, r0, #16
   d73ea:	f7ff fff1 	bl	d73d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d73ee:	bd08      	pop	{r3, pc}

000d73f0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d73f0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d73f2:	b510      	push	{r4, lr}
      if (_M_empty())
   d73f4:	b90a      	cbnz	r2, d73fa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d73f6:	f002 f9f4 	bl	d97e2 <_ZSt25__throw_bad_function_callv>
    }
   d73fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d73fe:	68c3      	ldr	r3, [r0, #12]
   d7400:	4718      	bx	r3

000d7402 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7402:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7404:	6800      	ldr	r0, [r0, #0]
   d7406:	f100 0110 	add.w	r1, r0, #16
   d740a:	f7ff fff1 	bl	d73f0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d740e:	bd08      	pop	{r3, pc}

000d7410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7410:	b538      	push	{r3, r4, r5, lr}
   d7412:	2300      	movs	r3, #0
   d7414:	4604      	mov	r4, r0
   d7416:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7418:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d741a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d741c:	f7fc fe3b 	bl	d4096 <_Znwj>
   d7420:	b128      	cbz	r0, d742e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7422:	2301      	movs	r3, #1
   d7424:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7428:	4b02      	ldr	r3, [pc, #8]	; (d7434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d742a:	6003      	str	r3, [r0, #0]
   d742c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d742e:	6020      	str	r0, [r4, #0]
	}
   d7430:	4620      	mov	r0, r4
   d7432:	bd38      	pop	{r3, r4, r5, pc}
   d7434:	000dcf5c 	.word	0x000dcf5c

000d7438 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7438:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d743a:	2300      	movs	r3, #0
   d743c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d743e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7440:	4604      	mov	r4, r0
   d7442:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7444:	b12b      	cbz	r3, d7452 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7446:	2202      	movs	r2, #2
   d7448:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d744a:	68eb      	ldr	r3, [r5, #12]
   d744c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d744e:	68ab      	ldr	r3, [r5, #8]
   d7450:	60a3      	str	r3, [r4, #8]
    }
   d7452:	4620      	mov	r0, r4
   d7454:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7458 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7458:	b5f0      	push	{r4, r5, r6, r7, lr}
   d745a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d745c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d745e:	4668      	mov	r0, sp
   d7460:	f7ff ff60 	bl	d7324 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7464:	f04f 0302 	mov.w	r3, #2
   d7468:	e8d4 2f4f 	ldrexb	r2, [r4]
   d746c:	2a00      	cmp	r2, #0
   d746e:	d103      	bne.n	d7478 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7470:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7474:	2900      	cmp	r1, #0
   d7476:	d1f7      	bne.n	d7468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7478:	d125      	bne.n	d74c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d747a:	f104 050c 	add.w	r5, r4, #12
   d747e:	4669      	mov	r1, sp
   d7480:	4628      	mov	r0, r5
   d7482:	f7ff ff4f 	bl	d7324 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d7486:	f3bf 8f5b 	dmb	ish
   d748a:	2301      	movs	r3, #1
   d748c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d748e:	2000      	movs	r0, #0
   d7490:	f104 0308 	add.w	r3, r4, #8
   d7494:	f3bf 8f5b 	dmb	ish
   d7498:	e853 6f00 	ldrex	r6, [r3]
   d749c:	e843 0200 	strex	r2, r0, [r3]
   d74a0:	2a00      	cmp	r2, #0
   d74a2:	d1f9      	bne.n	d7498 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d74a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d74a8:	b16e      	cbz	r6, d74c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d74aa:	f7ff fda7 	bl	d6ffc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d74ae:	b178      	cbz	r0, d74d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d74b0:	4629      	mov	r1, r5
   d74b2:	4630      	mov	r0, r6
   d74b4:	f7ff ff8c 	bl	d73d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d74b8:	4630      	mov	r0, r6
   d74ba:	f7fd ff77 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d74be:	2110      	movs	r1, #16
   d74c0:	4630      	mov	r0, r6
   d74c2:	f002 f8d6 	bl	d9672 <_ZdlPvj>
        p_->setError(std::move(error));
   d74c6:	4668      	mov	r0, sp
   d74c8:	f7ff ff39 	bl	d733e <_ZN8particle5ErrorD1Ev>
    }
   d74cc:	b009      	add	sp, #36	; 0x24
   d74ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d74d0:	4631      	mov	r1, r6
   d74d2:	a802      	add	r0, sp, #8
   d74d4:	f7ff ffb0 	bl	d7438 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d74d8:	68e0      	ldr	r0, [r4, #12]
   d74da:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d74de:	b108      	cbz	r0, d74e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d74e0:	f003 f9da 	bl	da898 <strdup>
        type_(type) {
   d74e4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d74e6:	2010      	movs	r0, #16
   d74e8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d74ec:	f7fc fdd3 	bl	d4096 <_Znwj>
   d74f0:	4605      	mov	r5, r0
   d74f2:	b1e8      	cbz	r0, d7530 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d74f4:	2700      	movs	r7, #0
   d74f6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d74f8:	2018      	movs	r0, #24
   d74fa:	f7fc fdcc 	bl	d4096 <_Znwj>
   d74fe:	4604      	mov	r4, r0
   d7500:	b188      	cbz	r0, d7526 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7502:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7504:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7506:	a802      	add	r0, sp, #8
   d7508:	f7ff fe8b 	bl	d7222 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d750c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d750e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7510:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7512:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7514:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7516:	a906      	add	r1, sp, #24
   d7518:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d751a:	60e3      	str	r3, [r4, #12]
   d751c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7520:	9205      	str	r2, [sp, #20]
   d7522:	f7ff feff 	bl	d7324 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7526:	4b08      	ldr	r3, [pc, #32]	; (d7548 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7528:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d752a:	4b08      	ldr	r3, [pc, #32]	; (d754c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d752c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d752e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7530:	a806      	add	r0, sp, #24
   d7532:	f7ff ff04 	bl	d733e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7536:	a802      	add	r0, sp, #8
   d7538:	f7fd ff38 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d753c:	2200      	movs	r2, #0
   d753e:	4629      	mov	r1, r5
   d7540:	4803      	ldr	r0, [pc, #12]	; (d7550 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7542:	f7ff fd63 	bl	d700c <application_thread_invoke>
   d7546:	e7b7      	b.n	d74b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7548:	000d73e3 	.word	0x000d73e3
   d754c:	000d7679 	.word	0x000d7679
   d7550:	000d71eb 	.word	0x000d71eb

000d7554 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7558:	b08a      	sub	sp, #40	; 0x28
   d755a:	4605      	mov	r5, r0
   d755c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7560:	460c      	mov	r4, r1
   d7562:	4617      	mov	r7, r2
   d7564:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7566:	f7ff fd75 	bl	d7054 <spark_cloud_flag_connected>
   d756a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d756c:	4682      	mov	sl, r0
   d756e:	bb38      	cbnz	r0, d75c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7570:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7574:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7576:	a905      	add	r1, sp, #20
   d7578:	4630      	mov	r0, r6
   d757a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d757e:	f7ff fed1 	bl	d7324 <_ZN8particle5ErrorC1EOS0_>
   d7582:	2014      	movs	r0, #20
   d7584:	f7fc fd87 	bl	d4096 <_Znwj>
   d7588:	4604      	mov	r4, r0
   d758a:	b148      	cbz	r0, d75a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d758c:	2302      	movs	r3, #2
   d758e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7590:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7592:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7596:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d7598:	4631      	mov	r1, r6
   d759a:	300c      	adds	r0, #12
   d759c:	f7ff fec2 	bl	d7324 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d75a0:	4628      	mov	r0, r5
	: __shared_count(__p)
   d75a2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d75a4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d75a8:	f7ff ff32 	bl	d7410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d75ac:	4630      	mov	r0, r6
   d75ae:	f7ff fec6 	bl	d733e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d75b2:	a805      	add	r0, sp, #20
   d75b4:	f7ff fec3 	bl	d733e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d75b8:	4628      	mov	r0, r5
   d75ba:	b00a      	add	sp, #40	; 0x28
   d75bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d75c0:	230c      	movs	r3, #12
   d75c2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d75c6:	2014      	movs	r0, #20
   d75c8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d75cc:	9307      	str	r3, [sp, #28]
   d75ce:	f7fc fd62 	bl	d4096 <_Znwj>
   d75d2:	4601      	mov	r1, r0
   d75d4:	b128      	cbz	r0, d75e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d75d6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d75da:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d75de:	f880 a001 	strb.w	sl, [r0, #1]
   d75e2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d75e4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d75e6:	f7ff ff13 	bl	d7410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d75ea:	4b22      	ldr	r3, [pc, #136]	; (d7674 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d75ec:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d75ee:	2008      	movs	r0, #8
   d75f0:	f7fc fd51 	bl	d4096 <_Znwj>
   d75f4:	4682      	mov	sl, r0
   d75f6:	b128      	cbz	r0, d7604 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d75f8:	9b03      	ldr	r3, [sp, #12]
   d75fa:	f840 3b04 	str.w	r3, [r0], #4
   d75fe:	a904      	add	r1, sp, #16
   d7600:	f7fd f928 	bl	d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7604:	9600      	str	r6, [sp, #0]
   d7606:	fa5f f389 	uxtb.w	r3, r9
   d760a:	4642      	mov	r2, r8
   d760c:	4639      	mov	r1, r7
   d760e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d7610:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7614:	f7ff fd2e 	bl	d7074 <spark_send_event>
   d7618:	b9b8      	cbnz	r0, d764a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d761a:	9b03      	ldr	r3, [sp, #12]
   d761c:	785b      	ldrb	r3, [r3, #1]
   d761e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7622:	b993      	cbnz	r3, d764a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7624:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d7628:	a905      	add	r1, sp, #20
   d762a:	a803      	add	r0, sp, #12
   d762c:	9205      	str	r2, [sp, #20]
   d762e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7632:	f7ff ff11 	bl	d7458 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7636:	a805      	add	r0, sp, #20
   d7638:	f7ff fe81 	bl	d733e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d763c:	a805      	add	r0, sp, #20
   d763e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7640:	f7ff fea7 	bl	d7392 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7644:	a806      	add	r0, sp, #24
   d7646:	f7fc ff03 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d764a:	9b03      	ldr	r3, [sp, #12]
   d764c:	9305      	str	r3, [sp, #20]
   d764e:	a904      	add	r1, sp, #16
   d7650:	a806      	add	r0, sp, #24
   d7652:	f7fd f8ff 	bl	d4854 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7656:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7658:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d765a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d765c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d765e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d7660:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d7662:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7664:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d7666:	f7fc fef3 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d766a:	a804      	add	r0, sp, #16
   d766c:	f7fc fef0 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d7670:	e7a2      	b.n	d75b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d7672:	bf00      	nop
   d7674:	000d773d 	.word	0x000d773d

000d7678 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d7678:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d767a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d767c:	4605      	mov	r5, r0
	  switch (__op)
   d767e:	d007      	beq.n	d7690 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d7680:	2a03      	cmp	r2, #3
   d7682:	d018      	beq.n	d76b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d7684:	2a01      	cmp	r2, #1
   d7686:	d101      	bne.n	d768c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7688:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d768a:	6003      	str	r3, [r0, #0]
	}
   d768c:	2000      	movs	r0, #0
   d768e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7690:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7692:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7694:	f7fc fcff 	bl	d4096 <_Znwj>
   d7698:	4604      	mov	r4, r0
   d769a:	b150      	cbz	r0, d76b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d769c:	4631      	mov	r1, r6
   d769e:	f7ff fecb 	bl	d7438 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d76a2:	6930      	ldr	r0, [r6, #16]
   d76a4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d76a8:	b108      	cbz	r0, d76ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d76aa:	f003 f8f5 	bl	da898 <strdup>
        type_(type) {
   d76ae:	6120      	str	r0, [r4, #16]
   d76b0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d76b2:	602c      	str	r4, [r5, #0]
	}
   d76b4:	e7ea      	b.n	d768c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d76b6:	6804      	ldr	r4, [r0, #0]
   d76b8:	2c00      	cmp	r4, #0
   d76ba:	d0e7      	beq.n	d768c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d76bc:	f104 0010 	add.w	r0, r4, #16
   d76c0:	f7ff fe3d 	bl	d733e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d76c4:	4620      	mov	r0, r4
   d76c6:	f7fd fe71 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d76ca:	2118      	movs	r1, #24
   d76cc:	4620      	mov	r0, r4
   d76ce:	f001 ffd0 	bl	d9672 <_ZdlPvj>
   d76d2:	e7db      	b.n	d768c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d76d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d76d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d76d6:	2300      	movs	r3, #0
   d76d8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d76da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d76dc:	4604      	mov	r4, r0
   d76de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d76e0:	b12b      	cbz	r3, d76ee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d76e2:	2202      	movs	r2, #2
   d76e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d76e6:	68eb      	ldr	r3, [r5, #12]
   d76e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d76ea:	68ab      	ldr	r3, [r5, #8]
   d76ec:	60a3      	str	r3, [r4, #8]
    }
   d76ee:	4620      	mov	r0, r4
   d76f0:	bd38      	pop	{r3, r4, r5, pc}

000d76f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d76f2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d76f4:	b570      	push	{r4, r5, r6, lr}
   d76f6:	4604      	mov	r4, r0
	  switch (__op)
   d76f8:	d007      	beq.n	d770a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d76fa:	2a03      	cmp	r2, #3
   d76fc:	d012      	beq.n	d7724 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d76fe:	2a01      	cmp	r2, #1
   d7700:	d101      	bne.n	d7706 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7702:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7704:	6003      	str	r3, [r0, #0]
	}
   d7706:	2000      	movs	r0, #0
   d7708:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d770a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d770c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d770e:	f7fc fcc2 	bl	d4096 <_Znwj>
   d7712:	4605      	mov	r5, r0
   d7714:	b120      	cbz	r0, d7720 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7716:	4631      	mov	r1, r6
   d7718:	f7ff ffdc 	bl	d76d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d771c:	7c33      	ldrb	r3, [r6, #16]
   d771e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7720:	6025      	str	r5, [r4, #0]
	}
   d7722:	e7f0      	b.n	d7706 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7724:	6804      	ldr	r4, [r0, #0]
   d7726:	2c00      	cmp	r4, #0
   d7728:	d0ed      	beq.n	d7706 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d772a:	4620      	mov	r0, r4
   d772c:	f7fd fe3e 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7730:	2114      	movs	r1, #20
   d7732:	4620      	mov	r0, r4
   d7734:	f001 ff9d 	bl	d9672 <_ZdlPvj>
   d7738:	e7e5      	b.n	d7706 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d773c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d773c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d773e:	b089      	sub	sp, #36	; 0x24
   d7740:	4604      	mov	r4, r0
   d7742:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7744:	a801      	add	r0, sp, #4
   d7746:	4611      	mov	r1, r2
   d7748:	f7ff fe23 	bl	d7392 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d774c:	b1a4      	cbz	r4, d7778 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d774e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7750:	b11d      	cbz	r5, d775a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7752:	4628      	mov	r0, r5
   d7754:	f003 f8a0 	bl	da898 <strdup>
   d7758:	4605      	mov	r5, r0
   d775a:	a801      	add	r0, sp, #4
   d775c:	a903      	add	r1, sp, #12
        type_(type) {
   d775e:	9503      	str	r5, [sp, #12]
   d7760:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7764:	f7ff fe78 	bl	d7458 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7768:	a803      	add	r0, sp, #12
   d776a:	f7ff fde8 	bl	d733e <_ZN8particle5ErrorD1Ev>
   d776e:	a802      	add	r0, sp, #8
   d7770:	f7fc fe6e 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7774:	b009      	add	sp, #36	; 0x24
   d7776:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7778:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d777a:	2301      	movs	r3, #1
   d777c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7780:	2a00      	cmp	r2, #0
   d7782:	d103      	bne.n	d778c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7784:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7788:	2900      	cmp	r1, #0
   d778a:	d1f7      	bne.n	d777c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d778c:	d1ef      	bne.n	d776e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d778e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7790:	f3bf 8f5b 	dmb	ish
   d7794:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7796:	1d2b      	adds	r3, r5, #4
   d7798:	f3bf 8f5b 	dmb	ish
   d779c:	e853 6f00 	ldrex	r6, [r3]
   d77a0:	e843 4200 	strex	r2, r4, [r3]
   d77a4:	2a00      	cmp	r2, #0
   d77a6:	d1f9      	bne.n	d779c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d77a8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d77ac:	2e00      	cmp	r6, #0
   d77ae:	d0de      	beq.n	d776e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d77b0:	4620      	mov	r0, r4
   d77b2:	f7ff fc23 	bl	d6ffc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d77b6:	4607      	mov	r7, r0
   d77b8:	b160      	cbz	r0, d77d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d77ba:	f105 010c 	add.w	r1, r5, #12
   d77be:	4630      	mov	r0, r6
   d77c0:	f7ff fe16 	bl	d73f0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d77c4:	4630      	mov	r0, r6
   d77c6:	f7fd fdf1 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d77ca:	2110      	movs	r1, #16
   d77cc:	4630      	mov	r0, r6
   d77ce:	f001 ff50 	bl	d9672 <_ZdlPvj>
   d77d2:	e7cc      	b.n	d776e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d77d4:	4631      	mov	r1, r6
   d77d6:	a803      	add	r0, sp, #12
   d77d8:	f7ff ff7c 	bl	d76d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d77dc:	7b2b      	ldrb	r3, [r5, #12]
   d77de:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d77e2:	2010      	movs	r0, #16
   d77e4:	f7fc fc57 	bl	d4096 <_Znwj>
   d77e8:	4605      	mov	r5, r0
   d77ea:	b1d0      	cbz	r0, d7822 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d77ec:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d77ee:	2014      	movs	r0, #20
   d77f0:	f7fc fc51 	bl	d4096 <_Znwj>
   d77f4:	4604      	mov	r4, r0
   d77f6:	b178      	cbz	r0, d7818 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d77f8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d77fa:	4601      	mov	r1, r0
   d77fc:	a803      	add	r0, sp, #12
   d77fe:	f7ff fd10 	bl	d7222 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7802:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7804:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7806:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7808:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d780a:	9205      	str	r2, [sp, #20]
   d780c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d780e:	60e3      	str	r3, [r4, #12]
   d7810:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7814:	9206      	str	r2, [sp, #24]
   d7816:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7818:	4b06      	ldr	r3, [pc, #24]	; (d7834 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d781a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d781c:	4b06      	ldr	r3, [pc, #24]	; (d7838 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d781e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7820:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d7822:	a803      	add	r0, sp, #12
   d7824:	f7fd fdc2 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7828:	2200      	movs	r2, #0
   d782a:	4629      	mov	r1, r5
   d782c:	4803      	ldr	r0, [pc, #12]	; (d783c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d782e:	f7ff fbed 	bl	d700c <application_thread_invoke>
   d7832:	e7c7      	b.n	d77c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7834:	000d7403 	.word	0x000d7403
   d7838:	000d76f3 	.word	0x000d76f3
   d783c:	000d71eb 	.word	0x000d71eb

000d7840 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7840:	2200      	movs	r2, #0
   d7842:	6840      	ldr	r0, [r0, #4]
   d7844:	4611      	mov	r1, r2
   d7846:	f7ff bc65 	b.w	d7114 <network_listening>

000d784a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d784a:	2200      	movs	r2, #0
   d784c:	6840      	ldr	r0, [r0, #4]
   d784e:	4611      	mov	r1, r2
   d7850:	f7ff bc70 	b.w	d7134 <network_get_listen_timeout>

000d7854 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7854:	6840      	ldr	r0, [r0, #4]
   d7856:	2200      	movs	r2, #0
   d7858:	f7ff bc64 	b.w	d7124 <network_set_listen_timeout>

000d785c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d785c:	6840      	ldr	r0, [r0, #4]
   d785e:	2200      	movs	r2, #0
   d7860:	f081 0101 	eor.w	r1, r1, #1
   d7864:	f7ff bc4e 	b.w	d7104 <network_listen>

000d7868 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7868:	2300      	movs	r3, #0
   d786a:	6840      	ldr	r0, [r0, #4]
   d786c:	461a      	mov	r2, r3
   d786e:	4619      	mov	r1, r3
   d7870:	f7ff bc40 	b.w	d70f4 <network_off>

000d7874 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7874:	2300      	movs	r3, #0
   d7876:	6840      	ldr	r0, [r0, #4]
   d7878:	461a      	mov	r2, r3
   d787a:	4619      	mov	r1, r3
   d787c:	f7ff bc32 	b.w	d70e4 <network_on>

000d7880 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7880:	2200      	movs	r2, #0
   d7882:	6840      	ldr	r0, [r0, #4]
   d7884:	4611      	mov	r1, r2
   d7886:	f7ff bc25 	b.w	d70d4 <network_ready>

000d788a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d788a:	2200      	movs	r2, #0
   d788c:	6840      	ldr	r0, [r0, #4]
   d788e:	4611      	mov	r1, r2
   d7890:	f7ff bc10 	b.w	d70b4 <network_connecting>

000d7894 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7894:	6840      	ldr	r0, [r0, #4]
   d7896:	2200      	movs	r2, #0
   d7898:	2102      	movs	r1, #2
   d789a:	f7ff bc13 	b.w	d70c4 <network_disconnect>

000d789e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d789e:	2300      	movs	r3, #0
   d78a0:	6840      	ldr	r0, [r0, #4]
   d78a2:	461a      	mov	r2, r3
   d78a4:	f7ff bbfe 	b.w	d70a4 <network_connect>

000d78a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d78a8:	4b02      	ldr	r3, [pc, #8]	; (d78b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d78aa:	2203      	movs	r2, #3
   d78ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d78ae:	4a02      	ldr	r2, [pc, #8]	; (d78b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d78b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d78b2:	4770      	bx	lr
   d78b4:	2003e650 	.word	0x2003e650
   d78b8:	000dcf78 	.word	0x000dcf78

000d78bc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d78bc:	4770      	bx	lr

000d78be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d78be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78c0:	4606      	mov	r6, r0
   d78c2:	4615      	mov	r5, r2
   d78c4:	460c      	mov	r4, r1
   d78c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d78c8:	42bc      	cmp	r4, r7
   d78ca:	d006      	beq.n	d78da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d78cc:	6833      	ldr	r3, [r6, #0]
   d78ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   d78d2:	689b      	ldr	r3, [r3, #8]
   d78d4:	4630      	mov	r0, r6
   d78d6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d78d8:	e7f6      	b.n	d78c8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d78da:	4628      	mov	r0, r5
   d78dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78de <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d78de:	7c00      	ldrb	r0, [r0, #16]
   d78e0:	2200      	movs	r2, #0
   d78e2:	f7ff ba13 	b.w	d6d0c <hal_i2c_write>

000d78e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d78e6:	7c00      	ldrb	r0, [r0, #16]
   d78e8:	2100      	movs	r1, #0
   d78ea:	f7ff ba17 	b.w	d6d1c <hal_i2c_available>

000d78ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d78ee:	7c00      	ldrb	r0, [r0, #16]
   d78f0:	2100      	movs	r1, #0
   d78f2:	f7ff ba1b 	b.w	d6d2c <hal_i2c_read>

000d78f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d78f6:	7c00      	ldrb	r0, [r0, #16]
   d78f8:	2100      	movs	r1, #0
   d78fa:	f7ff ba1f 	b.w	d6d3c <hal_i2c_peek>

000d78fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d78fe:	7c00      	ldrb	r0, [r0, #16]
   d7900:	2100      	movs	r1, #0
   d7902:	f7ff ba23 	b.w	d6d4c <hal_i2c_flush>

000d7906 <_ZN7TwoWireD0Ev>:
   d7906:	b510      	push	{r4, lr}
   d7908:	2114      	movs	r1, #20
   d790a:	4604      	mov	r4, r0
   d790c:	f001 feb1 	bl	d9672 <_ZdlPvj>
   d7910:	4620      	mov	r0, r4
   d7912:	bd10      	pop	{r4, pc}

000d7914 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7914:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d791a:	4604      	mov	r4, r0
   d791c:	4608      	mov	r0, r1
   d791e:	2100      	movs	r1, #0
   d7920:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7924:	4b03      	ldr	r3, [pc, #12]	; (d7934 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7926:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7928:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d792a:	4611      	mov	r1, r2
   d792c:	f7ff fa1e 	bl	d6d6c <hal_i2c_init>
}
   d7930:	4620      	mov	r0, r4
   d7932:	bd10      	pop	{r4, pc}
   d7934:	000dcfb4 	.word	0x000dcfb4

000d7938 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7938:	2300      	movs	r3, #0
   d793a:	7c00      	ldrb	r0, [r0, #16]
   d793c:	461a      	mov	r2, r3
   d793e:	4619      	mov	r1, r3
   d7940:	f7ff b9cc 	b.w	d6cdc <hal_i2c_begin>

000d7944 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7944:	7c00      	ldrb	r0, [r0, #16]
   d7946:	2200      	movs	r2, #0
   d7948:	f7ff b9d0 	b.w	d6cec <hal_i2c_begin_transmission>

000d794c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d794c:	b2c9      	uxtb	r1, r1
   d794e:	f7ff bff9 	b.w	d7944 <_ZN7TwoWire17beginTransmissionEh>

000d7952 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7952:	7c00      	ldrb	r0, [r0, #16]
   d7954:	2200      	movs	r2, #0
   d7956:	f7ff b9d1 	b.w	d6cfc <hal_i2c_end_transmission>

000d795a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d795a:	2101      	movs	r1, #1
   d795c:	f7ff bff9 	b.w	d7952 <_ZN7TwoWire15endTransmissionEh>

000d7960 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d7960:	f7ff b9b4 	b.w	d6ccc <HAL_Interrupts_Disable_All>

000d7964 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d7964:	f7ff b9aa 	b.w	d6cbc <HAL_Interrupts_Enable_All>

000d7968 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7968:	4770      	bx	lr

000d796a <_ZN9IPAddressD0Ev>:
   d796a:	b510      	push	{r4, lr}
   d796c:	2118      	movs	r1, #24
   d796e:	4604      	mov	r4, r0
   d7970:	f001 fe7f 	bl	d9672 <_ZdlPvj>
   d7974:	4620      	mov	r0, r4
   d7976:	bd10      	pop	{r4, pc}

000d7978 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7978:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d797a:	7d03      	ldrb	r3, [r0, #20]
   d797c:	2b06      	cmp	r3, #6
{
   d797e:	b08d      	sub	sp, #52	; 0x34
   d7980:	460e      	mov	r6, r1
   d7982:	f100 0704 	add.w	r7, r0, #4
   d7986:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d798a:	d012      	beq.n	d79b2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d798c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7990:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7994:	220a      	movs	r2, #10
   d7996:	4630      	mov	r0, r6
   d7998:	f000 fbdf 	bl	d815a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d799c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d799e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d79a0:	d019      	beq.n	d79d6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d79a2:	2c00      	cmp	r4, #0
   d79a4:	d0f4      	beq.n	d7990 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d79a6:	212e      	movs	r1, #46	; 0x2e
   d79a8:	4630      	mov	r0, r6
   d79aa:	f000 fbbd 	bl	d8128 <_ZN5Print5printEc>
   d79ae:	4404      	add	r4, r0
   d79b0:	e7ee      	b.n	d7990 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79b2:	232f      	movs	r3, #47	; 0x2f
   d79b4:	466a      	mov	r2, sp
   d79b6:	4639      	mov	r1, r7
   d79b8:	200a      	movs	r0, #10
		buf[0] = 0;
   d79ba:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79be:	f7ff f9e5 	bl	d6d8c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d79c2:	4668      	mov	r0, sp
   d79c4:	f002 ff85 	bl	da8d2 <strlen>
   d79c8:	6833      	ldr	r3, [r6, #0]
   d79ca:	4602      	mov	r2, r0
   d79cc:	68db      	ldr	r3, [r3, #12]
   d79ce:	4669      	mov	r1, sp
   d79d0:	4630      	mov	r0, r6
   d79d2:	4798      	blx	r3
   d79d4:	4604      	mov	r4, r0
    }
    return n;
}
   d79d6:	4620      	mov	r0, r4
   d79d8:	b00d      	add	sp, #52	; 0x34
   d79da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d79dc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d79dc:	b510      	push	{r4, lr}
   d79de:	4b05      	ldr	r3, [pc, #20]	; (d79f4 <_ZN9IPAddressC1Ev+0x18>)
   d79e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d79e2:	2211      	movs	r2, #17
   d79e4:	f840 3b04 	str.w	r3, [r0], #4
   d79e8:	2100      	movs	r1, #0
   d79ea:	f002 fef9 	bl	da7e0 <memset>
}
   d79ee:	4620      	mov	r0, r4
   d79f0:	bd10      	pop	{r4, pc}
   d79f2:	bf00      	nop
   d79f4:	000dcfdc 	.word	0x000dcfdc

000d79f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d79f8:	4603      	mov	r3, r0
   d79fa:	4a07      	ldr	r2, [pc, #28]	; (d7a18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d79fc:	b510      	push	{r4, lr}
   d79fe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7a02:	f101 0210 	add.w	r2, r1, #16
   d7a06:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a0a:	f843 4b04 	str.w	r4, [r3], #4
   d7a0e:	4291      	cmp	r1, r2
   d7a10:	d1f9      	bne.n	d7a06 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7a12:	780a      	ldrb	r2, [r1, #0]
   d7a14:	701a      	strb	r2, [r3, #0]
}
   d7a16:	bd10      	pop	{r4, pc}
   d7a18:	000dcfdc 	.word	0x000dcfdc

000d7a1c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7a1c:	7d03      	ldrb	r3, [r0, #20]
   d7a1e:	2b04      	cmp	r3, #4
   d7a20:	d104      	bne.n	d7a2c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7a22:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a24:	3800      	subs	r0, #0
   d7a26:	bf18      	it	ne
   d7a28:	2001      	movne	r0, #1
   d7a2a:	4770      	bx	lr
    } else if (version() == 6) {
   d7a2c:	2b06      	cmp	r3, #6
   d7a2e:	d107      	bne.n	d7a40 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a30:	6843      	ldr	r3, [r0, #4]
   d7a32:	b93b      	cbnz	r3, d7a44 <_ZNK9IPAddresscvbEv+0x28>
   d7a34:	6883      	ldr	r3, [r0, #8]
   d7a36:	b92b      	cbnz	r3, d7a44 <_ZNK9IPAddresscvbEv+0x28>
   d7a38:	68c3      	ldr	r3, [r0, #12]
   d7a3a:	b91b      	cbnz	r3, d7a44 <_ZNK9IPAddresscvbEv+0x28>
   d7a3c:	6900      	ldr	r0, [r0, #16]
   d7a3e:	e7f1      	b.n	d7a24 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7a40:	2000      	movs	r0, #0
   d7a42:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a44:	2001      	movs	r0, #1
}
   d7a46:	4770      	bx	lr

000d7a48 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7a48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7a56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7a5a:	2304      	movs	r3, #4
   d7a5c:	6041      	str	r1, [r0, #4]
   d7a5e:	7503      	strb	r3, [r0, #20]
}
   d7a60:	bd10      	pop	{r4, pc}
	...

000d7a64 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d7a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a66:	4d04      	ldr	r5, [pc, #16]	; (d7a78 <_ZN9IPAddressC1Ehhhh+0x14>)
   d7a68:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d7a6a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d7a6e:	9500      	str	r5, [sp, #0]
   d7a70:	f7ff ffea 	bl	d7a48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7a74:	b003      	add	sp, #12
   d7a76:	bd30      	pop	{r4, r5, pc}
   d7a78:	000dcfdc 	.word	0x000dcfdc

000d7a7c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7a7c:	b513      	push	{r0, r1, r4, lr}
   d7a7e:	4b05      	ldr	r3, [pc, #20]	; (d7a94 <_ZN9IPAddressC1EPKh+0x18>)
   d7a80:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7a82:	78cb      	ldrb	r3, [r1, #3]
   d7a84:	9300      	str	r3, [sp, #0]
   d7a86:	788b      	ldrb	r3, [r1, #2]
   d7a88:	784a      	ldrb	r2, [r1, #1]
   d7a8a:	7809      	ldrb	r1, [r1, #0]
   d7a8c:	f7ff ffdc 	bl	d7a48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7a90:	b002      	add	sp, #8
   d7a92:	bd10      	pop	{r4, pc}
   d7a94:	000dcfdc 	.word	0x000dcfdc

000d7a98 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d7a98:	f100 0310 	add.w	r3, r0, #16
   d7a9c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d7a9e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d7aa2:	2901      	cmp	r1, #1
   d7aa4:	4618      	mov	r0, r3
   d7aa6:	d108      	bne.n	d7aba <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d7aa8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d7aac:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d7ab0:	3a01      	subs	r2, #1
   d7ab2:	f103 0310 	add.w	r3, r3, #16
   d7ab6:	d1f2      	bne.n	d7a9e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d7ab8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d7aba:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d7abc:	bf04      	itt	eq
   d7abe:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d7ac2:	1852      	addeq	r2, r2, r1
   d7ac4:	e7f4      	b.n	d7ab0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d7ac6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7ac6:	4770      	bx	lr

000d7ac8 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7ac8:	2000      	movs	r0, #0
   d7aca:	4770      	bx	lr

000d7acc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7acc:	b510      	push	{r4, lr}
   d7ace:	2110      	movs	r1, #16
   d7ad0:	4604      	mov	r4, r0
   d7ad2:	f001 fdce 	bl	d9672 <_ZdlPvj>
   d7ad6:	4620      	mov	r0, r4
   d7ad8:	bd10      	pop	{r4, pc}

000d7ada <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7ada:	b508      	push	{r3, lr}
      { delete this; }
   d7adc:	f7ff fff6 	bl	d7acc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7ae0:	bd08      	pop	{r3, pc}

000d7ae2 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7ae2:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   d7ae4:	68c4      	ldr	r4, [r0, #12]
   d7ae6:	b17c      	cbz	r4, d7b08 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   d7ae8:	6820      	ldr	r0, [r4, #0]
   d7aea:	b108      	cbz	r0, d7af0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   d7aec:	f7fc fad9 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   d7af0:	7a23      	ldrb	r3, [r4, #8]
   d7af2:	b11b      	cbz	r3, d7afc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   d7af4:	6860      	ldr	r0, [r4, #4]
   d7af6:	b108      	cbz	r0, d7afc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   d7af8:	f7fc fad3 	bl	d40a2 <_ZdaPv>
   d7afc:	4620      	mov	r0, r4
   d7afe:	210c      	movs	r1, #12
   d7b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7b04:	f001 bdb5 	b.w	d9672 <_ZdlPvj>
   d7b08:	bd10      	pop	{r4, pc}

000d7b0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7b0a:	b510      	push	{r4, lr}
          _M_dispose();
   d7b0c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7b0e:	4604      	mov	r4, r0
          _M_dispose();
   d7b10:	689b      	ldr	r3, [r3, #8]
   d7b12:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7b14:	68a3      	ldr	r3, [r4, #8]
   d7b16:	3b01      	subs	r3, #1
   d7b18:	60a3      	str	r3, [r4, #8]
   d7b1a:	b92b      	cbnz	r3, d7b28 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d7b1c:	6823      	ldr	r3, [r4, #0]
   d7b1e:	4620      	mov	r0, r4
   d7b20:	68db      	ldr	r3, [r3, #12]
    }
   d7b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7b26:	4718      	bx	r3
    }
   d7b28:	bd10      	pop	{r4, pc}

000d7b2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d7b2a:	b538      	push	{r3, r4, r5, lr}
   d7b2c:	680b      	ldr	r3, [r1, #0]
   d7b2e:	6003      	str	r3, [r0, #0]
   d7b30:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d7b32:	6843      	ldr	r3, [r0, #4]
   d7b34:	429d      	cmp	r5, r3
    class __shared_ptr
   d7b36:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d7b38:	d00c      	beq.n	d7b54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d7b3a:	b115      	cbz	r5, d7b42 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d7b3c:	686b      	ldr	r3, [r5, #4]
   d7b3e:	3301      	adds	r3, #1
   d7b40:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d7b42:	6860      	ldr	r0, [r4, #4]
   d7b44:	b128      	cbz	r0, d7b52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d7b46:	6843      	ldr	r3, [r0, #4]
   d7b48:	3b01      	subs	r3, #1
   d7b4a:	6043      	str	r3, [r0, #4]
   d7b4c:	b90b      	cbnz	r3, d7b52 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d7b4e:	f7ff ffdc 	bl	d7b0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d7b52:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d7b54:	4620      	mov	r0, r4
   d7b56:	bd38      	pop	{r3, r4, r5, pc}

000d7b58 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7b58:	460b      	mov	r3, r1
   d7b5a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d7b5c:	2200      	movs	r2, #0
   d7b5e:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d7b60:	e9c0 2200 	strd	r2, r2, [r0]
   d7b64:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   d7b66:	6083      	str	r3, [r0, #8]
    if (t) {
   d7b68:	b90b      	cbnz	r3, d7b6e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   d7b6a:	4620      	mov	r0, r4
   d7b6c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d7b6e:	f7ff ffdc 	bl	d7b2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d7b72:	e7fa      	b.n	d7b6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d7b74 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d7b74:	6883      	ldr	r3, [r0, #8]
   d7b76:	b1eb      	cbz	r3, d7bb4 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d7b78:	781a      	ldrb	r2, [r3, #0]
   d7b7a:	2a03      	cmp	r2, #3
   d7b7c:	d81a      	bhi.n	d7bb4 <_ZNK5spark9JSONValue4typeEv+0x40>
   d7b7e:	e8df f002 	tbb	[pc, r2]
   d7b82:	1704      	.short	0x1704
   d7b84:	1b02      	.short	0x1b02
   d7b86:	2005      	movs	r0, #5
   d7b88:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d7b8a:	6802      	ldr	r2, [r0, #0]
   d7b8c:	685b      	ldr	r3, [r3, #4]
   d7b8e:	6852      	ldr	r2, [r2, #4]
   d7b90:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d7b92:	282d      	cmp	r0, #45	; 0x2d
   d7b94:	d012      	beq.n	d7bbc <_ZNK5spark9JSONValue4typeEv+0x48>
   d7b96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7b9a:	2b09      	cmp	r3, #9
   d7b9c:	d90e      	bls.n	d7bbc <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d7b9e:	2874      	cmp	r0, #116	; 0x74
   d7ba0:	d00e      	beq.n	d7bc0 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d7ba2:	2866      	cmp	r0, #102	; 0x66
   d7ba4:	d00c      	beq.n	d7bc0 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d7ba6:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d7baa:	4258      	negs	r0, r3
   d7bac:	4158      	adcs	r0, r3
   d7bae:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d7bb0:	2006      	movs	r0, #6
   d7bb2:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d7bb4:	2000      	movs	r0, #0
   d7bb6:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d7bb8:	2004      	movs	r0, #4
   d7bba:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d7bbc:	2003      	movs	r0, #3
   d7bbe:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d7bc0:	2002      	movs	r0, #2
    }
}
   d7bc2:	4770      	bx	lr
   d7bc4:	0000      	movs	r0, r0
	...

000d7bc8 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   d7bc8:	b510      	push	{r4, lr}
   d7bca:	4604      	mov	r4, r0
    switch (type()) {
   d7bcc:	f7ff ffd2 	bl	d7b74 <_ZNK5spark9JSONValue4typeEv>
   d7bd0:	2802      	cmp	r0, #2
   d7bd2:	d00d      	beq.n	d7bf0 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   d7bd4:	1ec3      	subs	r3, r0, #3
   d7bd6:	b2db      	uxtb	r3, r3
   d7bd8:	2b01      	cmp	r3, #1
   d7bda:	d810      	bhi.n	d7bfe <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   d7bdc:	6822      	ldr	r2, [r4, #0]
   d7bde:	68a3      	ldr	r3, [r4, #8]
   d7be0:	6850      	ldr	r0, [r2, #4]
   d7be2:	685b      	ldr	r3, [r3, #4]
}
   d7be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   d7be8:	2100      	movs	r1, #0
   d7bea:	4418      	add	r0, r3
   d7bec:	f003 bcde 	b.w	db5ac <strtod>
        const char* const s = d_->json + t_->start;
   d7bf0:	6822      	ldr	r2, [r4, #0]
   d7bf2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d7bf4:	6852      	ldr	r2, [r2, #4]
   d7bf6:	685b      	ldr	r3, [r3, #4]
   d7bf8:	5cd3      	ldrb	r3, [r2, r3]
   d7bfa:	2b74      	cmp	r3, #116	; 0x74
   d7bfc:	d002      	beq.n	d7c04 <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   d7bfe:	ed9f 0b04 	vldr	d0, [pc, #16]	; d7c10 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   d7c02:	bd10      	pop	{r4, pc}
        return *s == 't';
   d7c04:	ed9f 0b04 	vldr	d0, [pc, #16]	; d7c18 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   d7c08:	e7fb      	b.n	d7c02 <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   d7c0a:	bf00      	nop
   d7c0c:	f3af 8000 	nop.w
	...
   d7c1c:	3ff00000 	.word	0x3ff00000

000d7c20 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d7c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7c24:	b086      	sub	sp, #24
   d7c26:	4607      	mov	r7, r0
   d7c28:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   d7c2a:	a802      	add	r0, sp, #8
   d7c2c:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d7c2e:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d7c30:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   d7c32:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   d7c34:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   d7c36:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   d7c38:	f7ff f9b0 	bl	d6f9c <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   d7c3c:	e9cd 4400 	strd	r4, r4, [sp]
   d7c40:	4623      	mov	r3, r4
   d7c42:	4642      	mov	r2, r8
   d7c44:	4639      	mov	r1, r7
   d7c46:	a802      	add	r0, sp, #8
   d7c48:	f7ff f9b0 	bl	d6fac <jsmn_parse>
    if (n <= 0) {
   d7c4c:	1e06      	subs	r6, r0, #0
   d7c4e:	dd1e      	ble.n	d7c8e <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   d7c50:	4910      	ldr	r1, [pc, #64]	; (d7c94 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   d7c52:	0130      	lsls	r0, r6, #4
   d7c54:	f001 fd11 	bl	d967a <_ZnajRKSt9nothrow_t>
    if (!t) {
   d7c58:	4605      	mov	r5, r0
   d7c5a:	b190      	cbz	r0, d7c82 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   d7c5c:	4621      	mov	r1, r4
   d7c5e:	a802      	add	r0, sp, #8
   d7c60:	f7ff f99c 	bl	d6f9c <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   d7c64:	e9cd 6400 	strd	r6, r4, [sp]
   d7c68:	462b      	mov	r3, r5
   d7c6a:	4642      	mov	r2, r8
   d7c6c:	4639      	mov	r1, r7
   d7c6e:	a802      	add	r0, sp, #8
   d7c70:	f7ff f99c 	bl	d6fac <jsmn_parse>
   d7c74:	42a0      	cmp	r0, r4
   d7c76:	dd07      	ble.n	d7c88 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   d7c78:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   d7c7c:	2001      	movs	r0, #1
    *count = n;
   d7c7e:	f8c9 6000 	str.w	r6, [r9]
}
   d7c82:	b006      	add	sp, #24
   d7c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7c88:	4628      	mov	r0, r5
   d7c8a:	f7fc fa0a 	bl	d40a2 <_ZdaPv>
      }
   d7c8e:	4620      	mov	r0, r4
   d7c90:	e7f7      	b.n	d7c82 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   d7c92:	bf00      	nop
   d7c94:	000dd1bc 	.word	0x000dd1bc

000d7c98 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d7c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   d7c9c:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   d7c9e:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   d7ca0:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d7ca2:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   d7ca4:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   d7ca6:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   d7ca8:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   d7caa:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   d7cac:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   d7cb0:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   d7cb4:	42b4      	cmp	r4, r6
   d7cb6:	d063      	beq.n	d7d80 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   d7cb8:	4625      	mov	r5, r4
   d7cba:	f815 2b01 	ldrb.w	r2, [r5], #1
   d7cbe:	2a5c      	cmp	r2, #92	; 0x5c
   d7cc0:	d12b      	bne.n	d7d1a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   d7cc2:	42a1      	cmp	r1, r4
   d7cc4:	d007      	beq.n	d7cd6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   d7cc6:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   d7cca:	4618      	mov	r0, r3
   d7ccc:	465a      	mov	r2, fp
   d7cce:	f002 fd6d 	bl	da7ac <memmove>
   d7cd2:	4603      	mov	r3, r0
                str += n;
   d7cd4:	445b      	add	r3, fp
            if (s == end) {
   d7cd6:	42b5      	cmp	r5, r6
   d7cd8:	d039      	beq.n	d7d4e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   d7cda:	7862      	ldrb	r2, [r4, #1]
   d7cdc:	2a75      	cmp	r2, #117	; 0x75
   d7cde:	d12a      	bne.n	d7d36 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   d7ce0:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   d7ce2:	1ab2      	subs	r2, r6, r2
   d7ce4:	2a03      	cmp	r2, #3
   d7ce6:	dd32      	ble.n	d7d4e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   d7ce8:	1da0      	adds	r0, r4, #6
   d7cea:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   d7cee:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   d7cf2:	45ae      	cmp	lr, r5
   d7cf4:	d053      	beq.n	d7d9e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   d7cf6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   d7cfa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   d7cfe:	fa5f fb82 	uxtb.w	fp, r2
   d7d02:	f1bb 0f09 	cmp.w	fp, #9
   d7d06:	d905      	bls.n	d7d14 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   d7d08:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   d7d0c:	2a05      	cmp	r2, #5
   d7d0e:	d807      	bhi.n	d7d20 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   d7d10:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   d7d14:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   d7d18:	e7eb      	b.n	d7cf2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   d7d1a:	4628      	mov	r0, r5
   d7d1c:	4604      	mov	r4, r0
   d7d1e:	e7c9      	b.n	d7cb4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   d7d20:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   d7d24:	2a05      	cmp	r2, #5
   d7d26:	d812      	bhi.n	d7d4e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   d7d28:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   d7d2c:	e7f2      	b.n	d7d14 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   d7d2e:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   d7d32:	4601      	mov	r1, r0
   d7d34:	e7f2      	b.n	d7d1c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   d7d36:	2a6e      	cmp	r2, #110	; 0x6e
   d7d38:	d01c      	beq.n	d7d74 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   d7d3a:	d80e      	bhi.n	d7d5a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   d7d3c:	2a62      	cmp	r2, #98	; 0x62
   d7d3e:	d013      	beq.n	d7d68 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   d7d40:	d807      	bhi.n	d7d52 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   d7d42:	2a2f      	cmp	r2, #47	; 0x2f
   d7d44:	d011      	beq.n	d7d6a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d7d46:	2a5c      	cmp	r2, #92	; 0x5c
   d7d48:	d00f      	beq.n	d7d6a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   d7d4a:	2a22      	cmp	r2, #34	; 0x22
   d7d4c:	d00d      	beq.n	d7d6a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   d7d4e:	2000      	movs	r0, #0
   d7d50:	e023      	b.n	d7d9a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   d7d52:	2a66      	cmp	r2, #102	; 0x66
   d7d54:	d1fb      	bne.n	d7d4e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   d7d56:	220c      	movs	r2, #12
   d7d58:	e007      	b.n	d7d6a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   d7d5a:	2a72      	cmp	r2, #114	; 0x72
   d7d5c:	d00d      	beq.n	d7d7a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   d7d5e:	2a74      	cmp	r2, #116	; 0x74
   d7d60:	d1f5      	bne.n	d7d4e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   d7d62:	f883 a000 	strb.w	sl, [r3]
                    break;
   d7d66:	e001      	b.n	d7d6c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   d7d68:	2208      	movs	r2, #8
   d7d6a:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   d7d6c:	1ca1      	adds	r1, r4, #2
                ++str;
   d7d6e:	3301      	adds	r3, #1
                ++s;
   d7d70:	4608      	mov	r0, r1
   d7d72:	e7d3      	b.n	d7d1c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   d7d74:	f04f 020a 	mov.w	r2, #10
   d7d78:	e7f7      	b.n	d7d6a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   d7d7a:	f883 9000 	strb.w	r9, [r3]
                    break;
   d7d7e:	e7f5      	b.n	d7d6c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   d7d80:	42a1      	cmp	r1, r4
   d7d82:	d006      	beq.n	d7d92 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   d7d84:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   d7d86:	4618      	mov	r0, r3
   d7d88:	4622      	mov	r2, r4
   d7d8a:	f002 fd0f 	bl	da7ac <memmove>
   d7d8e:	4603      	mov	r3, r0
        str += n;
   d7d90:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   d7d92:	eba3 0308 	sub.w	r3, r3, r8
   d7d96:	60bb      	str	r3, [r7, #8]
    return true;
   d7d98:	2001      	movs	r0, #1
}
   d7d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   d7d9e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   d7da2:	d9c4      	bls.n	d7d2e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   d7da4:	4621      	mov	r1, r4
   d7da6:	e7b9      	b.n	d7d1c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000d7da8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   d7da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7daa:	4604      	mov	r4, r0
   d7dac:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   d7dae:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   d7db2:	2700      	movs	r7, #0
    while (t != end) {
   d7db4:	42b4      	cmp	r4, r6
   d7db6:	d010      	beq.n	d7dda <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   d7db8:	7823      	ldrb	r3, [r4, #0]
   d7dba:	2b03      	cmp	r3, #3
   d7dbc:	d108      	bne.n	d7dd0 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   d7dbe:	4629      	mov	r1, r5
   d7dc0:	4620      	mov	r0, r4
   d7dc2:	f7ff ff69 	bl	d7c98 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   d7dc6:	b148      	cbz	r0, d7ddc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   d7dc8:	68a3      	ldr	r3, [r4, #8]
   d7dca:	54ef      	strb	r7, [r5, r3]
        ++t;
   d7dcc:	3410      	adds	r4, #16
    while (t != end) {
   d7dce:	e7f1      	b.n	d7db4 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   d7dd0:	2b00      	cmp	r3, #0
   d7dd2:	d1fb      	bne.n	d7dcc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   d7dd4:	68a2      	ldr	r2, [r4, #8]
   d7dd6:	54ab      	strb	r3, [r5, r2]
   d7dd8:	e7f8      	b.n	d7dcc <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   d7dda:	2001      	movs	r0, #1
}
   d7ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d7de0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7de0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7de2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d7de4:	e9c0 3300 	strd	r3, r3, [r0]
   d7de8:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d7dea:	480e      	ldr	r0, [pc, #56]	; (d7e24 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d7dec:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d7df0:	b1a9      	cbz	r1, d7e1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d7df2:	780b      	ldrb	r3, [r1, #0]
   d7df4:	2b03      	cmp	r3, #3
   d7df6:	d006      	beq.n	d7e06 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d7df8:	b98b      	cbnz	r3, d7e1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d7dfa:	6813      	ldr	r3, [r2, #0]
   d7dfc:	6858      	ldr	r0, [r3, #4]
   d7dfe:	684b      	ldr	r3, [r1, #4]
   d7e00:	5cc3      	ldrb	r3, [r0, r3]
   d7e02:	2b6e      	cmp	r3, #110	; 0x6e
   d7e04:	d007      	beq.n	d7e16 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d7e06:	6813      	ldr	r3, [r2, #0]
   d7e08:	684d      	ldr	r5, [r1, #4]
   d7e0a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d7e0c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d7e0e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d7e10:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d7e12:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d7e14:	60e3      	str	r3, [r4, #12]
   d7e16:	4611      	mov	r1, r2
   d7e18:	4620      	mov	r0, r4
   d7e1a:	f7ff fe86 	bl	d7b2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   d7e1e:	4620      	mov	r0, r4
   d7e20:	bd38      	pop	{r3, r4, r5, pc}
   d7e22:	bf00      	nop
   d7e24:	000dcc50 	.word	0x000dcc50

000d7e28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7e28:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7e2a:	2500      	movs	r5, #0
   d7e2c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d7e2e:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d7e32:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7e36:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d7e3a:	4604      	mov	r4, r0
   d7e3c:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d7e3e:	b14b      	cbz	r3, d7e54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d7e40:	781a      	ldrb	r2, [r3, #0]
   d7e42:	2a01      	cmp	r2, #1
   d7e44:	d106      	bne.n	d7e54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d7e46:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d7e4a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d7e4c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d7e4e:	6143      	str	r3, [r0, #20]
   d7e50:	f7ff fe6b 	bl	d7b2a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   d7e54:	4620      	mov	r0, r4
   d7e56:	bd38      	pop	{r3, r4, r5, pc}

000d7e58 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   d7e58:	b510      	push	{r4, lr}
    if (!n_) {
   d7e5a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d7e5c:	4604      	mov	r4, r0
    if (!n_) {
   d7e5e:	b163      	cbz	r3, d7e7a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   d7e60:	6880      	ldr	r0, [r0, #8]
   d7e62:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d7e64:	3b01      	subs	r3, #1
    ++t_;
   d7e66:	3010      	adds	r0, #16
   d7e68:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d7e6a:	6120      	str	r0, [r4, #16]
    --n_;
   d7e6c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d7e6e:	b113      	cbz	r3, d7e76 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d7e70:	f7ff fe12 	bl	d7a98 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d7e74:	60a0      	str	r0, [r4, #8]
    }
    return true;
   d7e76:	2001      	movs	r0, #1
   d7e78:	e000      	b.n	d7e7c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d7e7a:	4618      	mov	r0, r3
}
   d7e7c:	bd10      	pop	{r4, pc}
	...

000d7e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e80:	b538      	push	{r3, r4, r5, lr}
   d7e82:	2300      	movs	r3, #0
   d7e84:	4604      	mov	r4, r0
   d7e86:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e88:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e8a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e8c:	f7fc f903 	bl	d4096 <_Znwj>
   d7e90:	b128      	cbz	r0, d7e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7e92:	2301      	movs	r3, #1
   d7e94:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7e98:	4b02      	ldr	r3, [pc, #8]	; (d7ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   d7e9a:	6003      	str	r3, [r0, #0]
   d7e9c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e9e:	6020      	str	r0, [r4, #0]
	}
   d7ea0:	4620      	mov	r0, r4
   d7ea2:	bd38      	pop	{r3, r4, r5, pc}
   d7ea4:	000dcff0 	.word	0x000dcff0

000d7ea8 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d7ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7eaa:	4604      	mov	r4, r0
   d7eac:	b087      	sub	sp, #28
   d7eae:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d7eb0:	200c      	movs	r0, #12
   d7eb2:	4927      	ldr	r1, [pc, #156]	; (d7f50 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   d7eb4:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   d7eb6:	f001 fbde 	bl	d9676 <_ZnwjRKSt9nothrow_t>
   d7eba:	4601      	mov	r1, r0
   d7ebc:	b118      	cbz	r0, d7ec6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   d7ebe:	2300      	movs	r3, #0
   d7ec0:	e9c0 3300 	strd	r3, r3, [r0]
   d7ec4:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   d7ec6:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7ec8:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   d7eca:	f7ff ffd9 	bl	d7e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   d7ece:	9a02      	ldr	r2, [sp, #8]
   d7ed0:	b942      	cbnz	r2, d7ee4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   d7ed2:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   d7ed6:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   d7ed8:	a803      	add	r0, sp, #12
   d7eda:	f7fc fab9 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7ede:	4620      	mov	r0, r4
   d7ee0:	b007      	add	sp, #28
   d7ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   d7ee4:	2300      	movs	r3, #0
   d7ee6:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   d7ee8:	4629      	mov	r1, r5
   d7eea:	ab01      	add	r3, sp, #4
   d7eec:	4630      	mov	r0, r6
   d7eee:	f7ff fe97 	bl	d7c20 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   d7ef2:	b918      	cbnz	r0, d7efc <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   d7ef4:	e9c4 0000 	strd	r0, r0, [r4]
   d7ef8:	60a0      	str	r0, [r4, #8]
}
   d7efa:	e7ed      	b.n	d7ed8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   d7efc:	4914      	ldr	r1, [pc, #80]	; (d7f50 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7efe:	9f02      	ldr	r7, [sp, #8]
   d7f00:	1c68      	adds	r0, r5, #1
   d7f02:	f001 fbba 	bl	d967a <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   d7f06:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   d7f08:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   d7f0a:	6858      	ldr	r0, [r3, #4]
   d7f0c:	2800      	cmp	r0, #0
   d7f0e:	d0f1      	beq.n	d7ef4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   d7f10:	462a      	mov	r2, r5
   d7f12:	4631      	mov	r1, r6
   d7f14:	f002 fc3c 	bl	da790 <memcpy>
   d7f18:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d7f1a:	9901      	ldr	r1, [sp, #4]
   d7f1c:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   d7f1e:	2201      	movs	r2, #1
   d7f20:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   d7f22:	685a      	ldr	r2, [r3, #4]
   d7f24:	f7ff ff40 	bl	d7da8 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   d7f28:	2800      	cmp	r0, #0
   d7f2a:	d0e3      	beq.n	d7ef4 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   d7f2c:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   d7f2e:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7f30:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   d7f32:	9b03      	ldr	r3, [sp, #12]
   d7f34:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   d7f36:	b113      	cbz	r3, d7f3e <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   d7f38:	685a      	ldr	r2, [r3, #4]
   d7f3a:	3201      	adds	r2, #1
   d7f3c:	605a      	str	r2, [r3, #4]
   d7f3e:	aa04      	add	r2, sp, #16
   d7f40:	4620      	mov	r0, r4
   d7f42:	f7ff fe09 	bl	d7b58 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7f46:	a805      	add	r0, sp, #20
   d7f48:	f7fc fa82 	bl	d4450 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f4c:	e7c4      	b.n	d7ed8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   d7f4e:	bf00      	nop
   d7f50:	000dd1bc 	.word	0x000dd1bc

000d7f54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7f54:	4b01      	ldr	r3, [pc, #4]	; (d7f5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7f56:	4a02      	ldr	r2, [pc, #8]	; (d7f60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7f58:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7f5a:	4770      	bx	lr
   d7f5c:	2003e658 	.word	0x2003e658
   d7f60:	000dd004 	.word	0x000dd004

000d7f64 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7f64:	2300      	movs	r3, #0
   d7f66:	6840      	ldr	r0, [r0, #4]
   d7f68:	461a      	mov	r2, r3
   d7f6a:	f7ff b89b 	b.w	d70a4 <network_connect>

000d7f6e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7f6e:	6840      	ldr	r0, [r0, #4]
   d7f70:	2200      	movs	r2, #0
   d7f72:	2102      	movs	r1, #2
   d7f74:	f7ff b8a6 	b.w	d70c4 <network_disconnect>

000d7f78 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7f78:	2200      	movs	r2, #0
   d7f7a:	6840      	ldr	r0, [r0, #4]
   d7f7c:	4611      	mov	r1, r2
   d7f7e:	f7ff b899 	b.w	d70b4 <network_connecting>

000d7f82 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7f82:	2200      	movs	r2, #0
   d7f84:	6840      	ldr	r0, [r0, #4]
   d7f86:	4611      	mov	r1, r2
   d7f88:	f7ff b8a4 	b.w	d70d4 <network_ready>

000d7f8c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7f8c:	2300      	movs	r3, #0
   d7f8e:	6840      	ldr	r0, [r0, #4]
   d7f90:	461a      	mov	r2, r3
   d7f92:	4619      	mov	r1, r3
   d7f94:	f7ff b8a6 	b.w	d70e4 <network_on>

000d7f98 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7f98:	2300      	movs	r3, #0
   d7f9a:	6840      	ldr	r0, [r0, #4]
   d7f9c:	461a      	mov	r2, r3
   d7f9e:	4619      	mov	r1, r3
   d7fa0:	f7ff b8a8 	b.w	d70f4 <network_off>

000d7fa4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7fa4:	6840      	ldr	r0, [r0, #4]
   d7fa6:	2100      	movs	r1, #0
   d7fa8:	f7ff b8cc 	b.w	d7144 <network_is_on>

000d7fac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7fac:	6840      	ldr	r0, [r0, #4]
   d7fae:	2100      	movs	r1, #0
   d7fb0:	f7ff b8d0 	b.w	d7154 <network_is_off>

000d7fb4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7fb4:	6840      	ldr	r0, [r0, #4]
   d7fb6:	2200      	movs	r2, #0
   d7fb8:	f081 0101 	eor.w	r1, r1, #1
   d7fbc:	f7ff b8a2 	b.w	d7104 <network_listen>

000d7fc0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7fc0:	6840      	ldr	r0, [r0, #4]
   d7fc2:	2200      	movs	r2, #0
   d7fc4:	f7ff b8ae 	b.w	d7124 <network_set_listen_timeout>

000d7fc8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7fc8:	2200      	movs	r2, #0
   d7fca:	6840      	ldr	r0, [r0, #4]
   d7fcc:	4611      	mov	r1, r2
   d7fce:	f7ff b8b1 	b.w	d7134 <network_get_listen_timeout>

000d7fd2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7fd2:	2200      	movs	r2, #0
   d7fd4:	6840      	ldr	r0, [r0, #4]
   d7fd6:	4611      	mov	r1, r2
   d7fd8:	f7ff b89c 	b.w	d7114 <network_listening>

000d7fdc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7fe0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7fe2:	b095      	sub	sp, #84	; 0x54
   d7fe4:	4616      	mov	r6, r2
   d7fe6:	460d      	mov	r5, r1
   d7fe8:	4607      	mov	r7, r0
    IPAddress addr;
   d7fea:	f7ff fcf7 	bl	d79dc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7fee:	4621      	mov	r1, r4
   d7ff0:	2218      	movs	r2, #24
   d7ff2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7ff4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7ff6:	f002 fbf3 	bl	da7e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7ffa:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7ffc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8000:	4621      	mov	r1, r4
   d8002:	466b      	mov	r3, sp
   d8004:	aa0c      	add	r2, sp, #48	; 0x30
   d8006:	4630      	mov	r0, r6
   d8008:	f7fe fee8 	bl	d6ddc <netdb_getaddrinfo>
    if (!r) {
   d800c:	4604      	mov	r4, r0
   d800e:	2800      	cmp	r0, #0
   d8010:	d14c      	bne.n	d80ac <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8012:	4602      	mov	r2, r0
   d8014:	2101      	movs	r1, #1
   d8016:	6868      	ldr	r0, [r5, #4]
   d8018:	f7ff f85c 	bl	d70d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d801c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d801e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8020:	4622      	mov	r2, r4
   d8022:	6868      	ldr	r0, [r5, #4]
   d8024:	f7ff f856 	bl	d70d4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8028:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d802a:	4681      	mov	r9, r0
        bool ok = false;
   d802c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d802e:	2e00      	cmp	r6, #0
   d8030:	d03c      	beq.n	d80ac <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8032:	2900      	cmp	r1, #0
   d8034:	d13a      	bne.n	d80ac <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8036:	6873      	ldr	r3, [r6, #4]
   d8038:	2b02      	cmp	r3, #2
   d803a:	d003      	beq.n	d8044 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d803c:	2b0a      	cmp	r3, #10
   d803e:	d011      	beq.n	d8064 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8040:	69f6      	ldr	r6, [r6, #28]
   d8042:	e7f4      	b.n	d802e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8044:	f1b8 0f00 	cmp.w	r8, #0
   d8048:	d00a      	beq.n	d8060 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d804a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d804c:	a806      	add	r0, sp, #24
   d804e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8050:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d8052:	f7ff fd13 	bl	d7a7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8058:	1d3c      	adds	r4, r7, #4
   d805a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d805c:	682b      	ldr	r3, [r5, #0]
   d805e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d8060:	4641      	mov	r1, r8
   d8062:	e7ed      	b.n	d8040 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8064:	f1b9 0f00 	cmp.w	r9, #0
   d8068:	d101      	bne.n	d806e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d806a:	4649      	mov	r1, r9
   d806c:	e7e8      	b.n	d8040 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d806e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8070:	2210      	movs	r2, #16
   d8072:	a801      	add	r0, sp, #4
   d8074:	f002 fbb4 	bl	da7e0 <memset>
                    a.v = 6;
   d8078:	2306      	movs	r3, #6
   d807a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d807e:	ad01      	add	r5, sp, #4
   d8080:	f104 0308 	add.w	r3, r4, #8
   d8084:	3418      	adds	r4, #24
   d8086:	6818      	ldr	r0, [r3, #0]
   d8088:	6859      	ldr	r1, [r3, #4]
   d808a:	462a      	mov	r2, r5
   d808c:	c203      	stmia	r2!, {r0, r1}
   d808e:	3308      	adds	r3, #8
   d8090:	42a3      	cmp	r3, r4
   d8092:	4615      	mov	r5, r2
   d8094:	d1f7      	bne.n	d8086 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d8096:	a901      	add	r1, sp, #4
   d8098:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d809a:	ad07      	add	r5, sp, #28
   d809c:	f7ff fcac 	bl	d79f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d80a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d80a2:	1d3c      	adds	r4, r7, #4
   d80a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d80a6:	682b      	ldr	r3, [r5, #0]
   d80a8:	7023      	strb	r3, [r4, #0]
   d80aa:	e7de      	b.n	d806a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d80ac:	9800      	ldr	r0, [sp, #0]
   d80ae:	f7fe fe8d 	bl	d6dcc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d80b2:	4638      	mov	r0, r7
   d80b4:	b015      	add	sp, #84	; 0x54
   d80b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d80bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d80bc:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d80be:	4a03      	ldr	r2, [pc, #12]	; (d80cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d80c0:	601a      	str	r2, [r3, #0]
   d80c2:	2200      	movs	r2, #0
   d80c4:	605a      	str	r2, [r3, #4]

} // spark
   d80c6:	4770      	bx	lr
   d80c8:	2003e65c 	.word	0x2003e65c
   d80cc:	000dd010 	.word	0x000dd010

000d80d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d80d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80d2:	4606      	mov	r6, r0
   d80d4:	460d      	mov	r5, r1
  size_t n = 0;
   d80d6:	188f      	adds	r7, r1, r2
   d80d8:	2400      	movs	r4, #0
  while (size--) {
   d80da:	42bd      	cmp	r5, r7
   d80dc:	d00c      	beq.n	d80f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d80de:	6833      	ldr	r3, [r6, #0]
   d80e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d80e4:	689b      	ldr	r3, [r3, #8]
   d80e6:	4630      	mov	r0, r6
   d80e8:	4798      	blx	r3
     if (chunk>=0)
   d80ea:	1e03      	subs	r3, r0, #0
   d80ec:	db01      	blt.n	d80f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d80ee:	441c      	add	r4, r3
  while (size--) {
   d80f0:	e7f3      	b.n	d80da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d80f2:	2c00      	cmp	r4, #0
   d80f4:	bf08      	it	eq
   d80f6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d80f8:	4620      	mov	r0, r4
   d80fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d80fc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d80fc:	b513      	push	{r0, r1, r4, lr}
   d80fe:	4604      	mov	r4, r0
    }
   d8100:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8102:	b159      	cbz	r1, d811c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8104:	9101      	str	r1, [sp, #4]
   d8106:	f002 fbe4 	bl	da8d2 <strlen>
   d810a:	6823      	ldr	r3, [r4, #0]
   d810c:	9901      	ldr	r1, [sp, #4]
   d810e:	68db      	ldr	r3, [r3, #12]
   d8110:	4602      	mov	r2, r0
   d8112:	4620      	mov	r0, r4
    }
   d8114:	b002      	add	sp, #8
   d8116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d811a:	4718      	bx	r3
    }
   d811c:	b002      	add	sp, #8
   d811e:	bd10      	pop	{r4, pc}

000d8120 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d8120:	b508      	push	{r3, lr}
  return write(str);
   d8122:	f7ff ffeb 	bl	d80fc <_ZN5Print5writeEPKc>
}
   d8126:	bd08      	pop	{r3, pc}

000d8128 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d8128:	6803      	ldr	r3, [r0, #0]
   d812a:	689b      	ldr	r3, [r3, #8]
   d812c:	4718      	bx	r3

000d812e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d812e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8130:	210d      	movs	r1, #13
{
   d8132:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8134:	f7ff fff8 	bl	d8128 <_ZN5Print5printEc>
  n += print('\n');
   d8138:	210a      	movs	r1, #10
  size_t n = print('\r');
   d813a:	4604      	mov	r4, r0
  n += print('\n');
   d813c:	4628      	mov	r0, r5
   d813e:	f7ff fff3 	bl	d8128 <_ZN5Print5printEc>
  return n;
}
   d8142:	4420      	add	r0, r4
   d8144:	bd38      	pop	{r3, r4, r5, pc}

000d8146 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d8146:	b538      	push	{r3, r4, r5, lr}
   d8148:	4605      	mov	r5, r0
  return write(str);
   d814a:	f7ff ffd7 	bl	d80fc <_ZN5Print5writeEPKc>
   d814e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d8150:	4628      	mov	r0, r5
   d8152:	f7ff ffec 	bl	d812e <_ZN5Print7printlnEv>
  return n;
}
   d8156:	4420      	add	r0, r4
   d8158:	bd38      	pop	{r3, r4, r5, pc}

000d815a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d815a:	b530      	push	{r4, r5, lr}
   d815c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d815e:	2300      	movs	r3, #0
   d8160:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8164:	2a01      	cmp	r2, #1
   d8166:	bf98      	it	ls
   d8168:	220a      	movls	r2, #10
   d816a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d816c:	460d      	mov	r5, r1
   d816e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8172:	fb01 5312 	mls	r3, r1, r2, r5
   d8176:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d817a:	2b09      	cmp	r3, #9
   d817c:	bf94      	ite	ls
   d817e:	3330      	addls	r3, #48	; 0x30
   d8180:	3337      	addhi	r3, #55	; 0x37
   d8182:	b2db      	uxtb	r3, r3
  } while(n);
   d8184:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8186:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d818a:	d9ef      	bls.n	d816c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d818c:	4621      	mov	r1, r4
   d818e:	f7ff ffb5 	bl	d80fc <_ZN5Print5writeEPKc>
}
   d8192:	b00b      	add	sp, #44	; 0x2c
   d8194:	bd30      	pop	{r4, r5, pc}
	...

000d8198 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d8198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d819c:	ec55 4b10 	vmov	r4, r5, d0
   d81a0:	4606      	mov	r6, r0
   d81a2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d81a4:	ee10 2a10 	vmov	r2, s0
   d81a8:	ee10 0a10 	vmov	r0, s0
   d81ac:	462b      	mov	r3, r5
   d81ae:	4629      	mov	r1, r5
   d81b0:	f002 f88c 	bl	da2cc <__aeabi_dcmpun>
   d81b4:	b140      	cbz	r0, d81c8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d81b6:	4953      	ldr	r1, [pc, #332]	; (d8304 <_ZN5Print10printFloatEdh+0x16c>)
   d81b8:	4630      	mov	r0, r6
   d81ba:	f7ff ff9f 	bl	d80fc <_ZN5Print5writeEPKc>
   d81be:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d81c0:	4650      	mov	r0, sl
   d81c2:	b003      	add	sp, #12
   d81c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d81c8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d81cc:	4b4e      	ldr	r3, [pc, #312]	; (d8308 <_ZN5Print10printFloatEdh+0x170>)
   d81ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d81d2:	4620      	mov	r0, r4
   d81d4:	4649      	mov	r1, r9
   d81d6:	f002 f879 	bl	da2cc <__aeabi_dcmpun>
   d81da:	b948      	cbnz	r0, d81f0 <_ZN5Print10printFloatEdh+0x58>
   d81dc:	4b4a      	ldr	r3, [pc, #296]	; (d8308 <_ZN5Print10printFloatEdh+0x170>)
   d81de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d81e2:	4620      	mov	r0, r4
   d81e4:	4649      	mov	r1, r9
   d81e6:	f002 f853 	bl	da290 <__aeabi_dcmple>
   d81ea:	b908      	cbnz	r0, d81f0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d81ec:	4947      	ldr	r1, [pc, #284]	; (d830c <_ZN5Print10printFloatEdh+0x174>)
   d81ee:	e7e3      	b.n	d81b8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d81f0:	4b47      	ldr	r3, [pc, #284]	; (d8310 <_ZN5Print10printFloatEdh+0x178>)
   d81f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d81f6:	4620      	mov	r0, r4
   d81f8:	4629      	mov	r1, r5
   d81fa:	f002 f85d 	bl	da2b8 <__aeabi_dcmpgt>
   d81fe:	b108      	cbz	r0, d8204 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d8200:	4944      	ldr	r1, [pc, #272]	; (d8314 <_ZN5Print10printFloatEdh+0x17c>)
   d8202:	e7d9      	b.n	d81b8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d8204:	4b44      	ldr	r3, [pc, #272]	; (d8318 <_ZN5Print10printFloatEdh+0x180>)
   d8206:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d820a:	4620      	mov	r0, r4
   d820c:	4629      	mov	r1, r5
   d820e:	f002 f835 	bl	da27c <__aeabi_dcmplt>
   d8212:	2800      	cmp	r0, #0
   d8214:	d1f4      	bne.n	d8200 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d8216:	2200      	movs	r2, #0
   d8218:	2300      	movs	r3, #0
   d821a:	4620      	mov	r0, r4
   d821c:	4629      	mov	r1, r5
   d821e:	f002 f82d 	bl	da27c <__aeabi_dcmplt>
   d8222:	b1d0      	cbz	r0, d825a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d8224:	212d      	movs	r1, #45	; 0x2d
   d8226:	4630      	mov	r0, r6
   d8228:	f7ff ff7e 	bl	d8128 <_ZN5Print5printEc>
     number = -number;
   d822c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d8230:	4682      	mov	sl, r0
     number = -number;
   d8232:	461d      	mov	r5, r3
  double rounding = 0.5;
   d8234:	4939      	ldr	r1, [pc, #228]	; (d831c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d8236:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d8324 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d823a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d823e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d8240:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d8244:	fa5f f38b 	uxtb.w	r3, fp
   d8248:	429f      	cmp	r7, r3
   d824a:	d908      	bls.n	d825e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d824c:	4642      	mov	r2, r8
   d824e:	464b      	mov	r3, r9
   d8250:	f001 fecc 	bl	d9fec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d8254:	f10b 0b01 	add.w	fp, fp, #1
   d8258:	e7f4      	b.n	d8244 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d825a:	4682      	mov	sl, r0
   d825c:	e7ea      	b.n	d8234 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d825e:	4622      	mov	r2, r4
   d8260:	462b      	mov	r3, r5
   d8262:	f001 fbe3 	bl	d9a2c <__adddf3>
   d8266:	460d      	mov	r5, r1
   d8268:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d826a:	f002 f86d 	bl	da348 <__aeabi_d2uiz>
   d826e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d8270:	f001 fd18 	bl	d9ca4 <__aeabi_ui2d>
   d8274:	4602      	mov	r2, r0
   d8276:	460b      	mov	r3, r1
   d8278:	4620      	mov	r0, r4
   d827a:	4629      	mov	r1, r5
   d827c:	f001 fbd4 	bl	d9a28 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d8280:	220a      	movs	r2, #10
   d8282:	4604      	mov	r4, r0
   d8284:	460d      	mov	r5, r1
   d8286:	4630      	mov	r0, r6
   d8288:	4641      	mov	r1, r8
   d828a:	f7ff ff66 	bl	d815a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d828e:	4482      	add	sl, r0
  if (digits > 0) {
   d8290:	b127      	cbz	r7, d829c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d8292:	4923      	ldr	r1, [pc, #140]	; (d8320 <_ZN5Print10printFloatEdh+0x188>)
   d8294:	4630      	mov	r0, r6
   d8296:	f7ff ff31 	bl	d80fc <_ZN5Print5writeEPKc>
    n += print(".");
   d829a:	4482      	add	sl, r0
    remainder *= 10.0;
   d829c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d8324 <_ZN5Print10printFloatEdh+0x18c>
   d82a0:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d82a4:	3f01      	subs	r7, #1
   d82a6:	b2ff      	uxtb	r7, r7
   d82a8:	2fff      	cmp	r7, #255	; 0xff
   d82aa:	d089      	beq.n	d81c0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d82ac:	4642      	mov	r2, r8
   d82ae:	464b      	mov	r3, r9
   d82b0:	4620      	mov	r0, r4
   d82b2:	4629      	mov	r1, r5
   d82b4:	f001 fd70 	bl	d9d98 <__aeabi_dmul>
   d82b8:	4604      	mov	r4, r0
   d82ba:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d82bc:	f002 f81c 	bl	da2f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d82c0:	f1b0 0b00 	subs.w	fp, r0, #0
   d82c4:	da1a      	bge.n	d82fc <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d82c6:	212d      	movs	r1, #45	; 0x2d
   d82c8:	4630      	mov	r0, r6
   d82ca:	f7ff ff2d 	bl	d8128 <_ZN5Print5printEc>
            val = -n;
   d82ce:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d82d2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d82d4:	220a      	movs	r2, #10
   d82d6:	4630      	mov	r0, r6
   d82d8:	9301      	str	r3, [sp, #4]
   d82da:	f7ff ff3e 	bl	d815a <_ZN5Print11printNumberEmh>
   d82de:	9b01      	ldr	r3, [sp, #4]
   d82e0:	4418      	add	r0, r3
    n += print(toPrint);
   d82e2:	4482      	add	sl, r0
    remainder -= toPrint;
   d82e4:	4658      	mov	r0, fp
   d82e6:	f001 fced 	bl	d9cc4 <__aeabi_i2d>
   d82ea:	4602      	mov	r2, r0
   d82ec:	460b      	mov	r3, r1
   d82ee:	4620      	mov	r0, r4
   d82f0:	4629      	mov	r1, r5
   d82f2:	f001 fb99 	bl	d9a28 <__aeabi_dsub>
   d82f6:	4604      	mov	r4, r0
   d82f8:	460d      	mov	r5, r1
  while (digits-- > 0)
   d82fa:	e7d3      	b.n	d82a4 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d82fc:	4659      	mov	r1, fp
        size_t t = 0;
   d82fe:	2300      	movs	r3, #0
   d8300:	e7e8      	b.n	d82d4 <_ZN5Print10printFloatEdh+0x13c>
   d8302:	bf00      	nop
   d8304:	000dd044 	.word	0x000dd044
   d8308:	7fefffff 	.word	0x7fefffff
   d830c:	000dd048 	.word	0x000dd048
   d8310:	41efffff 	.word	0x41efffff
   d8314:	000dd04c 	.word	0x000dd04c
   d8318:	c1efffff 	.word	0xc1efffff
   d831c:	3fe00000 	.word	0x3fe00000
   d8320:	000dcbcb 	.word	0x000dcbcb
   d8324:	40240000 	.word	0x40240000

000d8328 <_ZN5Print7printlnEdi>:
{
   d8328:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d832a:	b2c9      	uxtb	r1, r1
{
   d832c:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d832e:	f7ff ff33 	bl	d8198 <_ZN5Print10printFloatEdh>
   d8332:	4604      	mov	r4, r0
  n += println();
   d8334:	4628      	mov	r0, r5
   d8336:	f7ff fefa 	bl	d812e <_ZN5Print7printlnEv>
}
   d833a:	4420      	add	r0, r4
   d833c:	bd38      	pop	{r3, r4, r5, pc}

000d833e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d833e:	b510      	push	{r4, lr}
   d8340:	4604      	mov	r4, r0
   d8342:	f7fd f833 	bl	d53ac <_ZNSt14_Function_baseD1Ev>
   d8346:	4620      	mov	r0, r4
   d8348:	bd10      	pop	{r4, pc}
	...

000d834c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d834c:	4803      	ldr	r0, [pc, #12]	; (d835c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d834e:	4a04      	ldr	r2, [pc, #16]	; (d8360 <_GLOBAL__sub_I_RGB+0x14>)
   d8350:	4904      	ldr	r1, [pc, #16]	; (d8364 <_GLOBAL__sub_I_RGB+0x18>)
   d8352:	2300      	movs	r3, #0
   d8354:	6083      	str	r3, [r0, #8]
   d8356:	f001 b987 	b.w	d9668 <__aeabi_atexit>
   d835a:	bf00      	nop
   d835c:	2003e664 	.word	0x2003e664
   d8360:	2003e440 	.word	0x2003e440
   d8364:	000d833f 	.word	0x000d833f

000d8368 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8368:	b510      	push	{r4, lr}
   d836a:	4604      	mov	r4, r0
   d836c:	4608      	mov	r0, r1
{
    _spi = spi;
   d836e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d8370:	f7fe fd84 	bl	d6e7c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d8374:	2300      	movs	r3, #0
   d8376:	6063      	str	r3, [r4, #4]
}
   d8378:	4620      	mov	r0, r4
   d837a:	bd10      	pop	{r4, pc}

000d837c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d837c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8380:	ec57 6b10 	vmov	r6, r7, d0
   d8384:	4680      	mov	r8, r0
   d8386:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d8388:	ee10 0a10 	vmov	r0, s0
   d838c:	2200      	movs	r2, #0
   d838e:	2300      	movs	r3, #0
   d8390:	4639      	mov	r1, r7
   d8392:	f001 ff73 	bl	da27c <__aeabi_dcmplt>
   d8396:	b128      	cbz	r0, d83a4 <_Z4dtoadhPc+0x28>
        val = -val;
   d8398:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d839c:	461f      	mov	r7, r3
        *sout++ = '-';
   d839e:	232d      	movs	r3, #45	; 0x2d
   d83a0:	f804 3b01 	strb.w	r3, [r4], #1
   d83a4:	2300      	movs	r3, #0
    }
    long scale = 1;
   d83a6:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d83aa:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d83ac:	b2d9      	uxtb	r1, r3
   d83ae:	4588      	cmp	r8, r1
   d83b0:	d903      	bls.n	d83ba <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d83b2:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d83b6:	3301      	adds	r3, #1
   d83b8:	e7f8      	b.n	d83ac <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d83ba:	4648      	mov	r0, r9
   d83bc:	f001 fc82 	bl	d9cc4 <__aeabi_i2d>
   d83c0:	4632      	mov	r2, r6
   d83c2:	463b      	mov	r3, r7
   d83c4:	f001 fce8 	bl	d9d98 <__aeabi_dmul>
   d83c8:	4606      	mov	r6, r0
   d83ca:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d83cc:	f002 f844 	bl	da458 <__aeabi_d2ulz>
   d83d0:	4605      	mov	r5, r0
   d83d2:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d83d4:	f001 fcaa 	bl	d9d2c <__aeabi_ul2d>
   d83d8:	4602      	mov	r2, r0
   d83da:	460b      	mov	r3, r1
   d83dc:	4630      	mov	r0, r6
   d83de:	4639      	mov	r1, r7
   d83e0:	f001 fb22 	bl	d9a28 <__aeabi_dsub>
   d83e4:	4b13      	ldr	r3, [pc, #76]	; (d8434 <_Z4dtoadhPc+0xb8>)
   d83e6:	2200      	movs	r2, #0
   d83e8:	f001 ff5c 	bl	da2a4 <__aeabi_dcmpge>
   d83ec:	b110      	cbz	r0, d83f4 <_Z4dtoadhPc+0x78>
        fixed++;
   d83ee:	3501      	adds	r5, #1
   d83f0:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d83f4:	464a      	mov	r2, r9
   d83f6:	4628      	mov	r0, r5
   d83f8:	17d3      	asrs	r3, r2, #31
   d83fa:	4651      	mov	r1, sl
   d83fc:	f002 f814 	bl	da428 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d8400:	2301      	movs	r3, #1
   d8402:	4615      	mov	r5, r2
   d8404:	4621      	mov	r1, r4
   d8406:	220a      	movs	r2, #10
   d8408:	f000 ffc9 	bl	d939e <ultoa>
    if (prec) {
   d840c:	f1b8 0f00 	cmp.w	r8, #0
   d8410:	d00d      	beq.n	d842e <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d8412:	4620      	mov	r0, r4
   d8414:	f002 fa5d 	bl	da8d2 <strlen>
        *sout++ = '.';
   d8418:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d841a:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d841c:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d841e:	220a      	movs	r2, #10
   d8420:	4643      	mov	r3, r8
   d8422:	4628      	mov	r0, r5
   d8424:	3101      	adds	r1, #1
    }
}
   d8426:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d842a:	f000 bfb8 	b.w	d939e <ultoa>
}
   d842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8432:	bf00      	nop
   d8434:	3fe00000 	.word	0x3fe00000

000d8438 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8438:	b510      	push	{r4, lr}
   d843a:	4604      	mov	r4, r0
{
	free(buffer);
   d843c:	6800      	ldr	r0, [r0, #0]
   d843e:	f7fe fe99 	bl	d7174 <free>
}
   d8442:	4620      	mov	r0, r4
   d8444:	bd10      	pop	{r4, pc}

000d8446 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8446:	b510      	push	{r4, lr}
   d8448:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d844a:	6800      	ldr	r0, [r0, #0]
   d844c:	b108      	cbz	r0, d8452 <_ZN6String10invalidateEv+0xc>
   d844e:	f7fe fe91 	bl	d7174 <free>
	buffer = NULL;
   d8452:	2300      	movs	r3, #0
	capacity = len = 0;
   d8454:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8458:	6023      	str	r3, [r4, #0]
}
   d845a:	bd10      	pop	{r4, pc}

000d845c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d845c:	b538      	push	{r3, r4, r5, lr}
   d845e:	4604      	mov	r4, r0
   d8460:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8462:	6800      	ldr	r0, [r0, #0]
   d8464:	3101      	adds	r1, #1
   d8466:	f7fe fe8d 	bl	d7184 <realloc>
	if (newbuffer) {
   d846a:	b110      	cbz	r0, d8472 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d846c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d8470:	2001      	movs	r0, #1
	}
	return 0;
}
   d8472:	bd38      	pop	{r3, r4, r5, pc}

000d8474 <_ZN6String7reserveEj>:
{
   d8474:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8476:	6803      	ldr	r3, [r0, #0]
{
   d8478:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d847a:	b123      	cbz	r3, d8486 <_ZN6String7reserveEj+0x12>
   d847c:	6843      	ldr	r3, [r0, #4]
   d847e:	428b      	cmp	r3, r1
   d8480:	d301      	bcc.n	d8486 <_ZN6String7reserveEj+0x12>
   d8482:	2001      	movs	r0, #1
}
   d8484:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8486:	4620      	mov	r0, r4
   d8488:	f7ff ffe8 	bl	d845c <_ZN6String12changeBufferEj>
   d848c:	2800      	cmp	r0, #0
   d848e:	d0f9      	beq.n	d8484 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d8490:	68a3      	ldr	r3, [r4, #8]
   d8492:	2b00      	cmp	r3, #0
   d8494:	d1f5      	bne.n	d8482 <_ZN6String7reserveEj+0xe>
   d8496:	6822      	ldr	r2, [r4, #0]
   d8498:	7013      	strb	r3, [r2, #0]
   d849a:	e7f2      	b.n	d8482 <_ZN6String7reserveEj+0xe>

000d849c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d849c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d849e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d84a0:	4611      	mov	r1, r2
   d84a2:	9201      	str	r2, [sp, #4]
{
   d84a4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d84a6:	f7ff ffe5 	bl	d8474 <_ZN6String7reserveEj>
   d84aa:	9a01      	ldr	r2, [sp, #4]
   d84ac:	b928      	cbnz	r0, d84ba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d84ae:	4620      	mov	r0, r4
   d84b0:	f7ff ffc9 	bl	d8446 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d84b4:	4620      	mov	r0, r4
   d84b6:	b003      	add	sp, #12
   d84b8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d84ba:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d84bc:	4629      	mov	r1, r5
   d84be:	6820      	ldr	r0, [r4, #0]
   d84c0:	f002 f966 	bl	da790 <memcpy>
	buffer[len] = 0;
   d84c4:	6822      	ldr	r2, [r4, #0]
   d84c6:	68a3      	ldr	r3, [r4, #8]
   d84c8:	2100      	movs	r1, #0
   d84ca:	54d1      	strb	r1, [r2, r3]
	return *this;
   d84cc:	e7f2      	b.n	d84b4 <_ZN6String4copyEPKcj+0x18>

000d84ce <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d84ce:	4288      	cmp	r0, r1
{
   d84d0:	b510      	push	{r4, lr}
   d84d2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d84d4:	d005      	beq.n	d84e2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d84d6:	680b      	ldr	r3, [r1, #0]
   d84d8:	b12b      	cbz	r3, d84e6 <_ZN6StringaSERKS_+0x18>
   d84da:	688a      	ldr	r2, [r1, #8]
   d84dc:	4619      	mov	r1, r3
   d84de:	f7ff ffdd 	bl	d849c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d84e2:	4620      	mov	r0, r4
   d84e4:	bd10      	pop	{r4, pc}
	else invalidate();
   d84e6:	f7ff ffae 	bl	d8446 <_ZN6String10invalidateEv>
   d84ea:	e7fa      	b.n	d84e2 <_ZN6StringaSERKS_+0x14>

000d84ec <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d84ec:	b510      	push	{r4, lr}
	buffer = NULL;
   d84ee:	2300      	movs	r3, #0
String::String(const String &value)
   d84f0:	4604      	mov	r4, r0
	capacity = 0;
   d84f2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d84f6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d84f8:	7303      	strb	r3, [r0, #12]
	*this = value;
   d84fa:	f7ff ffe8 	bl	d84ce <_ZN6StringaSERKS_>
}
   d84fe:	4620      	mov	r0, r4
   d8500:	bd10      	pop	{r4, pc}

000d8502 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8502:	b513      	push	{r0, r1, r4, lr}
   d8504:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8506:	b159      	cbz	r1, d8520 <_ZN6StringaSEPKc+0x1e>
   d8508:	4608      	mov	r0, r1
   d850a:	9101      	str	r1, [sp, #4]
   d850c:	f002 f9e1 	bl	da8d2 <strlen>
   d8510:	9901      	ldr	r1, [sp, #4]
   d8512:	4602      	mov	r2, r0
   d8514:	4620      	mov	r0, r4
   d8516:	f7ff ffc1 	bl	d849c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d851a:	4620      	mov	r0, r4
   d851c:	b002      	add	sp, #8
   d851e:	bd10      	pop	{r4, pc}
	else invalidate();
   d8520:	f7ff ff91 	bl	d8446 <_ZN6String10invalidateEv>
   d8524:	e7f9      	b.n	d851a <_ZN6StringaSEPKc+0x18>

000d8526 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d8526:	b530      	push	{r4, r5, lr}
   d8528:	4604      	mov	r4, r0
	buffer = NULL;
   d852a:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d852c:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d852e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d8532:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d8534:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d8536:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d853a:	b2cd      	uxtb	r5, r1
   d853c:	f001 fbd4 	bl	d9ce8 <__aeabi_f2d>
   d8540:	ec41 0b10 	vmov	d0, r0, r1
   d8544:	a901      	add	r1, sp, #4
   d8546:	4628      	mov	r0, r5
   d8548:	f7ff ff18 	bl	d837c <_Z4dtoadhPc>
        *this = buf;
   d854c:	a901      	add	r1, sp, #4
   d854e:	4620      	mov	r0, r4
   d8550:	f7ff ffd7 	bl	d8502 <_ZN6StringaSEPKc>
}
   d8554:	4620      	mov	r0, r4
   d8556:	b00b      	add	sp, #44	; 0x2c
   d8558:	bd30      	pop	{r4, r5, pc}

000d855a <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d855a:	b510      	push	{r4, lr}
   d855c:	4604      	mov	r4, r0
   d855e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d8560:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d8562:	4608      	mov	r0, r1
	capacity = 0;
   d8564:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d8568:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d856a:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d856c:	a901      	add	r1, sp, #4
   d856e:	b2c0      	uxtb	r0, r0
   d8570:	f7ff ff04 	bl	d837c <_Z4dtoadhPc>
        *this = buf;
   d8574:	a901      	add	r1, sp, #4
   d8576:	4620      	mov	r0, r4
   d8578:	f7ff ffc3 	bl	d8502 <_ZN6StringaSEPKc>
}
   d857c:	4620      	mov	r0, r4
   d857e:	b00a      	add	sp, #40	; 0x28
   d8580:	bd10      	pop	{r4, pc}

000d8582 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d8582:	b570      	push	{r4, r5, r6, lr}
   d8584:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d8586:	460e      	mov	r6, r1
   d8588:	b909      	cbnz	r1, d858e <_ZN6String6concatEPKcj+0xc>
   d858a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d858c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d858e:	b16a      	cbz	r2, d85ac <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d8590:	6884      	ldr	r4, [r0, #8]
   d8592:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d8594:	4621      	mov	r1, r4
   d8596:	f7ff ff6d 	bl	d8474 <_ZN6String7reserveEj>
   d859a:	2800      	cmp	r0, #0
   d859c:	d0f5      	beq.n	d858a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d859e:	6828      	ldr	r0, [r5, #0]
   d85a0:	68ab      	ldr	r3, [r5, #8]
   d85a2:	4631      	mov	r1, r6
   d85a4:	4418      	add	r0, r3
   d85a6:	f002 f96e 	bl	da886 <strcpy>
	len = newlen;
   d85aa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d85ac:	2001      	movs	r0, #1
   d85ae:	e7ed      	b.n	d858c <_ZN6String6concatEPKcj+0xa>

000d85b0 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d85b0:	b513      	push	{r0, r1, r4, lr}
   d85b2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d85b4:	b929      	cbnz	r1, d85c2 <_ZplRK15StringSumHelperPKc+0x12>
   d85b6:	4620      	mov	r0, r4
   d85b8:	f7ff ff45 	bl	d8446 <_ZN6String10invalidateEv>
	return a;
}
   d85bc:	4620      	mov	r0, r4
   d85be:	b002      	add	sp, #8
   d85c0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d85c2:	4608      	mov	r0, r1
   d85c4:	9101      	str	r1, [sp, #4]
   d85c6:	f002 f984 	bl	da8d2 <strlen>
   d85ca:	9901      	ldr	r1, [sp, #4]
   d85cc:	4602      	mov	r2, r0
   d85ce:	4620      	mov	r0, r4
   d85d0:	f7ff ffd7 	bl	d8582 <_ZN6String6concatEPKcj>
   d85d4:	2800      	cmp	r0, #0
   d85d6:	d0ee      	beq.n	d85b6 <_ZplRK15StringSumHelperPKc+0x6>
   d85d8:	e7f0      	b.n	d85bc <_ZplRK15StringSumHelperPKc+0xc>

000d85da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d85da:	b510      	push	{r4, lr}
   d85dc:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d85de:	6800      	ldr	r0, [r0, #0]
   d85e0:	b118      	cbz	r0, d85ea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d85e2:	f7fe fdc7 	bl	d7174 <free>
            wakeupSource_ = nullptr;
   d85e6:	2300      	movs	r3, #0
   d85e8:	6023      	str	r3, [r4, #0]
        }
    }
   d85ea:	bd10      	pop	{r4, pc}

000d85ec <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d85ec:	b510      	push	{r4, lr}
   d85ee:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d85f0:	f7ff fff3 	bl	d85da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d85f4:	4620      	mov	r0, r4
   d85f6:	bd10      	pop	{r4, pc}

000d85f8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d85f8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d85fa:	4b09      	ldr	r3, [pc, #36]	; (d8620 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d85fc:	4c09      	ldr	r4, [pc, #36]	; (d8624 <_GLOBAL__sub_I_System+0x2c>)
   d85fe:	2202      	movs	r2, #2
   d8600:	2000      	movs	r0, #0
   d8602:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d8604:	4b08      	ldr	r3, [pc, #32]	; (d8628 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d8606:	6020      	str	r0, [r4, #0]
   d8608:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d860a:	71a0      	strb	r0, [r4, #6]
   d860c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d860e:	f7fe fce5 	bl	d6fdc <set_system_mode>
SystemClass System;
   d8612:	4620      	mov	r0, r4
   d8614:	4a05      	ldr	r2, [pc, #20]	; (d862c <_GLOBAL__sub_I_System+0x34>)
   d8616:	4906      	ldr	r1, [pc, #24]	; (d8630 <_GLOBAL__sub_I_System+0x38>)
   d8618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d861c:	f001 b824 	b.w	d9668 <__aeabi_atexit>
   d8620:	2003e680 	.word	0x2003e680
   d8624:	2003e674 	.word	0x2003e674
   d8628:	ffff0000 	.word	0xffff0000
   d862c:	2003e440 	.word	0x2003e440
   d8630:	000d85ed 	.word	0x000d85ed

000d8634 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8634:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8636:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d8638:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d863c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d863e:	2201      	movs	r2, #1
   d8640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8644:	f10d 0107 	add.w	r1, sp, #7
   d8648:	47a0      	blx	r4
}
   d864a:	b002      	add	sp, #8
   d864c:	bd10      	pop	{r4, pc}

000d864e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d864e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8650:	6803      	ldr	r3, [r0, #0]
   d8652:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8658:	46a4      	mov	ip, r4
}
   d865a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d865e:	4760      	bx	ip

000d8660 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8660:	b513      	push	{r0, r1, r4, lr}
   d8662:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d8664:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8666:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d866a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d866c:	f10d 0107 	add.w	r1, sp, #7
   d8670:	2201      	movs	r2, #1
   d8672:	47a0      	blx	r4
}
   d8674:	b002      	add	sp, #8
   d8676:	bd10      	pop	{r4, pc}

000d8678 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d8678:	4770      	bx	lr

000d867a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d867a:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d867c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d867e:	681a      	ldr	r2, [r3, #0]
   d8680:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d8682:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d8684:	da10      	bge.n	d86a8 <_ZN9TCPClient9connectedEv+0x2e>
   d8686:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d868a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d868e:	429a      	cmp	r2, r3
   d8690:	d10a      	bne.n	d86a8 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d8692:	6803      	ldr	r3, [r0, #0]
   d8694:	691b      	ldr	r3, [r3, #16]
   d8696:	4798      	blx	r3
        if (!rv) {
   d8698:	4604      	mov	r4, r0
   d869a:	b928      	cbnz	r0, d86a8 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d869c:	682b      	ldr	r3, [r5, #0]
   d869e:	4628      	mov	r0, r5
   d86a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d86a2:	4798      	blx	r3
        rv = available();
   d86a4:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d86a6:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d86a8:	2001      	movs	r0, #1
   d86aa:	e7fc      	b.n	d86a6 <_ZN9TCPClient9connectedEv+0x2c>

000d86ac <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d86ac:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d86ae:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d86b0:	43c0      	mvns	r0, r0
   d86b2:	0fc0      	lsrs	r0, r0, #31
   d86b4:	4770      	bx	lr

000d86b6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d86b6:	4770      	bx	lr

000d86b8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d86b8:	4b06      	ldr	r3, [pc, #24]	; (d86d4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d86ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d86bc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d86be:	f100 040c 	add.w	r4, r0, #12
	    ||
   d86c2:	d005      	beq.n	d86d0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d86c4:	4608      	mov	r0, r1
   d86c6:	f001 f88f 	bl	d97e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d86ca:	2800      	cmp	r0, #0
	return nullptr;
   d86cc:	bf08      	it	eq
   d86ce:	2400      	moveq	r4, #0
      }
   d86d0:	4620      	mov	r0, r4
   d86d2:	bd10      	pop	{r4, pc}
   d86d4:	000dcf10 	.word	0x000dcf10

000d86d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d86d8:	b510      	push	{r4, lr}
   d86da:	21ac      	movs	r1, #172	; 0xac
   d86dc:	4604      	mov	r4, r0
   d86de:	f000 ffc8 	bl	d9672 <_ZdlPvj>
   d86e2:	4620      	mov	r0, r4
   d86e4:	bd10      	pop	{r4, pc}

000d86e6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d86e6:	f7fb bcda 	b.w	d409e <_ZdlPv>

000d86ea <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d86ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d86ee:	f04f 0800 	mov.w	r8, #0
   d86f2:	b086      	sub	sp, #24
   d86f4:	461d      	mov	r5, r3
   d86f6:	f8c0 8004 	str.w	r8, [r0, #4]
   d86fa:	4604      	mov	r4, r0
   d86fc:	460e      	mov	r6, r1
   d86fe:	4617      	mov	r7, r2
    struct timeval tv = {};
   d8700:	4641      	mov	r1, r8
   d8702:	2210      	movs	r2, #16
   d8704:	a802      	add	r0, sp, #8
   d8706:	f002 f86b 	bl	da7e0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d870a:	1c6b      	adds	r3, r5, #1
   d870c:	d009      	beq.n	d8722 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d870e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d8712:	fbb5 f3f0 	udiv	r3, r5, r0
   d8716:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d871a:	fb00 5313 	mls	r3, r0, r3, r5
   d871e:	4358      	muls	r0, r3
   d8720:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d8722:	6960      	ldr	r0, [r4, #20]
   d8724:	2310      	movs	r3, #16
   d8726:	9300      	str	r3, [sp, #0]
   d8728:	6800      	ldr	r0, [r0, #0]
   d872a:	ab02      	add	r3, sp, #8
   d872c:	f241 0205 	movw	r2, #4101	; 0x1005
   d8730:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8734:	f7fe fb62 	bl	d6dfc <sock_setsockopt>
    if (ret < 0) {
   d8738:	2800      	cmp	r0, #0
   d873a:	da07      	bge.n	d874c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d873c:	f7fe fd42 	bl	d71c4 <__errno>
   d8740:	6803      	ldr	r3, [r0, #0]
   d8742:	6063      	str	r3, [r4, #4]
        return 0;
   d8744:	2000      	movs	r0, #0
}
   d8746:	b006      	add	sp, #24
   d8748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d874c:	6960      	ldr	r0, [r4, #20]
   d874e:	2300      	movs	r3, #0
   d8750:	6800      	ldr	r0, [r0, #0]
   d8752:	463a      	mov	r2, r7
   d8754:	4631      	mov	r1, r6
   d8756:	f7fe fb79 	bl	d6e4c <sock_send>
    if (ret < 0) {
   d875a:	1e03      	subs	r3, r0, #0
   d875c:	dbee      	blt.n	d873c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d875e:	4618      	mov	r0, r3
   d8760:	e7f1      	b.n	d8746 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d8764 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d8764:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8766:	694d      	ldr	r5, [r1, #20]
   d8768:	4b05      	ldr	r3, [pc, #20]	; (d8780 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d876a:	4604      	mov	r4, r0
   d876c:	358c      	adds	r5, #140	; 0x8c
   d876e:	f844 3b04 	str.w	r3, [r4], #4
   d8772:	4606      	mov	r6, r0
   d8774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8778:	682b      	ldr	r3, [r5, #0]
   d877a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d877c:	4630      	mov	r0, r6
   d877e:	bd70      	pop	{r4, r5, r6, pc}
   d8780:	000dcfdc 	.word	0x000dcfdc

000d8784 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d8784:	b510      	push	{r4, lr}
   d8786:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8788:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d878c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8790:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d8792:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8794:	d005      	beq.n	d87a2 <_ZN9TCPClient4peekEv+0x1e>
   d8796:	6963      	ldr	r3, [r4, #20]
   d8798:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d879c:	4413      	add	r3, r2
   d879e:	7918      	ldrb	r0, [r3, #4]
}
   d87a0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d87a2:	6803      	ldr	r3, [r0, #0]
   d87a4:	691b      	ldr	r3, [r3, #16]
   d87a6:	4798      	blx	r3
   d87a8:	2800      	cmp	r0, #0
   d87aa:	d1f4      	bne.n	d8796 <_ZN9TCPClient4peekEv+0x12>
   d87ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d87b0:	e7f6      	b.n	d87a0 <_ZN9TCPClient4peekEv+0x1c>

000d87b2 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d87b2:	b510      	push	{r4, lr}
   d87b4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d87b6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d87ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d87be:	429a      	cmp	r2, r3
int TCPClient::read() {
   d87c0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d87c2:	d008      	beq.n	d87d6 <_ZN9TCPClient4readEv+0x24>
   d87c4:	6963      	ldr	r3, [r4, #20]
   d87c6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d87ca:	1c51      	adds	r1, r2, #1
   d87cc:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d87d0:	4413      	add	r3, r2
   d87d2:	7918      	ldrb	r0, [r3, #4]
}
   d87d4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d87d6:	6803      	ldr	r3, [r0, #0]
   d87d8:	691b      	ldr	r3, [r3, #16]
   d87da:	4798      	blx	r3
   d87dc:	2800      	cmp	r0, #0
   d87de:	d1f1      	bne.n	d87c4 <_ZN9TCPClient4readEv+0x12>
   d87e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d87e4:	e7f6      	b.n	d87d4 <_ZN9TCPClient4readEv+0x22>

000d87e6 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d87e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d87e8:	6943      	ldr	r3, [r0, #20]
   d87ea:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d87ec:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d87f0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d87f4:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d87f6:	4605      	mov	r5, r0
   d87f8:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d87fa:	d016      	beq.n	d882a <_ZN9TCPClient4readEPhj+0x44>
   d87fc:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d87fe:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8802:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d8806:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8808:	42bc      	cmp	r4, r7
   d880a:	bf28      	it	cs
   d880c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d880e:	3304      	adds	r3, #4
   d8810:	4622      	mov	r2, r4
   d8812:	4419      	add	r1, r3
   d8814:	4630      	mov	r0, r6
   d8816:	f001 ffbb 	bl	da790 <memcpy>
   d881a:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d881c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8820:	4423      	add	r3, r4
   d8822:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d8826:	4620      	mov	r0, r4
   d8828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d882a:	6803      	ldr	r3, [r0, #0]
   d882c:	691b      	ldr	r3, [r3, #16]
   d882e:	4798      	blx	r3
   d8830:	2800      	cmp	r0, #0
   d8832:	d1e3      	bne.n	d87fc <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d8834:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d8838:	e7f5      	b.n	d8826 <_ZN9TCPClient4readEPhj+0x40>

000d883a <_ZN9TCPClient12flush_bufferEv>:
   d883a:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d883c:	2300      	movs	r3, #0
   d883e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d8842:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d8844:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d8848:	4770      	bx	lr

000d884a <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d884a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d884e:	461f      	mov	r7, r3
    stop();
   d8850:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8852:	460c      	mov	r4, r1
    stop();
   d8854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8856:	b08a      	sub	sp, #40	; 0x28
   d8858:	4605      	mov	r5, r0
   d885a:	4616      	mov	r6, r2
    stop();
   d885c:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d885e:	7d23      	ldrb	r3, [r4, #20]
   d8860:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d8864:	2b04      	cmp	r3, #4
   d8866:	bf0c      	ite	eq
   d8868:	2002      	moveq	r0, #2
   d886a:	200a      	movne	r0, #10
   d886c:	2206      	movs	r2, #6
   d886e:	2101      	movs	r1, #1
   d8870:	f7fe fafc 	bl	d6e6c <sock_socket>
   d8874:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8878:	696b      	ldr	r3, [r5, #20]
   d887a:	681b      	ldr	r3, [r3, #0]
   d887c:	2b00      	cmp	r3, #0
   d887e:	da08      	bge.n	d8892 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d8880:	682b      	ldr	r3, [r5, #0]
   d8882:	4628      	mov	r0, r5
   d8884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8886:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d8888:	4798      	blx	r3
}
   d888a:	4620      	mov	r0, r4
   d888c:	b00a      	add	sp, #40	; 0x28
   d888e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d8892:	4628      	mov	r0, r5
   d8894:	f7ff ffd1 	bl	d883a <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d8898:	b1b7      	cbz	r7, d88c8 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d889a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d889c:	a903      	add	r1, sp, #12
   d889e:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d88a0:	9303      	str	r3, [sp, #12]
   d88a2:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d88a6:	f7fe fa69 	bl	d6d7c <if_index_to_name>
   d88aa:	2800      	cmp	r0, #0
   d88ac:	d1e8      	bne.n	d8880 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d88ae:	6968      	ldr	r0, [r5, #20]
   d88b0:	2306      	movs	r3, #6
   d88b2:	9300      	str	r3, [sp, #0]
   d88b4:	6800      	ldr	r0, [r0, #0]
   d88b6:	ab03      	add	r3, sp, #12
   d88b8:	f241 020b 	movw	r2, #4107	; 0x100b
   d88bc:	f640 71ff 	movw	r1, #4095	; 0xfff
   d88c0:	f7fe fa9c 	bl	d6dfc <sock_setsockopt>
   d88c4:	2800      	cmp	r0, #0
   d88c6:	d1db      	bne.n	d8880 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d88c8:	221c      	movs	r2, #28
   d88ca:	2100      	movs	r1, #0
   d88cc:	a803      	add	r0, sp, #12
   d88ce:	f001 ff87 	bl	da7e0 <memset>
    if (ip.version() == 4) {
   d88d2:	7d23      	ldrb	r3, [r4, #20]
   d88d4:	2b04      	cmp	r3, #4
   d88d6:	d11d      	bne.n	d8914 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d88d8:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d88dc:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d88de:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d88e2:	f7fe fa6b 	bl	d6dbc <inet_htons>
   d88e6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d88ea:	6860      	ldr	r0, [r4, #4]
   d88ec:	f7fe fa56 	bl	d6d9c <inet_htonl>
   d88f0:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d88f2:	696b      	ldr	r3, [r5, #20]
   d88f4:	221c      	movs	r2, #28
   d88f6:	6818      	ldr	r0, [r3, #0]
   d88f8:	a903      	add	r1, sp, #12
   d88fa:	f7fe fa8f 	bl	d6e1c <sock_connect>
   d88fe:	2800      	cmp	r0, #0
   d8900:	d1be      	bne.n	d8880 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d8902:	3404      	adds	r4, #4
   d8904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8906:	696d      	ldr	r5, [r5, #20]
   d8908:	358c      	adds	r5, #140	; 0x8c
   d890a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d890c:	6823      	ldr	r3, [r4, #0]
   d890e:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d8910:	2401      	movs	r4, #1
   d8912:	e7ba      	b.n	d888a <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d8914:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d8918:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d891a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d891e:	f7fe fa4d 	bl	d6dbc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8922:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d8924:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8928:	1d23      	adds	r3, r4, #4
   d892a:	f104 0714 	add.w	r7, r4, #20
   d892e:	6818      	ldr	r0, [r3, #0]
   d8930:	6859      	ldr	r1, [r3, #4]
   d8932:	4632      	mov	r2, r6
   d8934:	c203      	stmia	r2!, {r0, r1}
   d8936:	3308      	adds	r3, #8
   d8938:	42bb      	cmp	r3, r7
   d893a:	4616      	mov	r6, r2
   d893c:	d1f7      	bne.n	d892e <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d893e:	e7d8      	b.n	d88f2 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d8940 <_ZN9TCPClient9availableEv>:
{
   d8940:	b530      	push	{r4, r5, lr}
   d8942:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d8944:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d8948:	b08b      	sub	sp, #44	; 0x2c
   d894a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d894c:	b12b      	cbz	r3, d895a <_ZN9TCPClient9availableEv+0x1a>
   d894e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8952:	429a      	cmp	r2, r3
   d8954:	d101      	bne.n	d895a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d8956:	f7ff ff70 	bl	d883a <_ZN9TCPClient12flush_bufferEv>
   d895a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d895c:	6808      	ldr	r0, [r1, #0]
   d895e:	2800      	cmp	r0, #0
   d8960:	db18      	blt.n	d8994 <_ZN9TCPClient9availableEv+0x54>
   d8962:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d8966:	2d7f      	cmp	r5, #127	; 0x7f
   d8968:	d814      	bhi.n	d8994 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d896a:	3104      	adds	r1, #4
   d896c:	2308      	movs	r3, #8
   d896e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8972:	4429      	add	r1, r5
   d8974:	f7fe fa5a 	bl	d6e2c <sock_recv>
            if (ret > 0) {
   d8978:	2800      	cmp	r0, #0
   d897a:	dd13      	ble.n	d89a4 <_ZN9TCPClient9availableEv+0x64>
   d897c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d897e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8982:	b90a      	cbnz	r2, d8988 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d8984:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8988:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d898a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d898e:	4410      	add	r0, r2
   d8990:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d8994:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d8996:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d899a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d899e:	1ac0      	subs	r0, r0, r3
   d89a0:	b00b      	add	sp, #44	; 0x2c
   d89a2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d89a4:	f7fe fc0e 	bl	d71c4 <__errno>
   d89a8:	6803      	ldr	r3, [r0, #0]
   d89aa:	2b0b      	cmp	r3, #11
   d89ac:	d0f2      	beq.n	d8994 <_ZN9TCPClient9availableEv+0x54>
   d89ae:	f7fe fc09 	bl	d71c4 <__errno>
   d89b2:	6803      	ldr	r3, [r0, #0]
   d89b4:	2b0b      	cmp	r3, #11
   d89b6:	d0ed      	beq.n	d8994 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d89b8:	2320      	movs	r3, #32
   d89ba:	2500      	movs	r5, #0
   d89bc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d89c0:	f7fe fc00 	bl	d71c4 <__errno>
   d89c4:	6803      	ldr	r3, [r0, #0]
   d89c6:	9301      	str	r3, [sp, #4]
   d89c8:	4b08      	ldr	r3, [pc, #32]	; (d89ec <_ZN9TCPClient9availableEv+0xac>)
   d89ca:	4909      	ldr	r1, [pc, #36]	; (d89f0 <_ZN9TCPClient9availableEv+0xb0>)
   d89cc:	9300      	str	r3, [sp, #0]
   d89ce:	aa02      	add	r2, sp, #8
   d89d0:	462b      	mov	r3, r5
   d89d2:	2032      	movs	r0, #50	; 0x32
   d89d4:	f7fe faf2 	bl	d6fbc <log_message>
                    sock_close(d_->sock);
   d89d8:	6963      	ldr	r3, [r4, #20]
   d89da:	6818      	ldr	r0, [r3, #0]
   d89dc:	f7fe fa16 	bl	d6e0c <sock_close>
   d89e0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d89e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d89e6:	601a      	str	r2, [r3, #0]
   d89e8:	e7d4      	b.n	d8994 <_ZN9TCPClient9availableEv+0x54>
   d89ea:	bf00      	nop
   d89ec:	000dd057 	.word	0x000dd057
   d89f0:	000dd050 	.word	0x000dd050

000d89f4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d89f4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d89f6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d89f8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d89fa:	6818      	ldr	r0, [r3, #0]
   d89fc:	2800      	cmp	r0, #0
   d89fe:	db01      	blt.n	d8a04 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8a00:	f7fe fa04 	bl	d6e0c <sock_close>
   d8a04:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d8a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8a0a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d8a0c:	6960      	ldr	r0, [r4, #20]
   d8a0e:	2211      	movs	r2, #17
   d8a10:	2100      	movs	r1, #0
   d8a12:	308c      	adds	r0, #140	; 0x8c
   d8a14:	f001 fee4 	bl	da7e0 <memset>
    flush_buffer();
   d8a18:	4620      	mov	r0, r4
}
   d8a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d8a1e:	f7ff bf0c 	b.w	d883a <_ZN9TCPClient12flush_bufferEv>

000d8a22 <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   d8a22:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d8a24:	6818      	ldr	r0, [r3, #0]
}
   d8a26:	43c0      	mvns	r0, r0
   d8a28:	0fc0      	lsrs	r0, r0, #31
   d8a2a:	4770      	bx	lr

000d8a2c <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d8a2c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8a2e:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d8a30:	4604      	mov	r4, r0
          total(0) {
   d8a32:	6001      	str	r1, [r0, #0]
   d8a34:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d8a38:	3088      	adds	r0, #136	; 0x88
   d8a3a:	f7fe ffcf 	bl	d79dc <_ZN9IPAddressC1Ev>
}
   d8a3e:	4620      	mov	r0, r4
   d8a40:	bd10      	pop	{r4, pc}
	...

000d8a44 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d8a44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8a46:	2300      	movs	r3, #0
   d8a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8a4c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8a50:	4a0e      	ldr	r2, [pc, #56]	; (d8a8c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d8a52:	6103      	str	r3, [r0, #16]
   d8a54:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d8a56:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d8a58:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8a5a:	20ac      	movs	r0, #172	; 0xac
   d8a5c:	9101      	str	r1, [sp, #4]
   d8a5e:	f7fb fb1a 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d8a62:	1e05      	subs	r5, r0, #0
   d8a64:	f105 060c 	add.w	r6, r5, #12
   d8a68:	d008      	beq.n	d8a7c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d8a6a:	2301      	movs	r3, #1
   d8a6c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8a70:	4b07      	ldr	r3, [pc, #28]	; (d8a90 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8a72:	9901      	ldr	r1, [sp, #4]
   d8a74:	602b      	str	r3, [r5, #0]
   d8a76:	4630      	mov	r0, r6
   d8a78:	f7ff ffd8 	bl	d8a2c <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d8a7c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d8a7e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d8a82:	f7ff feda 	bl	d883a <_ZN9TCPClient12flush_bufferEv>
}
   d8a86:	b002      	add	sp, #8
   d8a88:	bd70      	pop	{r4, r5, r6, pc}
   d8a8a:	bf00      	nop
   d8a8c:	000dd08c 	.word	0x000dd08c
   d8a90:	000dd070 	.word	0x000dd070

000d8a94 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d8a94:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8a96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   d8a9a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8a9c:	f7ff ffd2 	bl	d8a44 <_ZN9TCPClientC1Ei>
}
   d8aa0:	4620      	mov	r0, r4
   d8aa2:	bd10      	pop	{r4, pc}

000d8aa4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8aa4:	b510      	push	{r4, lr}
   d8aa6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8aa8:	6800      	ldr	r0, [r0, #0]
   d8aaa:	2800      	cmp	r0, #0
   d8aac:	db01      	blt.n	d8ab2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8aae:	f7fe f9ad 	bl	d6e0c <sock_close>
    }
}
   d8ab2:	4620      	mov	r0, r4
   d8ab4:	bd10      	pop	{r4, pc}

000d8ab6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d8ab6:	300c      	adds	r0, #12
   d8ab8:	f7ff bff4 	b.w	d8aa4 <_ZN9TCPClient4DataD1Ev>

000d8abc <_ZN9IPAddressaSIPKhEERS_T_>:
    IPAddress& operator=(T address) {
   d8abc:	b570      	push	{r4, r5, r6, lr}
   d8abe:	b086      	sub	sp, #24
   d8ac0:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d8ac2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d8ac4:	4668      	mov	r0, sp
   d8ac6:	f7fe ffd9 	bl	d7a7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8acc:	1d34      	adds	r4, r6, #4
   d8ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8ad0:	682b      	ldr	r3, [r5, #0]
   d8ad2:	7023      	strb	r3, [r4, #0]
    }
   d8ad4:	4630      	mov	r0, r6
   d8ad6:	b006      	add	sp, #24
   d8ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8adc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8ae0:	4698      	mov	r8, r3
    stop();
   d8ae2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8ae4:	b093      	sub	sp, #76	; 0x4c
   d8ae6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8ae8:	2400      	movs	r4, #0
    stop();
   d8aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8aec:	4606      	mov	r6, r0
   d8aee:	4617      	mov	r7, r2
    stop();
   d8af0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8af2:	4628      	mov	r0, r5
   d8af4:	466b      	mov	r3, sp
   d8af6:	4622      	mov	r2, r4
   d8af8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d8afa:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8afc:	f7fe f96e 	bl	d6ddc <netdb_getaddrinfo>
   d8b00:	4605      	mov	r5, r0
   d8b02:	2800      	cmp	r0, #0
   d8b04:	d163      	bne.n	d8bce <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d8b06:	9b00      	ldr	r3, [sp, #0]
   d8b08:	2b00      	cmp	r3, #0
   d8b0a:	d04b      	beq.n	d8ba4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8b0c:	695b      	ldr	r3, [r3, #20]
   d8b0e:	2b00      	cmp	r3, #0
   d8b10:	d048      	beq.n	d8ba4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d8b12:	a806      	add	r0, sp, #24
   d8b14:	f7fe ff62 	bl	d79dc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8b18:	9b00      	ldr	r3, [sp, #0]
   d8b1a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8b1c:	7863      	ldrb	r3, [r4, #1]
   d8b1e:	2b02      	cmp	r3, #2
   d8b20:	d104      	bne.n	d8b2c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8b22:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8b24:	a806      	add	r0, sp, #24
   d8b26:	f7ff ffc9 	bl	d8abc <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d8b2a:	e026      	b.n	d8b7a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8b2c:	2b0a      	cmp	r3, #10
   d8b2e:	d124      	bne.n	d8b7a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8b30:	2211      	movs	r2, #17
   d8b32:	4629      	mov	r1, r5
   d8b34:	a801      	add	r0, sp, #4
   d8b36:	f001 fe53 	bl	da7e0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8b3a:	68a3      	ldr	r3, [r4, #8]
   d8b3c:	2b00      	cmp	r3, #0
   d8b3e:	d038      	beq.n	d8bb2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8b40:	f104 0308 	add.w	r3, r4, #8
   d8b44:	f10d 0c04 	add.w	ip, sp, #4
   d8b48:	3418      	adds	r4, #24
   d8b4a:	6818      	ldr	r0, [r3, #0]
   d8b4c:	6859      	ldr	r1, [r3, #4]
   d8b4e:	4662      	mov	r2, ip
   d8b50:	c203      	stmia	r2!, {r0, r1}
   d8b52:	3308      	adds	r3, #8
   d8b54:	42a3      	cmp	r3, r4
   d8b56:	4694      	mov	ip, r2
   d8b58:	d1f7      	bne.n	d8b4a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d8b5a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8b5c:	a901      	add	r1, sp, #4
   d8b5e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d8b60:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8b64:	f7fe ff48 	bl	d79f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d8b68:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d8b6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8b70:	ac07      	add	r4, sp, #28
   d8b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b74:	f8dc 3000 	ldr.w	r3, [ip]
   d8b78:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d8b7a:	a806      	add	r0, sp, #24
   d8b7c:	f7fe ff4e 	bl	d7a1c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8b80:	b180      	cbz	r0, d8ba4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d8b82:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8b84:	ad07      	add	r5, sp, #28
   d8b86:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8b8a:	4b12      	ldr	r3, [pc, #72]	; (d8bd4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d8b8c:	930c      	str	r3, [sp, #48]	; 0x30
   d8b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8b90:	ac0d      	add	r4, sp, #52	; 0x34
   d8b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8b94:	682b      	ldr	r3, [r5, #0]
   d8b96:	7023      	strb	r3, [r4, #0]
   d8b98:	463a      	mov	r2, r7
   d8b9a:	4643      	mov	r3, r8
   d8b9c:	a90c      	add	r1, sp, #48	; 0x30
   d8b9e:	4630      	mov	r0, r6
   d8ba0:	47c8      	blx	r9
   d8ba2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8ba4:	9800      	ldr	r0, [sp, #0]
   d8ba6:	f7fe f911 	bl	d6dcc <netdb_freeaddrinfo>
}
   d8baa:	4628      	mov	r0, r5
   d8bac:	b013      	add	sp, #76	; 0x4c
   d8bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8bb2:	68e3      	ldr	r3, [r4, #12]
   d8bb4:	2b00      	cmp	r3, #0
   d8bb6:	d1c3      	bne.n	d8b40 <_ZN9TCPClient7connectEPKctm+0x64>
   d8bb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8bbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8bc0:	f7fe f8ec 	bl	d6d9c <inet_htonl>
   d8bc4:	4581      	cmp	r9, r0
   d8bc6:	d1bb      	bne.n	d8b40 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d8bc8:	f104 0114 	add.w	r1, r4, #20
   d8bcc:	e7aa      	b.n	d8b24 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8bce:	4625      	mov	r5, r4
   d8bd0:	e7e8      	b.n	d8ba4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8bd2:	bf00      	nop
   d8bd4:	000dcfdc 	.word	0x000dcfdc

000d8bd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8bd8:	4b02      	ldr	r3, [pc, #8]	; (d8be4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8bda:	681a      	ldr	r2, [r3, #0]
   d8bdc:	4b02      	ldr	r3, [pc, #8]	; (d8be8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8bde:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d8be0:	4770      	bx	lr
   d8be2:	bf00      	nop
   d8be4:	2003e268 	.word	0x2003e268
   d8be8:	2003e684 	.word	0x2003e684

000d8bec <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d8bec:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d8bee:	6804      	ldr	r4, [r0, #0]
   d8bf0:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d8bf2:	46a4      	mov	ip, r4
    }
   d8bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d8bf8:	4760      	bx	ip

000d8bfa <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d8bfa:	6803      	ldr	r3, [r0, #0]
   d8bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8bfe:	4718      	bx	r3

000d8c00 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d8c00:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d8c02:	4770      	bx	lr

000d8c04 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d8c04:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d8c06:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d8c08:	1a10      	subs	r0, r2, r0
   d8c0a:	4770      	bx	lr

000d8c0c <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d8c0c:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d8c0e:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d8c10:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d8c14:	68db      	ldr	r3, [r3, #12]
   d8c16:	2201      	movs	r2, #1
   d8c18:	f10d 0107 	add.w	r1, sp, #7
   d8c1c:	4798      	blx	r3
}
   d8c1e:	b003      	add	sp, #12
   d8c20:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c24 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d8c24:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d8c26:	6803      	ldr	r3, [r0, #0]
   d8c28:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d8c2a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d8c2c:	4798      	blx	r3
   d8c2e:	b128      	cbz	r0, d8c3c <_ZN3UDP4readEv+0x18>
   d8c30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8c32:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d8c34:	1c59      	adds	r1, r3, #1
   d8c36:	86e1      	strh	r1, [r4, #54]	; 0x36
   d8c38:	5cd0      	ldrb	r0, [r2, r3]
}
   d8c3a:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d8c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8c40:	e7fb      	b.n	d8c3a <_ZN3UDP4readEv+0x16>

000d8c42 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d8c42:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d8c44:	6803      	ldr	r3, [r0, #0]
   d8c46:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d8c48:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d8c4a:	4798      	blx	r3
   d8c4c:	b118      	cbz	r0, d8c56 <_ZN3UDP4peekEv+0x14>
   d8c4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8c50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d8c52:	5cd0      	ldrb	r0, [r2, r3]
}
   d8c54:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d8c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8c5a:	e7fb      	b.n	d8c54 <_ZN3UDP4peekEv+0x12>

000d8c5c <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d8c5c:	4770      	bx	lr

000d8c5e <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d8c5e:	b410      	push	{r4}
   d8c60:	4603      	mov	r3, r0
   d8c62:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d8c64:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d8c66:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d8c68:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d8c6a:	6803      	ldr	r3, [r0, #0]
   d8c6c:	1a52      	subs	r2, r2, r1
   d8c6e:	68db      	ldr	r3, [r3, #12]
   d8c70:	4421      	add	r1, r4
}
   d8c72:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d8c76:	4718      	bx	r3

000d8c78 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d8c78:	f1a0 0010 	sub.w	r0, r0, #16
   d8c7c:	f7ff bfef 	b.w	d8c5e <_ZNK3UDP7printToER5Print>

000d8c80 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d8c80:	b570      	push	{r4, r5, r6, lr}
    stop();
   d8c82:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d8c84:	b08c      	sub	sp, #48	; 0x30
    stop();
   d8c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d8c88:	4604      	mov	r4, r0
   d8c8a:	460e      	mov	r6, r1
   d8c8c:	4615      	mov	r5, r2
    stop();
   d8c8e:	4798      	blx	r3
    const int one = 1;
   d8c90:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d8c92:	221c      	movs	r2, #28
   d8c94:	2100      	movs	r1, #0
   d8c96:	a805      	add	r0, sp, #20
    const int one = 1;
   d8c98:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d8c9a:	f001 fda1 	bl	da7e0 <memset>
    saddr.sin6_len = sizeof(saddr);
   d8c9e:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d8ca2:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d8ca4:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d8ca8:	f7fe f888 	bl	d6dbc <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8cac:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d8cae:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8cb2:	2102      	movs	r1, #2
   d8cb4:	200a      	movs	r0, #10
   d8cb6:	f7fe f8d9 	bl	d6e6c <sock_socket>
    if (_sock < 0) {
   d8cba:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d8cbc:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d8cbe:	db25      	blt.n	d8d0c <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d8cc0:	2204      	movs	r2, #4
   d8cc2:	9200      	str	r2, [sp, #0]
   d8cc4:	ab02      	add	r3, sp, #8
   d8cc6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8cca:	f7fe f897 	bl	d6dfc <sock_setsockopt>
   d8cce:	b9e8      	cbnz	r0, d8d0c <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d8cd0:	b195      	cbz	r5, d8cf8 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d8cd2:	9003      	str	r0, [sp, #12]
   d8cd4:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d8cd8:	a903      	add	r1, sp, #12
   d8cda:	b2e8      	uxtb	r0, r5
   d8cdc:	f7fe f84e 	bl	d6d7c <if_index_to_name>
   d8ce0:	b9a0      	cbnz	r0, d8d0c <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d8ce2:	2306      	movs	r3, #6
   d8ce4:	9300      	str	r3, [sp, #0]
   d8ce6:	6960      	ldr	r0, [r4, #20]
   d8ce8:	ab03      	add	r3, sp, #12
   d8cea:	f241 020b 	movw	r2, #4107	; 0x100b
   d8cee:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8cf2:	f7fe f883 	bl	d6dfc <sock_setsockopt>
   d8cf6:	b948      	cbnz	r0, d8d0c <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d8cf8:	6960      	ldr	r0, [r4, #20]
   d8cfa:	221c      	movs	r2, #28
   d8cfc:	a905      	add	r1, sp, #20
   d8cfe:	f7fe f875 	bl	d6dec <sock_bind>
   d8d02:	b918      	cbnz	r0, d8d0c <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d8d04:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d8d06:	2001      	movs	r0, #1
}
   d8d08:	b00c      	add	sp, #48	; 0x30
   d8d0a:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d8d0c:	6823      	ldr	r3, [r4, #0]
   d8d0e:	4620      	mov	r0, r4
   d8d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8d12:	4798      	blx	r3
   d8d14:	2000      	movs	r0, #0
   d8d16:	e7f7      	b.n	d8d08 <_ZN3UDP5beginEtm+0x88>

000d8d18 <_ZN3UDP4stopEv>:
void UDP::stop() {
   d8d18:	b510      	push	{r4, lr}
   d8d1a:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d8d1c:	6940      	ldr	r0, [r0, #20]
   d8d1e:	2800      	cmp	r0, #0
   d8d20:	db01      	blt.n	d8d26 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d8d22:	f7fe f873 	bl	d6e0c <sock_close>
    _sock = -1;
   d8d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8d2a:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d8d2c:	2300      	movs	r3, #0
   d8d2e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d8d30:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d8d32:	bd10      	pop	{r4, pc}

000d8d34 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d8d34:	b570      	push	{r4, r5, r6, lr}
   d8d36:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d8d38:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8d3a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d8d3c:	b168      	cbz	r0, d8d5a <_ZN3UDP5writeEPKhj+0x26>
   d8d3e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d8d40:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d8d42:	4294      	cmp	r4, r2
   d8d44:	bf28      	it	cs
   d8d46:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d8d48:	4622      	mov	r2, r4
   d8d4a:	4430      	add	r0, r6
   d8d4c:	f001 fd20 	bl	da790 <memcpy>
    _offset += size;
   d8d50:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d8d52:	4423      	add	r3, r4
   d8d54:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d8d56:	4620      	mov	r0, r4
   d8d58:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d8d5a:	4604      	mov	r4, r0
   d8d5c:	e7f1      	b.n	d8d42 <_ZN3UDP5writeEPKhj+0xe>

000d8d5e <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d8d5e:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d8d60:	6803      	ldr	r3, [r0, #0]
   d8d62:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d8d64:	4604      	mov	r4, r0
   d8d66:	460f      	mov	r7, r1
   d8d68:	4616      	mov	r6, r2
    if (available()) {
   d8d6a:	4798      	blx	r3
   d8d6c:	b190      	cbz	r0, d8d94 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d8d6e:	6823      	ldr	r3, [r4, #0]
   d8d70:	4620      	mov	r0, r4
   d8d72:	691b      	ldr	r3, [r3, #16]
   d8d74:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d8d76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8d78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8d7a:	4286      	cmp	r6, r0
   d8d7c:	bfa8      	it	ge
   d8d7e:	4606      	movge	r6, r0
   d8d80:	4419      	add	r1, r3
   d8d82:	4632      	mov	r2, r6
   d8d84:	4638      	mov	r0, r7
   d8d86:	f001 fd03 	bl	da790 <memcpy>
        _offset += read;
   d8d8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8d8c:	4433      	add	r3, r6
   d8d8e:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d8d90:	4630      	mov	r0, r6
   d8d92:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d8d94:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   d8d98:	e7fa      	b.n	d8d90 <_ZN3UDP4readEPhj+0x32>
	...

000d8d9c <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d8d9c:	b570      	push	{r4, r5, r6, lr}
   d8d9e:	4604      	mov	r4, r0
   d8da0:	4b05      	ldr	r3, [pc, #20]	; (d8db8 <_ZN3UDP8remoteIPEv+0x1c>)
   d8da2:	f844 3b04 	str.w	r3, [r4], #4
   d8da6:	f101 0520 	add.w	r5, r1, #32
   d8daa:	4606      	mov	r6, r0
   d8dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8db0:	682b      	ldr	r3, [r5, #0]
   d8db2:	7023      	strb	r3, [r4, #0]
   d8db4:	4630      	mov	r0, r6
   d8db6:	bd70      	pop	{r4, r5, r6, pc}
   d8db8:	000dcfdc 	.word	0x000dcfdc

000d8dbc <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8dbe:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8dc0:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8dc2:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8dc4:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d8dc6:	4a0a      	ldr	r2, [pc, #40]	; (d8df0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d8dc8:	9202      	str	r2, [sp, #8]
   d8dca:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d8dcc:	468c      	mov	ip, r1
   d8dce:	4606      	mov	r6, r0
   d8dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8dd2:	ad03      	add	r5, sp, #12
   d8dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8dd6:	6823      	ldr	r3, [r4, #0]
   d8dd8:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d8dda:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d8dde:	9300      	str	r3, [sp, #0]
   d8de0:	4672      	mov	r2, lr
   d8de2:	ab02      	add	r3, sp, #8
   d8de4:	4661      	mov	r1, ip
   d8de6:	4630      	mov	r0, r6
   d8de8:	47b8      	blx	r7
    }
   d8dea:	b009      	add	sp, #36	; 0x24
   d8dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8dee:	bf00      	nop
   d8df0:	000dcfdc 	.word	0x000dcfdc

000d8df4 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d8df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8df6:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d8df8:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8dfa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d8dfc:	4b0c      	ldr	r3, [pc, #48]	; (d8e30 <_ZN3UDP9endPacketEv+0x3c>)
   d8dfe:	9302      	str	r3, [sp, #8]
   d8e00:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d8e04:	4604      	mov	r4, r0
   d8e06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8e08:	ad03      	add	r5, sp, #12
   d8e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8e0c:	6833      	ldr	r3, [r6, #0]
   d8e0e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8e10:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d8e12:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d8e14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8e16:	9300      	str	r3, [sp, #0]
   d8e18:	4620      	mov	r0, r4
   d8e1a:	ab02      	add	r3, sp, #8
   d8e1c:	47b8      	blx	r7
    flush(); // wait for send to complete
   d8e1e:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8e20:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d8e22:	69db      	ldr	r3, [r3, #28]
   d8e24:	4620      	mov	r0, r4
   d8e26:	4798      	blx	r3
}
   d8e28:	4628      	mov	r0, r5
   d8e2a:	b009      	add	sp, #36	; 0x24
   d8e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8e2e:	bf00      	nop
   d8e30:	000dcfdc 	.word	0x000dcfdc

000d8e34 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d8e34:	b538      	push	{r3, r4, r5, lr}
   d8e36:	4605      	mov	r5, r0
   d8e38:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d8e3a:	7d2b      	ldrb	r3, [r5, #20]
   d8e3c:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d8e3e:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d8e40:	d110      	bne.n	d8e64 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d8e42:	f640 231c 	movw	r3, #2588	; 0xa1c
   d8e46:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d8e48:	f7fd ffb8 	bl	d6dbc <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8e4c:	3408      	adds	r4, #8
   d8e4e:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d8e50:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8e54:	3514      	adds	r5, #20
   d8e56:	f853 2b04 	ldr.w	r2, [r3], #4
   d8e5a:	f844 2b04 	str.w	r2, [r4], #4
   d8e5e:	42ab      	cmp	r3, r5
   d8e60:	d1f9      	bne.n	d8e56 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d8e62:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d8e64:	2b04      	cmp	r3, #4
   d8e66:	d1fc      	bne.n	d8e62 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d8e68:	f44f 7304 	mov.w	r3, #528	; 0x210
   d8e6c:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d8e6e:	f7fd ffa5 	bl	d6dbc <inet_htons>
   d8e72:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d8e74:	6868      	ldr	r0, [r5, #4]
   d8e76:	f7fd ff91 	bl	d6d9c <inet_htonl>
   d8e7a:	6060      	str	r0, [r4, #4]
}
   d8e7c:	e7f1      	b.n	d8e62 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d8e7e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8e7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8e82:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d8e84:	af03      	add	r7, sp, #12
   d8e86:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8e8a:	4698      	mov	r8, r3
   d8e8c:	4604      	mov	r4, r0
   d8e8e:	460d      	mov	r5, r1
   d8e90:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d8e92:	2100      	movs	r1, #0
   d8e94:	464a      	mov	r2, r9
   d8e96:	4638      	mov	r0, r7
   d8e98:	f001 fca2 	bl	da7e0 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d8e9c:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d8ea0:	463a      	mov	r2, r7
   d8ea2:	4640      	mov	r0, r8
   d8ea4:	f7ff ffc6 	bl	d8e34 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d8ea8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d8eac:	b153      	cbz	r3, d8ec4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d8eae:	e9cd 7900 	strd	r7, r9, [sp]
   d8eb2:	6960      	ldr	r0, [r4, #20]
   d8eb4:	2300      	movs	r3, #0
   d8eb6:	4632      	mov	r2, r6
   d8eb8:	4629      	mov	r1, r5
   d8eba:	f7fd ffcf 	bl	d6e5c <sock_sendto>
}
   d8ebe:	b00b      	add	sp, #44	; 0x2c
   d8ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d8ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8ec8:	e7f9      	b.n	d8ebe <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d8ecc <_ZN3UDPC1Ev>:
UDP::UDP()
   d8ecc:	b538      	push	{r3, r4, r5, lr}
   d8ece:	2500      	movs	r5, #0
   d8ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8ed4:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d8ed8:	4b0b      	ldr	r3, [pc, #44]	; (d8f08 <_ZN3UDPC1Ev+0x3c>)
   d8eda:	f103 0208 	add.w	r2, r3, #8
   d8ede:	336c      	adds	r3, #108	; 0x6c
   d8ee0:	6103      	str	r3, [r0, #16]
   d8ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   d8ee6:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d8ee8:	6002      	str	r2, [r0, #0]
   d8eea:	6143      	str	r3, [r0, #20]
   d8eec:	301c      	adds	r0, #28
   d8eee:	f7fe fd75 	bl	d79dc <_ZN9IPAddressC1Ev>
   d8ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d8ef6:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d8efa:	86e5      	strh	r5, [r4, #54]	; 0x36
   d8efc:	8725      	strh	r5, [r4, #56]	; 0x38
   d8efe:	63e5      	str	r5, [r4, #60]	; 0x3c
   d8f00:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d8f04:	4620      	mov	r0, r4
   d8f06:	bd38      	pop	{r3, r4, r5, pc}
   d8f08:	000dd0ec 	.word	0x000dd0ec

000d8f0c <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d8f0c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d8f0e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d8f12:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d8f14:	b123      	cbz	r3, d8f20 <_ZN3UDP13releaseBufferEv+0x14>
   d8f16:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8f18:	b110      	cbz	r0, d8f20 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d8f1a:	2101      	movs	r1, #1
   d8f1c:	f000 fba9 	bl	d9672 <_ZdlPvj>
    _buffer = NULL;
   d8f20:	2300      	movs	r3, #0
   d8f22:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d8f24:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d8f28:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d8f2a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d8f2c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d8f2e:	bd10      	pop	{r4, pc}

000d8f30 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d8f30:	b570      	push	{r4, r5, r6, lr}
   d8f32:	4604      	mov	r4, r0
   d8f34:	4616      	mov	r6, r2
   d8f36:	460d      	mov	r5, r1
    releaseBuffer();
   d8f38:	f7ff ffe8 	bl	d8f0c <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d8f3c:	2300      	movs	r3, #0
    _buffer = buffer;
   d8f3e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d8f40:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d8f42:	b12e      	cbz	r6, d8f50 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d8f44:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d8f46:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d8f48:	3800      	subs	r0, #0
   d8f4a:	bf18      	it	ne
   d8f4c:	2001      	movne	r0, #1
   d8f4e:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d8f50:	2d00      	cmp	r5, #0
   d8f52:	d0f8      	beq.n	d8f46 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d8f54:	4628      	mov	r0, r5
   d8f56:	f7fb f8a0 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d8f5a:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d8f5c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d8f5e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d8f62:	2800      	cmp	r0, #0
   d8f64:	d0ef      	beq.n	d8f46 <_ZN3UDP9setBufferEjPh+0x16>
   d8f66:	e7ed      	b.n	d8f44 <_ZN3UDP9setBufferEjPh+0x14>

000d8f68 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f6a:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d8f6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8f6e:	4605      	mov	r5, r0
   d8f70:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d8f72:	b91a      	cbnz	r2, d8f7c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d8f74:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d8f76:	b109      	cbz	r1, d8f7c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d8f78:	f7ff ffda 	bl	d8f30 <_ZN3UDP9setBufferEjPh>
   d8f7c:	3404      	adds	r4, #4
   d8f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8f80:	f105 0620 	add.w	r6, r5, #32
   d8f84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d8f86:	6823      	ldr	r3, [r4, #0]
   d8f88:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d8f8a:	2300      	movs	r3, #0
}
   d8f8c:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d8f8e:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d8f90:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d8f92:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d8f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8f96 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d8f96:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d8f98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d8f9a:	4604      	mov	r4, r0
   d8f9c:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d8f9e:	b92a      	cbnz	r2, d8fac <_ZN3UDP11parsePacketEm+0x16>
   d8fa0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d8fa2:	b119      	cbz	r1, d8fac <_ZN3UDP11parsePacketEm+0x16>
   d8fa4:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d8fa6:	f7ff ffc3 	bl	d8f30 <_ZN3UDP9setBufferEjPh>
   d8faa:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d8fac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d8fae:	2200      	movs	r2, #0
   d8fb0:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d8fb2:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d8fb4:	b141      	cbz	r1, d8fc8 <_ZN3UDP11parsePacketEm+0x32>
   d8fb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d8fb8:	b132      	cbz	r2, d8fc8 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d8fba:	6820      	ldr	r0, [r4, #0]
   d8fbc:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d8fbe:	4620      	mov	r0, r4
   d8fc0:	47a8      	blx	r5
        if (result > 0) {
   d8fc2:	2800      	cmp	r0, #0
            _total = result;
   d8fc4:	bfc8      	it	gt
   d8fc6:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d8fc8:	6823      	ldr	r3, [r4, #0]
   d8fca:	691b      	ldr	r3, [r3, #16]
   d8fcc:	4620      	mov	r0, r4
}
   d8fce:	b003      	add	sp, #12
   d8fd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d8fd4:	4718      	bx	r3

000d8fd6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d8fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d8fd8:	7843      	ldrb	r3, [r0, #1]
   d8fda:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d8fdc:	b08d      	sub	sp, #52	; 0x34
   d8fde:	4605      	mov	r5, r0
   d8fe0:	460c      	mov	r4, r1
   d8fe2:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d8fe4:	d104      	bne.n	d8ff0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8fe6:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   d8fe8:	4620      	mov	r0, r4
   d8fea:	f7ff fd67 	bl	d8abc <_ZN9IPAddressaSIPKhEERS_T_>
   d8fee:	e022      	b.n	d9036 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d8ff0:	2b0a      	cmp	r3, #10
   d8ff2:	d125      	bne.n	d9040 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d8ff4:	2211      	movs	r2, #17
   d8ff6:	2100      	movs	r1, #0
   d8ff8:	a801      	add	r0, sp, #4
   d8ffa:	f001 fbf1 	bl	da7e0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8ffe:	68ab      	ldr	r3, [r5, #8]
   d9000:	b303      	cbz	r3, d9044 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9002:	f105 0308 	add.w	r3, r5, #8
   d9006:	ae01      	add	r6, sp, #4
   d9008:	f105 0c18 	add.w	ip, r5, #24
   d900c:	6818      	ldr	r0, [r3, #0]
   d900e:	6859      	ldr	r1, [r3, #4]
   d9010:	4632      	mov	r2, r6
   d9012:	c203      	stmia	r2!, {r0, r1}
   d9014:	3308      	adds	r3, #8
   d9016:	4563      	cmp	r3, ip
   d9018:	4616      	mov	r6, r2
   d901a:	d1f7      	bne.n	d900c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d901c:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d901e:	a901      	add	r1, sp, #4
   d9020:	a806      	add	r0, sp, #24
   d9022:	ae07      	add	r6, sp, #28
            a.v = 6;
   d9024:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d9028:	f7fe fce6 	bl	d79f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d902c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d902e:	3404      	adds	r4, #4
   d9030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9032:	6833      	ldr	r3, [r6, #0]
   d9034:	7023      	strb	r3, [r4, #0]
        if (port) {
   d9036:	b11f      	cbz	r7, d9040 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d9038:	8868      	ldrh	r0, [r5, #2]
   d903a:	f7fd feb7 	bl	d6dac <inet_ntohs>
   d903e:	8038      	strh	r0, [r7, #0]
}
   d9040:	b00d      	add	sp, #52	; 0x34
   d9042:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d9044:	68eb      	ldr	r3, [r5, #12]
   d9046:	2b00      	cmp	r3, #0
   d9048:	d1db      	bne.n	d9002 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d904a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d904e:	692e      	ldr	r6, [r5, #16]
   d9050:	f7fd fea4 	bl	d6d9c <inet_htonl>
   d9054:	4286      	cmp	r6, r0
   d9056:	d1d4      	bne.n	d9002 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d9058:	f105 0114 	add.w	r1, r5, #20
   d905c:	e7c4      	b.n	d8fe8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>
	...

000d9060 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d9060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9064:	4617      	mov	r7, r2
   d9066:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d9068:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d906a:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d906c:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d906e:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d9070:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d9072:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d9074:	f7fd feb2 	bl	d6ddc <netdb_getaddrinfo>
   d9078:	1e04      	subs	r4, r0, #0
   d907a:	db20      	blt.n	d90be <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d907c:	9b01      	ldr	r3, [sp, #4]
   d907e:	b32b      	cbz	r3, d90cc <_ZN3UDP11beginPacketEPKct+0x6c>
   d9080:	695b      	ldr	r3, [r3, #20]
   d9082:	b31b      	cbz	r3, d90cc <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d9084:	a802      	add	r0, sp, #8
   d9086:	f7fe fca9 	bl	d79dc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d908a:	9b01      	ldr	r3, [sp, #4]
   d908c:	2200      	movs	r2, #0
   d908e:	6958      	ldr	r0, [r3, #20]
   d9090:	a902      	add	r1, sp, #8
   d9092:	f7ff ffa0 	bl	d8fd6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   d9096:	a802      	add	r0, sp, #8
   d9098:	f7fe fcc0 	bl	d7a1c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d909c:	b1b0      	cbz	r0, d90cc <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d909e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d90a0:	ad03      	add	r5, sp, #12
   d90a2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d90a6:	4b0b      	ldr	r3, [pc, #44]	; (d90d4 <_ZN3UDP11beginPacketEPKct+0x74>)
   d90a8:	9308      	str	r3, [sp, #32]
   d90aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d90ac:	ac09      	add	r4, sp, #36	; 0x24
   d90ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d90b0:	682b      	ldr	r3, [r5, #0]
   d90b2:	7023      	strb	r3, [r4, #0]
   d90b4:	463a      	mov	r2, r7
   d90b6:	a908      	add	r1, sp, #32
   d90b8:	4630      	mov	r0, r6
   d90ba:	47c0      	blx	r8
   d90bc:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d90be:	9801      	ldr	r0, [sp, #4]
   d90c0:	f7fd fe84 	bl	d6dcc <netdb_freeaddrinfo>
}
   d90c4:	4620      	mov	r0, r4
   d90c6:	b00e      	add	sp, #56	; 0x38
   d90c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d90cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d90d0:	e7f5      	b.n	d90be <_ZN3UDP11beginPacketEPKct+0x5e>
   d90d2:	bf00      	nop
   d90d4:	000dcfdc 	.word	0x000dcfdc

000d90d8 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d90d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d90dc:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d90e0:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d90e4:	b090      	sub	sp, #64	; 0x40
   d90e6:	4605      	mov	r5, r0
   d90e8:	460e      	mov	r6, r1
   d90ea:	4690      	mov	r8, r2
   d90ec:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d90ee:	db3c      	blt.n	d916a <_ZN3UDP13receivePacketEPhjm+0x92>
   d90f0:	2900      	cmp	r1, #0
   d90f2:	d03a      	beq.n	d916a <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d90f4:	f04f 0a1c 	mov.w	sl, #28
   d90f8:	af09      	add	r7, sp, #36	; 0x24
   d90fa:	4652      	mov	r2, sl
   d90fc:	2100      	movs	r1, #0
   d90fe:	4638      	mov	r0, r7
   d9100:	f001 fb6e 	bl	da7e0 <memset>
        socklen_t slen = sizeof(saddr);
   d9104:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d9108:	b1dc      	cbz	r4, d9142 <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d910a:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d910c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d9110:	fbb4 f3f0 	udiv	r3, r4, r0
   d9114:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d9118:	fb00 4313 	mls	r3, r0, r3, r4
   d911c:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d911e:	2310      	movs	r3, #16
            struct timeval tv = {};
   d9120:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d9122:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d9124:	9300      	str	r3, [sp, #0]
   d9126:	f241 0206 	movw	r2, #4102	; 0x1006
   d912a:	446b      	add	r3, sp
   d912c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d9130:	4648      	mov	r0, r9
   d9132:	f7fd fe63 	bl	d6dfc <sock_setsockopt>
            if (ret) {
   d9136:	4604      	mov	r4, r0
   d9138:	b120      	cbz	r0, d9144 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d913a:	4620      	mov	r0, r4
   d913c:	b010      	add	sp, #64	; 0x40
   d913e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d9142:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d9144:	ab03      	add	r3, sp, #12
   d9146:	e9cd 7300 	strd	r7, r3, [sp]
   d914a:	6968      	ldr	r0, [r5, #20]
   d914c:	4623      	mov	r3, r4
   d914e:	4642      	mov	r2, r8
   d9150:	4631      	mov	r1, r6
   d9152:	f7fd fe73 	bl	d6e3c <sock_recvfrom>
        if (ret >= 0) {
   d9156:	1e04      	subs	r4, r0, #0
   d9158:	dbef      	blt.n	d913a <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d915a:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d915e:	f105 011c 	add.w	r1, r5, #28
   d9162:	4638      	mov	r0, r7
   d9164:	f7ff ff37 	bl	d8fd6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d9168:	e7e7      	b.n	d913a <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d916a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d916e:	e7e4      	b.n	d913a <_ZN3UDP13receivePacketEPhjm+0x62>

000d9170 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9170:	4770      	bx	lr

000d9172 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9172:	7441      	strb	r1, [r0, #17]
}
   d9174:	4770      	bx	lr

000d9176 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d9176:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d9178:	7c00      	ldrb	r0, [r0, #16]
   d917a:	f7fd fec7 	bl	d6f0c <hal_usart_available_data_for_write>
}
   d917e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9182:	bd08      	pop	{r3, pc}

000d9184 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9184:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d9186:	7c00      	ldrb	r0, [r0, #16]
   d9188:	f7fd fe98 	bl	d6ebc <hal_usart_available>
}
   d918c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9190:	bd08      	pop	{r3, pc}

000d9192 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9192:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d9194:	7c00      	ldrb	r0, [r0, #16]
   d9196:	f7fd fea1 	bl	d6edc <hal_usart_peek>
}
   d919a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d919e:	bd08      	pop	{r3, pc}

000d91a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d91a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d91a2:	7c00      	ldrb	r0, [r0, #16]
   d91a4:	f7fd fe92 	bl	d6ecc <hal_usart_read>
}
   d91a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d91ac:	bd08      	pop	{r3, pc}

000d91ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d91ae:	7c00      	ldrb	r0, [r0, #16]
   d91b0:	f7fd be9c 	b.w	d6eec <hal_usart_flush>

000d91b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d91b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d91b6:	7c45      	ldrb	r5, [r0, #17]
{
   d91b8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d91ba:	b12d      	cbz	r5, d91c8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d91bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d91be:	b003      	add	sp, #12
   d91c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d91c4:	f7fd be72 	b.w	d6eac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d91c8:	7c00      	ldrb	r0, [r0, #16]
   d91ca:	9101      	str	r1, [sp, #4]
   d91cc:	f7fd fe9e 	bl	d6f0c <hal_usart_available_data_for_write>
   d91d0:	2800      	cmp	r0, #0
   d91d2:	9901      	ldr	r1, [sp, #4]
   d91d4:	dcf2      	bgt.n	d91bc <_ZN11USARTSerial5writeEh+0x8>
}
   d91d6:	4628      	mov	r0, r5
   d91d8:	b003      	add	sp, #12
   d91da:	bd30      	pop	{r4, r5, pc}

000d91dc <_ZN11USARTSerialD0Ev>:
   d91dc:	b510      	push	{r4, lr}
   d91de:	2114      	movs	r1, #20
   d91e0:	4604      	mov	r4, r0
   d91e2:	f000 fa46 	bl	d9672 <_ZdlPvj>
   d91e6:	4620      	mov	r0, r4
   d91e8:	bd10      	pop	{r4, pc}
	...

000d91ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d91ec:	b510      	push	{r4, lr}
   d91ee:	f04f 0c00 	mov.w	ip, #0
   d91f2:	4604      	mov	r4, r0
   d91f4:	4608      	mov	r0, r1
   d91f6:	4611      	mov	r1, r2
   d91f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d91fc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9200:	4a04      	ldr	r2, [pc, #16]	; (d9214 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d9202:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d9204:	2201      	movs	r2, #1
  _serial = serial;
   d9206:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9208:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d920a:	461a      	mov	r2, r3
   d920c:	f7fd fe46 	bl	d6e9c <hal_usart_init>
}
   d9210:	4620      	mov	r0, r4
   d9212:	bd10      	pop	{r4, pc}
   d9214:	000dd164 	.word	0x000dd164

000d9218 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9218:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d921a:	4c0e      	ldr	r4, [pc, #56]	; (d9254 <_Z22__fetch_global_Serial1v+0x3c>)
   d921c:	7821      	ldrb	r1, [r4, #0]
   d921e:	f3bf 8f5b 	dmb	ish
   d9222:	f011 0101 	ands.w	r1, r1, #1
   d9226:	d112      	bne.n	d924e <_Z22__fetch_global_Serial1v+0x36>
   d9228:	4620      	mov	r0, r4
   d922a:	9101      	str	r1, [sp, #4]
   d922c:	f7fa ff3b 	bl	d40a6 <__cxa_guard_acquire>
   d9230:	9901      	ldr	r1, [sp, #4]
   d9232:	b160      	cbz	r0, d924e <_Z22__fetch_global_Serial1v+0x36>
   d9234:	4a08      	ldr	r2, [pc, #32]	; (d9258 <_Z22__fetch_global_Serial1v+0x40>)
   d9236:	4b09      	ldr	r3, [pc, #36]	; (d925c <_Z22__fetch_global_Serial1v+0x44>)
   d9238:	4809      	ldr	r0, [pc, #36]	; (d9260 <_Z22__fetch_global_Serial1v+0x48>)
   d923a:	f7ff ffd7 	bl	d91ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d923e:	4620      	mov	r0, r4
   d9240:	f7fa ff36 	bl	d40b0 <__cxa_guard_release>
   d9244:	4a07      	ldr	r2, [pc, #28]	; (d9264 <_Z22__fetch_global_Serial1v+0x4c>)
   d9246:	4908      	ldr	r1, [pc, #32]	; (d9268 <_Z22__fetch_global_Serial1v+0x50>)
   d9248:	4805      	ldr	r0, [pc, #20]	; (d9260 <_Z22__fetch_global_Serial1v+0x48>)
   d924a:	f000 fa0d 	bl	d9668 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d924e:	4804      	ldr	r0, [pc, #16]	; (d9260 <_Z22__fetch_global_Serial1v+0x48>)
   d9250:	b002      	add	sp, #8
   d9252:	bd10      	pop	{r4, pc}
   d9254:	2003e688 	.word	0x2003e688
   d9258:	2003e68c 	.word	0x2003e68c
   d925c:	2003e710 	.word	0x2003e710
   d9260:	2003e794 	.word	0x2003e794
   d9264:	2003e440 	.word	0x2003e440
   d9268:	000d9171 	.word	0x000d9171

000d926c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d926c:	7441      	strb	r1, [r0, #17]
}
   d926e:	4770      	bx	lr

000d9270 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9270:	4770      	bx	lr

000d9272 <_ZN9USBSerial4readEv>:
{
   d9272:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9274:	2100      	movs	r1, #0
   d9276:	7c00      	ldrb	r0, [r0, #16]
   d9278:	f7fd fe70 	bl	d6f5c <HAL_USB_USART_Receive_Data>
}
   d927c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9280:	bd08      	pop	{r3, pc}

000d9282 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d9282:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9284:	2101      	movs	r1, #1
   d9286:	7c00      	ldrb	r0, [r0, #16]
   d9288:	f7fd fe68 	bl	d6f5c <HAL_USB_USART_Receive_Data>
}
   d928c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d9290:	bd08      	pop	{r3, pc}

000d9292 <_ZN9USBSerial17availableForWriteEv>:
{
   d9292:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9294:	7c00      	ldrb	r0, [r0, #16]
   d9296:	f7fd fe59 	bl	d6f4c <HAL_USB_USART_Available_Data_For_Write>
}
   d929a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d929e:	bd08      	pop	{r3, pc}

000d92a0 <_ZN9USBSerial9availableEv>:
{
   d92a0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d92a2:	7c00      	ldrb	r0, [r0, #16]
   d92a4:	f7fd fe4a 	bl	d6f3c <HAL_USB_USART_Available_Data>
}
   d92a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d92ac:	bd08      	pop	{r3, pc}

000d92ae <_ZN9USBSerial5writeEh>:
{
   d92ae:	b513      	push	{r0, r1, r4, lr}
   d92b0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d92b2:	7c00      	ldrb	r0, [r0, #16]
{
   d92b4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d92b6:	f7fd fe49 	bl	d6f4c <HAL_USB_USART_Available_Data_For_Write>
   d92ba:	2800      	cmp	r0, #0
   d92bc:	9901      	ldr	r1, [sp, #4]
   d92be:	dc01      	bgt.n	d92c4 <_ZN9USBSerial5writeEh+0x16>
   d92c0:	7c60      	ldrb	r0, [r4, #17]
   d92c2:	b120      	cbz	r0, d92ce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d92c4:	7c20      	ldrb	r0, [r4, #16]
   d92c6:	f7fd fe51 	bl	d6f6c <HAL_USB_USART_Send_Data>
   d92ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d92ce:	b002      	add	sp, #8
   d92d0:	bd10      	pop	{r4, pc}

000d92d2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d92d2:	7c00      	ldrb	r0, [r0, #16]
   d92d4:	f7fd be52 	b.w	d6f7c <HAL_USB_USART_Flush_Data>

000d92d8 <_ZN9USBSerialD0Ev>:
   d92d8:	b510      	push	{r4, lr}
   d92da:	2114      	movs	r1, #20
   d92dc:	4604      	mov	r4, r0
   d92de:	f000 f9c8 	bl	d9672 <_ZdlPvj>
   d92e2:	4620      	mov	r0, r4
   d92e4:	bd10      	pop	{r4, pc}
	...

000d92e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d92e8:	b510      	push	{r4, lr}
   d92ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d92ee:	4604      	mov	r4, r0
   d92f0:	4608      	mov	r0, r1
   d92f2:	2100      	movs	r1, #0
   d92f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d92f8:	4b04      	ldr	r3, [pc, #16]	; (d930c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d92fa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d92fc:	2301      	movs	r3, #1
  _serial = serial;
   d92fe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9300:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d9302:	4611      	mov	r1, r2
   d9304:	f7fd fe0a 	bl	d6f1c <HAL_USB_USART_Init>
}
   d9308:	4620      	mov	r0, r4
   d930a:	bd10      	pop	{r4, pc}
   d930c:	000dd194 	.word	0x000dd194

000d9310 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9310:	7c00      	ldrb	r0, [r0, #16]
   d9312:	2200      	movs	r2, #0
   d9314:	f7fd be0a 	b.w	d6f2c <HAL_USB_USART_Begin>

000d9318 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9318:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d931a:	2214      	movs	r2, #20
{
   d931c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d931e:	2100      	movs	r1, #0
   d9320:	f001 fa5e 	bl	da7e0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9324:	4620      	mov	r0, r4
   d9326:	bd10      	pop	{r4, pc}

000d9328 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9328:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d932a:	4c10      	ldr	r4, [pc, #64]	; (d936c <_Z16_fetch_usbserialv+0x44>)
{
   d932c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d932e:	a803      	add	r0, sp, #12
   d9330:	f7ff fff2 	bl	d9318 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9334:	7821      	ldrb	r1, [r4, #0]
   d9336:	f3bf 8f5b 	dmb	ish
   d933a:	f011 0101 	ands.w	r1, r1, #1
   d933e:	d111      	bne.n	d9364 <_Z16_fetch_usbserialv+0x3c>
   d9340:	4620      	mov	r0, r4
   d9342:	9101      	str	r1, [sp, #4]
   d9344:	f7fa feaf 	bl	d40a6 <__cxa_guard_acquire>
   d9348:	9901      	ldr	r1, [sp, #4]
   d934a:	b158      	cbz	r0, d9364 <_Z16_fetch_usbserialv+0x3c>
   d934c:	aa03      	add	r2, sp, #12
   d934e:	4808      	ldr	r0, [pc, #32]	; (d9370 <_Z16_fetch_usbserialv+0x48>)
   d9350:	f7ff ffca 	bl	d92e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9354:	4620      	mov	r0, r4
   d9356:	f7fa feab 	bl	d40b0 <__cxa_guard_release>
   d935a:	4a06      	ldr	r2, [pc, #24]	; (d9374 <_Z16_fetch_usbserialv+0x4c>)
   d935c:	4906      	ldr	r1, [pc, #24]	; (d9378 <_Z16_fetch_usbserialv+0x50>)
   d935e:	4804      	ldr	r0, [pc, #16]	; (d9370 <_Z16_fetch_usbserialv+0x48>)
   d9360:	f000 f982 	bl	d9668 <__aeabi_atexit>
	return _usbserial;
}
   d9364:	4802      	ldr	r0, [pc, #8]	; (d9370 <_Z16_fetch_usbserialv+0x48>)
   d9366:	b008      	add	sp, #32
   d9368:	bd10      	pop	{r4, pc}
   d936a:	bf00      	nop
   d936c:	2003e7a8 	.word	0x2003e7a8
   d9370:	2003e7ac 	.word	0x2003e7ac
   d9374:	2003e440 	.word	0x2003e440
   d9378:	000d9271 	.word	0x000d9271

000d937c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d937c:	b510      	push	{r4, lr}
   d937e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d9380:	f001 faa7 	bl	da8d2 <strlen>
   d9384:	3801      	subs	r0, #1
   d9386:	1823      	adds	r3, r4, r0
   d9388:	4620      	mov	r0, r4
	while(i<j){
   d938a:	4283      	cmp	r3, r0
   d938c:	d906      	bls.n	d939c <_Z11str_reversePc+0x20>
		c = *i;
   d938e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d9390:	7819      	ldrb	r1, [r3, #0]
   d9392:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d9396:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d939a:	e7f6      	b.n	d938a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d939c:	bd10      	pop	{r4, pc}

000d939e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d939e:	b570      	push	{r4, r5, r6, lr}
   d93a0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d93a2:	1e91      	subs	r1, r2, #2
   d93a4:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d93a6:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d93a8:	d822      	bhi.n	d93f0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d93aa:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d93ac:	b16d      	cbz	r5, d93ca <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d93ae:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d93b2:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d93b6:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d93b8:	2d09      	cmp	r5, #9
                *ptr += '0';
   d93ba:	bf94      	ite	ls
   d93bc:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d93be:	3157      	addhi	r1, #87	; 0x57
   d93c0:	b2c9      	uxtb	r1, r1
   d93c2:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d93c6:	4635      	mov	r5, r6
	while(a){
   d93c8:	e7f0      	b.n	d93ac <ultoa+0xe>
   d93ca:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d93cc:	4423      	add	r3, r4
            *ptr++ = '0';
   d93ce:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d93d0:	4293      	cmp	r3, r2
   d93d2:	d902      	bls.n	d93da <ultoa+0x3c>
            *ptr++ = '0';
   d93d4:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d93d8:	e7fa      	b.n	d93d0 <ultoa+0x32>
   d93da:	1a1a      	subs	r2, r3, r0
   d93dc:	4283      	cmp	r3, r0
   d93de:	bf38      	it	cc
   d93e0:	2200      	movcc	r2, #0

	*ptr = '\0';
   d93e2:	2300      	movs	r3, #0
   d93e4:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d93e6:	4620      	mov	r0, r4
   d93e8:	f7ff ffc8 	bl	d937c <_Z11str_reversePc>
	return buffer;
   d93ec:	4620      	mov	r0, r4
}
   d93ee:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d93f0:	2000      	movs	r0, #0
   d93f2:	e7fc      	b.n	d93ee <ultoa+0x50>

000d93f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d93f4:	4b01      	ldr	r3, [pc, #4]	; (d93fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d93f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d93f8:	4770      	bx	lr
   d93fa:	bf00      	nop
   d93fc:	2003e26c 	.word	0x2003e26c

000d9400 <serialEventRun>:
{
   d9400:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d9402:	4b0b      	ldr	r3, [pc, #44]	; (d9430 <serialEventRun+0x30>)
   d9404:	b143      	cbz	r3, d9418 <serialEventRun+0x18>
   d9406:	f7ff ff8f 	bl	d9328 <_Z16_fetch_usbserialv>
   d940a:	6803      	ldr	r3, [r0, #0]
   d940c:	691b      	ldr	r3, [r3, #16]
   d940e:	4798      	blx	r3
   d9410:	2800      	cmp	r0, #0
   d9412:	dd01      	ble.n	d9418 <serialEventRun+0x18>
        serialEvent();
   d9414:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9418:	4b06      	ldr	r3, [pc, #24]	; (d9434 <serialEventRun+0x34>)
   d941a:	b143      	cbz	r3, d942e <serialEventRun+0x2e>
   d941c:	f7ff fefc 	bl	d9218 <_Z22__fetch_global_Serial1v>
   d9420:	6803      	ldr	r3, [r0, #0]
   d9422:	691b      	ldr	r3, [r3, #16]
   d9424:	4798      	blx	r3
   d9426:	2800      	cmp	r0, #0
   d9428:	dd01      	ble.n	d942e <serialEventRun+0x2e>
        serialEvent1();
   d942a:	f3af 8000 	nop.w
}
   d942e:	bd08      	pop	{r3, pc}
	...

000d9438 <_post_loop>:
{
   d9438:	b508      	push	{r3, lr}
	serialEventRun();
   d943a:	f7ff ffe1 	bl	d9400 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d943e:	f7fd fc15 	bl	d6c6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9442:	4b01      	ldr	r3, [pc, #4]	; (d9448 <_post_loop+0x10>)
   d9444:	6018      	str	r0, [r3, #0]
}
   d9446:	bd08      	pop	{r3, pc}
   d9448:	2003e7d4 	.word	0x2003e7d4

000d944c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d944c:	4802      	ldr	r0, [pc, #8]	; (d9458 <_Z33system_initialize_user_backup_ramv+0xc>)
   d944e:	4a03      	ldr	r2, [pc, #12]	; (d945c <_Z33system_initialize_user_backup_ramv+0x10>)
   d9450:	4903      	ldr	r1, [pc, #12]	; (d9460 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9452:	1a12      	subs	r2, r2, r0
   d9454:	f001 b99c 	b.w	da790 <memcpy>
   d9458:	2003f400 	.word	0x2003f400
   d945c:	2003f404 	.word	0x2003f404
   d9460:	000dd568 	.word	0x000dd568

000d9464 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9464:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9466:	2300      	movs	r3, #0
   d9468:	9300      	str	r3, [sp, #0]
   d946a:	461a      	mov	r2, r3
   d946c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9470:	f7fd fdde 	bl	d7030 <system_ctrl_set_result>
}
   d9474:	b003      	add	sp, #12
   d9476:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d947c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d947c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d947e:	8843      	ldrh	r3, [r0, #2]
   d9480:	2b0a      	cmp	r3, #10
   d9482:	d008      	beq.n	d9496 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9484:	2b50      	cmp	r3, #80	; 0x50
   d9486:	d10b      	bne.n	d94a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9488:	4b09      	ldr	r3, [pc, #36]	; (d94b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d948a:	681b      	ldr	r3, [r3, #0]
   d948c:	b14b      	cbz	r3, d94a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d948e:	b003      	add	sp, #12
   d9490:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9494:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9496:	f7ff ffe5 	bl	d9464 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d949a:	b003      	add	sp, #12
   d949c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d94a0:	2300      	movs	r3, #0
   d94a2:	9300      	str	r3, [sp, #0]
   d94a4:	461a      	mov	r2, r3
   d94a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d94aa:	f7fd fdc1 	bl	d7030 <system_ctrl_set_result>
}
   d94ae:	e7f4      	b.n	d949a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d94b0:	2003e7c4 	.word	0x2003e7c4

000d94b4 <module_user_init_hook>:
{
   d94b4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d94b6:	4c12      	ldr	r4, [pc, #72]	; (d9500 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d94b8:	4812      	ldr	r0, [pc, #72]	; (d9504 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d94ba:	4d13      	ldr	r5, [pc, #76]	; (d9508 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d94bc:	2100      	movs	r1, #0
   d94be:	f7fd fe89 	bl	d71d4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d94c2:	6823      	ldr	r3, [r4, #0]
   d94c4:	42ab      	cmp	r3, r5
   d94c6:	4b11      	ldr	r3, [pc, #68]	; (d950c <module_user_init_hook+0x58>)
   d94c8:	bf0c      	ite	eq
   d94ca:	2201      	moveq	r2, #1
   d94cc:	2200      	movne	r2, #0
   d94ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d94d0:	d002      	beq.n	d94d8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d94d2:	f7ff ffbb 	bl	d944c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d94d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d94d8:	f7fd fbb8 	bl	d6c4c <HAL_RNG_GetRandomNumber>
   d94dc:	4604      	mov	r4, r0
    srand(seed);
   d94de:	f001 f997 	bl	da810 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d94e2:	4b0b      	ldr	r3, [pc, #44]	; (d9510 <module_user_init_hook+0x5c>)
   d94e4:	b113      	cbz	r3, d94ec <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d94e6:	4620      	mov	r0, r4
   d94e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d94ec:	2100      	movs	r1, #0
   d94ee:	4808      	ldr	r0, [pc, #32]	; (d9510 <module_user_init_hook+0x5c>)
   d94f0:	f7fd fdd0 	bl	d7094 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d94f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d94f8:	4806      	ldr	r0, [pc, #24]	; (d9514 <module_user_init_hook+0x60>)
   d94fa:	2100      	movs	r1, #0
   d94fc:	f7fd bd8e 	b.w	d701c <system_ctrl_set_app_request_handler>
   d9500:	2003f400 	.word	0x2003f400
   d9504:	000d93f5 	.word	0x000d93f5
   d9508:	9a271c1e 	.word	0x9a271c1e
   d950c:	2003e7c0 	.word	0x2003e7c0
   d9510:	00000000 	.word	0x00000000
   d9514:	000d947d 	.word	0x000d947d

000d9518 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d9518:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d951a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d951c:	d902      	bls.n	d9524 <pinAvailable+0xc>
    return false;
   d951e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d9520:	b002      	add	sp, #8
   d9522:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d9524:	f1a0 030b 	sub.w	r3, r0, #11
   d9528:	2b02      	cmp	r3, #2
   d952a:	d81a      	bhi.n	d9562 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d952c:	4c17      	ldr	r4, [pc, #92]	; (d958c <pinAvailable+0x74>)
   d952e:	7821      	ldrb	r1, [r4, #0]
   d9530:	f3bf 8f5b 	dmb	ish
   d9534:	f011 0101 	ands.w	r1, r1, #1
   d9538:	d10b      	bne.n	d9552 <pinAvailable+0x3a>
   d953a:	4620      	mov	r0, r4
   d953c:	9101      	str	r1, [sp, #4]
   d953e:	f7fa fdb2 	bl	d40a6 <__cxa_guard_acquire>
   d9542:	9901      	ldr	r1, [sp, #4]
   d9544:	b128      	cbz	r0, d9552 <pinAvailable+0x3a>
   d9546:	4812      	ldr	r0, [pc, #72]	; (d9590 <pinAvailable+0x78>)
   d9548:	f7fe ff0e 	bl	d8368 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d954c:	4620      	mov	r0, r4
   d954e:	f7fa fdaf 	bl	d40b0 <__cxa_guard_release>
   d9552:	4b0f      	ldr	r3, [pc, #60]	; (d9590 <pinAvailable+0x78>)
   d9554:	7818      	ldrb	r0, [r3, #0]
   d9556:	f7fd fc99 	bl	d6e8c <hal_spi_is_enabled>
   d955a:	2800      	cmp	r0, #0
   d955c:	d1df      	bne.n	d951e <pinAvailable+0x6>
  return true; // 'pin' is available
   d955e:	2001      	movs	r0, #1
   d9560:	e7de      	b.n	d9520 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d9562:	2801      	cmp	r0, #1
   d9564:	d809      	bhi.n	d957a <pinAvailable+0x62>
   d9566:	f000 f857 	bl	d9618 <_Z19__fetch_global_Wirev>
   d956a:	2100      	movs	r1, #0
   d956c:	7c00      	ldrb	r0, [r0, #16]
   d956e:	f7fd fbf5 	bl	d6d5c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d9572:	f080 0001 	eor.w	r0, r0, #1
   d9576:	b2c0      	uxtb	r0, r0
   d9578:	e7d2      	b.n	d9520 <pinAvailable+0x8>
   d957a:	3809      	subs	r0, #9
   d957c:	2801      	cmp	r0, #1
   d957e:	d8ee      	bhi.n	d955e <pinAvailable+0x46>
   d9580:	f7ff fe4a 	bl	d9218 <_Z22__fetch_global_Serial1v>
   d9584:	7c00      	ldrb	r0, [r0, #16]
   d9586:	f7fd fcb9 	bl	d6efc <hal_usart_is_enabled>
   d958a:	e7f2      	b.n	d9572 <pinAvailable+0x5a>
   d958c:	2003e7c8 	.word	0x2003e7c8
   d9590:	2003e7cc 	.word	0x2003e7cc

000d9594 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9594:	2823      	cmp	r0, #35	; 0x23
{
   d9596:	b538      	push	{r3, r4, r5, lr}
   d9598:	4604      	mov	r4, r0
   d959a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d959c:	d80a      	bhi.n	d95b4 <pinMode+0x20>
   d959e:	29ff      	cmp	r1, #255	; 0xff
   d95a0:	d008      	beq.n	d95b4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d95a2:	f7ff ffb9 	bl	d9518 <pinAvailable>
   d95a6:	b128      	cbz	r0, d95b4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d95a8:	4629      	mov	r1, r5
   d95aa:	4620      	mov	r0, r4
}
   d95ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d95b0:	f7fd bb6c 	b.w	d6c8c <HAL_Pin_Mode>
}
   d95b4:	bd38      	pop	{r3, r4, r5, pc}

000d95b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d95b6:	b538      	push	{r3, r4, r5, lr}
   d95b8:	4604      	mov	r4, r0
   d95ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d95bc:	f7fd fb6e 	bl	d6c9c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d95c0:	28ff      	cmp	r0, #255	; 0xff
   d95c2:	d010      	beq.n	d95e6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d95c4:	2806      	cmp	r0, #6
   d95c6:	d804      	bhi.n	d95d2 <digitalWrite+0x1c>
   d95c8:	234d      	movs	r3, #77	; 0x4d
   d95ca:	fa23 f000 	lsr.w	r0, r3, r0
   d95ce:	07c3      	lsls	r3, r0, #31
   d95d0:	d409      	bmi.n	d95e6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d95d2:	4620      	mov	r0, r4
   d95d4:	f7ff ffa0 	bl	d9518 <pinAvailable>
   d95d8:	b128      	cbz	r0, d95e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d95da:	4629      	mov	r1, r5
   d95dc:	4620      	mov	r0, r4
}
   d95de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d95e2:	f7fd bb63 	b.w	d6cac <HAL_GPIO_Write>
}
   d95e6:	bd38      	pop	{r3, r4, r5, pc}

000d95e8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d95e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d95ea:	2300      	movs	r3, #0
   d95ec:	2520      	movs	r5, #32
   d95ee:	8043      	strh	r3, [r0, #2]
   d95f0:	2314      	movs	r3, #20
{
   d95f2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d95f4:	8003      	strh	r3, [r0, #0]
   d95f6:	6085      	str	r5, [r0, #8]
   d95f8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d95fa:	4906      	ldr	r1, [pc, #24]	; (d9614 <_Z17acquireWireBufferv+0x2c>)
   d95fc:	4628      	mov	r0, r5
   d95fe:	f000 f83c 	bl	d967a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9602:	4904      	ldr	r1, [pc, #16]	; (d9614 <_Z17acquireWireBufferv+0x2c>)
	};
   d9604:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9606:	4628      	mov	r0, r5
   d9608:	f000 f837 	bl	d967a <_ZnajRKSt9nothrow_t>
	};
   d960c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d960e:	4620      	mov	r0, r4
   d9610:	bd38      	pop	{r3, r4, r5, pc}
   d9612:	bf00      	nop
   d9614:	000dd1bc 	.word	0x000dd1bc

000d9618 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9618:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d961a:	4d0f      	ldr	r5, [pc, #60]	; (d9658 <_Z19__fetch_global_Wirev+0x40>)
   d961c:	7829      	ldrb	r1, [r5, #0]
   d961e:	f3bf 8f5b 	dmb	ish
   d9622:	f011 0401 	ands.w	r4, r1, #1
{
   d9626:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9628:	d113      	bne.n	d9652 <_Z19__fetch_global_Wirev+0x3a>
   d962a:	4628      	mov	r0, r5
   d962c:	f7fa fd3b 	bl	d40a6 <__cxa_guard_acquire>
   d9630:	b178      	cbz	r0, d9652 <_Z19__fetch_global_Wirev+0x3a>
   d9632:	a801      	add	r0, sp, #4
   d9634:	f7ff ffd8 	bl	d95e8 <_Z17acquireWireBufferv>
   d9638:	aa01      	add	r2, sp, #4
   d963a:	4621      	mov	r1, r4
   d963c:	4807      	ldr	r0, [pc, #28]	; (d965c <_Z19__fetch_global_Wirev+0x44>)
   d963e:	f7fe f969 	bl	d7914 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d9642:	4628      	mov	r0, r5
   d9644:	f7fa fd34 	bl	d40b0 <__cxa_guard_release>
   d9648:	4a05      	ldr	r2, [pc, #20]	; (d9660 <_Z19__fetch_global_Wirev+0x48>)
   d964a:	4906      	ldr	r1, [pc, #24]	; (d9664 <_Z19__fetch_global_Wirev+0x4c>)
   d964c:	4803      	ldr	r0, [pc, #12]	; (d965c <_Z19__fetch_global_Wirev+0x44>)
   d964e:	f000 f80b 	bl	d9668 <__aeabi_atexit>
	return wire;
}
   d9652:	4802      	ldr	r0, [pc, #8]	; (d965c <_Z19__fetch_global_Wirev+0x44>)
   d9654:	b007      	add	sp, #28
   d9656:	bd30      	pop	{r4, r5, pc}
   d9658:	2003e7d8 	.word	0x2003e7d8
   d965c:	2003e7dc 	.word	0x2003e7dc
   d9660:	2003e440 	.word	0x2003e440
   d9664:	000d78bd 	.word	0x000d78bd

000d9668 <__aeabi_atexit>:
   d9668:	460b      	mov	r3, r1
   d966a:	4601      	mov	r1, r0
   d966c:	4618      	mov	r0, r3
   d966e:	f001 b881 	b.w	da774 <__cxa_atexit>

000d9672 <_ZdlPvj>:
   d9672:	f7fa bd14 	b.w	d409e <_ZdlPv>

000d9676 <_ZnwjRKSt9nothrow_t>:
   d9676:	f7fa bd0e 	b.w	d4096 <_Znwj>

000d967a <_ZnajRKSt9nothrow_t>:
   d967a:	f7fa bd0e 	b.w	d409a <_Znaj>

000d967e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   d967e:	68c3      	ldr	r3, [r0, #12]
   d9680:	689a      	ldr	r2, [r3, #8]
   d9682:	60c2      	str	r2, [r0, #12]
   d9684:	b510      	push	{r4, lr}
   d9686:	b102      	cbz	r2, d968a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   d9688:	6050      	str	r0, [r2, #4]
   d968a:	6842      	ldr	r2, [r0, #4]
   d968c:	605a      	str	r2, [r3, #4]
   d968e:	680c      	ldr	r4, [r1, #0]
   d9690:	4284      	cmp	r4, r0
   d9692:	d103      	bne.n	d969c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   d9694:	600b      	str	r3, [r1, #0]
   d9696:	6098      	str	r0, [r3, #8]
   d9698:	6043      	str	r3, [r0, #4]
   d969a:	bd10      	pop	{r4, pc}
   d969c:	6891      	ldr	r1, [r2, #8]
   d969e:	4281      	cmp	r1, r0
   d96a0:	bf0c      	ite	eq
   d96a2:	6093      	streq	r3, [r2, #8]
   d96a4:	60d3      	strne	r3, [r2, #12]
   d96a6:	e7f6      	b.n	d9696 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000d96a8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   d96a8:	6883      	ldr	r3, [r0, #8]
   d96aa:	68da      	ldr	r2, [r3, #12]
   d96ac:	6082      	str	r2, [r0, #8]
   d96ae:	b510      	push	{r4, lr}
   d96b0:	b102      	cbz	r2, d96b4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   d96b2:	6050      	str	r0, [r2, #4]
   d96b4:	6842      	ldr	r2, [r0, #4]
   d96b6:	605a      	str	r2, [r3, #4]
   d96b8:	680c      	ldr	r4, [r1, #0]
   d96ba:	4284      	cmp	r4, r0
   d96bc:	d103      	bne.n	d96c6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   d96be:	600b      	str	r3, [r1, #0]
   d96c0:	60d8      	str	r0, [r3, #12]
   d96c2:	6043      	str	r3, [r0, #4]
   d96c4:	bd10      	pop	{r4, pc}
   d96c6:	68d1      	ldr	r1, [r2, #12]
   d96c8:	4281      	cmp	r1, r0
   d96ca:	bf0c      	ite	eq
   d96cc:	60d3      	streq	r3, [r2, #12]
   d96ce:	6093      	strne	r3, [r2, #8]
   d96d0:	e7f6      	b.n	d96c0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000d96d2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d96d2:	7803      	ldrb	r3, [r0, #0]
   d96d4:	b933      	cbnz	r3, d96e4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d96d6:	6843      	ldr	r3, [r0, #4]
   d96d8:	685b      	ldr	r3, [r3, #4]
   d96da:	4283      	cmp	r3, r0
   d96dc:	d102      	bne.n	d96e4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   d96de:	68db      	ldr	r3, [r3, #12]
   d96e0:	4618      	mov	r0, r3
   d96e2:	4770      	bx	lr
   d96e4:	6882      	ldr	r2, [r0, #8]
   d96e6:	b122      	cbz	r2, d96f2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   d96e8:	4613      	mov	r3, r2
   d96ea:	68d2      	ldr	r2, [r2, #12]
   d96ec:	2a00      	cmp	r2, #0
   d96ee:	d1fb      	bne.n	d96e8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   d96f0:	e7f6      	b.n	d96e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d96f2:	6843      	ldr	r3, [r0, #4]
   d96f4:	689a      	ldr	r2, [r3, #8]
   d96f6:	4282      	cmp	r2, r0
   d96f8:	d1f2      	bne.n	d96e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   d96fa:	4618      	mov	r0, r3
   d96fc:	685b      	ldr	r3, [r3, #4]
   d96fe:	e7f9      	b.n	d96f4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000d9700 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   d9700:	68c3      	ldr	r3, [r0, #12]
   d9702:	b123      	cbz	r3, d970e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   d9704:	4618      	mov	r0, r3
   d9706:	689b      	ldr	r3, [r3, #8]
   d9708:	2b00      	cmp	r3, #0
   d970a:	d1fb      	bne.n	d9704 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   d970c:	4770      	bx	lr
   d970e:	6843      	ldr	r3, [r0, #4]
   d9710:	68da      	ldr	r2, [r3, #12]
   d9712:	4282      	cmp	r2, r0
   d9714:	d102      	bne.n	d971c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   d9716:	4618      	mov	r0, r3
   d9718:	685b      	ldr	r3, [r3, #4]
   d971a:	e7f9      	b.n	d9710 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   d971c:	68c2      	ldr	r2, [r0, #12]
   d971e:	4293      	cmp	r3, r2
   d9720:	bf18      	it	ne
   d9722:	4618      	movne	r0, r3
   d9724:	4770      	bx	lr

000d9726 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   d9726:	f7ff bfd4 	b.w	d96d2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000d972a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   d972a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d972e:	461e      	mov	r6, r3
   d9730:	f103 0804 	add.w	r8, r3, #4
   d9734:	2300      	movs	r3, #0
   d9736:	e9c1 3302 	strd	r3, r3, [r1, #8]
   d973a:	460c      	mov	r4, r1
   d973c:	604a      	str	r2, [r1, #4]
   d973e:	700b      	strb	r3, [r1, #0]
   d9740:	b300      	cbz	r0, d9784 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   d9742:	4296      	cmp	r6, r2
   d9744:	6091      	str	r1, [r2, #8]
   d9746:	d118      	bne.n	d977a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   d9748:	6071      	str	r1, [r6, #4]
   d974a:	60f4      	str	r4, [r6, #12]
   d974c:	2701      	movs	r7, #1
   d974e:	f04f 0900 	mov.w	r9, #0
   d9752:	6873      	ldr	r3, [r6, #4]
   d9754:	42a3      	cmp	r3, r4
   d9756:	d03f      	beq.n	d97d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   d9758:	6860      	ldr	r0, [r4, #4]
   d975a:	7802      	ldrb	r2, [r0, #0]
   d975c:	2a00      	cmp	r2, #0
   d975e:	d13c      	bne.n	d97da <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   d9760:	6845      	ldr	r5, [r0, #4]
   d9762:	68ab      	ldr	r3, [r5, #8]
   d9764:	4298      	cmp	r0, r3
   d9766:	d123      	bne.n	d97b0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   d9768:	68eb      	ldr	r3, [r5, #12]
   d976a:	b183      	cbz	r3, d978e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d976c:	781a      	ldrb	r2, [r3, #0]
   d976e:	b972      	cbnz	r2, d978e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   d9770:	7007      	strb	r7, [r0, #0]
   d9772:	701f      	strb	r7, [r3, #0]
   d9774:	702a      	strb	r2, [r5, #0]
   d9776:	462c      	mov	r4, r5
   d9778:	e7eb      	b.n	d9752 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   d977a:	68b3      	ldr	r3, [r6, #8]
   d977c:	4293      	cmp	r3, r2
   d977e:	d1e5      	bne.n	d974c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d9780:	60b1      	str	r1, [r6, #8]
   d9782:	e7e3      	b.n	d974c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d9784:	60d1      	str	r1, [r2, #12]
   d9786:	68f3      	ldr	r3, [r6, #12]
   d9788:	4293      	cmp	r3, r2
   d978a:	d1df      	bne.n	d974c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   d978c:	e7dd      	b.n	d974a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   d978e:	68c3      	ldr	r3, [r0, #12]
   d9790:	42a3      	cmp	r3, r4
   d9792:	d103      	bne.n	d979c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   d9794:	4641      	mov	r1, r8
   d9796:	f7ff ff72 	bl	d967e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d979a:	4604      	mov	r4, r0
   d979c:	6863      	ldr	r3, [r4, #4]
   d979e:	4641      	mov	r1, r8
   d97a0:	701f      	strb	r7, [r3, #0]
   d97a2:	4628      	mov	r0, r5
   d97a4:	f885 9000 	strb.w	r9, [r5]
   d97a8:	f7ff ff7e 	bl	d96a8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d97ac:	4625      	mov	r5, r4
   d97ae:	e7e2      	b.n	d9776 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   d97b0:	b113      	cbz	r3, d97b8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   d97b2:	781a      	ldrb	r2, [r3, #0]
   d97b4:	2a00      	cmp	r2, #0
   d97b6:	d0db      	beq.n	d9770 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   d97b8:	6883      	ldr	r3, [r0, #8]
   d97ba:	42a3      	cmp	r3, r4
   d97bc:	d103      	bne.n	d97c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   d97be:	4641      	mov	r1, r8
   d97c0:	f7ff ff72 	bl	d96a8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   d97c4:	4604      	mov	r4, r0
   d97c6:	6863      	ldr	r3, [r4, #4]
   d97c8:	4641      	mov	r1, r8
   d97ca:	701f      	strb	r7, [r3, #0]
   d97cc:	4628      	mov	r0, r5
   d97ce:	f885 9000 	strb.w	r9, [r5]
   d97d2:	f7ff ff54 	bl	d967e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   d97d6:	e7e9      	b.n	d97ac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   d97d8:	4623      	mov	r3, r4
   d97da:	2201      	movs	r2, #1
   d97dc:	701a      	strb	r2, [r3, #0]
   d97de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d97e2 <_ZSt25__throw_bad_function_callv>:
   d97e2:	b508      	push	{r3, lr}
   d97e4:	f7fd fcde 	bl	d71a4 <abort>

000d97e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d97e8:	4901      	ldr	r1, [pc, #4]	; (d97f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d97ea:	f000 b8f9 	b.w	d99e0 <_ZNKSt9type_infoeqERKS_>
   d97ee:	bf00      	nop
   d97f0:	000dd1d8 	.word	0x000dd1d8

000d97f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d97f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d97f6:	2400      	movs	r4, #0
   d97f8:	2310      	movs	r3, #16
   d97fa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d97fe:	6803      	ldr	r3, [r0, #0]
   d9800:	9400      	str	r4, [sp, #0]
   d9802:	699e      	ldr	r6, [r3, #24]
   d9804:	f88d 4004 	strb.w	r4, [sp, #4]
   d9808:	4615      	mov	r5, r2
   d980a:	466b      	mov	r3, sp
   d980c:	6812      	ldr	r2, [r2, #0]
   d980e:	47b0      	blx	r6
   d9810:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d9814:	f003 0306 	and.w	r3, r3, #6
   d9818:	2b06      	cmp	r3, #6
   d981a:	bf03      	ittte	eq
   d981c:	9b00      	ldreq	r3, [sp, #0]
   d981e:	602b      	streq	r3, [r5, #0]
   d9820:	2001      	moveq	r0, #1
   d9822:	4620      	movne	r0, r4
   d9824:	b004      	add	sp, #16
   d9826:	bd70      	pop	{r4, r5, r6, pc}

000d9828 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d9828:	9800      	ldr	r0, [sp, #0]
   d982a:	4290      	cmp	r0, r2
   d982c:	bf14      	ite	ne
   d982e:	2001      	movne	r0, #1
   d9830:	2006      	moveq	r0, #6
   d9832:	4770      	bx	lr

000d9834 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d9834:	b510      	push	{r4, lr}
   d9836:	4b03      	ldr	r3, [pc, #12]	; (d9844 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d9838:	6003      	str	r3, [r0, #0]
   d983a:	4604      	mov	r4, r0
   d983c:	f000 f8cd 	bl	d99da <_ZNSt9type_infoD1Ev>
   d9840:	4620      	mov	r0, r4
   d9842:	bd10      	pop	{r4, pc}
   d9844:	000dd218 	.word	0x000dd218

000d9848 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d9848:	b510      	push	{r4, lr}
   d984a:	4604      	mov	r4, r0
   d984c:	f7ff fff2 	bl	d9834 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d9850:	4620      	mov	r0, r4
   d9852:	2108      	movs	r1, #8
   d9854:	f7ff ff0d 	bl	d9672 <_ZdlPvj>
   d9858:	4620      	mov	r0, r4
   d985a:	bd10      	pop	{r4, pc}

000d985c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d985c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9860:	461f      	mov	r7, r3
   d9862:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d9866:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d986a:	4598      	cmp	r8, r3
   d986c:	4606      	mov	r6, r0
   d986e:	4615      	mov	r5, r2
   d9870:	d107      	bne.n	d9882 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d9872:	9907      	ldr	r1, [sp, #28]
   d9874:	f000 f8b4 	bl	d99e0 <_ZNKSt9type_infoeqERKS_>
   d9878:	b118      	cbz	r0, d9882 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d987a:	7165      	strb	r5, [r4, #5]
   d987c:	2000      	movs	r0, #0
   d987e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9882:	4639      	mov	r1, r7
   d9884:	4630      	mov	r0, r6
   d9886:	f000 f8ab 	bl	d99e0 <_ZNKSt9type_infoeqERKS_>
   d988a:	2800      	cmp	r0, #0
   d988c:	d0f6      	beq.n	d987c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d988e:	2301      	movs	r3, #1
   d9890:	f8c4 8000 	str.w	r8, [r4]
   d9894:	7125      	strb	r5, [r4, #4]
   d9896:	71a3      	strb	r3, [r4, #6]
   d9898:	e7f0      	b.n	d987c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d989a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d989a:	b538      	push	{r3, r4, r5, lr}
   d989c:	4615      	mov	r5, r2
   d989e:	461c      	mov	r4, r3
   d98a0:	f000 f89e 	bl	d99e0 <_ZNKSt9type_infoeqERKS_>
   d98a4:	b120      	cbz	r0, d98b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d98a6:	2308      	movs	r3, #8
   d98a8:	60e3      	str	r3, [r4, #12]
   d98aa:	2306      	movs	r3, #6
   d98ac:	6025      	str	r5, [r4, #0]
   d98ae:	7123      	strb	r3, [r4, #4]
   d98b0:	bd38      	pop	{r3, r4, r5, pc}

000d98b2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d98b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d98b4:	4605      	mov	r5, r0
   d98b6:	460c      	mov	r4, r1
   d98b8:	9201      	str	r2, [sp, #4]
   d98ba:	461e      	mov	r6, r3
   d98bc:	f000 f890 	bl	d99e0 <_ZNKSt9type_infoeqERKS_>
   d98c0:	b950      	cbnz	r0, d98d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d98c2:	2e03      	cmp	r6, #3
   d98c4:	d808      	bhi.n	d98d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d98c6:	6823      	ldr	r3, [r4, #0]
   d98c8:	9a01      	ldr	r2, [sp, #4]
   d98ca:	695b      	ldr	r3, [r3, #20]
   d98cc:	4629      	mov	r1, r5
   d98ce:	4620      	mov	r0, r4
   d98d0:	b002      	add	sp, #8
   d98d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d98d6:	4718      	bx	r3
   d98d8:	b002      	add	sp, #8
   d98da:	bd70      	pop	{r4, r5, r6, pc}

000d98dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d98dc:	b510      	push	{r4, lr}
   d98de:	4b03      	ldr	r3, [pc, #12]	; (d98ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d98e0:	6003      	str	r3, [r0, #0]
   d98e2:	4604      	mov	r4, r0
   d98e4:	f7ff ffa6 	bl	d9834 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d98e8:	4620      	mov	r0, r4
   d98ea:	bd10      	pop	{r4, pc}
   d98ec:	000dd278 	.word	0x000dd278

000d98f0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d98f0:	b510      	push	{r4, lr}
   d98f2:	4604      	mov	r4, r0
   d98f4:	f7ff fff2 	bl	d98dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d98f8:	4620      	mov	r0, r4
   d98fa:	210c      	movs	r1, #12
   d98fc:	f7ff feb9 	bl	d9672 <_ZdlPvj>
   d9900:	4620      	mov	r0, r4
   d9902:	bd10      	pop	{r4, pc}

000d9904 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d9904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d9906:	9f08      	ldr	r7, [sp, #32]
   d9908:	4297      	cmp	r7, r2
   d990a:	4605      	mov	r5, r0
   d990c:	460e      	mov	r6, r1
   d990e:	4614      	mov	r4, r2
   d9910:	d00a      	beq.n	d9928 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d9912:	68a8      	ldr	r0, [r5, #8]
   d9914:	6802      	ldr	r2, [r0, #0]
   d9916:	9708      	str	r7, [sp, #32]
   d9918:	6a15      	ldr	r5, [r2, #32]
   d991a:	4631      	mov	r1, r6
   d991c:	4622      	mov	r2, r4
   d991e:	46ac      	mov	ip, r5
   d9920:	b003      	add	sp, #12
   d9922:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9926:	4760      	bx	ip
   d9928:	4619      	mov	r1, r3
   d992a:	9301      	str	r3, [sp, #4]
   d992c:	f000 f858 	bl	d99e0 <_ZNKSt9type_infoeqERKS_>
   d9930:	9b01      	ldr	r3, [sp, #4]
   d9932:	2800      	cmp	r0, #0
   d9934:	d0ed      	beq.n	d9912 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d9936:	2006      	movs	r0, #6
   d9938:	b003      	add	sp, #12
   d993a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d993c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d993c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9940:	460d      	mov	r5, r1
   d9942:	4619      	mov	r1, r3
   d9944:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d9948:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d994c:	4681      	mov	r9, r0
   d994e:	4617      	mov	r7, r2
   d9950:	4698      	mov	r8, r3
   d9952:	f000 f845 	bl	d99e0 <_ZNKSt9type_infoeqERKS_>
   d9956:	b190      	cbz	r0, d997e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d9958:	2d00      	cmp	r5, #0
   d995a:	6034      	str	r4, [r6, #0]
   d995c:	7137      	strb	r7, [r6, #4]
   d995e:	db09      	blt.n	d9974 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d9960:	1961      	adds	r1, r4, r5
   d9962:	458a      	cmp	sl, r1
   d9964:	bf0c      	ite	eq
   d9966:	2106      	moveq	r1, #6
   d9968:	2101      	movne	r1, #1
   d996a:	71b1      	strb	r1, [r6, #6]
   d996c:	2000      	movs	r0, #0
   d996e:	b001      	add	sp, #4
   d9970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9974:	3502      	adds	r5, #2
   d9976:	d1f9      	bne.n	d996c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9978:	2301      	movs	r3, #1
   d997a:	71b3      	strb	r3, [r6, #6]
   d997c:	e7f6      	b.n	d996c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d997e:	4554      	cmp	r4, sl
   d9980:	d106      	bne.n	d9990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d9982:	4659      	mov	r1, fp
   d9984:	4648      	mov	r0, r9
   d9986:	f000 f82b 	bl	d99e0 <_ZNKSt9type_infoeqERKS_>
   d998a:	b108      	cbz	r0, d9990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d998c:	7177      	strb	r7, [r6, #5]
   d998e:	e7ed      	b.n	d996c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d9990:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d9994:	6803      	ldr	r3, [r0, #0]
   d9996:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d999a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d999e:	69dc      	ldr	r4, [r3, #28]
   d99a0:	463a      	mov	r2, r7
   d99a2:	4643      	mov	r3, r8
   d99a4:	4629      	mov	r1, r5
   d99a6:	46a4      	mov	ip, r4
   d99a8:	b001      	add	sp, #4
   d99aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99ae:	4760      	bx	ip

000d99b0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d99b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d99b4:	4607      	mov	r7, r0
   d99b6:	460c      	mov	r4, r1
   d99b8:	4615      	mov	r5, r2
   d99ba:	461e      	mov	r6, r3
   d99bc:	f7ff ff6d 	bl	d989a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d99c0:	b948      	cbnz	r0, d99d6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d99c2:	68b8      	ldr	r0, [r7, #8]
   d99c4:	6803      	ldr	r3, [r0, #0]
   d99c6:	699f      	ldr	r7, [r3, #24]
   d99c8:	462a      	mov	r2, r5
   d99ca:	4633      	mov	r3, r6
   d99cc:	4621      	mov	r1, r4
   d99ce:	46bc      	mov	ip, r7
   d99d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d99d4:	4760      	bx	ip
   d99d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d99da <_ZNSt9type_infoD1Ev>:
   d99da:	4770      	bx	lr

000d99dc <_ZNKSt9type_info14__is_pointer_pEv>:
   d99dc:	2000      	movs	r0, #0
   d99de:	4770      	bx	lr

000d99e0 <_ZNKSt9type_infoeqERKS_>:
   d99e0:	4281      	cmp	r1, r0
   d99e2:	b508      	push	{r3, lr}
   d99e4:	d00e      	beq.n	d9a04 <_ZNKSt9type_infoeqERKS_+0x24>
   d99e6:	6840      	ldr	r0, [r0, #4]
   d99e8:	7803      	ldrb	r3, [r0, #0]
   d99ea:	2b2a      	cmp	r3, #42	; 0x2a
   d99ec:	d00c      	beq.n	d9a08 <_ZNKSt9type_infoeqERKS_+0x28>
   d99ee:	6849      	ldr	r1, [r1, #4]
   d99f0:	780b      	ldrb	r3, [r1, #0]
   d99f2:	2b2a      	cmp	r3, #42	; 0x2a
   d99f4:	bf08      	it	eq
   d99f6:	3101      	addeq	r1, #1
   d99f8:	f000 ff3b 	bl	da872 <strcmp>
   d99fc:	fab0 f080 	clz	r0, r0
   d9a00:	0940      	lsrs	r0, r0, #5
   d9a02:	bd08      	pop	{r3, pc}
   d9a04:	2001      	movs	r0, #1
   d9a06:	e7fc      	b.n	d9a02 <_ZNKSt9type_infoeqERKS_+0x22>
   d9a08:	2000      	movs	r0, #0
   d9a0a:	e7fa      	b.n	d9a02 <_ZNKSt9type_infoeqERKS_+0x22>
   d9a0c:	0000      	movs	r0, r0
	...

000d9a10 <nan>:
   d9a10:	ed9f 0b01 	vldr	d0, [pc, #4]	; d9a18 <nan+0x8>
   d9a14:	4770      	bx	lr
   d9a16:	bf00      	nop
   d9a18:	00000000 	.word	0x00000000
   d9a1c:	7ff80000 	.word	0x7ff80000

000d9a20 <__aeabi_drsub>:
   d9a20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9a24:	e002      	b.n	d9a2c <__adddf3>
   d9a26:	bf00      	nop

000d9a28 <__aeabi_dsub>:
   d9a28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9a2c <__adddf3>:
   d9a2c:	b530      	push	{r4, r5, lr}
   d9a2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9a32:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9a36:	ea94 0f05 	teq	r4, r5
   d9a3a:	bf08      	it	eq
   d9a3c:	ea90 0f02 	teqeq	r0, r2
   d9a40:	bf1f      	itttt	ne
   d9a42:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9a46:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9a4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9a4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9a52:	f000 80e2 	beq.w	d9c1a <__adddf3+0x1ee>
   d9a56:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9a5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9a5e:	bfb8      	it	lt
   d9a60:	426d      	neglt	r5, r5
   d9a62:	dd0c      	ble.n	d9a7e <__adddf3+0x52>
   d9a64:	442c      	add	r4, r5
   d9a66:	ea80 0202 	eor.w	r2, r0, r2
   d9a6a:	ea81 0303 	eor.w	r3, r1, r3
   d9a6e:	ea82 0000 	eor.w	r0, r2, r0
   d9a72:	ea83 0101 	eor.w	r1, r3, r1
   d9a76:	ea80 0202 	eor.w	r2, r0, r2
   d9a7a:	ea81 0303 	eor.w	r3, r1, r3
   d9a7e:	2d36      	cmp	r5, #54	; 0x36
   d9a80:	bf88      	it	hi
   d9a82:	bd30      	pophi	{r4, r5, pc}
   d9a84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9a88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9a8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9a90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9a94:	d002      	beq.n	d9a9c <__adddf3+0x70>
   d9a96:	4240      	negs	r0, r0
   d9a98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9a9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9aa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9aa4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9aa8:	d002      	beq.n	d9ab0 <__adddf3+0x84>
   d9aaa:	4252      	negs	r2, r2
   d9aac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9ab0:	ea94 0f05 	teq	r4, r5
   d9ab4:	f000 80a7 	beq.w	d9c06 <__adddf3+0x1da>
   d9ab8:	f1a4 0401 	sub.w	r4, r4, #1
   d9abc:	f1d5 0e20 	rsbs	lr, r5, #32
   d9ac0:	db0d      	blt.n	d9ade <__adddf3+0xb2>
   d9ac2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9ac6:	fa22 f205 	lsr.w	r2, r2, r5
   d9aca:	1880      	adds	r0, r0, r2
   d9acc:	f141 0100 	adc.w	r1, r1, #0
   d9ad0:	fa03 f20e 	lsl.w	r2, r3, lr
   d9ad4:	1880      	adds	r0, r0, r2
   d9ad6:	fa43 f305 	asr.w	r3, r3, r5
   d9ada:	4159      	adcs	r1, r3
   d9adc:	e00e      	b.n	d9afc <__adddf3+0xd0>
   d9ade:	f1a5 0520 	sub.w	r5, r5, #32
   d9ae2:	f10e 0e20 	add.w	lr, lr, #32
   d9ae6:	2a01      	cmp	r2, #1
   d9ae8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9aec:	bf28      	it	cs
   d9aee:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9af2:	fa43 f305 	asr.w	r3, r3, r5
   d9af6:	18c0      	adds	r0, r0, r3
   d9af8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9afc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9b00:	d507      	bpl.n	d9b12 <__adddf3+0xe6>
   d9b02:	f04f 0e00 	mov.w	lr, #0
   d9b06:	f1dc 0c00 	rsbs	ip, ip, #0
   d9b0a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9b0e:	eb6e 0101 	sbc.w	r1, lr, r1
   d9b12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9b16:	d31b      	bcc.n	d9b50 <__adddf3+0x124>
   d9b18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9b1c:	d30c      	bcc.n	d9b38 <__adddf3+0x10c>
   d9b1e:	0849      	lsrs	r1, r1, #1
   d9b20:	ea5f 0030 	movs.w	r0, r0, rrx
   d9b24:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9b28:	f104 0401 	add.w	r4, r4, #1
   d9b2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9b30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9b34:	f080 809a 	bcs.w	d9c6c <__adddf3+0x240>
   d9b38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9b3c:	bf08      	it	eq
   d9b3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9b42:	f150 0000 	adcs.w	r0, r0, #0
   d9b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9b4a:	ea41 0105 	orr.w	r1, r1, r5
   d9b4e:	bd30      	pop	{r4, r5, pc}
   d9b50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9b54:	4140      	adcs	r0, r0
   d9b56:	eb41 0101 	adc.w	r1, r1, r1
   d9b5a:	3c01      	subs	r4, #1
   d9b5c:	bf28      	it	cs
   d9b5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d9b62:	d2e9      	bcs.n	d9b38 <__adddf3+0x10c>
   d9b64:	f091 0f00 	teq	r1, #0
   d9b68:	bf04      	itt	eq
   d9b6a:	4601      	moveq	r1, r0
   d9b6c:	2000      	moveq	r0, #0
   d9b6e:	fab1 f381 	clz	r3, r1
   d9b72:	bf08      	it	eq
   d9b74:	3320      	addeq	r3, #32
   d9b76:	f1a3 030b 	sub.w	r3, r3, #11
   d9b7a:	f1b3 0220 	subs.w	r2, r3, #32
   d9b7e:	da0c      	bge.n	d9b9a <__adddf3+0x16e>
   d9b80:	320c      	adds	r2, #12
   d9b82:	dd08      	ble.n	d9b96 <__adddf3+0x16a>
   d9b84:	f102 0c14 	add.w	ip, r2, #20
   d9b88:	f1c2 020c 	rsb	r2, r2, #12
   d9b8c:	fa01 f00c 	lsl.w	r0, r1, ip
   d9b90:	fa21 f102 	lsr.w	r1, r1, r2
   d9b94:	e00c      	b.n	d9bb0 <__adddf3+0x184>
   d9b96:	f102 0214 	add.w	r2, r2, #20
   d9b9a:	bfd8      	it	le
   d9b9c:	f1c2 0c20 	rsble	ip, r2, #32
   d9ba0:	fa01 f102 	lsl.w	r1, r1, r2
   d9ba4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9ba8:	bfdc      	itt	le
   d9baa:	ea41 010c 	orrle.w	r1, r1, ip
   d9bae:	4090      	lslle	r0, r2
   d9bb0:	1ae4      	subs	r4, r4, r3
   d9bb2:	bfa2      	ittt	ge
   d9bb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9bb8:	4329      	orrge	r1, r5
   d9bba:	bd30      	popge	{r4, r5, pc}
   d9bbc:	ea6f 0404 	mvn.w	r4, r4
   d9bc0:	3c1f      	subs	r4, #31
   d9bc2:	da1c      	bge.n	d9bfe <__adddf3+0x1d2>
   d9bc4:	340c      	adds	r4, #12
   d9bc6:	dc0e      	bgt.n	d9be6 <__adddf3+0x1ba>
   d9bc8:	f104 0414 	add.w	r4, r4, #20
   d9bcc:	f1c4 0220 	rsb	r2, r4, #32
   d9bd0:	fa20 f004 	lsr.w	r0, r0, r4
   d9bd4:	fa01 f302 	lsl.w	r3, r1, r2
   d9bd8:	ea40 0003 	orr.w	r0, r0, r3
   d9bdc:	fa21 f304 	lsr.w	r3, r1, r4
   d9be0:	ea45 0103 	orr.w	r1, r5, r3
   d9be4:	bd30      	pop	{r4, r5, pc}
   d9be6:	f1c4 040c 	rsb	r4, r4, #12
   d9bea:	f1c4 0220 	rsb	r2, r4, #32
   d9bee:	fa20 f002 	lsr.w	r0, r0, r2
   d9bf2:	fa01 f304 	lsl.w	r3, r1, r4
   d9bf6:	ea40 0003 	orr.w	r0, r0, r3
   d9bfa:	4629      	mov	r1, r5
   d9bfc:	bd30      	pop	{r4, r5, pc}
   d9bfe:	fa21 f004 	lsr.w	r0, r1, r4
   d9c02:	4629      	mov	r1, r5
   d9c04:	bd30      	pop	{r4, r5, pc}
   d9c06:	f094 0f00 	teq	r4, #0
   d9c0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9c0e:	bf06      	itte	eq
   d9c10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9c14:	3401      	addeq	r4, #1
   d9c16:	3d01      	subne	r5, #1
   d9c18:	e74e      	b.n	d9ab8 <__adddf3+0x8c>
   d9c1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9c1e:	bf18      	it	ne
   d9c20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9c24:	d029      	beq.n	d9c7a <__adddf3+0x24e>
   d9c26:	ea94 0f05 	teq	r4, r5
   d9c2a:	bf08      	it	eq
   d9c2c:	ea90 0f02 	teqeq	r0, r2
   d9c30:	d005      	beq.n	d9c3e <__adddf3+0x212>
   d9c32:	ea54 0c00 	orrs.w	ip, r4, r0
   d9c36:	bf04      	itt	eq
   d9c38:	4619      	moveq	r1, r3
   d9c3a:	4610      	moveq	r0, r2
   d9c3c:	bd30      	pop	{r4, r5, pc}
   d9c3e:	ea91 0f03 	teq	r1, r3
   d9c42:	bf1e      	ittt	ne
   d9c44:	2100      	movne	r1, #0
   d9c46:	2000      	movne	r0, #0
   d9c48:	bd30      	popne	{r4, r5, pc}
   d9c4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9c4e:	d105      	bne.n	d9c5c <__adddf3+0x230>
   d9c50:	0040      	lsls	r0, r0, #1
   d9c52:	4149      	adcs	r1, r1
   d9c54:	bf28      	it	cs
   d9c56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9c5a:	bd30      	pop	{r4, r5, pc}
   d9c5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9c60:	bf3c      	itt	cc
   d9c62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9c66:	bd30      	popcc	{r4, r5, pc}
   d9c68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9c6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9c70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9c74:	f04f 0000 	mov.w	r0, #0
   d9c78:	bd30      	pop	{r4, r5, pc}
   d9c7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9c7e:	bf1a      	itte	ne
   d9c80:	4619      	movne	r1, r3
   d9c82:	4610      	movne	r0, r2
   d9c84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9c88:	bf1c      	itt	ne
   d9c8a:	460b      	movne	r3, r1
   d9c8c:	4602      	movne	r2, r0
   d9c8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9c92:	bf06      	itte	eq
   d9c94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9c98:	ea91 0f03 	teqeq	r1, r3
   d9c9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9ca0:	bd30      	pop	{r4, r5, pc}
   d9ca2:	bf00      	nop

000d9ca4 <__aeabi_ui2d>:
   d9ca4:	f090 0f00 	teq	r0, #0
   d9ca8:	bf04      	itt	eq
   d9caa:	2100      	moveq	r1, #0
   d9cac:	4770      	bxeq	lr
   d9cae:	b530      	push	{r4, r5, lr}
   d9cb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9cb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9cb8:	f04f 0500 	mov.w	r5, #0
   d9cbc:	f04f 0100 	mov.w	r1, #0
   d9cc0:	e750      	b.n	d9b64 <__adddf3+0x138>
   d9cc2:	bf00      	nop

000d9cc4 <__aeabi_i2d>:
   d9cc4:	f090 0f00 	teq	r0, #0
   d9cc8:	bf04      	itt	eq
   d9cca:	2100      	moveq	r1, #0
   d9ccc:	4770      	bxeq	lr
   d9cce:	b530      	push	{r4, r5, lr}
   d9cd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9cd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9cd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9cdc:	bf48      	it	mi
   d9cde:	4240      	negmi	r0, r0
   d9ce0:	f04f 0100 	mov.w	r1, #0
   d9ce4:	e73e      	b.n	d9b64 <__adddf3+0x138>
   d9ce6:	bf00      	nop

000d9ce8 <__aeabi_f2d>:
   d9ce8:	0042      	lsls	r2, r0, #1
   d9cea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9cee:	ea4f 0131 	mov.w	r1, r1, rrx
   d9cf2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9cf6:	bf1f      	itttt	ne
   d9cf8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9cfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9d00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9d04:	4770      	bxne	lr
   d9d06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9d0a:	bf08      	it	eq
   d9d0c:	4770      	bxeq	lr
   d9d0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9d12:	bf04      	itt	eq
   d9d14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9d18:	4770      	bxeq	lr
   d9d1a:	b530      	push	{r4, r5, lr}
   d9d1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9d20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9d24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9d28:	e71c      	b.n	d9b64 <__adddf3+0x138>
   d9d2a:	bf00      	nop

000d9d2c <__aeabi_ul2d>:
   d9d2c:	ea50 0201 	orrs.w	r2, r0, r1
   d9d30:	bf08      	it	eq
   d9d32:	4770      	bxeq	lr
   d9d34:	b530      	push	{r4, r5, lr}
   d9d36:	f04f 0500 	mov.w	r5, #0
   d9d3a:	e00a      	b.n	d9d52 <__aeabi_l2d+0x16>

000d9d3c <__aeabi_l2d>:
   d9d3c:	ea50 0201 	orrs.w	r2, r0, r1
   d9d40:	bf08      	it	eq
   d9d42:	4770      	bxeq	lr
   d9d44:	b530      	push	{r4, r5, lr}
   d9d46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9d4a:	d502      	bpl.n	d9d52 <__aeabi_l2d+0x16>
   d9d4c:	4240      	negs	r0, r0
   d9d4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9d52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9d56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9d5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9d5e:	f43f aed8 	beq.w	d9b12 <__adddf3+0xe6>
   d9d62:	f04f 0203 	mov.w	r2, #3
   d9d66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d6a:	bf18      	it	ne
   d9d6c:	3203      	addne	r2, #3
   d9d6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9d72:	bf18      	it	ne
   d9d74:	3203      	addne	r2, #3
   d9d76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9d7a:	f1c2 0320 	rsb	r3, r2, #32
   d9d7e:	fa00 fc03 	lsl.w	ip, r0, r3
   d9d82:	fa20 f002 	lsr.w	r0, r0, r2
   d9d86:	fa01 fe03 	lsl.w	lr, r1, r3
   d9d8a:	ea40 000e 	orr.w	r0, r0, lr
   d9d8e:	fa21 f102 	lsr.w	r1, r1, r2
   d9d92:	4414      	add	r4, r2
   d9d94:	e6bd      	b.n	d9b12 <__adddf3+0xe6>
   d9d96:	bf00      	nop

000d9d98 <__aeabi_dmul>:
   d9d98:	b570      	push	{r4, r5, r6, lr}
   d9d9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9d9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9da2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9da6:	bf1d      	ittte	ne
   d9da8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9dac:	ea94 0f0c 	teqne	r4, ip
   d9db0:	ea95 0f0c 	teqne	r5, ip
   d9db4:	f000 f8de 	bleq	d9f74 <__aeabi_dmul+0x1dc>
   d9db8:	442c      	add	r4, r5
   d9dba:	ea81 0603 	eor.w	r6, r1, r3
   d9dbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9dc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9dc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9dca:	bf18      	it	ne
   d9dcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9dd8:	d038      	beq.n	d9e4c <__aeabi_dmul+0xb4>
   d9dda:	fba0 ce02 	umull	ip, lr, r0, r2
   d9dde:	f04f 0500 	mov.w	r5, #0
   d9de2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9de6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9dea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9dee:	f04f 0600 	mov.w	r6, #0
   d9df2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9df6:	f09c 0f00 	teq	ip, #0
   d9dfa:	bf18      	it	ne
   d9dfc:	f04e 0e01 	orrne.w	lr, lr, #1
   d9e00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9e04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9e08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9e0c:	d204      	bcs.n	d9e18 <__aeabi_dmul+0x80>
   d9e0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9e12:	416d      	adcs	r5, r5
   d9e14:	eb46 0606 	adc.w	r6, r6, r6
   d9e18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9e1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9e20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9e24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9e28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9e2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9e30:	bf88      	it	hi
   d9e32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9e36:	d81e      	bhi.n	d9e76 <__aeabi_dmul+0xde>
   d9e38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9e3c:	bf08      	it	eq
   d9e3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9e42:	f150 0000 	adcs.w	r0, r0, #0
   d9e46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9e4a:	bd70      	pop	{r4, r5, r6, pc}
   d9e4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9e50:	ea46 0101 	orr.w	r1, r6, r1
   d9e54:	ea40 0002 	orr.w	r0, r0, r2
   d9e58:	ea81 0103 	eor.w	r1, r1, r3
   d9e5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9e60:	bfc2      	ittt	gt
   d9e62:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9e66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9e6a:	bd70      	popgt	{r4, r5, r6, pc}
   d9e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9e70:	f04f 0e00 	mov.w	lr, #0
   d9e74:	3c01      	subs	r4, #1
   d9e76:	f300 80ab 	bgt.w	d9fd0 <__aeabi_dmul+0x238>
   d9e7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9e7e:	bfde      	ittt	le
   d9e80:	2000      	movle	r0, #0
   d9e82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9e86:	bd70      	pople	{r4, r5, r6, pc}
   d9e88:	f1c4 0400 	rsb	r4, r4, #0
   d9e8c:	3c20      	subs	r4, #32
   d9e8e:	da35      	bge.n	d9efc <__aeabi_dmul+0x164>
   d9e90:	340c      	adds	r4, #12
   d9e92:	dc1b      	bgt.n	d9ecc <__aeabi_dmul+0x134>
   d9e94:	f104 0414 	add.w	r4, r4, #20
   d9e98:	f1c4 0520 	rsb	r5, r4, #32
   d9e9c:	fa00 f305 	lsl.w	r3, r0, r5
   d9ea0:	fa20 f004 	lsr.w	r0, r0, r4
   d9ea4:	fa01 f205 	lsl.w	r2, r1, r5
   d9ea8:	ea40 0002 	orr.w	r0, r0, r2
   d9eac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9eb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9eb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9eb8:	fa21 f604 	lsr.w	r6, r1, r4
   d9ebc:	eb42 0106 	adc.w	r1, r2, r6
   d9ec0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ec4:	bf08      	it	eq
   d9ec6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9eca:	bd70      	pop	{r4, r5, r6, pc}
   d9ecc:	f1c4 040c 	rsb	r4, r4, #12
   d9ed0:	f1c4 0520 	rsb	r5, r4, #32
   d9ed4:	fa00 f304 	lsl.w	r3, r0, r4
   d9ed8:	fa20 f005 	lsr.w	r0, r0, r5
   d9edc:	fa01 f204 	lsl.w	r2, r1, r4
   d9ee0:	ea40 0002 	orr.w	r0, r0, r2
   d9ee4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9ee8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9eec:	f141 0100 	adc.w	r1, r1, #0
   d9ef0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ef4:	bf08      	it	eq
   d9ef6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9efa:	bd70      	pop	{r4, r5, r6, pc}
   d9efc:	f1c4 0520 	rsb	r5, r4, #32
   d9f00:	fa00 f205 	lsl.w	r2, r0, r5
   d9f04:	ea4e 0e02 	orr.w	lr, lr, r2
   d9f08:	fa20 f304 	lsr.w	r3, r0, r4
   d9f0c:	fa01 f205 	lsl.w	r2, r1, r5
   d9f10:	ea43 0302 	orr.w	r3, r3, r2
   d9f14:	fa21 f004 	lsr.w	r0, r1, r4
   d9f18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9f1c:	fa21 f204 	lsr.w	r2, r1, r4
   d9f20:	ea20 0002 	bic.w	r0, r0, r2
   d9f24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9f28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9f2c:	bf08      	it	eq
   d9f2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9f32:	bd70      	pop	{r4, r5, r6, pc}
   d9f34:	f094 0f00 	teq	r4, #0
   d9f38:	d10f      	bne.n	d9f5a <__aeabi_dmul+0x1c2>
   d9f3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9f3e:	0040      	lsls	r0, r0, #1
   d9f40:	eb41 0101 	adc.w	r1, r1, r1
   d9f44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9f48:	bf08      	it	eq
   d9f4a:	3c01      	subeq	r4, #1
   d9f4c:	d0f7      	beq.n	d9f3e <__aeabi_dmul+0x1a6>
   d9f4e:	ea41 0106 	orr.w	r1, r1, r6
   d9f52:	f095 0f00 	teq	r5, #0
   d9f56:	bf18      	it	ne
   d9f58:	4770      	bxne	lr
   d9f5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9f5e:	0052      	lsls	r2, r2, #1
   d9f60:	eb43 0303 	adc.w	r3, r3, r3
   d9f64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9f68:	bf08      	it	eq
   d9f6a:	3d01      	subeq	r5, #1
   d9f6c:	d0f7      	beq.n	d9f5e <__aeabi_dmul+0x1c6>
   d9f6e:	ea43 0306 	orr.w	r3, r3, r6
   d9f72:	4770      	bx	lr
   d9f74:	ea94 0f0c 	teq	r4, ip
   d9f78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9f7c:	bf18      	it	ne
   d9f7e:	ea95 0f0c 	teqne	r5, ip
   d9f82:	d00c      	beq.n	d9f9e <__aeabi_dmul+0x206>
   d9f84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f88:	bf18      	it	ne
   d9f8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f8e:	d1d1      	bne.n	d9f34 <__aeabi_dmul+0x19c>
   d9f90:	ea81 0103 	eor.w	r1, r1, r3
   d9f94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9f98:	f04f 0000 	mov.w	r0, #0
   d9f9c:	bd70      	pop	{r4, r5, r6, pc}
   d9f9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9fa2:	bf06      	itte	eq
   d9fa4:	4610      	moveq	r0, r2
   d9fa6:	4619      	moveq	r1, r3
   d9fa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9fac:	d019      	beq.n	d9fe2 <__aeabi_dmul+0x24a>
   d9fae:	ea94 0f0c 	teq	r4, ip
   d9fb2:	d102      	bne.n	d9fba <__aeabi_dmul+0x222>
   d9fb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9fb8:	d113      	bne.n	d9fe2 <__aeabi_dmul+0x24a>
   d9fba:	ea95 0f0c 	teq	r5, ip
   d9fbe:	d105      	bne.n	d9fcc <__aeabi_dmul+0x234>
   d9fc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9fc4:	bf1c      	itt	ne
   d9fc6:	4610      	movne	r0, r2
   d9fc8:	4619      	movne	r1, r3
   d9fca:	d10a      	bne.n	d9fe2 <__aeabi_dmul+0x24a>
   d9fcc:	ea81 0103 	eor.w	r1, r1, r3
   d9fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9fd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9fd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9fdc:	f04f 0000 	mov.w	r0, #0
   d9fe0:	bd70      	pop	{r4, r5, r6, pc}
   d9fe2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9fe6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9fea:	bd70      	pop	{r4, r5, r6, pc}

000d9fec <__aeabi_ddiv>:
   d9fec:	b570      	push	{r4, r5, r6, lr}
   d9fee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9ff2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9ff6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9ffa:	bf1d      	ittte	ne
   d9ffc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da000:	ea94 0f0c 	teqne	r4, ip
   da004:	ea95 0f0c 	teqne	r5, ip
   da008:	f000 f8a7 	bleq	da15a <__aeabi_ddiv+0x16e>
   da00c:	eba4 0405 	sub.w	r4, r4, r5
   da010:	ea81 0e03 	eor.w	lr, r1, r3
   da014:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da018:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da01c:	f000 8088 	beq.w	da130 <__aeabi_ddiv+0x144>
   da020:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da024:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da028:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da02c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da030:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da034:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da038:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da03c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da040:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da044:	429d      	cmp	r5, r3
   da046:	bf08      	it	eq
   da048:	4296      	cmpeq	r6, r2
   da04a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da04e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da052:	d202      	bcs.n	da05a <__aeabi_ddiv+0x6e>
   da054:	085b      	lsrs	r3, r3, #1
   da056:	ea4f 0232 	mov.w	r2, r2, rrx
   da05a:	1ab6      	subs	r6, r6, r2
   da05c:	eb65 0503 	sbc.w	r5, r5, r3
   da060:	085b      	lsrs	r3, r3, #1
   da062:	ea4f 0232 	mov.w	r2, r2, rrx
   da066:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da06a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da06e:	ebb6 0e02 	subs.w	lr, r6, r2
   da072:	eb75 0e03 	sbcs.w	lr, r5, r3
   da076:	bf22      	ittt	cs
   da078:	1ab6      	subcs	r6, r6, r2
   da07a:	4675      	movcs	r5, lr
   da07c:	ea40 000c 	orrcs.w	r0, r0, ip
   da080:	085b      	lsrs	r3, r3, #1
   da082:	ea4f 0232 	mov.w	r2, r2, rrx
   da086:	ebb6 0e02 	subs.w	lr, r6, r2
   da08a:	eb75 0e03 	sbcs.w	lr, r5, r3
   da08e:	bf22      	ittt	cs
   da090:	1ab6      	subcs	r6, r6, r2
   da092:	4675      	movcs	r5, lr
   da094:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da098:	085b      	lsrs	r3, r3, #1
   da09a:	ea4f 0232 	mov.w	r2, r2, rrx
   da09e:	ebb6 0e02 	subs.w	lr, r6, r2
   da0a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   da0a6:	bf22      	ittt	cs
   da0a8:	1ab6      	subcs	r6, r6, r2
   da0aa:	4675      	movcs	r5, lr
   da0ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da0b0:	085b      	lsrs	r3, r3, #1
   da0b2:	ea4f 0232 	mov.w	r2, r2, rrx
   da0b6:	ebb6 0e02 	subs.w	lr, r6, r2
   da0ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   da0be:	bf22      	ittt	cs
   da0c0:	1ab6      	subcs	r6, r6, r2
   da0c2:	4675      	movcs	r5, lr
   da0c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da0c8:	ea55 0e06 	orrs.w	lr, r5, r6
   da0cc:	d018      	beq.n	da100 <__aeabi_ddiv+0x114>
   da0ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da0d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da0d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da0da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da0de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da0e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da0e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da0ea:	d1c0      	bne.n	da06e <__aeabi_ddiv+0x82>
   da0ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da0f0:	d10b      	bne.n	da10a <__aeabi_ddiv+0x11e>
   da0f2:	ea41 0100 	orr.w	r1, r1, r0
   da0f6:	f04f 0000 	mov.w	r0, #0
   da0fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da0fe:	e7b6      	b.n	da06e <__aeabi_ddiv+0x82>
   da100:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da104:	bf04      	itt	eq
   da106:	4301      	orreq	r1, r0
   da108:	2000      	moveq	r0, #0
   da10a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da10e:	bf88      	it	hi
   da110:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da114:	f63f aeaf 	bhi.w	d9e76 <__aeabi_dmul+0xde>
   da118:	ebb5 0c03 	subs.w	ip, r5, r3
   da11c:	bf04      	itt	eq
   da11e:	ebb6 0c02 	subseq.w	ip, r6, r2
   da122:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da126:	f150 0000 	adcs.w	r0, r0, #0
   da12a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da12e:	bd70      	pop	{r4, r5, r6, pc}
   da130:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da134:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da138:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da13c:	bfc2      	ittt	gt
   da13e:	ebd4 050c 	rsbsgt	r5, r4, ip
   da142:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da146:	bd70      	popgt	{r4, r5, r6, pc}
   da148:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da14c:	f04f 0e00 	mov.w	lr, #0
   da150:	3c01      	subs	r4, #1
   da152:	e690      	b.n	d9e76 <__aeabi_dmul+0xde>
   da154:	ea45 0e06 	orr.w	lr, r5, r6
   da158:	e68d      	b.n	d9e76 <__aeabi_dmul+0xde>
   da15a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da15e:	ea94 0f0c 	teq	r4, ip
   da162:	bf08      	it	eq
   da164:	ea95 0f0c 	teqeq	r5, ip
   da168:	f43f af3b 	beq.w	d9fe2 <__aeabi_dmul+0x24a>
   da16c:	ea94 0f0c 	teq	r4, ip
   da170:	d10a      	bne.n	da188 <__aeabi_ddiv+0x19c>
   da172:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da176:	f47f af34 	bne.w	d9fe2 <__aeabi_dmul+0x24a>
   da17a:	ea95 0f0c 	teq	r5, ip
   da17e:	f47f af25 	bne.w	d9fcc <__aeabi_dmul+0x234>
   da182:	4610      	mov	r0, r2
   da184:	4619      	mov	r1, r3
   da186:	e72c      	b.n	d9fe2 <__aeabi_dmul+0x24a>
   da188:	ea95 0f0c 	teq	r5, ip
   da18c:	d106      	bne.n	da19c <__aeabi_ddiv+0x1b0>
   da18e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da192:	f43f aefd 	beq.w	d9f90 <__aeabi_dmul+0x1f8>
   da196:	4610      	mov	r0, r2
   da198:	4619      	mov	r1, r3
   da19a:	e722      	b.n	d9fe2 <__aeabi_dmul+0x24a>
   da19c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da1a0:	bf18      	it	ne
   da1a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da1a6:	f47f aec5 	bne.w	d9f34 <__aeabi_dmul+0x19c>
   da1aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da1ae:	f47f af0d 	bne.w	d9fcc <__aeabi_dmul+0x234>
   da1b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da1b6:	f47f aeeb 	bne.w	d9f90 <__aeabi_dmul+0x1f8>
   da1ba:	e712      	b.n	d9fe2 <__aeabi_dmul+0x24a>

000da1bc <__gedf2>:
   da1bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da1c0:	e006      	b.n	da1d0 <__cmpdf2+0x4>
   da1c2:	bf00      	nop

000da1c4 <__ledf2>:
   da1c4:	f04f 0c01 	mov.w	ip, #1
   da1c8:	e002      	b.n	da1d0 <__cmpdf2+0x4>
   da1ca:	bf00      	nop

000da1cc <__cmpdf2>:
   da1cc:	f04f 0c01 	mov.w	ip, #1
   da1d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   da1d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da1d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da1dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da1e0:	bf18      	it	ne
   da1e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   da1e6:	d01b      	beq.n	da220 <__cmpdf2+0x54>
   da1e8:	b001      	add	sp, #4
   da1ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   da1ee:	bf0c      	ite	eq
   da1f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   da1f4:	ea91 0f03 	teqne	r1, r3
   da1f8:	bf02      	ittt	eq
   da1fa:	ea90 0f02 	teqeq	r0, r2
   da1fe:	2000      	moveq	r0, #0
   da200:	4770      	bxeq	lr
   da202:	f110 0f00 	cmn.w	r0, #0
   da206:	ea91 0f03 	teq	r1, r3
   da20a:	bf58      	it	pl
   da20c:	4299      	cmppl	r1, r3
   da20e:	bf08      	it	eq
   da210:	4290      	cmpeq	r0, r2
   da212:	bf2c      	ite	cs
   da214:	17d8      	asrcs	r0, r3, #31
   da216:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   da21a:	f040 0001 	orr.w	r0, r0, #1
   da21e:	4770      	bx	lr
   da220:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da224:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da228:	d102      	bne.n	da230 <__cmpdf2+0x64>
   da22a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da22e:	d107      	bne.n	da240 <__cmpdf2+0x74>
   da230:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da234:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da238:	d1d6      	bne.n	da1e8 <__cmpdf2+0x1c>
   da23a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da23e:	d0d3      	beq.n	da1e8 <__cmpdf2+0x1c>
   da240:	f85d 0b04 	ldr.w	r0, [sp], #4
   da244:	4770      	bx	lr
   da246:	bf00      	nop

000da248 <__aeabi_cdrcmple>:
   da248:	4684      	mov	ip, r0
   da24a:	4610      	mov	r0, r2
   da24c:	4662      	mov	r2, ip
   da24e:	468c      	mov	ip, r1
   da250:	4619      	mov	r1, r3
   da252:	4663      	mov	r3, ip
   da254:	e000      	b.n	da258 <__aeabi_cdcmpeq>
   da256:	bf00      	nop

000da258 <__aeabi_cdcmpeq>:
   da258:	b501      	push	{r0, lr}
   da25a:	f7ff ffb7 	bl	da1cc <__cmpdf2>
   da25e:	2800      	cmp	r0, #0
   da260:	bf48      	it	mi
   da262:	f110 0f00 	cmnmi.w	r0, #0
   da266:	bd01      	pop	{r0, pc}

000da268 <__aeabi_dcmpeq>:
   da268:	f84d ed08 	str.w	lr, [sp, #-8]!
   da26c:	f7ff fff4 	bl	da258 <__aeabi_cdcmpeq>
   da270:	bf0c      	ite	eq
   da272:	2001      	moveq	r0, #1
   da274:	2000      	movne	r0, #0
   da276:	f85d fb08 	ldr.w	pc, [sp], #8
   da27a:	bf00      	nop

000da27c <__aeabi_dcmplt>:
   da27c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da280:	f7ff ffea 	bl	da258 <__aeabi_cdcmpeq>
   da284:	bf34      	ite	cc
   da286:	2001      	movcc	r0, #1
   da288:	2000      	movcs	r0, #0
   da28a:	f85d fb08 	ldr.w	pc, [sp], #8
   da28e:	bf00      	nop

000da290 <__aeabi_dcmple>:
   da290:	f84d ed08 	str.w	lr, [sp, #-8]!
   da294:	f7ff ffe0 	bl	da258 <__aeabi_cdcmpeq>
   da298:	bf94      	ite	ls
   da29a:	2001      	movls	r0, #1
   da29c:	2000      	movhi	r0, #0
   da29e:	f85d fb08 	ldr.w	pc, [sp], #8
   da2a2:	bf00      	nop

000da2a4 <__aeabi_dcmpge>:
   da2a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   da2a8:	f7ff ffce 	bl	da248 <__aeabi_cdrcmple>
   da2ac:	bf94      	ite	ls
   da2ae:	2001      	movls	r0, #1
   da2b0:	2000      	movhi	r0, #0
   da2b2:	f85d fb08 	ldr.w	pc, [sp], #8
   da2b6:	bf00      	nop

000da2b8 <__aeabi_dcmpgt>:
   da2b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   da2bc:	f7ff ffc4 	bl	da248 <__aeabi_cdrcmple>
   da2c0:	bf34      	ite	cc
   da2c2:	2001      	movcc	r0, #1
   da2c4:	2000      	movcs	r0, #0
   da2c6:	f85d fb08 	ldr.w	pc, [sp], #8
   da2ca:	bf00      	nop

000da2cc <__aeabi_dcmpun>:
   da2cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   da2d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da2d4:	d102      	bne.n	da2dc <__aeabi_dcmpun+0x10>
   da2d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da2da:	d10a      	bne.n	da2f2 <__aeabi_dcmpun+0x26>
   da2dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da2e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da2e4:	d102      	bne.n	da2ec <__aeabi_dcmpun+0x20>
   da2e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da2ea:	d102      	bne.n	da2f2 <__aeabi_dcmpun+0x26>
   da2ec:	f04f 0000 	mov.w	r0, #0
   da2f0:	4770      	bx	lr
   da2f2:	f04f 0001 	mov.w	r0, #1
   da2f6:	4770      	bx	lr

000da2f8 <__aeabi_d2iz>:
   da2f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da2fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da300:	d215      	bcs.n	da32e <__aeabi_d2iz+0x36>
   da302:	d511      	bpl.n	da328 <__aeabi_d2iz+0x30>
   da304:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da308:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da30c:	d912      	bls.n	da334 <__aeabi_d2iz+0x3c>
   da30e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da316:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da31a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da31e:	fa23 f002 	lsr.w	r0, r3, r2
   da322:	bf18      	it	ne
   da324:	4240      	negne	r0, r0
   da326:	4770      	bx	lr
   da328:	f04f 0000 	mov.w	r0, #0
   da32c:	4770      	bx	lr
   da32e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da332:	d105      	bne.n	da340 <__aeabi_d2iz+0x48>
   da334:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   da338:	bf08      	it	eq
   da33a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da33e:	4770      	bx	lr
   da340:	f04f 0000 	mov.w	r0, #0
   da344:	4770      	bx	lr
   da346:	bf00      	nop

000da348 <__aeabi_d2uiz>:
   da348:	004a      	lsls	r2, r1, #1
   da34a:	d211      	bcs.n	da370 <__aeabi_d2uiz+0x28>
   da34c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da350:	d211      	bcs.n	da376 <__aeabi_d2uiz+0x2e>
   da352:	d50d      	bpl.n	da370 <__aeabi_d2uiz+0x28>
   da354:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da358:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da35c:	d40e      	bmi.n	da37c <__aeabi_d2uiz+0x34>
   da35e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da366:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da36a:	fa23 f002 	lsr.w	r0, r3, r2
   da36e:	4770      	bx	lr
   da370:	f04f 0000 	mov.w	r0, #0
   da374:	4770      	bx	lr
   da376:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da37a:	d102      	bne.n	da382 <__aeabi_d2uiz+0x3a>
   da37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da380:	4770      	bx	lr
   da382:	f04f 0000 	mov.w	r0, #0
   da386:	4770      	bx	lr

000da388 <__aeabi_d2f>:
   da388:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da38c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da390:	bf24      	itt	cs
   da392:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da396:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da39a:	d90d      	bls.n	da3b8 <__aeabi_d2f+0x30>
   da39c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da3a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da3a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da3a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da3ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da3b0:	bf08      	it	eq
   da3b2:	f020 0001 	biceq.w	r0, r0, #1
   da3b6:	4770      	bx	lr
   da3b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da3bc:	d121      	bne.n	da402 <__aeabi_d2f+0x7a>
   da3be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da3c2:	bfbc      	itt	lt
   da3c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da3c8:	4770      	bxlt	lr
   da3ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da3ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da3d2:	f1c2 0218 	rsb	r2, r2, #24
   da3d6:	f1c2 0c20 	rsb	ip, r2, #32
   da3da:	fa10 f30c 	lsls.w	r3, r0, ip
   da3de:	fa20 f002 	lsr.w	r0, r0, r2
   da3e2:	bf18      	it	ne
   da3e4:	f040 0001 	orrne.w	r0, r0, #1
   da3e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da3ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da3f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   da3f4:	ea40 000c 	orr.w	r0, r0, ip
   da3f8:	fa23 f302 	lsr.w	r3, r3, r2
   da3fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da400:	e7cc      	b.n	da39c <__aeabi_d2f+0x14>
   da402:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da406:	d107      	bne.n	da418 <__aeabi_d2f+0x90>
   da408:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da40c:	bf1e      	ittt	ne
   da40e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da412:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da416:	4770      	bxne	lr
   da418:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da41c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da420:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da424:	4770      	bx	lr
   da426:	bf00      	nop

000da428 <__aeabi_uldivmod>:
   da428:	b953      	cbnz	r3, da440 <__aeabi_uldivmod+0x18>
   da42a:	b94a      	cbnz	r2, da440 <__aeabi_uldivmod+0x18>
   da42c:	2900      	cmp	r1, #0
   da42e:	bf08      	it	eq
   da430:	2800      	cmpeq	r0, #0
   da432:	bf1c      	itt	ne
   da434:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   da438:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   da43c:	f000 b98c 	b.w	da758 <__aeabi_idiv0>
   da440:	f1ad 0c08 	sub.w	ip, sp, #8
   da444:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da448:	f000 f824 	bl	da494 <__udivmoddi4>
   da44c:	f8dd e004 	ldr.w	lr, [sp, #4]
   da450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da454:	b004      	add	sp, #16
   da456:	4770      	bx	lr

000da458 <__aeabi_d2ulz>:
   da458:	b5d0      	push	{r4, r6, r7, lr}
   da45a:	4b0c      	ldr	r3, [pc, #48]	; (da48c <__aeabi_d2ulz+0x34>)
   da45c:	2200      	movs	r2, #0
   da45e:	4606      	mov	r6, r0
   da460:	460f      	mov	r7, r1
   da462:	f7ff fc99 	bl	d9d98 <__aeabi_dmul>
   da466:	f7ff ff6f 	bl	da348 <__aeabi_d2uiz>
   da46a:	4604      	mov	r4, r0
   da46c:	f7ff fc1a 	bl	d9ca4 <__aeabi_ui2d>
   da470:	4b07      	ldr	r3, [pc, #28]	; (da490 <__aeabi_d2ulz+0x38>)
   da472:	2200      	movs	r2, #0
   da474:	f7ff fc90 	bl	d9d98 <__aeabi_dmul>
   da478:	4602      	mov	r2, r0
   da47a:	460b      	mov	r3, r1
   da47c:	4630      	mov	r0, r6
   da47e:	4639      	mov	r1, r7
   da480:	f7ff fad2 	bl	d9a28 <__aeabi_dsub>
   da484:	f7ff ff60 	bl	da348 <__aeabi_d2uiz>
   da488:	4621      	mov	r1, r4
   da48a:	bdd0      	pop	{r4, r6, r7, pc}
   da48c:	3df00000 	.word	0x3df00000
   da490:	41f00000 	.word	0x41f00000

000da494 <__udivmoddi4>:
   da494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da498:	9d08      	ldr	r5, [sp, #32]
   da49a:	4604      	mov	r4, r0
   da49c:	468c      	mov	ip, r1
   da49e:	2b00      	cmp	r3, #0
   da4a0:	f040 8083 	bne.w	da5aa <__udivmoddi4+0x116>
   da4a4:	428a      	cmp	r2, r1
   da4a6:	4617      	mov	r7, r2
   da4a8:	d947      	bls.n	da53a <__udivmoddi4+0xa6>
   da4aa:	fab2 f282 	clz	r2, r2
   da4ae:	b142      	cbz	r2, da4c2 <__udivmoddi4+0x2e>
   da4b0:	f1c2 0020 	rsb	r0, r2, #32
   da4b4:	fa24 f000 	lsr.w	r0, r4, r0
   da4b8:	4091      	lsls	r1, r2
   da4ba:	4097      	lsls	r7, r2
   da4bc:	ea40 0c01 	orr.w	ip, r0, r1
   da4c0:	4094      	lsls	r4, r2
   da4c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da4c6:	0c23      	lsrs	r3, r4, #16
   da4c8:	fbbc f6f8 	udiv	r6, ip, r8
   da4cc:	fa1f fe87 	uxth.w	lr, r7
   da4d0:	fb08 c116 	mls	r1, r8, r6, ip
   da4d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da4d8:	fb06 f10e 	mul.w	r1, r6, lr
   da4dc:	4299      	cmp	r1, r3
   da4de:	d909      	bls.n	da4f4 <__udivmoddi4+0x60>
   da4e0:	18fb      	adds	r3, r7, r3
   da4e2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   da4e6:	f080 8119 	bcs.w	da71c <__udivmoddi4+0x288>
   da4ea:	4299      	cmp	r1, r3
   da4ec:	f240 8116 	bls.w	da71c <__udivmoddi4+0x288>
   da4f0:	3e02      	subs	r6, #2
   da4f2:	443b      	add	r3, r7
   da4f4:	1a5b      	subs	r3, r3, r1
   da4f6:	b2a4      	uxth	r4, r4
   da4f8:	fbb3 f0f8 	udiv	r0, r3, r8
   da4fc:	fb08 3310 	mls	r3, r8, r0, r3
   da500:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   da504:	fb00 fe0e 	mul.w	lr, r0, lr
   da508:	45a6      	cmp	lr, r4
   da50a:	d909      	bls.n	da520 <__udivmoddi4+0x8c>
   da50c:	193c      	adds	r4, r7, r4
   da50e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da512:	f080 8105 	bcs.w	da720 <__udivmoddi4+0x28c>
   da516:	45a6      	cmp	lr, r4
   da518:	f240 8102 	bls.w	da720 <__udivmoddi4+0x28c>
   da51c:	3802      	subs	r0, #2
   da51e:	443c      	add	r4, r7
   da520:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   da524:	eba4 040e 	sub.w	r4, r4, lr
   da528:	2600      	movs	r6, #0
   da52a:	b11d      	cbz	r5, da534 <__udivmoddi4+0xa0>
   da52c:	40d4      	lsrs	r4, r2
   da52e:	2300      	movs	r3, #0
   da530:	e9c5 4300 	strd	r4, r3, [r5]
   da534:	4631      	mov	r1, r6
   da536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da53a:	b902      	cbnz	r2, da53e <__udivmoddi4+0xaa>
   da53c:	deff      	udf	#255	; 0xff
   da53e:	fab2 f282 	clz	r2, r2
   da542:	2a00      	cmp	r2, #0
   da544:	d150      	bne.n	da5e8 <__udivmoddi4+0x154>
   da546:	1bcb      	subs	r3, r1, r7
   da548:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da54c:	fa1f f887 	uxth.w	r8, r7
   da550:	2601      	movs	r6, #1
   da552:	fbb3 fcfe 	udiv	ip, r3, lr
   da556:	0c21      	lsrs	r1, r4, #16
   da558:	fb0e 331c 	mls	r3, lr, ip, r3
   da55c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da560:	fb08 f30c 	mul.w	r3, r8, ip
   da564:	428b      	cmp	r3, r1
   da566:	d907      	bls.n	da578 <__udivmoddi4+0xe4>
   da568:	1879      	adds	r1, r7, r1
   da56a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   da56e:	d202      	bcs.n	da576 <__udivmoddi4+0xe2>
   da570:	428b      	cmp	r3, r1
   da572:	f200 80e9 	bhi.w	da748 <__udivmoddi4+0x2b4>
   da576:	4684      	mov	ip, r0
   da578:	1ac9      	subs	r1, r1, r3
   da57a:	b2a3      	uxth	r3, r4
   da57c:	fbb1 f0fe 	udiv	r0, r1, lr
   da580:	fb0e 1110 	mls	r1, lr, r0, r1
   da584:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   da588:	fb08 f800 	mul.w	r8, r8, r0
   da58c:	45a0      	cmp	r8, r4
   da58e:	d907      	bls.n	da5a0 <__udivmoddi4+0x10c>
   da590:	193c      	adds	r4, r7, r4
   da592:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da596:	d202      	bcs.n	da59e <__udivmoddi4+0x10a>
   da598:	45a0      	cmp	r8, r4
   da59a:	f200 80d9 	bhi.w	da750 <__udivmoddi4+0x2bc>
   da59e:	4618      	mov	r0, r3
   da5a0:	eba4 0408 	sub.w	r4, r4, r8
   da5a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   da5a8:	e7bf      	b.n	da52a <__udivmoddi4+0x96>
   da5aa:	428b      	cmp	r3, r1
   da5ac:	d909      	bls.n	da5c2 <__udivmoddi4+0x12e>
   da5ae:	2d00      	cmp	r5, #0
   da5b0:	f000 80b1 	beq.w	da716 <__udivmoddi4+0x282>
   da5b4:	2600      	movs	r6, #0
   da5b6:	e9c5 0100 	strd	r0, r1, [r5]
   da5ba:	4630      	mov	r0, r6
   da5bc:	4631      	mov	r1, r6
   da5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da5c2:	fab3 f683 	clz	r6, r3
   da5c6:	2e00      	cmp	r6, #0
   da5c8:	d14a      	bne.n	da660 <__udivmoddi4+0x1cc>
   da5ca:	428b      	cmp	r3, r1
   da5cc:	d302      	bcc.n	da5d4 <__udivmoddi4+0x140>
   da5ce:	4282      	cmp	r2, r0
   da5d0:	f200 80b8 	bhi.w	da744 <__udivmoddi4+0x2b0>
   da5d4:	1a84      	subs	r4, r0, r2
   da5d6:	eb61 0103 	sbc.w	r1, r1, r3
   da5da:	2001      	movs	r0, #1
   da5dc:	468c      	mov	ip, r1
   da5de:	2d00      	cmp	r5, #0
   da5e0:	d0a8      	beq.n	da534 <__udivmoddi4+0xa0>
   da5e2:	e9c5 4c00 	strd	r4, ip, [r5]
   da5e6:	e7a5      	b.n	da534 <__udivmoddi4+0xa0>
   da5e8:	f1c2 0320 	rsb	r3, r2, #32
   da5ec:	fa20 f603 	lsr.w	r6, r0, r3
   da5f0:	4097      	lsls	r7, r2
   da5f2:	fa01 f002 	lsl.w	r0, r1, r2
   da5f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da5fa:	40d9      	lsrs	r1, r3
   da5fc:	4330      	orrs	r0, r6
   da5fe:	0c03      	lsrs	r3, r0, #16
   da600:	fbb1 f6fe 	udiv	r6, r1, lr
   da604:	fa1f f887 	uxth.w	r8, r7
   da608:	fb0e 1116 	mls	r1, lr, r6, r1
   da60c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da610:	fb06 f108 	mul.w	r1, r6, r8
   da614:	4299      	cmp	r1, r3
   da616:	fa04 f402 	lsl.w	r4, r4, r2
   da61a:	d909      	bls.n	da630 <__udivmoddi4+0x19c>
   da61c:	18fb      	adds	r3, r7, r3
   da61e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   da622:	f080 808d 	bcs.w	da740 <__udivmoddi4+0x2ac>
   da626:	4299      	cmp	r1, r3
   da628:	f240 808a 	bls.w	da740 <__udivmoddi4+0x2ac>
   da62c:	3e02      	subs	r6, #2
   da62e:	443b      	add	r3, r7
   da630:	1a5b      	subs	r3, r3, r1
   da632:	b281      	uxth	r1, r0
   da634:	fbb3 f0fe 	udiv	r0, r3, lr
   da638:	fb0e 3310 	mls	r3, lr, r0, r3
   da63c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da640:	fb00 f308 	mul.w	r3, r0, r8
   da644:	428b      	cmp	r3, r1
   da646:	d907      	bls.n	da658 <__udivmoddi4+0x1c4>
   da648:	1879      	adds	r1, r7, r1
   da64a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   da64e:	d273      	bcs.n	da738 <__udivmoddi4+0x2a4>
   da650:	428b      	cmp	r3, r1
   da652:	d971      	bls.n	da738 <__udivmoddi4+0x2a4>
   da654:	3802      	subs	r0, #2
   da656:	4439      	add	r1, r7
   da658:	1acb      	subs	r3, r1, r3
   da65a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da65e:	e778      	b.n	da552 <__udivmoddi4+0xbe>
   da660:	f1c6 0c20 	rsb	ip, r6, #32
   da664:	fa03 f406 	lsl.w	r4, r3, r6
   da668:	fa22 f30c 	lsr.w	r3, r2, ip
   da66c:	431c      	orrs	r4, r3
   da66e:	fa20 f70c 	lsr.w	r7, r0, ip
   da672:	fa01 f306 	lsl.w	r3, r1, r6
   da676:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da67a:	fa21 f10c 	lsr.w	r1, r1, ip
   da67e:	431f      	orrs	r7, r3
   da680:	0c3b      	lsrs	r3, r7, #16
   da682:	fbb1 f9fe 	udiv	r9, r1, lr
   da686:	fa1f f884 	uxth.w	r8, r4
   da68a:	fb0e 1119 	mls	r1, lr, r9, r1
   da68e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da692:	fb09 fa08 	mul.w	sl, r9, r8
   da696:	458a      	cmp	sl, r1
   da698:	fa02 f206 	lsl.w	r2, r2, r6
   da69c:	fa00 f306 	lsl.w	r3, r0, r6
   da6a0:	d908      	bls.n	da6b4 <__udivmoddi4+0x220>
   da6a2:	1861      	adds	r1, r4, r1
   da6a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   da6a8:	d248      	bcs.n	da73c <__udivmoddi4+0x2a8>
   da6aa:	458a      	cmp	sl, r1
   da6ac:	d946      	bls.n	da73c <__udivmoddi4+0x2a8>
   da6ae:	f1a9 0902 	sub.w	r9, r9, #2
   da6b2:	4421      	add	r1, r4
   da6b4:	eba1 010a 	sub.w	r1, r1, sl
   da6b8:	b2bf      	uxth	r7, r7
   da6ba:	fbb1 f0fe 	udiv	r0, r1, lr
   da6be:	fb0e 1110 	mls	r1, lr, r0, r1
   da6c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da6c6:	fb00 f808 	mul.w	r8, r0, r8
   da6ca:	45b8      	cmp	r8, r7
   da6cc:	d907      	bls.n	da6de <__udivmoddi4+0x24a>
   da6ce:	19e7      	adds	r7, r4, r7
   da6d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   da6d4:	d22e      	bcs.n	da734 <__udivmoddi4+0x2a0>
   da6d6:	45b8      	cmp	r8, r7
   da6d8:	d92c      	bls.n	da734 <__udivmoddi4+0x2a0>
   da6da:	3802      	subs	r0, #2
   da6dc:	4427      	add	r7, r4
   da6de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da6e2:	eba7 0708 	sub.w	r7, r7, r8
   da6e6:	fba0 8902 	umull	r8, r9, r0, r2
   da6ea:	454f      	cmp	r7, r9
   da6ec:	46c6      	mov	lr, r8
   da6ee:	4649      	mov	r1, r9
   da6f0:	d31a      	bcc.n	da728 <__udivmoddi4+0x294>
   da6f2:	d017      	beq.n	da724 <__udivmoddi4+0x290>
   da6f4:	b15d      	cbz	r5, da70e <__udivmoddi4+0x27a>
   da6f6:	ebb3 020e 	subs.w	r2, r3, lr
   da6fa:	eb67 0701 	sbc.w	r7, r7, r1
   da6fe:	fa07 fc0c 	lsl.w	ip, r7, ip
   da702:	40f2      	lsrs	r2, r6
   da704:	ea4c 0202 	orr.w	r2, ip, r2
   da708:	40f7      	lsrs	r7, r6
   da70a:	e9c5 2700 	strd	r2, r7, [r5]
   da70e:	2600      	movs	r6, #0
   da710:	4631      	mov	r1, r6
   da712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da716:	462e      	mov	r6, r5
   da718:	4628      	mov	r0, r5
   da71a:	e70b      	b.n	da534 <__udivmoddi4+0xa0>
   da71c:	4606      	mov	r6, r0
   da71e:	e6e9      	b.n	da4f4 <__udivmoddi4+0x60>
   da720:	4618      	mov	r0, r3
   da722:	e6fd      	b.n	da520 <__udivmoddi4+0x8c>
   da724:	4543      	cmp	r3, r8
   da726:	d2e5      	bcs.n	da6f4 <__udivmoddi4+0x260>
   da728:	ebb8 0e02 	subs.w	lr, r8, r2
   da72c:	eb69 0104 	sbc.w	r1, r9, r4
   da730:	3801      	subs	r0, #1
   da732:	e7df      	b.n	da6f4 <__udivmoddi4+0x260>
   da734:	4608      	mov	r0, r1
   da736:	e7d2      	b.n	da6de <__udivmoddi4+0x24a>
   da738:	4660      	mov	r0, ip
   da73a:	e78d      	b.n	da658 <__udivmoddi4+0x1c4>
   da73c:	4681      	mov	r9, r0
   da73e:	e7b9      	b.n	da6b4 <__udivmoddi4+0x220>
   da740:	4666      	mov	r6, ip
   da742:	e775      	b.n	da630 <__udivmoddi4+0x19c>
   da744:	4630      	mov	r0, r6
   da746:	e74a      	b.n	da5de <__udivmoddi4+0x14a>
   da748:	f1ac 0c02 	sub.w	ip, ip, #2
   da74c:	4439      	add	r1, r7
   da74e:	e713      	b.n	da578 <__udivmoddi4+0xe4>
   da750:	3802      	subs	r0, #2
   da752:	443c      	add	r4, r7
   da754:	e724      	b.n	da5a0 <__udivmoddi4+0x10c>
   da756:	bf00      	nop

000da758 <__aeabi_idiv0>:
   da758:	4770      	bx	lr
   da75a:	bf00      	nop

000da75c <atof>:
   da75c:	2100      	movs	r1, #0
   da75e:	f000 bf25 	b.w	db5ac <strtod>
	...

000da764 <calloc>:
   da764:	4b02      	ldr	r3, [pc, #8]	; (da770 <calloc+0xc>)
   da766:	460a      	mov	r2, r1
   da768:	4601      	mov	r1, r0
   da76a:	6818      	ldr	r0, [r3, #0]
   da76c:	f000 b840 	b.w	da7f0 <_calloc_r>
   da770:	2003e26c 	.word	0x2003e26c

000da774 <__cxa_atexit>:
   da774:	b510      	push	{r4, lr}
   da776:	4c05      	ldr	r4, [pc, #20]	; (da78c <__cxa_atexit+0x18>)
   da778:	4613      	mov	r3, r2
   da77a:	b12c      	cbz	r4, da788 <__cxa_atexit+0x14>
   da77c:	460a      	mov	r2, r1
   da77e:	4601      	mov	r1, r0
   da780:	2002      	movs	r0, #2
   da782:	f3af 8000 	nop.w
   da786:	bd10      	pop	{r4, pc}
   da788:	4620      	mov	r0, r4
   da78a:	e7fc      	b.n	da786 <__cxa_atexit+0x12>
   da78c:	00000000 	.word	0x00000000

000da790 <memcpy>:
   da790:	440a      	add	r2, r1
   da792:	4291      	cmp	r1, r2
   da794:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da798:	d100      	bne.n	da79c <memcpy+0xc>
   da79a:	4770      	bx	lr
   da79c:	b510      	push	{r4, lr}
   da79e:	f811 4b01 	ldrb.w	r4, [r1], #1
   da7a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   da7a6:	4291      	cmp	r1, r2
   da7a8:	d1f9      	bne.n	da79e <memcpy+0xe>
   da7aa:	bd10      	pop	{r4, pc}

000da7ac <memmove>:
   da7ac:	4288      	cmp	r0, r1
   da7ae:	b510      	push	{r4, lr}
   da7b0:	eb01 0402 	add.w	r4, r1, r2
   da7b4:	d902      	bls.n	da7bc <memmove+0x10>
   da7b6:	4284      	cmp	r4, r0
   da7b8:	4623      	mov	r3, r4
   da7ba:	d807      	bhi.n	da7cc <memmove+0x20>
   da7bc:	1e43      	subs	r3, r0, #1
   da7be:	42a1      	cmp	r1, r4
   da7c0:	d008      	beq.n	da7d4 <memmove+0x28>
   da7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   da7c6:	f803 2f01 	strb.w	r2, [r3, #1]!
   da7ca:	e7f8      	b.n	da7be <memmove+0x12>
   da7cc:	4402      	add	r2, r0
   da7ce:	4601      	mov	r1, r0
   da7d0:	428a      	cmp	r2, r1
   da7d2:	d100      	bne.n	da7d6 <memmove+0x2a>
   da7d4:	bd10      	pop	{r4, pc}
   da7d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da7da:	f802 4d01 	strb.w	r4, [r2, #-1]!
   da7de:	e7f7      	b.n	da7d0 <memmove+0x24>

000da7e0 <memset>:
   da7e0:	4402      	add	r2, r0
   da7e2:	4603      	mov	r3, r0
   da7e4:	4293      	cmp	r3, r2
   da7e6:	d100      	bne.n	da7ea <memset+0xa>
   da7e8:	4770      	bx	lr
   da7ea:	f803 1b01 	strb.w	r1, [r3], #1
   da7ee:	e7f9      	b.n	da7e4 <memset+0x4>

000da7f0 <_calloc_r>:
   da7f0:	b513      	push	{r0, r1, r4, lr}
   da7f2:	434a      	muls	r2, r1
   da7f4:	4611      	mov	r1, r2
   da7f6:	9201      	str	r2, [sp, #4]
   da7f8:	f7fc fcdc 	bl	d71b4 <_malloc_r>
   da7fc:	4604      	mov	r4, r0
   da7fe:	b118      	cbz	r0, da808 <_calloc_r+0x18>
   da800:	9a01      	ldr	r2, [sp, #4]
   da802:	2100      	movs	r1, #0
   da804:	f7ff ffec 	bl	da7e0 <memset>
   da808:	4620      	mov	r0, r4
   da80a:	b002      	add	sp, #8
   da80c:	bd10      	pop	{r4, pc}
	...

000da810 <srand>:
   da810:	b538      	push	{r3, r4, r5, lr}
   da812:	4b0d      	ldr	r3, [pc, #52]	; (da848 <srand+0x38>)
   da814:	681d      	ldr	r5, [r3, #0]
   da816:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da818:	4604      	mov	r4, r0
   da81a:	b97b      	cbnz	r3, da83c <srand+0x2c>
   da81c:	2018      	movs	r0, #24
   da81e:	f7fc fca1 	bl	d7164 <malloc>
   da822:	4a0a      	ldr	r2, [pc, #40]	; (da84c <srand+0x3c>)
   da824:	4b0a      	ldr	r3, [pc, #40]	; (da850 <srand+0x40>)
   da826:	63a8      	str	r0, [r5, #56]	; 0x38
   da828:	e9c0 2300 	strd	r2, r3, [r0]
   da82c:	4b09      	ldr	r3, [pc, #36]	; (da854 <srand+0x44>)
   da82e:	6083      	str	r3, [r0, #8]
   da830:	230b      	movs	r3, #11
   da832:	8183      	strh	r3, [r0, #12]
   da834:	2201      	movs	r2, #1
   da836:	2300      	movs	r3, #0
   da838:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da83c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da83e:	2200      	movs	r2, #0
   da840:	611c      	str	r4, [r3, #16]
   da842:	615a      	str	r2, [r3, #20]
   da844:	bd38      	pop	{r3, r4, r5, pc}
   da846:	bf00      	nop
   da848:	2003e26c 	.word	0x2003e26c
   da84c:	abcd330e 	.word	0xabcd330e
   da850:	e66d1234 	.word	0xe66d1234
   da854:	0005deec 	.word	0x0005deec

000da858 <strchr>:
   da858:	b2c9      	uxtb	r1, r1
   da85a:	4603      	mov	r3, r0
   da85c:	f810 2b01 	ldrb.w	r2, [r0], #1
   da860:	b11a      	cbz	r2, da86a <strchr+0x12>
   da862:	428a      	cmp	r2, r1
   da864:	d1f9      	bne.n	da85a <strchr+0x2>
   da866:	4618      	mov	r0, r3
   da868:	4770      	bx	lr
   da86a:	2900      	cmp	r1, #0
   da86c:	bf18      	it	ne
   da86e:	2300      	movne	r3, #0
   da870:	e7f9      	b.n	da866 <strchr+0xe>

000da872 <strcmp>:
   da872:	f810 2b01 	ldrb.w	r2, [r0], #1
   da876:	f811 3b01 	ldrb.w	r3, [r1], #1
   da87a:	2a01      	cmp	r2, #1
   da87c:	bf28      	it	cs
   da87e:	429a      	cmpcs	r2, r3
   da880:	d0f7      	beq.n	da872 <strcmp>
   da882:	1ad0      	subs	r0, r2, r3
   da884:	4770      	bx	lr

000da886 <strcpy>:
   da886:	4603      	mov	r3, r0
   da888:	f811 2b01 	ldrb.w	r2, [r1], #1
   da88c:	f803 2b01 	strb.w	r2, [r3], #1
   da890:	2a00      	cmp	r2, #0
   da892:	d1f9      	bne.n	da888 <strcpy+0x2>
   da894:	4770      	bx	lr
	...

000da898 <strdup>:
   da898:	4b02      	ldr	r3, [pc, #8]	; (da8a4 <strdup+0xc>)
   da89a:	4601      	mov	r1, r0
   da89c:	6818      	ldr	r0, [r3, #0]
   da89e:	f000 b803 	b.w	da8a8 <_strdup_r>
   da8a2:	bf00      	nop
   da8a4:	2003e26c 	.word	0x2003e26c

000da8a8 <_strdup_r>:
   da8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da8aa:	4604      	mov	r4, r0
   da8ac:	4608      	mov	r0, r1
   da8ae:	460d      	mov	r5, r1
   da8b0:	f000 f80f 	bl	da8d2 <strlen>
   da8b4:	1c42      	adds	r2, r0, #1
   da8b6:	4611      	mov	r1, r2
   da8b8:	4620      	mov	r0, r4
   da8ba:	9201      	str	r2, [sp, #4]
   da8bc:	f7fc fc7a 	bl	d71b4 <_malloc_r>
   da8c0:	4604      	mov	r4, r0
   da8c2:	b118      	cbz	r0, da8cc <_strdup_r+0x24>
   da8c4:	9a01      	ldr	r2, [sp, #4]
   da8c6:	4629      	mov	r1, r5
   da8c8:	f7ff ff62 	bl	da790 <memcpy>
   da8cc:	4620      	mov	r0, r4
   da8ce:	b003      	add	sp, #12
   da8d0:	bd30      	pop	{r4, r5, pc}

000da8d2 <strlen>:
   da8d2:	4603      	mov	r3, r0
   da8d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   da8d8:	2a00      	cmp	r2, #0
   da8da:	d1fb      	bne.n	da8d4 <strlen+0x2>
   da8dc:	1a18      	subs	r0, r3, r0
   da8de:	3801      	subs	r0, #1
   da8e0:	4770      	bx	lr

000da8e2 <strncmp>:
   da8e2:	b510      	push	{r4, lr}
   da8e4:	b16a      	cbz	r2, da902 <strncmp+0x20>
   da8e6:	3901      	subs	r1, #1
   da8e8:	1884      	adds	r4, r0, r2
   da8ea:	f810 3b01 	ldrb.w	r3, [r0], #1
   da8ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   da8f2:	4293      	cmp	r3, r2
   da8f4:	d103      	bne.n	da8fe <strncmp+0x1c>
   da8f6:	42a0      	cmp	r0, r4
   da8f8:	d001      	beq.n	da8fe <strncmp+0x1c>
   da8fa:	2b00      	cmp	r3, #0
   da8fc:	d1f5      	bne.n	da8ea <strncmp+0x8>
   da8fe:	1a98      	subs	r0, r3, r2
   da900:	bd10      	pop	{r4, pc}
   da902:	4610      	mov	r0, r2
   da904:	e7fc      	b.n	da900 <strncmp+0x1e>

000da906 <strncpy>:
   da906:	b510      	push	{r4, lr}
   da908:	3901      	subs	r1, #1
   da90a:	4603      	mov	r3, r0
   da90c:	b132      	cbz	r2, da91c <strncpy+0x16>
   da90e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da912:	f803 4b01 	strb.w	r4, [r3], #1
   da916:	3a01      	subs	r2, #1
   da918:	2c00      	cmp	r4, #0
   da91a:	d1f7      	bne.n	da90c <strncpy+0x6>
   da91c:	441a      	add	r2, r3
   da91e:	2100      	movs	r1, #0
   da920:	4293      	cmp	r3, r2
   da922:	d100      	bne.n	da926 <strncpy+0x20>
   da924:	bd10      	pop	{r4, pc}
   da926:	f803 1b01 	strb.w	r1, [r3], #1
   da92a:	e7f9      	b.n	da920 <strncpy+0x1a>

000da92c <strstr>:
   da92c:	b5f0      	push	{r4, r5, r6, r7, lr}
   da92e:	780c      	ldrb	r4, [r1, #0]
   da930:	b164      	cbz	r4, da94c <strstr+0x20>
   da932:	4603      	mov	r3, r0
   da934:	781a      	ldrb	r2, [r3, #0]
   da936:	4618      	mov	r0, r3
   da938:	1c5e      	adds	r6, r3, #1
   da93a:	b90a      	cbnz	r2, da940 <strstr+0x14>
   da93c:	4610      	mov	r0, r2
   da93e:	e005      	b.n	da94c <strstr+0x20>
   da940:	4294      	cmp	r4, r2
   da942:	d108      	bne.n	da956 <strstr+0x2a>
   da944:	460d      	mov	r5, r1
   da946:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   da94a:	b902      	cbnz	r2, da94e <strstr+0x22>
   da94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da94e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   da952:	4297      	cmp	r7, r2
   da954:	d0f7      	beq.n	da946 <strstr+0x1a>
   da956:	4633      	mov	r3, r6
   da958:	e7ec      	b.n	da934 <strstr+0x8>

000da95a <sulp>:
   da95a:	b570      	push	{r4, r5, r6, lr}
   da95c:	4604      	mov	r4, r0
   da95e:	460d      	mov	r5, r1
   da960:	ec45 4b10 	vmov	d0, r4, r5
   da964:	4616      	mov	r6, r2
   da966:	f001 fceb 	bl	dc340 <__ulp>
   da96a:	ec51 0b10 	vmov	r0, r1, d0
   da96e:	b17e      	cbz	r6, da990 <sulp+0x36>
   da970:	f3c5 530a 	ubfx	r3, r5, #20, #11
   da974:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   da978:	2b00      	cmp	r3, #0
   da97a:	dd09      	ble.n	da990 <sulp+0x36>
   da97c:	051b      	lsls	r3, r3, #20
   da97e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   da982:	2400      	movs	r4, #0
   da984:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   da988:	4622      	mov	r2, r4
   da98a:	462b      	mov	r3, r5
   da98c:	f7ff fa04 	bl	d9d98 <__aeabi_dmul>
   da990:	bd70      	pop	{r4, r5, r6, pc}
   da992:	0000      	movs	r0, r0
   da994:	0000      	movs	r0, r0
	...

000da998 <_strtod_l>:
   da998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da99c:	b0a3      	sub	sp, #140	; 0x8c
   da99e:	461f      	mov	r7, r3
   da9a0:	2300      	movs	r3, #0
   da9a2:	931e      	str	r3, [sp, #120]	; 0x78
   da9a4:	4ba4      	ldr	r3, [pc, #656]	; (dac38 <_strtod_l+0x2a0>)
   da9a6:	9219      	str	r2, [sp, #100]	; 0x64
   da9a8:	681b      	ldr	r3, [r3, #0]
   da9aa:	9307      	str	r3, [sp, #28]
   da9ac:	4604      	mov	r4, r0
   da9ae:	4618      	mov	r0, r3
   da9b0:	4688      	mov	r8, r1
   da9b2:	f7ff ff8e 	bl	da8d2 <strlen>
   da9b6:	f04f 0a00 	mov.w	sl, #0
   da9ba:	4605      	mov	r5, r0
   da9bc:	f04f 0b00 	mov.w	fp, #0
   da9c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   da9c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da9c6:	781a      	ldrb	r2, [r3, #0]
   da9c8:	2a2b      	cmp	r2, #43	; 0x2b
   da9ca:	d04c      	beq.n	daa66 <_strtod_l+0xce>
   da9cc:	d839      	bhi.n	daa42 <_strtod_l+0xaa>
   da9ce:	2a0d      	cmp	r2, #13
   da9d0:	d832      	bhi.n	daa38 <_strtod_l+0xa0>
   da9d2:	2a08      	cmp	r2, #8
   da9d4:	d832      	bhi.n	daa3c <_strtod_l+0xa4>
   da9d6:	2a00      	cmp	r2, #0
   da9d8:	d03c      	beq.n	daa54 <_strtod_l+0xbc>
   da9da:	2300      	movs	r3, #0
   da9dc:	930e      	str	r3, [sp, #56]	; 0x38
   da9de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   da9e0:	7833      	ldrb	r3, [r6, #0]
   da9e2:	2b30      	cmp	r3, #48	; 0x30
   da9e4:	f040 80b4 	bne.w	dab50 <_strtod_l+0x1b8>
   da9e8:	7873      	ldrb	r3, [r6, #1]
   da9ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da9ee:	2b58      	cmp	r3, #88	; 0x58
   da9f0:	d16c      	bne.n	daacc <_strtod_l+0x134>
   da9f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da9f4:	9301      	str	r3, [sp, #4]
   da9f6:	ab1e      	add	r3, sp, #120	; 0x78
   da9f8:	9702      	str	r7, [sp, #8]
   da9fa:	9300      	str	r3, [sp, #0]
   da9fc:	4a8f      	ldr	r2, [pc, #572]	; (dac3c <_strtod_l+0x2a4>)
   da9fe:	ab1f      	add	r3, sp, #124	; 0x7c
   daa00:	a91d      	add	r1, sp, #116	; 0x74
   daa02:	4620      	mov	r0, r4
   daa04:	f000 fe98 	bl	db738 <__gethex>
   daa08:	f010 0707 	ands.w	r7, r0, #7
   daa0c:	4605      	mov	r5, r0
   daa0e:	d005      	beq.n	daa1c <_strtod_l+0x84>
   daa10:	2f06      	cmp	r7, #6
   daa12:	d12a      	bne.n	daa6a <_strtod_l+0xd2>
   daa14:	3601      	adds	r6, #1
   daa16:	2300      	movs	r3, #0
   daa18:	961d      	str	r6, [sp, #116]	; 0x74
   daa1a:	930e      	str	r3, [sp, #56]	; 0x38
   daa1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   daa1e:	2b00      	cmp	r3, #0
   daa20:	f040 8596 	bne.w	db550 <_strtod_l+0xbb8>
   daa24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   daa26:	b1db      	cbz	r3, daa60 <_strtod_l+0xc8>
   daa28:	4652      	mov	r2, sl
   daa2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   daa2e:	ec43 2b10 	vmov	d0, r2, r3
   daa32:	b023      	add	sp, #140	; 0x8c
   daa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daa38:	2a20      	cmp	r2, #32
   daa3a:	d1ce      	bne.n	da9da <_strtod_l+0x42>
   daa3c:	3301      	adds	r3, #1
   daa3e:	931d      	str	r3, [sp, #116]	; 0x74
   daa40:	e7c0      	b.n	da9c4 <_strtod_l+0x2c>
   daa42:	2a2d      	cmp	r2, #45	; 0x2d
   daa44:	d1c9      	bne.n	da9da <_strtod_l+0x42>
   daa46:	2201      	movs	r2, #1
   daa48:	920e      	str	r2, [sp, #56]	; 0x38
   daa4a:	1c5a      	adds	r2, r3, #1
   daa4c:	921d      	str	r2, [sp, #116]	; 0x74
   daa4e:	785b      	ldrb	r3, [r3, #1]
   daa50:	2b00      	cmp	r3, #0
   daa52:	d1c4      	bne.n	da9de <_strtod_l+0x46>
   daa54:	9b19      	ldr	r3, [sp, #100]	; 0x64
   daa56:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   daa5a:	2b00      	cmp	r3, #0
   daa5c:	f040 8576 	bne.w	db54c <_strtod_l+0xbb4>
   daa60:	4652      	mov	r2, sl
   daa62:	465b      	mov	r3, fp
   daa64:	e7e3      	b.n	daa2e <_strtod_l+0x96>
   daa66:	2200      	movs	r2, #0
   daa68:	e7ee      	b.n	daa48 <_strtod_l+0xb0>
   daa6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   daa6c:	b13a      	cbz	r2, daa7e <_strtod_l+0xe6>
   daa6e:	2135      	movs	r1, #53	; 0x35
   daa70:	a820      	add	r0, sp, #128	; 0x80
   daa72:	f001 fd64 	bl	dc53e <__copybits>
   daa76:	991e      	ldr	r1, [sp, #120]	; 0x78
   daa78:	4620      	mov	r0, r4
   daa7a:	f001 f999 	bl	dbdb0 <_Bfree>
   daa7e:	3f01      	subs	r7, #1
   daa80:	2f05      	cmp	r7, #5
   daa82:	d807      	bhi.n	daa94 <_strtod_l+0xfc>
   daa84:	e8df f007 	tbb	[pc, r7]
   daa88:	1d180b0e 	.word	0x1d180b0e
   daa8c:	030e      	.short	0x030e
   daa8e:	f04f 0b00 	mov.w	fp, #0
   daa92:	46da      	mov	sl, fp
   daa94:	0728      	lsls	r0, r5, #28
   daa96:	d5c1      	bpl.n	daa1c <_strtod_l+0x84>
   daa98:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   daa9c:	e7be      	b.n	daa1c <_strtod_l+0x84>
   daa9e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   daaa2:	e7f7      	b.n	daa94 <_strtod_l+0xfc>
   daaa4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   daaa8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   daaaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   daaae:	f202 4233 	addw	r2, r2, #1075	; 0x433
   daab2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   daab6:	e7ed      	b.n	daa94 <_strtod_l+0xfc>
   daab8:	f8df b184 	ldr.w	fp, [pc, #388]	; dac40 <_strtod_l+0x2a8>
   daabc:	f04f 0a00 	mov.w	sl, #0
   daac0:	e7e8      	b.n	daa94 <_strtod_l+0xfc>
   daac2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   daac6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   daaca:	e7e3      	b.n	daa94 <_strtod_l+0xfc>
   daacc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daace:	1c5a      	adds	r2, r3, #1
   daad0:	921d      	str	r2, [sp, #116]	; 0x74
   daad2:	785b      	ldrb	r3, [r3, #1]
   daad4:	2b30      	cmp	r3, #48	; 0x30
   daad6:	d0f9      	beq.n	daacc <_strtod_l+0x134>
   daad8:	2b00      	cmp	r3, #0
   daada:	d09f      	beq.n	daa1c <_strtod_l+0x84>
   daadc:	2301      	movs	r3, #1
   daade:	f04f 0900 	mov.w	r9, #0
   daae2:	9304      	str	r3, [sp, #16]
   daae4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   daae6:	930a      	str	r3, [sp, #40]	; 0x28
   daae8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   daaec:	464f      	mov	r7, r9
   daaee:	220a      	movs	r2, #10
   daaf0:	981d      	ldr	r0, [sp, #116]	; 0x74
   daaf2:	7806      	ldrb	r6, [r0, #0]
   daaf4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   daaf8:	b2d9      	uxtb	r1, r3
   daafa:	2909      	cmp	r1, #9
   daafc:	d92a      	bls.n	dab54 <_strtod_l+0x1bc>
   daafe:	9907      	ldr	r1, [sp, #28]
   dab00:	462a      	mov	r2, r5
   dab02:	f7ff feee 	bl	da8e2 <strncmp>
   dab06:	b398      	cbz	r0, dab70 <_strtod_l+0x1d8>
   dab08:	2000      	movs	r0, #0
   dab0a:	4633      	mov	r3, r6
   dab0c:	463d      	mov	r5, r7
   dab0e:	9007      	str	r0, [sp, #28]
   dab10:	4602      	mov	r2, r0
   dab12:	2b65      	cmp	r3, #101	; 0x65
   dab14:	d001      	beq.n	dab1a <_strtod_l+0x182>
   dab16:	2b45      	cmp	r3, #69	; 0x45
   dab18:	d118      	bne.n	dab4c <_strtod_l+0x1b4>
   dab1a:	b91d      	cbnz	r5, dab24 <_strtod_l+0x18c>
   dab1c:	9b04      	ldr	r3, [sp, #16]
   dab1e:	4303      	orrs	r3, r0
   dab20:	d098      	beq.n	daa54 <_strtod_l+0xbc>
   dab22:	2500      	movs	r5, #0
   dab24:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dab28:	f108 0301 	add.w	r3, r8, #1
   dab2c:	931d      	str	r3, [sp, #116]	; 0x74
   dab2e:	f898 3001 	ldrb.w	r3, [r8, #1]
   dab32:	2b2b      	cmp	r3, #43	; 0x2b
   dab34:	d075      	beq.n	dac22 <_strtod_l+0x28a>
   dab36:	2b2d      	cmp	r3, #45	; 0x2d
   dab38:	d07b      	beq.n	dac32 <_strtod_l+0x29a>
   dab3a:	f04f 0c00 	mov.w	ip, #0
   dab3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dab42:	2909      	cmp	r1, #9
   dab44:	f240 8082 	bls.w	dac4c <_strtod_l+0x2b4>
   dab48:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dab4c:	2600      	movs	r6, #0
   dab4e:	e09d      	b.n	dac8c <_strtod_l+0x2f4>
   dab50:	2300      	movs	r3, #0
   dab52:	e7c4      	b.n	daade <_strtod_l+0x146>
   dab54:	2f08      	cmp	r7, #8
   dab56:	bfd8      	it	le
   dab58:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dab5a:	f100 0001 	add.w	r0, r0, #1
   dab5e:	bfda      	itte	le
   dab60:	fb02 3301 	mlale	r3, r2, r1, r3
   dab64:	9309      	strle	r3, [sp, #36]	; 0x24
   dab66:	fb02 3909 	mlagt	r9, r2, r9, r3
   dab6a:	3701      	adds	r7, #1
   dab6c:	901d      	str	r0, [sp, #116]	; 0x74
   dab6e:	e7bf      	b.n	daaf0 <_strtod_l+0x158>
   dab70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dab72:	195a      	adds	r2, r3, r5
   dab74:	921d      	str	r2, [sp, #116]	; 0x74
   dab76:	5d5b      	ldrb	r3, [r3, r5]
   dab78:	2f00      	cmp	r7, #0
   dab7a:	d037      	beq.n	dabec <_strtod_l+0x254>
   dab7c:	9007      	str	r0, [sp, #28]
   dab7e:	463d      	mov	r5, r7
   dab80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dab84:	2a09      	cmp	r2, #9
   dab86:	d912      	bls.n	dabae <_strtod_l+0x216>
   dab88:	2201      	movs	r2, #1
   dab8a:	e7c2      	b.n	dab12 <_strtod_l+0x17a>
   dab8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dab8e:	1c5a      	adds	r2, r3, #1
   dab90:	921d      	str	r2, [sp, #116]	; 0x74
   dab92:	785b      	ldrb	r3, [r3, #1]
   dab94:	3001      	adds	r0, #1
   dab96:	2b30      	cmp	r3, #48	; 0x30
   dab98:	d0f8      	beq.n	dab8c <_strtod_l+0x1f4>
   dab9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dab9e:	2a08      	cmp	r2, #8
   daba0:	f200 84db 	bhi.w	db55a <_strtod_l+0xbc2>
   daba4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   daba6:	9007      	str	r0, [sp, #28]
   daba8:	2000      	movs	r0, #0
   dabaa:	920a      	str	r2, [sp, #40]	; 0x28
   dabac:	4605      	mov	r5, r0
   dabae:	3b30      	subs	r3, #48	; 0x30
   dabb0:	f100 0201 	add.w	r2, r0, #1
   dabb4:	d014      	beq.n	dabe0 <_strtod_l+0x248>
   dabb6:	9907      	ldr	r1, [sp, #28]
   dabb8:	4411      	add	r1, r2
   dabba:	9107      	str	r1, [sp, #28]
   dabbc:	462a      	mov	r2, r5
   dabbe:	eb00 0e05 	add.w	lr, r0, r5
   dabc2:	210a      	movs	r1, #10
   dabc4:	4572      	cmp	r2, lr
   dabc6:	d113      	bne.n	dabf0 <_strtod_l+0x258>
   dabc8:	182a      	adds	r2, r5, r0
   dabca:	2a08      	cmp	r2, #8
   dabcc:	f105 0501 	add.w	r5, r5, #1
   dabd0:	4405      	add	r5, r0
   dabd2:	dc1c      	bgt.n	dac0e <_strtod_l+0x276>
   dabd4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dabd6:	220a      	movs	r2, #10
   dabd8:	fb02 3301 	mla	r3, r2, r1, r3
   dabdc:	9309      	str	r3, [sp, #36]	; 0x24
   dabde:	2200      	movs	r2, #0
   dabe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dabe2:	1c59      	adds	r1, r3, #1
   dabe4:	911d      	str	r1, [sp, #116]	; 0x74
   dabe6:	785b      	ldrb	r3, [r3, #1]
   dabe8:	4610      	mov	r0, r2
   dabea:	e7c9      	b.n	dab80 <_strtod_l+0x1e8>
   dabec:	4638      	mov	r0, r7
   dabee:	e7d2      	b.n	dab96 <_strtod_l+0x1fe>
   dabf0:	2a08      	cmp	r2, #8
   dabf2:	dc04      	bgt.n	dabfe <_strtod_l+0x266>
   dabf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dabf6:	434e      	muls	r6, r1
   dabf8:	9609      	str	r6, [sp, #36]	; 0x24
   dabfa:	3201      	adds	r2, #1
   dabfc:	e7e2      	b.n	dabc4 <_strtod_l+0x22c>
   dabfe:	f102 0c01 	add.w	ip, r2, #1
   dac02:	f1bc 0f10 	cmp.w	ip, #16
   dac06:	bfd8      	it	le
   dac08:	fb01 f909 	mulle.w	r9, r1, r9
   dac0c:	e7f5      	b.n	dabfa <_strtod_l+0x262>
   dac0e:	2d10      	cmp	r5, #16
   dac10:	bfdc      	itt	le
   dac12:	220a      	movle	r2, #10
   dac14:	fb02 3909 	mlale	r9, r2, r9, r3
   dac18:	e7e1      	b.n	dabde <_strtod_l+0x246>
   dac1a:	2300      	movs	r3, #0
   dac1c:	9307      	str	r3, [sp, #28]
   dac1e:	2201      	movs	r2, #1
   dac20:	e77c      	b.n	dab1c <_strtod_l+0x184>
   dac22:	f04f 0c00 	mov.w	ip, #0
   dac26:	f108 0302 	add.w	r3, r8, #2
   dac2a:	931d      	str	r3, [sp, #116]	; 0x74
   dac2c:	f898 3002 	ldrb.w	r3, [r8, #2]
   dac30:	e785      	b.n	dab3e <_strtod_l+0x1a6>
   dac32:	f04f 0c01 	mov.w	ip, #1
   dac36:	e7f6      	b.n	dac26 <_strtod_l+0x28e>
   dac38:	000dd40c 	.word	0x000dd40c
   dac3c:	000dd2b8 	.word	0x000dd2b8
   dac40:	7ff00000 	.word	0x7ff00000
   dac44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dac46:	1c59      	adds	r1, r3, #1
   dac48:	911d      	str	r1, [sp, #116]	; 0x74
   dac4a:	785b      	ldrb	r3, [r3, #1]
   dac4c:	2b30      	cmp	r3, #48	; 0x30
   dac4e:	d0f9      	beq.n	dac44 <_strtod_l+0x2ac>
   dac50:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dac54:	2908      	cmp	r1, #8
   dac56:	f63f af79 	bhi.w	dab4c <_strtod_l+0x1b4>
   dac5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dac5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dac60:	9308      	str	r3, [sp, #32]
   dac62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dac64:	1c59      	adds	r1, r3, #1
   dac66:	911d      	str	r1, [sp, #116]	; 0x74
   dac68:	785b      	ldrb	r3, [r3, #1]
   dac6a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dac6e:	2e09      	cmp	r6, #9
   dac70:	d937      	bls.n	dace2 <_strtod_l+0x34a>
   dac72:	9e08      	ldr	r6, [sp, #32]
   dac74:	1b89      	subs	r1, r1, r6
   dac76:	2908      	cmp	r1, #8
   dac78:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dac7c:	dc02      	bgt.n	dac84 <_strtod_l+0x2ec>
   dac7e:	4576      	cmp	r6, lr
   dac80:	bfa8      	it	ge
   dac82:	4676      	movge	r6, lr
   dac84:	f1bc 0f00 	cmp.w	ip, #0
   dac88:	d000      	beq.n	dac8c <_strtod_l+0x2f4>
   dac8a:	4276      	negs	r6, r6
   dac8c:	2d00      	cmp	r5, #0
   dac8e:	d14f      	bne.n	dad30 <_strtod_l+0x398>
   dac90:	9904      	ldr	r1, [sp, #16]
   dac92:	4301      	orrs	r1, r0
   dac94:	f47f aec2 	bne.w	daa1c <_strtod_l+0x84>
   dac98:	2a00      	cmp	r2, #0
   dac9a:	f47f aedb 	bne.w	daa54 <_strtod_l+0xbc>
   dac9e:	2b69      	cmp	r3, #105	; 0x69
   daca0:	d027      	beq.n	dacf2 <_strtod_l+0x35a>
   daca2:	dc24      	bgt.n	dacee <_strtod_l+0x356>
   daca4:	2b49      	cmp	r3, #73	; 0x49
   daca6:	d024      	beq.n	dacf2 <_strtod_l+0x35a>
   daca8:	2b4e      	cmp	r3, #78	; 0x4e
   dacaa:	f47f aed3 	bne.w	daa54 <_strtod_l+0xbc>
   dacae:	499e      	ldr	r1, [pc, #632]	; (daf28 <_strtod_l+0x590>)
   dacb0:	a81d      	add	r0, sp, #116	; 0x74
   dacb2:	f000 ff87 	bl	dbbc4 <__match>
   dacb6:	2800      	cmp	r0, #0
   dacb8:	f43f aecc 	beq.w	daa54 <_strtod_l+0xbc>
   dacbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dacbe:	781b      	ldrb	r3, [r3, #0]
   dacc0:	2b28      	cmp	r3, #40	; 0x28
   dacc2:	d12d      	bne.n	dad20 <_strtod_l+0x388>
   dacc4:	4999      	ldr	r1, [pc, #612]	; (daf2c <_strtod_l+0x594>)
   dacc6:	aa20      	add	r2, sp, #128	; 0x80
   dacc8:	a81d      	add	r0, sp, #116	; 0x74
   dacca:	f000 ff8f 	bl	dbbec <__hexnan>
   dacce:	2805      	cmp	r0, #5
   dacd0:	d126      	bne.n	dad20 <_strtod_l+0x388>
   dacd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dacd4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dacd8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dacdc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dace0:	e69c      	b.n	daa1c <_strtod_l+0x84>
   dace2:	210a      	movs	r1, #10
   dace4:	fb01 3e0e 	mla	lr, r1, lr, r3
   dace8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dacec:	e7b9      	b.n	dac62 <_strtod_l+0x2ca>
   dacee:	2b6e      	cmp	r3, #110	; 0x6e
   dacf0:	e7db      	b.n	dacaa <_strtod_l+0x312>
   dacf2:	498f      	ldr	r1, [pc, #572]	; (daf30 <_strtod_l+0x598>)
   dacf4:	a81d      	add	r0, sp, #116	; 0x74
   dacf6:	f000 ff65 	bl	dbbc4 <__match>
   dacfa:	2800      	cmp	r0, #0
   dacfc:	f43f aeaa 	beq.w	daa54 <_strtod_l+0xbc>
   dad00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dad02:	498c      	ldr	r1, [pc, #560]	; (daf34 <_strtod_l+0x59c>)
   dad04:	3b01      	subs	r3, #1
   dad06:	a81d      	add	r0, sp, #116	; 0x74
   dad08:	931d      	str	r3, [sp, #116]	; 0x74
   dad0a:	f000 ff5b 	bl	dbbc4 <__match>
   dad0e:	b910      	cbnz	r0, dad16 <_strtod_l+0x37e>
   dad10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dad12:	3301      	adds	r3, #1
   dad14:	931d      	str	r3, [sp, #116]	; 0x74
   dad16:	f8df b22c 	ldr.w	fp, [pc, #556]	; daf44 <_strtod_l+0x5ac>
   dad1a:	f04f 0a00 	mov.w	sl, #0
   dad1e:	e67d      	b.n	daa1c <_strtod_l+0x84>
   dad20:	4885      	ldr	r0, [pc, #532]	; (daf38 <_strtod_l+0x5a0>)
   dad22:	f7fe fe75 	bl	d9a10 <nan>
   dad26:	ed8d 0b04 	vstr	d0, [sp, #16]
   dad2a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dad2e:	e675      	b.n	daa1c <_strtod_l+0x84>
   dad30:	9b07      	ldr	r3, [sp, #28]
   dad32:	9809      	ldr	r0, [sp, #36]	; 0x24
   dad34:	1af3      	subs	r3, r6, r3
   dad36:	2f00      	cmp	r7, #0
   dad38:	bf08      	it	eq
   dad3a:	462f      	moveq	r7, r5
   dad3c:	2d10      	cmp	r5, #16
   dad3e:	9308      	str	r3, [sp, #32]
   dad40:	46a8      	mov	r8, r5
   dad42:	bfa8      	it	ge
   dad44:	f04f 0810 	movge.w	r8, #16
   dad48:	f7fe ffac 	bl	d9ca4 <__aeabi_ui2d>
   dad4c:	2d09      	cmp	r5, #9
   dad4e:	4682      	mov	sl, r0
   dad50:	468b      	mov	fp, r1
   dad52:	dd13      	ble.n	dad7c <_strtod_l+0x3e4>
   dad54:	4b79      	ldr	r3, [pc, #484]	; (daf3c <_strtod_l+0x5a4>)
   dad56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dad5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dad5e:	f7ff f81b 	bl	d9d98 <__aeabi_dmul>
   dad62:	4682      	mov	sl, r0
   dad64:	4648      	mov	r0, r9
   dad66:	468b      	mov	fp, r1
   dad68:	f7fe ff9c 	bl	d9ca4 <__aeabi_ui2d>
   dad6c:	4602      	mov	r2, r0
   dad6e:	460b      	mov	r3, r1
   dad70:	4650      	mov	r0, sl
   dad72:	4659      	mov	r1, fp
   dad74:	f7fe fe5a 	bl	d9a2c <__adddf3>
   dad78:	4682      	mov	sl, r0
   dad7a:	468b      	mov	fp, r1
   dad7c:	2d0f      	cmp	r5, #15
   dad7e:	dc38      	bgt.n	dadf2 <_strtod_l+0x45a>
   dad80:	9b08      	ldr	r3, [sp, #32]
   dad82:	2b00      	cmp	r3, #0
   dad84:	f43f ae4a 	beq.w	daa1c <_strtod_l+0x84>
   dad88:	dd24      	ble.n	dadd4 <_strtod_l+0x43c>
   dad8a:	2b16      	cmp	r3, #22
   dad8c:	dc0b      	bgt.n	dada6 <_strtod_l+0x40e>
   dad8e:	4d6b      	ldr	r5, [pc, #428]	; (daf3c <_strtod_l+0x5a4>)
   dad90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dad94:	e9d5 0100 	ldrd	r0, r1, [r5]
   dad98:	4652      	mov	r2, sl
   dad9a:	465b      	mov	r3, fp
   dad9c:	f7fe fffc 	bl	d9d98 <__aeabi_dmul>
   dada0:	4682      	mov	sl, r0
   dada2:	468b      	mov	fp, r1
   dada4:	e63a      	b.n	daa1c <_strtod_l+0x84>
   dada6:	9a08      	ldr	r2, [sp, #32]
   dada8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dadac:	4293      	cmp	r3, r2
   dadae:	db20      	blt.n	dadf2 <_strtod_l+0x45a>
   dadb0:	4c62      	ldr	r4, [pc, #392]	; (daf3c <_strtod_l+0x5a4>)
   dadb2:	f1c5 050f 	rsb	r5, r5, #15
   dadb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dadba:	4652      	mov	r2, sl
   dadbc:	465b      	mov	r3, fp
   dadbe:	e9d1 0100 	ldrd	r0, r1, [r1]
   dadc2:	f7fe ffe9 	bl	d9d98 <__aeabi_dmul>
   dadc6:	9b08      	ldr	r3, [sp, #32]
   dadc8:	1b5d      	subs	r5, r3, r5
   dadca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dadce:	e9d4 2300 	ldrd	r2, r3, [r4]
   dadd2:	e7e3      	b.n	dad9c <_strtod_l+0x404>
   dadd4:	9b08      	ldr	r3, [sp, #32]
   dadd6:	3316      	adds	r3, #22
   dadd8:	db0b      	blt.n	dadf2 <_strtod_l+0x45a>
   dadda:	9b07      	ldr	r3, [sp, #28]
   daddc:	4a57      	ldr	r2, [pc, #348]	; (daf3c <_strtod_l+0x5a4>)
   dadde:	1b9e      	subs	r6, r3, r6
   dade0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dade4:	e9d6 2300 	ldrd	r2, r3, [r6]
   dade8:	4650      	mov	r0, sl
   dadea:	4659      	mov	r1, fp
   dadec:	f7ff f8fe 	bl	d9fec <__aeabi_ddiv>
   dadf0:	e7d6      	b.n	dada0 <_strtod_l+0x408>
   dadf2:	9b08      	ldr	r3, [sp, #32]
   dadf4:	eba5 0808 	sub.w	r8, r5, r8
   dadf8:	4498      	add	r8, r3
   dadfa:	f1b8 0f00 	cmp.w	r8, #0
   dadfe:	dd71      	ble.n	daee4 <_strtod_l+0x54c>
   dae00:	f018 030f 	ands.w	r3, r8, #15
   dae04:	d00a      	beq.n	dae1c <_strtod_l+0x484>
   dae06:	494d      	ldr	r1, [pc, #308]	; (daf3c <_strtod_l+0x5a4>)
   dae08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dae0c:	4652      	mov	r2, sl
   dae0e:	465b      	mov	r3, fp
   dae10:	e9d1 0100 	ldrd	r0, r1, [r1]
   dae14:	f7fe ffc0 	bl	d9d98 <__aeabi_dmul>
   dae18:	4682      	mov	sl, r0
   dae1a:	468b      	mov	fp, r1
   dae1c:	f038 080f 	bics.w	r8, r8, #15
   dae20:	d04d      	beq.n	daebe <_strtod_l+0x526>
   dae22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dae26:	dd22      	ble.n	dae6e <_strtod_l+0x4d6>
   dae28:	2500      	movs	r5, #0
   dae2a:	462e      	mov	r6, r5
   dae2c:	9509      	str	r5, [sp, #36]	; 0x24
   dae2e:	9507      	str	r5, [sp, #28]
   dae30:	2322      	movs	r3, #34	; 0x22
   dae32:	f8df b110 	ldr.w	fp, [pc, #272]	; daf44 <_strtod_l+0x5ac>
   dae36:	6023      	str	r3, [r4, #0]
   dae38:	f04f 0a00 	mov.w	sl, #0
   dae3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dae3e:	2b00      	cmp	r3, #0
   dae40:	f43f adec 	beq.w	daa1c <_strtod_l+0x84>
   dae44:	991e      	ldr	r1, [sp, #120]	; 0x78
   dae46:	4620      	mov	r0, r4
   dae48:	f000 ffb2 	bl	dbdb0 <_Bfree>
   dae4c:	9907      	ldr	r1, [sp, #28]
   dae4e:	4620      	mov	r0, r4
   dae50:	f000 ffae 	bl	dbdb0 <_Bfree>
   dae54:	4631      	mov	r1, r6
   dae56:	4620      	mov	r0, r4
   dae58:	f000 ffaa 	bl	dbdb0 <_Bfree>
   dae5c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dae5e:	4620      	mov	r0, r4
   dae60:	f000 ffa6 	bl	dbdb0 <_Bfree>
   dae64:	4629      	mov	r1, r5
   dae66:	4620      	mov	r0, r4
   dae68:	f000 ffa2 	bl	dbdb0 <_Bfree>
   dae6c:	e5d6      	b.n	daa1c <_strtod_l+0x84>
   dae6e:	2300      	movs	r3, #0
   dae70:	ea4f 1828 	mov.w	r8, r8, asr #4
   dae74:	4650      	mov	r0, sl
   dae76:	4659      	mov	r1, fp
   dae78:	4699      	mov	r9, r3
   dae7a:	f1b8 0f01 	cmp.w	r8, #1
   dae7e:	dc21      	bgt.n	daec4 <_strtod_l+0x52c>
   dae80:	b10b      	cbz	r3, dae86 <_strtod_l+0x4ee>
   dae82:	4682      	mov	sl, r0
   dae84:	468b      	mov	fp, r1
   dae86:	4b2e      	ldr	r3, [pc, #184]	; (daf40 <_strtod_l+0x5a8>)
   dae88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dae8c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dae90:	4652      	mov	r2, sl
   dae92:	465b      	mov	r3, fp
   dae94:	e9d9 0100 	ldrd	r0, r1, [r9]
   dae98:	f7fe ff7e 	bl	d9d98 <__aeabi_dmul>
   dae9c:	4b29      	ldr	r3, [pc, #164]	; (daf44 <_strtod_l+0x5ac>)
   dae9e:	460a      	mov	r2, r1
   daea0:	400b      	ands	r3, r1
   daea2:	4929      	ldr	r1, [pc, #164]	; (daf48 <_strtod_l+0x5b0>)
   daea4:	428b      	cmp	r3, r1
   daea6:	4682      	mov	sl, r0
   daea8:	d8be      	bhi.n	dae28 <_strtod_l+0x490>
   daeaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   daeae:	428b      	cmp	r3, r1
   daeb0:	bf86      	itte	hi
   daeb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; daf4c <_strtod_l+0x5b4>
   daeb6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   daeba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   daebe:	2300      	movs	r3, #0
   daec0:	9304      	str	r3, [sp, #16]
   daec2:	e081      	b.n	dafc8 <_strtod_l+0x630>
   daec4:	f018 0f01 	tst.w	r8, #1
   daec8:	d007      	beq.n	daeda <_strtod_l+0x542>
   daeca:	4b1d      	ldr	r3, [pc, #116]	; (daf40 <_strtod_l+0x5a8>)
   daecc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   daed0:	e9d3 2300 	ldrd	r2, r3, [r3]
   daed4:	f7fe ff60 	bl	d9d98 <__aeabi_dmul>
   daed8:	2301      	movs	r3, #1
   daeda:	f109 0901 	add.w	r9, r9, #1
   daede:	ea4f 0868 	mov.w	r8, r8, asr #1
   daee2:	e7ca      	b.n	dae7a <_strtod_l+0x4e2>
   daee4:	d0eb      	beq.n	daebe <_strtod_l+0x526>
   daee6:	f1c8 0800 	rsb	r8, r8, #0
   daeea:	f018 020f 	ands.w	r2, r8, #15
   daeee:	d00a      	beq.n	daf06 <_strtod_l+0x56e>
   daef0:	4b12      	ldr	r3, [pc, #72]	; (daf3c <_strtod_l+0x5a4>)
   daef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   daef6:	4650      	mov	r0, sl
   daef8:	4659      	mov	r1, fp
   daefa:	e9d3 2300 	ldrd	r2, r3, [r3]
   daefe:	f7ff f875 	bl	d9fec <__aeabi_ddiv>
   daf02:	4682      	mov	sl, r0
   daf04:	468b      	mov	fp, r1
   daf06:	ea5f 1828 	movs.w	r8, r8, asr #4
   daf0a:	d0d8      	beq.n	daebe <_strtod_l+0x526>
   daf0c:	f1b8 0f1f 	cmp.w	r8, #31
   daf10:	dd1e      	ble.n	daf50 <_strtod_l+0x5b8>
   daf12:	2500      	movs	r5, #0
   daf14:	462e      	mov	r6, r5
   daf16:	9509      	str	r5, [sp, #36]	; 0x24
   daf18:	9507      	str	r5, [sp, #28]
   daf1a:	2322      	movs	r3, #34	; 0x22
   daf1c:	f04f 0a00 	mov.w	sl, #0
   daf20:	f04f 0b00 	mov.w	fp, #0
   daf24:	6023      	str	r3, [r4, #0]
   daf26:	e789      	b.n	dae3c <_strtod_l+0x4a4>
   daf28:	000dd045 	.word	0x000dd045
   daf2c:	000dd2cc 	.word	0x000dd2cc
   daf30:	000dd049 	.word	0x000dd049
   daf34:	000dd2b1 	.word	0x000dd2b1
   daf38:	000dcc50 	.word	0x000dcc50
   daf3c:	000dd448 	.word	0x000dd448
   daf40:	000dd420 	.word	0x000dd420
   daf44:	7ff00000 	.word	0x7ff00000
   daf48:	7ca00000 	.word	0x7ca00000
   daf4c:	7fefffff 	.word	0x7fefffff
   daf50:	f018 0310 	ands.w	r3, r8, #16
   daf54:	bf18      	it	ne
   daf56:	236a      	movne	r3, #106	; 0x6a
   daf58:	f8df 93b4 	ldr.w	r9, [pc, #948]	; db310 <_strtod_l+0x978>
   daf5c:	9304      	str	r3, [sp, #16]
   daf5e:	4650      	mov	r0, sl
   daf60:	4659      	mov	r1, fp
   daf62:	2300      	movs	r3, #0
   daf64:	f018 0f01 	tst.w	r8, #1
   daf68:	d004      	beq.n	daf74 <_strtod_l+0x5dc>
   daf6a:	e9d9 2300 	ldrd	r2, r3, [r9]
   daf6e:	f7fe ff13 	bl	d9d98 <__aeabi_dmul>
   daf72:	2301      	movs	r3, #1
   daf74:	ea5f 0868 	movs.w	r8, r8, asr #1
   daf78:	f109 0908 	add.w	r9, r9, #8
   daf7c:	d1f2      	bne.n	daf64 <_strtod_l+0x5cc>
   daf7e:	b10b      	cbz	r3, daf84 <_strtod_l+0x5ec>
   daf80:	4682      	mov	sl, r0
   daf82:	468b      	mov	fp, r1
   daf84:	9b04      	ldr	r3, [sp, #16]
   daf86:	b1bb      	cbz	r3, dafb8 <_strtod_l+0x620>
   daf88:	f3cb 530a 	ubfx	r3, fp, #20, #11
   daf8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   daf90:	2b00      	cmp	r3, #0
   daf92:	4659      	mov	r1, fp
   daf94:	dd10      	ble.n	dafb8 <_strtod_l+0x620>
   daf96:	2b1f      	cmp	r3, #31
   daf98:	f340 8128 	ble.w	db1ec <_strtod_l+0x854>
   daf9c:	2b34      	cmp	r3, #52	; 0x34
   daf9e:	bfde      	ittt	le
   dafa0:	3b20      	suble	r3, #32
   dafa2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dafa6:	fa02 f303 	lslle.w	r3, r2, r3
   dafaa:	f04f 0a00 	mov.w	sl, #0
   dafae:	bfcc      	ite	gt
   dafb0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dafb4:	ea03 0b01 	andle.w	fp, r3, r1
   dafb8:	2200      	movs	r2, #0
   dafba:	2300      	movs	r3, #0
   dafbc:	4650      	mov	r0, sl
   dafbe:	4659      	mov	r1, fp
   dafc0:	f7ff f952 	bl	da268 <__aeabi_dcmpeq>
   dafc4:	2800      	cmp	r0, #0
   dafc6:	d1a4      	bne.n	daf12 <_strtod_l+0x57a>
   dafc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dafca:	9300      	str	r3, [sp, #0]
   dafcc:	990a      	ldr	r1, [sp, #40]	; 0x28
   dafce:	462b      	mov	r3, r5
   dafd0:	463a      	mov	r2, r7
   dafd2:	4620      	mov	r0, r4
   dafd4:	f000 ff41 	bl	dbe5a <__s2b>
   dafd8:	9009      	str	r0, [sp, #36]	; 0x24
   dafda:	2800      	cmp	r0, #0
   dafdc:	f43f af24 	beq.w	dae28 <_strtod_l+0x490>
   dafe0:	9b07      	ldr	r3, [sp, #28]
   dafe2:	1b9e      	subs	r6, r3, r6
   dafe4:	9b08      	ldr	r3, [sp, #32]
   dafe6:	2b00      	cmp	r3, #0
   dafe8:	bfb4      	ite	lt
   dafea:	4633      	movlt	r3, r6
   dafec:	2300      	movge	r3, #0
   dafee:	9310      	str	r3, [sp, #64]	; 0x40
   daff0:	9b08      	ldr	r3, [sp, #32]
   daff2:	2500      	movs	r5, #0
   daff4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   daff8:	9318      	str	r3, [sp, #96]	; 0x60
   daffa:	462e      	mov	r6, r5
   daffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daffe:	4620      	mov	r0, r4
   db000:	6859      	ldr	r1, [r3, #4]
   db002:	f000 fea1 	bl	dbd48 <_Balloc>
   db006:	9007      	str	r0, [sp, #28]
   db008:	2800      	cmp	r0, #0
   db00a:	f43f af11 	beq.w	dae30 <_strtod_l+0x498>
   db00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db010:	691a      	ldr	r2, [r3, #16]
   db012:	3202      	adds	r2, #2
   db014:	f103 010c 	add.w	r1, r3, #12
   db018:	0092      	lsls	r2, r2, #2
   db01a:	300c      	adds	r0, #12
   db01c:	f7ff fbb8 	bl	da790 <memcpy>
   db020:	ec4b ab10 	vmov	d0, sl, fp
   db024:	aa20      	add	r2, sp, #128	; 0x80
   db026:	a91f      	add	r1, sp, #124	; 0x7c
   db028:	4620      	mov	r0, r4
   db02a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   db02e:	f001 fa03 	bl	dc438 <__d2b>
   db032:	901e      	str	r0, [sp, #120]	; 0x78
   db034:	2800      	cmp	r0, #0
   db036:	f43f aefb 	beq.w	dae30 <_strtod_l+0x498>
   db03a:	2101      	movs	r1, #1
   db03c:	4620      	mov	r0, r4
   db03e:	f000 ff9a 	bl	dbf76 <__i2b>
   db042:	4606      	mov	r6, r0
   db044:	2800      	cmp	r0, #0
   db046:	f43f aef3 	beq.w	dae30 <_strtod_l+0x498>
   db04a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   db04c:	9904      	ldr	r1, [sp, #16]
   db04e:	2b00      	cmp	r3, #0
   db050:	bfab      	itete	ge
   db052:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   db054:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   db056:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   db058:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   db05c:	bfac      	ite	ge
   db05e:	eb03 0902 	addge.w	r9, r3, r2
   db062:	1ad7      	sublt	r7, r2, r3
   db064:	9a20      	ldr	r2, [sp, #128]	; 0x80
   db066:	eba3 0801 	sub.w	r8, r3, r1
   db06a:	4490      	add	r8, r2
   db06c:	4ba3      	ldr	r3, [pc, #652]	; (db2fc <_strtod_l+0x964>)
   db06e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   db072:	4598      	cmp	r8, r3
   db074:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   db078:	f280 80cc 	bge.w	db214 <_strtod_l+0x87c>
   db07c:	eba3 0308 	sub.w	r3, r3, r8
   db080:	2b1f      	cmp	r3, #31
   db082:	eba2 0203 	sub.w	r2, r2, r3
   db086:	f04f 0101 	mov.w	r1, #1
   db08a:	f300 80b6 	bgt.w	db1fa <_strtod_l+0x862>
   db08e:	fa01 f303 	lsl.w	r3, r1, r3
   db092:	9311      	str	r3, [sp, #68]	; 0x44
   db094:	2300      	movs	r3, #0
   db096:	930c      	str	r3, [sp, #48]	; 0x30
   db098:	eb09 0802 	add.w	r8, r9, r2
   db09c:	9b04      	ldr	r3, [sp, #16]
   db09e:	45c1      	cmp	r9, r8
   db0a0:	4417      	add	r7, r2
   db0a2:	441f      	add	r7, r3
   db0a4:	464b      	mov	r3, r9
   db0a6:	bfa8      	it	ge
   db0a8:	4643      	movge	r3, r8
   db0aa:	42bb      	cmp	r3, r7
   db0ac:	bfa8      	it	ge
   db0ae:	463b      	movge	r3, r7
   db0b0:	2b00      	cmp	r3, #0
   db0b2:	bfc2      	ittt	gt
   db0b4:	eba8 0803 	subgt.w	r8, r8, r3
   db0b8:	1aff      	subgt	r7, r7, r3
   db0ba:	eba9 0903 	subgt.w	r9, r9, r3
   db0be:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db0c0:	2b00      	cmp	r3, #0
   db0c2:	dd17      	ble.n	db0f4 <_strtod_l+0x75c>
   db0c4:	4631      	mov	r1, r6
   db0c6:	461a      	mov	r2, r3
   db0c8:	4620      	mov	r0, r4
   db0ca:	f000 fff9 	bl	dc0c0 <__pow5mult>
   db0ce:	4606      	mov	r6, r0
   db0d0:	2800      	cmp	r0, #0
   db0d2:	f43f aead 	beq.w	dae30 <_strtod_l+0x498>
   db0d6:	4601      	mov	r1, r0
   db0d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   db0da:	4620      	mov	r0, r4
   db0dc:	f000 ff54 	bl	dbf88 <__multiply>
   db0e0:	900f      	str	r0, [sp, #60]	; 0x3c
   db0e2:	2800      	cmp	r0, #0
   db0e4:	f43f aea4 	beq.w	dae30 <_strtod_l+0x498>
   db0e8:	991e      	ldr	r1, [sp, #120]	; 0x78
   db0ea:	4620      	mov	r0, r4
   db0ec:	f000 fe60 	bl	dbdb0 <_Bfree>
   db0f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db0f2:	931e      	str	r3, [sp, #120]	; 0x78
   db0f4:	f1b8 0f00 	cmp.w	r8, #0
   db0f8:	f300 8091 	bgt.w	db21e <_strtod_l+0x886>
   db0fc:	9b08      	ldr	r3, [sp, #32]
   db0fe:	2b00      	cmp	r3, #0
   db100:	dd08      	ble.n	db114 <_strtod_l+0x77c>
   db102:	9a18      	ldr	r2, [sp, #96]	; 0x60
   db104:	9907      	ldr	r1, [sp, #28]
   db106:	4620      	mov	r0, r4
   db108:	f000 ffda 	bl	dc0c0 <__pow5mult>
   db10c:	9007      	str	r0, [sp, #28]
   db10e:	2800      	cmp	r0, #0
   db110:	f43f ae8e 	beq.w	dae30 <_strtod_l+0x498>
   db114:	2f00      	cmp	r7, #0
   db116:	dd08      	ble.n	db12a <_strtod_l+0x792>
   db118:	9907      	ldr	r1, [sp, #28]
   db11a:	463a      	mov	r2, r7
   db11c:	4620      	mov	r0, r4
   db11e:	f001 f81d 	bl	dc15c <__lshift>
   db122:	9007      	str	r0, [sp, #28]
   db124:	2800      	cmp	r0, #0
   db126:	f43f ae83 	beq.w	dae30 <_strtod_l+0x498>
   db12a:	f1b9 0f00 	cmp.w	r9, #0
   db12e:	dd08      	ble.n	db142 <_strtod_l+0x7aa>
   db130:	4631      	mov	r1, r6
   db132:	464a      	mov	r2, r9
   db134:	4620      	mov	r0, r4
   db136:	f001 f811 	bl	dc15c <__lshift>
   db13a:	4606      	mov	r6, r0
   db13c:	2800      	cmp	r0, #0
   db13e:	f43f ae77 	beq.w	dae30 <_strtod_l+0x498>
   db142:	9a07      	ldr	r2, [sp, #28]
   db144:	991e      	ldr	r1, [sp, #120]	; 0x78
   db146:	4620      	mov	r0, r4
   db148:	f001 f883 	bl	dc252 <__mdiff>
   db14c:	4605      	mov	r5, r0
   db14e:	2800      	cmp	r0, #0
   db150:	f43f ae6e 	beq.w	dae30 <_strtod_l+0x498>
   db154:	68c3      	ldr	r3, [r0, #12]
   db156:	930f      	str	r3, [sp, #60]	; 0x3c
   db158:	2300      	movs	r3, #0
   db15a:	60c3      	str	r3, [r0, #12]
   db15c:	4631      	mov	r1, r6
   db15e:	f001 f85c 	bl	dc21a <__mcmp>
   db162:	2800      	cmp	r0, #0
   db164:	da65      	bge.n	db232 <_strtod_l+0x89a>
   db166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db168:	ea53 030a 	orrs.w	r3, r3, sl
   db16c:	f040 8087 	bne.w	db27e <_strtod_l+0x8e6>
   db170:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db174:	2b00      	cmp	r3, #0
   db176:	f040 8082 	bne.w	db27e <_strtod_l+0x8e6>
   db17a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db17e:	0d1b      	lsrs	r3, r3, #20
   db180:	051b      	lsls	r3, r3, #20
   db182:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   db186:	d97a      	bls.n	db27e <_strtod_l+0x8e6>
   db188:	696b      	ldr	r3, [r5, #20]
   db18a:	b913      	cbnz	r3, db192 <_strtod_l+0x7fa>
   db18c:	692b      	ldr	r3, [r5, #16]
   db18e:	2b01      	cmp	r3, #1
   db190:	dd75      	ble.n	db27e <_strtod_l+0x8e6>
   db192:	4629      	mov	r1, r5
   db194:	2201      	movs	r2, #1
   db196:	4620      	mov	r0, r4
   db198:	f000 ffe0 	bl	dc15c <__lshift>
   db19c:	4631      	mov	r1, r6
   db19e:	4605      	mov	r5, r0
   db1a0:	f001 f83b 	bl	dc21a <__mcmp>
   db1a4:	2800      	cmp	r0, #0
   db1a6:	dd6a      	ble.n	db27e <_strtod_l+0x8e6>
   db1a8:	9904      	ldr	r1, [sp, #16]
   db1aa:	4a55      	ldr	r2, [pc, #340]	; (db300 <_strtod_l+0x968>)
   db1ac:	465b      	mov	r3, fp
   db1ae:	2900      	cmp	r1, #0
   db1b0:	f000 8085 	beq.w	db2be <_strtod_l+0x926>
   db1b4:	ea02 010b 	and.w	r1, r2, fp
   db1b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   db1bc:	dc7f      	bgt.n	db2be <_strtod_l+0x926>
   db1be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   db1c2:	f77f aeaa 	ble.w	daf1a <_strtod_l+0x582>
   db1c6:	4a4f      	ldr	r2, [pc, #316]	; (db304 <_strtod_l+0x96c>)
   db1c8:	2300      	movs	r3, #0
   db1ca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   db1ce:	4650      	mov	r0, sl
   db1d0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   db1d4:	4659      	mov	r1, fp
   db1d6:	f7fe fddf 	bl	d9d98 <__aeabi_dmul>
   db1da:	460b      	mov	r3, r1
   db1dc:	4303      	orrs	r3, r0
   db1de:	bf08      	it	eq
   db1e0:	2322      	moveq	r3, #34	; 0x22
   db1e2:	4682      	mov	sl, r0
   db1e4:	468b      	mov	fp, r1
   db1e6:	bf08      	it	eq
   db1e8:	6023      	streq	r3, [r4, #0]
   db1ea:	e62b      	b.n	dae44 <_strtod_l+0x4ac>
   db1ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db1f0:	fa02 f303 	lsl.w	r3, r2, r3
   db1f4:	ea03 0a0a 	and.w	sl, r3, sl
   db1f8:	e6de      	b.n	dafb8 <_strtod_l+0x620>
   db1fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   db1fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   db202:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   db206:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   db20a:	fa01 f308 	lsl.w	r3, r1, r8
   db20e:	930c      	str	r3, [sp, #48]	; 0x30
   db210:	9111      	str	r1, [sp, #68]	; 0x44
   db212:	e741      	b.n	db098 <_strtod_l+0x700>
   db214:	2300      	movs	r3, #0
   db216:	930c      	str	r3, [sp, #48]	; 0x30
   db218:	2301      	movs	r3, #1
   db21a:	9311      	str	r3, [sp, #68]	; 0x44
   db21c:	e73c      	b.n	db098 <_strtod_l+0x700>
   db21e:	991e      	ldr	r1, [sp, #120]	; 0x78
   db220:	4642      	mov	r2, r8
   db222:	4620      	mov	r0, r4
   db224:	f000 ff9a 	bl	dc15c <__lshift>
   db228:	901e      	str	r0, [sp, #120]	; 0x78
   db22a:	2800      	cmp	r0, #0
   db22c:	f47f af66 	bne.w	db0fc <_strtod_l+0x764>
   db230:	e5fe      	b.n	dae30 <_strtod_l+0x498>
   db232:	465f      	mov	r7, fp
   db234:	d16e      	bne.n	db314 <_strtod_l+0x97c>
   db236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db238:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db23c:	b342      	cbz	r2, db290 <_strtod_l+0x8f8>
   db23e:	4a32      	ldr	r2, [pc, #200]	; (db308 <_strtod_l+0x970>)
   db240:	4293      	cmp	r3, r2
   db242:	d128      	bne.n	db296 <_strtod_l+0x8fe>
   db244:	9b04      	ldr	r3, [sp, #16]
   db246:	4650      	mov	r0, sl
   db248:	b1eb      	cbz	r3, db286 <_strtod_l+0x8ee>
   db24a:	4a2d      	ldr	r2, [pc, #180]	; (db300 <_strtod_l+0x968>)
   db24c:	403a      	ands	r2, r7
   db24e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   db252:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   db256:	d819      	bhi.n	db28c <_strtod_l+0x8f4>
   db258:	0d12      	lsrs	r2, r2, #20
   db25a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   db25e:	fa01 f303 	lsl.w	r3, r1, r3
   db262:	4298      	cmp	r0, r3
   db264:	d117      	bne.n	db296 <_strtod_l+0x8fe>
   db266:	4b29      	ldr	r3, [pc, #164]	; (db30c <_strtod_l+0x974>)
   db268:	429f      	cmp	r7, r3
   db26a:	d102      	bne.n	db272 <_strtod_l+0x8da>
   db26c:	3001      	adds	r0, #1
   db26e:	f43f addf 	beq.w	dae30 <_strtod_l+0x498>
   db272:	4b23      	ldr	r3, [pc, #140]	; (db300 <_strtod_l+0x968>)
   db274:	403b      	ands	r3, r7
   db276:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   db27a:	f04f 0a00 	mov.w	sl, #0
   db27e:	9b04      	ldr	r3, [sp, #16]
   db280:	2b00      	cmp	r3, #0
   db282:	d1a0      	bne.n	db1c6 <_strtod_l+0x82e>
   db284:	e5de      	b.n	dae44 <_strtod_l+0x4ac>
   db286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   db28a:	e7ea      	b.n	db262 <_strtod_l+0x8ca>
   db28c:	460b      	mov	r3, r1
   db28e:	e7e8      	b.n	db262 <_strtod_l+0x8ca>
   db290:	ea53 030a 	orrs.w	r3, r3, sl
   db294:	d088      	beq.n	db1a8 <_strtod_l+0x810>
   db296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db298:	b1db      	cbz	r3, db2d2 <_strtod_l+0x93a>
   db29a:	423b      	tst	r3, r7
   db29c:	d0ef      	beq.n	db27e <_strtod_l+0x8e6>
   db29e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db2a0:	9a04      	ldr	r2, [sp, #16]
   db2a2:	4650      	mov	r0, sl
   db2a4:	4659      	mov	r1, fp
   db2a6:	b1c3      	cbz	r3, db2da <_strtod_l+0x942>
   db2a8:	f7ff fb57 	bl	da95a <sulp>
   db2ac:	4602      	mov	r2, r0
   db2ae:	460b      	mov	r3, r1
   db2b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db2b4:	f7fe fbba 	bl	d9a2c <__adddf3>
   db2b8:	4682      	mov	sl, r0
   db2ba:	468b      	mov	fp, r1
   db2bc:	e7df      	b.n	db27e <_strtod_l+0x8e6>
   db2be:	4013      	ands	r3, r2
   db2c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   db2c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   db2c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   db2cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db2d0:	e7d5      	b.n	db27e <_strtod_l+0x8e6>
   db2d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db2d4:	ea13 0f0a 	tst.w	r3, sl
   db2d8:	e7e0      	b.n	db29c <_strtod_l+0x904>
   db2da:	f7ff fb3e 	bl	da95a <sulp>
   db2de:	4602      	mov	r2, r0
   db2e0:	460b      	mov	r3, r1
   db2e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   db2e6:	f7fe fb9f 	bl	d9a28 <__aeabi_dsub>
   db2ea:	2200      	movs	r2, #0
   db2ec:	2300      	movs	r3, #0
   db2ee:	4682      	mov	sl, r0
   db2f0:	468b      	mov	fp, r1
   db2f2:	f7fe ffb9 	bl	da268 <__aeabi_dcmpeq>
   db2f6:	2800      	cmp	r0, #0
   db2f8:	d0c1      	beq.n	db27e <_strtod_l+0x8e6>
   db2fa:	e60e      	b.n	daf1a <_strtod_l+0x582>
   db2fc:	fffffc02 	.word	0xfffffc02
   db300:	7ff00000 	.word	0x7ff00000
   db304:	39500000 	.word	0x39500000
   db308:	000fffff 	.word	0x000fffff
   db30c:	7fefffff 	.word	0x7fefffff
   db310:	000dd2e0 	.word	0x000dd2e0
   db314:	4631      	mov	r1, r6
   db316:	4628      	mov	r0, r5
   db318:	f001 f8de 	bl	dc4d8 <__ratio>
   db31c:	ec59 8b10 	vmov	r8, r9, d0
   db320:	ee10 0a10 	vmov	r0, s0
   db324:	2200      	movs	r2, #0
   db326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   db32a:	4649      	mov	r1, r9
   db32c:	f7fe ffb0 	bl	da290 <__aeabi_dcmple>
   db330:	2800      	cmp	r0, #0
   db332:	d07c      	beq.n	db42e <_strtod_l+0xa96>
   db334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db336:	2b00      	cmp	r3, #0
   db338:	d04c      	beq.n	db3d4 <_strtod_l+0xa3c>
   db33a:	4b95      	ldr	r3, [pc, #596]	; (db590 <_strtod_l+0xbf8>)
   db33c:	2200      	movs	r2, #0
   db33e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db342:	f8df 924c 	ldr.w	r9, [pc, #588]	; db590 <_strtod_l+0xbf8>
   db346:	f04f 0800 	mov.w	r8, #0
   db34a:	4b92      	ldr	r3, [pc, #584]	; (db594 <_strtod_l+0xbfc>)
   db34c:	403b      	ands	r3, r7
   db34e:	9311      	str	r3, [sp, #68]	; 0x44
   db350:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db352:	4b91      	ldr	r3, [pc, #580]	; (db598 <_strtod_l+0xc00>)
   db354:	429a      	cmp	r2, r3
   db356:	f040 80b2 	bne.w	db4be <_strtod_l+0xb26>
   db35a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db35e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db362:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   db366:	ec4b ab10 	vmov	d0, sl, fp
   db36a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   db36e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db372:	f000 ffe5 	bl	dc340 <__ulp>
   db376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db37a:	ec53 2b10 	vmov	r2, r3, d0
   db37e:	f7fe fd0b 	bl	d9d98 <__aeabi_dmul>
   db382:	4652      	mov	r2, sl
   db384:	465b      	mov	r3, fp
   db386:	f7fe fb51 	bl	d9a2c <__adddf3>
   db38a:	460b      	mov	r3, r1
   db38c:	4981      	ldr	r1, [pc, #516]	; (db594 <_strtod_l+0xbfc>)
   db38e:	4a83      	ldr	r2, [pc, #524]	; (db59c <_strtod_l+0xc04>)
   db390:	4019      	ands	r1, r3
   db392:	4291      	cmp	r1, r2
   db394:	4682      	mov	sl, r0
   db396:	d95e      	bls.n	db456 <_strtod_l+0xabe>
   db398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   db39a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   db39e:	4293      	cmp	r3, r2
   db3a0:	d103      	bne.n	db3aa <_strtod_l+0xa12>
   db3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db3a4:	3301      	adds	r3, #1
   db3a6:	f43f ad43 	beq.w	dae30 <_strtod_l+0x498>
   db3aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; db5a8 <_strtod_l+0xc10>
   db3ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   db3b2:	991e      	ldr	r1, [sp, #120]	; 0x78
   db3b4:	4620      	mov	r0, r4
   db3b6:	f000 fcfb 	bl	dbdb0 <_Bfree>
   db3ba:	9907      	ldr	r1, [sp, #28]
   db3bc:	4620      	mov	r0, r4
   db3be:	f000 fcf7 	bl	dbdb0 <_Bfree>
   db3c2:	4631      	mov	r1, r6
   db3c4:	4620      	mov	r0, r4
   db3c6:	f000 fcf3 	bl	dbdb0 <_Bfree>
   db3ca:	4629      	mov	r1, r5
   db3cc:	4620      	mov	r0, r4
   db3ce:	f000 fcef 	bl	dbdb0 <_Bfree>
   db3d2:	e613      	b.n	daffc <_strtod_l+0x664>
   db3d4:	f1ba 0f00 	cmp.w	sl, #0
   db3d8:	d11b      	bne.n	db412 <_strtod_l+0xa7a>
   db3da:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db3de:	b9f3      	cbnz	r3, db41e <_strtod_l+0xa86>
   db3e0:	4b6b      	ldr	r3, [pc, #428]	; (db590 <_strtod_l+0xbf8>)
   db3e2:	2200      	movs	r2, #0
   db3e4:	4640      	mov	r0, r8
   db3e6:	4649      	mov	r1, r9
   db3e8:	f7fe ff48 	bl	da27c <__aeabi_dcmplt>
   db3ec:	b9d0      	cbnz	r0, db424 <_strtod_l+0xa8c>
   db3ee:	4640      	mov	r0, r8
   db3f0:	4649      	mov	r1, r9
   db3f2:	4b6b      	ldr	r3, [pc, #428]	; (db5a0 <_strtod_l+0xc08>)
   db3f4:	2200      	movs	r2, #0
   db3f6:	f7fe fccf 	bl	d9d98 <__aeabi_dmul>
   db3fa:	4680      	mov	r8, r0
   db3fc:	4689      	mov	r9, r1
   db3fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   db402:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   db406:	931b      	str	r3, [sp, #108]	; 0x6c
   db408:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   db40c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db410:	e79b      	b.n	db34a <_strtod_l+0x9b2>
   db412:	f1ba 0f01 	cmp.w	sl, #1
   db416:	d102      	bne.n	db41e <_strtod_l+0xa86>
   db418:	2f00      	cmp	r7, #0
   db41a:	f43f ad7e 	beq.w	daf1a <_strtod_l+0x582>
   db41e:	4b61      	ldr	r3, [pc, #388]	; (db5a4 <_strtod_l+0xc0c>)
   db420:	2200      	movs	r2, #0
   db422:	e78c      	b.n	db33e <_strtod_l+0x9a6>
   db424:	f8df 9178 	ldr.w	r9, [pc, #376]	; db5a0 <_strtod_l+0xc08>
   db428:	f04f 0800 	mov.w	r8, #0
   db42c:	e7e7      	b.n	db3fe <_strtod_l+0xa66>
   db42e:	4b5c      	ldr	r3, [pc, #368]	; (db5a0 <_strtod_l+0xc08>)
   db430:	4640      	mov	r0, r8
   db432:	4649      	mov	r1, r9
   db434:	2200      	movs	r2, #0
   db436:	f7fe fcaf 	bl	d9d98 <__aeabi_dmul>
   db43a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db43c:	4680      	mov	r8, r0
   db43e:	4689      	mov	r9, r1
   db440:	b933      	cbnz	r3, db450 <_strtod_l+0xab8>
   db442:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db446:	9012      	str	r0, [sp, #72]	; 0x48
   db448:	9313      	str	r3, [sp, #76]	; 0x4c
   db44a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   db44e:	e7dd      	b.n	db40c <_strtod_l+0xa74>
   db450:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   db454:	e7f9      	b.n	db44a <_strtod_l+0xab2>
   db456:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   db45a:	9b04      	ldr	r3, [sp, #16]
   db45c:	2b00      	cmp	r3, #0
   db45e:	d1a8      	bne.n	db3b2 <_strtod_l+0xa1a>
   db460:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   db464:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db466:	0d1b      	lsrs	r3, r3, #20
   db468:	051b      	lsls	r3, r3, #20
   db46a:	429a      	cmp	r2, r3
   db46c:	d1a1      	bne.n	db3b2 <_strtod_l+0xa1a>
   db46e:	4640      	mov	r0, r8
   db470:	4649      	mov	r1, r9
   db472:	f001 f8b5 	bl	dc5e0 <__aeabi_d2lz>
   db476:	f7fe fc61 	bl	d9d3c <__aeabi_l2d>
   db47a:	4602      	mov	r2, r0
   db47c:	460b      	mov	r3, r1
   db47e:	4640      	mov	r0, r8
   db480:	4649      	mov	r1, r9
   db482:	f7fe fad1 	bl	d9a28 <__aeabi_dsub>
   db486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   db488:	f3cb 0313 	ubfx	r3, fp, #0, #20
   db48c:	ea43 030a 	orr.w	r3, r3, sl
   db490:	4313      	orrs	r3, r2
   db492:	4680      	mov	r8, r0
   db494:	4689      	mov	r9, r1
   db496:	d053      	beq.n	db540 <_strtod_l+0xba8>
   db498:	a335      	add	r3, pc, #212	; (adr r3, db570 <_strtod_l+0xbd8>)
   db49a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db49e:	f7fe feed 	bl	da27c <__aeabi_dcmplt>
   db4a2:	2800      	cmp	r0, #0
   db4a4:	f47f acce 	bne.w	dae44 <_strtod_l+0x4ac>
   db4a8:	a333      	add	r3, pc, #204	; (adr r3, db578 <_strtod_l+0xbe0>)
   db4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4ae:	4640      	mov	r0, r8
   db4b0:	4649      	mov	r1, r9
   db4b2:	f7fe ff01 	bl	da2b8 <__aeabi_dcmpgt>
   db4b6:	2800      	cmp	r0, #0
   db4b8:	f43f af7b 	beq.w	db3b2 <_strtod_l+0xa1a>
   db4bc:	e4c2      	b.n	dae44 <_strtod_l+0x4ac>
   db4be:	9b04      	ldr	r3, [sp, #16]
   db4c0:	b333      	cbz	r3, db510 <_strtod_l+0xb78>
   db4c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   db4c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   db4c8:	d822      	bhi.n	db510 <_strtod_l+0xb78>
   db4ca:	a32d      	add	r3, pc, #180	; (adr r3, db580 <_strtod_l+0xbe8>)
   db4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4d0:	4640      	mov	r0, r8
   db4d2:	4649      	mov	r1, r9
   db4d4:	f7fe fedc 	bl	da290 <__aeabi_dcmple>
   db4d8:	b1a0      	cbz	r0, db504 <_strtod_l+0xb6c>
   db4da:	4649      	mov	r1, r9
   db4dc:	4640      	mov	r0, r8
   db4de:	f7fe ff33 	bl	da348 <__aeabi_d2uiz>
   db4e2:	2801      	cmp	r0, #1
   db4e4:	bf38      	it	cc
   db4e6:	2001      	movcc	r0, #1
   db4e8:	f7fe fbdc 	bl	d9ca4 <__aeabi_ui2d>
   db4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   db4ee:	4680      	mov	r8, r0
   db4f0:	4689      	mov	r9, r1
   db4f2:	bb13      	cbnz	r3, db53a <_strtod_l+0xba2>
   db4f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   db4f8:	9014      	str	r0, [sp, #80]	; 0x50
   db4fa:	9315      	str	r3, [sp, #84]	; 0x54
   db4fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   db500:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   db504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   db506:	9a11      	ldr	r2, [sp, #68]	; 0x44
   db508:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   db50c:	1a9b      	subs	r3, r3, r2
   db50e:	930d      	str	r3, [sp, #52]	; 0x34
   db510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db514:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   db518:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   db51c:	f000 ff10 	bl	dc340 <__ulp>
   db520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   db524:	ec53 2b10 	vmov	r2, r3, d0
   db528:	f7fe fc36 	bl	d9d98 <__aeabi_dmul>
   db52c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   db530:	f7fe fa7c 	bl	d9a2c <__adddf3>
   db534:	4682      	mov	sl, r0
   db536:	468b      	mov	fp, r1
   db538:	e78f      	b.n	db45a <_strtod_l+0xac2>
   db53a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   db53e:	e7dd      	b.n	db4fc <_strtod_l+0xb64>
   db540:	a311      	add	r3, pc, #68	; (adr r3, db588 <_strtod_l+0xbf0>)
   db542:	e9d3 2300 	ldrd	r2, r3, [r3]
   db546:	f7fe fe99 	bl	da27c <__aeabi_dcmplt>
   db54a:	e7b4      	b.n	db4b6 <_strtod_l+0xb1e>
   db54c:	2300      	movs	r3, #0
   db54e:	930e      	str	r3, [sp, #56]	; 0x38
   db550:	9a19      	ldr	r2, [sp, #100]	; 0x64
   db552:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   db554:	6013      	str	r3, [r2, #0]
   db556:	f7ff ba65 	b.w	daa24 <_strtod_l+0x8c>
   db55a:	2b65      	cmp	r3, #101	; 0x65
   db55c:	f43f ab5d 	beq.w	dac1a <_strtod_l+0x282>
   db560:	2b45      	cmp	r3, #69	; 0x45
   db562:	f43f ab5a 	beq.w	dac1a <_strtod_l+0x282>
   db566:	2201      	movs	r2, #1
   db568:	f7ff bb92 	b.w	dac90 <_strtod_l+0x2f8>
   db56c:	f3af 8000 	nop.w
   db570:	94a03595 	.word	0x94a03595
   db574:	3fdfffff 	.word	0x3fdfffff
   db578:	35afe535 	.word	0x35afe535
   db57c:	3fe00000 	.word	0x3fe00000
   db580:	ffc00000 	.word	0xffc00000
   db584:	41dfffff 	.word	0x41dfffff
   db588:	94a03595 	.word	0x94a03595
   db58c:	3fcfffff 	.word	0x3fcfffff
   db590:	3ff00000 	.word	0x3ff00000
   db594:	7ff00000 	.word	0x7ff00000
   db598:	7fe00000 	.word	0x7fe00000
   db59c:	7c9fffff 	.word	0x7c9fffff
   db5a0:	3fe00000 	.word	0x3fe00000
   db5a4:	bff00000 	.word	0xbff00000
   db5a8:	7fefffff 	.word	0x7fefffff

000db5ac <strtod>:
   db5ac:	460a      	mov	r2, r1
   db5ae:	4601      	mov	r1, r0
   db5b0:	4802      	ldr	r0, [pc, #8]	; (db5bc <strtod+0x10>)
   db5b2:	4b03      	ldr	r3, [pc, #12]	; (db5c0 <strtod+0x14>)
   db5b4:	6800      	ldr	r0, [r0, #0]
   db5b6:	f7ff b9ef 	b.w	da998 <_strtod_l>
   db5ba:	bf00      	nop
   db5bc:	2003e26c 	.word	0x2003e26c
   db5c0:	2003e2d4 	.word	0x2003e2d4

000db5c4 <strtok>:
   db5c4:	4b13      	ldr	r3, [pc, #76]	; (db614 <strtok+0x50>)
   db5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   db5c8:	681e      	ldr	r6, [r3, #0]
   db5ca:	6db4      	ldr	r4, [r6, #88]	; 0x58
   db5cc:	4605      	mov	r5, r0
   db5ce:	b9c4      	cbnz	r4, db602 <strtok+0x3e>
   db5d0:	2050      	movs	r0, #80	; 0x50
   db5d2:	9101      	str	r1, [sp, #4]
   db5d4:	f7fb fdc6 	bl	d7164 <malloc>
   db5d8:	65b0      	str	r0, [r6, #88]	; 0x58
   db5da:	e9c0 4400 	strd	r4, r4, [r0]
   db5de:	e9c0 4402 	strd	r4, r4, [r0, #8]
   db5e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
   db5e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   db5ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   db5ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   db5f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   db5f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   db5fa:	9901      	ldr	r1, [sp, #4]
   db5fc:	6184      	str	r4, [r0, #24]
   db5fe:	7704      	strb	r4, [r0, #28]
   db600:	6244      	str	r4, [r0, #36]	; 0x24
   db602:	6db2      	ldr	r2, [r6, #88]	; 0x58
   db604:	2301      	movs	r3, #1
   db606:	4628      	mov	r0, r5
   db608:	b002      	add	sp, #8
   db60a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db60e:	f000 b803 	b.w	db618 <__strtok_r>
   db612:	bf00      	nop
   db614:	2003e26c 	.word	0x2003e26c

000db618 <__strtok_r>:
   db618:	b5f0      	push	{r4, r5, r6, r7, lr}
   db61a:	b908      	cbnz	r0, db620 <__strtok_r+0x8>
   db61c:	6810      	ldr	r0, [r2, #0]
   db61e:	b188      	cbz	r0, db644 <__strtok_r+0x2c>
   db620:	4604      	mov	r4, r0
   db622:	4620      	mov	r0, r4
   db624:	f814 5b01 	ldrb.w	r5, [r4], #1
   db628:	460f      	mov	r7, r1
   db62a:	f817 6b01 	ldrb.w	r6, [r7], #1
   db62e:	b91e      	cbnz	r6, db638 <__strtok_r+0x20>
   db630:	b965      	cbnz	r5, db64c <__strtok_r+0x34>
   db632:	6015      	str	r5, [r2, #0]
   db634:	4628      	mov	r0, r5
   db636:	e005      	b.n	db644 <__strtok_r+0x2c>
   db638:	42b5      	cmp	r5, r6
   db63a:	d1f6      	bne.n	db62a <__strtok_r+0x12>
   db63c:	2b00      	cmp	r3, #0
   db63e:	d1f0      	bne.n	db622 <__strtok_r+0xa>
   db640:	6014      	str	r4, [r2, #0]
   db642:	7003      	strb	r3, [r0, #0]
   db644:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db646:	461c      	mov	r4, r3
   db648:	e00c      	b.n	db664 <__strtok_r+0x4c>
   db64a:	b915      	cbnz	r5, db652 <__strtok_r+0x3a>
   db64c:	f814 3b01 	ldrb.w	r3, [r4], #1
   db650:	460e      	mov	r6, r1
   db652:	f816 5b01 	ldrb.w	r5, [r6], #1
   db656:	42ab      	cmp	r3, r5
   db658:	d1f7      	bne.n	db64a <__strtok_r+0x32>
   db65a:	2b00      	cmp	r3, #0
   db65c:	d0f3      	beq.n	db646 <__strtok_r+0x2e>
   db65e:	2300      	movs	r3, #0
   db660:	f804 3c01 	strb.w	r3, [r4, #-1]
   db664:	6014      	str	r4, [r2, #0]
   db666:	e7ed      	b.n	db644 <__strtok_r+0x2c>

000db668 <rshift>:
   db668:	6903      	ldr	r3, [r0, #16]
   db66a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   db66e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db672:	ea4f 1261 	mov.w	r2, r1, asr #5
   db676:	f100 0414 	add.w	r4, r0, #20
   db67a:	dd45      	ble.n	db708 <rshift+0xa0>
   db67c:	f011 011f 	ands.w	r1, r1, #31
   db680:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   db684:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   db688:	d10c      	bne.n	db6a4 <rshift+0x3c>
   db68a:	f100 0710 	add.w	r7, r0, #16
   db68e:	4629      	mov	r1, r5
   db690:	42b1      	cmp	r1, r6
   db692:	d334      	bcc.n	db6fe <rshift+0x96>
   db694:	1a9b      	subs	r3, r3, r2
   db696:	009b      	lsls	r3, r3, #2
   db698:	1eea      	subs	r2, r5, #3
   db69a:	4296      	cmp	r6, r2
   db69c:	bf38      	it	cc
   db69e:	2300      	movcc	r3, #0
   db6a0:	4423      	add	r3, r4
   db6a2:	e015      	b.n	db6d0 <rshift+0x68>
   db6a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   db6a8:	f1c1 0820 	rsb	r8, r1, #32
   db6ac:	40cf      	lsrs	r7, r1
   db6ae:	f105 0e04 	add.w	lr, r5, #4
   db6b2:	46a1      	mov	r9, r4
   db6b4:	4576      	cmp	r6, lr
   db6b6:	46f4      	mov	ip, lr
   db6b8:	d815      	bhi.n	db6e6 <rshift+0x7e>
   db6ba:	1a9b      	subs	r3, r3, r2
   db6bc:	009a      	lsls	r2, r3, #2
   db6be:	3a04      	subs	r2, #4
   db6c0:	3501      	adds	r5, #1
   db6c2:	42ae      	cmp	r6, r5
   db6c4:	bf38      	it	cc
   db6c6:	2200      	movcc	r2, #0
   db6c8:	18a3      	adds	r3, r4, r2
   db6ca:	50a7      	str	r7, [r4, r2]
   db6cc:	b107      	cbz	r7, db6d0 <rshift+0x68>
   db6ce:	3304      	adds	r3, #4
   db6d0:	1b1a      	subs	r2, r3, r4
   db6d2:	42a3      	cmp	r3, r4
   db6d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   db6d8:	bf08      	it	eq
   db6da:	2300      	moveq	r3, #0
   db6dc:	6102      	str	r2, [r0, #16]
   db6de:	bf08      	it	eq
   db6e0:	6143      	streq	r3, [r0, #20]
   db6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db6e6:	f8dc c000 	ldr.w	ip, [ip]
   db6ea:	fa0c fc08 	lsl.w	ip, ip, r8
   db6ee:	ea4c 0707 	orr.w	r7, ip, r7
   db6f2:	f849 7b04 	str.w	r7, [r9], #4
   db6f6:	f85e 7b04 	ldr.w	r7, [lr], #4
   db6fa:	40cf      	lsrs	r7, r1
   db6fc:	e7da      	b.n	db6b4 <rshift+0x4c>
   db6fe:	f851 cb04 	ldr.w	ip, [r1], #4
   db702:	f847 cf04 	str.w	ip, [r7, #4]!
   db706:	e7c3      	b.n	db690 <rshift+0x28>
   db708:	4623      	mov	r3, r4
   db70a:	e7e1      	b.n	db6d0 <rshift+0x68>

000db70c <__hexdig_fun>:
   db70c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   db710:	2b09      	cmp	r3, #9
   db712:	d802      	bhi.n	db71a <__hexdig_fun+0xe>
   db714:	3820      	subs	r0, #32
   db716:	b2c0      	uxtb	r0, r0
   db718:	4770      	bx	lr
   db71a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   db71e:	2b05      	cmp	r3, #5
   db720:	d801      	bhi.n	db726 <__hexdig_fun+0x1a>
   db722:	3847      	subs	r0, #71	; 0x47
   db724:	e7f7      	b.n	db716 <__hexdig_fun+0xa>
   db726:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   db72a:	2b05      	cmp	r3, #5
   db72c:	d801      	bhi.n	db732 <__hexdig_fun+0x26>
   db72e:	3827      	subs	r0, #39	; 0x27
   db730:	e7f1      	b.n	db716 <__hexdig_fun+0xa>
   db732:	2000      	movs	r0, #0
   db734:	4770      	bx	lr
	...

000db738 <__gethex>:
   db738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db73c:	ed2d 8b02 	vpush	{d8}
   db740:	b089      	sub	sp, #36	; 0x24
   db742:	ee08 0a10 	vmov	s16, r0
   db746:	9304      	str	r3, [sp, #16]
   db748:	4bbc      	ldr	r3, [pc, #752]	; (dba3c <__gethex+0x304>)
   db74a:	681b      	ldr	r3, [r3, #0]
   db74c:	9301      	str	r3, [sp, #4]
   db74e:	4618      	mov	r0, r3
   db750:	468b      	mov	fp, r1
   db752:	4690      	mov	r8, r2
   db754:	f7ff f8bd 	bl	da8d2 <strlen>
   db758:	9b01      	ldr	r3, [sp, #4]
   db75a:	f8db 2000 	ldr.w	r2, [fp]
   db75e:	4403      	add	r3, r0
   db760:	4682      	mov	sl, r0
   db762:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   db766:	9305      	str	r3, [sp, #20]
   db768:	1c93      	adds	r3, r2, #2
   db76a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   db76e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   db772:	32fe      	adds	r2, #254	; 0xfe
   db774:	18d1      	adds	r1, r2, r3
   db776:	461f      	mov	r7, r3
   db778:	f813 0b01 	ldrb.w	r0, [r3], #1
   db77c:	9100      	str	r1, [sp, #0]
   db77e:	2830      	cmp	r0, #48	; 0x30
   db780:	d0f8      	beq.n	db774 <__gethex+0x3c>
   db782:	f7ff ffc3 	bl	db70c <__hexdig_fun>
   db786:	4604      	mov	r4, r0
   db788:	2800      	cmp	r0, #0
   db78a:	d13a      	bne.n	db802 <__gethex+0xca>
   db78c:	9901      	ldr	r1, [sp, #4]
   db78e:	4652      	mov	r2, sl
   db790:	4638      	mov	r0, r7
   db792:	f7ff f8a6 	bl	da8e2 <strncmp>
   db796:	4605      	mov	r5, r0
   db798:	2800      	cmp	r0, #0
   db79a:	d168      	bne.n	db86e <__gethex+0x136>
   db79c:	f817 000a 	ldrb.w	r0, [r7, sl]
   db7a0:	eb07 060a 	add.w	r6, r7, sl
   db7a4:	f7ff ffb2 	bl	db70c <__hexdig_fun>
   db7a8:	2800      	cmp	r0, #0
   db7aa:	d062      	beq.n	db872 <__gethex+0x13a>
   db7ac:	4633      	mov	r3, r6
   db7ae:	7818      	ldrb	r0, [r3, #0]
   db7b0:	2830      	cmp	r0, #48	; 0x30
   db7b2:	461f      	mov	r7, r3
   db7b4:	f103 0301 	add.w	r3, r3, #1
   db7b8:	d0f9      	beq.n	db7ae <__gethex+0x76>
   db7ba:	f7ff ffa7 	bl	db70c <__hexdig_fun>
   db7be:	2301      	movs	r3, #1
   db7c0:	fab0 f480 	clz	r4, r0
   db7c4:	0964      	lsrs	r4, r4, #5
   db7c6:	4635      	mov	r5, r6
   db7c8:	9300      	str	r3, [sp, #0]
   db7ca:	463a      	mov	r2, r7
   db7cc:	4616      	mov	r6, r2
   db7ce:	3201      	adds	r2, #1
   db7d0:	7830      	ldrb	r0, [r6, #0]
   db7d2:	f7ff ff9b 	bl	db70c <__hexdig_fun>
   db7d6:	2800      	cmp	r0, #0
   db7d8:	d1f8      	bne.n	db7cc <__gethex+0x94>
   db7da:	9901      	ldr	r1, [sp, #4]
   db7dc:	4652      	mov	r2, sl
   db7de:	4630      	mov	r0, r6
   db7e0:	f7ff f87f 	bl	da8e2 <strncmp>
   db7e4:	b980      	cbnz	r0, db808 <__gethex+0xd0>
   db7e6:	b94d      	cbnz	r5, db7fc <__gethex+0xc4>
   db7e8:	eb06 050a 	add.w	r5, r6, sl
   db7ec:	462a      	mov	r2, r5
   db7ee:	4616      	mov	r6, r2
   db7f0:	3201      	adds	r2, #1
   db7f2:	7830      	ldrb	r0, [r6, #0]
   db7f4:	f7ff ff8a 	bl	db70c <__hexdig_fun>
   db7f8:	2800      	cmp	r0, #0
   db7fa:	d1f8      	bne.n	db7ee <__gethex+0xb6>
   db7fc:	1bad      	subs	r5, r5, r6
   db7fe:	00ad      	lsls	r5, r5, #2
   db800:	e004      	b.n	db80c <__gethex+0xd4>
   db802:	2400      	movs	r4, #0
   db804:	4625      	mov	r5, r4
   db806:	e7e0      	b.n	db7ca <__gethex+0x92>
   db808:	2d00      	cmp	r5, #0
   db80a:	d1f7      	bne.n	db7fc <__gethex+0xc4>
   db80c:	7833      	ldrb	r3, [r6, #0]
   db80e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   db812:	2b50      	cmp	r3, #80	; 0x50
   db814:	d13b      	bne.n	db88e <__gethex+0x156>
   db816:	7873      	ldrb	r3, [r6, #1]
   db818:	2b2b      	cmp	r3, #43	; 0x2b
   db81a:	d02c      	beq.n	db876 <__gethex+0x13e>
   db81c:	2b2d      	cmp	r3, #45	; 0x2d
   db81e:	d02e      	beq.n	db87e <__gethex+0x146>
   db820:	1c71      	adds	r1, r6, #1
   db822:	f04f 0900 	mov.w	r9, #0
   db826:	7808      	ldrb	r0, [r1, #0]
   db828:	f7ff ff70 	bl	db70c <__hexdig_fun>
   db82c:	1e43      	subs	r3, r0, #1
   db82e:	b2db      	uxtb	r3, r3
   db830:	2b18      	cmp	r3, #24
   db832:	d82c      	bhi.n	db88e <__gethex+0x156>
   db834:	f1a0 0210 	sub.w	r2, r0, #16
   db838:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   db83c:	f7ff ff66 	bl	db70c <__hexdig_fun>
   db840:	1e43      	subs	r3, r0, #1
   db842:	b2db      	uxtb	r3, r3
   db844:	2b18      	cmp	r3, #24
   db846:	d91d      	bls.n	db884 <__gethex+0x14c>
   db848:	f1b9 0f00 	cmp.w	r9, #0
   db84c:	d000      	beq.n	db850 <__gethex+0x118>
   db84e:	4252      	negs	r2, r2
   db850:	4415      	add	r5, r2
   db852:	f8cb 1000 	str.w	r1, [fp]
   db856:	b1e4      	cbz	r4, db892 <__gethex+0x15a>
   db858:	9b00      	ldr	r3, [sp, #0]
   db85a:	2b00      	cmp	r3, #0
   db85c:	bf14      	ite	ne
   db85e:	2700      	movne	r7, #0
   db860:	2706      	moveq	r7, #6
   db862:	4638      	mov	r0, r7
   db864:	b009      	add	sp, #36	; 0x24
   db866:	ecbd 8b02 	vpop	{d8}
   db86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db86e:	463e      	mov	r6, r7
   db870:	4625      	mov	r5, r4
   db872:	2401      	movs	r4, #1
   db874:	e7ca      	b.n	db80c <__gethex+0xd4>
   db876:	f04f 0900 	mov.w	r9, #0
   db87a:	1cb1      	adds	r1, r6, #2
   db87c:	e7d3      	b.n	db826 <__gethex+0xee>
   db87e:	f04f 0901 	mov.w	r9, #1
   db882:	e7fa      	b.n	db87a <__gethex+0x142>
   db884:	230a      	movs	r3, #10
   db886:	fb03 0202 	mla	r2, r3, r2, r0
   db88a:	3a10      	subs	r2, #16
   db88c:	e7d4      	b.n	db838 <__gethex+0x100>
   db88e:	4631      	mov	r1, r6
   db890:	e7df      	b.n	db852 <__gethex+0x11a>
   db892:	1bf3      	subs	r3, r6, r7
   db894:	3b01      	subs	r3, #1
   db896:	4621      	mov	r1, r4
   db898:	2b07      	cmp	r3, #7
   db89a:	dc52      	bgt.n	db942 <__gethex+0x20a>
   db89c:	ee18 0a10 	vmov	r0, s16
   db8a0:	f000 fa52 	bl	dbd48 <_Balloc>
   db8a4:	f04f 0b00 	mov.w	fp, #0
   db8a8:	f100 0914 	add.w	r9, r0, #20
   db8ac:	f1ca 0301 	rsb	r3, sl, #1
   db8b0:	4604      	mov	r4, r0
   db8b2:	f8cd 9008 	str.w	r9, [sp, #8]
   db8b6:	f8cd b000 	str.w	fp, [sp]
   db8ba:	9306      	str	r3, [sp, #24]
   db8bc:	42b7      	cmp	r7, r6
   db8be:	d343      	bcc.n	db948 <__gethex+0x210>
   db8c0:	9802      	ldr	r0, [sp, #8]
   db8c2:	9b00      	ldr	r3, [sp, #0]
   db8c4:	f840 3b04 	str.w	r3, [r0], #4
   db8c8:	eba0 0009 	sub.w	r0, r0, r9
   db8cc:	1080      	asrs	r0, r0, #2
   db8ce:	0146      	lsls	r6, r0, #5
   db8d0:	6120      	str	r0, [r4, #16]
   db8d2:	4618      	mov	r0, r3
   db8d4:	f000 faff 	bl	dbed6 <__hi0bits>
   db8d8:	1a30      	subs	r0, r6, r0
   db8da:	f8d8 6000 	ldr.w	r6, [r8]
   db8de:	42b0      	cmp	r0, r6
   db8e0:	dd66      	ble.n	db9b0 <__gethex+0x278>
   db8e2:	1b87      	subs	r7, r0, r6
   db8e4:	4639      	mov	r1, r7
   db8e6:	4620      	mov	r0, r4
   db8e8:	f000 fe4c 	bl	dc584 <__any_on>
   db8ec:	4682      	mov	sl, r0
   db8ee:	b1a8      	cbz	r0, db91c <__gethex+0x1e4>
   db8f0:	1e7b      	subs	r3, r7, #1
   db8f2:	1159      	asrs	r1, r3, #5
   db8f4:	f003 021f 	and.w	r2, r3, #31
   db8f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   db8fc:	f04f 0a01 	mov.w	sl, #1
   db900:	fa0a f202 	lsl.w	r2, sl, r2
   db904:	420a      	tst	r2, r1
   db906:	d009      	beq.n	db91c <__gethex+0x1e4>
   db908:	4553      	cmp	r3, sl
   db90a:	dd05      	ble.n	db918 <__gethex+0x1e0>
   db90c:	1eb9      	subs	r1, r7, #2
   db90e:	4620      	mov	r0, r4
   db910:	f000 fe38 	bl	dc584 <__any_on>
   db914:	2800      	cmp	r0, #0
   db916:	d148      	bne.n	db9aa <__gethex+0x272>
   db918:	f04f 0a02 	mov.w	sl, #2
   db91c:	4639      	mov	r1, r7
   db91e:	4620      	mov	r0, r4
   db920:	f7ff fea2 	bl	db668 <rshift>
   db924:	443d      	add	r5, r7
   db926:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db92a:	42ab      	cmp	r3, r5
   db92c:	da4f      	bge.n	db9ce <__gethex+0x296>
   db92e:	ee18 0a10 	vmov	r0, s16
   db932:	4621      	mov	r1, r4
   db934:	f000 fa3c 	bl	dbdb0 <_Bfree>
   db938:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db93a:	2300      	movs	r3, #0
   db93c:	6013      	str	r3, [r2, #0]
   db93e:	27a3      	movs	r7, #163	; 0xa3
   db940:	e78f      	b.n	db862 <__gethex+0x12a>
   db942:	3101      	adds	r1, #1
   db944:	105b      	asrs	r3, r3, #1
   db946:	e7a7      	b.n	db898 <__gethex+0x160>
   db948:	1e73      	subs	r3, r6, #1
   db94a:	9a05      	ldr	r2, [sp, #20]
   db94c:	9303      	str	r3, [sp, #12]
   db94e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   db952:	4293      	cmp	r3, r2
   db954:	d019      	beq.n	db98a <__gethex+0x252>
   db956:	f1bb 0f20 	cmp.w	fp, #32
   db95a:	d107      	bne.n	db96c <__gethex+0x234>
   db95c:	9b02      	ldr	r3, [sp, #8]
   db95e:	9a00      	ldr	r2, [sp, #0]
   db960:	f843 2b04 	str.w	r2, [r3], #4
   db964:	9302      	str	r3, [sp, #8]
   db966:	2300      	movs	r3, #0
   db968:	9300      	str	r3, [sp, #0]
   db96a:	469b      	mov	fp, r3
   db96c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   db970:	f7ff fecc 	bl	db70c <__hexdig_fun>
   db974:	9b00      	ldr	r3, [sp, #0]
   db976:	f000 000f 	and.w	r0, r0, #15
   db97a:	fa00 f00b 	lsl.w	r0, r0, fp
   db97e:	4303      	orrs	r3, r0
   db980:	9300      	str	r3, [sp, #0]
   db982:	f10b 0b04 	add.w	fp, fp, #4
   db986:	9b03      	ldr	r3, [sp, #12]
   db988:	e00d      	b.n	db9a6 <__gethex+0x26e>
   db98a:	9b03      	ldr	r3, [sp, #12]
   db98c:	9a06      	ldr	r2, [sp, #24]
   db98e:	4413      	add	r3, r2
   db990:	42bb      	cmp	r3, r7
   db992:	d3e0      	bcc.n	db956 <__gethex+0x21e>
   db994:	4618      	mov	r0, r3
   db996:	9901      	ldr	r1, [sp, #4]
   db998:	9307      	str	r3, [sp, #28]
   db99a:	4652      	mov	r2, sl
   db99c:	f7fe ffa1 	bl	da8e2 <strncmp>
   db9a0:	9b07      	ldr	r3, [sp, #28]
   db9a2:	2800      	cmp	r0, #0
   db9a4:	d1d7      	bne.n	db956 <__gethex+0x21e>
   db9a6:	461e      	mov	r6, r3
   db9a8:	e788      	b.n	db8bc <__gethex+0x184>
   db9aa:	f04f 0a03 	mov.w	sl, #3
   db9ae:	e7b5      	b.n	db91c <__gethex+0x1e4>
   db9b0:	da0a      	bge.n	db9c8 <__gethex+0x290>
   db9b2:	1a37      	subs	r7, r6, r0
   db9b4:	4621      	mov	r1, r4
   db9b6:	ee18 0a10 	vmov	r0, s16
   db9ba:	463a      	mov	r2, r7
   db9bc:	f000 fbce 	bl	dc15c <__lshift>
   db9c0:	1bed      	subs	r5, r5, r7
   db9c2:	4604      	mov	r4, r0
   db9c4:	f100 0914 	add.w	r9, r0, #20
   db9c8:	f04f 0a00 	mov.w	sl, #0
   db9cc:	e7ab      	b.n	db926 <__gethex+0x1ee>
   db9ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
   db9d2:	42a8      	cmp	r0, r5
   db9d4:	dd6d      	ble.n	dbab2 <__gethex+0x37a>
   db9d6:	1b45      	subs	r5, r0, r5
   db9d8:	42ae      	cmp	r6, r5
   db9da:	dc31      	bgt.n	dba40 <__gethex+0x308>
   db9dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   db9e0:	2b02      	cmp	r3, #2
   db9e2:	d023      	beq.n	dba2c <__gethex+0x2f4>
   db9e4:	2b03      	cmp	r3, #3
   db9e6:	d025      	beq.n	dba34 <__gethex+0x2fc>
   db9e8:	2b01      	cmp	r3, #1
   db9ea:	d115      	bne.n	dba18 <__gethex+0x2e0>
   db9ec:	42ae      	cmp	r6, r5
   db9ee:	d113      	bne.n	dba18 <__gethex+0x2e0>
   db9f0:	2e01      	cmp	r6, #1
   db9f2:	d10b      	bne.n	dba0c <__gethex+0x2d4>
   db9f4:	9a04      	ldr	r2, [sp, #16]
   db9f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   db9fa:	6013      	str	r3, [r2, #0]
   db9fc:	2301      	movs	r3, #1
   db9fe:	6123      	str	r3, [r4, #16]
   dba00:	f8c9 3000 	str.w	r3, [r9]
   dba04:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dba06:	2762      	movs	r7, #98	; 0x62
   dba08:	601c      	str	r4, [r3, #0]
   dba0a:	e72a      	b.n	db862 <__gethex+0x12a>
   dba0c:	1e71      	subs	r1, r6, #1
   dba0e:	4620      	mov	r0, r4
   dba10:	f000 fdb8 	bl	dc584 <__any_on>
   dba14:	2800      	cmp	r0, #0
   dba16:	d1ed      	bne.n	db9f4 <__gethex+0x2bc>
   dba18:	ee18 0a10 	vmov	r0, s16
   dba1c:	4621      	mov	r1, r4
   dba1e:	f000 f9c7 	bl	dbdb0 <_Bfree>
   dba22:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dba24:	2300      	movs	r3, #0
   dba26:	6013      	str	r3, [r2, #0]
   dba28:	2750      	movs	r7, #80	; 0x50
   dba2a:	e71a      	b.n	db862 <__gethex+0x12a>
   dba2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dba2e:	2b00      	cmp	r3, #0
   dba30:	d1f2      	bne.n	dba18 <__gethex+0x2e0>
   dba32:	e7df      	b.n	db9f4 <__gethex+0x2bc>
   dba34:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dba36:	2b00      	cmp	r3, #0
   dba38:	d1dc      	bne.n	db9f4 <__gethex+0x2bc>
   dba3a:	e7ed      	b.n	dba18 <__gethex+0x2e0>
   dba3c:	000dd40c 	.word	0x000dd40c
   dba40:	1e6f      	subs	r7, r5, #1
   dba42:	f1ba 0f00 	cmp.w	sl, #0
   dba46:	d131      	bne.n	dbaac <__gethex+0x374>
   dba48:	b127      	cbz	r7, dba54 <__gethex+0x31c>
   dba4a:	4639      	mov	r1, r7
   dba4c:	4620      	mov	r0, r4
   dba4e:	f000 fd99 	bl	dc584 <__any_on>
   dba52:	4682      	mov	sl, r0
   dba54:	117b      	asrs	r3, r7, #5
   dba56:	2101      	movs	r1, #1
   dba58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   dba5c:	f007 071f 	and.w	r7, r7, #31
   dba60:	fa01 f707 	lsl.w	r7, r1, r7
   dba64:	421f      	tst	r7, r3
   dba66:	4629      	mov	r1, r5
   dba68:	4620      	mov	r0, r4
   dba6a:	bf18      	it	ne
   dba6c:	f04a 0a02 	orrne.w	sl, sl, #2
   dba70:	1b76      	subs	r6, r6, r5
   dba72:	f7ff fdf9 	bl	db668 <rshift>
   dba76:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dba7a:	2702      	movs	r7, #2
   dba7c:	f1ba 0f00 	cmp.w	sl, #0
   dba80:	d048      	beq.n	dbb14 <__gethex+0x3dc>
   dba82:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dba86:	2b02      	cmp	r3, #2
   dba88:	d015      	beq.n	dbab6 <__gethex+0x37e>
   dba8a:	2b03      	cmp	r3, #3
   dba8c:	d017      	beq.n	dbabe <__gethex+0x386>
   dba8e:	2b01      	cmp	r3, #1
   dba90:	d109      	bne.n	dbaa6 <__gethex+0x36e>
   dba92:	f01a 0f02 	tst.w	sl, #2
   dba96:	d006      	beq.n	dbaa6 <__gethex+0x36e>
   dba98:	f8d9 0000 	ldr.w	r0, [r9]
   dba9c:	ea4a 0a00 	orr.w	sl, sl, r0
   dbaa0:	f01a 0f01 	tst.w	sl, #1
   dbaa4:	d10e      	bne.n	dbac4 <__gethex+0x38c>
   dbaa6:	f047 0710 	orr.w	r7, r7, #16
   dbaaa:	e033      	b.n	dbb14 <__gethex+0x3dc>
   dbaac:	f04f 0a01 	mov.w	sl, #1
   dbab0:	e7d0      	b.n	dba54 <__gethex+0x31c>
   dbab2:	2701      	movs	r7, #1
   dbab4:	e7e2      	b.n	dba7c <__gethex+0x344>
   dbab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dbab8:	f1c3 0301 	rsb	r3, r3, #1
   dbabc:	9315      	str	r3, [sp, #84]	; 0x54
   dbabe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dbac0:	2b00      	cmp	r3, #0
   dbac2:	d0f0      	beq.n	dbaa6 <__gethex+0x36e>
   dbac4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dbac8:	f104 0314 	add.w	r3, r4, #20
   dbacc:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dbad0:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dbad4:	f04f 0c00 	mov.w	ip, #0
   dbad8:	4618      	mov	r0, r3
   dbada:	f853 2b04 	ldr.w	r2, [r3], #4
   dbade:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dbae2:	d01c      	beq.n	dbb1e <__gethex+0x3e6>
   dbae4:	3201      	adds	r2, #1
   dbae6:	6002      	str	r2, [r0, #0]
   dbae8:	2f02      	cmp	r7, #2
   dbaea:	f104 0314 	add.w	r3, r4, #20
   dbaee:	d13a      	bne.n	dbb66 <__gethex+0x42e>
   dbaf0:	f8d8 2000 	ldr.w	r2, [r8]
   dbaf4:	3a01      	subs	r2, #1
   dbaf6:	42b2      	cmp	r2, r6
   dbaf8:	d10a      	bne.n	dbb10 <__gethex+0x3d8>
   dbafa:	1171      	asrs	r1, r6, #5
   dbafc:	2201      	movs	r2, #1
   dbafe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dbb02:	f006 061f 	and.w	r6, r6, #31
   dbb06:	fa02 f606 	lsl.w	r6, r2, r6
   dbb0a:	421e      	tst	r6, r3
   dbb0c:	bf18      	it	ne
   dbb0e:	4617      	movne	r7, r2
   dbb10:	f047 0720 	orr.w	r7, r7, #32
   dbb14:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dbb16:	601c      	str	r4, [r3, #0]
   dbb18:	9b04      	ldr	r3, [sp, #16]
   dbb1a:	601d      	str	r5, [r3, #0]
   dbb1c:	e6a1      	b.n	db862 <__gethex+0x12a>
   dbb1e:	4299      	cmp	r1, r3
   dbb20:	f843 cc04 	str.w	ip, [r3, #-4]
   dbb24:	d8d8      	bhi.n	dbad8 <__gethex+0x3a0>
   dbb26:	68a3      	ldr	r3, [r4, #8]
   dbb28:	4599      	cmp	r9, r3
   dbb2a:	db14      	blt.n	dbb56 <__gethex+0x41e>
   dbb2c:	6861      	ldr	r1, [r4, #4]
   dbb2e:	ee18 0a10 	vmov	r0, s16
   dbb32:	3101      	adds	r1, #1
   dbb34:	f000 f908 	bl	dbd48 <_Balloc>
   dbb38:	6922      	ldr	r2, [r4, #16]
   dbb3a:	3202      	adds	r2, #2
   dbb3c:	f104 010c 	add.w	r1, r4, #12
   dbb40:	4682      	mov	sl, r0
   dbb42:	0092      	lsls	r2, r2, #2
   dbb44:	300c      	adds	r0, #12
   dbb46:	f7fe fe23 	bl	da790 <memcpy>
   dbb4a:	4621      	mov	r1, r4
   dbb4c:	ee18 0a10 	vmov	r0, s16
   dbb50:	f000 f92e 	bl	dbdb0 <_Bfree>
   dbb54:	4654      	mov	r4, sl
   dbb56:	6923      	ldr	r3, [r4, #16]
   dbb58:	1c5a      	adds	r2, r3, #1
   dbb5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   dbb5e:	6122      	str	r2, [r4, #16]
   dbb60:	2201      	movs	r2, #1
   dbb62:	615a      	str	r2, [r3, #20]
   dbb64:	e7c0      	b.n	dbae8 <__gethex+0x3b0>
   dbb66:	6922      	ldr	r2, [r4, #16]
   dbb68:	454a      	cmp	r2, r9
   dbb6a:	dd0b      	ble.n	dbb84 <__gethex+0x44c>
   dbb6c:	2101      	movs	r1, #1
   dbb6e:	4620      	mov	r0, r4
   dbb70:	f7ff fd7a 	bl	db668 <rshift>
   dbb74:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dbb78:	3501      	adds	r5, #1
   dbb7a:	42ab      	cmp	r3, r5
   dbb7c:	f6ff aed7 	blt.w	db92e <__gethex+0x1f6>
   dbb80:	2701      	movs	r7, #1
   dbb82:	e7c5      	b.n	dbb10 <__gethex+0x3d8>
   dbb84:	f016 061f 	ands.w	r6, r6, #31
   dbb88:	d0fa      	beq.n	dbb80 <__gethex+0x448>
   dbb8a:	449b      	add	fp, r3
   dbb8c:	f1c6 0620 	rsb	r6, r6, #32
   dbb90:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   dbb94:	f000 f99f 	bl	dbed6 <__hi0bits>
   dbb98:	42b0      	cmp	r0, r6
   dbb9a:	dbe7      	blt.n	dbb6c <__gethex+0x434>
   dbb9c:	e7f0      	b.n	dbb80 <__gethex+0x448>
   dbb9e:	bf00      	nop

000dbba0 <L_shift>:
   dbba0:	f1c2 0208 	rsb	r2, r2, #8
   dbba4:	0092      	lsls	r2, r2, #2
   dbba6:	b570      	push	{r4, r5, r6, lr}
   dbba8:	f1c2 0620 	rsb	r6, r2, #32
   dbbac:	6843      	ldr	r3, [r0, #4]
   dbbae:	6804      	ldr	r4, [r0, #0]
   dbbb0:	fa03 f506 	lsl.w	r5, r3, r6
   dbbb4:	432c      	orrs	r4, r5
   dbbb6:	40d3      	lsrs	r3, r2
   dbbb8:	6004      	str	r4, [r0, #0]
   dbbba:	f840 3f04 	str.w	r3, [r0, #4]!
   dbbbe:	4288      	cmp	r0, r1
   dbbc0:	d3f4      	bcc.n	dbbac <L_shift+0xc>
   dbbc2:	bd70      	pop	{r4, r5, r6, pc}

000dbbc4 <__match>:
   dbbc4:	b530      	push	{r4, r5, lr}
   dbbc6:	6803      	ldr	r3, [r0, #0]
   dbbc8:	3301      	adds	r3, #1
   dbbca:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbbce:	b914      	cbnz	r4, dbbd6 <__match+0x12>
   dbbd0:	6003      	str	r3, [r0, #0]
   dbbd2:	2001      	movs	r0, #1
   dbbd4:	bd30      	pop	{r4, r5, pc}
   dbbd6:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbbda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dbbde:	2d19      	cmp	r5, #25
   dbbe0:	bf98      	it	ls
   dbbe2:	3220      	addls	r2, #32
   dbbe4:	42a2      	cmp	r2, r4
   dbbe6:	d0f0      	beq.n	dbbca <__match+0x6>
   dbbe8:	2000      	movs	r0, #0
   dbbea:	e7f3      	b.n	dbbd4 <__match+0x10>

000dbbec <__hexnan>:
   dbbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbbf0:	680b      	ldr	r3, [r1, #0]
   dbbf2:	6801      	ldr	r1, [r0, #0]
   dbbf4:	115e      	asrs	r6, r3, #5
   dbbf6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dbbfa:	f013 031f 	ands.w	r3, r3, #31
   dbbfe:	b087      	sub	sp, #28
   dbc00:	bf18      	it	ne
   dbc02:	3604      	addne	r6, #4
   dbc04:	2500      	movs	r5, #0
   dbc06:	1f37      	subs	r7, r6, #4
   dbc08:	4682      	mov	sl, r0
   dbc0a:	4690      	mov	r8, r2
   dbc0c:	9301      	str	r3, [sp, #4]
   dbc0e:	f846 5c04 	str.w	r5, [r6, #-4]
   dbc12:	46b9      	mov	r9, r7
   dbc14:	463c      	mov	r4, r7
   dbc16:	9502      	str	r5, [sp, #8]
   dbc18:	46ab      	mov	fp, r5
   dbc1a:	784a      	ldrb	r2, [r1, #1]
   dbc1c:	1c4b      	adds	r3, r1, #1
   dbc1e:	9303      	str	r3, [sp, #12]
   dbc20:	b342      	cbz	r2, dbc74 <__hexnan+0x88>
   dbc22:	4610      	mov	r0, r2
   dbc24:	9105      	str	r1, [sp, #20]
   dbc26:	9204      	str	r2, [sp, #16]
   dbc28:	f7ff fd70 	bl	db70c <__hexdig_fun>
   dbc2c:	2800      	cmp	r0, #0
   dbc2e:	d14f      	bne.n	dbcd0 <__hexnan+0xe4>
   dbc30:	9a04      	ldr	r2, [sp, #16]
   dbc32:	9905      	ldr	r1, [sp, #20]
   dbc34:	2a20      	cmp	r2, #32
   dbc36:	d818      	bhi.n	dbc6a <__hexnan+0x7e>
   dbc38:	9b02      	ldr	r3, [sp, #8]
   dbc3a:	459b      	cmp	fp, r3
   dbc3c:	dd13      	ble.n	dbc66 <__hexnan+0x7a>
   dbc3e:	454c      	cmp	r4, r9
   dbc40:	d206      	bcs.n	dbc50 <__hexnan+0x64>
   dbc42:	2d07      	cmp	r5, #7
   dbc44:	dc04      	bgt.n	dbc50 <__hexnan+0x64>
   dbc46:	462a      	mov	r2, r5
   dbc48:	4649      	mov	r1, r9
   dbc4a:	4620      	mov	r0, r4
   dbc4c:	f7ff ffa8 	bl	dbba0 <L_shift>
   dbc50:	4544      	cmp	r4, r8
   dbc52:	d950      	bls.n	dbcf6 <__hexnan+0x10a>
   dbc54:	2300      	movs	r3, #0
   dbc56:	f1a4 0904 	sub.w	r9, r4, #4
   dbc5a:	f844 3c04 	str.w	r3, [r4, #-4]
   dbc5e:	f8cd b008 	str.w	fp, [sp, #8]
   dbc62:	464c      	mov	r4, r9
   dbc64:	461d      	mov	r5, r3
   dbc66:	9903      	ldr	r1, [sp, #12]
   dbc68:	e7d7      	b.n	dbc1a <__hexnan+0x2e>
   dbc6a:	2a29      	cmp	r2, #41	; 0x29
   dbc6c:	d156      	bne.n	dbd1c <__hexnan+0x130>
   dbc6e:	3102      	adds	r1, #2
   dbc70:	f8ca 1000 	str.w	r1, [sl]
   dbc74:	f1bb 0f00 	cmp.w	fp, #0
   dbc78:	d050      	beq.n	dbd1c <__hexnan+0x130>
   dbc7a:	454c      	cmp	r4, r9
   dbc7c:	d206      	bcs.n	dbc8c <__hexnan+0xa0>
   dbc7e:	2d07      	cmp	r5, #7
   dbc80:	dc04      	bgt.n	dbc8c <__hexnan+0xa0>
   dbc82:	462a      	mov	r2, r5
   dbc84:	4649      	mov	r1, r9
   dbc86:	4620      	mov	r0, r4
   dbc88:	f7ff ff8a 	bl	dbba0 <L_shift>
   dbc8c:	4544      	cmp	r4, r8
   dbc8e:	d934      	bls.n	dbcfa <__hexnan+0x10e>
   dbc90:	f1a8 0204 	sub.w	r2, r8, #4
   dbc94:	4623      	mov	r3, r4
   dbc96:	f853 1b04 	ldr.w	r1, [r3], #4
   dbc9a:	f842 1f04 	str.w	r1, [r2, #4]!
   dbc9e:	429f      	cmp	r7, r3
   dbca0:	d2f9      	bcs.n	dbc96 <__hexnan+0xaa>
   dbca2:	1b3b      	subs	r3, r7, r4
   dbca4:	f023 0303 	bic.w	r3, r3, #3
   dbca8:	3304      	adds	r3, #4
   dbcaa:	3401      	adds	r4, #1
   dbcac:	3e03      	subs	r6, #3
   dbcae:	42b4      	cmp	r4, r6
   dbcb0:	bf88      	it	hi
   dbcb2:	2304      	movhi	r3, #4
   dbcb4:	4443      	add	r3, r8
   dbcb6:	2200      	movs	r2, #0
   dbcb8:	f843 2b04 	str.w	r2, [r3], #4
   dbcbc:	429f      	cmp	r7, r3
   dbcbe:	d2fb      	bcs.n	dbcb8 <__hexnan+0xcc>
   dbcc0:	683b      	ldr	r3, [r7, #0]
   dbcc2:	b91b      	cbnz	r3, dbccc <__hexnan+0xe0>
   dbcc4:	4547      	cmp	r7, r8
   dbcc6:	d127      	bne.n	dbd18 <__hexnan+0x12c>
   dbcc8:	2301      	movs	r3, #1
   dbcca:	603b      	str	r3, [r7, #0]
   dbccc:	2005      	movs	r0, #5
   dbcce:	e026      	b.n	dbd1e <__hexnan+0x132>
   dbcd0:	3501      	adds	r5, #1
   dbcd2:	2d08      	cmp	r5, #8
   dbcd4:	f10b 0b01 	add.w	fp, fp, #1
   dbcd8:	dd06      	ble.n	dbce8 <__hexnan+0xfc>
   dbcda:	4544      	cmp	r4, r8
   dbcdc:	d9c3      	bls.n	dbc66 <__hexnan+0x7a>
   dbcde:	2300      	movs	r3, #0
   dbce0:	f844 3c04 	str.w	r3, [r4, #-4]
   dbce4:	2501      	movs	r5, #1
   dbce6:	3c04      	subs	r4, #4
   dbce8:	6822      	ldr	r2, [r4, #0]
   dbcea:	f000 000f 	and.w	r0, r0, #15
   dbcee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dbcf2:	6022      	str	r2, [r4, #0]
   dbcf4:	e7b7      	b.n	dbc66 <__hexnan+0x7a>
   dbcf6:	2508      	movs	r5, #8
   dbcf8:	e7b5      	b.n	dbc66 <__hexnan+0x7a>
   dbcfa:	9b01      	ldr	r3, [sp, #4]
   dbcfc:	2b00      	cmp	r3, #0
   dbcfe:	d0df      	beq.n	dbcc0 <__hexnan+0xd4>
   dbd00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dbd04:	f1c3 0320 	rsb	r3, r3, #32
   dbd08:	fa22 f303 	lsr.w	r3, r2, r3
   dbd0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dbd10:	401a      	ands	r2, r3
   dbd12:	f846 2c04 	str.w	r2, [r6, #-4]
   dbd16:	e7d3      	b.n	dbcc0 <__hexnan+0xd4>
   dbd18:	3f04      	subs	r7, #4
   dbd1a:	e7d1      	b.n	dbcc0 <__hexnan+0xd4>
   dbd1c:	2004      	movs	r0, #4
   dbd1e:	b007      	add	sp, #28
   dbd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dbd24 <__ascii_mbtowc>:
   dbd24:	b082      	sub	sp, #8
   dbd26:	b901      	cbnz	r1, dbd2a <__ascii_mbtowc+0x6>
   dbd28:	a901      	add	r1, sp, #4
   dbd2a:	b142      	cbz	r2, dbd3e <__ascii_mbtowc+0x1a>
   dbd2c:	b14b      	cbz	r3, dbd42 <__ascii_mbtowc+0x1e>
   dbd2e:	7813      	ldrb	r3, [r2, #0]
   dbd30:	600b      	str	r3, [r1, #0]
   dbd32:	7812      	ldrb	r2, [r2, #0]
   dbd34:	1e10      	subs	r0, r2, #0
   dbd36:	bf18      	it	ne
   dbd38:	2001      	movne	r0, #1
   dbd3a:	b002      	add	sp, #8
   dbd3c:	4770      	bx	lr
   dbd3e:	4610      	mov	r0, r2
   dbd40:	e7fb      	b.n	dbd3a <__ascii_mbtowc+0x16>
   dbd42:	f06f 0001 	mvn.w	r0, #1
   dbd46:	e7f8      	b.n	dbd3a <__ascii_mbtowc+0x16>

000dbd48 <_Balloc>:
   dbd48:	b570      	push	{r4, r5, r6, lr}
   dbd4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dbd4c:	4604      	mov	r4, r0
   dbd4e:	460d      	mov	r5, r1
   dbd50:	b93e      	cbnz	r6, dbd62 <_Balloc+0x1a>
   dbd52:	2010      	movs	r0, #16
   dbd54:	f7fb fa06 	bl	d7164 <malloc>
   dbd58:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dbd5c:	6260      	str	r0, [r4, #36]	; 0x24
   dbd5e:	6006      	str	r6, [r0, #0]
   dbd60:	60c6      	str	r6, [r0, #12]
   dbd62:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dbd64:	68f3      	ldr	r3, [r6, #12]
   dbd66:	b183      	cbz	r3, dbd8a <_Balloc+0x42>
   dbd68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dbd6a:	68db      	ldr	r3, [r3, #12]
   dbd6c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dbd70:	b9b8      	cbnz	r0, dbda2 <_Balloc+0x5a>
   dbd72:	2101      	movs	r1, #1
   dbd74:	fa01 f605 	lsl.w	r6, r1, r5
   dbd78:	1d72      	adds	r2, r6, #5
   dbd7a:	0092      	lsls	r2, r2, #2
   dbd7c:	4620      	mov	r0, r4
   dbd7e:	f7fe fd37 	bl	da7f0 <_calloc_r>
   dbd82:	b160      	cbz	r0, dbd9e <_Balloc+0x56>
   dbd84:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dbd88:	e00e      	b.n	dbda8 <_Balloc+0x60>
   dbd8a:	2221      	movs	r2, #33	; 0x21
   dbd8c:	2104      	movs	r1, #4
   dbd8e:	4620      	mov	r0, r4
   dbd90:	f7fe fd2e 	bl	da7f0 <_calloc_r>
   dbd94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dbd96:	60f0      	str	r0, [r6, #12]
   dbd98:	68db      	ldr	r3, [r3, #12]
   dbd9a:	2b00      	cmp	r3, #0
   dbd9c:	d1e4      	bne.n	dbd68 <_Balloc+0x20>
   dbd9e:	2000      	movs	r0, #0
   dbda0:	bd70      	pop	{r4, r5, r6, pc}
   dbda2:	6802      	ldr	r2, [r0, #0]
   dbda4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dbda8:	2300      	movs	r3, #0
   dbdaa:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dbdae:	e7f7      	b.n	dbda0 <_Balloc+0x58>

000dbdb0 <_Bfree>:
   dbdb0:	b570      	push	{r4, r5, r6, lr}
   dbdb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dbdb4:	4605      	mov	r5, r0
   dbdb6:	460c      	mov	r4, r1
   dbdb8:	b93e      	cbnz	r6, dbdca <_Bfree+0x1a>
   dbdba:	2010      	movs	r0, #16
   dbdbc:	f7fb f9d2 	bl	d7164 <malloc>
   dbdc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dbdc4:	6268      	str	r0, [r5, #36]	; 0x24
   dbdc6:	6006      	str	r6, [r0, #0]
   dbdc8:	60c6      	str	r6, [r0, #12]
   dbdca:	b13c      	cbz	r4, dbddc <_Bfree+0x2c>
   dbdcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dbdce:	6862      	ldr	r2, [r4, #4]
   dbdd0:	68db      	ldr	r3, [r3, #12]
   dbdd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dbdd6:	6021      	str	r1, [r4, #0]
   dbdd8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dbddc:	bd70      	pop	{r4, r5, r6, pc}

000dbdde <__multadd>:
   dbdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbde2:	690e      	ldr	r6, [r1, #16]
   dbde4:	4607      	mov	r7, r0
   dbde6:	4698      	mov	r8, r3
   dbde8:	460c      	mov	r4, r1
   dbdea:	f101 0014 	add.w	r0, r1, #20
   dbdee:	2300      	movs	r3, #0
   dbdf0:	6805      	ldr	r5, [r0, #0]
   dbdf2:	b2a9      	uxth	r1, r5
   dbdf4:	fb02 8101 	mla	r1, r2, r1, r8
   dbdf8:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dbdfc:	0c2d      	lsrs	r5, r5, #16
   dbdfe:	fb02 c505 	mla	r5, r2, r5, ip
   dbe02:	b289      	uxth	r1, r1
   dbe04:	3301      	adds	r3, #1
   dbe06:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dbe0a:	429e      	cmp	r6, r3
   dbe0c:	f840 1b04 	str.w	r1, [r0], #4
   dbe10:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dbe14:	dcec      	bgt.n	dbdf0 <__multadd+0x12>
   dbe16:	f1b8 0f00 	cmp.w	r8, #0
   dbe1a:	d01b      	beq.n	dbe54 <__multadd+0x76>
   dbe1c:	68a3      	ldr	r3, [r4, #8]
   dbe1e:	42b3      	cmp	r3, r6
   dbe20:	dc12      	bgt.n	dbe48 <__multadd+0x6a>
   dbe22:	6861      	ldr	r1, [r4, #4]
   dbe24:	4638      	mov	r0, r7
   dbe26:	3101      	adds	r1, #1
   dbe28:	f7ff ff8e 	bl	dbd48 <_Balloc>
   dbe2c:	6922      	ldr	r2, [r4, #16]
   dbe2e:	3202      	adds	r2, #2
   dbe30:	f104 010c 	add.w	r1, r4, #12
   dbe34:	4605      	mov	r5, r0
   dbe36:	0092      	lsls	r2, r2, #2
   dbe38:	300c      	adds	r0, #12
   dbe3a:	f7fe fca9 	bl	da790 <memcpy>
   dbe3e:	4621      	mov	r1, r4
   dbe40:	4638      	mov	r0, r7
   dbe42:	f7ff ffb5 	bl	dbdb0 <_Bfree>
   dbe46:	462c      	mov	r4, r5
   dbe48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dbe4c:	3601      	adds	r6, #1
   dbe4e:	f8c3 8014 	str.w	r8, [r3, #20]
   dbe52:	6126      	str	r6, [r4, #16]
   dbe54:	4620      	mov	r0, r4
   dbe56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dbe5a <__s2b>:
   dbe5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbe5e:	460c      	mov	r4, r1
   dbe60:	4615      	mov	r5, r2
   dbe62:	461f      	mov	r7, r3
   dbe64:	2209      	movs	r2, #9
   dbe66:	3308      	adds	r3, #8
   dbe68:	4606      	mov	r6, r0
   dbe6a:	fb93 f3f2 	sdiv	r3, r3, r2
   dbe6e:	2100      	movs	r1, #0
   dbe70:	2201      	movs	r2, #1
   dbe72:	429a      	cmp	r2, r3
   dbe74:	db20      	blt.n	dbeb8 <__s2b+0x5e>
   dbe76:	4630      	mov	r0, r6
   dbe78:	f7ff ff66 	bl	dbd48 <_Balloc>
   dbe7c:	9b08      	ldr	r3, [sp, #32]
   dbe7e:	6143      	str	r3, [r0, #20]
   dbe80:	2d09      	cmp	r5, #9
   dbe82:	f04f 0301 	mov.w	r3, #1
   dbe86:	6103      	str	r3, [r0, #16]
   dbe88:	dd19      	ble.n	dbebe <__s2b+0x64>
   dbe8a:	f104 0909 	add.w	r9, r4, #9
   dbe8e:	46c8      	mov	r8, r9
   dbe90:	442c      	add	r4, r5
   dbe92:	f818 3b01 	ldrb.w	r3, [r8], #1
   dbe96:	4601      	mov	r1, r0
   dbe98:	3b30      	subs	r3, #48	; 0x30
   dbe9a:	220a      	movs	r2, #10
   dbe9c:	4630      	mov	r0, r6
   dbe9e:	f7ff ff9e 	bl	dbdde <__multadd>
   dbea2:	45a0      	cmp	r8, r4
   dbea4:	d1f5      	bne.n	dbe92 <__s2b+0x38>
   dbea6:	f1a5 0408 	sub.w	r4, r5, #8
   dbeaa:	444c      	add	r4, r9
   dbeac:	1b2d      	subs	r5, r5, r4
   dbeae:	1963      	adds	r3, r4, r5
   dbeb0:	42bb      	cmp	r3, r7
   dbeb2:	db07      	blt.n	dbec4 <__s2b+0x6a>
   dbeb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbeb8:	0052      	lsls	r2, r2, #1
   dbeba:	3101      	adds	r1, #1
   dbebc:	e7d9      	b.n	dbe72 <__s2b+0x18>
   dbebe:	340a      	adds	r4, #10
   dbec0:	2509      	movs	r5, #9
   dbec2:	e7f3      	b.n	dbeac <__s2b+0x52>
   dbec4:	f814 3b01 	ldrb.w	r3, [r4], #1
   dbec8:	4601      	mov	r1, r0
   dbeca:	3b30      	subs	r3, #48	; 0x30
   dbecc:	220a      	movs	r2, #10
   dbece:	4630      	mov	r0, r6
   dbed0:	f7ff ff85 	bl	dbdde <__multadd>
   dbed4:	e7eb      	b.n	dbeae <__s2b+0x54>

000dbed6 <__hi0bits>:
   dbed6:	0c03      	lsrs	r3, r0, #16
   dbed8:	041b      	lsls	r3, r3, #16
   dbeda:	b9d3      	cbnz	r3, dbf12 <__hi0bits+0x3c>
   dbedc:	0400      	lsls	r0, r0, #16
   dbede:	2310      	movs	r3, #16
   dbee0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dbee4:	bf04      	itt	eq
   dbee6:	0200      	lsleq	r0, r0, #8
   dbee8:	3308      	addeq	r3, #8
   dbeea:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dbeee:	bf04      	itt	eq
   dbef0:	0100      	lsleq	r0, r0, #4
   dbef2:	3304      	addeq	r3, #4
   dbef4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dbef8:	bf04      	itt	eq
   dbefa:	0080      	lsleq	r0, r0, #2
   dbefc:	3302      	addeq	r3, #2
   dbefe:	2800      	cmp	r0, #0
   dbf00:	db05      	blt.n	dbf0e <__hi0bits+0x38>
   dbf02:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dbf06:	f103 0301 	add.w	r3, r3, #1
   dbf0a:	bf08      	it	eq
   dbf0c:	2320      	moveq	r3, #32
   dbf0e:	4618      	mov	r0, r3
   dbf10:	4770      	bx	lr
   dbf12:	2300      	movs	r3, #0
   dbf14:	e7e4      	b.n	dbee0 <__hi0bits+0xa>

000dbf16 <__lo0bits>:
   dbf16:	6803      	ldr	r3, [r0, #0]
   dbf18:	f013 0207 	ands.w	r2, r3, #7
   dbf1c:	4601      	mov	r1, r0
   dbf1e:	d00b      	beq.n	dbf38 <__lo0bits+0x22>
   dbf20:	07da      	lsls	r2, r3, #31
   dbf22:	d424      	bmi.n	dbf6e <__lo0bits+0x58>
   dbf24:	0798      	lsls	r0, r3, #30
   dbf26:	bf49      	itett	mi
   dbf28:	085b      	lsrmi	r3, r3, #1
   dbf2a:	089b      	lsrpl	r3, r3, #2
   dbf2c:	2001      	movmi	r0, #1
   dbf2e:	600b      	strmi	r3, [r1, #0]
   dbf30:	bf5c      	itt	pl
   dbf32:	600b      	strpl	r3, [r1, #0]
   dbf34:	2002      	movpl	r0, #2
   dbf36:	4770      	bx	lr
   dbf38:	b298      	uxth	r0, r3
   dbf3a:	b9b0      	cbnz	r0, dbf6a <__lo0bits+0x54>
   dbf3c:	0c1b      	lsrs	r3, r3, #16
   dbf3e:	2010      	movs	r0, #16
   dbf40:	f013 0fff 	tst.w	r3, #255	; 0xff
   dbf44:	bf04      	itt	eq
   dbf46:	0a1b      	lsreq	r3, r3, #8
   dbf48:	3008      	addeq	r0, #8
   dbf4a:	071a      	lsls	r2, r3, #28
   dbf4c:	bf04      	itt	eq
   dbf4e:	091b      	lsreq	r3, r3, #4
   dbf50:	3004      	addeq	r0, #4
   dbf52:	079a      	lsls	r2, r3, #30
   dbf54:	bf04      	itt	eq
   dbf56:	089b      	lsreq	r3, r3, #2
   dbf58:	3002      	addeq	r0, #2
   dbf5a:	07da      	lsls	r2, r3, #31
   dbf5c:	d403      	bmi.n	dbf66 <__lo0bits+0x50>
   dbf5e:	085b      	lsrs	r3, r3, #1
   dbf60:	f100 0001 	add.w	r0, r0, #1
   dbf64:	d005      	beq.n	dbf72 <__lo0bits+0x5c>
   dbf66:	600b      	str	r3, [r1, #0]
   dbf68:	4770      	bx	lr
   dbf6a:	4610      	mov	r0, r2
   dbf6c:	e7e8      	b.n	dbf40 <__lo0bits+0x2a>
   dbf6e:	2000      	movs	r0, #0
   dbf70:	4770      	bx	lr
   dbf72:	2020      	movs	r0, #32
   dbf74:	4770      	bx	lr

000dbf76 <__i2b>:
   dbf76:	b510      	push	{r4, lr}
   dbf78:	460c      	mov	r4, r1
   dbf7a:	2101      	movs	r1, #1
   dbf7c:	f7ff fee4 	bl	dbd48 <_Balloc>
   dbf80:	2201      	movs	r2, #1
   dbf82:	6144      	str	r4, [r0, #20]
   dbf84:	6102      	str	r2, [r0, #16]
   dbf86:	bd10      	pop	{r4, pc}

000dbf88 <__multiply>:
   dbf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbf8c:	4615      	mov	r5, r2
   dbf8e:	690a      	ldr	r2, [r1, #16]
   dbf90:	692b      	ldr	r3, [r5, #16]
   dbf92:	429a      	cmp	r2, r3
   dbf94:	bfb8      	it	lt
   dbf96:	460b      	movlt	r3, r1
   dbf98:	460c      	mov	r4, r1
   dbf9a:	bfbc      	itt	lt
   dbf9c:	462c      	movlt	r4, r5
   dbf9e:	461d      	movlt	r5, r3
   dbfa0:	6927      	ldr	r7, [r4, #16]
   dbfa2:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dbfa6:	68a3      	ldr	r3, [r4, #8]
   dbfa8:	6861      	ldr	r1, [r4, #4]
   dbfaa:	eb07 0609 	add.w	r6, r7, r9
   dbfae:	42b3      	cmp	r3, r6
   dbfb0:	bfb8      	it	lt
   dbfb2:	3101      	addlt	r1, #1
   dbfb4:	b085      	sub	sp, #20
   dbfb6:	f7ff fec7 	bl	dbd48 <_Balloc>
   dbfba:	f100 0114 	add.w	r1, r0, #20
   dbfbe:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dbfc2:	460b      	mov	r3, r1
   dbfc4:	2200      	movs	r2, #0
   dbfc6:	4543      	cmp	r3, r8
   dbfc8:	d31d      	bcc.n	dc006 <__multiply+0x7e>
   dbfca:	f104 0314 	add.w	r3, r4, #20
   dbfce:	f105 0214 	add.w	r2, r5, #20
   dbfd2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dbfd6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dbfda:	9302      	str	r3, [sp, #8]
   dbfdc:	1b3b      	subs	r3, r7, r4
   dbfde:	3b15      	subs	r3, #21
   dbfe0:	f023 0303 	bic.w	r3, r3, #3
   dbfe4:	3304      	adds	r3, #4
   dbfe6:	f104 0515 	add.w	r5, r4, #21
   dbfea:	42af      	cmp	r7, r5
   dbfec:	bf38      	it	cc
   dbfee:	2304      	movcc	r3, #4
   dbff0:	9301      	str	r3, [sp, #4]
   dbff2:	9b02      	ldr	r3, [sp, #8]
   dbff4:	9203      	str	r2, [sp, #12]
   dbff6:	4293      	cmp	r3, r2
   dbff8:	d808      	bhi.n	dc00c <__multiply+0x84>
   dbffa:	2e00      	cmp	r6, #0
   dbffc:	dc5a      	bgt.n	dc0b4 <__multiply+0x12c>
   dbffe:	6106      	str	r6, [r0, #16]
   dc000:	b005      	add	sp, #20
   dc002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc006:	f843 2b04 	str.w	r2, [r3], #4
   dc00a:	e7dc      	b.n	dbfc6 <__multiply+0x3e>
   dc00c:	f8b2 a000 	ldrh.w	sl, [r2]
   dc010:	f1ba 0f00 	cmp.w	sl, #0
   dc014:	d024      	beq.n	dc060 <__multiply+0xd8>
   dc016:	f104 0e14 	add.w	lr, r4, #20
   dc01a:	4689      	mov	r9, r1
   dc01c:	f04f 0c00 	mov.w	ip, #0
   dc020:	f85e 5b04 	ldr.w	r5, [lr], #4
   dc024:	f8d9 b000 	ldr.w	fp, [r9]
   dc028:	b2ab      	uxth	r3, r5
   dc02a:	fa1f fb8b 	uxth.w	fp, fp
   dc02e:	fb0a b303 	mla	r3, sl, r3, fp
   dc032:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dc036:	f8d9 5000 	ldr.w	r5, [r9]
   dc03a:	4463      	add	r3, ip
   dc03c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc040:	fb0a c50b 	mla	r5, sl, fp, ip
   dc044:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dc048:	b29b      	uxth	r3, r3
   dc04a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dc04e:	4577      	cmp	r7, lr
   dc050:	f849 3b04 	str.w	r3, [r9], #4
   dc054:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dc058:	d8e2      	bhi.n	dc020 <__multiply+0x98>
   dc05a:	9b01      	ldr	r3, [sp, #4]
   dc05c:	f841 c003 	str.w	ip, [r1, r3]
   dc060:	9b03      	ldr	r3, [sp, #12]
   dc062:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dc066:	3204      	adds	r2, #4
   dc068:	f1b9 0f00 	cmp.w	r9, #0
   dc06c:	d020      	beq.n	dc0b0 <__multiply+0x128>
   dc06e:	680b      	ldr	r3, [r1, #0]
   dc070:	f104 0c14 	add.w	ip, r4, #20
   dc074:	468e      	mov	lr, r1
   dc076:	f04f 0a00 	mov.w	sl, #0
   dc07a:	f8bc 5000 	ldrh.w	r5, [ip]
   dc07e:	f8be b002 	ldrh.w	fp, [lr, #2]
   dc082:	fb09 b505 	mla	r5, r9, r5, fp
   dc086:	44aa      	add	sl, r5
   dc088:	b29b      	uxth	r3, r3
   dc08a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dc08e:	f84e 3b04 	str.w	r3, [lr], #4
   dc092:	f85c 3b04 	ldr.w	r3, [ip], #4
   dc096:	f8be 5000 	ldrh.w	r5, [lr]
   dc09a:	0c1b      	lsrs	r3, r3, #16
   dc09c:	fb09 5303 	mla	r3, r9, r3, r5
   dc0a0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dc0a4:	4567      	cmp	r7, ip
   dc0a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dc0aa:	d8e6      	bhi.n	dc07a <__multiply+0xf2>
   dc0ac:	9d01      	ldr	r5, [sp, #4]
   dc0ae:	514b      	str	r3, [r1, r5]
   dc0b0:	3104      	adds	r1, #4
   dc0b2:	e79e      	b.n	dbff2 <__multiply+0x6a>
   dc0b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dc0b8:	2b00      	cmp	r3, #0
   dc0ba:	d1a0      	bne.n	dbffe <__multiply+0x76>
   dc0bc:	3e01      	subs	r6, #1
   dc0be:	e79c      	b.n	dbffa <__multiply+0x72>

000dc0c0 <__pow5mult>:
   dc0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc0c4:	4615      	mov	r5, r2
   dc0c6:	f012 0203 	ands.w	r2, r2, #3
   dc0ca:	4606      	mov	r6, r0
   dc0cc:	460f      	mov	r7, r1
   dc0ce:	d007      	beq.n	dc0e0 <__pow5mult+0x20>
   dc0d0:	4c21      	ldr	r4, [pc, #132]	; (dc158 <__pow5mult+0x98>)
   dc0d2:	3a01      	subs	r2, #1
   dc0d4:	2300      	movs	r3, #0
   dc0d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dc0da:	f7ff fe80 	bl	dbdde <__multadd>
   dc0de:	4607      	mov	r7, r0
   dc0e0:	10ad      	asrs	r5, r5, #2
   dc0e2:	d035      	beq.n	dc150 <__pow5mult+0x90>
   dc0e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dc0e6:	b93c      	cbnz	r4, dc0f8 <__pow5mult+0x38>
   dc0e8:	2010      	movs	r0, #16
   dc0ea:	f7fb f83b 	bl	d7164 <malloc>
   dc0ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dc0f2:	6270      	str	r0, [r6, #36]	; 0x24
   dc0f4:	6004      	str	r4, [r0, #0]
   dc0f6:	60c4      	str	r4, [r0, #12]
   dc0f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dc0fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dc100:	b94c      	cbnz	r4, dc116 <__pow5mult+0x56>
   dc102:	f240 2171 	movw	r1, #625	; 0x271
   dc106:	4630      	mov	r0, r6
   dc108:	f7ff ff35 	bl	dbf76 <__i2b>
   dc10c:	2300      	movs	r3, #0
   dc10e:	f8c8 0008 	str.w	r0, [r8, #8]
   dc112:	4604      	mov	r4, r0
   dc114:	6003      	str	r3, [r0, #0]
   dc116:	f04f 0900 	mov.w	r9, #0
   dc11a:	07eb      	lsls	r3, r5, #31
   dc11c:	d50a      	bpl.n	dc134 <__pow5mult+0x74>
   dc11e:	4639      	mov	r1, r7
   dc120:	4622      	mov	r2, r4
   dc122:	4630      	mov	r0, r6
   dc124:	f7ff ff30 	bl	dbf88 <__multiply>
   dc128:	4639      	mov	r1, r7
   dc12a:	4680      	mov	r8, r0
   dc12c:	4630      	mov	r0, r6
   dc12e:	f7ff fe3f 	bl	dbdb0 <_Bfree>
   dc132:	4647      	mov	r7, r8
   dc134:	106d      	asrs	r5, r5, #1
   dc136:	d00b      	beq.n	dc150 <__pow5mult+0x90>
   dc138:	6820      	ldr	r0, [r4, #0]
   dc13a:	b938      	cbnz	r0, dc14c <__pow5mult+0x8c>
   dc13c:	4622      	mov	r2, r4
   dc13e:	4621      	mov	r1, r4
   dc140:	4630      	mov	r0, r6
   dc142:	f7ff ff21 	bl	dbf88 <__multiply>
   dc146:	6020      	str	r0, [r4, #0]
   dc148:	f8c0 9000 	str.w	r9, [r0]
   dc14c:	4604      	mov	r4, r0
   dc14e:	e7e4      	b.n	dc11a <__pow5mult+0x5a>
   dc150:	4638      	mov	r0, r7
   dc152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc156:	bf00      	nop
   dc158:	000dd510 	.word	0x000dd510

000dc15c <__lshift>:
   dc15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc160:	460c      	mov	r4, r1
   dc162:	6849      	ldr	r1, [r1, #4]
   dc164:	6923      	ldr	r3, [r4, #16]
   dc166:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dc16a:	68a3      	ldr	r3, [r4, #8]
   dc16c:	4607      	mov	r7, r0
   dc16e:	4691      	mov	r9, r2
   dc170:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dc174:	f108 0601 	add.w	r6, r8, #1
   dc178:	42b3      	cmp	r3, r6
   dc17a:	db3f      	blt.n	dc1fc <__lshift+0xa0>
   dc17c:	4638      	mov	r0, r7
   dc17e:	f7ff fde3 	bl	dbd48 <_Balloc>
   dc182:	2300      	movs	r3, #0
   dc184:	4605      	mov	r5, r0
   dc186:	f100 0114 	add.w	r1, r0, #20
   dc18a:	f100 0210 	add.w	r2, r0, #16
   dc18e:	4618      	mov	r0, r3
   dc190:	4553      	cmp	r3, sl
   dc192:	db36      	blt.n	dc202 <__lshift+0xa6>
   dc194:	6920      	ldr	r0, [r4, #16]
   dc196:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dc19a:	f104 0314 	add.w	r3, r4, #20
   dc19e:	f019 091f 	ands.w	r9, r9, #31
   dc1a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dc1a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dc1aa:	d02e      	beq.n	dc20a <__lshift+0xae>
   dc1ac:	f1c9 0e20 	rsb	lr, r9, #32
   dc1b0:	468a      	mov	sl, r1
   dc1b2:	2200      	movs	r2, #0
   dc1b4:	6818      	ldr	r0, [r3, #0]
   dc1b6:	fa00 f009 	lsl.w	r0, r0, r9
   dc1ba:	4302      	orrs	r2, r0
   dc1bc:	f84a 2b04 	str.w	r2, [sl], #4
   dc1c0:	f853 2b04 	ldr.w	r2, [r3], #4
   dc1c4:	459c      	cmp	ip, r3
   dc1c6:	fa22 f20e 	lsr.w	r2, r2, lr
   dc1ca:	d8f3      	bhi.n	dc1b4 <__lshift+0x58>
   dc1cc:	ebac 0304 	sub.w	r3, ip, r4
   dc1d0:	3b15      	subs	r3, #21
   dc1d2:	f023 0303 	bic.w	r3, r3, #3
   dc1d6:	3304      	adds	r3, #4
   dc1d8:	f104 0015 	add.w	r0, r4, #21
   dc1dc:	4560      	cmp	r0, ip
   dc1de:	bf88      	it	hi
   dc1e0:	2304      	movhi	r3, #4
   dc1e2:	50ca      	str	r2, [r1, r3]
   dc1e4:	b10a      	cbz	r2, dc1ea <__lshift+0x8e>
   dc1e6:	f108 0602 	add.w	r6, r8, #2
   dc1ea:	3e01      	subs	r6, #1
   dc1ec:	4638      	mov	r0, r7
   dc1ee:	612e      	str	r6, [r5, #16]
   dc1f0:	4621      	mov	r1, r4
   dc1f2:	f7ff fddd 	bl	dbdb0 <_Bfree>
   dc1f6:	4628      	mov	r0, r5
   dc1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc1fc:	3101      	adds	r1, #1
   dc1fe:	005b      	lsls	r3, r3, #1
   dc200:	e7ba      	b.n	dc178 <__lshift+0x1c>
   dc202:	f842 0f04 	str.w	r0, [r2, #4]!
   dc206:	3301      	adds	r3, #1
   dc208:	e7c2      	b.n	dc190 <__lshift+0x34>
   dc20a:	3904      	subs	r1, #4
   dc20c:	f853 2b04 	ldr.w	r2, [r3], #4
   dc210:	f841 2f04 	str.w	r2, [r1, #4]!
   dc214:	459c      	cmp	ip, r3
   dc216:	d8f9      	bhi.n	dc20c <__lshift+0xb0>
   dc218:	e7e7      	b.n	dc1ea <__lshift+0x8e>

000dc21a <__mcmp>:
   dc21a:	b530      	push	{r4, r5, lr}
   dc21c:	6902      	ldr	r2, [r0, #16]
   dc21e:	690c      	ldr	r4, [r1, #16]
   dc220:	1b12      	subs	r2, r2, r4
   dc222:	d10e      	bne.n	dc242 <__mcmp+0x28>
   dc224:	f100 0314 	add.w	r3, r0, #20
   dc228:	3114      	adds	r1, #20
   dc22a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dc22e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dc232:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dc236:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dc23a:	42a5      	cmp	r5, r4
   dc23c:	d003      	beq.n	dc246 <__mcmp+0x2c>
   dc23e:	d305      	bcc.n	dc24c <__mcmp+0x32>
   dc240:	2201      	movs	r2, #1
   dc242:	4610      	mov	r0, r2
   dc244:	bd30      	pop	{r4, r5, pc}
   dc246:	4283      	cmp	r3, r0
   dc248:	d3f3      	bcc.n	dc232 <__mcmp+0x18>
   dc24a:	e7fa      	b.n	dc242 <__mcmp+0x28>
   dc24c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dc250:	e7f7      	b.n	dc242 <__mcmp+0x28>

000dc252 <__mdiff>:
   dc252:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc256:	460c      	mov	r4, r1
   dc258:	4606      	mov	r6, r0
   dc25a:	4611      	mov	r1, r2
   dc25c:	4620      	mov	r0, r4
   dc25e:	4617      	mov	r7, r2
   dc260:	f7ff ffdb 	bl	dc21a <__mcmp>
   dc264:	1e05      	subs	r5, r0, #0
   dc266:	d108      	bne.n	dc27a <__mdiff+0x28>
   dc268:	4629      	mov	r1, r5
   dc26a:	4630      	mov	r0, r6
   dc26c:	f7ff fd6c 	bl	dbd48 <_Balloc>
   dc270:	2301      	movs	r3, #1
   dc272:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dc276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc27a:	bfa4      	itt	ge
   dc27c:	463b      	movge	r3, r7
   dc27e:	4627      	movge	r7, r4
   dc280:	4630      	mov	r0, r6
   dc282:	6879      	ldr	r1, [r7, #4]
   dc284:	bfa6      	itte	ge
   dc286:	461c      	movge	r4, r3
   dc288:	2500      	movge	r5, #0
   dc28a:	2501      	movlt	r5, #1
   dc28c:	f7ff fd5c 	bl	dbd48 <_Balloc>
   dc290:	693e      	ldr	r6, [r7, #16]
   dc292:	60c5      	str	r5, [r0, #12]
   dc294:	6925      	ldr	r5, [r4, #16]
   dc296:	f107 0114 	add.w	r1, r7, #20
   dc29a:	f104 0914 	add.w	r9, r4, #20
   dc29e:	f100 0e14 	add.w	lr, r0, #20
   dc2a2:	f107 0210 	add.w	r2, r7, #16
   dc2a6:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dc2aa:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dc2ae:	46f2      	mov	sl, lr
   dc2b0:	2700      	movs	r7, #0
   dc2b2:	f859 3b04 	ldr.w	r3, [r9], #4
   dc2b6:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dc2ba:	fa1f f883 	uxth.w	r8, r3
   dc2be:	fa17 f78b 	uxtah	r7, r7, fp
   dc2c2:	0c1b      	lsrs	r3, r3, #16
   dc2c4:	eba7 0808 	sub.w	r8, r7, r8
   dc2c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dc2cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dc2d0:	fa1f f888 	uxth.w	r8, r8
   dc2d4:	141f      	asrs	r7, r3, #16
   dc2d6:	454d      	cmp	r5, r9
   dc2d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dc2dc:	f84a 3b04 	str.w	r3, [sl], #4
   dc2e0:	d8e7      	bhi.n	dc2b2 <__mdiff+0x60>
   dc2e2:	1b2b      	subs	r3, r5, r4
   dc2e4:	3b15      	subs	r3, #21
   dc2e6:	f023 0303 	bic.w	r3, r3, #3
   dc2ea:	3304      	adds	r3, #4
   dc2ec:	3415      	adds	r4, #21
   dc2ee:	42a5      	cmp	r5, r4
   dc2f0:	bf38      	it	cc
   dc2f2:	2304      	movcc	r3, #4
   dc2f4:	4419      	add	r1, r3
   dc2f6:	4473      	add	r3, lr
   dc2f8:	469e      	mov	lr, r3
   dc2fa:	460d      	mov	r5, r1
   dc2fc:	4565      	cmp	r5, ip
   dc2fe:	d30e      	bcc.n	dc31e <__mdiff+0xcc>
   dc300:	f10c 0203 	add.w	r2, ip, #3
   dc304:	1a52      	subs	r2, r2, r1
   dc306:	f022 0203 	bic.w	r2, r2, #3
   dc30a:	3903      	subs	r1, #3
   dc30c:	458c      	cmp	ip, r1
   dc30e:	bf38      	it	cc
   dc310:	2200      	movcc	r2, #0
   dc312:	441a      	add	r2, r3
   dc314:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dc318:	b17b      	cbz	r3, dc33a <__mdiff+0xe8>
   dc31a:	6106      	str	r6, [r0, #16]
   dc31c:	e7ab      	b.n	dc276 <__mdiff+0x24>
   dc31e:	f855 8b04 	ldr.w	r8, [r5], #4
   dc322:	fa17 f488 	uxtah	r4, r7, r8
   dc326:	1422      	asrs	r2, r4, #16
   dc328:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dc32c:	b2a4      	uxth	r4, r4
   dc32e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dc332:	f84e 4b04 	str.w	r4, [lr], #4
   dc336:	1417      	asrs	r7, r2, #16
   dc338:	e7e0      	b.n	dc2fc <__mdiff+0xaa>
   dc33a:	3e01      	subs	r6, #1
   dc33c:	e7ea      	b.n	dc314 <__mdiff+0xc2>
	...

000dc340 <__ulp>:
   dc340:	b082      	sub	sp, #8
   dc342:	ed8d 0b00 	vstr	d0, [sp]
   dc346:	9b01      	ldr	r3, [sp, #4]
   dc348:	4912      	ldr	r1, [pc, #72]	; (dc394 <__ulp+0x54>)
   dc34a:	4019      	ands	r1, r3
   dc34c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dc350:	2900      	cmp	r1, #0
   dc352:	dd05      	ble.n	dc360 <__ulp+0x20>
   dc354:	2200      	movs	r2, #0
   dc356:	460b      	mov	r3, r1
   dc358:	ec43 2b10 	vmov	d0, r2, r3
   dc35c:	b002      	add	sp, #8
   dc35e:	4770      	bx	lr
   dc360:	4249      	negs	r1, r1
   dc362:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dc366:	ea4f 5021 	mov.w	r0, r1, asr #20
   dc36a:	f04f 0200 	mov.w	r2, #0
   dc36e:	f04f 0300 	mov.w	r3, #0
   dc372:	da04      	bge.n	dc37e <__ulp+0x3e>
   dc374:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dc378:	fa41 f300 	asr.w	r3, r1, r0
   dc37c:	e7ec      	b.n	dc358 <__ulp+0x18>
   dc37e:	f1a0 0114 	sub.w	r1, r0, #20
   dc382:	291e      	cmp	r1, #30
   dc384:	bfda      	itte	le
   dc386:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dc38a:	fa20 f101 	lsrle.w	r1, r0, r1
   dc38e:	2101      	movgt	r1, #1
   dc390:	460a      	mov	r2, r1
   dc392:	e7e1      	b.n	dc358 <__ulp+0x18>
   dc394:	7ff00000 	.word	0x7ff00000

000dc398 <__b2d>:
   dc398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc39a:	6905      	ldr	r5, [r0, #16]
   dc39c:	f100 0714 	add.w	r7, r0, #20
   dc3a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dc3a4:	1f2e      	subs	r6, r5, #4
   dc3a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dc3aa:	4620      	mov	r0, r4
   dc3ac:	f7ff fd93 	bl	dbed6 <__hi0bits>
   dc3b0:	f1c0 0320 	rsb	r3, r0, #32
   dc3b4:	280a      	cmp	r0, #10
   dc3b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; dc434 <__b2d+0x9c>
   dc3ba:	600b      	str	r3, [r1, #0]
   dc3bc:	dc14      	bgt.n	dc3e8 <__b2d+0x50>
   dc3be:	f1c0 0e0b 	rsb	lr, r0, #11
   dc3c2:	fa24 f10e 	lsr.w	r1, r4, lr
   dc3c6:	42b7      	cmp	r7, r6
   dc3c8:	ea41 030c 	orr.w	r3, r1, ip
   dc3cc:	bf34      	ite	cc
   dc3ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc3d2:	2100      	movcs	r1, #0
   dc3d4:	3015      	adds	r0, #21
   dc3d6:	fa04 f000 	lsl.w	r0, r4, r0
   dc3da:	fa21 f10e 	lsr.w	r1, r1, lr
   dc3de:	ea40 0201 	orr.w	r2, r0, r1
   dc3e2:	ec43 2b10 	vmov	d0, r2, r3
   dc3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc3e8:	42b7      	cmp	r7, r6
   dc3ea:	bf3a      	itte	cc
   dc3ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dc3f0:	f1a5 0608 	subcc.w	r6, r5, #8
   dc3f4:	2100      	movcs	r1, #0
   dc3f6:	380b      	subs	r0, #11
   dc3f8:	d017      	beq.n	dc42a <__b2d+0x92>
   dc3fa:	f1c0 0c20 	rsb	ip, r0, #32
   dc3fe:	fa04 f500 	lsl.w	r5, r4, r0
   dc402:	42be      	cmp	r6, r7
   dc404:	fa21 f40c 	lsr.w	r4, r1, ip
   dc408:	ea45 0504 	orr.w	r5, r5, r4
   dc40c:	bf8c      	ite	hi
   dc40e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dc412:	2400      	movls	r4, #0
   dc414:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dc418:	fa01 f000 	lsl.w	r0, r1, r0
   dc41c:	fa24 f40c 	lsr.w	r4, r4, ip
   dc420:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dc424:	ea40 0204 	orr.w	r2, r0, r4
   dc428:	e7db      	b.n	dc3e2 <__b2d+0x4a>
   dc42a:	ea44 030c 	orr.w	r3, r4, ip
   dc42e:	460a      	mov	r2, r1
   dc430:	e7d7      	b.n	dc3e2 <__b2d+0x4a>
   dc432:	bf00      	nop
   dc434:	3ff00000 	.word	0x3ff00000

000dc438 <__d2b>:
   dc438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dc43c:	4689      	mov	r9, r1
   dc43e:	2101      	movs	r1, #1
   dc440:	ec57 6b10 	vmov	r6, r7, d0
   dc444:	4690      	mov	r8, r2
   dc446:	f7ff fc7f 	bl	dbd48 <_Balloc>
   dc44a:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dc44e:	4604      	mov	r4, r0
   dc450:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dc454:	bb35      	cbnz	r5, dc4a4 <__d2b+0x6c>
   dc456:	2e00      	cmp	r6, #0
   dc458:	9301      	str	r3, [sp, #4]
   dc45a:	d028      	beq.n	dc4ae <__d2b+0x76>
   dc45c:	4668      	mov	r0, sp
   dc45e:	9600      	str	r6, [sp, #0]
   dc460:	f7ff fd59 	bl	dbf16 <__lo0bits>
   dc464:	9900      	ldr	r1, [sp, #0]
   dc466:	b300      	cbz	r0, dc4aa <__d2b+0x72>
   dc468:	9a01      	ldr	r2, [sp, #4]
   dc46a:	f1c0 0320 	rsb	r3, r0, #32
   dc46e:	fa02 f303 	lsl.w	r3, r2, r3
   dc472:	430b      	orrs	r3, r1
   dc474:	40c2      	lsrs	r2, r0
   dc476:	6163      	str	r3, [r4, #20]
   dc478:	9201      	str	r2, [sp, #4]
   dc47a:	9b01      	ldr	r3, [sp, #4]
   dc47c:	61a3      	str	r3, [r4, #24]
   dc47e:	2b00      	cmp	r3, #0
   dc480:	bf14      	ite	ne
   dc482:	2202      	movne	r2, #2
   dc484:	2201      	moveq	r2, #1
   dc486:	6122      	str	r2, [r4, #16]
   dc488:	b1d5      	cbz	r5, dc4c0 <__d2b+0x88>
   dc48a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dc48e:	4405      	add	r5, r0
   dc490:	f8c9 5000 	str.w	r5, [r9]
   dc494:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dc498:	f8c8 0000 	str.w	r0, [r8]
   dc49c:	4620      	mov	r0, r4
   dc49e:	b003      	add	sp, #12
   dc4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc4a8:	e7d5      	b.n	dc456 <__d2b+0x1e>
   dc4aa:	6161      	str	r1, [r4, #20]
   dc4ac:	e7e5      	b.n	dc47a <__d2b+0x42>
   dc4ae:	a801      	add	r0, sp, #4
   dc4b0:	f7ff fd31 	bl	dbf16 <__lo0bits>
   dc4b4:	9b01      	ldr	r3, [sp, #4]
   dc4b6:	6163      	str	r3, [r4, #20]
   dc4b8:	2201      	movs	r2, #1
   dc4ba:	6122      	str	r2, [r4, #16]
   dc4bc:	3020      	adds	r0, #32
   dc4be:	e7e3      	b.n	dc488 <__d2b+0x50>
   dc4c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dc4c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dc4c8:	f8c9 0000 	str.w	r0, [r9]
   dc4cc:	6918      	ldr	r0, [r3, #16]
   dc4ce:	f7ff fd02 	bl	dbed6 <__hi0bits>
   dc4d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dc4d6:	e7df      	b.n	dc498 <__d2b+0x60>

000dc4d8 <__ratio>:
   dc4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc4dc:	4688      	mov	r8, r1
   dc4de:	4669      	mov	r1, sp
   dc4e0:	4681      	mov	r9, r0
   dc4e2:	f7ff ff59 	bl	dc398 <__b2d>
   dc4e6:	a901      	add	r1, sp, #4
   dc4e8:	4640      	mov	r0, r8
   dc4ea:	ec55 4b10 	vmov	r4, r5, d0
   dc4ee:	f7ff ff53 	bl	dc398 <__b2d>
   dc4f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dc4f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dc4fa:	eba3 0c02 	sub.w	ip, r3, r2
   dc4fe:	e9dd 3200 	ldrd	r3, r2, [sp]
   dc502:	1a9b      	subs	r3, r3, r2
   dc504:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dc508:	ec51 0b10 	vmov	r0, r1, d0
   dc50c:	2b00      	cmp	r3, #0
   dc50e:	bfd6      	itet	le
   dc510:	460a      	movle	r2, r1
   dc512:	462a      	movgt	r2, r5
   dc514:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dc518:	468b      	mov	fp, r1
   dc51a:	462f      	mov	r7, r5
   dc51c:	bfd4      	ite	le
   dc51e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dc522:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dc526:	4620      	mov	r0, r4
   dc528:	ee10 2a10 	vmov	r2, s0
   dc52c:	465b      	mov	r3, fp
   dc52e:	4639      	mov	r1, r7
   dc530:	f7fd fd5c 	bl	d9fec <__aeabi_ddiv>
   dc534:	ec41 0b10 	vmov	d0, r0, r1
   dc538:	b003      	add	sp, #12
   dc53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dc53e <__copybits>:
   dc53e:	3901      	subs	r1, #1
   dc540:	b570      	push	{r4, r5, r6, lr}
   dc542:	1149      	asrs	r1, r1, #5
   dc544:	6914      	ldr	r4, [r2, #16]
   dc546:	3101      	adds	r1, #1
   dc548:	f102 0314 	add.w	r3, r2, #20
   dc54c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dc550:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dc554:	1f05      	subs	r5, r0, #4
   dc556:	42a3      	cmp	r3, r4
   dc558:	d30c      	bcc.n	dc574 <__copybits+0x36>
   dc55a:	1aa3      	subs	r3, r4, r2
   dc55c:	3b11      	subs	r3, #17
   dc55e:	f023 0303 	bic.w	r3, r3, #3
   dc562:	3211      	adds	r2, #17
   dc564:	42a2      	cmp	r2, r4
   dc566:	bf88      	it	hi
   dc568:	2300      	movhi	r3, #0
   dc56a:	4418      	add	r0, r3
   dc56c:	2300      	movs	r3, #0
   dc56e:	4288      	cmp	r0, r1
   dc570:	d305      	bcc.n	dc57e <__copybits+0x40>
   dc572:	bd70      	pop	{r4, r5, r6, pc}
   dc574:	f853 6b04 	ldr.w	r6, [r3], #4
   dc578:	f845 6f04 	str.w	r6, [r5, #4]!
   dc57c:	e7eb      	b.n	dc556 <__copybits+0x18>
   dc57e:	f840 3b04 	str.w	r3, [r0], #4
   dc582:	e7f4      	b.n	dc56e <__copybits+0x30>

000dc584 <__any_on>:
   dc584:	f100 0214 	add.w	r2, r0, #20
   dc588:	6900      	ldr	r0, [r0, #16]
   dc58a:	114b      	asrs	r3, r1, #5
   dc58c:	4298      	cmp	r0, r3
   dc58e:	b510      	push	{r4, lr}
   dc590:	db11      	blt.n	dc5b6 <__any_on+0x32>
   dc592:	dd0a      	ble.n	dc5aa <__any_on+0x26>
   dc594:	f011 011f 	ands.w	r1, r1, #31
   dc598:	d007      	beq.n	dc5aa <__any_on+0x26>
   dc59a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dc59e:	fa24 f001 	lsr.w	r0, r4, r1
   dc5a2:	fa00 f101 	lsl.w	r1, r0, r1
   dc5a6:	428c      	cmp	r4, r1
   dc5a8:	d10b      	bne.n	dc5c2 <__any_on+0x3e>
   dc5aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dc5ae:	4293      	cmp	r3, r2
   dc5b0:	d803      	bhi.n	dc5ba <__any_on+0x36>
   dc5b2:	2000      	movs	r0, #0
   dc5b4:	bd10      	pop	{r4, pc}
   dc5b6:	4603      	mov	r3, r0
   dc5b8:	e7f7      	b.n	dc5aa <__any_on+0x26>
   dc5ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dc5be:	2900      	cmp	r1, #0
   dc5c0:	d0f5      	beq.n	dc5ae <__any_on+0x2a>
   dc5c2:	2001      	movs	r0, #1
   dc5c4:	e7f6      	b.n	dc5b4 <__any_on+0x30>

000dc5c6 <__ascii_wctomb>:
   dc5c6:	b149      	cbz	r1, dc5dc <__ascii_wctomb+0x16>
   dc5c8:	2aff      	cmp	r2, #255	; 0xff
   dc5ca:	bf85      	ittet	hi
   dc5cc:	238a      	movhi	r3, #138	; 0x8a
   dc5ce:	6003      	strhi	r3, [r0, #0]
   dc5d0:	700a      	strbls	r2, [r1, #0]
   dc5d2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dc5d6:	bf98      	it	ls
   dc5d8:	2001      	movls	r0, #1
   dc5da:	4770      	bx	lr
   dc5dc:	4608      	mov	r0, r1
   dc5de:	4770      	bx	lr

000dc5e0 <__aeabi_d2lz>:
   dc5e0:	b538      	push	{r3, r4, r5, lr}
   dc5e2:	2200      	movs	r2, #0
   dc5e4:	2300      	movs	r3, #0
   dc5e6:	4604      	mov	r4, r0
   dc5e8:	460d      	mov	r5, r1
   dc5ea:	f7fd fe47 	bl	da27c <__aeabi_dcmplt>
   dc5ee:	b928      	cbnz	r0, dc5fc <__aeabi_d2lz+0x1c>
   dc5f0:	4620      	mov	r0, r4
   dc5f2:	4629      	mov	r1, r5
   dc5f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc5f8:	f7fd bf2e 	b.w	da458 <__aeabi_d2ulz>
   dc5fc:	4620      	mov	r0, r4
   dc5fe:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dc602:	f7fd ff29 	bl	da458 <__aeabi_d2ulz>
   dc606:	4240      	negs	r0, r0
   dc608:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc60c:	bd38      	pop	{r3, r4, r5, pc}
   dc60e:	bf00      	nop

000dc610 <dynalib_user>:
   dc610:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dc620:	0000 0000 6341 6974 6576 5720 6165 2072     ....Active Wear 
   dc630:	7453 7461 6f69 006e 6341 6974 6576 5700     Station.Active.W
   dc640:	6165 0072 7553 6767 7365 6974 6e6f 2f00     ear.Suggestion./
   dc650:	6547 5774 6165 6874 7265 6f46 6572 6163     GetWeatherForeca
   dc660:	7473 002f 6e49 6f64 726f 2820 4e49 2029     st/.Indoor (IN) 
   dc670:	0026 754f 6474 6f6f 2072 4f28 7475 0029     &.Outdoor (Out).
   dc680:	6548 7461 4920 646e 7865 7365 4900 206e     Heat Indexes.In 
   dc690:	6e49 6564 3a78 4600 4f00 7475 4920 646e     Index:.F.Out Ind
   dc6a0:	7865 003a 6146 6c69 6465 7420 206f 6572     ex:.Failed to re
   dc6b0:	6461 6620 6f72 206d 4844 2054 6573 736e     ad from DHT sens
   dc6c0:	726f 4700 7465 6557 7461 6568 4672 726f     or.GetWeatherFor
   dc6d0:	6365 7361 0074 6e49 6f64 726f 5420 6d65     ecast.Indoor Tem
   dc6e0:	0070 6e49 6f64 726f 4820 6d75 6469 7469     p.Indoor Humidit
   dc6f0:	0079 754f 6474 6f6f 2072 6554 706d 4f00     y.Outdoor Temp.O
   dc700:	7475 6f64 726f 4820 6d75 6469 7469 0079     utdoor Humidity.
   dc710:	6e49 6f64 726f 4820 6165 2074 6e49 6564     Indoor Heat Inde
   dc720:	0078 754f 6474 6f6f 2072 6548 7461 4920     x.Outdoor Heat I
   dc730:	646e 7865 7300 6275 6373 6972 7470 6f69     ndex.subscriptio
   dc740:	486e 6e61 6c64 7265 2520 0073 6574 706d     nHandler %s.temp
   dc750:	6800 6d75 7700 6265 6f68 6b6f 5500 6962     .hum.webhook.Ubi
   dc760:	6f64 7374                                    dots.

000dc765 <_ZL9BasicFont>:
	...
   dc76d:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   dc77d:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   dc78d:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   dc79d:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   dc7ad:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   dc7bd:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   dc7cd:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   dc7dd:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   dc7ed:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   dc7fd:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   dc80d:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   dc81d:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   dc82d:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   dc83d:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   dc84d:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   dc85d:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   dc86d:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   dc87d:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   dc88d:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   dc89d:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   dc8ad:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   dc8bd:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   dc8cd:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   dc8dd:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   dc8ed:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   dc8fd:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   dc90d:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   dc91d:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   dc92d:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   dc93d:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   dc94d:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   dc95d:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   dc96d:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   dc97d:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   dc98d:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   dc99d:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   dc9ad:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   dc9bd:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   dc9cd:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   dc9dd:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   dc9ed:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   dc9fd:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   dca0d:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   dca1d:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   dca2d:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   dca3d:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   dca4d:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   dca5d:	0200 0505 0002 0000 6255 6469 746f 5073     ........UbidotsP
   dca6d:	7261 6974 6c63 2f65 2e33 0032 7254 6979     article/3.2.Tryi
   dca7d:	676e 7420 206f 6f63 6e6e 6365 2074 6f74     ng to connect to
   dca8d:	0020 2c20 6120 7474 6d65 7470 6e20 6d75      . , attempt num
   dca9d:	6562 3a72 0020 7441 6574 706d 2074 6966     ber: .Attempt fi
   dcaad:	696e 6873 6465 5300 7265 6576 2772 2073     nished.Server's 
   dcabd:	6572 7073 6e6f 6573 003a 2d0a 2d2d 2d2d     response:..-----
   dcacd:	2d2d 2d2d 002d 6974 656d 756f 2c74 6320     -----.timeout, c
   dcadd:	756f 646c 6e20 746f 7220 6165 2064 6e61     ould not read an
   dcaed:	2079 6572 7073 6e6f 6573 6620 6f72 206d     y response from 
   dcafd:	6874 2065 6f68 7473 5000 534f 2054 612f     the host.POST /a
   dcb0d:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   dcb1d:	2000 5448 5054 312f 312e 0a0d 4800 736f     . HTTP/1.1...Hos
   dcb2d:	3a74 0020 7355 7265 412d 6567 746e 203a     t: .User-Agent: 
   dcb3d:	5800 412d 7475 2d68 6f54 656b 3a6e 0020     .X-Auth-Token: .
   dcb4d:	6f43 6e6e 6365 6974 6e6f 203a 6c63 736f     Connection: clos
   dcb5d:	0d65 000a 6f43 746e 6e65 2d74 7954 6570     e...Content-Type
   dcb6d:	203a 7061 6c70 6369 7461 6f69 2f6e 736a     : application/js
   dcb7d:	6e6f 0a0d 4300 6e6f 6574 746e 4c2d 6e65     on...Content-Len
   dcb8d:	7467 3a68 0020 614d 696b 676e 7220 7165     gth: .Making req
   dcb9d:	6575 7473 7420 206f 6255 6469 746f 3a73     uest to Ubidots:
   dcbad:	000a 6177 7469 6e69 2067 6f66 2072 6573     ..waiting for se
   dcbbd:	7672 7265 6120 736e 6577 2072 2e2e 002e     rver answer ....
   dcbcd:	550a 6962 6f64 7374 2027 6553 7672 7265     .Ubidots' Server
   dcbdd:	7220 7365 6f70 736e 3a65 000a 6f43 6c75      response:..Coul
   dcbed:	2064 6f6e 2074 6573 646e 6420 7461 2061     d not send data 
   dcbfd:	6f74 7520 6962 6f64 7374 7520 6973 676e     to ubidots using
   dcc0d:	4820 5454 0050 4547 2054 612f 6970 762f      HTTP.GET /api/v
   dcc1d:	2e31 2f36 6564 6976 6563 2f73 2f00 766c     1.6/devices/./lv
   dcc2d:	4300 6e6f 6574 746e 542d 7079 3a65 6120     .Content-Type: a
   dcc3d:	7070 696c 6163 6974 6e6f 6a2f 6f73 0d6e     pplication/json.
   dcc4d:	0d0a 000a 6f43 6e6e 6365 6974 6e6f 4620     ....Connection F
   dcc5d:	6961 656c 2064 6275 6469 746f 2073 202d     ailed ubidots - 
   dcc6d:	7254 2079 6741 6961 006e                     Try Again..

000dcc78 <_ZTV7UbiHTTP>:
	...
   dcc80:	5931 000d 5b61 000d 56dd 000d 56e1 000d     1Y..a[...V...V..

000dcc90 <_ZTV11UbiParticle>:
	...
   dcc98:	5d81 000d 5d61 000d 5d6d 000d 5d71 000d     .]..a]..m]..q]..
   dcca8:	6f59 2075 7261 2065 6573 646e 6e69 2067     You are sending 
   dccb8:	6f6d 6572 7420 6168 206e 6874 2065 616d     more than the ma
   dccc8:	6978 756d 206d 666f 6320 6e6f 6573 7563     ximum of consecu
   dccd8:	6974 6576 7620 7261 6169 6c62 7365 2500     tive variables.%
   dcce8:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   dccf8:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   dcd08:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   dcd18:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   dcd28:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   dcd38:	2500 2c73 7000 7961 6f6c 6461 003a 7325     .%s,.payload:.%s
   dcd48:	507c 534f 7c54 7325 007c 7325 7325 253a     |POST|%s|.%s%s:%
   dcd58:	0073 7325 3e3d 2500 2473 7325 2500 4073     s.%s=>.%s$%s.%s@
   dcd68:	6c25 0075 7325 657c 646e 5300 6e65 6964     %lu.%s|end.Sendi
   dcd78:	676e 6420 7461 2e61 2e2e 4100 7474 6d65     ng data....Attem
   dcd88:	7470 6e69 2067 6f74 7220 6365 6e6f 656e     pting to reconne
   dcd98:	7463 7c00 564c 007c 6150 6c79 616f 2064     ct.|LV|.Payload 
   dcda8:	6f66 2072 6572 7571 7365 3a74 0a00 2d2d     for request:..--
   dcdb8:	2d2d 5000 534f 0054 4b4f 4300 756f 646c     --.POST.OK.Could
   dcdc8:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   dcdd8:	6874 2065 6f68 7473 4c00 0056 5245 4f52     the host.LV.ERRO
   dcde8:	2052 6f63 6c75 2064 6f6e 2074 6f63 6e6e     R could not conn
   dcdf8:	6365 2074 6f74 7420 6568 7320 7265 6576     ect to the serve
   dce08:	0072 756e 6c6c 4500 5252 524f 0000 0000     r.null.ERROR....

000dce18 <_ZTV6UbiTCP>:
	...
   dce20:	6651 000d 66f5 000d 63a1 000d 6951 000d     Qf...f...c..Qi..
   dce30:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   dce40:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   dce50:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   dce60:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   dce70:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   dce80:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   dce90:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   dcea0:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   dceb0:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   dcec0:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   dced0:	7720 7469 2068 4455 0050 0000                with UDP...

000dcedc <_ZTV6UbiUDP>:
	...
   dcee4:	6ad1 000d 6a59 000d 6a65 000d 6a69 000d     .j..Yj..ej..ij..
   dcef4:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   dcf04:	6962 6f64 7374 632e 6d6f 0000               bidots.com..

000dcf10 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000dcf18 <_ZTVN5spark13CellularClassE>:
	...
   dcf20:	72cf 000d 72c5 000d 72bb 000d 7271 000d     .r...r...r..qr..
   dcf30:	72af 000d 72a3 000d 7fa5 000d 7fad 000d     .r...r..........
   dcf40:	7297 000d 728f 000d 7285 000d 727b 000d     .r...r...r..{r..
   dcf50:	7fdd 000d                                   ....

000dcf54 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcf5c:	7309 000d 730f 000d 734d 000d 731d 000d     .s...s..Ms...s..
   dcf6c:	730b 000d                                   .s..

000dcf70 <_ZTVN5spark13EthernetClassE>:
	...
   dcf78:	789f 000d 7895 000d 788b 000d 7881 000d     .x...x...x...x..
   dcf88:	7875 000d 7869 000d 7fa5 000d 7fad 000d     ux..ix..........
   dcf98:	785d 000d 7855 000d 784b 000d 7841 000d     ]x..Ux..Kx..Ax..
   dcfa8:	7fdd 000d                                   ....

000dcfac <_ZTV7TwoWire>:
	...
   dcfb4:	78bd 000d 7907 000d 78df 000d 78bf 000d     .x...y...x...x..
   dcfc4:	78e7 000d 78ef 000d 78f7 000d 78ff 000d     .x...x...x...x..

000dcfd4 <_ZTV9IPAddress>:
	...
   dcfdc:	7979 000d 7969 000d 796b 000d               yy..iy..ky..

000dcfe8 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcff0:	7ac7 000d 7acd 000d 7ae3 000d 7adb 000d     .z...z...z...z..
   dd000:	7ac9 000d 7061 0070                         .z..app.

000dd008 <_ZTVN5spark12NetworkClassE>:
	...
   dd010:	7f65 000d 7f6f 000d 7f79 000d 7f83 000d     e...o...y.......
   dd020:	7f8d 000d 7f99 000d 7fa5 000d 7fad 000d     ................
   dd030:	7fb5 000d 7fc1 000d 7fc9 000d 7fd3 000d     ................
   dd040:	7fdd 000d 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.
   dd050:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   dd060:	2072 203d 6425 0000                         r = %d..

000dd068 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd070:	86b7 000d 86d9 000d 8ab7 000d 86e7 000d     ................
   dd080:	86b9 000d                                   ....

000dd084 <_ZTV9TCPClient>:
	...
   dd08c:	5379 000d 5409 000d 8635 000d 864f 000d     yS...T..5...O...
   dd09c:	8941 000d 87b3 000d 8785 000d 8679 000d     A...........y...
   dd0ac:	884b 000d 8add 000d 87e7 000d 89f5 000d     K...............
   dd0bc:	867b 000d 86ad 000d 8661 000d 86eb 000d     {.......a.......
   dd0cc:	8765 000d 5925 252d 2d6d 6425 2554 3a48     e...%Y-%m-%dT%H:
   dd0dc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000dd0ec <_ZTV3UDP>:
	...
   dd0f4:	5359 000d 541d 000d 8c0d 000d 8d35 000d     YS...T......5...
   dd104:	8c05 000d 8c25 000d 8c43 000d 8c5d 000d     ....%...C...]...
   dd114:	8c81 000d 8d19 000d 8e7f 000d 8dbd 000d     ................
   dd124:	90d9 000d 8bed 000d 8f69 000d 9061 000d     ........i...a...
   dd134:	8df5 000d 8f97 000d 8d5f 000d 8bfb 000d     ........_.......
   dd144:	8d9d 000d 8c01 000d 8c5f 000d fff0 ffff     ........_.......
   dd154:	0000 0000 8c79 000d                         ....y...

000dd15c <_ZTV11USARTSerial>:
	...
   dd164:	9171 000d 91dd 000d 91b5 000d 80d1 000d     q...............
   dd174:	9185 000d 91a1 000d 9193 000d 91af 000d     ................
   dd184:	9173 000d 9177 000d                         s...w...

000dd18c <_ZTV9USBSerial>:
	...
   dd194:	9271 000d 92d9 000d 92af 000d 80d1 000d     q...............
   dd1a4:	92a1 000d 9273 000d 9283 000d 92d3 000d     ....s...........
   dd1b4:	9293 000d 926d 000d                         ....m...

000dd1bc <_ZSt7nothrow>:
	...

000dd1bd <_ZTSSt19_Sp_make_shared_tag>:
   dd1bd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   dd1cd:	6572 5f64 6174 0067 0000                     red_tag....

000dd1d8 <_ZTISt19_Sp_make_shared_tag>:
   dd1d8:	d218 000d d1bd 000d                         ........

000dd1e0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   dd1e0:	d278 000d d1ec 000d d29c 000d               x...........

000dd1ec <_ZTSN10__cxxabiv117__class_type_infoE>:
   dd1ec:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   dd1fc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   dd20c:	0045 0000                                   E...

000dd210 <_ZTVN10__cxxabiv117__class_type_infoE>:
   dd210:	0000 0000 d1e0 000d 9835 000d 9849 000d     ........5...I...
   dd220:	99dd 000d 99dd 000d 98b3 000d 97f5 000d     ................
   dd230:	989b 000d 985d 000d 9829 000d               ....]...)...

000dd23c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   dd23c:	d278 000d d248 000d d1e0 000d               x...H.......

000dd248 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dd248:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   dd258:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   dd268:	666e 456f 0000 0000                         nfoE....

000dd270 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dd270:	0000 0000 d23c 000d 98dd 000d 98f1 000d     ....<...........
   dd280:	99dd 000d 99dd 000d 98b3 000d 97f5 000d     ................
   dd290:	99b1 000d 993d 000d 9905 000d               ....=.......

000dd29c <_ZTISt9type_info>:
   dd29c:	d218 000d d2a4 000d                         ........

000dd2a4 <_ZTSSt9type_info>:
   dd2a4:	7453 7439 7079 5f65 6e69 6f66 6900 696e     St9type_info.ini
   dd2b4:	7974 0000                                   ty..

000dd2b8 <fpi.7566>:
   dd2b8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dd2c8:	0000 0000                                   ....

000dd2cc <fpinan.7602>:
   dd2cc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dd2dc:	0000 0000                                   ....

000dd2e0 <tinytens>:
   dd2e0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dd2f0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dd300:	6f43 64ac 0628 1168                         Co.d(.h.

000dd308 <_ctype_>:
   dd308:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd318:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd328:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd338:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd348:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd358:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd368:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd378:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd388:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd40c <_C_numeric_locale>:
   dd40c:	cbcb 000d cc50 000d e2d0 2003 0043 4f50     ....P...... C.PO
   dd41c:	4953 0058                                   SIX.

000dd420 <__mprec_bigtens>:
   dd420:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dd430:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dd440:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dd448 <__mprec_tens>:
   dd448:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dd458:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dd468:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dd478:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dd488:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dd498:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dd4a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dd4b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dd4c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dd4d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dd4e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dd4f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dd508:	9db4 79d9 7843 44ea                         ...yCx.D

000dd510 <p05.7490>:
   dd510:	0005 0000 0019 0000 007d 0000               ........}...

000dd51c <link_const_variable_data_end>:
   dd51c:	000d49a9 	.word	0x000d49a9
   dd520:	000d5689 	.word	0x000d5689
   dd524:	000d5d3d 	.word	0x000d5d3d
   dd528:	000d6341 	.word	0x000d6341
   dd52c:	000d6a35 	.word	0x000d6a35
   dd530:	000d6a99 	.word	0x000d6a99
   dd534:	000d7249 	.word	0x000d7249
   dd538:	000d72d9 	.word	0x000d72d9
   dd53c:	000d78a9 	.word	0x000d78a9
   dd540:	000d7f55 	.word	0x000d7f55
   dd544:	000d80bd 	.word	0x000d80bd
   dd548:	000d834d 	.word	0x000d834d
   dd54c:	000d85f9 	.word	0x000d85f9
   dd550:	000d8bd9 	.word	0x000d8bd9

000dd554 <link_constructors_end>:
	...
