
/Users/talalagedeon/Desktop/particlePDP/shortproject/target/3.0.0/boron/shortproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000035e4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7600  000d7600  00007600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d7608  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e584  000d760c  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  2003e5ec  2003e5ec  0002e5ec  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d7674  000d7674  00027674  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d769c  000d769c  0002769c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001a4013  00000000  00000000  000276a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00018fc4  00000000  00000000  001cb6b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00037b51  00000000  00000000  001e4677  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002cb8  00000000  00000000  0021c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009690  00000000  00000000  0021ee80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003abb6  00000000  00000000  00228510  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00041b1c  00000000  00000000  002630c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00129c6c  00000000  00000000  002a4be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007f10  00000000  00000000  003ce850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ffdd 	bl	d6fec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ffe5 	bl	d7008 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e584 	.word	0x2003e584
   d4048:	000d760c 	.word	0x000d760c
   d404c:	2003e5ec 	.word	0x2003e5ec
   d4050:	2003e5ec 	.word	0x2003e5ec
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f87b 	bl	d6158 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d75d8 	.word	0x000d75d8
   d407c:	000d75fc 	.word	0x000d75fc

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b824 	b.w	d40cc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f885 	bl	d4194 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b825 	b.w	d60dc <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bf23 	b.w	d4edc <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bf21 	b.w	d4edc <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bf27 	b.w	d4eec <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b0:	b513      	push	{r0, r1, r4, lr}
   d40b2:	4b05      	ldr	r3, [pc, #20]	; (d40c8 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40b4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40b6:	f88d 3000 	strb.w	r3, [sp]
   d40ba:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40bc:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40be:	f001 f905 	bl	d52cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40c2:	4620      	mov	r0, r4
   d40c4:	b002      	add	sp, #8
   d40c6:	bd10      	pop	{r4, pc}
   d40c8:	2003e5f0 	.word	0x2003e5f0

000d40cc <setup>:
DHT dht(DHTPIN, DHTTYPE);

ChainableLED leds (RX, TX, 1);


void setup() {
   d40cc:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d40ce:	f001 ff7d 	bl	d5fcc <_Z16_fetch_usbserialv>
   d40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d6:	f001 ff6d 	bl	d5fb4 <_ZN9USBSerial5beginEl>
  Serial.println("DHT11 test");
   d40da:	f001 ff77 	bl	d5fcc <_Z16_fetch_usbserialv>
   d40de:	491b      	ldr	r1, [pc, #108]	; (d414c <setup+0x80>)
  
  dht.begin();
  leds.init();

  Wire.begin();
  SeeedOled.init();
   d40e0:	4c1b      	ldr	r4, [pc, #108]	; (d4150 <setup+0x84>)
  Serial.println("DHT11 test");
   d40e2:	f001 fc6c 	bl	d59be <_ZN5Print7printlnEPKc>
  dht.begin();
   d40e6:	481b      	ldr	r0, [pc, #108]	; (d4154 <setup+0x88>)
   d40e8:	f000 f94c 	bl	d4384 <_ZN3DHT5beginEv>
  leds.init();
   d40ec:	481a      	ldr	r0, [pc, #104]	; (d4158 <setup+0x8c>)
   d40ee:	f000 fc2f 	bl	d4950 <_ZN12ChainableLED4initEv>
  Wire.begin();
   d40f2:	f002 f8e3 	bl	d62bc <_Z19__fetch_global_Wirev>
   d40f6:	f001 fadb 	bl	d56b0 <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   d40fa:	4620      	mov	r0, r4
   d40fc:	f000 fc5e 	bl	d49bc <_ZN9SeeedOLED4initEv>

  SeeedOled.clearDisplay();
   d4100:	4620      	mov	r0, r4
   d4102:	f000 fcbd 	bl	d4a80 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d4106:	4620      	mov	r0, r4
   d4108:	f000 fce8 	bl	d4adc <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d410c:	4620      	mov	r0, r4
   d410e:	f000 fc67 	bl	d49e0 <_ZN9SeeedOLED11setPageModeEv>

  SeeedOled.setTextXY(2, 0);
   d4112:	2200      	movs	r2, #0
   d4114:	4620      	mov	r0, r4
   d4116:	2102      	movs	r1, #2
   d4118:	f000 fc6d 	bl	d49f6 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Particle");
   d411c:	4620      	mov	r0, r4
   d411e:	490f      	ldr	r1, [pc, #60]	; (d415c <setup+0x90>)
   d4120:	f000 fccf 	bl	d4ac2 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d4124:	2200      	movs	r2, #0
   d4126:	4620      	mov	r0, r4
   d4128:	2103      	movs	r1, #3
   d412a:	f000 fc64 	bl	d49f6 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Weather");
   d412e:	4620      	mov	r0, r4
   d4130:	490b      	ldr	r1, [pc, #44]	; (d4160 <setup+0x94>)
   d4132:	f000 fcc6 	bl	d4ac2 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d4136:	4620      	mov	r0, r4
   d4138:	2104      	movs	r1, #4
   d413a:	2200      	movs	r2, #0
   d413c:	f000 fc5b 	bl	d49f6 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Station");
   d4140:	4620      	mov	r0, r4
   d4142:	4908      	ldr	r1, [pc, #32]	; (d4164 <setup+0x98>)

}
   d4144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SeeedOled.putString("Station");
   d4148:	f000 bcbb 	b.w	d4ac2 <_ZN9SeeedOLED9putStringEPKc>
   d414c:	000d70e0 	.word	0x000d70e0
   d4150:	2003e618 	.word	0x2003e618
   d4154:	2003e5f4 	.word	0x2003e5f4
   d4158:	2003e608 	.word	0x2003e608
   d415c:	000d70eb 	.word	0x000d70eb
   d4160:	000d70f4 	.word	0x000d70f4
   d4164:	000d70fc 	.word	0x000d70fc

000d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4168:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d416a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d416c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d416e:	b17c      	cbz	r4, d4190 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4170:	6863      	ldr	r3, [r4, #4]
   d4172:	3b01      	subs	r3, #1
   d4174:	6063      	str	r3, [r4, #4]
   d4176:	b95b      	cbnz	r3, d4190 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4178:	6823      	ldr	r3, [r4, #0]
   d417a:	4620      	mov	r0, r4
   d417c:	689b      	ldr	r3, [r3, #8]
   d417e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4180:	68a3      	ldr	r3, [r4, #8]
   d4182:	3b01      	subs	r3, #1
   d4184:	60a3      	str	r3, [r4, #8]
   d4186:	b91b      	cbnz	r3, d4190 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4188:	6823      	ldr	r3, [r4, #0]
   d418a:	4620      	mov	r0, r4
   d418c:	68db      	ldr	r3, [r3, #12]
   d418e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4190:	4628      	mov	r0, r5
   d4192:	bd38      	pop	{r3, r4, r5, pc}

000d4194 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4194:	b500      	push	{lr}
   d4196:	ed2d 8b04 	vpush	{d8-d9}
  delay(50000);
   d419a:	f24c 3050 	movw	r0, #50000	; 0xc350
void loop() {
   d419e:	b089      	sub	sp, #36	; 0x24
  delay(50000);
   d41a0:	f000 fecc 	bl	d4f3c <delay>

  float h = dht.getHumidity();
   d41a4:	4842      	ldr	r0, [pc, #264]	; (d42b0 <loop+0x11c>)
   d41a6:	f000 fb1f 	bl	d47e8 <_ZN3DHT11getHumidityEv>
  float t = dht.getTempCelcius();
   d41aa:	4841      	ldr	r0, [pc, #260]	; (d42b0 <loop+0x11c>)
  float h = dht.getHumidity();
   d41ac:	eeb0 9a40 	vmov.f32	s18, s0
  float t = dht.getTempCelcius();
   d41b0:	f000 fada 	bl	d4768 <_ZN3DHT14getTempCelciusEv>
  float f = dht.getTempFarenheit();
   d41b4:	483e      	ldr	r0, [pc, #248]	; (d42b0 <loop+0x11c>)
  float t = dht.getTempCelcius();
   d41b6:	eef0 8a40 	vmov.f32	s17, s0
  float f = dht.getTempFarenheit();
   d41ba:	f000 fad7 	bl	d476c <_ZN3DHT16getTempFarenheitEv>

  if (isnan(h) || isnan(t) || isnan(f)){
   d41be:	eeb4 9a49 	vcmp.f32	s18, s18
   d41c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float f = dht.getTempFarenheit();
   d41c6:	eeb0 8a40 	vmov.f32	s16, s0
  if (isnan(h) || isnan(t) || isnan(f)){
   d41ca:	d609      	bvs.n	d41e0 <loop+0x4c>
   d41cc:	eef4 8a68 	vcmp.f32	s17, s17
   d41d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41d4:	d604      	bvs.n	d41e0 <loop+0x4c>
   d41d6:	eeb4 0a40 	vcmp.f32	s0, s0
   d41da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41de:	d709      	bvc.n	d41f4 <loop+0x60>
    Serial.println("Failed to read from DHT sensor");
   d41e0:	f001 fef4 	bl	d5fcc <_Z16_fetch_usbserialv>
   d41e4:	4933      	ldr	r1, [pc, #204]	; (d42b4 <loop+0x120>)
   d41e6:	f001 fbea 	bl	d59be <_ZN5Print7printlnEPKc>

  Particle.publish("tempC",String (t));
  Particle.publish("tempF", String (f));
  Particle.publish("humid", String (h));

   d41ea:	b009      	add	sp, #36	; 0x24
   d41ec:	ecbd 8b04 	vpop	{d8-d9}
   d41f0:	f85d fb04 	ldr.w	pc, [sp], #4
  if (f > 75.0){
   d41f4:	eddf 7a30 	vldr	s15, [pc, #192]	; d42b8 <loop+0x124>
   d41f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d41fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4200:	eef0 9a67 	vmov.f32	s19, s15
   d4204:	dd06      	ble.n	d4214 <loop+0x80>
leds.setColorRGB(0,255,0,0);
   d4206:	2300      	movs	r3, #0
   d4208:	482c      	ldr	r0, [pc, #176]	; (d42bc <loop+0x128>)
   d420a:	9300      	str	r3, [sp, #0]
   d420c:	22ff      	movs	r2, #255	; 0xff
   d420e:	4619      	mov	r1, r3
   d4210:	f000 fb56 	bl	d48c0 <_ZN12ChainableLED11setColorRGBEhhhh>
  if (f < 75.0){
   d4214:	eeb4 8ae9 	vcmpe.f32	s16, s19
   d4218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d421c:	d507      	bpl.n	d422e <loop+0x9a>
    leds.setColorRGB(0,0,0,255);
   d421e:	23ff      	movs	r3, #255	; 0xff
   d4220:	9300      	str	r3, [sp, #0]
   d4222:	2300      	movs	r3, #0
   d4224:	4825      	ldr	r0, [pc, #148]	; (d42bc <loop+0x128>)
   d4226:	461a      	mov	r2, r3
   d4228:	4619      	mov	r1, r3
   d422a:	f000 fb49 	bl	d48c0 <_ZN12ChainableLED11setColorRGBEhhhh>
  Serial.print("tempC");
   d422e:	f001 fecd 	bl	d5fcc <_Z16_fetch_usbserialv>
   d4232:	4923      	ldr	r1, [pc, #140]	; (d42c0 <loop+0x12c>)
   d4234:	f001 fbb0 	bl	d5998 <_ZN5Print5printEPKc>
  Serial.print(t);
   d4238:	f001 fec8 	bl	d5fcc <_Z16_fetch_usbserialv>
   d423c:	eeb0 0a68 	vmov.f32	s0, s17
   d4240:	2102      	movs	r1, #2
   d4242:	f001 fcad 	bl	d5ba0 <_ZN5Print5printEfi>
  Particle.publish("tempC",String (t));
   d4246:	eeb0 0a68 	vmov.f32	s0, s17
   d424a:	2106      	movs	r1, #6
   d424c:	a804      	add	r0, sp, #16
   d424e:	f001 fd90 	bl	d5d72 <_ZN6StringC1Efi>
   d4252:	9a04      	ldr	r2, [sp, #16]
   d4254:	491a      	ldr	r1, [pc, #104]	; (d42c0 <loop+0x12c>)
   d4256:	a802      	add	r0, sp, #8
   d4258:	f7ff ff2a 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d425c:	a803      	add	r0, sp, #12
   d425e:	f7ff ff83 	bl	d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4262:	a804      	add	r0, sp, #16
   d4264:	f001 fd28 	bl	d5cb8 <_ZN6StringD1Ev>
  Particle.publish("tempF", String (f));
   d4268:	eeb0 0a48 	vmov.f32	s0, s16
   d426c:	2106      	movs	r1, #6
   d426e:	a804      	add	r0, sp, #16
   d4270:	f001 fd7f 	bl	d5d72 <_ZN6StringC1Efi>
   d4274:	9a04      	ldr	r2, [sp, #16]
   d4276:	4913      	ldr	r1, [pc, #76]	; (d42c4 <loop+0x130>)
   d4278:	a802      	add	r0, sp, #8
   d427a:	f7ff ff19 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d427e:	a803      	add	r0, sp, #12
   d4280:	f7ff ff72 	bl	d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4284:	a804      	add	r0, sp, #16
   d4286:	f001 fd17 	bl	d5cb8 <_ZN6StringD1Ev>
  Particle.publish("humid", String (h));
   d428a:	eeb0 0a49 	vmov.f32	s0, s18
   d428e:	2106      	movs	r1, #6
   d4290:	a804      	add	r0, sp, #16
   d4292:	f001 fd6e 	bl	d5d72 <_ZN6StringC1Efi>
   d4296:	9a04      	ldr	r2, [sp, #16]
   d4298:	490b      	ldr	r1, [pc, #44]	; (d42c8 <loop+0x134>)
   d429a:	a802      	add	r0, sp, #8
   d429c:	f7ff ff08 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d42a0:	a803      	add	r0, sp, #12
   d42a2:	f7ff ff61 	bl	d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42a6:	a804      	add	r0, sp, #16
   d42a8:	f001 fd06 	bl	d5cb8 <_ZN6StringD1Ev>
   d42ac:	e79d      	b.n	d41ea <loop+0x56>
   d42ae:	bf00      	nop
   d42b0:	2003e5f4 	.word	0x2003e5f4
   d42b4:	000d7104 	.word	0x000d7104
   d42b8:	42960000 	.word	0x42960000
   d42bc:	2003e608 	.word	0x2003e608
   d42c0:	000d7123 	.word	0x000d7123
   d42c4:	000d7129 	.word	0x000d7129
   d42c8:	000d712f 	.word	0x000d712f

000d42cc <_GLOBAL__sub_I_dht>:
   d42cc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42ce:	4b0b      	ldr	r3, [pc, #44]	; (d42fc <_GLOBAL__sub_I_dht+0x30>)
ChainableLED leds (RX, TX, 1);
   d42d0:	4c0b      	ldr	r4, [pc, #44]	; (d4300 <_GLOBAL__sub_I_dht+0x34>)
DHT dht(DHTPIN, DHTTYPE);
   d42d2:	480c      	ldr	r0, [pc, #48]	; (d4304 <_GLOBAL__sub_I_dht+0x38>)
   d42d4:	2200      	movs	r2, #0
   d42d6:	701a      	strb	r2, [r3, #0]
   d42d8:	2113      	movs	r1, #19
   d42da:	2306      	movs	r3, #6
   d42dc:	220b      	movs	r2, #11
   d42de:	f000 f84a 	bl	d4376 <_ZN3DHTC1Ehhh>
ChainableLED leds (RX, TX, 1);
   d42e2:	2209      	movs	r2, #9
   d42e4:	210a      	movs	r1, #10
   d42e6:	4620      	mov	r0, r4
   d42e8:	2301      	movs	r3, #1
   d42ea:	f000 fa7f 	bl	d47ec <_ZN12ChainableLEDC1Ehhh>
   d42ee:	4620      	mov	r0, r4
   d42f0:	4a05      	ldr	r2, [pc, #20]	; (d4308 <_GLOBAL__sub_I_dht+0x3c>)
   d42f2:	4906      	ldr	r1, [pc, #24]	; (d430c <_GLOBAL__sub_I_dht+0x40>)
   d42f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
ChainableLED leds (RX, TX, 1);
   d42f8:	f002 b808 	b.w	d630c <__aeabi_atexit>
   d42fc:	2003e5f0 	.word	0x2003e5f0
   d4300:	2003e608 	.word	0x2003e608
   d4304:	2003e5f4 	.word	0x2003e5f4
   d4308:	2003e5ec 	.word	0x2003e5ec
   d430c:	000d4807 	.word	0x000d4807

000d4310 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4310:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4312:	6803      	ldr	r3, [r0, #0]
   d4314:	2b2f      	cmp	r3, #47	; 0x2f
{
   d4316:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4318:	d904      	bls.n	d4324 <nrf_gpio_pin_port_decode+0x14>
   d431a:	4a07      	ldr	r2, [pc, #28]	; (d4338 <nrf_gpio_pin_port_decode+0x28>)
   d431c:	2100      	movs	r1, #0
   d431e:	200a      	movs	r0, #10
   d4320:	f000 fd28 	bl	d4d74 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4324:	6823      	ldr	r3, [r4, #0]
   d4326:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4328:	bf83      	ittte	hi
   d432a:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d432e:	4803      	ldrhi	r0, [pc, #12]	; (d433c <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4330:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4332:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d4336:	bd10      	pop	{r4, pc}
   d4338:	000d4b15 	.word	0x000d4b15
   d433c:	50000300 	.word	0x50000300

000d4340 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4340:	b507      	push	{r0, r1, r2, lr}
   d4342:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4344:	a801      	add	r0, sp, #4
   d4346:	f7ff ffe3 	bl	d4310 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d434a:	9a01      	ldr	r2, [sp, #4]
   d434c:	2301      	movs	r3, #1
   d434e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4350:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d4354:	b003      	add	sp, #12
   d4356:	f85d fb04 	ldr.w	pc, [sp], #4

000d435a <nrf_gpio_pin_read>:
{
   d435a:	b507      	push	{r0, r1, r2, lr}
   d435c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d435e:	a801      	add	r0, sp, #4
   d4360:	f7ff ffd6 	bl	d4310 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4364:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d4366:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d436a:	40d8      	lsrs	r0, r3
}
   d436c:	f000 0001 	and.w	r0, r0, #1
   d4370:	b003      	add	sp, #12
   d4372:	f85d fb04 	ldr.w	pc, [sp], #4

000d4376 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4376:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4378:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d437a:	2301      	movs	r3, #1
	_pin = pin;
   d437c:	7181      	strb	r1, [r0, #6]
	_type = type;
   d437e:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d4380:	7403      	strb	r3, [r0, #16]
}
   d4382:	bd10      	pop	{r4, pc}

000d4384 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4388:	4605      	mov	r5, r0
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d438a:	4c1e      	ldr	r4, [pc, #120]	; (d4404 <_ZN3DHT5beginEv+0x80>)
// set up the pins!
	pinMode(_pin, INPUT);
   d438c:	7980      	ldrb	r0, [r0, #6]
   d438e:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4408 <_ZN3DHT5beginEv+0x84>
   d4392:	2100      	movs	r1, #0
   d4394:	f001 ff50 	bl	d6238 <pinMode>
	pinSetFast(_pin);
   d4398:	79ae      	ldrb	r6, [r5, #6]
   d439a:	7823      	ldrb	r3, [r4, #0]
   d439c:	f3bf 8f5b 	dmb	ish
   d43a0:	f013 0f01 	tst.w	r3, #1
   d43a4:	d10a      	bne.n	d43bc <_ZN3DHT5beginEv+0x38>
   d43a6:	4620      	mov	r0, r4
   d43a8:	f7ff fe79 	bl	d409e <__cxa_guard_acquire>
   d43ac:	b130      	cbz	r0, d43bc <_ZN3DHT5beginEv+0x38>
   d43ae:	f000 fbc1 	bl	d4b34 <HAL_Pin_Map>
   d43b2:	f8c8 0000 	str.w	r0, [r8]
   d43b6:	4620      	mov	r0, r4
   d43b8:	f7ff fe76 	bl	d40a8 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43bc:	f8d8 3000 	ldr.w	r3, [r8]
   d43c0:	0136      	lsls	r6, r6, #4
   d43c2:	5d9f      	ldrb	r7, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43c4:	7823      	ldrb	r3, [r4, #0]
   d43c6:	f3bf 8f5b 	dmb	ish
   d43ca:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43cc:	ea4f 1747 	mov.w	r7, r7, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d43d0:	d40a      	bmi.n	d43e8 <_ZN3DHT5beginEv+0x64>
   d43d2:	480c      	ldr	r0, [pc, #48]	; (d4404 <_ZN3DHT5beginEv+0x80>)
   d43d4:	f7ff fe63 	bl	d409e <__cxa_guard_acquire>
   d43d8:	b130      	cbz	r0, d43e8 <_ZN3DHT5beginEv+0x64>
   d43da:	f000 fbab 	bl	d4b34 <HAL_Pin_Map>
   d43de:	f8c8 0000 	str.w	r0, [r8]
   d43e2:	4808      	ldr	r0, [pc, #32]	; (d4404 <_ZN3DHT5beginEv+0x80>)
   d43e4:	f7ff fe60 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d43e8:	f8d8 3000 	ldr.w	r3, [r8]
   d43ec:	4433      	add	r3, r6
   d43ee:	785b      	ldrb	r3, [r3, #1]
   d43f0:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_pin_set(nrf_pin);
   d43f4:	ea43 0007 	orr.w	r0, r3, r7
   d43f8:	f7ff ffa2 	bl	d4340 <nrf_gpio_pin_set>
	_lastreadtime = 0;
   d43fc:	2300      	movs	r3, #0
   d43fe:	60eb      	str	r3, [r5, #12]
}
   d4400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4404:	2003e610 	.word	0x2003e610
   d4408:	2003e614 	.word	0x2003e614

000d440c <_ZN3DHT4readEv>:
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
   d440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4410:	4604      	mov	r4, r0
   d4412:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4414:	f000 fb86 	bl	d4b24 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d4418:	68e3      	ldr	r3, [r4, #12]
   d441a:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d441c:	bf84      	itt	hi
   d441e:	2300      	movhi	r3, #0
   d4420:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4422:	7c23      	ldrb	r3, [r4, #16]
   d4424:	b92b      	cbnz	r3, d4432 <_ZN3DHT4readEv+0x26>
   d4426:	68e3      	ldr	r3, [r4, #12]
   d4428:	1ac0      	subs	r0, r0, r3
   d442a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d442e:	f0c0 8160 	bcc.w	d46f2 <_ZN3DHT4readEv+0x2e6>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4432:	2500      	movs	r5, #0
   d4434:	7425      	strb	r5, [r4, #16]
   d4436:	f000 fb75 	bl	d4b24 <HAL_Timer_Get_Milli_Seconds>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d443a:	4eb0      	ldr	r6, [pc, #704]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d443c:	6025      	str	r5, [r4, #0]
   d443e:	7125      	strb	r5, [r4, #4]
	_lastreadtime = millis();
   d4440:	60e0      	str	r0, [r4, #12]
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
   d4442:	79a7      	ldrb	r7, [r4, #6]
   d4444:	7833      	ldrb	r3, [r6, #0]
   d4446:	4dae      	ldr	r5, [pc, #696]	; (d4700 <_ZN3DHT4readEv+0x2f4>)
   d4448:	f3bf 8f5b 	dmb	ish
   d444c:	f013 0f01 	tst.w	r3, #1
   d4450:	d109      	bne.n	d4466 <_ZN3DHT4readEv+0x5a>
   d4452:	4630      	mov	r0, r6
   d4454:	f7ff fe23 	bl	d409e <__cxa_guard_acquire>
   d4458:	b128      	cbz	r0, d4466 <_ZN3DHT4readEv+0x5a>
   d445a:	f000 fb6b 	bl	d4b34 <HAL_Pin_Map>
   d445e:	6028      	str	r0, [r5, #0]
   d4460:	4630      	mov	r0, r6
   d4462:	f7ff fe21 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4466:	682b      	ldr	r3, [r5, #0]
   d4468:	013f      	lsls	r7, r7, #4
   d446a:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d446e:	7833      	ldrb	r3, [r6, #0]
   d4470:	f3bf 8f5b 	dmb	ish
   d4474:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4476:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d447a:	d409      	bmi.n	d4490 <_ZN3DHT4readEv+0x84>
   d447c:	489f      	ldr	r0, [pc, #636]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d447e:	f7ff fe0e 	bl	d409e <__cxa_guard_acquire>
   d4482:	b128      	cbz	r0, d4490 <_ZN3DHT4readEv+0x84>
   d4484:	f000 fb56 	bl	d4b34 <HAL_Pin_Map>
   d4488:	6028      	str	r0, [r5, #0]
   d448a:	489c      	ldr	r0, [pc, #624]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d448c:	f7ff fe0c 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4490:	682b      	ldr	r3, [r5, #0]
   d4492:	441f      	add	r7, r3
   d4494:	7878      	ldrb	r0, [r7, #1]
   d4496:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d449a:	ea40 0008 	orr.w	r0, r0, r8
   d449e:	f7ff ff4f 	bl	d4340 <nrf_gpio_pin_set>
	delay(250);
   d44a2:	20fa      	movs	r0, #250	; 0xfa
   d44a4:	f000 fd4a 	bl	d4f3c <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d44a8:	79a0      	ldrb	r0, [r4, #6]
   d44aa:	2101      	movs	r1, #1
   d44ac:	f001 fec4 	bl	d6238 <pinMode>
	pinResetFast(_pin);
   d44b0:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44b2:	7833      	ldrb	r3, [r6, #0]
   d44b4:	f3bf 8f5b 	dmb	ish
   d44b8:	07da      	lsls	r2, r3, #31
   d44ba:	d409      	bmi.n	d44d0 <_ZN3DHT4readEv+0xc4>
   d44bc:	488f      	ldr	r0, [pc, #572]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d44be:	f7ff fdee 	bl	d409e <__cxa_guard_acquire>
   d44c2:	b128      	cbz	r0, d44d0 <_ZN3DHT4readEv+0xc4>
   d44c4:	f000 fb36 	bl	d4b34 <HAL_Pin_Map>
   d44c8:	6028      	str	r0, [r5, #0]
   d44ca:	488c      	ldr	r0, [pc, #560]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d44cc:	f7ff fdec 	bl	d40a8 <__cxa_guard_release>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44d0:	682b      	ldr	r3, [r5, #0]
   d44d2:	013f      	lsls	r7, r7, #4
   d44d4:	5ddb      	ldrb	r3, [r3, r7]
   d44d6:	ea4f 1843 	mov.w	r8, r3, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44da:	7833      	ldrb	r3, [r6, #0]
   d44dc:	f3bf 8f5b 	dmb	ish
   d44e0:	07db      	lsls	r3, r3, #31
   d44e2:	d409      	bmi.n	d44f8 <_ZN3DHT4readEv+0xec>
   d44e4:	4885      	ldr	r0, [pc, #532]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d44e6:	f7ff fdda 	bl	d409e <__cxa_guard_acquire>
   d44ea:	b128      	cbz	r0, d44f8 <_ZN3DHT4readEv+0xec>
   d44ec:	f000 fb22 	bl	d4b34 <HAL_Pin_Map>
   d44f0:	6028      	str	r0, [r5, #0]
   d44f2:	4882      	ldr	r0, [pc, #520]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d44f4:	f7ff fdd8 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44f8:	682b      	ldr	r3, [r5, #0]
   d44fa:	441f      	add	r7, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44fc:	a803      	add	r0, sp, #12
   d44fe:	787b      	ldrb	r3, [r7, #1]
   d4500:	f003 031f 	and.w	r3, r3, #31
   d4504:	ea43 0308 	orr.w	r3, r3, r8
   d4508:	9303      	str	r3, [sp, #12]
   d450a:	f7ff ff01 	bl	d4310 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d450e:	9a03      	ldr	r2, [sp, #12]
   d4510:	2301      	movs	r3, #1
   d4512:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4514:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	delay(20);
   d4518:	2014      	movs	r0, #20
   d451a:	f000 fd0f 	bl	d4f3c <delay>
	noInterrupts();
   d451e:	f001 f8db 	bl	d56d8 <_Z12noInterruptsv>
	pinSetFast(_pin);
   d4522:	79a7      	ldrb	r7, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4524:	7833      	ldrb	r3, [r6, #0]
   d4526:	f3bf 8f5b 	dmb	ish
   d452a:	07d8      	lsls	r0, r3, #31
   d452c:	d409      	bmi.n	d4542 <_ZN3DHT4readEv+0x136>
   d452e:	4873      	ldr	r0, [pc, #460]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d4530:	f7ff fdb5 	bl	d409e <__cxa_guard_acquire>
   d4534:	b128      	cbz	r0, d4542 <_ZN3DHT4readEv+0x136>
   d4536:	f000 fafd 	bl	d4b34 <HAL_Pin_Map>
   d453a:	6028      	str	r0, [r5, #0]
   d453c:	486f      	ldr	r0, [pc, #444]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d453e:	f7ff fdb3 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4542:	682b      	ldr	r3, [r5, #0]
   d4544:	013f      	lsls	r7, r7, #4
   d4546:	f813 8007 	ldrb.w	r8, [r3, r7]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d454a:	7833      	ldrb	r3, [r6, #0]
   d454c:	f3bf 8f5b 	dmb	ish
   d4550:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4552:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4556:	d409      	bmi.n	d456c <_ZN3DHT4readEv+0x160>
   d4558:	4868      	ldr	r0, [pc, #416]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d455a:	f7ff fda0 	bl	d409e <__cxa_guard_acquire>
   d455e:	b128      	cbz	r0, d456c <_ZN3DHT4readEv+0x160>
   d4560:	f000 fae8 	bl	d4b34 <HAL_Pin_Map>
   d4564:	6028      	str	r0, [r5, #0]
   d4566:	4865      	ldr	r0, [pc, #404]	; (d46fc <_ZN3DHT4readEv+0x2f0>)
   d4568:	f7ff fd9e 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d456c:	682b      	ldr	r3, [r5, #0]
   d456e:	441f      	add	r7, r3
   d4570:	7878      	ldrb	r0, [r7, #1]
   d4572:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4576:	ea40 0008 	orr.w	r0, r0, r8
   d457a:	f7ff fee1 	bl	d4340 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d457e:	2028      	movs	r0, #40	; 0x28
   d4580:	f000 fac8 	bl	d4b14 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4584:	79a0      	ldrb	r0, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4586:	f8df 8174 	ldr.w	r8, [pc, #372]	; d46fc <_ZN3DHT4readEv+0x2f0>
   d458a:	2100      	movs	r1, #0
   d458c:	f001 fe54 	bl	d6238 <pinMode>

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d4590:	2700      	movs	r7, #0
	uint8_t laststate = HIGH;
   d4592:	2301      	movs	r3, #1
	uint8_t j = 0, i;
   d4594:	46ba      	mov	sl, r7
	uint8_t laststate = HIGH;
   d4596:	9300      	str	r3, [sp, #0]
		counter = 0;
   d4598:	f04f 0900 	mov.w	r9, #0
		while (pinReadFast(_pin) == laststate) {
   d459c:	f894 b006 	ldrb.w	fp, [r4, #6]
   d45a0:	7833      	ldrb	r3, [r6, #0]
   d45a2:	f3bf 8f5b 	dmb	ish
   d45a6:	07da      	lsls	r2, r3, #31
   d45a8:	d409      	bmi.n	d45be <_ZN3DHT4readEv+0x1b2>
   d45aa:	4640      	mov	r0, r8
   d45ac:	f7ff fd77 	bl	d409e <__cxa_guard_acquire>
   d45b0:	b128      	cbz	r0, d45be <_ZN3DHT4readEv+0x1b2>
   d45b2:	f000 fabf 	bl	d4b34 <HAL_Pin_Map>
   d45b6:	6028      	str	r0, [r5, #0]
   d45b8:	4640      	mov	r0, r8
   d45ba:	f7ff fd75 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45be:	682b      	ldr	r3, [r5, #0]
   d45c0:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d45c4:	f813 300b 	ldrb.w	r3, [r3, fp]
   d45c8:	015b      	lsls	r3, r3, #5
   d45ca:	9301      	str	r3, [sp, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45cc:	7833      	ldrb	r3, [r6, #0]
   d45ce:	f3bf 8f5b 	dmb	ish
   d45d2:	07db      	lsls	r3, r3, #31
   d45d4:	d409      	bmi.n	d45ea <_ZN3DHT4readEv+0x1de>
   d45d6:	4640      	mov	r0, r8
   d45d8:	f7ff fd61 	bl	d409e <__cxa_guard_acquire>
   d45dc:	b128      	cbz	r0, d45ea <_ZN3DHT4readEv+0x1de>
   d45de:	f000 faa9 	bl	d4b34 <HAL_Pin_Map>
   d45e2:	6028      	str	r0, [r5, #0]
   d45e4:	4640      	mov	r0, r8
   d45e6:	f7ff fd5f 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45ea:	682b      	ldr	r3, [r5, #0]
   d45ec:	445b      	add	r3, fp
   d45ee:	f893 b001 	ldrb.w	fp, [r3, #1]
   d45f2:	9b01      	ldr	r3, [sp, #4]
   d45f4:	f00b 0b1f 	and.w	fp, fp, #31
   d45f8:	ea4b 0b03 	orr.w	fp, fp, r3
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d45fc:	4658      	mov	r0, fp
   d45fe:	f7ff feac 	bl	d435a <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4602:	4658      	mov	r0, fp
   d4604:	f7ff fea9 	bl	d435a <nrf_gpio_pin_read>
   d4608:	9b00      	ldr	r3, [sp, #0]
   d460a:	4283      	cmp	r3, r0
   d460c:	d109      	bne.n	d4622 <_ZN3DHT4readEv+0x216>
			counter++;
   d460e:	f109 0901 	add.w	r9, r9, #1
   d4612:	fa5f f989 	uxtb.w	r9, r9
   d4616:	2001      	movs	r0, #1
   d4618:	f000 fa7c 	bl	d4b14 <HAL_Delay_Microseconds>
			delayMicroseconds(1);
			if (counter == 255) {
   d461c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   d4620:	d1bc      	bne.n	d459c <_ZN3DHT4readEv+0x190>
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4622:	f894 b006 	ldrb.w	fp, [r4, #6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4626:	7833      	ldrb	r3, [r6, #0]
   d4628:	f3bf 8f5b 	dmb	ish
   d462c:	07d8      	lsls	r0, r3, #31
   d462e:	d409      	bmi.n	d4644 <_ZN3DHT4readEv+0x238>
   d4630:	4640      	mov	r0, r8
   d4632:	f7ff fd34 	bl	d409e <__cxa_guard_acquire>
   d4636:	b128      	cbz	r0, d4644 <_ZN3DHT4readEv+0x238>
   d4638:	f000 fa7c 	bl	d4b34 <HAL_Pin_Map>
   d463c:	6028      	str	r0, [r5, #0]
   d463e:	4640      	mov	r0, r8
   d4640:	f7ff fd32 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4644:	682b      	ldr	r3, [r5, #0]
   d4646:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   d464a:	f813 300b 	ldrb.w	r3, [r3, fp]
   d464e:	015b      	lsls	r3, r3, #5
   d4650:	9300      	str	r3, [sp, #0]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4652:	7833      	ldrb	r3, [r6, #0]
   d4654:	f3bf 8f5b 	dmb	ish
   d4658:	07d9      	lsls	r1, r3, #31
   d465a:	d409      	bmi.n	d4670 <_ZN3DHT4readEv+0x264>
   d465c:	4640      	mov	r0, r8
   d465e:	f7ff fd1e 	bl	d409e <__cxa_guard_acquire>
   d4662:	b128      	cbz	r0, d4670 <_ZN3DHT4readEv+0x264>
   d4664:	f000 fa66 	bl	d4b34 <HAL_Pin_Map>
   d4668:	6028      	str	r0, [r5, #0]
   d466a:	4640      	mov	r0, r8
   d466c:	f7ff fd1c 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4670:	682b      	ldr	r3, [r5, #0]
   d4672:	445b      	add	r3, fp
   d4674:	f893 b001 	ldrb.w	fp, [r3, #1]
   d4678:	9b00      	ldr	r3, [sp, #0]
   d467a:	f00b 0b1f 	and.w	fp, fp, #31
   d467e:	ea4b 0b03 	orr.w	fp, fp, r3
    (void)nrf_gpio_pin_read(nrf_pin);
   d4682:	4658      	mov	r0, fp
   d4684:	f7ff fe69 	bl	d435a <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4688:	4658      	mov	r0, fp
   d468a:	f7ff fe66 	bl	d435a <nrf_gpio_pin_read>

		if (counter == 255) break;
   d468e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = pinReadFast(_pin);
   d4692:	b2c3      	uxtb	r3, r0
   d4694:	9300      	str	r3, [sp, #0]
		if (counter == 255) break;
   d4696:	d018      	beq.n	d46ca <_ZN3DHT4readEv+0x2be>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d4698:	2f03      	cmp	r7, #3
   d469a:	d911      	bls.n	d46c0 <_ZN3DHT4readEv+0x2b4>
   d469c:	07fa      	lsls	r2, r7, #31
   d469e:	d40f      	bmi.n	d46c0 <_ZN3DHT4readEv+0x2b4>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d46a0:	ea4f 02da 	mov.w	r2, sl, lsr #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d46a4:	f10a 0a01 	add.w	sl, sl, #1
			data[j/8] <<= 1;
   d46a8:	5ca3      	ldrb	r3, [r4, r2]
   d46aa:	005b      	lsls	r3, r3, #1
   d46ac:	b2db      	uxtb	r3, r3
   d46ae:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d46b0:	7a21      	ldrb	r1, [r4, #8]
   d46b2:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d46b4:	bf3c      	itt	cc
   d46b6:	f043 0301 	orrcc.w	r3, r3, #1
   d46ba:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d46bc:	fa5f fa8a 	uxtb.w	sl, sl
	for ( i=0; i< MAXTIMINGS; i++) {
   d46c0:	3701      	adds	r7, #1
   d46c2:	b2ff      	uxtb	r7, r7
   d46c4:	2f55      	cmp	r7, #85	; 0x55
   d46c6:	f47f af67 	bne.w	d4598 <_ZN3DHT4readEv+0x18c>
		}
	}

	interrupts();
   d46ca:	f001 f807 	bl	d56dc <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d46ce:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
   d46d2:	d910      	bls.n	d46f6 <_ZN3DHT4readEv+0x2ea>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   d46d4:	7863      	ldrb	r3, [r4, #1]
   d46d6:	7820      	ldrb	r0, [r4, #0]
   d46d8:	4418      	add	r0, r3
   d46da:	78a3      	ldrb	r3, [r4, #2]
   d46dc:	4418      	add	r0, r3
   d46de:	78e3      	ldrb	r3, [r4, #3]
   d46e0:	4418      	add	r0, r3
   d46e2:	7923      	ldrb	r3, [r4, #4]
   d46e4:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   d46e6:	1ac3      	subs	r3, r0, r3
   d46e8:	4258      	negs	r0, r3
   d46ea:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   d46ec:	b005      	add	sp, #20
   d46ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true; // return last correct measurement
   d46f2:	2001      	movs	r0, #1
   d46f4:	e7fa      	b.n	d46ec <_ZN3DHT4readEv+0x2e0>
	return false;
   d46f6:	2000      	movs	r0, #0
   d46f8:	e7f8      	b.n	d46ec <_ZN3DHT4readEv+0x2e0>
   d46fa:	bf00      	nop
   d46fc:	2003e610 	.word	0x2003e610
   d4700:	2003e614 	.word	0x2003e614

000d4704 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   d4704:	b510      	push	{r4, lr}
   d4706:	4604      	mov	r4, r0
	if (read()) {
   d4708:	f7ff fe80 	bl	d440c <_ZN3DHT4readEv>
   d470c:	b320      	cbz	r0, d4758 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   d470e:	79e3      	ldrb	r3, [r4, #7]
   d4710:	2b0b      	cmp	r3, #11
   d4712:	d01b      	beq.n	d474c <_ZN3DHT15readTemperatureEv+0x48>
   d4714:	3b15      	subs	r3, #21
   d4716:	2b01      	cmp	r3, #1
   d4718:	d81e      	bhi.n	d4758 <_ZN3DHT15readTemperatureEv+0x54>
				f = data[2] & 0x7F;
   d471a:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   d471c:	eddf 6a10 	vldr	s13, [pc, #64]	; d4760 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   d4720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4724:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   d4728:	78e2      	ldrb	r2, [r4, #3]
   d472a:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   d472e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   d4732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   d4736:	061b      	lsls	r3, r3, #24
				f += data[3];
   d4738:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d473c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4740:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d4744:	d507      	bpl.n	d4756 <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   d4746:	eeb1 0a40 	vneg.f32	s0, s0
   d474a:	e004      	b.n	d4756 <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   d474c:	78a3      	ldrb	r3, [r4, #2]
   d474e:	ee00 3a10 	vmov	s0, r3
   d4752:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4756:	bd10      	pop	{r4, pc}
		switch (_type) {
   d4758:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4764 <_ZN3DHT15readTemperatureEv+0x60>
   d475c:	e7fb      	b.n	d4756 <_ZN3DHT15readTemperatureEv+0x52>
   d475e:	bf00      	nop
   d4760:	43800000 	.word	0x43800000
   d4764:	7fc00000 	.word	0x7fc00000

000d4768 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d4768:	f7ff bfcc 	b.w	d4704 <_ZN3DHT15readTemperatureEv>

000d476c <_ZN3DHT16getTempFarenheitEv>:
float DHT::getTempFarenheit() {
   d476c:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d476e:	f7ff ffc9 	bl	d4704 <_ZN3DHT15readTemperatureEv>
	return c * 9 / 5 + 32;
   d4772:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4776:	ee20 0a27 	vmul.f32	s0, s0, s15
   d477a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d477e:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d4782:	ed9f 0a02 	vldr	s0, [pc, #8]	; d478c <_ZN3DHT16getTempFarenheitEv+0x20>
   d4786:	ee37 0a00 	vadd.f32	s0, s14, s0
   d478a:	bd08      	pop	{r3, pc}
   d478c:	42000000 	.word	0x42000000

000d4790 <_ZN3DHT12readHumidityEv>:
float DHT::readHumidity(void) {
   d4790:	b510      	push	{r4, lr}
   d4792:	4604      	mov	r4, r0
	if (read()) {
   d4794:	f7ff fe3a 	bl	d440c <_ZN3DHT4readEv>
   d4798:	b1f0      	cbz	r0, d47d8 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type) {
   d479a:	79e3      	ldrb	r3, [r4, #7]
   d479c:	2b0b      	cmp	r3, #11
   d479e:	d015      	beq.n	d47cc <_ZN3DHT12readHumidityEv+0x3c>
   d47a0:	3b15      	subs	r3, #21
   d47a2:	2b01      	cmp	r3, #1
   d47a4:	d818      	bhi.n	d47d8 <_ZN3DHT12readHumidityEv+0x48>
				f = data[0];
   d47a6:	7823      	ldrb	r3, [r4, #0]
				f += data[1];
   d47a8:	eddf 6a0d 	vldr	s13, [pc, #52]	; d47e0 <_ZN3DHT12readHumidityEv+0x50>
				f = data[0];
   d47ac:	ee07 3a10 	vmov	s14, r3
				f += data[1];
   d47b0:	7863      	ldrb	r3, [r4, #1]
   d47b2:	ee07 3a90 	vmov	s15, r3
				f = data[0];
   d47b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f += data[1];
   d47ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d47be:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d47c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d47c6:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d47ca:	bd10      	pop	{r4, pc}
				f = data[0];
   d47cc:	7823      	ldrb	r3, [r4, #0]
   d47ce:	ee00 3a10 	vmov	s0, r3
   d47d2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d47d6:	e7f8      	b.n	d47ca <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type) {
   d47d8:	ed9f 0a02 	vldr	s0, [pc, #8]	; d47e4 <_ZN3DHT12readHumidityEv+0x54>
   d47dc:	e7f5      	b.n	d47ca <_ZN3DHT12readHumidityEv+0x3a>
   d47de:	bf00      	nop
   d47e0:	43800000 	.word	0x43800000
   d47e4:	7fc00000 	.word	0x7fc00000

000d47e8 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d47e8:	f7ff bfd2 	b.w	d4790 <_ZN3DHT12readHumidityEv>

000d47ec <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   d47ec:	b510      	push	{r4, lr}
   d47ee:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   d47f0:	7001      	strb	r1, [r0, #0]
   d47f2:	7042      	strb	r2, [r0, #1]
   d47f4:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   d47f6:	2101      	movs	r1, #1
   d47f8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d47fc:	f002 fbe0 	bl	d6fc0 <calloc>
   d4800:	6060      	str	r0, [r4, #4]
}
   d4802:	4620      	mov	r0, r4
   d4804:	bd10      	pop	{r4, pc}

000d4806 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   d4806:	b510      	push	{r4, lr}
   d4808:	4604      	mov	r4, r0
{
    free(_led_state);
   d480a:	6840      	ldr	r0, [r0, #4]
   d480c:	f000 fb6e 	bl	d4eec <free>
}
   d4810:	4620      	mov	r0, r4
   d4812:	bd10      	pop	{r4, pc}

000d4814 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   d4814:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   d4816:	2100      	movs	r1, #0
{
   d4818:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   d481a:	7800      	ldrb	r0, [r0, #0]
   d481c:	f001 fd1d 	bl	d625a <digitalWrite>
   d4820:	2014      	movs	r0, #20
   d4822:	f000 f977 	bl	d4b14 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   d4826:	7820      	ldrb	r0, [r4, #0]
   d4828:	2101      	movs	r1, #1
   d482a:	f001 fd16 	bl	d625a <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   d482e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4832:	2014      	movs	r0, #20
   d4834:	f000 b96e 	b.w	d4b14 <HAL_Delay_Microseconds>

000d4838 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   d4838:	b570      	push	{r4, r5, r6, lr}
   d483a:	4606      	mov	r6, r0
   d483c:	460c      	mov	r4, r1
   d483e:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   d4840:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   d4842:	bf4c      	ite	mi
   d4844:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   d4846:	2100      	movpl	r1, #0
   d4848:	7870      	ldrb	r0, [r6, #1]
   d484a:	f001 fd06 	bl	d625a <digitalWrite>
        clk();
   d484e:	3d01      	subs	r5, #1
   d4850:	4630      	mov	r0, r6
   d4852:	f7ff ffdf 	bl	d4814 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   d4856:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   d4858:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   d485c:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   d485e:	d1ef      	bne.n	d4840 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   d4860:	bd70      	pop	{r4, r5, r6, pc}

000d4862 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   d4862:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d4864:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   d4868:	461e      	mov	r6, r3
   d486a:	460c      	mov	r4, r1
   d486c:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   d486e:	bf14      	ite	ne
   d4870:	21c0      	movne	r1, #192	; 0xc0
   d4872:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   d4874:	0673      	lsls	r3, r6, #25
   d4876:	bf58      	it	pl
   d4878:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   d487c:	062a      	lsls	r2, r5, #24
   d487e:	bf58      	it	pl
   d4880:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   d4884:	066b      	lsls	r3, r5, #25
   d4886:	bf58      	it	pl
   d4888:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   d488c:	0622      	lsls	r2, r4, #24
   d488e:	bf58      	it	pl
   d4890:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   d4894:	0663      	lsls	r3, r4, #25
   d4896:	bf58      	it	pl
   d4898:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   d489c:	9001      	str	r0, [sp, #4]
   d489e:	f7ff ffcb 	bl	d4838 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   d48a2:	9801      	ldr	r0, [sp, #4]
   d48a4:	4631      	mov	r1, r6
   d48a6:	f7ff ffc7 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   d48aa:	9801      	ldr	r0, [sp, #4]
   d48ac:	4629      	mov	r1, r5
   d48ae:	f7ff ffc3 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   d48b2:	9801      	ldr	r0, [sp, #4]
   d48b4:	4621      	mov	r1, r4
}
   d48b6:	b002      	add	sp, #8
   d48b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   d48bc:	f7ff bfbc 	b.w	d4838 <_ZN12ChainableLED8sendByteEh>

000d48c0 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   d48c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d48c4:	4604      	mov	r4, r0
   d48c6:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   d48c8:	2100      	movs	r1, #0
{
   d48ca:	4690      	mov	r8, r2
   d48cc:	4699      	mov	r9, r3
   d48ce:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   d48d2:	f7ff ffb1 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d48d6:	2100      	movs	r1, #0
   d48d8:	4620      	mov	r0, r4
   d48da:	f7ff ffad 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d48de:	2100      	movs	r1, #0
   d48e0:	4620      	mov	r0, r4
   d48e2:	f7ff ffa9 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d48e6:	2100      	movs	r1, #0
   d48e8:	4620      	mov	r0, r4
   d48ea:	f7ff ffa5 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
   d48ee:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   d48f0:	78a3      	ldrb	r3, [r4, #2]
   d48f2:	b2f5      	uxtb	r5, r6
   d48f4:	42ab      	cmp	r3, r5
   d48f6:	d919      	bls.n	d492c <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
   d48f8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   d48fc:	42af      	cmp	r7, r5
   d48fe:	f100 0201 	add.w	r2, r0, #1
   d4902:	f100 0302 	add.w	r3, r0, #2
   d4906:	d108      	bne.n	d491a <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
        {
            _led_state[i*3 + _CL_RED] = red;
   d4908:	6861      	ldr	r1, [r4, #4]
   d490a:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   d490e:	6861      	ldr	r1, [r4, #4]
   d4910:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   d4914:	6861      	ldr	r1, [r4, #4]
   d4916:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   d491a:	6861      	ldr	r1, [r4, #4]
   d491c:	5ccb      	ldrb	r3, [r1, r3]
   d491e:	5c8a      	ldrb	r2, [r1, r2]
   d4920:	5c09      	ldrb	r1, [r1, r0]
   d4922:	4620      	mov	r0, r4
   d4924:	f7ff ff9d 	bl	d4862 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   d4928:	3601      	adds	r6, #1
   d492a:	e7e1      	b.n	d48f0 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   d492c:	4620      	mov	r0, r4
   d492e:	2100      	movs	r1, #0
   d4930:	f7ff ff82 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4934:	4620      	mov	r0, r4
   d4936:	2100      	movs	r1, #0
   d4938:	f7ff ff7e 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d493c:	4620      	mov	r0, r4
   d493e:	2100      	movs	r1, #0
   d4940:	f7ff ff7a 	bl	d4838 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   d4944:	4620      	mov	r0, r4
   d4946:	2100      	movs	r1, #0
}
   d4948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   d494c:	f7ff bf74 	b.w	d4838 <_ZN12ChainableLED8sendByteEh>

000d4950 <_ZN12ChainableLED4initEv>:
{
   d4950:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4952:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   d4954:	2101      	movs	r1, #1
   d4956:	7800      	ldrb	r0, [r0, #0]
   d4958:	f001 fc6e 	bl	d6238 <pinMode>
    pinMode(_data_pin, OUTPUT);
   d495c:	7860      	ldrb	r0, [r4, #1]
   d495e:	2101      	movs	r1, #1
   d4960:	f001 fc6a 	bl	d6238 <pinMode>
   d4964:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   d4966:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   d4968:	78a3      	ldrb	r3, [r4, #2]
   d496a:	b2e9      	uxtb	r1, r5
   d496c:	428b      	cmp	r3, r1
   d496e:	d907      	bls.n	d4980 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   d4970:	2300      	movs	r3, #0
   d4972:	9600      	str	r6, [sp, #0]
   d4974:	461a      	mov	r2, r3
   d4976:	4620      	mov	r0, r4
   d4978:	f7ff ffa2 	bl	d48c0 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   d497c:	3501      	adds	r5, #1
   d497e:	e7f3      	b.n	d4968 <_ZN12ChainableLED4initEv+0x18>
}
   d4980:	b002      	add	sp, #8
   d4982:	bd70      	pop	{r4, r5, r6, pc}

000d4984 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4984:	6803      	ldr	r3, [r0, #0]
   d4986:	b2c9      	uxtb	r1, r1
   d4988:	689b      	ldr	r3, [r3, #8]
   d498a:	4718      	bx	r3

000d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>:
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
    delay(5);
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
   d498c:	b510      	push	{r4, lr}
   d498e:	4604      	mov	r4, r0
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4990:	f001 fc94 	bl	d62bc <_Z19__fetch_global_Wirev>
   d4994:	213c      	movs	r1, #60	; 0x3c
   d4996:	f000 fe95 	bl	d56c4 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
  Wire.write(SeeedOLED_Command_Mode);	     // Set OLED Command mode
   d499a:	f001 fc8f 	bl	d62bc <_Z19__fetch_global_Wirev>
   d499e:	2180      	movs	r1, #128	; 0x80
   d49a0:	f7ff fff0 	bl	d4984 <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d49a4:	f001 fc8a 	bl	d62bc <_Z19__fetch_global_Wirev>
   d49a8:	6803      	ldr	r3, [r0, #0]
   d49aa:	4621      	mov	r1, r4
   d49ac:	689b      	ldr	r3, [r3, #8]
   d49ae:	4798      	blx	r3
#else
  Wire.send(SeeedOLED_Command_Mode);	     // Set OLED Command mode
  Wire.send(command);
#endif
  Wire.endTransmission();    		     // End I2C communication
   d49b0:	f001 fc84 	bl	d62bc <_Z19__fetch_global_Wirev>
}
   d49b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission();    		     // End I2C communication
   d49b8:	f000 be8b 	b.w	d56d2 <_ZN7TwoWire15endTransmissionEv>

000d49bc <_ZN9SeeedOLED4initEv>:
{
   d49bc:	b508      	push	{r3, lr}
    sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d49be:	20ae      	movs	r0, #174	; 0xae
   d49c0:	f7ff ffe4 	bl	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d49c4:	2005      	movs	r0, #5
   d49c6:	f000 fab9 	bl	d4f3c <delay>
    sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d49ca:	20af      	movs	r0, #175	; 0xaf
   d49cc:	f7ff ffde 	bl	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    delay(5);
   d49d0:	2005      	movs	r0, #5
   d49d2:	f000 fab3 	bl	d4f3c <delay>
}
   d49d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(SeeedOLED_Normal_Display_Cmd);  //Set Normal Display (default)
   d49da:	20a6      	movs	r0, #166	; 0xa6
   d49dc:	f7ff bfd6 	b.w	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d49e0 <_ZN9SeeedOLED11setPageModeEv>:
    sendCommand(0x20); 			//set addressing mode
    sendCommand(0x00); 			//set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d49e0:	b508      	push	{r3, lr}
    addressingMode = PAGE_MODE;
   d49e2:	2301      	movs	r3, #1
   d49e4:	7003      	strb	r3, [r0, #0]
    sendCommand(0x20); 			//set addressing mode
   d49e6:	2020      	movs	r0, #32
   d49e8:	f7ff ffd0 	bl	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x02); 			//set page addressing mode
}
   d49ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendCommand(0x02); 			//set page addressing mode
   d49f0:	2002      	movs	r0, #2
   d49f2:	f7ff bfcb 	b.w	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d49f6 <_ZN9SeeedOLED9setTextXYEhh>:


void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d49f6:	b510      	push	{r4, lr}
    sendCommand(0xB0 + Row); 			//set page address
   d49f8:	3950      	subs	r1, #80	; 0x50
{
   d49fa:	4614      	mov	r4, r2
    sendCommand(0xB0 + Row); 			//set page address
   d49fc:	b2c8      	uxtb	r0, r1
   d49fe:	f7ff ffc5 	bl	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x00 + (8*Column & 0x0F)); 	//set column lower address
   d4a02:	00e0      	lsls	r0, r4, #3
   d4a04:	f000 0008 	and.w	r0, r0, #8
   d4a08:	f7ff ffc0 	bl	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4a0c:	f3c4 0043 	ubfx	r0, r4, #1, #4
   d4a10:	3010      	adds	r0, #16
}
   d4a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendCommand(0x10 + ((8*Column>>4)&0x0F)); 	//set column higher address
   d4a16:	f7ff bfb9 	b.w	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>

000d4a1a <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
  setTextXY(0,0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d4a1a:	b510      	push	{r4, lr}
   d4a1c:	460c      	mov	r4, r1
     Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d4a1e:	f001 fc4d 	bl	d62bc <_Z19__fetch_global_Wirev>
   d4a22:	213c      	movs	r1, #60	; 0x3c
   d4a24:	f000 fe4e 	bl	d56c4 <_ZN7TwoWire17beginTransmissionEi>
#if ARDUINO >= 100 || defined (SPARK)
     Wire.write(SeeedOLED_Data_Mode);            // data mode
   d4a28:	f001 fc48 	bl	d62bc <_Z19__fetch_global_Wirev>
   d4a2c:	2140      	movs	r1, #64	; 0x40
   d4a2e:	f7ff ffa9 	bl	d4984 <_ZN7TwoWire5writeEi>
     Wire.write(Data);
   d4a32:	f001 fc43 	bl	d62bc <_Z19__fetch_global_Wirev>
   d4a36:	6803      	ldr	r3, [r0, #0]
   d4a38:	4621      	mov	r1, r4
   d4a3a:	689b      	ldr	r3, [r3, #8]
   d4a3c:	4798      	blx	r3
#else
     Wire.send(SeeedOLED_Data_Mode);            // data mode
     Wire.send(Data);
#endif
     Wire.endTransmission();                    // stop I2C transmission
   d4a3e:	f001 fc3d 	bl	d62bc <_Z19__fetch_global_Wirev>
}
   d4a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     Wire.endTransmission();                    // stop I2C transmission
   d4a46:	f000 be44 	b.w	d56d2 <_ZN7TwoWire15endTransmissionEv>
	...

000d4a4c <_ZN9SeeedOLED7putCharEh>:

void SeeedOLED::putChar(unsigned char C)
{
    if(C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d4a4c:	f1a1 0320 	sub.w	r3, r1, #32
    {
    C=' '; //Space
   d4a50:	2b5f      	cmp	r3, #95	; 0x5f
   d4a52:	bf88      	it	hi
   d4a54:	2120      	movhi	r1, #32
{
   d4a56:	b570      	push	{r4, r5, r6, lr}
   d4a58:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   d4a5c:	4d07      	ldr	r5, [pc, #28]	; (d4a7c <_ZN9SeeedOLED7putCharEh+0x30>)
   d4a5e:	3920      	subs	r1, #32
   d4a60:	4606      	mov	r6, r0
    }
    unsigned char i=0;
    for(i=0;i<8;i++)
   d4a62:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
    C=' '; //Space
   d4a66:	2408      	movs	r4, #8
    {
       //read bytes from code memory
       sendData(pgm_read_byte(&BasicFont[C-32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d4a68:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4a6c:	4630      	mov	r0, r6
   d4a6e:	3c01      	subs	r4, #1
   d4a70:	f7ff ffd3 	bl	d4a1a <_ZN9SeeedOLED8sendDataEh>
    for(i=0;i<8;i++)
   d4a74:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4a78:	d1f6      	bne.n	d4a68 <_ZN9SeeedOLED7putCharEh+0x1c>
    }
}
   d4a7a:	bd70      	pop	{r4, r5, r6, pc}
   d4a7c:	000d7135 	.word	0x000d7135

000d4a80 <_ZN9SeeedOLED12clearDisplayEv>:
{
   d4a80:	b570      	push	{r4, r5, r6, lr}
   d4a82:	4605      	mov	r5, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); 	//display off
   d4a84:	20ae      	movs	r0, #174	; 0xae
   d4a86:	f7ff ff81 	bl	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>
   d4a8a:	2600      	movs	r6, #0
    setTextXY(j,0);
   d4a8c:	2200      	movs	r2, #0
   d4a8e:	b2f1      	uxtb	r1, r6
   d4a90:	4628      	mov	r0, r5
   d4a92:	f7ff ffb0 	bl	d49f6 <_ZN9SeeedOLED9setTextXYEhh>
   d4a96:	2410      	movs	r4, #16
        putChar(' ');
   d4a98:	2120      	movs	r1, #32
   d4a9a:	4628      	mov	r0, r5
   d4a9c:	3c01      	subs	r4, #1
   d4a9e:	f7ff ffd5 	bl	d4a4c <_ZN9SeeedOLED7putCharEh>
      for(i=0;i<16;i++)  //clear all columns
   d4aa2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4aa6:	d1f7      	bne.n	d4a98 <_ZN9SeeedOLED12clearDisplayEv+0x18>
  for(j=0;j<8;j++)
   d4aa8:	3601      	adds	r6, #1
   d4aaa:	2e08      	cmp	r6, #8
   d4aac:	d1ee      	bne.n	d4a8c <_ZN9SeeedOLED12clearDisplayEv+0xc>
  sendCommand(SeeedOLED_Display_On_Cmd); 	//display on
   d4aae:	20af      	movs	r0, #175	; 0xaf
   d4ab0:	f7ff ff6c 	bl	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>
  setTextXY(0,0);
   d4ab4:	4622      	mov	r2, r4
   d4ab6:	4621      	mov	r1, r4
   d4ab8:	4628      	mov	r0, r5
}
   d4aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setTextXY(0,0);
   d4abe:	f7ff bf9a 	b.w	d49f6 <_ZN9SeeedOLED9setTextXYEhh>

000d4ac2 <_ZN9SeeedOLED9putStringEPKc>:

void SeeedOLED::putString(const char *String)
{
   d4ac2:	b570      	push	{r4, r5, r6, lr}
   d4ac4:	4606      	mov	r6, r0
   d4ac6:	460d      	mov	r5, r1
   d4ac8:	2400      	movs	r4, #0
    unsigned char i=0;
    while(String[i])
   d4aca:	b2e3      	uxtb	r3, r4
   d4acc:	3401      	adds	r4, #1
   d4ace:	5ce9      	ldrb	r1, [r5, r3]
   d4ad0:	b119      	cbz	r1, d4ada <_ZN9SeeedOLED9putStringEPKc+0x18>
    {
        putChar(String[i]);
   d4ad2:	4630      	mov	r0, r6
   d4ad4:	f7ff ffba 	bl	d4a4c <_ZN9SeeedOLED7putCharEh>
    while(String[i])
   d4ad8:	e7f7      	b.n	d4aca <_ZN9SeeedOLED9putStringEPKc+0x8>
        i++;
    }
}
   d4ada:	bd70      	pop	{r4, r5, r6, pc}

000d4adc <_ZN9SeeedOLED16setNormalDisplayEv>:
    sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
    sendCommand(SeeedOLED_Normal_Display_Cmd);
   d4adc:	20a6      	movs	r0, #166	; 0xa6
   d4ade:	f7ff bf55 	b.w	d498c <_ZN9SeeedOLED11sendCommandEh.constprop.0>
	...

000d4ae4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <os_mutex_recursive_create+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030248 	.word	0x00030248

000d4af4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <os_mutex_recursive_destroy+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030248 	.word	0x00030248

000d4b04 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_RNG_GetRandomNumber+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	685b      	ldr	r3, [r3, #4]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030218 	.word	0x00030218

000d4b14 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <HAL_Delay_Microseconds+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	68db      	ldr	r3, [r3, #12]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030218 	.word	0x00030218

000d4b24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	695b      	ldr	r3, [r3, #20]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030218 	.word	0x00030218

000d4b34 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <HAL_Pin_Map+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	681b      	ldr	r3, [r3, #0]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	0003022c 	.word	0x0003022c

000d4b44 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_Pin_Mode+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	689b      	ldr	r3, [r3, #8]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	0003022c 	.word	0x0003022c

000d4b54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_Get_Pin_Mode+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	68db      	ldr	r3, [r3, #12]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	0003022c 	.word	0x0003022c

000d4b64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_GPIO_Write+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	691b      	ldr	r3, [r3, #16]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003022c 	.word	0x0003022c

000d4b74 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_Interrupts_Enable_All+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	6a1b      	ldr	r3, [r3, #32]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003022c 	.word	0x0003022c

000d4b84 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_Interrupts_Disable_All+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003022c 	.word	0x0003022c

000d4b94 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <hal_i2c_begin+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	68db      	ldr	r3, [r3, #12]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030228 	.word	0x00030228

000d4ba4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <hal_i2c_begin_transmission+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	699b      	ldr	r3, [r3, #24]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030228 	.word	0x00030228

000d4bb4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <hal_i2c_end_transmission+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	69db      	ldr	r3, [r3, #28]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030228 	.word	0x00030228

000d4bc4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <hal_i2c_write+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6a1b      	ldr	r3, [r3, #32]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030228 	.word	0x00030228

000d4bd4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <hal_i2c_available+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030228 	.word	0x00030228

000d4be4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <hal_i2c_read+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030228 	.word	0x00030228

000d4bf4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <hal_i2c_peek+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	00030228 	.word	0x00030228

000d4c04 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <hal_i2c_flush+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	00030228 	.word	0x00030228

000d4c14 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <hal_i2c_is_enabled+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	00030228 	.word	0x00030228

000d4c24 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <hal_i2c_init+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	00030228 	.word	0x00030228

000d4c34 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <inet_inet_ntop+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	695b      	ldr	r3, [r3, #20]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	00030264 	.word	0x00030264

000d4c44 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <netdb_freeaddrinfo+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	689b      	ldr	r3, [r3, #8]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	00030268 	.word	0x00030268

000d4c54 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <netdb_getaddrinfo+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	68db      	ldr	r3, [r3, #12]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	00030268 	.word	0x00030268

000d4c64 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <hal_spi_init+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	69db      	ldr	r3, [r3, #28]
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030230 	.word	0x00030230

000d4c74 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <hal_spi_is_enabled+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	6a1b      	ldr	r3, [r3, #32]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030230 	.word	0x00030230

000d4c84 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <hal_usart_init+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	681b      	ldr	r3, [r3, #0]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	0003023c 	.word	0x0003023c

000d4c94 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <hal_usart_write+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	68db      	ldr	r3, [r3, #12]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	0003023c 	.word	0x0003023c

000d4ca4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <hal_usart_available+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	691b      	ldr	r3, [r3, #16]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	0003023c 	.word	0x0003023c

000d4cb4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <hal_usart_read+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	695b      	ldr	r3, [r3, #20]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	0003023c 	.word	0x0003023c

000d4cc4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <hal_usart_peek+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	699b      	ldr	r3, [r3, #24]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	0003023c 	.word	0x0003023c

000d4cd4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <hal_usart_flush+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	69db      	ldr	r3, [r3, #28]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	0003023c 	.word	0x0003023c

000d4ce4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <hal_usart_is_enabled+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	6a1b      	ldr	r3, [r3, #32]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	0003023c 	.word	0x0003023c

000d4cf4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <hal_usart_available_data_for_write+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	0003023c 	.word	0x0003023c

000d4d04 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_USB_USART_Init+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	681b      	ldr	r3, [r3, #0]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	0003024c 	.word	0x0003024c

000d4d14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_USB_USART_Begin+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	685b      	ldr	r3, [r3, #4]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	0003024c 	.word	0x0003024c

000d4d24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <HAL_USB_USART_Available_Data+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	691b      	ldr	r3, [r3, #16]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	0003024c 	.word	0x0003024c

000d4d34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	695b      	ldr	r3, [r3, #20]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	0003024c 	.word	0x0003024c

000d4d44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <HAL_USB_USART_Receive_Data+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	699b      	ldr	r3, [r3, #24]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	0003024c 	.word	0x0003024c

000d4d54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <HAL_USB_USART_Send_Data+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	69db      	ldr	r3, [r3, #28]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	0003024c 	.word	0x0003024c

000d4d64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <HAL_USB_USART_Flush_Data+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	6a1b      	ldr	r3, [r3, #32]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	0003024c 	.word	0x0003024c

000d4d74 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <panic_+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030260 	.word	0x00030260

000d4d84 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <set_system_mode+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	685b      	ldr	r3, [r3, #4]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030220 	.word	0x00030220

000d4d94 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <system_delay_ms+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	695b      	ldr	r3, [r3, #20]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030220 	.word	0x00030220

000d4da4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <application_thread_current+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030220 	.word	0x00030220

000d4db4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <application_thread_invoke+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030220 	.word	0x00030220

000d4dc4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b03      	ldr	r3, [pc, #12]	; (d4dd4 <system_ctrl_set_app_request_handler+0x10>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4dce:	9301      	str	r3, [sp, #4]
   d4dd0:	bd08      	pop	{r3, pc}
   d4dd2:	0000      	.short	0x0000
   d4dd4:	00030220 	.word	0x00030220

000d4dd8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b03      	ldr	r3, [pc, #12]	; (d4de8 <system_ctrl_set_result+0x10>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4de2:	9301      	str	r3, [sp, #4]
   d4de4:	bd08      	pop	{r3, pc}
   d4de6:	0000      	.short	0x0000
   d4de8:	00030220 	.word	0x00030220

000d4dec <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <spark_cloud_flag_connected+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	695b      	ldr	r3, [r3, #20]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030244 	.word	0x00030244

000d4dfc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <spark_send_event+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6a1b      	ldr	r3, [r3, #32]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030244 	.word	0x00030244

000d4e0c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030244 	.word	0x00030244

000d4e1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <network_connect+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	685b      	ldr	r3, [r3, #4]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030240 	.word	0x00030240

000d4e2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <network_connecting+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	689b      	ldr	r3, [r3, #8]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030240 	.word	0x00030240

000d4e3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <network_disconnect+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	68db      	ldr	r3, [r3, #12]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030240 	.word	0x00030240

000d4e4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <network_ready+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	691b      	ldr	r3, [r3, #16]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030240 	.word	0x00030240

000d4e5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <network_on+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	695b      	ldr	r3, [r3, #20]
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030240 	.word	0x00030240

000d4e6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <network_off+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	699b      	ldr	r3, [r3, #24]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030240 	.word	0x00030240

000d4e7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <network_listen+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	69db      	ldr	r3, [r3, #28]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030240 	.word	0x00030240

000d4e8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <network_listening+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	6a1b      	ldr	r3, [r3, #32]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	00030240 	.word	0x00030240

000d4e9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <network_set_listen_timeout+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	00030240 	.word	0x00030240

000d4eac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <network_get_listen_timeout+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	00030240 	.word	0x00030240

000d4ebc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <network_is_on+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	00030240 	.word	0x00030240

000d4ecc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <network_is_off+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030240 	.word	0x00030240

000d4edc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <malloc+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	681b      	ldr	r3, [r3, #0]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	0003021c 	.word	0x0003021c

000d4eec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <free+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	685b      	ldr	r3, [r3, #4]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	0003021c 	.word	0x0003021c

000d4efc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <realloc+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	689b      	ldr	r3, [r3, #8]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	0003021c 	.word	0x0003021c

000d4f0c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <abort+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	0003021c 	.word	0x0003021c

000d4f1c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <_malloc_r+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	0003021c 	.word	0x0003021c

000d4f2c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <newlib_impure_ptr_callback+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	0003021c 	.word	0x0003021c

000d4f3c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f3c:	2100      	movs	r1, #0
   d4f3e:	f7ff bf29 	b.w	d4d94 <system_delay_ms>

000d4f42 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4f42:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f44:	6883      	ldr	r3, [r0, #8]
   d4f46:	4604      	mov	r4, r0
   d4f48:	b90b      	cbnz	r3, d4f4e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4f4a:	f001 f9e8 	bl	d631e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f4e:	68c3      	ldr	r3, [r0, #12]
   d4f50:	4798      	blx	r3
      if (_M_manager)
   d4f52:	68a3      	ldr	r3, [r4, #8]
   d4f54:	b11b      	cbz	r3, d4f5e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f56:	2203      	movs	r2, #3
   d4f58:	4621      	mov	r1, r4
   d4f5a:	4620      	mov	r0, r4
   d4f5c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4f5e:	4620      	mov	r0, r4
   d4f60:	2110      	movs	r1, #16
}
   d4f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d4f66:	f001 b9d6 	b.w	d6316 <_ZdlPvj>

000d4f6a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f6a:	b510      	push	{r4, lr}
   d4f6c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f6e:	6800      	ldr	r0, [r0, #0]
   d4f70:	b108      	cbz	r0, d4f76 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f72:	f7ff fdbf 	bl	d4af4 <os_mutex_recursive_destroy>
    }
   d4f76:	4620      	mov	r0, r4
   d4f78:	bd10      	pop	{r4, pc}

000d4f7a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4f7a:	b510      	push	{r4, lr}
      if (_M_manager)
   d4f7c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4f7e:	4604      	mov	r4, r0
      if (_M_manager)
   d4f80:	b113      	cbz	r3, d4f88 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f82:	2203      	movs	r2, #3
   d4f84:	4601      	mov	r1, r0
   d4f86:	4798      	blx	r3
    }
   d4f88:	4620      	mov	r0, r4
   d4f8a:	bd10      	pop	{r4, pc}

000d4f8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4f8c:	680b      	ldr	r3, [r1, #0]
   d4f8e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4f90:	b113      	cbz	r3, d4f98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4f92:	685a      	ldr	r2, [r3, #4]
   d4f94:	3201      	adds	r2, #1
   d4f96:	605a      	str	r2, [r3, #4]
      }
   d4f98:	4770      	bx	lr

000d4f9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4f9a:	b513      	push	{r0, r1, r4, lr}
   d4f9c:	460b      	mov	r3, r1
   d4f9e:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fa0:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4fa4:	466c      	mov	r4, sp
   d4fa6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4faa:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4fae:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4fb6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4fba:	b002      	add	sp, #8
   d4fbc:	bd10      	pop	{r4, pc}
	...

000d4fc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4fc0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4fc2:	4c06      	ldr	r4, [pc, #24]	; (d4fdc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4fc4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4fc6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4fc8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4fca:	f7ff fd8b 	bl	d4ae4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4fce:	4620      	mov	r0, r4
   d4fd0:	4a03      	ldr	r2, [pc, #12]	; (d4fe0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4fd2:	4904      	ldr	r1, [pc, #16]	; (d4fe4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4fd8:	f001 b998 	b.w	d630c <__aeabi_atexit>
   d4fdc:	2003e61c 	.word	0x2003e61c
   d4fe0:	2003e5ec 	.word	0x2003e5ec
   d4fe4:	000d4f6b 	.word	0x000d4f6b

000d4fe8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4fe8:	2200      	movs	r2, #0
   d4fea:	6840      	ldr	r0, [r0, #4]
   d4fec:	4611      	mov	r1, r2
   d4fee:	f7ff bf2d 	b.w	d4e4c <network_ready>

000d4ff2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4ff2:	2200      	movs	r2, #0
   d4ff4:	6840      	ldr	r0, [r0, #4]
   d4ff6:	4611      	mov	r1, r2
   d4ff8:	f7ff bf48 	b.w	d4e8c <network_listening>

000d4ffc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4ffc:	2200      	movs	r2, #0
   d4ffe:	6840      	ldr	r0, [r0, #4]
   d5000:	4611      	mov	r1, r2
   d5002:	f7ff bf53 	b.w	d4eac <network_get_listen_timeout>

000d5006 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5006:	6840      	ldr	r0, [r0, #4]
   d5008:	2200      	movs	r2, #0
   d500a:	f7ff bf47 	b.w	d4e9c <network_set_listen_timeout>

000d500e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d500e:	6840      	ldr	r0, [r0, #4]
   d5010:	2200      	movs	r2, #0
   d5012:	f081 0101 	eor.w	r1, r1, #1
   d5016:	f7ff bf31 	b.w	d4e7c <network_listen>

000d501a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d501a:	2300      	movs	r3, #0
   d501c:	6840      	ldr	r0, [r0, #4]
   d501e:	461a      	mov	r2, r3
   d5020:	4619      	mov	r1, r3
   d5022:	f7ff bf23 	b.w	d4e6c <network_off>

000d5026 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5026:	2300      	movs	r3, #0
   d5028:	6840      	ldr	r0, [r0, #4]
   d502a:	461a      	mov	r2, r3
   d502c:	4619      	mov	r1, r3
   d502e:	f7ff bf15 	b.w	d4e5c <network_on>

000d5032 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5032:	2200      	movs	r2, #0
   d5034:	6840      	ldr	r0, [r0, #4]
   d5036:	4611      	mov	r1, r2
   d5038:	f7ff bef8 	b.w	d4e2c <network_connecting>

000d503c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d503c:	6840      	ldr	r0, [r0, #4]
   d503e:	2200      	movs	r2, #0
   d5040:	2102      	movs	r1, #2
   d5042:	f7ff befb 	b.w	d4e3c <network_disconnect>

000d5046 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5046:	2300      	movs	r3, #0
   d5048:	6840      	ldr	r0, [r0, #4]
   d504a:	461a      	mov	r2, r3
   d504c:	f7ff bee6 	b.w	d4e1c <network_connect>

000d5050 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5050:	4b08      	ldr	r3, [pc, #32]	; (d5074 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5052:	b510      	push	{r4, lr}
   d5054:	2428      	movs	r4, #40	; 0x28
   d5056:	4622      	mov	r2, r4
   d5058:	4618      	mov	r0, r3
   d505a:	2100      	movs	r1, #0
   d505c:	f001 ffd4 	bl	d7008 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5060:	4b05      	ldr	r3, [pc, #20]	; (d5078 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5062:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5068:	6042      	str	r2, [r0, #4]
   d506a:	2204      	movs	r2, #4
   d506c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d506e:	4a03      	ldr	r2, [pc, #12]	; (d507c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5070:	601a      	str	r2, [r3, #0]
   d5072:	bd10      	pop	{r4, pc}
   d5074:	2003e628 	.word	0x2003e628
   d5078:	2003e620 	.word	0x2003e620
   d507c:	000d7440 	.word	0x000d7440

000d5080 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5080:	4770      	bx	lr

000d5082 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5082:	2000      	movs	r0, #0
   d5084:	4770      	bx	lr

000d5086 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5086:	b510      	push	{r4, lr}
   d5088:	2110      	movs	r1, #16
   d508a:	4604      	mov	r4, r0
   d508c:	f001 f943 	bl	d6316 <_ZdlPvj>
   d5090:	4620      	mov	r0, r4
   d5092:	bd10      	pop	{r4, pc}

000d5094 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5094:	b508      	push	{r3, lr}
      { delete this; }
   d5096:	f7ff fff6 	bl	d5086 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d509a:	bd08      	pop	{r3, pc}

000d509c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d509c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d509e:	2200      	movs	r2, #0
   d50a0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d50a4:	6002      	str	r2, [r0, #0]
   d50a6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d50a8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d50aa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d50ac:	680c      	ldr	r4, [r1, #0]
   d50ae:	8085      	strh	r5, [r0, #4]
   d50b0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d50b2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d50b4:	bd30      	pop	{r4, r5, pc}

000d50b6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d50b6:	b510      	push	{r4, lr}
   d50b8:	4604      	mov	r4, r0
    free((void*)msg_);
   d50ba:	6800      	ldr	r0, [r0, #0]
   d50bc:	f7ff ff16 	bl	d4eec <free>
}
   d50c0:	4620      	mov	r0, r4
   d50c2:	bd10      	pop	{r4, pc}

000d50c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d50c4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d50c6:	68c4      	ldr	r4, [r0, #12]
   d50c8:	b1f4      	cbz	r4, d5108 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d50ca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d50cc:	2b02      	cmp	r3, #2
   d50ce:	d103      	bne.n	d50d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d50d0:	f104 000c 	add.w	r0, r4, #12
   d50d4:	f7ff ffef 	bl	d50b6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d50d8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d50da:	b135      	cbz	r5, d50ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d50dc:	4628      	mov	r0, r5
   d50de:	f7ff ff4c 	bl	d4f7a <_ZNSt14_Function_baseD1Ev>
   d50e2:	2110      	movs	r1, #16
   d50e4:	4628      	mov	r0, r5
   d50e6:	f001 f916 	bl	d6316 <_ZdlPvj>
   d50ea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d50ec:	b135      	cbz	r5, d50fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d50ee:	4628      	mov	r0, r5
   d50f0:	f7ff ff43 	bl	d4f7a <_ZNSt14_Function_baseD1Ev>
   d50f4:	2110      	movs	r1, #16
   d50f6:	4628      	mov	r0, r5
   d50f8:	f001 f90d 	bl	d6316 <_ZdlPvj>
   d50fc:	4620      	mov	r0, r4
   d50fe:	2114      	movs	r1, #20
   d5100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5104:	f001 b907 	b.w	d6316 <_ZdlPvj>
   d5108:	bd38      	pop	{r3, r4, r5, pc}

000d510a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d510a:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d510c:	460e      	mov	r6, r1
   d510e:	4604      	mov	r4, r0
   d5110:	f856 3b04 	ldr.w	r3, [r6], #4
   d5114:	9300      	str	r3, [sp, #0]
   d5116:	460d      	mov	r5, r1
   d5118:	a801      	add	r0, sp, #4
   d511a:	4631      	mov	r1, r6
   d511c:	f7ff ff36 	bl	d4f8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5120:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5122:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5124:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5126:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5128:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d512a:	2300      	movs	r3, #0
   d512c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d512e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5130:	f7ff f81a 	bl	d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5134:	4630      	mov	r0, r6
   d5136:	f7ff f817 	bl	d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d513a:	4628      	mov	r0, r5
   d513c:	2108      	movs	r1, #8
   d513e:	f001 f8ea 	bl	d6316 <_ZdlPvj>
        return p;
    }
   d5142:	4620      	mov	r0, r4
   d5144:	b002      	add	sp, #8
   d5146:	bd70      	pop	{r4, r5, r6, pc}

000d5148 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5148:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d514a:	b510      	push	{r4, lr}
      if (_M_empty())
   d514c:	b90a      	cbnz	r2, d5152 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d514e:	f001 f8e6 	bl	d631e <_ZSt25__throw_bad_function_callv>
    }
   d5152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5156:	68c3      	ldr	r3, [r0, #12]
   d5158:	4718      	bx	r3

000d515a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d515a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d515c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d515e:	f100 0110 	add.w	r1, r0, #16
   d5162:	f7ff fff1 	bl	d5148 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5166:	bd08      	pop	{r3, pc}

000d5168 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5168:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d516a:	b510      	push	{r4, lr}
      if (_M_empty())
   d516c:	b90a      	cbnz	r2, d5172 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d516e:	f001 f8d6 	bl	d631e <_ZSt25__throw_bad_function_callv>
    }
   d5172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5176:	68c3      	ldr	r3, [r0, #12]
   d5178:	4718      	bx	r3

000d517a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d517a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d517c:	6800      	ldr	r0, [r0, #0]
   d517e:	f100 0110 	add.w	r1, r0, #16
   d5182:	f7ff fff1 	bl	d5168 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5186:	bd08      	pop	{r3, pc}

000d5188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5188:	b538      	push	{r3, r4, r5, lr}
   d518a:	2300      	movs	r3, #0
   d518c:	4604      	mov	r4, r0
   d518e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5190:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5192:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5194:	f7fe ff7d 	bl	d4092 <_Znwj>
   d5198:	b128      	cbz	r0, d51a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d519a:	2301      	movs	r3, #1
   d519c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d51a0:	4b02      	ldr	r3, [pc, #8]	; (d51ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d51a2:	6003      	str	r3, [r0, #0]
   d51a4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51a6:	6020      	str	r0, [r4, #0]
	}
   d51a8:	4620      	mov	r0, r4
   d51aa:	bd38      	pop	{r3, r4, r5, pc}
   d51ac:	000d747c 	.word	0x000d747c

000d51b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d51b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d51b2:	2300      	movs	r3, #0
   d51b4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d51b6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d51b8:	4604      	mov	r4, r0
   d51ba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d51bc:	b12b      	cbz	r3, d51ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d51be:	2202      	movs	r2, #2
   d51c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d51c2:	68eb      	ldr	r3, [r5, #12]
   d51c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d51c6:	68ab      	ldr	r3, [r5, #8]
   d51c8:	60a3      	str	r3, [r4, #8]
    }
   d51ca:	4620      	mov	r0, r4
   d51cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d51d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d51d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d51d2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d51d4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d51d6:	4668      	mov	r0, sp
   d51d8:	f7ff ff60 	bl	d509c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d51dc:	f04f 0302 	mov.w	r3, #2
   d51e0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d51e4:	2a00      	cmp	r2, #0
   d51e6:	d103      	bne.n	d51f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d51e8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d51ec:	2900      	cmp	r1, #0
   d51ee:	d1f7      	bne.n	d51e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d51f0:	d125      	bne.n	d523e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d51f2:	f104 050c 	add.w	r5, r4, #12
   d51f6:	4669      	mov	r1, sp
   d51f8:	4628      	mov	r0, r5
   d51fa:	f7ff ff4f 	bl	d509c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d51fe:	f3bf 8f5b 	dmb	ish
   d5202:	2301      	movs	r3, #1
   d5204:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5206:	2000      	movs	r0, #0
   d5208:	f104 0308 	add.w	r3, r4, #8
   d520c:	f3bf 8f5b 	dmb	ish
   d5210:	e853 6f00 	ldrex	r6, [r3]
   d5214:	e843 0200 	strex	r2, r0, [r3]
   d5218:	2a00      	cmp	r2, #0
   d521a:	d1f9      	bne.n	d5210 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d521c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5220:	b16e      	cbz	r6, d523e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5222:	f7ff fdbf 	bl	d4da4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5226:	b178      	cbz	r0, d5248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5228:	4629      	mov	r1, r5
   d522a:	4630      	mov	r0, r6
   d522c:	f7ff ff8c 	bl	d5148 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5230:	4630      	mov	r0, r6
   d5232:	f7ff fea2 	bl	d4f7a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5236:	2110      	movs	r1, #16
   d5238:	4630      	mov	r0, r6
   d523a:	f001 f86c 	bl	d6316 <_ZdlPvj>
        p_->setError(std::move(error));
   d523e:	4668      	mov	r0, sp
   d5240:	f7ff ff39 	bl	d50b6 <_ZN8particle5ErrorD1Ev>
    }
   d5244:	b009      	add	sp, #36	; 0x24
   d5246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5248:	4631      	mov	r1, r6
   d524a:	a802      	add	r0, sp, #8
   d524c:	f7ff ffb0 	bl	d51b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5250:	68e0      	ldr	r0, [r4, #12]
   d5252:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5256:	b108      	cbz	r0, d525c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5258:	f001 ff12 	bl	d7080 <strdup>
        type_(type) {
   d525c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d525e:	2010      	movs	r0, #16
   d5260:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5264:	f7fe ff15 	bl	d4092 <_Znwj>
   d5268:	4605      	mov	r5, r0
   d526a:	b1e8      	cbz	r0, d52a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d526c:	2700      	movs	r7, #0
   d526e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5270:	2018      	movs	r0, #24
   d5272:	f7fe ff0e 	bl	d4092 <_Znwj>
   d5276:	4604      	mov	r4, r0
   d5278:	b188      	cbz	r0, d529e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d527a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d527c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d527e:	a802      	add	r0, sp, #8
   d5280:	f7ff fe8b 	bl	d4f9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5284:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5286:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5288:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d528a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d528c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d528e:	a906      	add	r1, sp, #24
   d5290:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5292:	60e3      	str	r3, [r4, #12]
   d5294:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5298:	9205      	str	r2, [sp, #20]
   d529a:	f7ff feff 	bl	d509c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d529e:	4b08      	ldr	r3, [pc, #32]	; (d52c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d52a0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d52a2:	4b08      	ldr	r3, [pc, #32]	; (d52c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52a4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d52a6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d52a8:	a806      	add	r0, sp, #24
   d52aa:	f7ff ff04 	bl	d50b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d52ae:	a802      	add	r0, sp, #8
   d52b0:	f7ff fe63 	bl	d4f7a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d52b4:	2200      	movs	r2, #0
   d52b6:	4629      	mov	r1, r5
   d52b8:	4803      	ldr	r0, [pc, #12]	; (d52c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d52ba:	f7ff fd7b 	bl	d4db4 <application_thread_invoke>
   d52be:	e7b7      	b.n	d5230 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d52c0:	000d515b 	.word	0x000d515b
   d52c4:	000d53f1 	.word	0x000d53f1
   d52c8:	000d4f43 	.word	0x000d4f43

000d52cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d52cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d52d0:	b08a      	sub	sp, #40	; 0x28
   d52d2:	4605      	mov	r5, r0
   d52d4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d52d8:	460c      	mov	r4, r1
   d52da:	4617      	mov	r7, r2
   d52dc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52de:	f7ff fd85 	bl	d4dec <spark_cloud_flag_connected>
   d52e2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d52e4:	4682      	mov	sl, r0
   d52e6:	bb38      	cbnz	r0, d5338 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d52e8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d52ec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d52ee:	a905      	add	r1, sp, #20
   d52f0:	4630      	mov	r0, r6
   d52f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52f6:	f7ff fed1 	bl	d509c <_ZN8particle5ErrorC1EOS0_>
   d52fa:	2014      	movs	r0, #20
   d52fc:	f7fe fec9 	bl	d4092 <_Znwj>
   d5300:	4604      	mov	r4, r0
   d5302:	b148      	cbz	r0, d5318 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5304:	2302      	movs	r3, #2
   d5306:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5308:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d530a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d530e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5310:	4631      	mov	r1, r6
   d5312:	300c      	adds	r0, #12
   d5314:	f7ff fec2 	bl	d509c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5318:	4628      	mov	r0, r5
	: __shared_count(__p)
   d531a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d531c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5320:	f7ff ff32 	bl	d5188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5324:	4630      	mov	r0, r6
   d5326:	f7ff fec6 	bl	d50b6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d532a:	a805      	add	r0, sp, #20
   d532c:	f7ff fec3 	bl	d50b6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5330:	4628      	mov	r0, r5
   d5332:	b00a      	add	sp, #40	; 0x28
   d5334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5338:	230c      	movs	r3, #12
   d533a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d533e:	2014      	movs	r0, #20
   d5340:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5344:	9307      	str	r3, [sp, #28]
   d5346:	f7fe fea4 	bl	d4092 <_Znwj>
   d534a:	4601      	mov	r1, r0
   d534c:	b128      	cbz	r0, d535a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d534e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5352:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5356:	f880 a001 	strb.w	sl, [r0, #1]
   d535a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d535c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d535e:	f7ff ff13 	bl	d5188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5362:	4b22      	ldr	r3, [pc, #136]	; (d53ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5364:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5366:	2008      	movs	r0, #8
   d5368:	f7fe fe93 	bl	d4092 <_Znwj>
   d536c:	4682      	mov	sl, r0
   d536e:	b128      	cbz	r0, d537c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5370:	9b03      	ldr	r3, [sp, #12]
   d5372:	f840 3b04 	str.w	r3, [r0], #4
   d5376:	a904      	add	r1, sp, #16
   d5378:	f7ff fe08 	bl	d4f8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d537c:	9600      	str	r6, [sp, #0]
   d537e:	fa5f f389 	uxtb.w	r3, r9
   d5382:	4642      	mov	r2, r8
   d5384:	4639      	mov	r1, r7
   d5386:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5388:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d538c:	f7ff fd36 	bl	d4dfc <spark_send_event>
   d5390:	b9b8      	cbnz	r0, d53c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5392:	9b03      	ldr	r3, [sp, #12]
   d5394:	785b      	ldrb	r3, [r3, #1]
   d5396:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d539a:	b993      	cbnz	r3, d53c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d539c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d53a0:	a905      	add	r1, sp, #20
   d53a2:	a803      	add	r0, sp, #12
   d53a4:	9205      	str	r2, [sp, #20]
   d53a6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d53aa:	f7ff ff11 	bl	d51d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d53ae:	a805      	add	r0, sp, #20
   d53b0:	f7ff fe81 	bl	d50b6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d53b4:	a805      	add	r0, sp, #20
   d53b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d53b8:	f7ff fea7 	bl	d510a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d53bc:	a806      	add	r0, sp, #24
   d53be:	f7fe fed3 	bl	d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53c2:	9b03      	ldr	r3, [sp, #12]
   d53c4:	9305      	str	r3, [sp, #20]
   d53c6:	a904      	add	r1, sp, #16
   d53c8:	a806      	add	r0, sp, #24
   d53ca:	f7ff fddf 	bl	d4f8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d53ce:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d53d0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d53d2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d53d4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d53d6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d53d8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d53da:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d53dc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d53de:	f7fe fec3 	bl	d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53e2:	a804      	add	r0, sp, #16
   d53e4:	f7fe fec0 	bl	d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d53e8:	e7a2      	b.n	d5330 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d53ea:	bf00      	nop
   d53ec:	000d54b5 	.word	0x000d54b5

000d53f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d53f0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d53f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53f4:	4605      	mov	r5, r0
	  switch (__op)
   d53f6:	d007      	beq.n	d5408 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d53f8:	2a03      	cmp	r2, #3
   d53fa:	d018      	beq.n	d542e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d53fc:	2a01      	cmp	r2, #1
   d53fe:	d101      	bne.n	d5404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5400:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5402:	6003      	str	r3, [r0, #0]
	}
   d5404:	2000      	movs	r0, #0
   d5406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5408:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d540a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d540c:	f7fe fe41 	bl	d4092 <_Znwj>
   d5410:	4604      	mov	r4, r0
   d5412:	b150      	cbz	r0, d542a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5414:	4631      	mov	r1, r6
   d5416:	f7ff fecb 	bl	d51b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d541a:	6930      	ldr	r0, [r6, #16]
   d541c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5420:	b108      	cbz	r0, d5426 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5422:	f001 fe2d 	bl	d7080 <strdup>
        type_(type) {
   d5426:	6120      	str	r0, [r4, #16]
   d5428:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d542a:	602c      	str	r4, [r5, #0]
	}
   d542c:	e7ea      	b.n	d5404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d542e:	6804      	ldr	r4, [r0, #0]
   d5430:	2c00      	cmp	r4, #0
   d5432:	d0e7      	beq.n	d5404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5434:	f104 0010 	add.w	r0, r4, #16
   d5438:	f7ff fe3d 	bl	d50b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d543c:	4620      	mov	r0, r4
   d543e:	f7ff fd9c 	bl	d4f7a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5442:	2118      	movs	r1, #24
   d5444:	4620      	mov	r0, r4
   d5446:	f000 ff66 	bl	d6316 <_ZdlPvj>
   d544a:	e7db      	b.n	d5404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d544c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d544c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d544e:	2300      	movs	r3, #0
   d5450:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5452:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5454:	4604      	mov	r4, r0
   d5456:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5458:	b12b      	cbz	r3, d5466 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d545a:	2202      	movs	r2, #2
   d545c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d545e:	68eb      	ldr	r3, [r5, #12]
   d5460:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5462:	68ab      	ldr	r3, [r5, #8]
   d5464:	60a3      	str	r3, [r4, #8]
    }
   d5466:	4620      	mov	r0, r4
   d5468:	bd38      	pop	{r3, r4, r5, pc}

000d546a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d546a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d546c:	b570      	push	{r4, r5, r6, lr}
   d546e:	4604      	mov	r4, r0
	  switch (__op)
   d5470:	d007      	beq.n	d5482 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5472:	2a03      	cmp	r2, #3
   d5474:	d012      	beq.n	d549c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5476:	2a01      	cmp	r2, #1
   d5478:	d101      	bne.n	d547e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d547a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d547c:	6003      	str	r3, [r0, #0]
	}
   d547e:	2000      	movs	r0, #0
   d5480:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5482:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5484:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5486:	f7fe fe04 	bl	d4092 <_Znwj>
   d548a:	4605      	mov	r5, r0
   d548c:	b120      	cbz	r0, d5498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d548e:	4631      	mov	r1, r6
   d5490:	f7ff ffdc 	bl	d544c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5494:	7c33      	ldrb	r3, [r6, #16]
   d5496:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5498:	6025      	str	r5, [r4, #0]
	}
   d549a:	e7f0      	b.n	d547e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d549c:	6804      	ldr	r4, [r0, #0]
   d549e:	2c00      	cmp	r4, #0
   d54a0:	d0ed      	beq.n	d547e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d54a2:	4620      	mov	r0, r4
   d54a4:	f7ff fd69 	bl	d4f7a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d54a8:	2114      	movs	r1, #20
   d54aa:	4620      	mov	r0, r4
   d54ac:	f000 ff33 	bl	d6316 <_ZdlPvj>
   d54b0:	e7e5      	b.n	d547e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d54b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d54b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d54b6:	b089      	sub	sp, #36	; 0x24
   d54b8:	4604      	mov	r4, r0
   d54ba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d54bc:	a801      	add	r0, sp, #4
   d54be:	4611      	mov	r1, r2
   d54c0:	f7ff fe23 	bl	d510a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d54c4:	b1a4      	cbz	r4, d54f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d54c6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d54c8:	b11d      	cbz	r5, d54d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d54ca:	4628      	mov	r0, r5
   d54cc:	f001 fdd8 	bl	d7080 <strdup>
   d54d0:	4605      	mov	r5, r0
   d54d2:	a801      	add	r0, sp, #4
   d54d4:	a903      	add	r1, sp, #12
        type_(type) {
   d54d6:	9503      	str	r5, [sp, #12]
   d54d8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d54dc:	f7ff fe78 	bl	d51d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d54e0:	a803      	add	r0, sp, #12
   d54e2:	f7ff fde8 	bl	d50b6 <_ZN8particle5ErrorD1Ev>
   d54e6:	a802      	add	r0, sp, #8
   d54e8:	f7fe fe3e 	bl	d4168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d54ec:	b009      	add	sp, #36	; 0x24
   d54ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d54f0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d54f2:	2301      	movs	r3, #1
   d54f4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d54f8:	2a00      	cmp	r2, #0
   d54fa:	d103      	bne.n	d5504 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d54fc:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5500:	2900      	cmp	r1, #0
   d5502:	d1f7      	bne.n	d54f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5504:	d1ef      	bne.n	d54e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5506:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5508:	f3bf 8f5b 	dmb	ish
   d550c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d550e:	1d2b      	adds	r3, r5, #4
   d5510:	f3bf 8f5b 	dmb	ish
   d5514:	e853 6f00 	ldrex	r6, [r3]
   d5518:	e843 4200 	strex	r2, r4, [r3]
   d551c:	2a00      	cmp	r2, #0
   d551e:	d1f9      	bne.n	d5514 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5520:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5524:	2e00      	cmp	r6, #0
   d5526:	d0de      	beq.n	d54e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5528:	4620      	mov	r0, r4
   d552a:	f7ff fc3b 	bl	d4da4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d552e:	4607      	mov	r7, r0
   d5530:	b160      	cbz	r0, d554c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5532:	f105 010c 	add.w	r1, r5, #12
   d5536:	4630      	mov	r0, r6
   d5538:	f7ff fe16 	bl	d5168 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d553c:	4630      	mov	r0, r6
   d553e:	f7ff fd1c 	bl	d4f7a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5542:	2110      	movs	r1, #16
   d5544:	4630      	mov	r0, r6
   d5546:	f000 fee6 	bl	d6316 <_ZdlPvj>
   d554a:	e7cc      	b.n	d54e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d554c:	4631      	mov	r1, r6
   d554e:	a803      	add	r0, sp, #12
   d5550:	f7ff ff7c 	bl	d544c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5554:	7b2b      	ldrb	r3, [r5, #12]
   d5556:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d555a:	2010      	movs	r0, #16
   d555c:	f7fe fd99 	bl	d4092 <_Znwj>
   d5560:	4605      	mov	r5, r0
   d5562:	b1d0      	cbz	r0, d559a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5564:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5566:	2014      	movs	r0, #20
   d5568:	f7fe fd93 	bl	d4092 <_Znwj>
   d556c:	4604      	mov	r4, r0
   d556e:	b178      	cbz	r0, d5590 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5570:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5572:	4601      	mov	r1, r0
   d5574:	a803      	add	r0, sp, #12
   d5576:	f7ff fd10 	bl	d4f9a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d557a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d557c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d557e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5580:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5582:	9205      	str	r2, [sp, #20]
   d5584:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5586:	60e3      	str	r3, [r4, #12]
   d5588:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d558c:	9206      	str	r2, [sp, #24]
   d558e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5590:	4b06      	ldr	r3, [pc, #24]	; (d55ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5592:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5594:	4b06      	ldr	r3, [pc, #24]	; (d55b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5596:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5598:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d559a:	a803      	add	r0, sp, #12
   d559c:	f7ff fced 	bl	d4f7a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d55a0:	2200      	movs	r2, #0
   d55a2:	4629      	mov	r1, r5
   d55a4:	4803      	ldr	r0, [pc, #12]	; (d55b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d55a6:	f7ff fc05 	bl	d4db4 <application_thread_invoke>
   d55aa:	e7c7      	b.n	d553c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d55ac:	000d517b 	.word	0x000d517b
   d55b0:	000d546b 	.word	0x000d546b
   d55b4:	000d4f43 	.word	0x000d4f43

000d55b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55b8:	2200      	movs	r2, #0
   d55ba:	6840      	ldr	r0, [r0, #4]
   d55bc:	4611      	mov	r1, r2
   d55be:	f7ff bc65 	b.w	d4e8c <network_listening>

000d55c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d55c2:	2200      	movs	r2, #0
   d55c4:	6840      	ldr	r0, [r0, #4]
   d55c6:	4611      	mov	r1, r2
   d55c8:	f7ff bc70 	b.w	d4eac <network_get_listen_timeout>

000d55cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d55cc:	6840      	ldr	r0, [r0, #4]
   d55ce:	2200      	movs	r2, #0
   d55d0:	f7ff bc64 	b.w	d4e9c <network_set_listen_timeout>

000d55d4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d55d4:	6840      	ldr	r0, [r0, #4]
   d55d6:	2200      	movs	r2, #0
   d55d8:	f081 0101 	eor.w	r1, r1, #1
   d55dc:	f7ff bc4e 	b.w	d4e7c <network_listen>

000d55e0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d55e0:	2300      	movs	r3, #0
   d55e2:	6840      	ldr	r0, [r0, #4]
   d55e4:	461a      	mov	r2, r3
   d55e6:	4619      	mov	r1, r3
   d55e8:	f7ff bc40 	b.w	d4e6c <network_off>

000d55ec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d55ec:	2300      	movs	r3, #0
   d55ee:	6840      	ldr	r0, [r0, #4]
   d55f0:	461a      	mov	r2, r3
   d55f2:	4619      	mov	r1, r3
   d55f4:	f7ff bc32 	b.w	d4e5c <network_on>

000d55f8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55f8:	2200      	movs	r2, #0
   d55fa:	6840      	ldr	r0, [r0, #4]
   d55fc:	4611      	mov	r1, r2
   d55fe:	f7ff bc25 	b.w	d4e4c <network_ready>

000d5602 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5602:	2200      	movs	r2, #0
   d5604:	6840      	ldr	r0, [r0, #4]
   d5606:	4611      	mov	r1, r2
   d5608:	f7ff bc10 	b.w	d4e2c <network_connecting>

000d560c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d560c:	6840      	ldr	r0, [r0, #4]
   d560e:	2200      	movs	r2, #0
   d5610:	2102      	movs	r1, #2
   d5612:	f7ff bc13 	b.w	d4e3c <network_disconnect>

000d5616 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5616:	2300      	movs	r3, #0
   d5618:	6840      	ldr	r0, [r0, #4]
   d561a:	461a      	mov	r2, r3
   d561c:	f7ff bbfe 	b.w	d4e1c <network_connect>

000d5620 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5620:	4b02      	ldr	r3, [pc, #8]	; (d562c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5622:	2203      	movs	r2, #3
   d5624:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5626:	4a02      	ldr	r2, [pc, #8]	; (d5630 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5628:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d562a:	4770      	bx	lr
   d562c:	2003e650 	.word	0x2003e650
   d5630:	000d7498 	.word	0x000d7498

000d5634 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5634:	4770      	bx	lr

000d5636 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5638:	4606      	mov	r6, r0
   d563a:	4615      	mov	r5, r2
   d563c:	460c      	mov	r4, r1
   d563e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5640:	42bc      	cmp	r4, r7
   d5642:	d006      	beq.n	d5652 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5644:	6833      	ldr	r3, [r6, #0]
   d5646:	f814 1b01 	ldrb.w	r1, [r4], #1
   d564a:	689b      	ldr	r3, [r3, #8]
   d564c:	4630      	mov	r0, r6
   d564e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5650:	e7f6      	b.n	d5640 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5652:	4628      	mov	r0, r5
   d5654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5656 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5656:	7c00      	ldrb	r0, [r0, #16]
   d5658:	2200      	movs	r2, #0
   d565a:	f7ff bab3 	b.w	d4bc4 <hal_i2c_write>

000d565e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d565e:	7c00      	ldrb	r0, [r0, #16]
   d5660:	2100      	movs	r1, #0
   d5662:	f7ff bab7 	b.w	d4bd4 <hal_i2c_available>

000d5666 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5666:	7c00      	ldrb	r0, [r0, #16]
   d5668:	2100      	movs	r1, #0
   d566a:	f7ff babb 	b.w	d4be4 <hal_i2c_read>

000d566e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d566e:	7c00      	ldrb	r0, [r0, #16]
   d5670:	2100      	movs	r1, #0
   d5672:	f7ff babf 	b.w	d4bf4 <hal_i2c_peek>

000d5676 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5676:	7c00      	ldrb	r0, [r0, #16]
   d5678:	2100      	movs	r1, #0
   d567a:	f7ff bac3 	b.w	d4c04 <hal_i2c_flush>

000d567e <_ZN7TwoWireD0Ev>:
   d567e:	b510      	push	{r4, lr}
   d5680:	2114      	movs	r1, #20
   d5682:	4604      	mov	r4, r0
   d5684:	f000 fe47 	bl	d6316 <_ZdlPvj>
   d5688:	4620      	mov	r0, r4
   d568a:	bd10      	pop	{r4, pc}

000d568c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d568c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d568e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5692:	4604      	mov	r4, r0
   d5694:	4608      	mov	r0, r1
   d5696:	2100      	movs	r1, #0
   d5698:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d569c:	4b03      	ldr	r3, [pc, #12]	; (d56ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d569e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d56a0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d56a2:	4611      	mov	r1, r2
   d56a4:	f7ff fabe 	bl	d4c24 <hal_i2c_init>
}
   d56a8:	4620      	mov	r0, r4
   d56aa:	bd10      	pop	{r4, pc}
   d56ac:	000d74d4 	.word	0x000d74d4

000d56b0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d56b0:	2300      	movs	r3, #0
   d56b2:	7c00      	ldrb	r0, [r0, #16]
   d56b4:	461a      	mov	r2, r3
   d56b6:	4619      	mov	r1, r3
   d56b8:	f7ff ba6c 	b.w	d4b94 <hal_i2c_begin>

000d56bc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d56bc:	7c00      	ldrb	r0, [r0, #16]
   d56be:	2200      	movs	r2, #0
   d56c0:	f7ff ba70 	b.w	d4ba4 <hal_i2c_begin_transmission>

000d56c4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d56c4:	b2c9      	uxtb	r1, r1
   d56c6:	f7ff bff9 	b.w	d56bc <_ZN7TwoWire17beginTransmissionEh>

000d56ca <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d56ca:	7c00      	ldrb	r0, [r0, #16]
   d56cc:	2200      	movs	r2, #0
   d56ce:	f7ff ba71 	b.w	d4bb4 <hal_i2c_end_transmission>

000d56d2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d56d2:	2101      	movs	r1, #1
   d56d4:	f7ff bff9 	b.w	d56ca <_ZN7TwoWire15endTransmissionEh>

000d56d8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d56d8:	f7ff ba54 	b.w	d4b84 <HAL_Interrupts_Disable_All>

000d56dc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d56dc:	f7ff ba4a 	b.w	d4b74 <HAL_Interrupts_Enable_All>

000d56e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d56e0:	4770      	bx	lr

000d56e2 <_ZN9IPAddressD0Ev>:
   d56e2:	b510      	push	{r4, lr}
   d56e4:	2118      	movs	r1, #24
   d56e6:	4604      	mov	r4, r0
   d56e8:	f000 fe15 	bl	d6316 <_ZdlPvj>
   d56ec:	4620      	mov	r0, r4
   d56ee:	bd10      	pop	{r4, pc}

000d56f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d56f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d56f2:	7d03      	ldrb	r3, [r0, #20]
   d56f4:	2b06      	cmp	r3, #6
{
   d56f6:	b08d      	sub	sp, #52	; 0x34
   d56f8:	460e      	mov	r6, r1
   d56fa:	f100 0704 	add.w	r7, r0, #4
   d56fe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5702:	d012      	beq.n	d572a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5704:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5708:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d570c:	220a      	movs	r2, #10
   d570e:	4630      	mov	r0, r6
   d5710:	f000 f95f 	bl	d59d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5714:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5716:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5718:	d019      	beq.n	d574e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d571a:	2c00      	cmp	r4, #0
   d571c:	d0f4      	beq.n	d5708 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d571e:	212e      	movs	r1, #46	; 0x2e
   d5720:	4630      	mov	r0, r6
   d5722:	f000 f93d 	bl	d59a0 <_ZN5Print5printEc>
   d5726:	4404      	add	r4, r0
   d5728:	e7ee      	b.n	d5708 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d572a:	232f      	movs	r3, #47	; 0x2f
   d572c:	466a      	mov	r2, sp
   d572e:	4639      	mov	r1, r7
   d5730:	200a      	movs	r0, #10
		buf[0] = 0;
   d5732:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5736:	f7ff fa7d 	bl	d4c34 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d573a:	4668      	mov	r0, sp
   d573c:	f001 fcbd 	bl	d70ba <strlen>
   d5740:	6833      	ldr	r3, [r6, #0]
   d5742:	4602      	mov	r2, r0
   d5744:	68db      	ldr	r3, [r3, #12]
   d5746:	4669      	mov	r1, sp
   d5748:	4630      	mov	r0, r6
   d574a:	4798      	blx	r3
   d574c:	4604      	mov	r4, r0
    }
    return n;
}
   d574e:	4620      	mov	r0, r4
   d5750:	b00d      	add	sp, #52	; 0x34
   d5752:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5754 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5754:	b510      	push	{r4, lr}
   d5756:	4b05      	ldr	r3, [pc, #20]	; (d576c <_ZN9IPAddressC1Ev+0x18>)
   d5758:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d575a:	2211      	movs	r2, #17
   d575c:	f840 3b04 	str.w	r3, [r0], #4
   d5760:	2100      	movs	r1, #0
   d5762:	f001 fc51 	bl	d7008 <memset>
}
   d5766:	4620      	mov	r0, r4
   d5768:	bd10      	pop	{r4, pc}
   d576a:	bf00      	nop
   d576c:	000d74fc 	.word	0x000d74fc

000d5770 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5770:	4603      	mov	r3, r0
   d5772:	4a07      	ldr	r2, [pc, #28]	; (d5790 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5774:	b510      	push	{r4, lr}
   d5776:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d577a:	f101 0210 	add.w	r2, r1, #16
   d577e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5782:	f843 4b04 	str.w	r4, [r3], #4
   d5786:	4291      	cmp	r1, r2
   d5788:	d1f9      	bne.n	d577e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d578a:	780a      	ldrb	r2, [r1, #0]
   d578c:	701a      	strb	r2, [r3, #0]
}
   d578e:	bd10      	pop	{r4, pc}
   d5790:	000d74fc 	.word	0x000d74fc

000d5794 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5794:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5796:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d579a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d579e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d57a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d57a6:	2304      	movs	r3, #4
   d57a8:	6041      	str	r1, [r0, #4]
   d57aa:	7503      	strb	r3, [r0, #20]
}
   d57ac:	bd10      	pop	{r4, pc}
	...

000d57b0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d57b0:	b513      	push	{r0, r1, r4, lr}
   d57b2:	4b05      	ldr	r3, [pc, #20]	; (d57c8 <_ZN9IPAddressC1EPKh+0x18>)
   d57b4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d57b6:	78cb      	ldrb	r3, [r1, #3]
   d57b8:	9300      	str	r3, [sp, #0]
   d57ba:	788b      	ldrb	r3, [r1, #2]
   d57bc:	784a      	ldrb	r2, [r1, #1]
   d57be:	7809      	ldrb	r1, [r1, #0]
   d57c0:	f7ff ffe8 	bl	d5794 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d57c4:	b002      	add	sp, #8
   d57c6:	bd10      	pop	{r4, pc}
   d57c8:	000d74fc 	.word	0x000d74fc

000d57cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d57cc:	4b01      	ldr	r3, [pc, #4]	; (d57d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d57ce:	4a02      	ldr	r2, [pc, #8]	; (d57d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d57d0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d57d2:	4770      	bx	lr
   d57d4:	2003e658 	.word	0x2003e658
   d57d8:	000d7508 	.word	0x000d7508

000d57dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d57dc:	2300      	movs	r3, #0
   d57de:	6840      	ldr	r0, [r0, #4]
   d57e0:	461a      	mov	r2, r3
   d57e2:	f7ff bb1b 	b.w	d4e1c <network_connect>

000d57e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d57e6:	6840      	ldr	r0, [r0, #4]
   d57e8:	2200      	movs	r2, #0
   d57ea:	2102      	movs	r1, #2
   d57ec:	f7ff bb26 	b.w	d4e3c <network_disconnect>

000d57f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d57f0:	2200      	movs	r2, #0
   d57f2:	6840      	ldr	r0, [r0, #4]
   d57f4:	4611      	mov	r1, r2
   d57f6:	f7ff bb19 	b.w	d4e2c <network_connecting>

000d57fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d57fa:	2200      	movs	r2, #0
   d57fc:	6840      	ldr	r0, [r0, #4]
   d57fe:	4611      	mov	r1, r2
   d5800:	f7ff bb24 	b.w	d4e4c <network_ready>

000d5804 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5804:	2300      	movs	r3, #0
   d5806:	6840      	ldr	r0, [r0, #4]
   d5808:	461a      	mov	r2, r3
   d580a:	4619      	mov	r1, r3
   d580c:	f7ff bb26 	b.w	d4e5c <network_on>

000d5810 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5810:	2300      	movs	r3, #0
   d5812:	6840      	ldr	r0, [r0, #4]
   d5814:	461a      	mov	r2, r3
   d5816:	4619      	mov	r1, r3
   d5818:	f7ff bb28 	b.w	d4e6c <network_off>

000d581c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d581c:	6840      	ldr	r0, [r0, #4]
   d581e:	2100      	movs	r1, #0
   d5820:	f7ff bb4c 	b.w	d4ebc <network_is_on>

000d5824 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5824:	6840      	ldr	r0, [r0, #4]
   d5826:	2100      	movs	r1, #0
   d5828:	f7ff bb50 	b.w	d4ecc <network_is_off>

000d582c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d582c:	6840      	ldr	r0, [r0, #4]
   d582e:	2200      	movs	r2, #0
   d5830:	f081 0101 	eor.w	r1, r1, #1
   d5834:	f7ff bb22 	b.w	d4e7c <network_listen>

000d5838 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5838:	6840      	ldr	r0, [r0, #4]
   d583a:	2200      	movs	r2, #0
   d583c:	f7ff bb2e 	b.w	d4e9c <network_set_listen_timeout>

000d5840 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5840:	2200      	movs	r2, #0
   d5842:	6840      	ldr	r0, [r0, #4]
   d5844:	4611      	mov	r1, r2
   d5846:	f7ff bb31 	b.w	d4eac <network_get_listen_timeout>

000d584a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d584a:	2200      	movs	r2, #0
   d584c:	6840      	ldr	r0, [r0, #4]
   d584e:	4611      	mov	r1, r2
   d5850:	f7ff bb1c 	b.w	d4e8c <network_listening>

000d5854 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5858:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d585a:	b095      	sub	sp, #84	; 0x54
   d585c:	4616      	mov	r6, r2
   d585e:	460d      	mov	r5, r1
   d5860:	4607      	mov	r7, r0
    IPAddress addr;
   d5862:	f7ff ff77 	bl	d5754 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5866:	4621      	mov	r1, r4
   d5868:	2218      	movs	r2, #24
   d586a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d586c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d586e:	f001 fbcb 	bl	d7008 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5872:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5874:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5878:	4621      	mov	r1, r4
   d587a:	466b      	mov	r3, sp
   d587c:	aa0c      	add	r2, sp, #48	; 0x30
   d587e:	4630      	mov	r0, r6
   d5880:	f7ff f9e8 	bl	d4c54 <netdb_getaddrinfo>
    if (!r) {
   d5884:	4604      	mov	r4, r0
   d5886:	2800      	cmp	r0, #0
   d5888:	d14c      	bne.n	d5924 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d588a:	4602      	mov	r2, r0
   d588c:	2101      	movs	r1, #1
   d588e:	6868      	ldr	r0, [r5, #4]
   d5890:	f7ff fadc 	bl	d4e4c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5894:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5896:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5898:	4622      	mov	r2, r4
   d589a:	6868      	ldr	r0, [r5, #4]
   d589c:	f7ff fad6 	bl	d4e4c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58a0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58a2:	4681      	mov	r9, r0
        bool ok = false;
   d58a4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58a6:	2e00      	cmp	r6, #0
   d58a8:	d03c      	beq.n	d5924 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d58aa:	2900      	cmp	r1, #0
   d58ac:	d13a      	bne.n	d5924 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d58ae:	6873      	ldr	r3, [r6, #4]
   d58b0:	2b02      	cmp	r3, #2
   d58b2:	d003      	beq.n	d58bc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d58b4:	2b0a      	cmp	r3, #10
   d58b6:	d011      	beq.n	d58dc <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58b8:	69f6      	ldr	r6, [r6, #28]
   d58ba:	e7f4      	b.n	d58a6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d58bc:	f1b8 0f00 	cmp.w	r8, #0
   d58c0:	d00a      	beq.n	d58d8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d58c2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d58c4:	a806      	add	r0, sp, #24
   d58c6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d58c8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d58ca:	f7ff ff71 	bl	d57b0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d58ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58d0:	1d3c      	adds	r4, r7, #4
   d58d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58d4:	682b      	ldr	r3, [r5, #0]
   d58d6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d58d8:	4641      	mov	r1, r8
   d58da:	e7ed      	b.n	d58b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d58dc:	f1b9 0f00 	cmp.w	r9, #0
   d58e0:	d101      	bne.n	d58e6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d58e2:	4649      	mov	r1, r9
   d58e4:	e7e8      	b.n	d58b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d58e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58e8:	2210      	movs	r2, #16
   d58ea:	a801      	add	r0, sp, #4
   d58ec:	f001 fb8c 	bl	d7008 <memset>
                    a.v = 6;
   d58f0:	2306      	movs	r3, #6
   d58f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58f6:	ad01      	add	r5, sp, #4
   d58f8:	f104 0308 	add.w	r3, r4, #8
   d58fc:	3418      	adds	r4, #24
   d58fe:	6818      	ldr	r0, [r3, #0]
   d5900:	6859      	ldr	r1, [r3, #4]
   d5902:	462a      	mov	r2, r5
   d5904:	c203      	stmia	r2!, {r0, r1}
   d5906:	3308      	adds	r3, #8
   d5908:	42a3      	cmp	r3, r4
   d590a:	4615      	mov	r5, r2
   d590c:	d1f7      	bne.n	d58fe <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d590e:	a901      	add	r1, sp, #4
   d5910:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5912:	ad07      	add	r5, sp, #28
   d5914:	f7ff ff2c 	bl	d5770 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d591a:	1d3c      	adds	r4, r7, #4
   d591c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d591e:	682b      	ldr	r3, [r5, #0]
   d5920:	7023      	strb	r3, [r4, #0]
   d5922:	e7de      	b.n	d58e2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5924:	9800      	ldr	r0, [sp, #0]
   d5926:	f7ff f98d 	bl	d4c44 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d592a:	4638      	mov	r0, r7
   d592c:	b015      	add	sp, #84	; 0x54
   d592e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5934 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5934:	4b02      	ldr	r3, [pc, #8]	; (d5940 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5936:	4a03      	ldr	r2, [pc, #12]	; (d5944 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5938:	601a      	str	r2, [r3, #0]
   d593a:	2200      	movs	r2, #0
   d593c:	605a      	str	r2, [r3, #4]

} // spark
   d593e:	4770      	bx	lr
   d5940:	2003e65c 	.word	0x2003e65c
   d5944:	000d7514 	.word	0x000d7514

000d5948 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d594a:	4606      	mov	r6, r0
   d594c:	460d      	mov	r5, r1
  size_t n = 0;
   d594e:	188f      	adds	r7, r1, r2
   d5950:	2400      	movs	r4, #0
  while (size--) {
   d5952:	42bd      	cmp	r5, r7
   d5954:	d00c      	beq.n	d5970 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5956:	6833      	ldr	r3, [r6, #0]
   d5958:	f815 1b01 	ldrb.w	r1, [r5], #1
   d595c:	689b      	ldr	r3, [r3, #8]
   d595e:	4630      	mov	r0, r6
   d5960:	4798      	blx	r3
     if (chunk>=0)
   d5962:	1e03      	subs	r3, r0, #0
   d5964:	db01      	blt.n	d596a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5966:	441c      	add	r4, r3
  while (size--) {
   d5968:	e7f3      	b.n	d5952 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d596a:	2c00      	cmp	r4, #0
   d596c:	bf08      	it	eq
   d596e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5970:	4620      	mov	r0, r4
   d5972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5974 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5974:	b513      	push	{r0, r1, r4, lr}
   d5976:	4604      	mov	r4, r0
    }
   d5978:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d597a:	b159      	cbz	r1, d5994 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d597c:	9101      	str	r1, [sp, #4]
   d597e:	f001 fb9c 	bl	d70ba <strlen>
   d5982:	6823      	ldr	r3, [r4, #0]
   d5984:	9901      	ldr	r1, [sp, #4]
   d5986:	68db      	ldr	r3, [r3, #12]
   d5988:	4602      	mov	r2, r0
   d598a:	4620      	mov	r0, r4
    }
   d598c:	b002      	add	sp, #8
   d598e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5992:	4718      	bx	r3
    }
   d5994:	b002      	add	sp, #8
   d5996:	bd10      	pop	{r4, pc}

000d5998 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5998:	b508      	push	{r3, lr}
  return write(str);
   d599a:	f7ff ffeb 	bl	d5974 <_ZN5Print5writeEPKc>
}
   d599e:	bd08      	pop	{r3, pc}

000d59a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d59a0:	6803      	ldr	r3, [r0, #0]
   d59a2:	689b      	ldr	r3, [r3, #8]
   d59a4:	4718      	bx	r3

000d59a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d59a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d59a8:	210d      	movs	r1, #13
{
   d59aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d59ac:	f7ff fff8 	bl	d59a0 <_ZN5Print5printEc>
  n += print('\n');
   d59b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d59b2:	4604      	mov	r4, r0
  n += print('\n');
   d59b4:	4628      	mov	r0, r5
   d59b6:	f7ff fff3 	bl	d59a0 <_ZN5Print5printEc>
  return n;
}
   d59ba:	4420      	add	r0, r4
   d59bc:	bd38      	pop	{r3, r4, r5, pc}

000d59be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d59be:	b538      	push	{r3, r4, r5, lr}
   d59c0:	4605      	mov	r5, r0
  return write(str);
   d59c2:	f7ff ffd7 	bl	d5974 <_ZN5Print5writeEPKc>
   d59c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d59c8:	4628      	mov	r0, r5
   d59ca:	f7ff ffec 	bl	d59a6 <_ZN5Print7printlnEv>
  return n;
}
   d59ce:	4420      	add	r0, r4
   d59d0:	bd38      	pop	{r3, r4, r5, pc}

000d59d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d59d2:	b530      	push	{r4, r5, lr}
   d59d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d59d6:	2300      	movs	r3, #0
   d59d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d59dc:	2a01      	cmp	r2, #1
   d59de:	bf98      	it	ls
   d59e0:	220a      	movls	r2, #10
   d59e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d59e4:	460d      	mov	r5, r1
   d59e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d59ea:	fb01 5312 	mls	r3, r1, r2, r5
   d59ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d59f2:	2b09      	cmp	r3, #9
   d59f4:	bf94      	ite	ls
   d59f6:	3330      	addls	r3, #48	; 0x30
   d59f8:	3337      	addhi	r3, #55	; 0x37
   d59fa:	b2db      	uxtb	r3, r3
  } while(n);
   d59fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d59fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5a02:	d9ef      	bls.n	d59e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5a04:	4621      	mov	r1, r4
   d5a06:	f7ff ffb5 	bl	d5974 <_ZN5Print5writeEPKc>
}
   d5a0a:	b00b      	add	sp, #44	; 0x2c
   d5a0c:	bd30      	pop	{r4, r5, pc}
	...

000d5a10 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a14:	ec55 4b10 	vmov	r4, r5, d0
   d5a18:	4606      	mov	r6, r0
   d5a1a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5a1c:	ee10 2a10 	vmov	r2, s0
   d5a20:	ee10 0a10 	vmov	r0, s0
   d5a24:	462b      	mov	r3, r5
   d5a26:	4629      	mov	r1, r5
   d5a28:	f001 f8d2 	bl	d6bd0 <__aeabi_dcmpun>
   d5a2c:	b140      	cbz	r0, d5a40 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d5a2e:	4953      	ldr	r1, [pc, #332]	; (d5b7c <_ZN5Print10printFloatEdh+0x16c>)
   d5a30:	4630      	mov	r0, r6
   d5a32:	f7ff ff9f 	bl	d5974 <_ZN5Print5writeEPKc>
   d5a36:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5a38:	4650      	mov	r0, sl
   d5a3a:	b003      	add	sp, #12
   d5a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5a40:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5a44:	4b4e      	ldr	r3, [pc, #312]	; (d5b80 <_ZN5Print10printFloatEdh+0x170>)
   d5a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5a4a:	4620      	mov	r0, r4
   d5a4c:	4649      	mov	r1, r9
   d5a4e:	f001 f8bf 	bl	d6bd0 <__aeabi_dcmpun>
   d5a52:	b948      	cbnz	r0, d5a68 <_ZN5Print10printFloatEdh+0x58>
   d5a54:	4b4a      	ldr	r3, [pc, #296]	; (d5b80 <_ZN5Print10printFloatEdh+0x170>)
   d5a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5a5a:	4620      	mov	r0, r4
   d5a5c:	4649      	mov	r1, r9
   d5a5e:	f001 f899 	bl	d6b94 <__aeabi_dcmple>
   d5a62:	b908      	cbnz	r0, d5a68 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5a64:	4947      	ldr	r1, [pc, #284]	; (d5b84 <_ZN5Print10printFloatEdh+0x174>)
   d5a66:	e7e3      	b.n	d5a30 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5a68:	4b47      	ldr	r3, [pc, #284]	; (d5b88 <_ZN5Print10printFloatEdh+0x178>)
   d5a6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5a6e:	4620      	mov	r0, r4
   d5a70:	4629      	mov	r1, r5
   d5a72:	f001 f8a3 	bl	d6bbc <__aeabi_dcmpgt>
   d5a76:	b108      	cbz	r0, d5a7c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d5a78:	4944      	ldr	r1, [pc, #272]	; (d5b8c <_ZN5Print10printFloatEdh+0x17c>)
   d5a7a:	e7d9      	b.n	d5a30 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5a7c:	4b44      	ldr	r3, [pc, #272]	; (d5b90 <_ZN5Print10printFloatEdh+0x180>)
   d5a7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5a82:	4620      	mov	r0, r4
   d5a84:	4629      	mov	r1, r5
   d5a86:	f001 f87b 	bl	d6b80 <__aeabi_dcmplt>
   d5a8a:	2800      	cmp	r0, #0
   d5a8c:	d1f4      	bne.n	d5a78 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d5a8e:	2200      	movs	r2, #0
   d5a90:	2300      	movs	r3, #0
   d5a92:	4620      	mov	r0, r4
   d5a94:	4629      	mov	r1, r5
   d5a96:	f001 f873 	bl	d6b80 <__aeabi_dcmplt>
   d5a9a:	b1d0      	cbz	r0, d5ad2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d5a9c:	212d      	movs	r1, #45	; 0x2d
   d5a9e:	4630      	mov	r0, r6
   d5aa0:	f7ff ff7e 	bl	d59a0 <_ZN5Print5printEc>
     number = -number;
   d5aa4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d5aa8:	4682      	mov	sl, r0
     number = -number;
   d5aaa:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5aac:	4939      	ldr	r1, [pc, #228]	; (d5b94 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5aae:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5b9c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d5ab2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d5ab6:	2000      	movs	r0, #0
    rounding /= 10.0;
   d5ab8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5abc:	fa5f f38b 	uxtb.w	r3, fp
   d5ac0:	429f      	cmp	r7, r3
   d5ac2:	d908      	bls.n	d5ad6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d5ac4:	4642      	mov	r2, r8
   d5ac6:	464b      	mov	r3, r9
   d5ac8:	f000 ff12 	bl	d68f0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5acc:	f10b 0b01 	add.w	fp, fp, #1
   d5ad0:	e7f4      	b.n	d5abc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d5ad2:	4682      	mov	sl, r0
   d5ad4:	e7ea      	b.n	d5aac <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d5ad6:	4622      	mov	r2, r4
   d5ad8:	462b      	mov	r3, r5
   d5ada:	f000 fc29 	bl	d6330 <__adddf3>
   d5ade:	460d      	mov	r5, r1
   d5ae0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5ae2:	f001 f8b3 	bl	d6c4c <__aeabi_d2uiz>
   d5ae6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d5ae8:	f000 fd5e 	bl	d65a8 <__aeabi_ui2d>
   d5aec:	4602      	mov	r2, r0
   d5aee:	460b      	mov	r3, r1
   d5af0:	4620      	mov	r0, r4
   d5af2:	4629      	mov	r1, r5
   d5af4:	f000 fc1a 	bl	d632c <__aeabi_dsub>
        return printNumber(val, base) + t;
   d5af8:	220a      	movs	r2, #10
   d5afa:	4604      	mov	r4, r0
   d5afc:	460d      	mov	r5, r1
   d5afe:	4630      	mov	r0, r6
   d5b00:	4641      	mov	r1, r8
   d5b02:	f7ff ff66 	bl	d59d2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d5b06:	4482      	add	sl, r0
  if (digits > 0) {
   d5b08:	b127      	cbz	r7, d5b14 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5b0a:	4923      	ldr	r1, [pc, #140]	; (d5b98 <_ZN5Print10printFloatEdh+0x188>)
   d5b0c:	4630      	mov	r0, r6
   d5b0e:	f7ff ff31 	bl	d5974 <_ZN5Print5writeEPKc>
    n += print(".");
   d5b12:	4482      	add	sl, r0
    remainder *= 10.0;
   d5b14:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5b9c <_ZN5Print10printFloatEdh+0x18c>
   d5b18:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5b1c:	3f01      	subs	r7, #1
   d5b1e:	b2ff      	uxtb	r7, r7
   d5b20:	2fff      	cmp	r7, #255	; 0xff
   d5b22:	d089      	beq.n	d5a38 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5b24:	4642      	mov	r2, r8
   d5b26:	464b      	mov	r3, r9
   d5b28:	4620      	mov	r0, r4
   d5b2a:	4629      	mov	r1, r5
   d5b2c:	f000 fdb6 	bl	d669c <__aeabi_dmul>
   d5b30:	4604      	mov	r4, r0
   d5b32:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5b34:	f001 f862 	bl	d6bfc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5b38:	f1b0 0b00 	subs.w	fp, r0, #0
   d5b3c:	da1a      	bge.n	d5b74 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5b3e:	212d      	movs	r1, #45	; 0x2d
   d5b40:	4630      	mov	r0, r6
   d5b42:	f7ff ff2d 	bl	d59a0 <_ZN5Print5printEc>
            val = -n;
   d5b46:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5b4a:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5b4c:	220a      	movs	r2, #10
   d5b4e:	4630      	mov	r0, r6
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	f7ff ff3e 	bl	d59d2 <_ZN5Print11printNumberEmh>
   d5b56:	9b01      	ldr	r3, [sp, #4]
   d5b58:	4418      	add	r0, r3
    n += print(toPrint);
   d5b5a:	4482      	add	sl, r0
    remainder -= toPrint;
   d5b5c:	4658      	mov	r0, fp
   d5b5e:	f000 fd33 	bl	d65c8 <__aeabi_i2d>
   d5b62:	4602      	mov	r2, r0
   d5b64:	460b      	mov	r3, r1
   d5b66:	4620      	mov	r0, r4
   d5b68:	4629      	mov	r1, r5
   d5b6a:	f000 fbdf 	bl	d632c <__aeabi_dsub>
   d5b6e:	4604      	mov	r4, r0
   d5b70:	460d      	mov	r5, r1
  while (digits-- > 0)
   d5b72:	e7d3      	b.n	d5b1c <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5b74:	4659      	mov	r1, fp
        size_t t = 0;
   d5b76:	2300      	movs	r3, #0
   d5b78:	e7e8      	b.n	d5b4c <_ZN5Print10printFloatEdh+0x13c>
   d5b7a:	bf00      	nop
   d5b7c:	000d7548 	.word	0x000d7548
   d5b80:	7fefffff 	.word	0x7fefffff
   d5b84:	000d754c 	.word	0x000d754c
   d5b88:	41efffff 	.word	0x41efffff
   d5b8c:	000d7550 	.word	0x000d7550
   d5b90:	c1efffff 	.word	0xc1efffff
   d5b94:	3fe00000 	.word	0x3fe00000
   d5b98:	000d7554 	.word	0x000d7554
   d5b9c:	40240000 	.word	0x40240000

000d5ba0 <_ZN5Print5printEfi>:
{
   d5ba0:	b538      	push	{r3, r4, r5, lr}
   d5ba2:	4604      	mov	r4, r0
   d5ba4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d5ba8:	b2cd      	uxtb	r5, r1
   d5baa:	f000 fd1f 	bl	d65ec <__aeabi_f2d>
   d5bae:	ec41 0b10 	vmov	d0, r0, r1
   d5bb2:	4629      	mov	r1, r5
   d5bb4:	4620      	mov	r0, r4
}
   d5bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d5bba:	f7ff bf29 	b.w	d5a10 <_ZN5Print10printFloatEdh>

000d5bbe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5bbe:	b510      	push	{r4, lr}
   d5bc0:	4604      	mov	r4, r0
   d5bc2:	f7ff f9da 	bl	d4f7a <_ZNSt14_Function_baseD1Ev>
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	bd10      	pop	{r4, pc}
	...

000d5bcc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5bcc:	4803      	ldr	r0, [pc, #12]	; (d5bdc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5bce:	4a04      	ldr	r2, [pc, #16]	; (d5be0 <_GLOBAL__sub_I_RGB+0x14>)
   d5bd0:	4904      	ldr	r1, [pc, #16]	; (d5be4 <_GLOBAL__sub_I_RGB+0x18>)
   d5bd2:	2300      	movs	r3, #0
   d5bd4:	6083      	str	r3, [r0, #8]
   d5bd6:	f000 bb99 	b.w	d630c <__aeabi_atexit>
   d5bda:	bf00      	nop
   d5bdc:	2003e664 	.word	0x2003e664
   d5be0:	2003e5ec 	.word	0x2003e5ec
   d5be4:	000d5bbf 	.word	0x000d5bbf

000d5be8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5be8:	b510      	push	{r4, lr}
   d5bea:	4604      	mov	r4, r0
   d5bec:	4608      	mov	r0, r1
{
    _spi = spi;
   d5bee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5bf0:	f7ff f838 	bl	d4c64 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5bf4:	2300      	movs	r3, #0
   d5bf6:	6063      	str	r3, [r4, #4]
}
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bd10      	pop	{r4, pc}

000d5bfc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5c00:	ec57 6b10 	vmov	r6, r7, d0
   d5c04:	4680      	mov	r8, r0
   d5c06:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d5c08:	ee10 0a10 	vmov	r0, s0
   d5c0c:	2200      	movs	r2, #0
   d5c0e:	2300      	movs	r3, #0
   d5c10:	4639      	mov	r1, r7
   d5c12:	f000 ffb5 	bl	d6b80 <__aeabi_dcmplt>
   d5c16:	b128      	cbz	r0, d5c24 <_Z4dtoadhPc+0x28>
        val = -val;
   d5c18:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d5c1c:	461f      	mov	r7, r3
        *sout++ = '-';
   d5c1e:	232d      	movs	r3, #45	; 0x2d
   d5c20:	f804 3b01 	strb.w	r3, [r4], #1
   d5c24:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5c26:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5c2a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d5c2c:	b2d9      	uxtb	r1, r3
   d5c2e:	4588      	cmp	r8, r1
   d5c30:	d903      	bls.n	d5c3a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d5c32:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d5c36:	3301      	adds	r3, #1
   d5c38:	e7f8      	b.n	d5c2c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d5c3a:	4648      	mov	r0, r9
   d5c3c:	f000 fcc4 	bl	d65c8 <__aeabi_i2d>
   d5c40:	4632      	mov	r2, r6
   d5c42:	463b      	mov	r3, r7
   d5c44:	f000 fd2a 	bl	d669c <__aeabi_dmul>
   d5c48:	4606      	mov	r6, r0
   d5c4a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d5c4c:	f001 f836 	bl	d6cbc <__aeabi_d2ulz>
   d5c50:	4605      	mov	r5, r0
   d5c52:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5c54:	f000 fcec 	bl	d6630 <__aeabi_ul2d>
   d5c58:	4602      	mov	r2, r0
   d5c5a:	460b      	mov	r3, r1
   d5c5c:	4630      	mov	r0, r6
   d5c5e:	4639      	mov	r1, r7
   d5c60:	f000 fb64 	bl	d632c <__aeabi_dsub>
   d5c64:	4b13      	ldr	r3, [pc, #76]	; (d5cb4 <_Z4dtoadhPc+0xb8>)
   d5c66:	2200      	movs	r2, #0
   d5c68:	f000 ff9e 	bl	d6ba8 <__aeabi_dcmpge>
   d5c6c:	b110      	cbz	r0, d5c74 <_Z4dtoadhPc+0x78>
        fixed++;
   d5c6e:	3501      	adds	r5, #1
   d5c70:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5c74:	464a      	mov	r2, r9
   d5c76:	4628      	mov	r0, r5
   d5c78:	17d3      	asrs	r3, r2, #31
   d5c7a:	4651      	mov	r1, sl
   d5c7c:	f001 f806 	bl	d6c8c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5c80:	2301      	movs	r3, #1
   d5c82:	4615      	mov	r5, r2
   d5c84:	4621      	mov	r1, r4
   d5c86:	220a      	movs	r2, #10
   d5c88:	f000 f9db 	bl	d6042 <ultoa>
    if (prec) {
   d5c8c:	f1b8 0f00 	cmp.w	r8, #0
   d5c90:	d00d      	beq.n	d5cae <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d5c92:	4620      	mov	r0, r4
   d5c94:	f001 fa11 	bl	d70ba <strlen>
        *sout++ = '.';
   d5c98:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d5c9a:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d5c9c:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d5c9e:	220a      	movs	r2, #10
   d5ca0:	4643      	mov	r3, r8
   d5ca2:	4628      	mov	r0, r5
   d5ca4:	3101      	adds	r1, #1
    }
}
   d5ca6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d5caa:	f000 b9ca 	b.w	d6042 <ultoa>
}
   d5cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5cb2:	bf00      	nop
   d5cb4:	3fe00000 	.word	0x3fe00000

000d5cb8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5cb8:	b510      	push	{r4, lr}
   d5cba:	4604      	mov	r4, r0
{
	free(buffer);
   d5cbc:	6800      	ldr	r0, [r0, #0]
   d5cbe:	f7ff f915 	bl	d4eec <free>
}
   d5cc2:	4620      	mov	r0, r4
   d5cc4:	bd10      	pop	{r4, pc}

000d5cc6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5cc6:	b510      	push	{r4, lr}
   d5cc8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5cca:	6800      	ldr	r0, [r0, #0]
   d5ccc:	b108      	cbz	r0, d5cd2 <_ZN6String10invalidateEv+0xc>
   d5cce:	f7ff f90d 	bl	d4eec <free>
	buffer = NULL;
   d5cd2:	2300      	movs	r3, #0
	capacity = len = 0;
   d5cd4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5cd8:	6023      	str	r3, [r4, #0]
}
   d5cda:	bd10      	pop	{r4, pc}

000d5cdc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5cdc:	b538      	push	{r3, r4, r5, lr}
   d5cde:	4604      	mov	r4, r0
   d5ce0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5ce2:	6800      	ldr	r0, [r0, #0]
   d5ce4:	3101      	adds	r1, #1
   d5ce6:	f7ff f909 	bl	d4efc <realloc>
	if (newbuffer) {
   d5cea:	b110      	cbz	r0, d5cf2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5cec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5cf0:	2001      	movs	r0, #1
	}
	return 0;
}
   d5cf2:	bd38      	pop	{r3, r4, r5, pc}

000d5cf4 <_ZN6String7reserveEj>:
{
   d5cf4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5cf6:	6803      	ldr	r3, [r0, #0]
{
   d5cf8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5cfa:	b123      	cbz	r3, d5d06 <_ZN6String7reserveEj+0x12>
   d5cfc:	6843      	ldr	r3, [r0, #4]
   d5cfe:	428b      	cmp	r3, r1
   d5d00:	d301      	bcc.n	d5d06 <_ZN6String7reserveEj+0x12>
   d5d02:	2001      	movs	r0, #1
}
   d5d04:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5d06:	4620      	mov	r0, r4
   d5d08:	f7ff ffe8 	bl	d5cdc <_ZN6String12changeBufferEj>
   d5d0c:	2800      	cmp	r0, #0
   d5d0e:	d0f9      	beq.n	d5d04 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5d10:	68a3      	ldr	r3, [r4, #8]
   d5d12:	2b00      	cmp	r3, #0
   d5d14:	d1f5      	bne.n	d5d02 <_ZN6String7reserveEj+0xe>
   d5d16:	6822      	ldr	r2, [r4, #0]
   d5d18:	7013      	strb	r3, [r2, #0]
   d5d1a:	e7f2      	b.n	d5d02 <_ZN6String7reserveEj+0xe>

000d5d1c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5d1e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5d20:	4611      	mov	r1, r2
   d5d22:	9201      	str	r2, [sp, #4]
{
   d5d24:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5d26:	f7ff ffe5 	bl	d5cf4 <_ZN6String7reserveEj>
   d5d2a:	9a01      	ldr	r2, [sp, #4]
   d5d2c:	b928      	cbnz	r0, d5d3a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5d2e:	4620      	mov	r0, r4
   d5d30:	f7ff ffc9 	bl	d5cc6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5d34:	4620      	mov	r0, r4
   d5d36:	b003      	add	sp, #12
   d5d38:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5d3a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5d3c:	4629      	mov	r1, r5
   d5d3e:	6820      	ldr	r0, [r4, #0]
   d5d40:	f001 f954 	bl	d6fec <memcpy>
	buffer[len] = 0;
   d5d44:	6822      	ldr	r2, [r4, #0]
   d5d46:	68a3      	ldr	r3, [r4, #8]
   d5d48:	2100      	movs	r1, #0
   d5d4a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5d4c:	e7f2      	b.n	d5d34 <_ZN6String4copyEPKcj+0x18>

000d5d4e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5d4e:	b513      	push	{r0, r1, r4, lr}
   d5d50:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5d52:	b159      	cbz	r1, d5d6c <_ZN6StringaSEPKc+0x1e>
   d5d54:	4608      	mov	r0, r1
   d5d56:	9101      	str	r1, [sp, #4]
   d5d58:	f001 f9af 	bl	d70ba <strlen>
   d5d5c:	9901      	ldr	r1, [sp, #4]
   d5d5e:	4602      	mov	r2, r0
   d5d60:	4620      	mov	r0, r4
   d5d62:	f7ff ffdb 	bl	d5d1c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5d66:	4620      	mov	r0, r4
   d5d68:	b002      	add	sp, #8
   d5d6a:	bd10      	pop	{r4, pc}
	else invalidate();
   d5d6c:	f7ff ffab 	bl	d5cc6 <_ZN6String10invalidateEv>
   d5d70:	e7f9      	b.n	d5d66 <_ZN6StringaSEPKc+0x18>

000d5d72 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d5d72:	b530      	push	{r4, r5, lr}
   d5d74:	4604      	mov	r4, r0
	buffer = NULL;
   d5d76:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d5d78:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d5d7a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5d7e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5d80:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d5d82:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d5d86:	b2cd      	uxtb	r5, r1
   d5d88:	f000 fc30 	bl	d65ec <__aeabi_f2d>
   d5d8c:	ec41 0b10 	vmov	d0, r0, r1
   d5d90:	a901      	add	r1, sp, #4
   d5d92:	4628      	mov	r0, r5
   d5d94:	f7ff ff32 	bl	d5bfc <_Z4dtoadhPc>
        *this = buf;
   d5d98:	a901      	add	r1, sp, #4
   d5d9a:	4620      	mov	r0, r4
   d5d9c:	f7ff ffd7 	bl	d5d4e <_ZN6StringaSEPKc>
}
   d5da0:	4620      	mov	r0, r4
   d5da2:	b00b      	add	sp, #44	; 0x2c
   d5da4:	bd30      	pop	{r4, r5, pc}

000d5da6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5da6:	b510      	push	{r4, lr}
   d5da8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5daa:	6800      	ldr	r0, [r0, #0]
   d5dac:	b118      	cbz	r0, d5db6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5dae:	f7ff f89d 	bl	d4eec <free>
            wakeupSource_ = nullptr;
   d5db2:	2300      	movs	r3, #0
   d5db4:	6023      	str	r3, [r4, #0]
        }
    }
   d5db6:	bd10      	pop	{r4, pc}

000d5db8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5db8:	b510      	push	{r4, lr}
   d5dba:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5dbc:	f7ff fff3 	bl	d5da6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5dc0:	4620      	mov	r0, r4
   d5dc2:	bd10      	pop	{r4, pc}

000d5dc4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5dc4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5dc6:	4b09      	ldr	r3, [pc, #36]	; (d5dec <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5dc8:	4c09      	ldr	r4, [pc, #36]	; (d5df0 <_GLOBAL__sub_I_System+0x2c>)
   d5dca:	2202      	movs	r2, #2
   d5dcc:	2000      	movs	r0, #0
   d5dce:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5dd0:	4b08      	ldr	r3, [pc, #32]	; (d5df4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5dd2:	6020      	str	r0, [r4, #0]
   d5dd4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5dd6:	71a0      	strb	r0, [r4, #6]
   d5dd8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5dda:	f7fe ffd3 	bl	d4d84 <set_system_mode>
SystemClass System;
   d5dde:	4620      	mov	r0, r4
   d5de0:	4a05      	ldr	r2, [pc, #20]	; (d5df8 <_GLOBAL__sub_I_System+0x34>)
   d5de2:	4906      	ldr	r1, [pc, #24]	; (d5dfc <_GLOBAL__sub_I_System+0x38>)
   d5de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5de8:	f000 ba90 	b.w	d630c <__aeabi_atexit>
   d5dec:	2003e680 	.word	0x2003e680
   d5df0:	2003e674 	.word	0x2003e674
   d5df4:	ffff0000 	.word	0xffff0000
   d5df8:	2003e5ec 	.word	0x2003e5ec
   d5dfc:	000d5db9 	.word	0x000d5db9

000d5e00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5e00:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5e02:	681a      	ldr	r2, [r3, #0]
   d5e04:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5e06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5e08:	4770      	bx	lr
   d5e0a:	bf00      	nop
   d5e0c:	2003e584 	.word	0x2003e584
   d5e10:	2003e684 	.word	0x2003e684

000d5e14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5e14:	4770      	bx	lr

000d5e16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e16:	7441      	strb	r1, [r0, #17]
}
   d5e18:	4770      	bx	lr

000d5e1a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5e1a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5e1c:	7c00      	ldrb	r0, [r0, #16]
   d5e1e:	f7fe ff69 	bl	d4cf4 <hal_usart_available_data_for_write>
}
   d5e22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e26:	bd08      	pop	{r3, pc}

000d5e28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5e28:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5e2a:	7c00      	ldrb	r0, [r0, #16]
   d5e2c:	f7fe ff3a 	bl	d4ca4 <hal_usart_available>
}
   d5e30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e34:	bd08      	pop	{r3, pc}

000d5e36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5e36:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5e38:	7c00      	ldrb	r0, [r0, #16]
   d5e3a:	f7fe ff43 	bl	d4cc4 <hal_usart_peek>
}
   d5e3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5e42:	bd08      	pop	{r3, pc}

000d5e44 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5e44:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5e46:	7c00      	ldrb	r0, [r0, #16]
   d5e48:	f7fe ff34 	bl	d4cb4 <hal_usart_read>
}
   d5e4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5e50:	bd08      	pop	{r3, pc}

000d5e52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5e52:	7c00      	ldrb	r0, [r0, #16]
   d5e54:	f7fe bf3e 	b.w	d4cd4 <hal_usart_flush>

000d5e58 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e5a:	7c45      	ldrb	r5, [r0, #17]
{
   d5e5c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e5e:	b12d      	cbz	r5, d5e6c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5e60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5e62:	b003      	add	sp, #12
   d5e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5e68:	f7fe bf14 	b.w	d4c94 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5e6c:	7c00      	ldrb	r0, [r0, #16]
   d5e6e:	9101      	str	r1, [sp, #4]
   d5e70:	f7fe ff40 	bl	d4cf4 <hal_usart_available_data_for_write>
   d5e74:	2800      	cmp	r0, #0
   d5e76:	9901      	ldr	r1, [sp, #4]
   d5e78:	dcf2      	bgt.n	d5e60 <_ZN11USARTSerial5writeEh+0x8>
}
   d5e7a:	4628      	mov	r0, r5
   d5e7c:	b003      	add	sp, #12
   d5e7e:	bd30      	pop	{r4, r5, pc}

000d5e80 <_ZN11USARTSerialD0Ev>:
   d5e80:	b510      	push	{r4, lr}
   d5e82:	2114      	movs	r1, #20
   d5e84:	4604      	mov	r4, r0
   d5e86:	f000 fa46 	bl	d6316 <_ZdlPvj>
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	bd10      	pop	{r4, pc}
	...

000d5e90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5e90:	b510      	push	{r4, lr}
   d5e92:	f04f 0c00 	mov.w	ip, #0
   d5e96:	4604      	mov	r4, r0
   d5e98:	4608      	mov	r0, r1
   d5e9a:	4611      	mov	r1, r2
   d5e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5ea0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5ea4:	4a04      	ldr	r2, [pc, #16]	; (d5eb8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5ea6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5ea8:	2201      	movs	r2, #1
  _serial = serial;
   d5eaa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5eac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5eae:	461a      	mov	r2, r3
   d5eb0:	f7fe fee8 	bl	d4c84 <hal_usart_init>
}
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	bd10      	pop	{r4, pc}
   d5eb8:	000d757c 	.word	0x000d757c

000d5ebc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5ebc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5ebe:	4c0e      	ldr	r4, [pc, #56]	; (d5ef8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5ec0:	7821      	ldrb	r1, [r4, #0]
   d5ec2:	f3bf 8f5b 	dmb	ish
   d5ec6:	f011 0101 	ands.w	r1, r1, #1
   d5eca:	d112      	bne.n	d5ef2 <_Z22__fetch_global_Serial1v+0x36>
   d5ecc:	4620      	mov	r0, r4
   d5ece:	9101      	str	r1, [sp, #4]
   d5ed0:	f7fe f8e5 	bl	d409e <__cxa_guard_acquire>
   d5ed4:	9901      	ldr	r1, [sp, #4]
   d5ed6:	b160      	cbz	r0, d5ef2 <_Z22__fetch_global_Serial1v+0x36>
   d5ed8:	4a08      	ldr	r2, [pc, #32]	; (d5efc <_Z22__fetch_global_Serial1v+0x40>)
   d5eda:	4b09      	ldr	r3, [pc, #36]	; (d5f00 <_Z22__fetch_global_Serial1v+0x44>)
   d5edc:	4809      	ldr	r0, [pc, #36]	; (d5f04 <_Z22__fetch_global_Serial1v+0x48>)
   d5ede:	f7ff ffd7 	bl	d5e90 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5ee2:	4620      	mov	r0, r4
   d5ee4:	f7fe f8e0 	bl	d40a8 <__cxa_guard_release>
   d5ee8:	4a07      	ldr	r2, [pc, #28]	; (d5f08 <_Z22__fetch_global_Serial1v+0x4c>)
   d5eea:	4908      	ldr	r1, [pc, #32]	; (d5f0c <_Z22__fetch_global_Serial1v+0x50>)
   d5eec:	4805      	ldr	r0, [pc, #20]	; (d5f04 <_Z22__fetch_global_Serial1v+0x48>)
   d5eee:	f000 fa0d 	bl	d630c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5ef2:	4804      	ldr	r0, [pc, #16]	; (d5f04 <_Z22__fetch_global_Serial1v+0x48>)
   d5ef4:	b002      	add	sp, #8
   d5ef6:	bd10      	pop	{r4, pc}
   d5ef8:	2003e688 	.word	0x2003e688
   d5efc:	2003e68c 	.word	0x2003e68c
   d5f00:	2003e710 	.word	0x2003e710
   d5f04:	2003e794 	.word	0x2003e794
   d5f08:	2003e5ec 	.word	0x2003e5ec
   d5f0c:	000d5e15 	.word	0x000d5e15

000d5f10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f10:	7441      	strb	r1, [r0, #17]
}
   d5f12:	4770      	bx	lr

000d5f14 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f14:	4770      	bx	lr

000d5f16 <_ZN9USBSerial4readEv>:
{
   d5f16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f18:	2100      	movs	r1, #0
   d5f1a:	7c00      	ldrb	r0, [r0, #16]
   d5f1c:	f7fe ff12 	bl	d4d44 <HAL_USB_USART_Receive_Data>
}
   d5f20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f24:	bd08      	pop	{r3, pc}

000d5f26 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5f26:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f28:	2101      	movs	r1, #1
   d5f2a:	7c00      	ldrb	r0, [r0, #16]
   d5f2c:	f7fe ff0a 	bl	d4d44 <HAL_USB_USART_Receive_Data>
}
   d5f30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f34:	bd08      	pop	{r3, pc}

000d5f36 <_ZN9USBSerial17availableForWriteEv>:
{
   d5f36:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5f38:	7c00      	ldrb	r0, [r0, #16]
   d5f3a:	f7fe fefb 	bl	d4d34 <HAL_USB_USART_Available_Data_For_Write>
}
   d5f3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f42:	bd08      	pop	{r3, pc}

000d5f44 <_ZN9USBSerial9availableEv>:
{
   d5f44:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5f46:	7c00      	ldrb	r0, [r0, #16]
   d5f48:	f7fe feec 	bl	d4d24 <HAL_USB_USART_Available_Data>
}
   d5f4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f50:	bd08      	pop	{r3, pc}

000d5f52 <_ZN9USBSerial5writeEh>:
{
   d5f52:	b513      	push	{r0, r1, r4, lr}
   d5f54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f56:	7c00      	ldrb	r0, [r0, #16]
{
   d5f58:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f5a:	f7fe feeb 	bl	d4d34 <HAL_USB_USART_Available_Data_For_Write>
   d5f5e:	2800      	cmp	r0, #0
   d5f60:	9901      	ldr	r1, [sp, #4]
   d5f62:	dc01      	bgt.n	d5f68 <_ZN9USBSerial5writeEh+0x16>
   d5f64:	7c60      	ldrb	r0, [r4, #17]
   d5f66:	b120      	cbz	r0, d5f72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5f68:	7c20      	ldrb	r0, [r4, #16]
   d5f6a:	f7fe fef3 	bl	d4d54 <HAL_USB_USART_Send_Data>
   d5f6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5f72:	b002      	add	sp, #8
   d5f74:	bd10      	pop	{r4, pc}

000d5f76 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5f76:	7c00      	ldrb	r0, [r0, #16]
   d5f78:	f7fe bef4 	b.w	d4d64 <HAL_USB_USART_Flush_Data>

000d5f7c <_ZN9USBSerialD0Ev>:
   d5f7c:	b510      	push	{r4, lr}
   d5f7e:	2114      	movs	r1, #20
   d5f80:	4604      	mov	r4, r0
   d5f82:	f000 f9c8 	bl	d6316 <_ZdlPvj>
   d5f86:	4620      	mov	r0, r4
   d5f88:	bd10      	pop	{r4, pc}
	...

000d5f8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f8c:	b510      	push	{r4, lr}
   d5f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f92:	4604      	mov	r4, r0
   d5f94:	4608      	mov	r0, r1
   d5f96:	2100      	movs	r1, #0
   d5f98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5f9c:	4b04      	ldr	r3, [pc, #16]	; (d5fb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5f9e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5fa0:	2301      	movs	r3, #1
  _serial = serial;
   d5fa2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5fa4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5fa6:	4611      	mov	r1, r2
   d5fa8:	f7fe feac 	bl	d4d04 <HAL_USB_USART_Init>
}
   d5fac:	4620      	mov	r0, r4
   d5fae:	bd10      	pop	{r4, pc}
   d5fb0:	000d75ac 	.word	0x000d75ac

000d5fb4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5fb4:	7c00      	ldrb	r0, [r0, #16]
   d5fb6:	2200      	movs	r2, #0
   d5fb8:	f7fe beac 	b.w	d4d14 <HAL_USB_USART_Begin>

000d5fbc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5fbc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5fbe:	2214      	movs	r2, #20
{
   d5fc0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5fc2:	2100      	movs	r1, #0
   d5fc4:	f001 f820 	bl	d7008 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5fc8:	4620      	mov	r0, r4
   d5fca:	bd10      	pop	{r4, pc}

000d5fcc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5fcc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5fce:	4c10      	ldr	r4, [pc, #64]	; (d6010 <_Z16_fetch_usbserialv+0x44>)
{
   d5fd0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5fd2:	a803      	add	r0, sp, #12
   d5fd4:	f7ff fff2 	bl	d5fbc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5fd8:	7821      	ldrb	r1, [r4, #0]
   d5fda:	f3bf 8f5b 	dmb	ish
   d5fde:	f011 0101 	ands.w	r1, r1, #1
   d5fe2:	d111      	bne.n	d6008 <_Z16_fetch_usbserialv+0x3c>
   d5fe4:	4620      	mov	r0, r4
   d5fe6:	9101      	str	r1, [sp, #4]
   d5fe8:	f7fe f859 	bl	d409e <__cxa_guard_acquire>
   d5fec:	9901      	ldr	r1, [sp, #4]
   d5fee:	b158      	cbz	r0, d6008 <_Z16_fetch_usbserialv+0x3c>
   d5ff0:	aa03      	add	r2, sp, #12
   d5ff2:	4808      	ldr	r0, [pc, #32]	; (d6014 <_Z16_fetch_usbserialv+0x48>)
   d5ff4:	f7ff ffca 	bl	d5f8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5ff8:	4620      	mov	r0, r4
   d5ffa:	f7fe f855 	bl	d40a8 <__cxa_guard_release>
   d5ffe:	4a06      	ldr	r2, [pc, #24]	; (d6018 <_Z16_fetch_usbserialv+0x4c>)
   d6000:	4906      	ldr	r1, [pc, #24]	; (d601c <_Z16_fetch_usbserialv+0x50>)
   d6002:	4804      	ldr	r0, [pc, #16]	; (d6014 <_Z16_fetch_usbserialv+0x48>)
   d6004:	f000 f982 	bl	d630c <__aeabi_atexit>
	return _usbserial;
}
   d6008:	4802      	ldr	r0, [pc, #8]	; (d6014 <_Z16_fetch_usbserialv+0x48>)
   d600a:	b008      	add	sp, #32
   d600c:	bd10      	pop	{r4, pc}
   d600e:	bf00      	nop
   d6010:	2003e7a8 	.word	0x2003e7a8
   d6014:	2003e7ac 	.word	0x2003e7ac
   d6018:	2003e5ec 	.word	0x2003e5ec
   d601c:	000d5f15 	.word	0x000d5f15

000d6020 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6020:	b510      	push	{r4, lr}
   d6022:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6024:	f001 f849 	bl	d70ba <strlen>
   d6028:	3801      	subs	r0, #1
   d602a:	1823      	adds	r3, r4, r0
   d602c:	4620      	mov	r0, r4
	while(i<j){
   d602e:	4283      	cmp	r3, r0
   d6030:	d906      	bls.n	d6040 <_Z11str_reversePc+0x20>
		c = *i;
   d6032:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6034:	7819      	ldrb	r1, [r3, #0]
   d6036:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d603a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d603e:	e7f6      	b.n	d602e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6040:	bd10      	pop	{r4, pc}

000d6042 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6042:	b570      	push	{r4, r5, r6, lr}
   d6044:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6046:	1e91      	subs	r1, r2, #2
   d6048:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d604a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d604c:	d822      	bhi.n	d6094 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d604e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6050:	b16d      	cbz	r5, d606e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6052:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6056:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d605a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d605c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d605e:	bf94      	ite	ls
   d6060:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6062:	3157      	addhi	r1, #87	; 0x57
   d6064:	b2c9      	uxtb	r1, r1
   d6066:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d606a:	4635      	mov	r5, r6
	while(a){
   d606c:	e7f0      	b.n	d6050 <ultoa+0xe>
   d606e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6070:	4423      	add	r3, r4
            *ptr++ = '0';
   d6072:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6074:	4293      	cmp	r3, r2
   d6076:	d902      	bls.n	d607e <ultoa+0x3c>
            *ptr++ = '0';
   d6078:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d607c:	e7fa      	b.n	d6074 <ultoa+0x32>
   d607e:	1a1a      	subs	r2, r3, r0
   d6080:	4283      	cmp	r3, r0
   d6082:	bf38      	it	cc
   d6084:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6086:	2300      	movs	r3, #0
   d6088:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d608a:	4620      	mov	r0, r4
   d608c:	f7ff ffc8 	bl	d6020 <_Z11str_reversePc>
	return buffer;
   d6090:	4620      	mov	r0, r4
}
   d6092:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6094:	2000      	movs	r0, #0
   d6096:	e7fc      	b.n	d6092 <ultoa+0x50>

000d6098 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6098:	4b01      	ldr	r3, [pc, #4]	; (d60a0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d609a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d609c:	4770      	bx	lr
   d609e:	bf00      	nop
   d60a0:	2003e588 	.word	0x2003e588

000d60a4 <serialEventRun>:
{
   d60a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d60a6:	4b0b      	ldr	r3, [pc, #44]	; (d60d4 <serialEventRun+0x30>)
   d60a8:	b143      	cbz	r3, d60bc <serialEventRun+0x18>
   d60aa:	f7ff ff8f 	bl	d5fcc <_Z16_fetch_usbserialv>
   d60ae:	6803      	ldr	r3, [r0, #0]
   d60b0:	691b      	ldr	r3, [r3, #16]
   d60b2:	4798      	blx	r3
   d60b4:	2800      	cmp	r0, #0
   d60b6:	dd01      	ble.n	d60bc <serialEventRun+0x18>
        serialEvent();
   d60b8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d60bc:	4b06      	ldr	r3, [pc, #24]	; (d60d8 <serialEventRun+0x34>)
   d60be:	b143      	cbz	r3, d60d2 <serialEventRun+0x2e>
   d60c0:	f7ff fefc 	bl	d5ebc <_Z22__fetch_global_Serial1v>
   d60c4:	6803      	ldr	r3, [r0, #0]
   d60c6:	691b      	ldr	r3, [r3, #16]
   d60c8:	4798      	blx	r3
   d60ca:	2800      	cmp	r0, #0
   d60cc:	dd01      	ble.n	d60d2 <serialEventRun+0x2e>
        serialEvent1();
   d60ce:	f3af 8000 	nop.w
}
   d60d2:	bd08      	pop	{r3, pc}
	...

000d60dc <_post_loop>:
{
   d60dc:	b508      	push	{r3, lr}
	serialEventRun();
   d60de:	f7ff ffe1 	bl	d60a4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d60e2:	f7fe fd1f 	bl	d4b24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d60e6:	4b01      	ldr	r3, [pc, #4]	; (d60ec <_post_loop+0x10>)
   d60e8:	6018      	str	r0, [r3, #0]
}
   d60ea:	bd08      	pop	{r3, pc}
   d60ec:	2003e7d4 	.word	0x2003e7d4

000d60f0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d60f0:	4802      	ldr	r0, [pc, #8]	; (d60fc <_Z33system_initialize_user_backup_ramv+0xc>)
   d60f2:	4a03      	ldr	r2, [pc, #12]	; (d6100 <_Z33system_initialize_user_backup_ramv+0x10>)
   d60f4:	4903      	ldr	r1, [pc, #12]	; (d6104 <_Z33system_initialize_user_backup_ramv+0x14>)
   d60f6:	1a12      	subs	r2, r2, r0
   d60f8:	f000 bf78 	b.w	d6fec <memcpy>
   d60fc:	2003f400 	.word	0x2003f400
   d6100:	2003f404 	.word	0x2003f404
   d6104:	000d7608 	.word	0x000d7608

000d6108 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6108:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d610a:	2300      	movs	r3, #0
   d610c:	9300      	str	r3, [sp, #0]
   d610e:	461a      	mov	r2, r3
   d6110:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6114:	f7fe fe60 	bl	d4dd8 <system_ctrl_set_result>
}
   d6118:	b003      	add	sp, #12
   d611a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6120 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6120:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6122:	8843      	ldrh	r3, [r0, #2]
   d6124:	2b0a      	cmp	r3, #10
   d6126:	d008      	beq.n	d613a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6128:	2b50      	cmp	r3, #80	; 0x50
   d612a:	d10b      	bne.n	d6144 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d612c:	4b09      	ldr	r3, [pc, #36]	; (d6154 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d612e:	681b      	ldr	r3, [r3, #0]
   d6130:	b14b      	cbz	r3, d6146 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6132:	b003      	add	sp, #12
   d6134:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6138:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d613a:	f7ff ffe5 	bl	d6108 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d613e:	b003      	add	sp, #12
   d6140:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6144:	2300      	movs	r3, #0
   d6146:	9300      	str	r3, [sp, #0]
   d6148:	461a      	mov	r2, r3
   d614a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d614e:	f7fe fe43 	bl	d4dd8 <system_ctrl_set_result>
}
   d6152:	e7f4      	b.n	d613e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6154:	2003e7c4 	.word	0x2003e7c4

000d6158 <module_user_init_hook>:
{
   d6158:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d615a:	4c12      	ldr	r4, [pc, #72]	; (d61a4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d615c:	4812      	ldr	r0, [pc, #72]	; (d61a8 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d615e:	4d13      	ldr	r5, [pc, #76]	; (d61ac <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6160:	2100      	movs	r1, #0
   d6162:	f7fe fee3 	bl	d4f2c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6166:	6823      	ldr	r3, [r4, #0]
   d6168:	42ab      	cmp	r3, r5
   d616a:	4b11      	ldr	r3, [pc, #68]	; (d61b0 <module_user_init_hook+0x58>)
   d616c:	bf0c      	ite	eq
   d616e:	2201      	moveq	r2, #1
   d6170:	2200      	movne	r2, #0
   d6172:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6174:	d002      	beq.n	d617c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6176:	f7ff ffbb 	bl	d60f0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d617a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d617c:	f7fe fcc2 	bl	d4b04 <HAL_RNG_GetRandomNumber>
   d6180:	4604      	mov	r4, r0
    srand(seed);
   d6182:	f000 ff59 	bl	d7038 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6186:	4b0b      	ldr	r3, [pc, #44]	; (d61b4 <module_user_init_hook+0x5c>)
   d6188:	b113      	cbz	r3, d6190 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d618a:	4620      	mov	r0, r4
   d618c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6190:	2100      	movs	r1, #0
   d6192:	4808      	ldr	r0, [pc, #32]	; (d61b4 <module_user_init_hook+0x5c>)
   d6194:	f7fe fe3a 	bl	d4e0c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d619c:	4806      	ldr	r0, [pc, #24]	; (d61b8 <module_user_init_hook+0x60>)
   d619e:	2100      	movs	r1, #0
   d61a0:	f7fe be10 	b.w	d4dc4 <system_ctrl_set_app_request_handler>
   d61a4:	2003f400 	.word	0x2003f400
   d61a8:	000d6099 	.word	0x000d6099
   d61ac:	9a271c1e 	.word	0x9a271c1e
   d61b0:	2003e7c0 	.word	0x2003e7c0
   d61b4:	00000000 	.word	0x00000000
   d61b8:	000d6121 	.word	0x000d6121

000d61bc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d61bc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d61be:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d61c0:	d902      	bls.n	d61c8 <pinAvailable+0xc>
    return false;
   d61c2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d61c4:	b002      	add	sp, #8
   d61c6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d61c8:	f1a0 030b 	sub.w	r3, r0, #11
   d61cc:	2b02      	cmp	r3, #2
   d61ce:	d81a      	bhi.n	d6206 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d61d0:	4c17      	ldr	r4, [pc, #92]	; (d6230 <pinAvailable+0x74>)
   d61d2:	7821      	ldrb	r1, [r4, #0]
   d61d4:	f3bf 8f5b 	dmb	ish
   d61d8:	f011 0101 	ands.w	r1, r1, #1
   d61dc:	d10b      	bne.n	d61f6 <pinAvailable+0x3a>
   d61de:	4620      	mov	r0, r4
   d61e0:	9101      	str	r1, [sp, #4]
   d61e2:	f7fd ff5c 	bl	d409e <__cxa_guard_acquire>
   d61e6:	9901      	ldr	r1, [sp, #4]
   d61e8:	b128      	cbz	r0, d61f6 <pinAvailable+0x3a>
   d61ea:	4812      	ldr	r0, [pc, #72]	; (d6234 <pinAvailable+0x78>)
   d61ec:	f7ff fcfc 	bl	d5be8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d61f0:	4620      	mov	r0, r4
   d61f2:	f7fd ff59 	bl	d40a8 <__cxa_guard_release>
   d61f6:	4b0f      	ldr	r3, [pc, #60]	; (d6234 <pinAvailable+0x78>)
   d61f8:	7818      	ldrb	r0, [r3, #0]
   d61fa:	f7fe fd3b 	bl	d4c74 <hal_spi_is_enabled>
   d61fe:	2800      	cmp	r0, #0
   d6200:	d1df      	bne.n	d61c2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6202:	2001      	movs	r0, #1
   d6204:	e7de      	b.n	d61c4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6206:	2801      	cmp	r0, #1
   d6208:	d809      	bhi.n	d621e <pinAvailable+0x62>
   d620a:	f000 f857 	bl	d62bc <_Z19__fetch_global_Wirev>
   d620e:	2100      	movs	r1, #0
   d6210:	7c00      	ldrb	r0, [r0, #16]
   d6212:	f7fe fcff 	bl	d4c14 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6216:	f080 0001 	eor.w	r0, r0, #1
   d621a:	b2c0      	uxtb	r0, r0
   d621c:	e7d2      	b.n	d61c4 <pinAvailable+0x8>
   d621e:	3809      	subs	r0, #9
   d6220:	2801      	cmp	r0, #1
   d6222:	d8ee      	bhi.n	d6202 <pinAvailable+0x46>
   d6224:	f7ff fe4a 	bl	d5ebc <_Z22__fetch_global_Serial1v>
   d6228:	7c00      	ldrb	r0, [r0, #16]
   d622a:	f7fe fd5b 	bl	d4ce4 <hal_usart_is_enabled>
   d622e:	e7f2      	b.n	d6216 <pinAvailable+0x5a>
   d6230:	2003e7c8 	.word	0x2003e7c8
   d6234:	2003e7cc 	.word	0x2003e7cc

000d6238 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6238:	2823      	cmp	r0, #35	; 0x23
{
   d623a:	b538      	push	{r3, r4, r5, lr}
   d623c:	4604      	mov	r4, r0
   d623e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6240:	d80a      	bhi.n	d6258 <pinMode+0x20>
   d6242:	29ff      	cmp	r1, #255	; 0xff
   d6244:	d008      	beq.n	d6258 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6246:	f7ff ffb9 	bl	d61bc <pinAvailable>
   d624a:	b128      	cbz	r0, d6258 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d624c:	4629      	mov	r1, r5
   d624e:	4620      	mov	r0, r4
}
   d6250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6254:	f7fe bc76 	b.w	d4b44 <HAL_Pin_Mode>
}
   d6258:	bd38      	pop	{r3, r4, r5, pc}

000d625a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d625a:	b538      	push	{r3, r4, r5, lr}
   d625c:	4604      	mov	r4, r0
   d625e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6260:	f7fe fc78 	bl	d4b54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6264:	28ff      	cmp	r0, #255	; 0xff
   d6266:	d010      	beq.n	d628a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6268:	2806      	cmp	r0, #6
   d626a:	d804      	bhi.n	d6276 <digitalWrite+0x1c>
   d626c:	234d      	movs	r3, #77	; 0x4d
   d626e:	fa23 f000 	lsr.w	r0, r3, r0
   d6272:	07c3      	lsls	r3, r0, #31
   d6274:	d409      	bmi.n	d628a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6276:	4620      	mov	r0, r4
   d6278:	f7ff ffa0 	bl	d61bc <pinAvailable>
   d627c:	b128      	cbz	r0, d628a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d627e:	4629      	mov	r1, r5
   d6280:	4620      	mov	r0, r4
}
   d6282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6286:	f7fe bc6d 	b.w	d4b64 <HAL_GPIO_Write>
}
   d628a:	bd38      	pop	{r3, r4, r5, pc}

000d628c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d628c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d628e:	2300      	movs	r3, #0
   d6290:	2520      	movs	r5, #32
   d6292:	8043      	strh	r3, [r0, #2]
   d6294:	2314      	movs	r3, #20
{
   d6296:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6298:	8003      	strh	r3, [r0, #0]
   d629a:	6085      	str	r5, [r0, #8]
   d629c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d629e:	4906      	ldr	r1, [pc, #24]	; (d62b8 <_Z17acquireWireBufferv+0x2c>)
   d62a0:	4628      	mov	r0, r5
   d62a2:	f000 f83a 	bl	d631a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d62a6:	4904      	ldr	r1, [pc, #16]	; (d62b8 <_Z17acquireWireBufferv+0x2c>)
	};
   d62a8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d62aa:	4628      	mov	r0, r5
   d62ac:	f000 f835 	bl	d631a <_ZnajRKSt9nothrow_t>
	};
   d62b0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d62b2:	4620      	mov	r0, r4
   d62b4:	bd38      	pop	{r3, r4, r5, pc}
   d62b6:	bf00      	nop
   d62b8:	000d75d4 	.word	0x000d75d4

000d62bc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d62bc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d62be:	4d0f      	ldr	r5, [pc, #60]	; (d62fc <_Z19__fetch_global_Wirev+0x40>)
   d62c0:	7829      	ldrb	r1, [r5, #0]
   d62c2:	f3bf 8f5b 	dmb	ish
   d62c6:	f011 0401 	ands.w	r4, r1, #1
{
   d62ca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d62cc:	d113      	bne.n	d62f6 <_Z19__fetch_global_Wirev+0x3a>
   d62ce:	4628      	mov	r0, r5
   d62d0:	f7fd fee5 	bl	d409e <__cxa_guard_acquire>
   d62d4:	b178      	cbz	r0, d62f6 <_Z19__fetch_global_Wirev+0x3a>
   d62d6:	a801      	add	r0, sp, #4
   d62d8:	f7ff ffd8 	bl	d628c <_Z17acquireWireBufferv>
   d62dc:	aa01      	add	r2, sp, #4
   d62de:	4621      	mov	r1, r4
   d62e0:	4807      	ldr	r0, [pc, #28]	; (d6300 <_Z19__fetch_global_Wirev+0x44>)
   d62e2:	f7ff f9d3 	bl	d568c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d62e6:	4628      	mov	r0, r5
   d62e8:	f7fd fede 	bl	d40a8 <__cxa_guard_release>
   d62ec:	4a05      	ldr	r2, [pc, #20]	; (d6304 <_Z19__fetch_global_Wirev+0x48>)
   d62ee:	4906      	ldr	r1, [pc, #24]	; (d6308 <_Z19__fetch_global_Wirev+0x4c>)
   d62f0:	4803      	ldr	r0, [pc, #12]	; (d6300 <_Z19__fetch_global_Wirev+0x44>)
   d62f2:	f000 f80b 	bl	d630c <__aeabi_atexit>
	return wire;
}
   d62f6:	4802      	ldr	r0, [pc, #8]	; (d6300 <_Z19__fetch_global_Wirev+0x44>)
   d62f8:	b007      	add	sp, #28
   d62fa:	bd30      	pop	{r4, r5, pc}
   d62fc:	2003e7d8 	.word	0x2003e7d8
   d6300:	2003e7dc 	.word	0x2003e7dc
   d6304:	2003e5ec 	.word	0x2003e5ec
   d6308:	000d5635 	.word	0x000d5635

000d630c <__aeabi_atexit>:
   d630c:	460b      	mov	r3, r1
   d630e:	4601      	mov	r1, r0
   d6310:	4618      	mov	r0, r3
   d6312:	f000 be5d 	b.w	d6fd0 <__cxa_atexit>

000d6316 <_ZdlPvj>:
   d6316:	f7fd bec0 	b.w	d409a <_ZdlPv>

000d631a <_ZnajRKSt9nothrow_t>:
   d631a:	f7fd bebc 	b.w	d4096 <_Znaj>

000d631e <_ZSt25__throw_bad_function_callv>:
   d631e:	b508      	push	{r3, lr}
   d6320:	f7fe fdf4 	bl	d4f0c <abort>

000d6324 <__aeabi_drsub>:
   d6324:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6328:	e002      	b.n	d6330 <__adddf3>
   d632a:	bf00      	nop

000d632c <__aeabi_dsub>:
   d632c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6330 <__adddf3>:
   d6330:	b530      	push	{r4, r5, lr}
   d6332:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6336:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d633a:	ea94 0f05 	teq	r4, r5
   d633e:	bf08      	it	eq
   d6340:	ea90 0f02 	teqeq	r0, r2
   d6344:	bf1f      	itttt	ne
   d6346:	ea54 0c00 	orrsne.w	ip, r4, r0
   d634a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d634e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6352:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6356:	f000 80e2 	beq.w	d651e <__adddf3+0x1ee>
   d635a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d635e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6362:	bfb8      	it	lt
   d6364:	426d      	neglt	r5, r5
   d6366:	dd0c      	ble.n	d6382 <__adddf3+0x52>
   d6368:	442c      	add	r4, r5
   d636a:	ea80 0202 	eor.w	r2, r0, r2
   d636e:	ea81 0303 	eor.w	r3, r1, r3
   d6372:	ea82 0000 	eor.w	r0, r2, r0
   d6376:	ea83 0101 	eor.w	r1, r3, r1
   d637a:	ea80 0202 	eor.w	r2, r0, r2
   d637e:	ea81 0303 	eor.w	r3, r1, r3
   d6382:	2d36      	cmp	r5, #54	; 0x36
   d6384:	bf88      	it	hi
   d6386:	bd30      	pophi	{r4, r5, pc}
   d6388:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d638c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6390:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6394:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6398:	d002      	beq.n	d63a0 <__adddf3+0x70>
   d639a:	4240      	negs	r0, r0
   d639c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d63a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d63a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d63a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d63ac:	d002      	beq.n	d63b4 <__adddf3+0x84>
   d63ae:	4252      	negs	r2, r2
   d63b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d63b4:	ea94 0f05 	teq	r4, r5
   d63b8:	f000 80a7 	beq.w	d650a <__adddf3+0x1da>
   d63bc:	f1a4 0401 	sub.w	r4, r4, #1
   d63c0:	f1d5 0e20 	rsbs	lr, r5, #32
   d63c4:	db0d      	blt.n	d63e2 <__adddf3+0xb2>
   d63c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d63ca:	fa22 f205 	lsr.w	r2, r2, r5
   d63ce:	1880      	adds	r0, r0, r2
   d63d0:	f141 0100 	adc.w	r1, r1, #0
   d63d4:	fa03 f20e 	lsl.w	r2, r3, lr
   d63d8:	1880      	adds	r0, r0, r2
   d63da:	fa43 f305 	asr.w	r3, r3, r5
   d63de:	4159      	adcs	r1, r3
   d63e0:	e00e      	b.n	d6400 <__adddf3+0xd0>
   d63e2:	f1a5 0520 	sub.w	r5, r5, #32
   d63e6:	f10e 0e20 	add.w	lr, lr, #32
   d63ea:	2a01      	cmp	r2, #1
   d63ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   d63f0:	bf28      	it	cs
   d63f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d63f6:	fa43 f305 	asr.w	r3, r3, r5
   d63fa:	18c0      	adds	r0, r0, r3
   d63fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6404:	d507      	bpl.n	d6416 <__adddf3+0xe6>
   d6406:	f04f 0e00 	mov.w	lr, #0
   d640a:	f1dc 0c00 	rsbs	ip, ip, #0
   d640e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6412:	eb6e 0101 	sbc.w	r1, lr, r1
   d6416:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d641a:	d31b      	bcc.n	d6454 <__adddf3+0x124>
   d641c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6420:	d30c      	bcc.n	d643c <__adddf3+0x10c>
   d6422:	0849      	lsrs	r1, r1, #1
   d6424:	ea5f 0030 	movs.w	r0, r0, rrx
   d6428:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d642c:	f104 0401 	add.w	r4, r4, #1
   d6430:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6434:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6438:	f080 809a 	bcs.w	d6570 <__adddf3+0x240>
   d643c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6440:	bf08      	it	eq
   d6442:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6446:	f150 0000 	adcs.w	r0, r0, #0
   d644a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d644e:	ea41 0105 	orr.w	r1, r1, r5
   d6452:	bd30      	pop	{r4, r5, pc}
   d6454:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6458:	4140      	adcs	r0, r0
   d645a:	eb41 0101 	adc.w	r1, r1, r1
   d645e:	3c01      	subs	r4, #1
   d6460:	bf28      	it	cs
   d6462:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6466:	d2e9      	bcs.n	d643c <__adddf3+0x10c>
   d6468:	f091 0f00 	teq	r1, #0
   d646c:	bf04      	itt	eq
   d646e:	4601      	moveq	r1, r0
   d6470:	2000      	moveq	r0, #0
   d6472:	fab1 f381 	clz	r3, r1
   d6476:	bf08      	it	eq
   d6478:	3320      	addeq	r3, #32
   d647a:	f1a3 030b 	sub.w	r3, r3, #11
   d647e:	f1b3 0220 	subs.w	r2, r3, #32
   d6482:	da0c      	bge.n	d649e <__adddf3+0x16e>
   d6484:	320c      	adds	r2, #12
   d6486:	dd08      	ble.n	d649a <__adddf3+0x16a>
   d6488:	f102 0c14 	add.w	ip, r2, #20
   d648c:	f1c2 020c 	rsb	r2, r2, #12
   d6490:	fa01 f00c 	lsl.w	r0, r1, ip
   d6494:	fa21 f102 	lsr.w	r1, r1, r2
   d6498:	e00c      	b.n	d64b4 <__adddf3+0x184>
   d649a:	f102 0214 	add.w	r2, r2, #20
   d649e:	bfd8      	it	le
   d64a0:	f1c2 0c20 	rsble	ip, r2, #32
   d64a4:	fa01 f102 	lsl.w	r1, r1, r2
   d64a8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d64ac:	bfdc      	itt	le
   d64ae:	ea41 010c 	orrle.w	r1, r1, ip
   d64b2:	4090      	lslle	r0, r2
   d64b4:	1ae4      	subs	r4, r4, r3
   d64b6:	bfa2      	ittt	ge
   d64b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d64bc:	4329      	orrge	r1, r5
   d64be:	bd30      	popge	{r4, r5, pc}
   d64c0:	ea6f 0404 	mvn.w	r4, r4
   d64c4:	3c1f      	subs	r4, #31
   d64c6:	da1c      	bge.n	d6502 <__adddf3+0x1d2>
   d64c8:	340c      	adds	r4, #12
   d64ca:	dc0e      	bgt.n	d64ea <__adddf3+0x1ba>
   d64cc:	f104 0414 	add.w	r4, r4, #20
   d64d0:	f1c4 0220 	rsb	r2, r4, #32
   d64d4:	fa20 f004 	lsr.w	r0, r0, r4
   d64d8:	fa01 f302 	lsl.w	r3, r1, r2
   d64dc:	ea40 0003 	orr.w	r0, r0, r3
   d64e0:	fa21 f304 	lsr.w	r3, r1, r4
   d64e4:	ea45 0103 	orr.w	r1, r5, r3
   d64e8:	bd30      	pop	{r4, r5, pc}
   d64ea:	f1c4 040c 	rsb	r4, r4, #12
   d64ee:	f1c4 0220 	rsb	r2, r4, #32
   d64f2:	fa20 f002 	lsr.w	r0, r0, r2
   d64f6:	fa01 f304 	lsl.w	r3, r1, r4
   d64fa:	ea40 0003 	orr.w	r0, r0, r3
   d64fe:	4629      	mov	r1, r5
   d6500:	bd30      	pop	{r4, r5, pc}
   d6502:	fa21 f004 	lsr.w	r0, r1, r4
   d6506:	4629      	mov	r1, r5
   d6508:	bd30      	pop	{r4, r5, pc}
   d650a:	f094 0f00 	teq	r4, #0
   d650e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6512:	bf06      	itte	eq
   d6514:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6518:	3401      	addeq	r4, #1
   d651a:	3d01      	subne	r5, #1
   d651c:	e74e      	b.n	d63bc <__adddf3+0x8c>
   d651e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6522:	bf18      	it	ne
   d6524:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6528:	d029      	beq.n	d657e <__adddf3+0x24e>
   d652a:	ea94 0f05 	teq	r4, r5
   d652e:	bf08      	it	eq
   d6530:	ea90 0f02 	teqeq	r0, r2
   d6534:	d005      	beq.n	d6542 <__adddf3+0x212>
   d6536:	ea54 0c00 	orrs.w	ip, r4, r0
   d653a:	bf04      	itt	eq
   d653c:	4619      	moveq	r1, r3
   d653e:	4610      	moveq	r0, r2
   d6540:	bd30      	pop	{r4, r5, pc}
   d6542:	ea91 0f03 	teq	r1, r3
   d6546:	bf1e      	ittt	ne
   d6548:	2100      	movne	r1, #0
   d654a:	2000      	movne	r0, #0
   d654c:	bd30      	popne	{r4, r5, pc}
   d654e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6552:	d105      	bne.n	d6560 <__adddf3+0x230>
   d6554:	0040      	lsls	r0, r0, #1
   d6556:	4149      	adcs	r1, r1
   d6558:	bf28      	it	cs
   d655a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d655e:	bd30      	pop	{r4, r5, pc}
   d6560:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6564:	bf3c      	itt	cc
   d6566:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d656a:	bd30      	popcc	{r4, r5, pc}
   d656c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6570:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6574:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6578:	f04f 0000 	mov.w	r0, #0
   d657c:	bd30      	pop	{r4, r5, pc}
   d657e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6582:	bf1a      	itte	ne
   d6584:	4619      	movne	r1, r3
   d6586:	4610      	movne	r0, r2
   d6588:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d658c:	bf1c      	itt	ne
   d658e:	460b      	movne	r3, r1
   d6590:	4602      	movne	r2, r0
   d6592:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6596:	bf06      	itte	eq
   d6598:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d659c:	ea91 0f03 	teqeq	r1, r3
   d65a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d65a4:	bd30      	pop	{r4, r5, pc}
   d65a6:	bf00      	nop

000d65a8 <__aeabi_ui2d>:
   d65a8:	f090 0f00 	teq	r0, #0
   d65ac:	bf04      	itt	eq
   d65ae:	2100      	moveq	r1, #0
   d65b0:	4770      	bxeq	lr
   d65b2:	b530      	push	{r4, r5, lr}
   d65b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d65b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d65bc:	f04f 0500 	mov.w	r5, #0
   d65c0:	f04f 0100 	mov.w	r1, #0
   d65c4:	e750      	b.n	d6468 <__adddf3+0x138>
   d65c6:	bf00      	nop

000d65c8 <__aeabi_i2d>:
   d65c8:	f090 0f00 	teq	r0, #0
   d65cc:	bf04      	itt	eq
   d65ce:	2100      	moveq	r1, #0
   d65d0:	4770      	bxeq	lr
   d65d2:	b530      	push	{r4, r5, lr}
   d65d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d65d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d65dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d65e0:	bf48      	it	mi
   d65e2:	4240      	negmi	r0, r0
   d65e4:	f04f 0100 	mov.w	r1, #0
   d65e8:	e73e      	b.n	d6468 <__adddf3+0x138>
   d65ea:	bf00      	nop

000d65ec <__aeabi_f2d>:
   d65ec:	0042      	lsls	r2, r0, #1
   d65ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d65f2:	ea4f 0131 	mov.w	r1, r1, rrx
   d65f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d65fa:	bf1f      	itttt	ne
   d65fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6600:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6604:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6608:	4770      	bxne	lr
   d660a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d660e:	bf08      	it	eq
   d6610:	4770      	bxeq	lr
   d6612:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6616:	bf04      	itt	eq
   d6618:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d661c:	4770      	bxeq	lr
   d661e:	b530      	push	{r4, r5, lr}
   d6620:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6624:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6628:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d662c:	e71c      	b.n	d6468 <__adddf3+0x138>
   d662e:	bf00      	nop

000d6630 <__aeabi_ul2d>:
   d6630:	ea50 0201 	orrs.w	r2, r0, r1
   d6634:	bf08      	it	eq
   d6636:	4770      	bxeq	lr
   d6638:	b530      	push	{r4, r5, lr}
   d663a:	f04f 0500 	mov.w	r5, #0
   d663e:	e00a      	b.n	d6656 <__aeabi_l2d+0x16>

000d6640 <__aeabi_l2d>:
   d6640:	ea50 0201 	orrs.w	r2, r0, r1
   d6644:	bf08      	it	eq
   d6646:	4770      	bxeq	lr
   d6648:	b530      	push	{r4, r5, lr}
   d664a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d664e:	d502      	bpl.n	d6656 <__aeabi_l2d+0x16>
   d6650:	4240      	negs	r0, r0
   d6652:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6656:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d665a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d665e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6662:	f43f aed8 	beq.w	d6416 <__adddf3+0xe6>
   d6666:	f04f 0203 	mov.w	r2, #3
   d666a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d666e:	bf18      	it	ne
   d6670:	3203      	addne	r2, #3
   d6672:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6676:	bf18      	it	ne
   d6678:	3203      	addne	r2, #3
   d667a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d667e:	f1c2 0320 	rsb	r3, r2, #32
   d6682:	fa00 fc03 	lsl.w	ip, r0, r3
   d6686:	fa20 f002 	lsr.w	r0, r0, r2
   d668a:	fa01 fe03 	lsl.w	lr, r1, r3
   d668e:	ea40 000e 	orr.w	r0, r0, lr
   d6692:	fa21 f102 	lsr.w	r1, r1, r2
   d6696:	4414      	add	r4, r2
   d6698:	e6bd      	b.n	d6416 <__adddf3+0xe6>
   d669a:	bf00      	nop

000d669c <__aeabi_dmul>:
   d669c:	b570      	push	{r4, r5, r6, lr}
   d669e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d66a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d66a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d66aa:	bf1d      	ittte	ne
   d66ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d66b0:	ea94 0f0c 	teqne	r4, ip
   d66b4:	ea95 0f0c 	teqne	r5, ip
   d66b8:	f000 f8de 	bleq	d6878 <__aeabi_dmul+0x1dc>
   d66bc:	442c      	add	r4, r5
   d66be:	ea81 0603 	eor.w	r6, r1, r3
   d66c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d66c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d66ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d66ce:	bf18      	it	ne
   d66d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d66d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d66dc:	d038      	beq.n	d6750 <__aeabi_dmul+0xb4>
   d66de:	fba0 ce02 	umull	ip, lr, r0, r2
   d66e2:	f04f 0500 	mov.w	r5, #0
   d66e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d66ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d66ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d66f2:	f04f 0600 	mov.w	r6, #0
   d66f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d66fa:	f09c 0f00 	teq	ip, #0
   d66fe:	bf18      	it	ne
   d6700:	f04e 0e01 	orrne.w	lr, lr, #1
   d6704:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6708:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d670c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6710:	d204      	bcs.n	d671c <__aeabi_dmul+0x80>
   d6712:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6716:	416d      	adcs	r5, r5
   d6718:	eb46 0606 	adc.w	r6, r6, r6
   d671c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6720:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6724:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6728:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d672c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6730:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6734:	bf88      	it	hi
   d6736:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d673a:	d81e      	bhi.n	d677a <__aeabi_dmul+0xde>
   d673c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6740:	bf08      	it	eq
   d6742:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6746:	f150 0000 	adcs.w	r0, r0, #0
   d674a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d674e:	bd70      	pop	{r4, r5, r6, pc}
   d6750:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6754:	ea46 0101 	orr.w	r1, r6, r1
   d6758:	ea40 0002 	orr.w	r0, r0, r2
   d675c:	ea81 0103 	eor.w	r1, r1, r3
   d6760:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6764:	bfc2      	ittt	gt
   d6766:	ebd4 050c 	rsbsgt	r5, r4, ip
   d676a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d676e:	bd70      	popgt	{r4, r5, r6, pc}
   d6770:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6774:	f04f 0e00 	mov.w	lr, #0
   d6778:	3c01      	subs	r4, #1
   d677a:	f300 80ab 	bgt.w	d68d4 <__aeabi_dmul+0x238>
   d677e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6782:	bfde      	ittt	le
   d6784:	2000      	movle	r0, #0
   d6786:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d678a:	bd70      	pople	{r4, r5, r6, pc}
   d678c:	f1c4 0400 	rsb	r4, r4, #0
   d6790:	3c20      	subs	r4, #32
   d6792:	da35      	bge.n	d6800 <__aeabi_dmul+0x164>
   d6794:	340c      	adds	r4, #12
   d6796:	dc1b      	bgt.n	d67d0 <__aeabi_dmul+0x134>
   d6798:	f104 0414 	add.w	r4, r4, #20
   d679c:	f1c4 0520 	rsb	r5, r4, #32
   d67a0:	fa00 f305 	lsl.w	r3, r0, r5
   d67a4:	fa20 f004 	lsr.w	r0, r0, r4
   d67a8:	fa01 f205 	lsl.w	r2, r1, r5
   d67ac:	ea40 0002 	orr.w	r0, r0, r2
   d67b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d67b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d67b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d67bc:	fa21 f604 	lsr.w	r6, r1, r4
   d67c0:	eb42 0106 	adc.w	r1, r2, r6
   d67c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d67c8:	bf08      	it	eq
   d67ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67ce:	bd70      	pop	{r4, r5, r6, pc}
   d67d0:	f1c4 040c 	rsb	r4, r4, #12
   d67d4:	f1c4 0520 	rsb	r5, r4, #32
   d67d8:	fa00 f304 	lsl.w	r3, r0, r4
   d67dc:	fa20 f005 	lsr.w	r0, r0, r5
   d67e0:	fa01 f204 	lsl.w	r2, r1, r4
   d67e4:	ea40 0002 	orr.w	r0, r0, r2
   d67e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d67f0:	f141 0100 	adc.w	r1, r1, #0
   d67f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d67f8:	bf08      	it	eq
   d67fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67fe:	bd70      	pop	{r4, r5, r6, pc}
   d6800:	f1c4 0520 	rsb	r5, r4, #32
   d6804:	fa00 f205 	lsl.w	r2, r0, r5
   d6808:	ea4e 0e02 	orr.w	lr, lr, r2
   d680c:	fa20 f304 	lsr.w	r3, r0, r4
   d6810:	fa01 f205 	lsl.w	r2, r1, r5
   d6814:	ea43 0302 	orr.w	r3, r3, r2
   d6818:	fa21 f004 	lsr.w	r0, r1, r4
   d681c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6820:	fa21 f204 	lsr.w	r2, r1, r4
   d6824:	ea20 0002 	bic.w	r0, r0, r2
   d6828:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d682c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6830:	bf08      	it	eq
   d6832:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6836:	bd70      	pop	{r4, r5, r6, pc}
   d6838:	f094 0f00 	teq	r4, #0
   d683c:	d10f      	bne.n	d685e <__aeabi_dmul+0x1c2>
   d683e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6842:	0040      	lsls	r0, r0, #1
   d6844:	eb41 0101 	adc.w	r1, r1, r1
   d6848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d684c:	bf08      	it	eq
   d684e:	3c01      	subeq	r4, #1
   d6850:	d0f7      	beq.n	d6842 <__aeabi_dmul+0x1a6>
   d6852:	ea41 0106 	orr.w	r1, r1, r6
   d6856:	f095 0f00 	teq	r5, #0
   d685a:	bf18      	it	ne
   d685c:	4770      	bxne	lr
   d685e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6862:	0052      	lsls	r2, r2, #1
   d6864:	eb43 0303 	adc.w	r3, r3, r3
   d6868:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d686c:	bf08      	it	eq
   d686e:	3d01      	subeq	r5, #1
   d6870:	d0f7      	beq.n	d6862 <__aeabi_dmul+0x1c6>
   d6872:	ea43 0306 	orr.w	r3, r3, r6
   d6876:	4770      	bx	lr
   d6878:	ea94 0f0c 	teq	r4, ip
   d687c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6880:	bf18      	it	ne
   d6882:	ea95 0f0c 	teqne	r5, ip
   d6886:	d00c      	beq.n	d68a2 <__aeabi_dmul+0x206>
   d6888:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d688c:	bf18      	it	ne
   d688e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6892:	d1d1      	bne.n	d6838 <__aeabi_dmul+0x19c>
   d6894:	ea81 0103 	eor.w	r1, r1, r3
   d6898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d689c:	f04f 0000 	mov.w	r0, #0
   d68a0:	bd70      	pop	{r4, r5, r6, pc}
   d68a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d68a6:	bf06      	itte	eq
   d68a8:	4610      	moveq	r0, r2
   d68aa:	4619      	moveq	r1, r3
   d68ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d68b0:	d019      	beq.n	d68e6 <__aeabi_dmul+0x24a>
   d68b2:	ea94 0f0c 	teq	r4, ip
   d68b6:	d102      	bne.n	d68be <__aeabi_dmul+0x222>
   d68b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d68bc:	d113      	bne.n	d68e6 <__aeabi_dmul+0x24a>
   d68be:	ea95 0f0c 	teq	r5, ip
   d68c2:	d105      	bne.n	d68d0 <__aeabi_dmul+0x234>
   d68c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d68c8:	bf1c      	itt	ne
   d68ca:	4610      	movne	r0, r2
   d68cc:	4619      	movne	r1, r3
   d68ce:	d10a      	bne.n	d68e6 <__aeabi_dmul+0x24a>
   d68d0:	ea81 0103 	eor.w	r1, r1, r3
   d68d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d68d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d68dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d68e0:	f04f 0000 	mov.w	r0, #0
   d68e4:	bd70      	pop	{r4, r5, r6, pc}
   d68e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d68ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d68ee:	bd70      	pop	{r4, r5, r6, pc}

000d68f0 <__aeabi_ddiv>:
   d68f0:	b570      	push	{r4, r5, r6, lr}
   d68f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68fe:	bf1d      	ittte	ne
   d6900:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6904:	ea94 0f0c 	teqne	r4, ip
   d6908:	ea95 0f0c 	teqne	r5, ip
   d690c:	f000 f8a7 	bleq	d6a5e <__aeabi_ddiv+0x16e>
   d6910:	eba4 0405 	sub.w	r4, r4, r5
   d6914:	ea81 0e03 	eor.w	lr, r1, r3
   d6918:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d691c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6920:	f000 8088 	beq.w	d6a34 <__aeabi_ddiv+0x144>
   d6924:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6928:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d692c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6930:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6934:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6938:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d693c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6940:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6944:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6948:	429d      	cmp	r5, r3
   d694a:	bf08      	it	eq
   d694c:	4296      	cmpeq	r6, r2
   d694e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6952:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6956:	d202      	bcs.n	d695e <__aeabi_ddiv+0x6e>
   d6958:	085b      	lsrs	r3, r3, #1
   d695a:	ea4f 0232 	mov.w	r2, r2, rrx
   d695e:	1ab6      	subs	r6, r6, r2
   d6960:	eb65 0503 	sbc.w	r5, r5, r3
   d6964:	085b      	lsrs	r3, r3, #1
   d6966:	ea4f 0232 	mov.w	r2, r2, rrx
   d696a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d696e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6972:	ebb6 0e02 	subs.w	lr, r6, r2
   d6976:	eb75 0e03 	sbcs.w	lr, r5, r3
   d697a:	bf22      	ittt	cs
   d697c:	1ab6      	subcs	r6, r6, r2
   d697e:	4675      	movcs	r5, lr
   d6980:	ea40 000c 	orrcs.w	r0, r0, ip
   d6984:	085b      	lsrs	r3, r3, #1
   d6986:	ea4f 0232 	mov.w	r2, r2, rrx
   d698a:	ebb6 0e02 	subs.w	lr, r6, r2
   d698e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6992:	bf22      	ittt	cs
   d6994:	1ab6      	subcs	r6, r6, r2
   d6996:	4675      	movcs	r5, lr
   d6998:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d699c:	085b      	lsrs	r3, r3, #1
   d699e:	ea4f 0232 	mov.w	r2, r2, rrx
   d69a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d69a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d69aa:	bf22      	ittt	cs
   d69ac:	1ab6      	subcs	r6, r6, r2
   d69ae:	4675      	movcs	r5, lr
   d69b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d69b4:	085b      	lsrs	r3, r3, #1
   d69b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d69ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d69be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d69c2:	bf22      	ittt	cs
   d69c4:	1ab6      	subcs	r6, r6, r2
   d69c6:	4675      	movcs	r5, lr
   d69c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d69cc:	ea55 0e06 	orrs.w	lr, r5, r6
   d69d0:	d018      	beq.n	d6a04 <__aeabi_ddiv+0x114>
   d69d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d69d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d69da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d69de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d69e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d69e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d69ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d69ee:	d1c0      	bne.n	d6972 <__aeabi_ddiv+0x82>
   d69f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69f4:	d10b      	bne.n	d6a0e <__aeabi_ddiv+0x11e>
   d69f6:	ea41 0100 	orr.w	r1, r1, r0
   d69fa:	f04f 0000 	mov.w	r0, #0
   d69fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6a02:	e7b6      	b.n	d6972 <__aeabi_ddiv+0x82>
   d6a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a08:	bf04      	itt	eq
   d6a0a:	4301      	orreq	r1, r0
   d6a0c:	2000      	moveq	r0, #0
   d6a0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6a12:	bf88      	it	hi
   d6a14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6a18:	f63f aeaf 	bhi.w	d677a <__aeabi_dmul+0xde>
   d6a1c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6a20:	bf04      	itt	eq
   d6a22:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6a26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6a2a:	f150 0000 	adcs.w	r0, r0, #0
   d6a2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a32:	bd70      	pop	{r4, r5, r6, pc}
   d6a34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6a38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6a3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6a40:	bfc2      	ittt	gt
   d6a42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6a46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6a4a:	bd70      	popgt	{r4, r5, r6, pc}
   d6a4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a50:	f04f 0e00 	mov.w	lr, #0
   d6a54:	3c01      	subs	r4, #1
   d6a56:	e690      	b.n	d677a <__aeabi_dmul+0xde>
   d6a58:	ea45 0e06 	orr.w	lr, r5, r6
   d6a5c:	e68d      	b.n	d677a <__aeabi_dmul+0xde>
   d6a5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a62:	ea94 0f0c 	teq	r4, ip
   d6a66:	bf08      	it	eq
   d6a68:	ea95 0f0c 	teqeq	r5, ip
   d6a6c:	f43f af3b 	beq.w	d68e6 <__aeabi_dmul+0x24a>
   d6a70:	ea94 0f0c 	teq	r4, ip
   d6a74:	d10a      	bne.n	d6a8c <__aeabi_ddiv+0x19c>
   d6a76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6a7a:	f47f af34 	bne.w	d68e6 <__aeabi_dmul+0x24a>
   d6a7e:	ea95 0f0c 	teq	r5, ip
   d6a82:	f47f af25 	bne.w	d68d0 <__aeabi_dmul+0x234>
   d6a86:	4610      	mov	r0, r2
   d6a88:	4619      	mov	r1, r3
   d6a8a:	e72c      	b.n	d68e6 <__aeabi_dmul+0x24a>
   d6a8c:	ea95 0f0c 	teq	r5, ip
   d6a90:	d106      	bne.n	d6aa0 <__aeabi_ddiv+0x1b0>
   d6a92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6a96:	f43f aefd 	beq.w	d6894 <__aeabi_dmul+0x1f8>
   d6a9a:	4610      	mov	r0, r2
   d6a9c:	4619      	mov	r1, r3
   d6a9e:	e722      	b.n	d68e6 <__aeabi_dmul+0x24a>
   d6aa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6aa4:	bf18      	it	ne
   d6aa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6aaa:	f47f aec5 	bne.w	d6838 <__aeabi_dmul+0x19c>
   d6aae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6ab2:	f47f af0d 	bne.w	d68d0 <__aeabi_dmul+0x234>
   d6ab6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6aba:	f47f aeeb 	bne.w	d6894 <__aeabi_dmul+0x1f8>
   d6abe:	e712      	b.n	d68e6 <__aeabi_dmul+0x24a>

000d6ac0 <__gedf2>:
   d6ac0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6ac4:	e006      	b.n	d6ad4 <__cmpdf2+0x4>
   d6ac6:	bf00      	nop

000d6ac8 <__ledf2>:
   d6ac8:	f04f 0c01 	mov.w	ip, #1
   d6acc:	e002      	b.n	d6ad4 <__cmpdf2+0x4>
   d6ace:	bf00      	nop

000d6ad0 <__cmpdf2>:
   d6ad0:	f04f 0c01 	mov.w	ip, #1
   d6ad4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6ae4:	bf18      	it	ne
   d6ae6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6aea:	d01b      	beq.n	d6b24 <__cmpdf2+0x54>
   d6aec:	b001      	add	sp, #4
   d6aee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6af2:	bf0c      	ite	eq
   d6af4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6af8:	ea91 0f03 	teqne	r1, r3
   d6afc:	bf02      	ittt	eq
   d6afe:	ea90 0f02 	teqeq	r0, r2
   d6b02:	2000      	moveq	r0, #0
   d6b04:	4770      	bxeq	lr
   d6b06:	f110 0f00 	cmn.w	r0, #0
   d6b0a:	ea91 0f03 	teq	r1, r3
   d6b0e:	bf58      	it	pl
   d6b10:	4299      	cmppl	r1, r3
   d6b12:	bf08      	it	eq
   d6b14:	4290      	cmpeq	r0, r2
   d6b16:	bf2c      	ite	cs
   d6b18:	17d8      	asrcs	r0, r3, #31
   d6b1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6b1e:	f040 0001 	orr.w	r0, r0, #1
   d6b22:	4770      	bx	lr
   d6b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b2c:	d102      	bne.n	d6b34 <__cmpdf2+0x64>
   d6b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6b32:	d107      	bne.n	d6b44 <__cmpdf2+0x74>
   d6b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b3c:	d1d6      	bne.n	d6aec <__cmpdf2+0x1c>
   d6b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6b42:	d0d3      	beq.n	d6aec <__cmpdf2+0x1c>
   d6b44:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6b48:	4770      	bx	lr
   d6b4a:	bf00      	nop

000d6b4c <__aeabi_cdrcmple>:
   d6b4c:	4684      	mov	ip, r0
   d6b4e:	4610      	mov	r0, r2
   d6b50:	4662      	mov	r2, ip
   d6b52:	468c      	mov	ip, r1
   d6b54:	4619      	mov	r1, r3
   d6b56:	4663      	mov	r3, ip
   d6b58:	e000      	b.n	d6b5c <__aeabi_cdcmpeq>
   d6b5a:	bf00      	nop

000d6b5c <__aeabi_cdcmpeq>:
   d6b5c:	b501      	push	{r0, lr}
   d6b5e:	f7ff ffb7 	bl	d6ad0 <__cmpdf2>
   d6b62:	2800      	cmp	r0, #0
   d6b64:	bf48      	it	mi
   d6b66:	f110 0f00 	cmnmi.w	r0, #0
   d6b6a:	bd01      	pop	{r0, pc}

000d6b6c <__aeabi_dcmpeq>:
   d6b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b70:	f7ff fff4 	bl	d6b5c <__aeabi_cdcmpeq>
   d6b74:	bf0c      	ite	eq
   d6b76:	2001      	moveq	r0, #1
   d6b78:	2000      	movne	r0, #0
   d6b7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b7e:	bf00      	nop

000d6b80 <__aeabi_dcmplt>:
   d6b80:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b84:	f7ff ffea 	bl	d6b5c <__aeabi_cdcmpeq>
   d6b88:	bf34      	ite	cc
   d6b8a:	2001      	movcc	r0, #1
   d6b8c:	2000      	movcs	r0, #0
   d6b8e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b92:	bf00      	nop

000d6b94 <__aeabi_dcmple>:
   d6b94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b98:	f7ff ffe0 	bl	d6b5c <__aeabi_cdcmpeq>
   d6b9c:	bf94      	ite	ls
   d6b9e:	2001      	movls	r0, #1
   d6ba0:	2000      	movhi	r0, #0
   d6ba2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ba6:	bf00      	nop

000d6ba8 <__aeabi_dcmpge>:
   d6ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6bac:	f7ff ffce 	bl	d6b4c <__aeabi_cdrcmple>
   d6bb0:	bf94      	ite	ls
   d6bb2:	2001      	movls	r0, #1
   d6bb4:	2000      	movhi	r0, #0
   d6bb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6bba:	bf00      	nop

000d6bbc <__aeabi_dcmpgt>:
   d6bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6bc0:	f7ff ffc4 	bl	d6b4c <__aeabi_cdrcmple>
   d6bc4:	bf34      	ite	cc
   d6bc6:	2001      	movcc	r0, #1
   d6bc8:	2000      	movcs	r0, #0
   d6bca:	f85d fb08 	ldr.w	pc, [sp], #8
   d6bce:	bf00      	nop

000d6bd0 <__aeabi_dcmpun>:
   d6bd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6bd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6bd8:	d102      	bne.n	d6be0 <__aeabi_dcmpun+0x10>
   d6bda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6bde:	d10a      	bne.n	d6bf6 <__aeabi_dcmpun+0x26>
   d6be0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6be4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6be8:	d102      	bne.n	d6bf0 <__aeabi_dcmpun+0x20>
   d6bea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6bee:	d102      	bne.n	d6bf6 <__aeabi_dcmpun+0x26>
   d6bf0:	f04f 0000 	mov.w	r0, #0
   d6bf4:	4770      	bx	lr
   d6bf6:	f04f 0001 	mov.w	r0, #1
   d6bfa:	4770      	bx	lr

000d6bfc <__aeabi_d2iz>:
   d6bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6c00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6c04:	d215      	bcs.n	d6c32 <__aeabi_d2iz+0x36>
   d6c06:	d511      	bpl.n	d6c2c <__aeabi_d2iz+0x30>
   d6c08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6c0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6c10:	d912      	bls.n	d6c38 <__aeabi_d2iz+0x3c>
   d6c12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6c1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c22:	fa23 f002 	lsr.w	r0, r3, r2
   d6c26:	bf18      	it	ne
   d6c28:	4240      	negne	r0, r0
   d6c2a:	4770      	bx	lr
   d6c2c:	f04f 0000 	mov.w	r0, #0
   d6c30:	4770      	bx	lr
   d6c32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6c36:	d105      	bne.n	d6c44 <__aeabi_d2iz+0x48>
   d6c38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6c3c:	bf08      	it	eq
   d6c3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6c42:	4770      	bx	lr
   d6c44:	f04f 0000 	mov.w	r0, #0
   d6c48:	4770      	bx	lr
   d6c4a:	bf00      	nop

000d6c4c <__aeabi_d2uiz>:
   d6c4c:	004a      	lsls	r2, r1, #1
   d6c4e:	d211      	bcs.n	d6c74 <__aeabi_d2uiz+0x28>
   d6c50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6c54:	d211      	bcs.n	d6c7a <__aeabi_d2uiz+0x2e>
   d6c56:	d50d      	bpl.n	d6c74 <__aeabi_d2uiz+0x28>
   d6c58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6c5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6c60:	d40e      	bmi.n	d6c80 <__aeabi_d2uiz+0x34>
   d6c62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6c6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6c6e:	fa23 f002 	lsr.w	r0, r3, r2
   d6c72:	4770      	bx	lr
   d6c74:	f04f 0000 	mov.w	r0, #0
   d6c78:	4770      	bx	lr
   d6c7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6c7e:	d102      	bne.n	d6c86 <__aeabi_d2uiz+0x3a>
   d6c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6c84:	4770      	bx	lr
   d6c86:	f04f 0000 	mov.w	r0, #0
   d6c8a:	4770      	bx	lr

000d6c8c <__aeabi_uldivmod>:
   d6c8c:	b953      	cbnz	r3, d6ca4 <__aeabi_uldivmod+0x18>
   d6c8e:	b94a      	cbnz	r2, d6ca4 <__aeabi_uldivmod+0x18>
   d6c90:	2900      	cmp	r1, #0
   d6c92:	bf08      	it	eq
   d6c94:	2800      	cmpeq	r0, #0
   d6c96:	bf1c      	itt	ne
   d6c98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6c9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d6ca0:	f000 b98c 	b.w	d6fbc <__aeabi_idiv0>
   d6ca4:	f1ad 0c08 	sub.w	ip, sp, #8
   d6ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6cac:	f000 f824 	bl	d6cf8 <__udivmoddi4>
   d6cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6cb8:	b004      	add	sp, #16
   d6cba:	4770      	bx	lr

000d6cbc <__aeabi_d2ulz>:
   d6cbc:	b5d0      	push	{r4, r6, r7, lr}
   d6cbe:	4b0c      	ldr	r3, [pc, #48]	; (d6cf0 <__aeabi_d2ulz+0x34>)
   d6cc0:	2200      	movs	r2, #0
   d6cc2:	4606      	mov	r6, r0
   d6cc4:	460f      	mov	r7, r1
   d6cc6:	f7ff fce9 	bl	d669c <__aeabi_dmul>
   d6cca:	f7ff ffbf 	bl	d6c4c <__aeabi_d2uiz>
   d6cce:	4604      	mov	r4, r0
   d6cd0:	f7ff fc6a 	bl	d65a8 <__aeabi_ui2d>
   d6cd4:	4b07      	ldr	r3, [pc, #28]	; (d6cf4 <__aeabi_d2ulz+0x38>)
   d6cd6:	2200      	movs	r2, #0
   d6cd8:	f7ff fce0 	bl	d669c <__aeabi_dmul>
   d6cdc:	4602      	mov	r2, r0
   d6cde:	460b      	mov	r3, r1
   d6ce0:	4630      	mov	r0, r6
   d6ce2:	4639      	mov	r1, r7
   d6ce4:	f7ff fb22 	bl	d632c <__aeabi_dsub>
   d6ce8:	f7ff ffb0 	bl	d6c4c <__aeabi_d2uiz>
   d6cec:	4621      	mov	r1, r4
   d6cee:	bdd0      	pop	{r4, r6, r7, pc}
   d6cf0:	3df00000 	.word	0x3df00000
   d6cf4:	41f00000 	.word	0x41f00000

000d6cf8 <__udivmoddi4>:
   d6cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6cfc:	9d08      	ldr	r5, [sp, #32]
   d6cfe:	4604      	mov	r4, r0
   d6d00:	468c      	mov	ip, r1
   d6d02:	2b00      	cmp	r3, #0
   d6d04:	f040 8083 	bne.w	d6e0e <__udivmoddi4+0x116>
   d6d08:	428a      	cmp	r2, r1
   d6d0a:	4617      	mov	r7, r2
   d6d0c:	d947      	bls.n	d6d9e <__udivmoddi4+0xa6>
   d6d0e:	fab2 f282 	clz	r2, r2
   d6d12:	b142      	cbz	r2, d6d26 <__udivmoddi4+0x2e>
   d6d14:	f1c2 0020 	rsb	r0, r2, #32
   d6d18:	fa24 f000 	lsr.w	r0, r4, r0
   d6d1c:	4091      	lsls	r1, r2
   d6d1e:	4097      	lsls	r7, r2
   d6d20:	ea40 0c01 	orr.w	ip, r0, r1
   d6d24:	4094      	lsls	r4, r2
   d6d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6d2a:	0c23      	lsrs	r3, r4, #16
   d6d2c:	fbbc f6f8 	udiv	r6, ip, r8
   d6d30:	fa1f fe87 	uxth.w	lr, r7
   d6d34:	fb08 c116 	mls	r1, r8, r6, ip
   d6d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d6d3c:	fb06 f10e 	mul.w	r1, r6, lr
   d6d40:	4299      	cmp	r1, r3
   d6d42:	d909      	bls.n	d6d58 <__udivmoddi4+0x60>
   d6d44:	18fb      	adds	r3, r7, r3
   d6d46:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d6d4a:	f080 8119 	bcs.w	d6f80 <__udivmoddi4+0x288>
   d6d4e:	4299      	cmp	r1, r3
   d6d50:	f240 8116 	bls.w	d6f80 <__udivmoddi4+0x288>
   d6d54:	3e02      	subs	r6, #2
   d6d56:	443b      	add	r3, r7
   d6d58:	1a5b      	subs	r3, r3, r1
   d6d5a:	b2a4      	uxth	r4, r4
   d6d5c:	fbb3 f0f8 	udiv	r0, r3, r8
   d6d60:	fb08 3310 	mls	r3, r8, r0, r3
   d6d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d6d68:	fb00 fe0e 	mul.w	lr, r0, lr
   d6d6c:	45a6      	cmp	lr, r4
   d6d6e:	d909      	bls.n	d6d84 <__udivmoddi4+0x8c>
   d6d70:	193c      	adds	r4, r7, r4
   d6d72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6d76:	f080 8105 	bcs.w	d6f84 <__udivmoddi4+0x28c>
   d6d7a:	45a6      	cmp	lr, r4
   d6d7c:	f240 8102 	bls.w	d6f84 <__udivmoddi4+0x28c>
   d6d80:	3802      	subs	r0, #2
   d6d82:	443c      	add	r4, r7
   d6d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d6d88:	eba4 040e 	sub.w	r4, r4, lr
   d6d8c:	2600      	movs	r6, #0
   d6d8e:	b11d      	cbz	r5, d6d98 <__udivmoddi4+0xa0>
   d6d90:	40d4      	lsrs	r4, r2
   d6d92:	2300      	movs	r3, #0
   d6d94:	e9c5 4300 	strd	r4, r3, [r5]
   d6d98:	4631      	mov	r1, r6
   d6d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d9e:	b902      	cbnz	r2, d6da2 <__udivmoddi4+0xaa>
   d6da0:	deff      	udf	#255	; 0xff
   d6da2:	fab2 f282 	clz	r2, r2
   d6da6:	2a00      	cmp	r2, #0
   d6da8:	d150      	bne.n	d6e4c <__udivmoddi4+0x154>
   d6daa:	1bcb      	subs	r3, r1, r7
   d6dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d6db0:	fa1f f887 	uxth.w	r8, r7
   d6db4:	2601      	movs	r6, #1
   d6db6:	fbb3 fcfe 	udiv	ip, r3, lr
   d6dba:	0c21      	lsrs	r1, r4, #16
   d6dbc:	fb0e 331c 	mls	r3, lr, ip, r3
   d6dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6dc4:	fb08 f30c 	mul.w	r3, r8, ip
   d6dc8:	428b      	cmp	r3, r1
   d6dca:	d907      	bls.n	d6ddc <__udivmoddi4+0xe4>
   d6dcc:	1879      	adds	r1, r7, r1
   d6dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d6dd2:	d202      	bcs.n	d6dda <__udivmoddi4+0xe2>
   d6dd4:	428b      	cmp	r3, r1
   d6dd6:	f200 80e9 	bhi.w	d6fac <__udivmoddi4+0x2b4>
   d6dda:	4684      	mov	ip, r0
   d6ddc:	1ac9      	subs	r1, r1, r3
   d6dde:	b2a3      	uxth	r3, r4
   d6de0:	fbb1 f0fe 	udiv	r0, r1, lr
   d6de4:	fb0e 1110 	mls	r1, lr, r0, r1
   d6de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d6dec:	fb08 f800 	mul.w	r8, r8, r0
   d6df0:	45a0      	cmp	r8, r4
   d6df2:	d907      	bls.n	d6e04 <__udivmoddi4+0x10c>
   d6df4:	193c      	adds	r4, r7, r4
   d6df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6dfa:	d202      	bcs.n	d6e02 <__udivmoddi4+0x10a>
   d6dfc:	45a0      	cmp	r8, r4
   d6dfe:	f200 80d9 	bhi.w	d6fb4 <__udivmoddi4+0x2bc>
   d6e02:	4618      	mov	r0, r3
   d6e04:	eba4 0408 	sub.w	r4, r4, r8
   d6e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d6e0c:	e7bf      	b.n	d6d8e <__udivmoddi4+0x96>
   d6e0e:	428b      	cmp	r3, r1
   d6e10:	d909      	bls.n	d6e26 <__udivmoddi4+0x12e>
   d6e12:	2d00      	cmp	r5, #0
   d6e14:	f000 80b1 	beq.w	d6f7a <__udivmoddi4+0x282>
   d6e18:	2600      	movs	r6, #0
   d6e1a:	e9c5 0100 	strd	r0, r1, [r5]
   d6e1e:	4630      	mov	r0, r6
   d6e20:	4631      	mov	r1, r6
   d6e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6e26:	fab3 f683 	clz	r6, r3
   d6e2a:	2e00      	cmp	r6, #0
   d6e2c:	d14a      	bne.n	d6ec4 <__udivmoddi4+0x1cc>
   d6e2e:	428b      	cmp	r3, r1
   d6e30:	d302      	bcc.n	d6e38 <__udivmoddi4+0x140>
   d6e32:	4282      	cmp	r2, r0
   d6e34:	f200 80b8 	bhi.w	d6fa8 <__udivmoddi4+0x2b0>
   d6e38:	1a84      	subs	r4, r0, r2
   d6e3a:	eb61 0103 	sbc.w	r1, r1, r3
   d6e3e:	2001      	movs	r0, #1
   d6e40:	468c      	mov	ip, r1
   d6e42:	2d00      	cmp	r5, #0
   d6e44:	d0a8      	beq.n	d6d98 <__udivmoddi4+0xa0>
   d6e46:	e9c5 4c00 	strd	r4, ip, [r5]
   d6e4a:	e7a5      	b.n	d6d98 <__udivmoddi4+0xa0>
   d6e4c:	f1c2 0320 	rsb	r3, r2, #32
   d6e50:	fa20 f603 	lsr.w	r6, r0, r3
   d6e54:	4097      	lsls	r7, r2
   d6e56:	fa01 f002 	lsl.w	r0, r1, r2
   d6e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d6e5e:	40d9      	lsrs	r1, r3
   d6e60:	4330      	orrs	r0, r6
   d6e62:	0c03      	lsrs	r3, r0, #16
   d6e64:	fbb1 f6fe 	udiv	r6, r1, lr
   d6e68:	fa1f f887 	uxth.w	r8, r7
   d6e6c:	fb0e 1116 	mls	r1, lr, r6, r1
   d6e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d6e74:	fb06 f108 	mul.w	r1, r6, r8
   d6e78:	4299      	cmp	r1, r3
   d6e7a:	fa04 f402 	lsl.w	r4, r4, r2
   d6e7e:	d909      	bls.n	d6e94 <__udivmoddi4+0x19c>
   d6e80:	18fb      	adds	r3, r7, r3
   d6e82:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d6e86:	f080 808d 	bcs.w	d6fa4 <__udivmoddi4+0x2ac>
   d6e8a:	4299      	cmp	r1, r3
   d6e8c:	f240 808a 	bls.w	d6fa4 <__udivmoddi4+0x2ac>
   d6e90:	3e02      	subs	r6, #2
   d6e92:	443b      	add	r3, r7
   d6e94:	1a5b      	subs	r3, r3, r1
   d6e96:	b281      	uxth	r1, r0
   d6e98:	fbb3 f0fe 	udiv	r0, r3, lr
   d6e9c:	fb0e 3310 	mls	r3, lr, r0, r3
   d6ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6ea4:	fb00 f308 	mul.w	r3, r0, r8
   d6ea8:	428b      	cmp	r3, r1
   d6eaa:	d907      	bls.n	d6ebc <__udivmoddi4+0x1c4>
   d6eac:	1879      	adds	r1, r7, r1
   d6eae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d6eb2:	d273      	bcs.n	d6f9c <__udivmoddi4+0x2a4>
   d6eb4:	428b      	cmp	r3, r1
   d6eb6:	d971      	bls.n	d6f9c <__udivmoddi4+0x2a4>
   d6eb8:	3802      	subs	r0, #2
   d6eba:	4439      	add	r1, r7
   d6ebc:	1acb      	subs	r3, r1, r3
   d6ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d6ec2:	e778      	b.n	d6db6 <__udivmoddi4+0xbe>
   d6ec4:	f1c6 0c20 	rsb	ip, r6, #32
   d6ec8:	fa03 f406 	lsl.w	r4, r3, r6
   d6ecc:	fa22 f30c 	lsr.w	r3, r2, ip
   d6ed0:	431c      	orrs	r4, r3
   d6ed2:	fa20 f70c 	lsr.w	r7, r0, ip
   d6ed6:	fa01 f306 	lsl.w	r3, r1, r6
   d6eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d6ede:	fa21 f10c 	lsr.w	r1, r1, ip
   d6ee2:	431f      	orrs	r7, r3
   d6ee4:	0c3b      	lsrs	r3, r7, #16
   d6ee6:	fbb1 f9fe 	udiv	r9, r1, lr
   d6eea:	fa1f f884 	uxth.w	r8, r4
   d6eee:	fb0e 1119 	mls	r1, lr, r9, r1
   d6ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d6ef6:	fb09 fa08 	mul.w	sl, r9, r8
   d6efa:	458a      	cmp	sl, r1
   d6efc:	fa02 f206 	lsl.w	r2, r2, r6
   d6f00:	fa00 f306 	lsl.w	r3, r0, r6
   d6f04:	d908      	bls.n	d6f18 <__udivmoddi4+0x220>
   d6f06:	1861      	adds	r1, r4, r1
   d6f08:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d6f0c:	d248      	bcs.n	d6fa0 <__udivmoddi4+0x2a8>
   d6f0e:	458a      	cmp	sl, r1
   d6f10:	d946      	bls.n	d6fa0 <__udivmoddi4+0x2a8>
   d6f12:	f1a9 0902 	sub.w	r9, r9, #2
   d6f16:	4421      	add	r1, r4
   d6f18:	eba1 010a 	sub.w	r1, r1, sl
   d6f1c:	b2bf      	uxth	r7, r7
   d6f1e:	fbb1 f0fe 	udiv	r0, r1, lr
   d6f22:	fb0e 1110 	mls	r1, lr, r0, r1
   d6f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d6f2a:	fb00 f808 	mul.w	r8, r0, r8
   d6f2e:	45b8      	cmp	r8, r7
   d6f30:	d907      	bls.n	d6f42 <__udivmoddi4+0x24a>
   d6f32:	19e7      	adds	r7, r4, r7
   d6f34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d6f38:	d22e      	bcs.n	d6f98 <__udivmoddi4+0x2a0>
   d6f3a:	45b8      	cmp	r8, r7
   d6f3c:	d92c      	bls.n	d6f98 <__udivmoddi4+0x2a0>
   d6f3e:	3802      	subs	r0, #2
   d6f40:	4427      	add	r7, r4
   d6f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d6f46:	eba7 0708 	sub.w	r7, r7, r8
   d6f4a:	fba0 8902 	umull	r8, r9, r0, r2
   d6f4e:	454f      	cmp	r7, r9
   d6f50:	46c6      	mov	lr, r8
   d6f52:	4649      	mov	r1, r9
   d6f54:	d31a      	bcc.n	d6f8c <__udivmoddi4+0x294>
   d6f56:	d017      	beq.n	d6f88 <__udivmoddi4+0x290>
   d6f58:	b15d      	cbz	r5, d6f72 <__udivmoddi4+0x27a>
   d6f5a:	ebb3 020e 	subs.w	r2, r3, lr
   d6f5e:	eb67 0701 	sbc.w	r7, r7, r1
   d6f62:	fa07 fc0c 	lsl.w	ip, r7, ip
   d6f66:	40f2      	lsrs	r2, r6
   d6f68:	ea4c 0202 	orr.w	r2, ip, r2
   d6f6c:	40f7      	lsrs	r7, r6
   d6f6e:	e9c5 2700 	strd	r2, r7, [r5]
   d6f72:	2600      	movs	r6, #0
   d6f74:	4631      	mov	r1, r6
   d6f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f7a:	462e      	mov	r6, r5
   d6f7c:	4628      	mov	r0, r5
   d6f7e:	e70b      	b.n	d6d98 <__udivmoddi4+0xa0>
   d6f80:	4606      	mov	r6, r0
   d6f82:	e6e9      	b.n	d6d58 <__udivmoddi4+0x60>
   d6f84:	4618      	mov	r0, r3
   d6f86:	e6fd      	b.n	d6d84 <__udivmoddi4+0x8c>
   d6f88:	4543      	cmp	r3, r8
   d6f8a:	d2e5      	bcs.n	d6f58 <__udivmoddi4+0x260>
   d6f8c:	ebb8 0e02 	subs.w	lr, r8, r2
   d6f90:	eb69 0104 	sbc.w	r1, r9, r4
   d6f94:	3801      	subs	r0, #1
   d6f96:	e7df      	b.n	d6f58 <__udivmoddi4+0x260>
   d6f98:	4608      	mov	r0, r1
   d6f9a:	e7d2      	b.n	d6f42 <__udivmoddi4+0x24a>
   d6f9c:	4660      	mov	r0, ip
   d6f9e:	e78d      	b.n	d6ebc <__udivmoddi4+0x1c4>
   d6fa0:	4681      	mov	r9, r0
   d6fa2:	e7b9      	b.n	d6f18 <__udivmoddi4+0x220>
   d6fa4:	4666      	mov	r6, ip
   d6fa6:	e775      	b.n	d6e94 <__udivmoddi4+0x19c>
   d6fa8:	4630      	mov	r0, r6
   d6faa:	e74a      	b.n	d6e42 <__udivmoddi4+0x14a>
   d6fac:	f1ac 0c02 	sub.w	ip, ip, #2
   d6fb0:	4439      	add	r1, r7
   d6fb2:	e713      	b.n	d6ddc <__udivmoddi4+0xe4>
   d6fb4:	3802      	subs	r0, #2
   d6fb6:	443c      	add	r4, r7
   d6fb8:	e724      	b.n	d6e04 <__udivmoddi4+0x10c>
   d6fba:	bf00      	nop

000d6fbc <__aeabi_idiv0>:
   d6fbc:	4770      	bx	lr
   d6fbe:	bf00      	nop

000d6fc0 <calloc>:
   d6fc0:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <calloc+0xc>)
   d6fc2:	460a      	mov	r2, r1
   d6fc4:	4601      	mov	r1, r0
   d6fc6:	6818      	ldr	r0, [r3, #0]
   d6fc8:	f000 b826 	b.w	d7018 <_calloc_r>
   d6fcc:	2003e588 	.word	0x2003e588

000d6fd0 <__cxa_atexit>:
   d6fd0:	b510      	push	{r4, lr}
   d6fd2:	4c05      	ldr	r4, [pc, #20]	; (d6fe8 <__cxa_atexit+0x18>)
   d6fd4:	4613      	mov	r3, r2
   d6fd6:	b12c      	cbz	r4, d6fe4 <__cxa_atexit+0x14>
   d6fd8:	460a      	mov	r2, r1
   d6fda:	4601      	mov	r1, r0
   d6fdc:	2002      	movs	r0, #2
   d6fde:	f3af 8000 	nop.w
   d6fe2:	bd10      	pop	{r4, pc}
   d6fe4:	4620      	mov	r0, r4
   d6fe6:	e7fc      	b.n	d6fe2 <__cxa_atexit+0x12>
   d6fe8:	00000000 	.word	0x00000000

000d6fec <memcpy>:
   d6fec:	440a      	add	r2, r1
   d6fee:	4291      	cmp	r1, r2
   d6ff0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6ff4:	d100      	bne.n	d6ff8 <memcpy+0xc>
   d6ff6:	4770      	bx	lr
   d6ff8:	b510      	push	{r4, lr}
   d6ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7002:	4291      	cmp	r1, r2
   d7004:	d1f9      	bne.n	d6ffa <memcpy+0xe>
   d7006:	bd10      	pop	{r4, pc}

000d7008 <memset>:
   d7008:	4402      	add	r2, r0
   d700a:	4603      	mov	r3, r0
   d700c:	4293      	cmp	r3, r2
   d700e:	d100      	bne.n	d7012 <memset+0xa>
   d7010:	4770      	bx	lr
   d7012:	f803 1b01 	strb.w	r1, [r3], #1
   d7016:	e7f9      	b.n	d700c <memset+0x4>

000d7018 <_calloc_r>:
   d7018:	b513      	push	{r0, r1, r4, lr}
   d701a:	434a      	muls	r2, r1
   d701c:	4611      	mov	r1, r2
   d701e:	9201      	str	r2, [sp, #4]
   d7020:	f7fd ff7c 	bl	d4f1c <_malloc_r>
   d7024:	4604      	mov	r4, r0
   d7026:	b118      	cbz	r0, d7030 <_calloc_r+0x18>
   d7028:	9a01      	ldr	r2, [sp, #4]
   d702a:	2100      	movs	r1, #0
   d702c:	f7ff ffec 	bl	d7008 <memset>
   d7030:	4620      	mov	r0, r4
   d7032:	b002      	add	sp, #8
   d7034:	bd10      	pop	{r4, pc}
	...

000d7038 <srand>:
   d7038:	b538      	push	{r3, r4, r5, lr}
   d703a:	4b0d      	ldr	r3, [pc, #52]	; (d7070 <srand+0x38>)
   d703c:	681d      	ldr	r5, [r3, #0]
   d703e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7040:	4604      	mov	r4, r0
   d7042:	b97b      	cbnz	r3, d7064 <srand+0x2c>
   d7044:	2018      	movs	r0, #24
   d7046:	f7fd ff49 	bl	d4edc <malloc>
   d704a:	4a0a      	ldr	r2, [pc, #40]	; (d7074 <srand+0x3c>)
   d704c:	4b0a      	ldr	r3, [pc, #40]	; (d7078 <srand+0x40>)
   d704e:	63a8      	str	r0, [r5, #56]	; 0x38
   d7050:	e9c0 2300 	strd	r2, r3, [r0]
   d7054:	4b09      	ldr	r3, [pc, #36]	; (d707c <srand+0x44>)
   d7056:	6083      	str	r3, [r0, #8]
   d7058:	230b      	movs	r3, #11
   d705a:	8183      	strh	r3, [r0, #12]
   d705c:	2201      	movs	r2, #1
   d705e:	2300      	movs	r3, #0
   d7060:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7064:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7066:	2200      	movs	r2, #0
   d7068:	611c      	str	r4, [r3, #16]
   d706a:	615a      	str	r2, [r3, #20]
   d706c:	bd38      	pop	{r3, r4, r5, pc}
   d706e:	bf00      	nop
   d7070:	2003e588 	.word	0x2003e588
   d7074:	abcd330e 	.word	0xabcd330e
   d7078:	e66d1234 	.word	0xe66d1234
   d707c:	0005deec 	.word	0x0005deec

000d7080 <strdup>:
   d7080:	4b02      	ldr	r3, [pc, #8]	; (d708c <strdup+0xc>)
   d7082:	4601      	mov	r1, r0
   d7084:	6818      	ldr	r0, [r3, #0]
   d7086:	f000 b803 	b.w	d7090 <_strdup_r>
   d708a:	bf00      	nop
   d708c:	2003e588 	.word	0x2003e588

000d7090 <_strdup_r>:
   d7090:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7092:	4604      	mov	r4, r0
   d7094:	4608      	mov	r0, r1
   d7096:	460d      	mov	r5, r1
   d7098:	f000 f80f 	bl	d70ba <strlen>
   d709c:	1c42      	adds	r2, r0, #1
   d709e:	4611      	mov	r1, r2
   d70a0:	4620      	mov	r0, r4
   d70a2:	9201      	str	r2, [sp, #4]
   d70a4:	f7fd ff3a 	bl	d4f1c <_malloc_r>
   d70a8:	4604      	mov	r4, r0
   d70aa:	b118      	cbz	r0, d70b4 <_strdup_r+0x24>
   d70ac:	9a01      	ldr	r2, [sp, #4]
   d70ae:	4629      	mov	r1, r5
   d70b0:	f7ff ff9c 	bl	d6fec <memcpy>
   d70b4:	4620      	mov	r0, r4
   d70b6:	b003      	add	sp, #12
   d70b8:	bd30      	pop	{r4, r5, pc}

000d70ba <strlen>:
   d70ba:	4603      	mov	r3, r0
   d70bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d70c0:	2a00      	cmp	r2, #0
   d70c2:	d1fb      	bne.n	d70bc <strlen+0x2>
   d70c4:	1a18      	subs	r0, r3, r0
   d70c6:	3801      	subs	r0, #1
   d70c8:	4770      	bx	lr

000d70ca <link_code_end>:
	...

000d70cc <dynalib_user>:
   d70cc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d70dc:	0000 0000 4844 3154 2031 6574 7473 5000     ....DHT11 test.P
   d70ec:	7261 6974 6c63 0065 6557 7461 6568 0072     article.Weather.
   d70fc:	7453 7461 6f69 006e 6146 6c69 6465 7420     Station.Failed t
   d710c:	206f 6572 6461 6620 6f72 206d 4844 2054     o read from DHT 
   d711c:	6573 736e 726f 7400 6d65 4370 7400 6d65     sensor.tempC.tem
   d712c:	4670 6800 6d75 6469                          pF.humid.

000d7135 <_ZL9BasicFont>:
	...
   d713d:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d714d:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d715d:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d716d:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d717d:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d718d:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d719d:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d71ad:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d71bd:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d71cd:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d71dd:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d71ed:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d71fd:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d720d:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d721d:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d722d:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d723d:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d724d:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d725d:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d726d:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d727d:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d728d:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d729d:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d72ad:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d72bd:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d72cd:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d72dd:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d72ed:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d72fd:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d730d:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d731d:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d732d:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d733d:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d734d:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d735d:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d736d:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d737d:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d738d:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d739d:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d73ad:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d73bd:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d73cd:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d73dd:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d73ed:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d73fd:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d740d:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d741d:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d742d:	0200 0505 0002 0000 0000                     ...........

000d7438 <_ZTVN5spark13CellularClassE>:
	...
   d7440:	5047 000d 503d 000d 5033 000d 4fe9 000d     GP..=P..3P...O..
   d7450:	5027 000d 501b 000d 581d 000d 5825 000d     'P...P...X..%X..
   d7460:	500f 000d 5007 000d 4ffd 000d 4ff3 000d     .P...P...O...O..
   d7470:	5855 000d                                   UX..

000d7474 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d747c:	5081 000d 5087 000d 50c5 000d 5095 000d     .P...P...P...P..
   d748c:	5083 000d                                   .P..

000d7490 <_ZTVN5spark13EthernetClassE>:
	...
   d7498:	5617 000d 560d 000d 5603 000d 55f9 000d     .V...V...V...U..
   d74a8:	55ed 000d 55e1 000d 581d 000d 5825 000d     .U...U...X..%X..
   d74b8:	55d5 000d 55cd 000d 55c3 000d 55b9 000d     .U...U...U...U..
   d74c8:	5855 000d                                   UX..

000d74cc <_ZTV7TwoWire>:
	...
   d74d4:	5635 000d 567f 000d 5657 000d 5637 000d     5V...V..WV..7V..
   d74e4:	565f 000d 5667 000d 566f 000d 5677 000d     _V..gV..oV..wV..

000d74f4 <_ZTV9IPAddress>:
	...
   d74fc:	56f1 000d 56e1 000d 56e3 000d 7061 0070     .V...V...V..app.

000d750c <_ZTVN5spark12NetworkClassE>:
	...
   d7514:	57dd 000d 57e7 000d 57f1 000d 57fb 000d     .W...W...W...W..
   d7524:	5805 000d 5811 000d 581d 000d 5825 000d     .X...X...X..%X..
   d7534:	582d 000d 5839 000d 5841 000d 584b 000d     -X..9X..AX..KX..
   d7544:	5855 000d 616e 006e 6e69 0066 766f 0066     UX..nan.inf.ovf.
   d7554:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   d7564:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d7574 <_ZTV11USARTSerial>:
	...
   d757c:	5e15 000d 5e81 000d 5e59 000d 5949 000d     .^...^..Y^..IY..
   d758c:	5e29 000d 5e45 000d 5e37 000d 5e53 000d     )^..E^..7^..S^..
   d759c:	5e17 000d 5e1b 000d                         .^...^..

000d75a4 <_ZTV9USBSerial>:
	...
   d75ac:	5f15 000d 5f7d 000d 5f53 000d 5949 000d     ._..}_..S_..IY..
   d75bc:	5f45 000d 5f17 000d 5f27 000d 5f77 000d     E_..._..'_..w_..
   d75cc:	5f37 000d 5f11 000d                         7_..._..

000d75d4 <_ZSt7nothrow>:
	...

000d75d5 <link_const_variable_data_end>:
   d75d5:	00          	.byte	0x00
	...

000d75d8 <link_constructors_location>:
   d75d8:	000d42cd 	.word	0x000d42cd
   d75dc:	000d4fc1 	.word	0x000d4fc1
   d75e0:	000d5051 	.word	0x000d5051
   d75e4:	000d5621 	.word	0x000d5621
   d75e8:	000d57cd 	.word	0x000d57cd
   d75ec:	000d5935 	.word	0x000d5935
   d75f0:	000d5bcd 	.word	0x000d5bcd
   d75f4:	000d5dc5 	.word	0x000d5dc5
   d75f8:	000d5e01 	.word	0x000d5e01

000d75fc <link_constructors_end>:
   d75fc:	00000000 	.word	0x00000000
